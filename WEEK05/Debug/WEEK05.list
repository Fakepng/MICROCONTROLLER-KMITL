
WEEK05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eb8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003f74  08003f74  00004f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800400c  0800400c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  0800400c  0800400c  0000500c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004014  08004014  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004014  08004014  00005014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004018  08004018  00005018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800401c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08004028  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08004028  0000611c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbcc  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc3  00000000  00000000  00011c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  000139c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006cd  00000000  00000000  00014298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f78  00000000  00000000  00014965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc6d  00000000  00000000  0002b8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092e75  00000000  00000000  0003754a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca3bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e78  00000000  00000000  000ca404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000cc27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003f5c 	.word	0x08003f5c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003f5c 	.word	0x08003f5c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fa8b 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f84d 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f915 	bl	8000858 <MX_GPIO_Init>
  MX_DMA_Init();
 800062e:	f000 f8f5 	bl	800081c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000632:	f000 f8a5 	bl	8000780 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  volatile unsigned char Rx_value;

  HAL_UART_Receive_DMA(&huart2, &Rx_value, 1);
 8000636:	1df9      	adds	r1, r7, #7
 8000638:	4b20      	ldr	r3, [pc, #128]	@ (80006bc <main+0xa0>)
 800063a:	2201      	movs	r2, #1
 800063c:	0018      	movs	r0, r3
 800063e:	f002 f867 	bl	8002710 <HAL_UART_Receive_DMA>

  HAL_UART_Transmit(&huart2, "Fakepng DMA\r\n", 13, 1000);
 8000642:	23fa      	movs	r3, #250	@ 0xfa
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	491e      	ldr	r1, [pc, #120]	@ (80006c0 <main+0xa4>)
 8000648:	481c      	ldr	r0, [pc, #112]	@ (80006bc <main+0xa0>)
 800064a:	220d      	movs	r2, #13
 800064c:	f001 ffbc 	bl	80025c8 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ((Rx_value >= 'A' || Rx_value >= 'a') && (Rx_value <= 'Z' || Rx_value <= 'z')) ? HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin, 1) : HAL_Delay(0);
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b40      	cmp	r3, #64	@ 0x40
 8000658:	d804      	bhi.n	8000664 <main+0x48>
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b60      	cmp	r3, #96	@ 0x60
 8000662:	d911      	bls.n	8000688 <main+0x6c>
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b5a      	cmp	r3, #90	@ 0x5a
 800066c:	d904      	bls.n	8000678 <main+0x5c>
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b7a      	cmp	r3, #122	@ 0x7a
 8000676:	d807      	bhi.n	8000688 <main+0x6c>
 8000678:	23a0      	movs	r3, #160	@ 0xa0
 800067a:	05db      	lsls	r3, r3, #23
 800067c:	2201      	movs	r2, #1
 800067e:	2120      	movs	r1, #32
 8000680:	0018      	movs	r0, r3
 8000682:	f001 f865 	bl	8001750 <HAL_GPIO_WritePin>
 8000686:	e002      	b.n	800068e <main+0x72>
 8000688:	2000      	movs	r0, #0
 800068a:	f000 fadd 	bl	8000c48 <HAL_Delay>
	  (Rx_value >= '1' && Rx_value <= '9') ? HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin, 0) : HAL_Delay(0);
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	2b30      	cmp	r3, #48	@ 0x30
 8000696:	d90c      	bls.n	80006b2 <main+0x96>
 8000698:	1dfb      	adds	r3, r7, #7
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2b39      	cmp	r3, #57	@ 0x39
 80006a0:	d807      	bhi.n	80006b2 <main+0x96>
 80006a2:	23a0      	movs	r3, #160	@ 0xa0
 80006a4:	05db      	lsls	r3, r3, #23
 80006a6:	2200      	movs	r2, #0
 80006a8:	2120      	movs	r1, #32
 80006aa:	0018      	movs	r0, r3
 80006ac:	f001 f850 	bl	8001750 <HAL_GPIO_WritePin>
 80006b0:	e002      	b.n	80006b8 <main+0x9c>
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 fac8 	bl	8000c48 <HAL_Delay>
	  ((Rx_value >= 'A' || Rx_value >= 'a') && (Rx_value <= 'Z' || Rx_value <= 'z')) ? HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin, 1) : HAL_Delay(0);
 80006b8:	e7ca      	b.n	8000650 <main+0x34>
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	20000028 	.word	0x20000028
 80006c0:	08003f74 	.word	0x08003f74

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b093      	sub	sp, #76	@ 0x4c
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	2410      	movs	r4, #16
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	0018      	movs	r0, r3
 80006d0:	2338      	movs	r3, #56	@ 0x38
 80006d2:	001a      	movs	r2, r3
 80006d4:	2100      	movs	r1, #0
 80006d6:	f003 fc15 	bl	8003f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006da:	003b      	movs	r3, r7
 80006dc:	0018      	movs	r0, r3
 80006de:	2310      	movs	r3, #16
 80006e0:	001a      	movs	r2, r3
 80006e2:	2100      	movs	r1, #0
 80006e4:	f003 fc0e 	bl	8003f04 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e8:	2380      	movs	r3, #128	@ 0x80
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f001 f84d 	bl	800178c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2202      	movs	r2, #2
 80006f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2280      	movs	r2, #128	@ 0x80
 80006fc:	0052      	lsls	r2, r2, #1
 80006fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000700:	0021      	movs	r1, r4
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2240      	movs	r2, #64	@ 0x40
 800070c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2202      	movs	r2, #2
 8000712:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2202      	movs	r2, #2
 8000718:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2208      	movs	r2, #8
 8000724:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2280      	movs	r2, #128	@ 0x80
 800072a:	0292      	lsls	r2, r2, #10
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2280      	movs	r2, #128	@ 0x80
 8000732:	0492      	lsls	r2, r2, #18
 8000734:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2280      	movs	r2, #128	@ 0x80
 800073a:	0592      	lsls	r2, r2, #22
 800073c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	187b      	adds	r3, r7, r1
 8000740:	0018      	movs	r0, r3
 8000742:	f001 f86f 	bl	8001824 <HAL_RCC_OscConfig>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800074a:	f000 f8d5 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074e:	003b      	movs	r3, r7
 8000750:	2207      	movs	r2, #7
 8000752:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	003b      	movs	r3, r7
 8000756:	2202      	movs	r2, #2
 8000758:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	003b      	movs	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000760:	003b      	movs	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000766:	003b      	movs	r3, r7
 8000768:	2102      	movs	r1, #2
 800076a:	0018      	movs	r0, r3
 800076c:	f001 fb74 	bl	8001e58 <HAL_RCC_ClockConfig>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000774:	f000 f8c0 	bl	80008f8 <Error_Handler>
  }
}
 8000778:	46c0      	nop			@ (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b013      	add	sp, #76	@ 0x4c
 800077e:	bd90      	pop	{r4, r7, pc}

08000780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000784:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <MX_USART2_UART_Init+0x94>)
 8000786:	4a24      	ldr	r2, [pc, #144]	@ (8000818 <MX_USART2_UART_Init+0x98>)
 8000788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078a:	4b22      	ldr	r3, [pc, #136]	@ (8000814 <MX_USART2_UART_Init+0x94>)
 800078c:	22e1      	movs	r2, #225	@ 0xe1
 800078e:	0252      	lsls	r2, r2, #9
 8000790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <MX_USART2_UART_Init+0x94>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b1e      	ldr	r3, [pc, #120]	@ (8000814 <MX_USART2_UART_Init+0x94>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <MX_USART2_UART_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <MX_USART2_UART_Init+0x94>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <MX_USART2_UART_Init+0x94>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <MX_USART2_UART_Init+0x94>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <MX_USART2_UART_Init+0x94>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007bc:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <MX_USART2_UART_Init+0x94>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c2:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_USART2_UART_Init+0x94>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <MX_USART2_UART_Init+0x94>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f001 fea6 	bl	800251c <HAL_UART_Init>
 80007d0:	1e03      	subs	r3, r0, #0
 80007d2:	d001      	beq.n	80007d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007d4:	f000 f890 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_USART2_UART_Init+0x94>)
 80007da:	2100      	movs	r1, #0
 80007dc:	0018      	movs	r0, r3
 80007de:	f003 fab1 	bl	8003d44 <HAL_UARTEx_SetTxFifoThreshold>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007e6:	f000 f887 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <MX_USART2_UART_Init+0x94>)
 80007ec:	2100      	movs	r1, #0
 80007ee:	0018      	movs	r0, r3
 80007f0:	f003 fae8 	bl	8003dc4 <HAL_UARTEx_SetRxFifoThreshold>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007f8:	f000 f87e 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007fc:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <MX_USART2_UART_Init+0x94>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f003 fa66 	bl	8003cd0 <HAL_UARTEx_DisableFifoMode>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000808:	f000 f876 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080c:	46c0      	nop			@ (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	20000028 	.word	0x20000028
 8000818:	40004400 	.word	0x40004400

0800081c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000822:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_DMA_Init+0x38>)
 8000824:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_DMA_Init+0x38>)
 8000828:	2101      	movs	r1, #1
 800082a:	430a      	orrs	r2, r1
 800082c:	639a      	str	r2, [r3, #56]	@ 0x38
 800082e:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_DMA_Init+0x38>)
 8000830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000832:	2201      	movs	r2, #1
 8000834:	4013      	ands	r3, r2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	200a      	movs	r0, #10
 8000840:	f000 fad2 	bl	8000de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000844:	200a      	movs	r0, #10
 8000846:	f000 fae4 	bl	8000e12 <HAL_NVIC_EnableIRQ>

}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	40021000 	.word	0x40021000

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b089      	sub	sp, #36	@ 0x24
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	240c      	movs	r4, #12
 8000860:	193b      	adds	r3, r7, r4
 8000862:	0018      	movs	r0, r3
 8000864:	2314      	movs	r3, #20
 8000866:	001a      	movs	r2, r3
 8000868:	2100      	movs	r1, #0
 800086a:	f003 fb4b 	bl	8003f04 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b21      	ldr	r3, [pc, #132]	@ (80008f4 <MX_GPIO_Init+0x9c>)
 8000870:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000872:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <MX_GPIO_Init+0x9c>)
 8000874:	2104      	movs	r1, #4
 8000876:	430a      	orrs	r2, r1
 8000878:	635a      	str	r2, [r3, #52]	@ 0x34
 800087a:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <MX_GPIO_Init+0x9c>)
 800087c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800087e:	2204      	movs	r2, #4
 8000880:	4013      	ands	r3, r2
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000886:	4b1b      	ldr	r3, [pc, #108]	@ (80008f4 <MX_GPIO_Init+0x9c>)
 8000888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800088a:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <MX_GPIO_Init+0x9c>)
 800088c:	2120      	movs	r1, #32
 800088e:	430a      	orrs	r2, r1
 8000890:	635a      	str	r2, [r3, #52]	@ 0x34
 8000892:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <MX_GPIO_Init+0x9c>)
 8000894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000896:	2220      	movs	r2, #32
 8000898:	4013      	ands	r3, r2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <MX_GPIO_Init+0x9c>)
 80008a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_GPIO_Init+0x9c>)
 80008a4:	2101      	movs	r1, #1
 80008a6:	430a      	orrs	r2, r1
 80008a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80008aa:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_GPIO_Init+0x9c>)
 80008ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ae:	2201      	movs	r2, #1
 80008b0:	4013      	ands	r3, r2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008b6:	23a0      	movs	r3, #160	@ 0xa0
 80008b8:	05db      	lsls	r3, r3, #23
 80008ba:	2200      	movs	r2, #0
 80008bc:	2120      	movs	r1, #32
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 ff46 	bl	8001750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008c4:	0021      	movs	r1, r4
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2220      	movs	r2, #32
 80008ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2201      	movs	r2, #1
 80008d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2202      	movs	r2, #2
 80008dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80008de:	187a      	adds	r2, r7, r1
 80008e0:	23a0      	movs	r3, #160	@ 0xa0
 80008e2:	05db      	lsls	r3, r3, #23
 80008e4:	0011      	movs	r1, r2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 fdce 	bl	8001488 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ec:	46c0      	nop			@ (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b009      	add	sp, #36	@ 0x24
 80008f2:	bd90      	pop	{r4, r7, pc}
 80008f4:	40021000 	.word	0x40021000

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	46c0      	nop			@ (mov r8, r8)
 8000902:	e7fd      	b.n	8000900 <Error_Handler+0x8>

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <HAL_MspInit+0x44>)
 800090c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <HAL_MspInit+0x44>)
 8000910:	2101      	movs	r1, #1
 8000912:	430a      	orrs	r2, r1
 8000914:	641a      	str	r2, [r3, #64]	@ 0x40
 8000916:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <HAL_MspInit+0x44>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	2201      	movs	r2, #1
 800091c:	4013      	ands	r3, r2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <HAL_MspInit+0x44>)
 8000924:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <HAL_MspInit+0x44>)
 8000928:	2180      	movs	r1, #128	@ 0x80
 800092a:	0549      	lsls	r1, r1, #21
 800092c:	430a      	orrs	r2, r1
 800092e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000930:	4b05      	ldr	r3, [pc, #20]	@ (8000948 <HAL_MspInit+0x44>)
 8000932:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000934:	2380      	movs	r3, #128	@ 0x80
 8000936:	055b      	lsls	r3, r3, #21
 8000938:	4013      	ands	r3, r2
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	40021000 	.word	0x40021000

0800094c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b097      	sub	sp, #92	@ 0x5c
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	2344      	movs	r3, #68	@ 0x44
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	0018      	movs	r0, r3
 800095a:	2314      	movs	r3, #20
 800095c:	001a      	movs	r2, r3
 800095e:	2100      	movs	r1, #0
 8000960:	f003 fad0 	bl	8003f04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000964:	2410      	movs	r4, #16
 8000966:	193b      	adds	r3, r7, r4
 8000968:	0018      	movs	r0, r3
 800096a:	2334      	movs	r3, #52	@ 0x34
 800096c:	001a      	movs	r2, r3
 800096e:	2100      	movs	r1, #0
 8000970:	f003 fac8 	bl	8003f04 <memset>
  if(huart->Instance==USART2)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a3b      	ldr	r2, [pc, #236]	@ (8000a68 <HAL_UART_MspInit+0x11c>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d170      	bne.n	8000a60 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2202      	movs	r2, #2
 8000982:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098a:	193b      	adds	r3, r7, r4
 800098c:	0018      	movs	r0, r3
 800098e:	f001 fc0d 	bl	80021ac <HAL_RCCEx_PeriphCLKConfig>
 8000992:	1e03      	subs	r3, r0, #0
 8000994:	d001      	beq.n	800099a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000996:	f7ff ffaf 	bl	80008f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099a:	4b34      	ldr	r3, [pc, #208]	@ (8000a6c <HAL_UART_MspInit+0x120>)
 800099c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800099e:	4b33      	ldr	r3, [pc, #204]	@ (8000a6c <HAL_UART_MspInit+0x120>)
 80009a0:	2180      	movs	r1, #128	@ 0x80
 80009a2:	0289      	lsls	r1, r1, #10
 80009a4:	430a      	orrs	r2, r1
 80009a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009a8:	4b30      	ldr	r3, [pc, #192]	@ (8000a6c <HAL_UART_MspInit+0x120>)
 80009aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009ac:	2380      	movs	r3, #128	@ 0x80
 80009ae:	029b      	lsls	r3, r3, #10
 80009b0:	4013      	ands	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a6c <HAL_UART_MspInit+0x120>)
 80009b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ba:	4b2c      	ldr	r3, [pc, #176]	@ (8000a6c <HAL_UART_MspInit+0x120>)
 80009bc:	2101      	movs	r1, #1
 80009be:	430a      	orrs	r2, r1
 80009c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80009c2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a6c <HAL_UART_MspInit+0x120>)
 80009c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009c6:	2201      	movs	r2, #1
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80009ce:	2144      	movs	r1, #68	@ 0x44
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	220c      	movs	r2, #12
 80009d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2202      	movs	r2, #2
 80009da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2201      	movs	r2, #1
 80009e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2201      	movs	r2, #1
 80009ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	187a      	adds	r2, r7, r1
 80009f0:	23a0      	movs	r3, #160	@ 0xa0
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fd46 	bl	8001488 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <HAL_UART_MspInit+0x124>)
 80009fe:	4a1d      	ldr	r2, [pc, #116]	@ (8000a74 <HAL_UART_MspInit+0x128>)
 8000a00:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000a02:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <HAL_UART_MspInit+0x124>)
 8000a04:	2234      	movs	r2, #52	@ 0x34
 8000a06:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a08:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <HAL_UART_MspInit+0x124>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <HAL_UART_MspInit+0x124>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a14:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <HAL_UART_MspInit+0x124>)
 8000a16:	2280      	movs	r2, #128	@ 0x80
 8000a18:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <HAL_UART_MspInit+0x124>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a20:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <HAL_UART_MspInit+0x124>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000a26:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <HAL_UART_MspInit+0x124>)
 8000a28:	2220      	movs	r2, #32
 8000a2a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a2c:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <HAL_UART_MspInit+0x124>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a32:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <HAL_UART_MspInit+0x124>)
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 fa09 	bl	8000e4c <HAL_DMA_Init>
 8000a3a:	1e03      	subs	r3, r0, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8000a3e:	f7ff ff5b 	bl	80008f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2180      	movs	r1, #128	@ 0x80
 8000a46:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <HAL_UART_MspInit+0x124>)
 8000a48:	505a      	str	r2, [r3, r1]
 8000a4a:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <HAL_UART_MspInit+0x124>)
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	201c      	movs	r0, #28
 8000a56:	f000 f9c7 	bl	8000de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a5a:	201c      	movs	r0, #28
 8000a5c:	f000 f9d9 	bl	8000e12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a60:	46c0      	nop			@ (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b017      	add	sp, #92	@ 0x5c
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	40004400 	.word	0x40004400
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	200000bc 	.word	0x200000bc
 8000a74:	4002001c 	.word	0x4002001c

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	46c0      	nop			@ (mov r8, r8)
 8000a7e:	e7fd      	b.n	8000a7c <NMI_Handler+0x4>

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	e7fd      	b.n	8000a84 <HardFault_Handler+0x4>

08000a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a8c:	46c0      	nop			@ (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 f8b6 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ab0:	4b03      	ldr	r3, [pc, #12]	@ (8000ac0 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 fba6 	bl	8001204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	200000bc 	.word	0x200000bc

08000ac4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ac8:	4b03      	ldr	r3, [pc, #12]	@ (8000ad8 <USART2_IRQHandler+0x14>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f001 fe7e 	bl	80027cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ad0:	46c0      	nop			@ (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	20000028 	.word	0x20000028

08000adc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ae8:	480d      	ldr	r0, [pc, #52]	@ (8000b20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aec:	f7ff fff6 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	480c      	ldr	r0, [pc, #48]	@ (8000b24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000af2:	490d      	ldr	r1, [pc, #52]	@ (8000b28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b2c <LoopForever+0xe>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b08:	4c0a      	ldr	r4, [pc, #40]	@ (8000b34 <LoopForever+0x16>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b16:	f003 f9fd 	bl	8003f14 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b1a:	f7ff fd7f 	bl	800061c <main>

08000b1e <LoopForever>:

LoopForever:
  b LoopForever
 8000b1e:	e7fe      	b.n	8000b1e <LoopForever>
  ldr   r0, =_estack
 8000b20:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b2c:	0800401c 	.word	0x0800401c
  ldr r2, =_sbss
 8000b30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b34:	2000011c 	.word	0x2000011c

08000b38 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_COMP_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <HAL_Init+0x3c>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <HAL_Init+0x3c>)
 8000b4e:	2180      	movs	r1, #128	@ 0x80
 8000b50:	0049      	lsls	r1, r1, #1
 8000b52:	430a      	orrs	r2, r1
 8000b54:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 f810 	bl	8000b7c <HAL_InitTick>
 8000b5c:	1e03      	subs	r3, r0, #0
 8000b5e:	d003      	beq.n	8000b68 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b60:	1dfb      	adds	r3, r7, #7
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
 8000b66:	e001      	b.n	8000b6c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b68:	f7ff fecc 	bl	8000904 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b6c:	1dfb      	adds	r3, r7, #7
 8000b6e:	781b      	ldrb	r3, [r3, #0]
}
 8000b70:	0018      	movs	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b002      	add	sp, #8
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40022000 	.word	0x40022000

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b84:	230f      	movs	r3, #15
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <HAL_InitTick+0x88>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d02b      	beq.n	8000bec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b94:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <HAL_InitTick+0x8c>)
 8000b96:	681c      	ldr	r4, [r3, #0]
 8000b98:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <HAL_InitTick+0x88>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	23fa      	movs	r3, #250	@ 0xfa
 8000ba0:	0098      	lsls	r0, r3, #2
 8000ba2:	f7ff faaf 	bl	8000104 <__udivsi3>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	0019      	movs	r1, r3
 8000baa:	0020      	movs	r0, r4
 8000bac:	f7ff faaa 	bl	8000104 <__udivsi3>
 8000bb0:	0003      	movs	r3, r0
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f000 f93d 	bl	8000e32 <HAL_SYSTICK_Config>
 8000bb8:	1e03      	subs	r3, r0, #0
 8000bba:	d112      	bne.n	8000be2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d80a      	bhi.n	8000bd8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	425b      	negs	r3, r3
 8000bc8:	2200      	movs	r2, #0
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 f90c 	bl	8000de8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <HAL_InitTick+0x90>)
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	e00d      	b.n	8000bf4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bd8:	230f      	movs	r3, #15
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
 8000be0:	e008      	b.n	8000bf4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000be2:	230f      	movs	r3, #15
 8000be4:	18fb      	adds	r3, r7, r3
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	e003      	b.n	8000bf4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bec:	230f      	movs	r3, #15
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	781b      	ldrb	r3, [r3, #0]
}
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b005      	add	sp, #20
 8000c00:	bd90      	pop	{r4, r7, pc}
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c14:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <HAL_IncTick+0x1c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	001a      	movs	r2, r3
 8000c1a:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <HAL_IncTick+0x20>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	18d2      	adds	r2, r2, r3
 8000c20:	4b03      	ldr	r3, [pc, #12]	@ (8000c30 <HAL_IncTick+0x20>)
 8000c22:	601a      	str	r2, [r3, #0]
}
 8000c24:	46c0      	nop			@ (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000118 	.word	0x20000118

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b02      	ldr	r3, [pc, #8]	@ (8000c44 <HAL_GetTick+0x10>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	20000118 	.word	0x20000118

08000c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c50:	f7ff fff0 	bl	8000c34 <HAL_GetTick>
 8000c54:	0003      	movs	r3, r0
 8000c56:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	d005      	beq.n	8000c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c62:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <HAL_Delay+0x44>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	001a      	movs	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	189b      	adds	r3, r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c6e:	46c0      	nop			@ (mov r8, r8)
 8000c70:	f7ff ffe0 	bl	8000c34 <HAL_GetTick>
 8000c74:	0002      	movs	r2, r0
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d8f7      	bhi.n	8000c70 <HAL_Delay+0x28>
  {
  }
}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b004      	add	sp, #16
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	20000008 	.word	0x20000008

08000c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	0002      	movs	r2, r0
 8000c98:	1dfb      	adds	r3, r7, #7
 8000c9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ca2:	d809      	bhi.n	8000cb8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	001a      	movs	r2, r3
 8000caa:	231f      	movs	r3, #31
 8000cac:	401a      	ands	r2, r3
 8000cae:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <__NVIC_EnableIRQ+0x30>)
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	4091      	lsls	r1, r2
 8000cb4:	000a      	movs	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000cb8:	46c0      	nop			@ (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	e000e100 	.word	0xe000e100

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	0002      	movs	r2, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cd8:	d828      	bhi.n	8000d2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cda:	4a2f      	ldr	r2, [pc, #188]	@ (8000d98 <__NVIC_SetPriority+0xd4>)
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	33c0      	adds	r3, #192	@ 0xc0
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	589b      	ldr	r3, [r3, r2]
 8000cea:	1dfa      	adds	r2, r7, #7
 8000cec:	7812      	ldrb	r2, [r2, #0]
 8000cee:	0011      	movs	r1, r2
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	00d2      	lsls	r2, r2, #3
 8000cf6:	21ff      	movs	r1, #255	@ 0xff
 8000cf8:	4091      	lsls	r1, r2
 8000cfa:	000a      	movs	r2, r1
 8000cfc:	43d2      	mvns	r2, r2
 8000cfe:	401a      	ands	r2, r3
 8000d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	019b      	lsls	r3, r3, #6
 8000d06:	22ff      	movs	r2, #255	@ 0xff
 8000d08:	401a      	ands	r2, r3
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	0018      	movs	r0, r3
 8000d10:	2303      	movs	r3, #3
 8000d12:	4003      	ands	r3, r0
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d18:	481f      	ldr	r0, [pc, #124]	@ (8000d98 <__NVIC_SetPriority+0xd4>)
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	b25b      	sxtb	r3, r3
 8000d20:	089b      	lsrs	r3, r3, #2
 8000d22:	430a      	orrs	r2, r1
 8000d24:	33c0      	adds	r3, #192	@ 0xc0
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d2a:	e031      	b.n	8000d90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000d9c <__NVIC_SetPriority+0xd8>)
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	0019      	movs	r1, r3
 8000d34:	230f      	movs	r3, #15
 8000d36:	400b      	ands	r3, r1
 8000d38:	3b08      	subs	r3, #8
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	3306      	adds	r3, #6
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	18d3      	adds	r3, r2, r3
 8000d42:	3304      	adds	r3, #4
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	1dfa      	adds	r2, r7, #7
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	400a      	ands	r2, r1
 8000d50:	00d2      	lsls	r2, r2, #3
 8000d52:	21ff      	movs	r1, #255	@ 0xff
 8000d54:	4091      	lsls	r1, r2
 8000d56:	000a      	movs	r2, r1
 8000d58:	43d2      	mvns	r2, r2
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	019b      	lsls	r3, r3, #6
 8000d62:	22ff      	movs	r2, #255	@ 0xff
 8000d64:	401a      	ands	r2, r3
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	4003      	ands	r3, r0
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d74:	4809      	ldr	r0, [pc, #36]	@ (8000d9c <__NVIC_SetPriority+0xd8>)
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	001c      	movs	r4, r3
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	4023      	ands	r3, r4
 8000d80:	3b08      	subs	r3, #8
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	430a      	orrs	r2, r1
 8000d86:	3306      	adds	r3, #6
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	18c3      	adds	r3, r0, r3
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	601a      	str	r2, [r3, #0]
}
 8000d90:	46c0      	nop			@ (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b003      	add	sp, #12
 8000d96:	bd90      	pop	{r4, r7, pc}
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	1e5a      	subs	r2, r3, #1
 8000dac:	2380      	movs	r3, #128	@ 0x80
 8000dae:	045b      	lsls	r3, r3, #17
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d301      	bcc.n	8000db8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db4:	2301      	movs	r3, #1
 8000db6:	e010      	b.n	8000dda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db8:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <SysTick_Config+0x44>)
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	3a01      	subs	r2, #1
 8000dbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	425b      	negs	r3, r3
 8000dc4:	2103      	movs	r1, #3
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f7ff ff7c 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dcc:	4b05      	ldr	r3, [pc, #20]	@ (8000de4 <SysTick_Config+0x44>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd2:	4b04      	ldr	r3, [pc, #16]	@ (8000de4 <SysTick_Config+0x44>)
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	0018      	movs	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	e000e010 	.word	0xe000e010

08000de8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	210f      	movs	r1, #15
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	1c02      	adds	r2, r0, #0
 8000df8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	0011      	movs	r1, r2
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff ff5d 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b004      	add	sp, #16
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	0002      	movs	r2, r0
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff ff33 	bl	8000c90 <__NVIC_EnableIRQ>
}
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b002      	add	sp, #8
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff ffaf 	bl	8000da0 <SysTick_Config>
 8000e42:	0003      	movs	r3, r0
}
 8000e44:	0018      	movs	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b002      	add	sp, #8
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e077      	b.n	8000f4e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a3d      	ldr	r2, [pc, #244]	@ (8000f58 <HAL_DMA_Init+0x10c>)
 8000e64:	4694      	mov	ip, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	2114      	movs	r1, #20
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f7ff f94a 	bl	8000104 <__udivsi3>
 8000e70:	0003      	movs	r3, r0
 8000e72:	009a      	lsls	r2, r3, #2
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2225      	movs	r2, #37	@ 0x25
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4934      	ldr	r1, [pc, #208]	@ (8000f5c <HAL_DMA_Init+0x110>)
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6819      	ldr	r1, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f000 fa8d 	bl	80013e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	2380      	movs	r3, #128	@ 0x80
 8000ed4:	01db      	lsls	r3, r3, #7
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d102      	bne.n	8000ee0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee8:	213f      	movs	r1, #63	@ 0x3f
 8000eea:	400a      	ands	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000ef6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d011      	beq.n	8000f24 <HAL_DMA_Init+0xd8>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b04      	cmp	r3, #4
 8000f06:	d80d      	bhi.n	8000f24 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f000 fa98 	bl	8001440 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	e008      	b.n	8000f36 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2225      	movs	r2, #37	@ 0x25
 8000f40:	2101      	movs	r1, #1
 8000f42:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2224      	movs	r2, #36	@ 0x24
 8000f48:	2100      	movs	r1, #0
 8000f4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	0018      	movs	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b002      	add	sp, #8
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	bffdfff8 	.word	0xbffdfff8
 8000f5c:	ffff800f 	.word	0xffff800f

08000f60 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f6e:	2317      	movs	r3, #23
 8000f70:	18fb      	adds	r3, r7, r3
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2224      	movs	r2, #36	@ 0x24
 8000f7a:	5c9b      	ldrb	r3, [r3, r2]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d101      	bne.n	8000f84 <HAL_DMA_Start_IT+0x24>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e06f      	b.n	8001064 <HAL_DMA_Start_IT+0x104>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2224      	movs	r2, #36	@ 0x24
 8000f88:	2101      	movs	r1, #1
 8000f8a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2225      	movs	r2, #37	@ 0x25
 8000f90:	5c9b      	ldrb	r3, [r3, r2]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d157      	bne.n	8001048 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2225      	movs	r2, #37	@ 0x25
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	438a      	bics	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f000 f9d3 	bl	8001368 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d008      	beq.n	8000fdc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	210e      	movs	r1, #14
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e00f      	b.n	8000ffc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2104      	movs	r1, #4
 8000fe8:	438a      	bics	r2, r1
 8000fea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	210a      	movs	r1, #10
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	2380      	movs	r3, #128	@ 0x80
 8001004:	025b      	lsls	r3, r3, #9
 8001006:	4013      	ands	r3, r2
 8001008:	d008      	beq.n	800101c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001014:	2180      	movs	r1, #128	@ 0x80
 8001016:	0049      	lsls	r1, r1, #1
 8001018:	430a      	orrs	r2, r1
 800101a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001020:	2b00      	cmp	r3, #0
 8001022:	d008      	beq.n	8001036 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800102e:	2180      	movs	r1, #128	@ 0x80
 8001030:	0049      	lsls	r1, r1, #1
 8001032:	430a      	orrs	r2, r1
 8001034:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2101      	movs	r1, #1
 8001042:	430a      	orrs	r2, r1
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	e00a      	b.n	800105e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2280      	movs	r2, #128	@ 0x80
 800104c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2224      	movs	r2, #36	@ 0x24
 8001052:	2100      	movs	r1, #0
 8001054:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001056:	2317      	movs	r3, #23
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800105e:	2317      	movs	r3, #23
 8001060:	18fb      	adds	r3, r7, r3
 8001062:	781b      	ldrb	r3, [r3, #0]
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	b006      	add	sp, #24
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e050      	b.n	8001120 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2225      	movs	r2, #37	@ 0x25
 8001082:	5c9b      	ldrb	r3, [r3, r2]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d008      	beq.n	800109c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2204      	movs	r2, #4
 800108e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2224      	movs	r2, #36	@ 0x24
 8001094:	2100      	movs	r1, #0
 8001096:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e041      	b.n	8001120 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	210e      	movs	r1, #14
 80010a8:	438a      	bics	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b6:	491c      	ldr	r1, [pc, #112]	@ (8001128 <HAL_DMA_Abort+0xbc>)
 80010b8:	400a      	ands	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2101      	movs	r1, #1
 80010c8:	438a      	bics	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80010cc:	4b17      	ldr	r3, [pc, #92]	@ (800112c <HAL_DMA_Abort+0xc0>)
 80010ce:	6859      	ldr	r1, [r3, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d4:	221c      	movs	r2, #28
 80010d6:	4013      	ands	r3, r2
 80010d8:	2201      	movs	r2, #1
 80010da:	409a      	lsls	r2, r3
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <HAL_DMA_Abort+0xc0>)
 80010de:	430a      	orrs	r2, r1
 80010e0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80010ea:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00c      	beq.n	800110e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010fe:	490a      	ldr	r1, [pc, #40]	@ (8001128 <HAL_DMA_Abort+0xbc>)
 8001100:	400a      	ands	r2, r1
 8001102:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800110c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2225      	movs	r2, #37	@ 0x25
 8001112:	2101      	movs	r1, #1
 8001114:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2224      	movs	r2, #36	@ 0x24
 800111a:	2100      	movs	r1, #0
 800111c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	0018      	movs	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	b002      	add	sp, #8
 8001126:	bd80      	pop	{r7, pc}
 8001128:	fffffeff 	.word	0xfffffeff
 800112c:	40020000 	.word	0x40020000

08001130 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001138:	210f      	movs	r1, #15
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2225      	movs	r2, #37	@ 0x25
 8001144:	5c9b      	ldrb	r3, [r3, r2]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d006      	beq.n	800115a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2204      	movs	r2, #4
 8001150:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001152:	187b      	adds	r3, r7, r1
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	e049      	b.n	80011ee <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	210e      	movs	r1, #14
 8001166:	438a      	bics	r2, r1
 8001168:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2101      	movs	r1, #1
 8001176:	438a      	bics	r2, r1
 8001178:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001184:	491d      	ldr	r1, [pc, #116]	@ (80011fc <HAL_DMA_Abort_IT+0xcc>)
 8001186:	400a      	ands	r2, r1
 8001188:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800118a:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <HAL_DMA_Abort_IT+0xd0>)
 800118c:	6859      	ldr	r1, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	221c      	movs	r2, #28
 8001194:	4013      	ands	r3, r2
 8001196:	2201      	movs	r2, #1
 8001198:	409a      	lsls	r2, r3
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <HAL_DMA_Abort_IT+0xd0>)
 800119c:	430a      	orrs	r2, r1
 800119e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80011a8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00c      	beq.n	80011cc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011bc:	490f      	ldr	r1, [pc, #60]	@ (80011fc <HAL_DMA_Abort_IT+0xcc>)
 80011be:	400a      	ands	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80011ca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2225      	movs	r2, #37	@ 0x25
 80011d0:	2101      	movs	r1, #1
 80011d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2224      	movs	r2, #36	@ 0x24
 80011d8:	2100      	movs	r1, #0
 80011da:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d004      	beq.n	80011ee <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	0010      	movs	r0, r2
 80011ec:	4798      	blx	r3
    }
  }
  return status;
 80011ee:	230f      	movs	r3, #15
 80011f0:	18fb      	adds	r3, r7, r3
 80011f2:	781b      	ldrb	r3, [r3, #0]
}
 80011f4:	0018      	movs	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b004      	add	sp, #16
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	fffffeff 	.word	0xfffffeff
 8001200:	40020000 	.word	0x40020000

08001204 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800120c:	4b55      	ldr	r3, [pc, #340]	@ (8001364 <HAL_DMA_IRQHandler+0x160>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	221c      	movs	r2, #28
 8001220:	4013      	ands	r3, r2
 8001222:	2204      	movs	r2, #4
 8001224:	409a      	lsls	r2, r3
 8001226:	0013      	movs	r3, r2
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	4013      	ands	r3, r2
 800122c:	d027      	beq.n	800127e <HAL_DMA_IRQHandler+0x7a>
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	2204      	movs	r2, #4
 8001232:	4013      	ands	r3, r2
 8001234:	d023      	beq.n	800127e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2220      	movs	r2, #32
 800123e:	4013      	ands	r3, r2
 8001240:	d107      	bne.n	8001252 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2104      	movs	r1, #4
 800124e:	438a      	bics	r2, r1
 8001250:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001252:	4b44      	ldr	r3, [pc, #272]	@ (8001364 <HAL_DMA_IRQHandler+0x160>)
 8001254:	6859      	ldr	r1, [r3, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125a:	221c      	movs	r2, #28
 800125c:	4013      	ands	r3, r2
 800125e:	2204      	movs	r2, #4
 8001260:	409a      	lsls	r2, r3
 8001262:	4b40      	ldr	r3, [pc, #256]	@ (8001364 <HAL_DMA_IRQHandler+0x160>)
 8001264:	430a      	orrs	r2, r1
 8001266:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126c:	2b00      	cmp	r3, #0
 800126e:	d100      	bne.n	8001272 <HAL_DMA_IRQHandler+0x6e>
 8001270:	e073      	b.n	800135a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	0010      	movs	r0, r2
 800127a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800127c:	e06d      	b.n	800135a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	221c      	movs	r2, #28
 8001284:	4013      	ands	r3, r2
 8001286:	2202      	movs	r2, #2
 8001288:	409a      	lsls	r2, r3
 800128a:	0013      	movs	r3, r2
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	4013      	ands	r3, r2
 8001290:	d02e      	beq.n	80012f0 <HAL_DMA_IRQHandler+0xec>
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	2202      	movs	r2, #2
 8001296:	4013      	ands	r3, r2
 8001298:	d02a      	beq.n	80012f0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2220      	movs	r2, #32
 80012a2:	4013      	ands	r3, r2
 80012a4:	d10b      	bne.n	80012be <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	210a      	movs	r1, #10
 80012b2:	438a      	bics	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2225      	movs	r2, #37	@ 0x25
 80012ba:	2101      	movs	r1, #1
 80012bc:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80012be:	4b29      	ldr	r3, [pc, #164]	@ (8001364 <HAL_DMA_IRQHandler+0x160>)
 80012c0:	6859      	ldr	r1, [r3, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c6:	221c      	movs	r2, #28
 80012c8:	4013      	ands	r3, r2
 80012ca:	2202      	movs	r2, #2
 80012cc:	409a      	lsls	r2, r3
 80012ce:	4b25      	ldr	r3, [pc, #148]	@ (8001364 <HAL_DMA_IRQHandler+0x160>)
 80012d0:	430a      	orrs	r2, r1
 80012d2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2224      	movs	r2, #36	@ 0x24
 80012d8:	2100      	movs	r1, #0
 80012da:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d03a      	beq.n	800135a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	0010      	movs	r0, r2
 80012ec:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80012ee:	e034      	b.n	800135a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	221c      	movs	r2, #28
 80012f6:	4013      	ands	r3, r2
 80012f8:	2208      	movs	r2, #8
 80012fa:	409a      	lsls	r2, r3
 80012fc:	0013      	movs	r3, r2
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	4013      	ands	r3, r2
 8001302:	d02b      	beq.n	800135c <HAL_DMA_IRQHandler+0x158>
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	2208      	movs	r2, #8
 8001308:	4013      	ands	r3, r2
 800130a:	d027      	beq.n	800135c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	210e      	movs	r1, #14
 8001318:	438a      	bics	r2, r1
 800131a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <HAL_DMA_IRQHandler+0x160>)
 800131e:	6859      	ldr	r1, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001324:	221c      	movs	r2, #28
 8001326:	4013      	ands	r3, r2
 8001328:	2201      	movs	r2, #1
 800132a:	409a      	lsls	r2, r3
 800132c:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <HAL_DMA_IRQHandler+0x160>)
 800132e:	430a      	orrs	r2, r1
 8001330:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2225      	movs	r2, #37	@ 0x25
 800133c:	2101      	movs	r1, #1
 800133e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2224      	movs	r2, #36	@ 0x24
 8001344:	2100      	movs	r1, #0
 8001346:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	0010      	movs	r0, r2
 8001358:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	46c0      	nop			@ (mov r8, r8)
}
 800135e:	46bd      	mov	sp, r7
 8001360:	b004      	add	sp, #16
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40020000 	.word	0x40020000

08001368 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800137e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001390:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <DMA_SetConfig+0x7c>)
 8001394:	6859      	ldr	r1, [r3, #4]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139a:	221c      	movs	r2, #28
 800139c:	4013      	ands	r3, r2
 800139e:	2201      	movs	r2, #1
 80013a0:	409a      	lsls	r2, r3
 80013a2:	4b10      	ldr	r3, [pc, #64]	@ (80013e4 <DMA_SetConfig+0x7c>)
 80013a4:	430a      	orrs	r2, r1
 80013a6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b10      	cmp	r3, #16
 80013b6:	d108      	bne.n	80013ca <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68ba      	ldr	r2, [r7, #8]
 80013c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013c8:	e007      	b.n	80013da <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	60da      	str	r2, [r3, #12]
}
 80013da:	46c0      	nop			@ (mov r8, r8)
 80013dc:	46bd      	mov	sp, r7
 80013de:	b004      	add	sp, #16
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	40020000 	.word	0x40020000

080013e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	4a10      	ldr	r2, [pc, #64]	@ (8001438 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80013f8:	4694      	mov	ip, r2
 80013fa:	4463      	add	r3, ip
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	001a      	movs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	001a      	movs	r2, r3
 800140a:	23ff      	movs	r3, #255	@ 0xff
 800140c:	4013      	ands	r3, r2
 800140e:	3b08      	subs	r3, #8
 8001410:	2114      	movs	r1, #20
 8001412:	0018      	movs	r0, r3
 8001414:	f7fe fe76 	bl	8000104 <__udivsi3>
 8001418:	0003      	movs	r3, r0
 800141a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a07      	ldr	r2, [pc, #28]	@ (800143c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001420:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	221f      	movs	r2, #31
 8001426:	4013      	ands	r3, r2
 8001428:	2201      	movs	r2, #1
 800142a:	409a      	lsls	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001430:	46c0      	nop			@ (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	b004      	add	sp, #16
 8001436:	bd80      	pop	{r7, pc}
 8001438:	10008200 	.word	0x10008200
 800143c:	40020880 	.word	0x40020880

08001440 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	223f      	movs	r2, #63	@ 0x3f
 800144e:	4013      	ands	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001456:	4694      	mov	ip, r2
 8001458:	4463      	add	r3, ip
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	001a      	movs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a07      	ldr	r2, [pc, #28]	@ (8001484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001466:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3b01      	subs	r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	4013      	ands	r3, r2
 8001470:	2201      	movs	r2, #1
 8001472:	409a      	lsls	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001478:	46c0      	nop			@ (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b004      	add	sp, #16
 800147e:	bd80      	pop	{r7, pc}
 8001480:	1000823f 	.word	0x1000823f
 8001484:	40020940 	.word	0x40020940

08001488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001496:	e147      	b.n	8001728 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4091      	lsls	r1, r2
 80014a2:	000a      	movs	r2, r1
 80014a4:	4013      	ands	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d100      	bne.n	80014b0 <HAL_GPIO_Init+0x28>
 80014ae:	e138      	b.n	8001722 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2203      	movs	r2, #3
 80014b6:	4013      	ands	r3, r2
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d005      	beq.n	80014c8 <HAL_GPIO_Init+0x40>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2203      	movs	r2, #3
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d130      	bne.n	800152a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	409a      	lsls	r2, r3
 80014d6:	0013      	movs	r3, r2
 80014d8:	43da      	mvns	r2, r3
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	409a      	lsls	r2, r3
 80014ea:	0013      	movs	r3, r2
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014fe:	2201      	movs	r2, #1
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	43da      	mvns	r2, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	2201      	movs	r2, #1
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
 800151c:	0013      	movs	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2203      	movs	r2, #3
 8001530:	4013      	ands	r3, r2
 8001532:	2b03      	cmp	r3, #3
 8001534:	d017      	beq.n	8001566 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2203      	movs	r2, #3
 8001542:	409a      	lsls	r2, r3
 8001544:	0013      	movs	r3, r2
 8001546:	43da      	mvns	r2, r3
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	409a      	lsls	r2, r3
 8001558:	0013      	movs	r3, r2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2203      	movs	r2, #3
 800156c:	4013      	ands	r3, r2
 800156e:	2b02      	cmp	r3, #2
 8001570:	d123      	bne.n	80015ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	08da      	lsrs	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3208      	adds	r2, #8
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	58d3      	ldr	r3, [r2, r3]
 800157e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2207      	movs	r2, #7
 8001584:	4013      	ands	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	220f      	movs	r2, #15
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	43da      	mvns	r2, r3
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	691a      	ldr	r2, [r3, #16]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2107      	movs	r1, #7
 800159e:	400b      	ands	r3, r1
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	409a      	lsls	r2, r3
 80015a4:	0013      	movs	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	08da      	lsrs	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3208      	adds	r2, #8
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	6939      	ldr	r1, [r7, #16]
 80015b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	409a      	lsls	r2, r3
 80015c8:	0013      	movs	r3, r2
 80015ca:	43da      	mvns	r2, r3
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2203      	movs	r2, #3
 80015d8:	401a      	ands	r2, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	409a      	lsls	r2, r3
 80015e0:	0013      	movs	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	23c0      	movs	r3, #192	@ 0xc0
 80015f4:	029b      	lsls	r3, r3, #10
 80015f6:	4013      	ands	r3, r2
 80015f8:	d100      	bne.n	80015fc <HAL_GPIO_Init+0x174>
 80015fa:	e092      	b.n	8001722 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80015fc:	4a50      	ldr	r2, [pc, #320]	@ (8001740 <HAL_GPIO_Init+0x2b8>)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	3318      	adds	r3, #24
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	589b      	ldr	r3, [r3, r2]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	2203      	movs	r2, #3
 800160e:	4013      	ands	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	220f      	movs	r2, #15
 8001614:	409a      	lsls	r2, r3
 8001616:	0013      	movs	r3, r2
 8001618:	43da      	mvns	r2, r3
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	23a0      	movs	r3, #160	@ 0xa0
 8001624:	05db      	lsls	r3, r3, #23
 8001626:	429a      	cmp	r2, r3
 8001628:	d013      	beq.n	8001652 <HAL_GPIO_Init+0x1ca>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a45      	ldr	r2, [pc, #276]	@ (8001744 <HAL_GPIO_Init+0x2bc>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d00d      	beq.n	800164e <HAL_GPIO_Init+0x1c6>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a44      	ldr	r2, [pc, #272]	@ (8001748 <HAL_GPIO_Init+0x2c0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d007      	beq.n	800164a <HAL_GPIO_Init+0x1c2>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a43      	ldr	r2, [pc, #268]	@ (800174c <HAL_GPIO_Init+0x2c4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d101      	bne.n	8001646 <HAL_GPIO_Init+0x1be>
 8001642:	2303      	movs	r3, #3
 8001644:	e006      	b.n	8001654 <HAL_GPIO_Init+0x1cc>
 8001646:	2305      	movs	r3, #5
 8001648:	e004      	b.n	8001654 <HAL_GPIO_Init+0x1cc>
 800164a:	2302      	movs	r3, #2
 800164c:	e002      	b.n	8001654 <HAL_GPIO_Init+0x1cc>
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <HAL_GPIO_Init+0x1cc>
 8001652:	2300      	movs	r3, #0
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	2103      	movs	r1, #3
 8001658:	400a      	ands	r2, r1
 800165a:	00d2      	lsls	r2, r2, #3
 800165c:	4093      	lsls	r3, r2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001664:	4936      	ldr	r1, [pc, #216]	@ (8001740 <HAL_GPIO_Init+0x2b8>)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	3318      	adds	r3, #24
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001672:	4b33      	ldr	r3, [pc, #204]	@ (8001740 <HAL_GPIO_Init+0x2b8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	43da      	mvns	r2, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	2380      	movs	r3, #128	@ 0x80
 8001688:	035b      	lsls	r3, r3, #13
 800168a:	4013      	ands	r3, r2
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001696:	4b2a      	ldr	r3, [pc, #168]	@ (8001740 <HAL_GPIO_Init+0x2b8>)
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800169c:	4b28      	ldr	r3, [pc, #160]	@ (8001740 <HAL_GPIO_Init+0x2b8>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	43da      	mvns	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	2380      	movs	r3, #128	@ 0x80
 80016b2:	039b      	lsls	r3, r3, #14
 80016b4:	4013      	ands	r3, r2
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001740 <HAL_GPIO_Init+0x2b8>)
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001740 <HAL_GPIO_Init+0x2b8>)
 80016c8:	2384      	movs	r3, #132	@ 0x84
 80016ca:	58d3      	ldr	r3, [r2, r3]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	43da      	mvns	r2, r3
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	2380      	movs	r3, #128	@ 0x80
 80016de:	029b      	lsls	r3, r3, #10
 80016e0:	4013      	ands	r3, r2
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016ec:	4914      	ldr	r1, [pc, #80]	@ (8001740 <HAL_GPIO_Init+0x2b8>)
 80016ee:	2284      	movs	r2, #132	@ 0x84
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80016f4:	4a12      	ldr	r2, [pc, #72]	@ (8001740 <HAL_GPIO_Init+0x2b8>)
 80016f6:	2380      	movs	r3, #128	@ 0x80
 80016f8:	58d3      	ldr	r3, [r2, r3]
 80016fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	43da      	mvns	r2, r3
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	2380      	movs	r3, #128	@ 0x80
 800170c:	025b      	lsls	r3, r3, #9
 800170e:	4013      	ands	r3, r2
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800171a:	4909      	ldr	r1, [pc, #36]	@ (8001740 <HAL_GPIO_Init+0x2b8>)
 800171c:	2280      	movs	r2, #128	@ 0x80
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	40da      	lsrs	r2, r3
 8001730:	1e13      	subs	r3, r2, #0
 8001732:	d000      	beq.n	8001736 <HAL_GPIO_Init+0x2ae>
 8001734:	e6b0      	b.n	8001498 <HAL_GPIO_Init+0x10>
  }
}
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	46c0      	nop			@ (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	b006      	add	sp, #24
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021800 	.word	0x40021800
 8001744:	50000400 	.word	0x50000400
 8001748:	50000800 	.word	0x50000800
 800174c:	50000c00 	.word	0x50000c00

08001750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	0008      	movs	r0, r1
 800175a:	0011      	movs	r1, r2
 800175c:	1cbb      	adds	r3, r7, #2
 800175e:	1c02      	adds	r2, r0, #0
 8001760:	801a      	strh	r2, [r3, #0]
 8001762:	1c7b      	adds	r3, r7, #1
 8001764:	1c0a      	adds	r2, r1, #0
 8001766:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001768:	1c7b      	adds	r3, r7, #1
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001770:	1cbb      	adds	r3, r7, #2
 8001772:	881a      	ldrh	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001778:	e003      	b.n	8001782 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800177a:	1cbb      	adds	r3, r7, #2
 800177c:	881a      	ldrh	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001782:	46c0      	nop			@ (mov r8, r8)
 8001784:	46bd      	mov	sp, r7
 8001786:	b002      	add	sp, #8
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001794:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a19      	ldr	r2, [pc, #100]	@ (8001800 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800179a:	4013      	ands	r3, r2
 800179c:	0019      	movs	r1, r3
 800179e:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	2380      	movs	r3, #128	@ 0x80
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d11f      	bne.n	80017f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80017b0:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	0013      	movs	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	189b      	adds	r3, r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4912      	ldr	r1, [pc, #72]	@ (8001808 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80017be:	0018      	movs	r0, r3
 80017c0:	f7fe fca0 	bl	8000104 <__udivsi3>
 80017c4:	0003      	movs	r3, r0
 80017c6:	3301      	adds	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017ca:	e008      	b.n	80017de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	e001      	b.n	80017de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e009      	b.n	80017f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017de:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017e0:	695a      	ldr	r2, [r3, #20]
 80017e2:	2380      	movs	r3, #128	@ 0x80
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	401a      	ands	r2, r3
 80017e8:	2380      	movs	r3, #128	@ 0x80
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d0ed      	beq.n	80017cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	0018      	movs	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b004      	add	sp, #16
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	40007000 	.word	0x40007000
 8001800:	fffff9ff 	.word	0xfffff9ff
 8001804:	20000000 	.word	0x20000000
 8001808:	000f4240 	.word	0x000f4240

0800180c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001810:	4b03      	ldr	r3, [pc, #12]	@ (8001820 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	23e0      	movs	r3, #224	@ 0xe0
 8001816:	01db      	lsls	r3, r3, #7
 8001818:	4013      	ands	r3, r2
}
 800181a:	0018      	movs	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000

08001824 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e2fe      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2201      	movs	r2, #1
 800183c:	4013      	ands	r3, r2
 800183e:	d100      	bne.n	8001842 <HAL_RCC_OscConfig+0x1e>
 8001840:	e07c      	b.n	800193c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001842:	4bc3      	ldr	r3, [pc, #780]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2238      	movs	r2, #56	@ 0x38
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800184c:	4bc0      	ldr	r3, [pc, #768]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2203      	movs	r2, #3
 8001852:	4013      	ands	r3, r2
 8001854:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2b10      	cmp	r3, #16
 800185a:	d102      	bne.n	8001862 <HAL_RCC_OscConfig+0x3e>
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	2b03      	cmp	r3, #3
 8001860:	d002      	beq.n	8001868 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	2b08      	cmp	r3, #8
 8001866:	d10b      	bne.n	8001880 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001868:	4bb9      	ldr	r3, [pc, #740]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2380      	movs	r3, #128	@ 0x80
 800186e:	029b      	lsls	r3, r3, #10
 8001870:	4013      	ands	r3, r2
 8001872:	d062      	beq.n	800193a <HAL_RCC_OscConfig+0x116>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d15e      	bne.n	800193a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e2d9      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	2380      	movs	r3, #128	@ 0x80
 8001886:	025b      	lsls	r3, r3, #9
 8001888:	429a      	cmp	r2, r3
 800188a:	d107      	bne.n	800189c <HAL_RCC_OscConfig+0x78>
 800188c:	4bb0      	ldr	r3, [pc, #704]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4baf      	ldr	r3, [pc, #700]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001892:	2180      	movs	r1, #128	@ 0x80
 8001894:	0249      	lsls	r1, r1, #9
 8001896:	430a      	orrs	r2, r1
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e020      	b.n	80018de <HAL_RCC_OscConfig+0xba>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	23a0      	movs	r3, #160	@ 0xa0
 80018a2:	02db      	lsls	r3, r3, #11
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d10e      	bne.n	80018c6 <HAL_RCC_OscConfig+0xa2>
 80018a8:	4ba9      	ldr	r3, [pc, #676]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4ba8      	ldr	r3, [pc, #672]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 80018ae:	2180      	movs	r1, #128	@ 0x80
 80018b0:	02c9      	lsls	r1, r1, #11
 80018b2:	430a      	orrs	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	4ba6      	ldr	r3, [pc, #664]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4ba5      	ldr	r3, [pc, #660]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 80018bc:	2180      	movs	r1, #128	@ 0x80
 80018be:	0249      	lsls	r1, r1, #9
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e00b      	b.n	80018de <HAL_RCC_OscConfig+0xba>
 80018c6:	4ba2      	ldr	r3, [pc, #648]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4ba1      	ldr	r3, [pc, #644]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 80018cc:	49a1      	ldr	r1, [pc, #644]	@ (8001b54 <HAL_RCC_OscConfig+0x330>)
 80018ce:	400a      	ands	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	4b9f      	ldr	r3, [pc, #636]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4b9e      	ldr	r3, [pc, #632]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 80018d8:	499f      	ldr	r1, [pc, #636]	@ (8001b58 <HAL_RCC_OscConfig+0x334>)
 80018da:	400a      	ands	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d014      	beq.n	8001910 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e6:	f7ff f9a5 	bl	8000c34 <HAL_GetTick>
 80018ea:	0003      	movs	r3, r0
 80018ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f0:	f7ff f9a0 	bl	8000c34 <HAL_GetTick>
 80018f4:	0002      	movs	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b64      	cmp	r3, #100	@ 0x64
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e298      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001902:	4b93      	ldr	r3, [pc, #588]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2380      	movs	r3, #128	@ 0x80
 8001908:	029b      	lsls	r3, r3, #10
 800190a:	4013      	ands	r3, r2
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0xcc>
 800190e:	e015      	b.n	800193c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff f990 	bl	8000c34 <HAL_GetTick>
 8001914:	0003      	movs	r3, r0
 8001916:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800191a:	f7ff f98b 	bl	8000c34 <HAL_GetTick>
 800191e:	0002      	movs	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b64      	cmp	r3, #100	@ 0x64
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e283      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800192c:	4b88      	ldr	r3, [pc, #544]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	2380      	movs	r3, #128	@ 0x80
 8001932:	029b      	lsls	r3, r3, #10
 8001934:	4013      	ands	r3, r2
 8001936:	d1f0      	bne.n	800191a <HAL_RCC_OscConfig+0xf6>
 8001938:	e000      	b.n	800193c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2202      	movs	r2, #2
 8001942:	4013      	ands	r3, r2
 8001944:	d100      	bne.n	8001948 <HAL_RCC_OscConfig+0x124>
 8001946:	e099      	b.n	8001a7c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001948:	4b81      	ldr	r3, [pc, #516]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2238      	movs	r2, #56	@ 0x38
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001952:	4b7f      	ldr	r3, [pc, #508]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2203      	movs	r2, #3
 8001958:	4013      	ands	r3, r2
 800195a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2b10      	cmp	r3, #16
 8001960:	d102      	bne.n	8001968 <HAL_RCC_OscConfig+0x144>
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d002      	beq.n	800196e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d135      	bne.n	80019da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800196e:	4b78      	ldr	r3, [pc, #480]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	2380      	movs	r3, #128	@ 0x80
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4013      	ands	r3, r2
 8001978:	d005      	beq.n	8001986 <HAL_RCC_OscConfig+0x162>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e256      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001986:	4b72      	ldr	r3, [pc, #456]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4a74      	ldr	r2, [pc, #464]	@ (8001b5c <HAL_RCC_OscConfig+0x338>)
 800198c:	4013      	ands	r3, r2
 800198e:	0019      	movs	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	021a      	lsls	r2, r3, #8
 8001996:	4b6e      	ldr	r3, [pc, #440]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001998:	430a      	orrs	r2, r1
 800199a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d112      	bne.n	80019c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019a2:	4b6b      	ldr	r3, [pc, #428]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001b60 <HAL_RCC_OscConfig+0x33c>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	0019      	movs	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	4b67      	ldr	r3, [pc, #412]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 80019b2:	430a      	orrs	r2, r1
 80019b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80019b6:	4b66      	ldr	r3, [pc, #408]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	0adb      	lsrs	r3, r3, #11
 80019bc:	2207      	movs	r2, #7
 80019be:	4013      	ands	r3, r2
 80019c0:	4a68      	ldr	r2, [pc, #416]	@ (8001b64 <HAL_RCC_OscConfig+0x340>)
 80019c2:	40da      	lsrs	r2, r3
 80019c4:	4b68      	ldr	r3, [pc, #416]	@ (8001b68 <HAL_RCC_OscConfig+0x344>)
 80019c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019c8:	4b68      	ldr	r3, [pc, #416]	@ (8001b6c <HAL_RCC_OscConfig+0x348>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	0018      	movs	r0, r3
 80019ce:	f7ff f8d5 	bl	8000b7c <HAL_InitTick>
 80019d2:	1e03      	subs	r3, r0, #0
 80019d4:	d051      	beq.n	8001a7a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e22c      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d030      	beq.n	8001a44 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001b60 <HAL_RCC_OscConfig+0x33c>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	0019      	movs	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	4b57      	ldr	r3, [pc, #348]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 80019f2:	430a      	orrs	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80019f6:	4b56      	ldr	r3, [pc, #344]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b55      	ldr	r3, [pc, #340]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 80019fc:	2180      	movs	r1, #128	@ 0x80
 80019fe:	0049      	lsls	r1, r1, #1
 8001a00:	430a      	orrs	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff f916 	bl	8000c34 <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0e:	f7ff f911 	bl	8000c34 <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e209      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a20:	4b4b      	ldr	r3, [pc, #300]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	@ 0x80
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2c:	4b48      	ldr	r3, [pc, #288]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	4a4a      	ldr	r2, [pc, #296]	@ (8001b5c <HAL_RCC_OscConfig+0x338>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	0019      	movs	r1, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	021a      	lsls	r2, r3, #8
 8001a3c:	4b44      	ldr	r3, [pc, #272]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	e01b      	b.n	8001a7c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001a44:	4b42      	ldr	r3, [pc, #264]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b41      	ldr	r3, [pc, #260]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	4949      	ldr	r1, [pc, #292]	@ (8001b70 <HAL_RCC_OscConfig+0x34c>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f8f0 	bl	8000c34 <HAL_GetTick>
 8001a54:	0003      	movs	r3, r0
 8001a56:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5a:	f7ff f8eb 	bl	8000c34 <HAL_GetTick>
 8001a5e:	0002      	movs	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e1e3      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a6c:	4b38      	ldr	r3, [pc, #224]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2380      	movs	r3, #128	@ 0x80
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4013      	ands	r3, r2
 8001a76:	d1f0      	bne.n	8001a5a <HAL_RCC_OscConfig+0x236>
 8001a78:	e000      	b.n	8001a7c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a7a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2208      	movs	r2, #8
 8001a82:	4013      	ands	r3, r2
 8001a84:	d047      	beq.n	8001b16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a86:	4b32      	ldr	r3, [pc, #200]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2238      	movs	r2, #56	@ 0x38
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b18      	cmp	r3, #24
 8001a90:	d10a      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a92:	4b2f      	ldr	r3, [pc, #188]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a96:	2202      	movs	r2, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d03c      	beq.n	8001b16 <HAL_RCC_OscConfig+0x2f2>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d138      	bne.n	8001b16 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e1c5      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d019      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001ab0:	4b27      	ldr	r3, [pc, #156]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001ab2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ab4:	4b26      	ldr	r3, [pc, #152]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abc:	f7ff f8ba 	bl	8000c34 <HAL_GetTick>
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac6:	f7ff f8b5 	bl	8000c34 <HAL_GetTick>
 8001aca:	0002      	movs	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e1ad      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001adc:	2202      	movs	r2, #2
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d0f1      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x2a2>
 8001ae2:	e018      	b.n	8001b16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001ae6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ae8:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	438a      	bics	r2, r1
 8001aee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7ff f8a0 	bl	8000c34 <HAL_GetTick>
 8001af4:	0003      	movs	r3, r0
 8001af6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afa:	f7ff f89b 	bl	8000c34 <HAL_GetTick>
 8001afe:	0002      	movs	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e193      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b0c:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b10:	2202      	movs	r2, #2
 8001b12:	4013      	ands	r3, r2
 8001b14:	d1f1      	bne.n	8001afa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d100      	bne.n	8001b22 <HAL_RCC_OscConfig+0x2fe>
 8001b20:	e0c6      	b.n	8001cb0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b22:	231f      	movs	r3, #31
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2238      	movs	r2, #56	@ 0x38
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b20      	cmp	r3, #32
 8001b34:	d11e      	bne.n	8001b74 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_RCC_OscConfig+0x32c>)
 8001b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d100      	bne.n	8001b42 <HAL_RCC_OscConfig+0x31e>
 8001b40:	e0b6      	b.n	8001cb0 <HAL_RCC_OscConfig+0x48c>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d000      	beq.n	8001b4c <HAL_RCC_OscConfig+0x328>
 8001b4a:	e0b1      	b.n	8001cb0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e171      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
 8001b50:	40021000 	.word	0x40021000
 8001b54:	fffeffff 	.word	0xfffeffff
 8001b58:	fffbffff 	.word	0xfffbffff
 8001b5c:	ffff80ff 	.word	0xffff80ff
 8001b60:	ffffc7ff 	.word	0xffffc7ff
 8001b64:	00f42400 	.word	0x00f42400
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004
 8001b70:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b74:	4bb1      	ldr	r3, [pc, #708]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001b76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b78:	2380      	movs	r3, #128	@ 0x80
 8001b7a:	055b      	lsls	r3, r3, #21
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_OscConfig+0x360>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x362>
 8001b84:	2300      	movs	r3, #0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d011      	beq.n	8001bae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	4bac      	ldr	r3, [pc, #688]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001b8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b8e:	4bab      	ldr	r3, [pc, #684]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001b90:	2180      	movs	r1, #128	@ 0x80
 8001b92:	0549      	lsls	r1, r1, #21
 8001b94:	430a      	orrs	r2, r1
 8001b96:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b98:	4ba8      	ldr	r3, [pc, #672]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001b9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b9c:	2380      	movs	r3, #128	@ 0x80
 8001b9e:	055b      	lsls	r3, r3, #21
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001ba6:	231f      	movs	r3, #31
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bae:	4ba4      	ldr	r3, [pc, #656]	@ (8001e40 <HAL_RCC_OscConfig+0x61c>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d11a      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bba:	4ba1      	ldr	r3, [pc, #644]	@ (8001e40 <HAL_RCC_OscConfig+0x61c>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4ba0      	ldr	r3, [pc, #640]	@ (8001e40 <HAL_RCC_OscConfig+0x61c>)
 8001bc0:	2180      	movs	r1, #128	@ 0x80
 8001bc2:	0049      	lsls	r1, r1, #1
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff f834 	bl	8000c34 <HAL_GetTick>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd2:	f7ff f82f 	bl	8000c34 <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e127      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be4:	4b96      	ldr	r3, [pc, #600]	@ (8001e40 <HAL_RCC_OscConfig+0x61c>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4013      	ands	r3, r2
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_OscConfig+0x3e2>
 8001bf8:	4b90      	ldr	r3, [pc, #576]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001bfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bfc:	4b8f      	ldr	r3, [pc, #572]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001bfe:	2101      	movs	r1, #1
 8001c00:	430a      	orrs	r2, r1
 8001c02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c04:	e01c      	b.n	8001c40 <HAL_RCC_OscConfig+0x41c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x404>
 8001c0e:	4b8b      	ldr	r3, [pc, #556]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001c10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c12:	4b8a      	ldr	r3, [pc, #552]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001c14:	2104      	movs	r1, #4
 8001c16:	430a      	orrs	r2, r1
 8001c18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c1a:	4b88      	ldr	r3, [pc, #544]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001c1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c1e:	4b87      	ldr	r3, [pc, #540]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001c20:	2101      	movs	r1, #1
 8001c22:	430a      	orrs	r2, r1
 8001c24:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0x41c>
 8001c28:	4b84      	ldr	r3, [pc, #528]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001c2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c2c:	4b83      	ldr	r3, [pc, #524]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001c2e:	2101      	movs	r1, #1
 8001c30:	438a      	bics	r2, r1
 8001c32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c34:	4b81      	ldr	r3, [pc, #516]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001c36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c38:	4b80      	ldr	r3, [pc, #512]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	438a      	bics	r2, r1
 8001c3e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d014      	beq.n	8001c72 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7fe fff4 	bl	8000c34 <HAL_GetTick>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c50:	e009      	b.n	8001c66 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c52:	f7fe ffef 	bl	8000c34 <HAL_GetTick>
 8001c56:	0002      	movs	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	4a79      	ldr	r2, [pc, #484]	@ (8001e44 <HAL_RCC_OscConfig+0x620>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e0e6      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c66:	4b75      	ldr	r3, [pc, #468]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x42e>
 8001c70:	e013      	b.n	8001c9a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7fe ffdf 	bl	8000c34 <HAL_GetTick>
 8001c76:	0003      	movs	r3, r0
 8001c78:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c7a:	e009      	b.n	8001c90 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7c:	f7fe ffda 	bl	8000c34 <HAL_GetTick>
 8001c80:	0002      	movs	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	4a6f      	ldr	r2, [pc, #444]	@ (8001e44 <HAL_RCC_OscConfig+0x620>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e0d1      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c90:	4b6a      	ldr	r3, [pc, #424]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c94:	2202      	movs	r2, #2
 8001c96:	4013      	ands	r3, r2
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c9a:	231f      	movs	r3, #31
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d105      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ca4:	4b65      	ldr	r3, [pc, #404]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001ca6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ca8:	4b64      	ldr	r3, [pc, #400]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001caa:	4967      	ldr	r1, [pc, #412]	@ (8001e48 <HAL_RCC_OscConfig+0x624>)
 8001cac:	400a      	ands	r2, r1
 8001cae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d100      	bne.n	8001cba <HAL_RCC_OscConfig+0x496>
 8001cb8:	e0bb      	b.n	8001e32 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cba:	4b60      	ldr	r3, [pc, #384]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2238      	movs	r2, #56	@ 0x38
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b10      	cmp	r3, #16
 8001cc4:	d100      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x4a4>
 8001cc6:	e07b      	b.n	8001dc0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d156      	bne.n	8001d7e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd0:	4b5a      	ldr	r3, [pc, #360]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b59      	ldr	r3, [pc, #356]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001cd6:	495d      	ldr	r1, [pc, #372]	@ (8001e4c <HAL_RCC_OscConfig+0x628>)
 8001cd8:	400a      	ands	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7fe ffaa 	bl	8000c34 <HAL_GetTick>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce6:	f7fe ffa5 	bl	8000c34 <HAL_GetTick>
 8001cea:	0002      	movs	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e09d      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf8:	4b50      	ldr	r3, [pc, #320]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2380      	movs	r3, #128	@ 0x80
 8001cfe:	049b      	lsls	r3, r3, #18
 8001d00:	4013      	ands	r3, r2
 8001d02:	d1f0      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d04:	4b4d      	ldr	r3, [pc, #308]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4a51      	ldr	r2, [pc, #324]	@ (8001e50 <HAL_RCC_OscConfig+0x62c>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1a      	ldr	r2, [r3, #32]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d30:	431a      	orrs	r2, r3
 8001d32:	4b42      	ldr	r3, [pc, #264]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001d34:	430a      	orrs	r2, r1
 8001d36:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d38:	4b40      	ldr	r3, [pc, #256]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001d3e:	2180      	movs	r1, #128	@ 0x80
 8001d40:	0449      	lsls	r1, r1, #17
 8001d42:	430a      	orrs	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001d46:	4b3d      	ldr	r3, [pc, #244]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001d4c:	2180      	movs	r1, #128	@ 0x80
 8001d4e:	0549      	lsls	r1, r1, #21
 8001d50:	430a      	orrs	r2, r1
 8001d52:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7fe ff6e 	bl	8000c34 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7fe ff69 	bl	8000c34 <HAL_GetTick>
 8001d62:	0002      	movs	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e061      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d70:	4b32      	ldr	r3, [pc, #200]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2380      	movs	r3, #128	@ 0x80
 8001d76:	049b      	lsls	r3, r3, #18
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x53a>
 8001d7c:	e059      	b.n	8001e32 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4b2e      	ldr	r3, [pc, #184]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001d84:	4931      	ldr	r1, [pc, #196]	@ (8001e4c <HAL_RCC_OscConfig+0x628>)
 8001d86:	400a      	ands	r2, r1
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8a:	f7fe ff53 	bl	8000c34 <HAL_GetTick>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d94:	f7fe ff4e 	bl	8000c34 <HAL_GetTick>
 8001d98:	0002      	movs	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e046      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da6:	4b25      	ldr	r3, [pc, #148]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	2380      	movs	r3, #128	@ 0x80
 8001dac:	049b      	lsls	r3, r3, #18
 8001dae:	4013      	ands	r3, r2
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001db2:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001db8:	4926      	ldr	r1, [pc, #152]	@ (8001e54 <HAL_RCC_OscConfig+0x630>)
 8001dba:	400a      	ands	r2, r1
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	e038      	b.n	8001e32 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e033      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <HAL_RCC_OscConfig+0x618>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d126      	bne.n	8001e2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2270      	movs	r2, #112	@ 0x70
 8001de4:	401a      	ands	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d11f      	bne.n	8001e2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	23fe      	movs	r3, #254	@ 0xfe
 8001df2:	01db      	lsls	r3, r3, #7
 8001df4:	401a      	ands	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d116      	bne.n	8001e2e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	23f8      	movs	r3, #248	@ 0xf8
 8001e04:	039b      	lsls	r3, r3, #14
 8001e06:	401a      	ands	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d10e      	bne.n	8001e2e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	23e0      	movs	r3, #224	@ 0xe0
 8001e14:	051b      	lsls	r3, r3, #20
 8001e16:	401a      	ands	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	0f5b      	lsrs	r3, r3, #29
 8001e24:	075a      	lsls	r2, r3, #29
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d001      	beq.n	8001e32 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b008      	add	sp, #32
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40007000 	.word	0x40007000
 8001e44:	00001388 	.word	0x00001388
 8001e48:	efffffff 	.word	0xefffffff
 8001e4c:	feffffff 	.word	0xfeffffff
 8001e50:	11c1808c 	.word	0x11c1808c
 8001e54:	eefefffc 	.word	0xeefefffc

08001e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0e9      	b.n	8002040 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b76      	ldr	r3, [pc, #472]	@ (8002048 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2207      	movs	r2, #7
 8001e72:	4013      	ands	r3, r2
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d91e      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b73      	ldr	r3, [pc, #460]	@ (8002048 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2207      	movs	r2, #7
 8001e80:	4393      	bics	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	4b70      	ldr	r3, [pc, #448]	@ (8002048 <HAL_RCC_ClockConfig+0x1f0>)
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e8c:	f7fe fed2 	bl	8000c34 <HAL_GetTick>
 8001e90:	0003      	movs	r3, r0
 8001e92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e94:	e009      	b.n	8001eaa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e96:	f7fe fecd 	bl	8000c34 <HAL_GetTick>
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	4a6a      	ldr	r2, [pc, #424]	@ (800204c <HAL_RCC_ClockConfig+0x1f4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e0ca      	b.n	8002040 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001eaa:	4b67      	ldr	r3, [pc, #412]	@ (8002048 <HAL_RCC_ClockConfig+0x1f0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2207      	movs	r2, #7
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d1ee      	bne.n	8001e96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d015      	beq.n	8001eee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d006      	beq.n	8001eda <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ecc:	4b60      	ldr	r3, [pc, #384]	@ (8002050 <HAL_RCC_ClockConfig+0x1f8>)
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	4b5f      	ldr	r3, [pc, #380]	@ (8002050 <HAL_RCC_ClockConfig+0x1f8>)
 8001ed2:	21e0      	movs	r1, #224	@ 0xe0
 8001ed4:	01c9      	lsls	r1, r1, #7
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eda:	4b5d      	ldr	r3, [pc, #372]	@ (8002050 <HAL_RCC_ClockConfig+0x1f8>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	4a5d      	ldr	r2, [pc, #372]	@ (8002054 <HAL_RCC_ClockConfig+0x1fc>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	4b59      	ldr	r3, [pc, #356]	@ (8002050 <HAL_RCC_ClockConfig+0x1f8>)
 8001eea:	430a      	orrs	r2, r1
 8001eec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d057      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d107      	bne.n	8001f10 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f00:	4b53      	ldr	r3, [pc, #332]	@ (8002050 <HAL_RCC_ClockConfig+0x1f8>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	@ 0x80
 8001f06:	029b      	lsls	r3, r3, #10
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d12b      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e097      	b.n	8002040 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d107      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f18:	4b4d      	ldr	r3, [pc, #308]	@ (8002050 <HAL_RCC_ClockConfig+0x1f8>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2380      	movs	r3, #128	@ 0x80
 8001f1e:	049b      	lsls	r3, r3, #18
 8001f20:	4013      	ands	r3, r2
 8001f22:	d11f      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e08b      	b.n	8002040 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f30:	4b47      	ldr	r3, [pc, #284]	@ (8002050 <HAL_RCC_ClockConfig+0x1f8>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	2380      	movs	r3, #128	@ 0x80
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d113      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e07f      	b.n	8002040 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f48:	4b41      	ldr	r3, [pc, #260]	@ (8002050 <HAL_RCC_ClockConfig+0x1f8>)
 8001f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d108      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e074      	b.n	8002040 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f56:	4b3e      	ldr	r3, [pc, #248]	@ (8002050 <HAL_RCC_ClockConfig+0x1f8>)
 8001f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e06d      	b.n	8002040 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f64:	4b3a      	ldr	r3, [pc, #232]	@ (8002050 <HAL_RCC_ClockConfig+0x1f8>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2207      	movs	r2, #7
 8001f6a:	4393      	bics	r3, r2
 8001f6c:	0019      	movs	r1, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	4b37      	ldr	r3, [pc, #220]	@ (8002050 <HAL_RCC_ClockConfig+0x1f8>)
 8001f74:	430a      	orrs	r2, r1
 8001f76:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f78:	f7fe fe5c 	bl	8000c34 <HAL_GetTick>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f80:	e009      	b.n	8001f96 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f82:	f7fe fe57 	bl	8000c34 <HAL_GetTick>
 8001f86:	0002      	movs	r2, r0
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	4a2f      	ldr	r2, [pc, #188]	@ (800204c <HAL_RCC_ClockConfig+0x1f4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e054      	b.n	8002040 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	4b2e      	ldr	r3, [pc, #184]	@ (8002050 <HAL_RCC_ClockConfig+0x1f8>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2238      	movs	r2, #56	@ 0x38
 8001f9c:	401a      	ands	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d1ec      	bne.n	8001f82 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b27      	ldr	r3, [pc, #156]	@ (8002048 <HAL_RCC_ClockConfig+0x1f0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2207      	movs	r2, #7
 8001fae:	4013      	ands	r3, r2
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d21e      	bcs.n	8001ff4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b24      	ldr	r3, [pc, #144]	@ (8002048 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2207      	movs	r2, #7
 8001fbc:	4393      	bics	r3, r2
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	4b21      	ldr	r3, [pc, #132]	@ (8002048 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fc8:	f7fe fe34 	bl	8000c34 <HAL_GetTick>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fd0:	e009      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd2:	f7fe fe2f 	bl	8000c34 <HAL_GetTick>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800204c <HAL_RCC_ClockConfig+0x1f4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e02c      	b.n	8002040 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fe6:	4b18      	ldr	r3, [pc, #96]	@ (8002048 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2207      	movs	r2, #7
 8001fec:	4013      	ands	r3, r2
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d1ee      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ffe:	4b14      	ldr	r3, [pc, #80]	@ (8002050 <HAL_RCC_ClockConfig+0x1f8>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	4a15      	ldr	r2, [pc, #84]	@ (8002058 <HAL_RCC_ClockConfig+0x200>)
 8002004:	4013      	ands	r3, r2
 8002006:	0019      	movs	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <HAL_RCC_ClockConfig+0x1f8>)
 800200e:	430a      	orrs	r2, r1
 8002010:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002012:	f000 f829 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8002016:	0001      	movs	r1, r0
 8002018:	4b0d      	ldr	r3, [pc, #52]	@ (8002050 <HAL_RCC_ClockConfig+0x1f8>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	220f      	movs	r2, #15
 8002020:	401a      	ands	r2, r3
 8002022:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <HAL_RCC_ClockConfig+0x204>)
 8002024:	0092      	lsls	r2, r2, #2
 8002026:	58d3      	ldr	r3, [r2, r3]
 8002028:	221f      	movs	r2, #31
 800202a:	4013      	ands	r3, r2
 800202c:	000a      	movs	r2, r1
 800202e:	40da      	lsrs	r2, r3
 8002030:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <HAL_RCC_ClockConfig+0x208>)
 8002032:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002034:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <HAL_RCC_ClockConfig+0x20c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0018      	movs	r0, r3
 800203a:	f7fe fd9f 	bl	8000b7c <HAL_InitTick>
 800203e:	0003      	movs	r3, r0
}
 8002040:	0018      	movs	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	b004      	add	sp, #16
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40022000 	.word	0x40022000
 800204c:	00001388 	.word	0x00001388
 8002050:	40021000 	.word	0x40021000
 8002054:	fffff0ff 	.word	0xfffff0ff
 8002058:	ffff8fff 	.word	0xffff8fff
 800205c:	08003f84 	.word	0x08003f84
 8002060:	20000000 	.word	0x20000000
 8002064:	20000004 	.word	0x20000004

08002068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800206e:	4b3c      	ldr	r3, [pc, #240]	@ (8002160 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2238      	movs	r2, #56	@ 0x38
 8002074:	4013      	ands	r3, r2
 8002076:	d10f      	bne.n	8002098 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002078:	4b39      	ldr	r3, [pc, #228]	@ (8002160 <HAL_RCC_GetSysClockFreq+0xf8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	0adb      	lsrs	r3, r3, #11
 800207e:	2207      	movs	r2, #7
 8002080:	4013      	ands	r3, r2
 8002082:	2201      	movs	r2, #1
 8002084:	409a      	lsls	r2, r3
 8002086:	0013      	movs	r3, r2
 8002088:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800208a:	6839      	ldr	r1, [r7, #0]
 800208c:	4835      	ldr	r0, [pc, #212]	@ (8002164 <HAL_RCC_GetSysClockFreq+0xfc>)
 800208e:	f7fe f839 	bl	8000104 <__udivsi3>
 8002092:	0003      	movs	r3, r0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	e05d      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002098:	4b31      	ldr	r3, [pc, #196]	@ (8002160 <HAL_RCC_GetSysClockFreq+0xf8>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2238      	movs	r2, #56	@ 0x38
 800209e:	4013      	ands	r3, r2
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d102      	bne.n	80020aa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020a4:	4b30      	ldr	r3, [pc, #192]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x100>)
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	e054      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002160 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2238      	movs	r2, #56	@ 0x38
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d138      	bne.n	8002128 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80020b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002160 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2203      	movs	r2, #3
 80020bc:	4013      	ands	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020c0:	4b27      	ldr	r3, [pc, #156]	@ (8002160 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	2207      	movs	r2, #7
 80020c8:	4013      	ands	r3, r2
 80020ca:	3301      	adds	r3, #1
 80020cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d10d      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	4824      	ldr	r0, [pc, #144]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x100>)
 80020d8:	f7fe f814 	bl	8000104 <__udivsi3>
 80020dc:	0003      	movs	r3, r0
 80020de:	0019      	movs	r1, r3
 80020e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002160 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	227f      	movs	r2, #127	@ 0x7f
 80020e8:	4013      	ands	r3, r2
 80020ea:	434b      	muls	r3, r1
 80020ec:	617b      	str	r3, [r7, #20]
        break;
 80020ee:	e00d      	b.n	800210c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	481c      	ldr	r0, [pc, #112]	@ (8002164 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020f4:	f7fe f806 	bl	8000104 <__udivsi3>
 80020f8:	0003      	movs	r3, r0
 80020fa:	0019      	movs	r1, r3
 80020fc:	4b18      	ldr	r3, [pc, #96]	@ (8002160 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	227f      	movs	r2, #127	@ 0x7f
 8002104:	4013      	ands	r3, r2
 8002106:	434b      	muls	r3, r1
 8002108:	617b      	str	r3, [r7, #20]
        break;
 800210a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800210c:	4b14      	ldr	r3, [pc, #80]	@ (8002160 <HAL_RCC_GetSysClockFreq+0xf8>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0f5b      	lsrs	r3, r3, #29
 8002112:	2207      	movs	r2, #7
 8002114:	4013      	ands	r3, r2
 8002116:	3301      	adds	r3, #1
 8002118:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	6978      	ldr	r0, [r7, #20]
 800211e:	f7fd fff1 	bl	8000104 <__udivsi3>
 8002122:	0003      	movs	r3, r0
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	e015      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002128:	4b0d      	ldr	r3, [pc, #52]	@ (8002160 <HAL_RCC_GetSysClockFreq+0xf8>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2238      	movs	r2, #56	@ 0x38
 800212e:	4013      	ands	r3, r2
 8002130:	2b20      	cmp	r3, #32
 8002132:	d103      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	e00b      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800213c:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <HAL_RCC_GetSysClockFreq+0xf8>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2238      	movs	r2, #56	@ 0x38
 8002142:	4013      	ands	r3, r2
 8002144:	2b18      	cmp	r3, #24
 8002146:	d103      	bne.n	8002150 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002148:	23fa      	movs	r3, #250	@ 0xfa
 800214a:	01db      	lsls	r3, r3, #7
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	e001      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002154:	693b      	ldr	r3, [r7, #16]
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b006      	add	sp, #24
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			@ (mov r8, r8)
 8002160:	40021000 	.word	0x40021000
 8002164:	00f42400 	.word	0x00f42400
 8002168:	007a1200 	.word	0x007a1200

0800216c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002170:	4b02      	ldr	r3, [pc, #8]	@ (800217c <HAL_RCC_GetHCLKFreq+0x10>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	0018      	movs	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			@ (mov r8, r8)
 800217c:	20000000 	.word	0x20000000

08002180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002180:	b5b0      	push	{r4, r5, r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002184:	f7ff fff2 	bl	800216c <HAL_RCC_GetHCLKFreq>
 8002188:	0004      	movs	r4, r0
 800218a:	f7ff fb3f 	bl	800180c <LL_RCC_GetAPB1Prescaler>
 800218e:	0003      	movs	r3, r0
 8002190:	0b1a      	lsrs	r2, r3, #12
 8002192:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002194:	0092      	lsls	r2, r2, #2
 8002196:	58d3      	ldr	r3, [r2, r3]
 8002198:	221f      	movs	r2, #31
 800219a:	4013      	ands	r3, r2
 800219c:	40dc      	lsrs	r4, r3
 800219e:	0023      	movs	r3, r4
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bdb0      	pop	{r4, r5, r7, pc}
 80021a6:	46c0      	nop			@ (mov r8, r8)
 80021a8:	08003fc4 	.word	0x08003fc4

080021ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80021b4:	2313      	movs	r3, #19
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021bc:	2312      	movs	r3, #18
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	2380      	movs	r3, #128	@ 0x80
 80021ca:	029b      	lsls	r3, r3, #10
 80021cc:	4013      	ands	r3, r2
 80021ce:	d100      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80021d0:	e0a3      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d2:	2011      	movs	r0, #17
 80021d4:	183b      	adds	r3, r7, r0
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021da:	4bc3      	ldr	r3, [pc, #780]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021de:	2380      	movs	r3, #128	@ 0x80
 80021e0:	055b      	lsls	r3, r3, #21
 80021e2:	4013      	ands	r3, r2
 80021e4:	d110      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e6:	4bc0      	ldr	r3, [pc, #768]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021ea:	4bbf      	ldr	r3, [pc, #764]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ec:	2180      	movs	r1, #128	@ 0x80
 80021ee:	0549      	lsls	r1, r1, #21
 80021f0:	430a      	orrs	r2, r1
 80021f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021f4:	4bbc      	ldr	r3, [pc, #752]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021f8:	2380      	movs	r3, #128	@ 0x80
 80021fa:	055b      	lsls	r3, r3, #21
 80021fc:	4013      	ands	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002202:	183b      	adds	r3, r7, r0
 8002204:	2201      	movs	r2, #1
 8002206:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002208:	4bb8      	ldr	r3, [pc, #736]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4bb7      	ldr	r3, [pc, #732]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800220e:	2180      	movs	r1, #128	@ 0x80
 8002210:	0049      	lsls	r1, r1, #1
 8002212:	430a      	orrs	r2, r1
 8002214:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002216:	f7fe fd0d 	bl	8000c34 <HAL_GetTick>
 800221a:	0003      	movs	r3, r0
 800221c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800221e:	e00b      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002220:	f7fe fd08 	bl	8000c34 <HAL_GetTick>
 8002224:	0002      	movs	r2, r0
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d904      	bls.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800222e:	2313      	movs	r3, #19
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	2203      	movs	r2, #3
 8002234:	701a      	strb	r2, [r3, #0]
        break;
 8002236:	e005      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002238:	4bac      	ldr	r3, [pc, #688]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2380      	movs	r3, #128	@ 0x80
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4013      	ands	r3, r2
 8002242:	d0ed      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002244:	2313      	movs	r3, #19
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d154      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800224e:	4ba6      	ldr	r3, [pc, #664]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002250:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002252:	23c0      	movs	r3, #192	@ 0xc0
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4013      	ands	r3, r2
 8002258:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d019      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	429a      	cmp	r2, r3
 8002268:	d014      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800226a:	4b9f      	ldr	r3, [pc, #636]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800226c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226e:	4aa0      	ldr	r2, [pc, #640]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002270:	4013      	ands	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002274:	4b9c      	ldr	r3, [pc, #624]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002276:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002278:	4b9b      	ldr	r3, [pc, #620]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800227a:	2180      	movs	r1, #128	@ 0x80
 800227c:	0249      	lsls	r1, r1, #9
 800227e:	430a      	orrs	r2, r1
 8002280:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002282:	4b99      	ldr	r3, [pc, #612]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002284:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002286:	4b98      	ldr	r3, [pc, #608]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002288:	499a      	ldr	r1, [pc, #616]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800228a:	400a      	ands	r2, r1
 800228c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800228e:	4b96      	ldr	r3, [pc, #600]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2201      	movs	r2, #1
 8002298:	4013      	ands	r3, r2
 800229a:	d016      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe fcca 	bl	8000c34 <HAL_GetTick>
 80022a0:	0003      	movs	r3, r0
 80022a2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a4:	e00c      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f7fe fcc5 	bl	8000c34 <HAL_GetTick>
 80022aa:	0002      	movs	r2, r0
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	4a91      	ldr	r2, [pc, #580]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d904      	bls.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80022b6:	2313      	movs	r3, #19
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	2203      	movs	r2, #3
 80022bc:	701a      	strb	r2, [r3, #0]
            break;
 80022be:	e004      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c0:	4b89      	ldr	r3, [pc, #548]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c4:	2202      	movs	r2, #2
 80022c6:	4013      	ands	r3, r2
 80022c8:	d0ed      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80022ca:	2313      	movs	r3, #19
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022d4:	4b84      	ldr	r3, [pc, #528]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d8:	4a85      	ldr	r2, [pc, #532]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80022da:	4013      	ands	r3, r2
 80022dc:	0019      	movs	r1, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022e2:	4b81      	ldr	r3, [pc, #516]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022e4:	430a      	orrs	r2, r1
 80022e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022e8:	e00c      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022ea:	2312      	movs	r3, #18
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	2213      	movs	r2, #19
 80022f0:	18ba      	adds	r2, r7, r2
 80022f2:	7812      	ldrb	r2, [r2, #0]
 80022f4:	701a      	strb	r2, [r3, #0]
 80022f6:	e005      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022f8:	2312      	movs	r3, #18
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	2213      	movs	r2, #19
 80022fe:	18ba      	adds	r2, r7, r2
 8002300:	7812      	ldrb	r2, [r2, #0]
 8002302:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002304:	2311      	movs	r3, #17
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d105      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230e:	4b76      	ldr	r3, [pc, #472]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002310:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002312:	4b75      	ldr	r3, [pc, #468]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002314:	4979      	ldr	r1, [pc, #484]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002316:	400a      	ands	r2, r1
 8002318:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2201      	movs	r2, #1
 8002320:	4013      	ands	r3, r2
 8002322:	d009      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002324:	4b70      	ldr	r3, [pc, #448]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002328:	2203      	movs	r2, #3
 800232a:	4393      	bics	r3, r2
 800232c:	0019      	movs	r1, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	4b6d      	ldr	r3, [pc, #436]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002334:	430a      	orrs	r2, r1
 8002336:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2202      	movs	r2, #2
 800233e:	4013      	ands	r3, r2
 8002340:	d009      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002342:	4b69      	ldr	r3, [pc, #420]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002346:	220c      	movs	r2, #12
 8002348:	4393      	bics	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	4b65      	ldr	r3, [pc, #404]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002352:	430a      	orrs	r2, r1
 8002354:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2210      	movs	r2, #16
 800235c:	4013      	ands	r3, r2
 800235e:	d009      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002360:	4b61      	ldr	r3, [pc, #388]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002364:	4a66      	ldr	r2, [pc, #408]	@ (8002500 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002366:	4013      	ands	r3, r2
 8002368:	0019      	movs	r1, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	4b5e      	ldr	r3, [pc, #376]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002370:	430a      	orrs	r2, r1
 8002372:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2380      	movs	r3, #128	@ 0x80
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4013      	ands	r3, r2
 800237e:	d009      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002380:	4b59      	ldr	r3, [pc, #356]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002384:	4a5f      	ldr	r2, [pc, #380]	@ (8002504 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002386:	4013      	ands	r3, r2
 8002388:	0019      	movs	r1, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	4b56      	ldr	r3, [pc, #344]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002390:	430a      	orrs	r2, r1
 8002392:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	2380      	movs	r3, #128	@ 0x80
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4013      	ands	r3, r2
 800239e:	d009      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023a0:	4b51      	ldr	r3, [pc, #324]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a4:	4a58      	ldr	r2, [pc, #352]	@ (8002508 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	0019      	movs	r1, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69da      	ldr	r2, [r3, #28]
 80023ae:	4b4e      	ldr	r3, [pc, #312]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b0:	430a      	orrs	r2, r1
 80023b2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2220      	movs	r2, #32
 80023ba:	4013      	ands	r3, r2
 80023bc:	d009      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023be:	4b4a      	ldr	r3, [pc, #296]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c2:	4a52      	ldr	r2, [pc, #328]	@ (800250c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	4b46      	ldr	r3, [pc, #280]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ce:	430a      	orrs	r2, r1
 80023d0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	2380      	movs	r3, #128	@ 0x80
 80023d8:	01db      	lsls	r3, r3, #7
 80023da:	4013      	ands	r3, r2
 80023dc:	d015      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023de:	4b42      	ldr	r3, [pc, #264]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	0899      	lsrs	r1, r3, #2
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1a      	ldr	r2, [r3, #32]
 80023ea:	4b3f      	ldr	r3, [pc, #252]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ec:	430a      	orrs	r2, r1
 80023ee:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1a      	ldr	r2, [r3, #32]
 80023f4:	2380      	movs	r3, #128	@ 0x80
 80023f6:	05db      	lsls	r3, r3, #23
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d106      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023fc:	4b3a      	ldr	r3, [pc, #232]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	4b39      	ldr	r3, [pc, #228]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002402:	2180      	movs	r1, #128	@ 0x80
 8002404:	0249      	lsls	r1, r1, #9
 8002406:	430a      	orrs	r2, r1
 8002408:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	2380      	movs	r3, #128	@ 0x80
 8002410:	031b      	lsls	r3, r3, #12
 8002412:	4013      	ands	r3, r2
 8002414:	d009      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002416:	4b34      	ldr	r3, [pc, #208]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241a:	2240      	movs	r2, #64	@ 0x40
 800241c:	4393      	bics	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002424:	4b30      	ldr	r3, [pc, #192]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002426:	430a      	orrs	r2, r1
 8002428:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	039b      	lsls	r3, r3, #14
 8002432:	4013      	ands	r3, r2
 8002434:	d016      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002436:	4b2c      	ldr	r3, [pc, #176]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243a:	4a35      	ldr	r2, [pc, #212]	@ (8002510 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800243c:	4013      	ands	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002444:	4b28      	ldr	r3, [pc, #160]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002446:	430a      	orrs	r2, r1
 8002448:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800244e:	2380      	movs	r3, #128	@ 0x80
 8002450:	03db      	lsls	r3, r3, #15
 8002452:	429a      	cmp	r2, r3
 8002454:	d106      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002456:	4b24      	ldr	r3, [pc, #144]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	4b23      	ldr	r3, [pc, #140]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800245c:	2180      	movs	r1, #128	@ 0x80
 800245e:	0449      	lsls	r1, r1, #17
 8002460:	430a      	orrs	r2, r1
 8002462:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2380      	movs	r3, #128	@ 0x80
 800246a:	03db      	lsls	r3, r3, #15
 800246c:	4013      	ands	r3, r2
 800246e:	d016      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002470:	4b1d      	ldr	r3, [pc, #116]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002474:	4a27      	ldr	r2, [pc, #156]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002476:	4013      	ands	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800247e:	4b1a      	ldr	r3, [pc, #104]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002480:	430a      	orrs	r2, r1
 8002482:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002488:	2380      	movs	r3, #128	@ 0x80
 800248a:	045b      	lsls	r3, r3, #17
 800248c:	429a      	cmp	r2, r3
 800248e:	d106      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002490:	4b15      	ldr	r3, [pc, #84]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	4b14      	ldr	r3, [pc, #80]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002496:	2180      	movs	r1, #128	@ 0x80
 8002498:	0449      	lsls	r1, r1, #17
 800249a:	430a      	orrs	r2, r1
 800249c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	2380      	movs	r3, #128	@ 0x80
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	4013      	ands	r3, r2
 80024a8:	d016      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80024aa:	4b0f      	ldr	r3, [pc, #60]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695a      	ldr	r2, [r3, #20]
 80024b8:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ba:	430a      	orrs	r2, r1
 80024bc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	01db      	lsls	r3, r3, #7
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d106      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024ca:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024d0:	2180      	movs	r1, #128	@ 0x80
 80024d2:	0249      	lsls	r1, r1, #9
 80024d4:	430a      	orrs	r2, r1
 80024d6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80024d8:	2312      	movs	r3, #18
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	781b      	ldrb	r3, [r3, #0]
}
 80024de:	0018      	movs	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b006      	add	sp, #24
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	46c0      	nop			@ (mov r8, r8)
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40007000 	.word	0x40007000
 80024f0:	fffffcff 	.word	0xfffffcff
 80024f4:	fffeffff 	.word	0xfffeffff
 80024f8:	00001388 	.word	0x00001388
 80024fc:	efffffff 	.word	0xefffffff
 8002500:	fffff3ff 	.word	0xfffff3ff
 8002504:	fff3ffff 	.word	0xfff3ffff
 8002508:	ffcfffff 	.word	0xffcfffff
 800250c:	ffffcfff 	.word	0xffffcfff
 8002510:	ffbfffff 	.word	0xffbfffff
 8002514:	feffffff 	.word	0xfeffffff
 8002518:	ffff3fff 	.word	0xffff3fff

0800251c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e046      	b.n	80025bc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2288      	movs	r2, #136	@ 0x88
 8002532:	589b      	ldr	r3, [r3, r2]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d107      	bne.n	8002548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2284      	movs	r2, #132	@ 0x84
 800253c:	2100      	movs	r1, #0
 800253e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	0018      	movs	r0, r3
 8002544:	f7fe fa02 	bl	800094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2288      	movs	r2, #136	@ 0x88
 800254c:	2124      	movs	r1, #36	@ 0x24
 800254e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2101      	movs	r1, #1
 800255c:	438a      	bics	r2, r1
 800255e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	0018      	movs	r0, r3
 800256c:	f000 ff3e 	bl	80033ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	0018      	movs	r0, r3
 8002574:	f000 fc7c 	bl	8002e70 <UART_SetConfig>
 8002578:	0003      	movs	r3, r0
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e01c      	b.n	80025bc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	490d      	ldr	r1, [pc, #52]	@ (80025c4 <HAL_UART_Init+0xa8>)
 800258e:	400a      	ands	r2, r1
 8002590:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	212a      	movs	r1, #42	@ 0x2a
 800259e:	438a      	bics	r2, r1
 80025a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2101      	movs	r1, #1
 80025ae:	430a      	orrs	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f000 ffcd 	bl	8003554 <UART_CheckIdleState>
 80025ba:	0003      	movs	r3, r0
}
 80025bc:	0018      	movs	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	b002      	add	sp, #8
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	ffffb7ff 	.word	0xffffb7ff

080025c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	@ 0x28
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	1dbb      	adds	r3, r7, #6
 80025d6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2288      	movs	r2, #136	@ 0x88
 80025dc:	589b      	ldr	r3, [r3, r2]
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d000      	beq.n	80025e4 <HAL_UART_Transmit+0x1c>
 80025e2:	e090      	b.n	8002706 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_UART_Transmit+0x2a>
 80025ea:	1dbb      	adds	r3, r7, #6
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e088      	b.n	8002708 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	2380      	movs	r3, #128	@ 0x80
 80025fc:	015b      	lsls	r3, r3, #5
 80025fe:	429a      	cmp	r2, r3
 8002600:	d109      	bne.n	8002616 <HAL_UART_Transmit+0x4e>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d105      	bne.n	8002616 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2201      	movs	r2, #1
 800260e:	4013      	ands	r3, r2
 8002610:	d001      	beq.n	8002616 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e078      	b.n	8002708 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2290      	movs	r2, #144	@ 0x90
 800261a:	2100      	movs	r1, #0
 800261c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2288      	movs	r2, #136	@ 0x88
 8002622:	2121      	movs	r1, #33	@ 0x21
 8002624:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002626:	f7fe fb05 	bl	8000c34 <HAL_GetTick>
 800262a:	0003      	movs	r3, r0
 800262c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1dba      	adds	r2, r7, #6
 8002632:	2154      	movs	r1, #84	@ 0x54
 8002634:	8812      	ldrh	r2, [r2, #0]
 8002636:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	1dba      	adds	r2, r7, #6
 800263c:	2156      	movs	r1, #86	@ 0x56
 800263e:	8812      	ldrh	r2, [r2, #0]
 8002640:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	015b      	lsls	r3, r3, #5
 800264a:	429a      	cmp	r2, r3
 800264c:	d108      	bne.n	8002660 <HAL_UART_Transmit+0x98>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d104      	bne.n	8002660 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	e003      	b.n	8002668 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002664:	2300      	movs	r3, #0
 8002666:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002668:	e030      	b.n	80026cc <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	0013      	movs	r3, r2
 8002674:	2200      	movs	r2, #0
 8002676:	2180      	movs	r1, #128	@ 0x80
 8002678:	f001 f816 	bl	80036a8 <UART_WaitOnFlagUntilTimeout>
 800267c:	1e03      	subs	r3, r0, #0
 800267e:	d005      	beq.n	800268c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2288      	movs	r2, #136	@ 0x88
 8002684:	2120      	movs	r1, #32
 8002686:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e03d      	b.n	8002708 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10b      	bne.n	80026aa <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	001a      	movs	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	05d2      	lsls	r2, r2, #23
 800269e:	0dd2      	lsrs	r2, r2, #23
 80026a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	3302      	adds	r3, #2
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	e007      	b.n	80026ba <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	781a      	ldrb	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	3301      	adds	r3, #1
 80026b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2256      	movs	r2, #86	@ 0x56
 80026be:	5a9b      	ldrh	r3, [r3, r2]
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b299      	uxth	r1, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2256      	movs	r2, #86	@ 0x56
 80026ca:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2256      	movs	r2, #86	@ 0x56
 80026d0:	5a9b      	ldrh	r3, [r3, r2]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1c8      	bne.n	800266a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	0013      	movs	r3, r2
 80026e2:	2200      	movs	r2, #0
 80026e4:	2140      	movs	r1, #64	@ 0x40
 80026e6:	f000 ffdf 	bl	80036a8 <UART_WaitOnFlagUntilTimeout>
 80026ea:	1e03      	subs	r3, r0, #0
 80026ec:	d005      	beq.n	80026fa <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2288      	movs	r2, #136	@ 0x88
 80026f2:	2120      	movs	r1, #32
 80026f4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e006      	b.n	8002708 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2288      	movs	r2, #136	@ 0x88
 80026fe:	2120      	movs	r1, #32
 8002700:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002706:	2302      	movs	r3, #2
  }
}
 8002708:	0018      	movs	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	b008      	add	sp, #32
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	1dbb      	adds	r3, r7, #6
 800271c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	228c      	movs	r2, #140	@ 0x8c
 8002722:	589b      	ldr	r3, [r3, r2]
 8002724:	2b20      	cmp	r3, #32
 8002726:	d14a      	bne.n	80027be <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_UART_Receive_DMA+0x26>
 800272e:	1dbb      	adds	r3, r7, #6
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e042      	b.n	80027c0 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	2380      	movs	r3, #128	@ 0x80
 8002740:	015b      	lsls	r3, r3, #5
 8002742:	429a      	cmp	r2, r3
 8002744:	d109      	bne.n	800275a <HAL_UART_Receive_DMA+0x4a>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d105      	bne.n	800275a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2201      	movs	r2, #1
 8002752:	4013      	ands	r3, r2
 8002754:	d001      	beq.n	800275a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e032      	b.n	80027c0 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a18      	ldr	r2, [pc, #96]	@ (80027c8 <HAL_UART_Receive_DMA+0xb8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d020      	beq.n	80027ac <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	2380      	movs	r3, #128	@ 0x80
 8002772:	041b      	lsls	r3, r3, #16
 8002774:	4013      	ands	r3, r2
 8002776:	d019      	beq.n	80027ac <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002778:	f3ef 8310 	mrs	r3, PRIMASK
 800277c:	613b      	str	r3, [r7, #16]
  return(result);
 800277e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	2301      	movs	r3, #1
 8002784:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f383 8810 	msr	PRIMASK, r3
}
 800278c:	46c0      	nop			@ (mov r8, r8)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2180      	movs	r1, #128	@ 0x80
 800279a:	04c9      	lsls	r1, r1, #19
 800279c:	430a      	orrs	r2, r1
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	f383 8810 	msr	PRIMASK, r3
}
 80027aa:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80027ac:	1dbb      	adds	r3, r7, #6
 80027ae:	881a      	ldrh	r2, [r3, #0]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	0018      	movs	r0, r3
 80027b6:	f000 ffe7 	bl	8003788 <UART_Start_Receive_DMA>
 80027ba:	0003      	movs	r3, r0
 80027bc:	e000      	b.n	80027c0 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80027be:	2302      	movs	r3, #2
  }
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b008      	add	sp, #32
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40008000 	.word	0x40008000

080027cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027cc:	b5b0      	push	{r4, r5, r7, lr}
 80027ce:	b0aa      	sub	sp, #168	@ 0xa8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	22a4      	movs	r2, #164	@ 0xa4
 80027dc:	18b9      	adds	r1, r7, r2
 80027de:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	20a0      	movs	r0, #160	@ 0xa0
 80027e8:	1839      	adds	r1, r7, r0
 80027ea:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	249c      	movs	r4, #156	@ 0x9c
 80027f4:	1939      	adds	r1, r7, r4
 80027f6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027f8:	0011      	movs	r1, r2
 80027fa:	18bb      	adds	r3, r7, r2
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4aa2      	ldr	r2, [pc, #648]	@ (8002a88 <HAL_UART_IRQHandler+0x2bc>)
 8002800:	4013      	ands	r3, r2
 8002802:	2298      	movs	r2, #152	@ 0x98
 8002804:	18bd      	adds	r5, r7, r2
 8002806:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002808:	18bb      	adds	r3, r7, r2
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d11a      	bne.n	8002846 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002810:	187b      	adds	r3, r7, r1
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2220      	movs	r2, #32
 8002816:	4013      	ands	r3, r2
 8002818:	d015      	beq.n	8002846 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800281a:	183b      	adds	r3, r7, r0
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2220      	movs	r2, #32
 8002820:	4013      	ands	r3, r2
 8002822:	d105      	bne.n	8002830 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002824:	193b      	adds	r3, r7, r4
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	2380      	movs	r3, #128	@ 0x80
 800282a:	055b      	lsls	r3, r3, #21
 800282c:	4013      	ands	r3, r2
 800282e:	d00a      	beq.n	8002846 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002834:	2b00      	cmp	r3, #0
 8002836:	d100      	bne.n	800283a <HAL_UART_IRQHandler+0x6e>
 8002838:	e2dc      	b.n	8002df4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	0010      	movs	r0, r2
 8002842:	4798      	blx	r3
      }
      return;
 8002844:	e2d6      	b.n	8002df4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002846:	2398      	movs	r3, #152	@ 0x98
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d100      	bne.n	8002852 <HAL_UART_IRQHandler+0x86>
 8002850:	e122      	b.n	8002a98 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002852:	239c      	movs	r3, #156	@ 0x9c
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a8c      	ldr	r2, [pc, #560]	@ (8002a8c <HAL_UART_IRQHandler+0x2c0>)
 800285a:	4013      	ands	r3, r2
 800285c:	d106      	bne.n	800286c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800285e:	23a0      	movs	r3, #160	@ 0xa0
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a8a      	ldr	r2, [pc, #552]	@ (8002a90 <HAL_UART_IRQHandler+0x2c4>)
 8002866:	4013      	ands	r3, r2
 8002868:	d100      	bne.n	800286c <HAL_UART_IRQHandler+0xa0>
 800286a:	e115      	b.n	8002a98 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800286c:	23a4      	movs	r3, #164	@ 0xa4
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2201      	movs	r2, #1
 8002874:	4013      	ands	r3, r2
 8002876:	d012      	beq.n	800289e <HAL_UART_IRQHandler+0xd2>
 8002878:	23a0      	movs	r3, #160	@ 0xa0
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	2380      	movs	r3, #128	@ 0x80
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4013      	ands	r3, r2
 8002884:	d00b      	beq.n	800289e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2201      	movs	r2, #1
 800288c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2290      	movs	r2, #144	@ 0x90
 8002892:	589b      	ldr	r3, [r3, r2]
 8002894:	2201      	movs	r2, #1
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2190      	movs	r1, #144	@ 0x90
 800289c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800289e:	23a4      	movs	r3, #164	@ 0xa4
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2202      	movs	r2, #2
 80028a6:	4013      	ands	r3, r2
 80028a8:	d011      	beq.n	80028ce <HAL_UART_IRQHandler+0x102>
 80028aa:	239c      	movs	r3, #156	@ 0x9c
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2201      	movs	r2, #1
 80028b2:	4013      	ands	r3, r2
 80028b4:	d00b      	beq.n	80028ce <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2202      	movs	r2, #2
 80028bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2290      	movs	r2, #144	@ 0x90
 80028c2:	589b      	ldr	r3, [r3, r2]
 80028c4:	2204      	movs	r2, #4
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2190      	movs	r1, #144	@ 0x90
 80028cc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028ce:	23a4      	movs	r3, #164	@ 0xa4
 80028d0:	18fb      	adds	r3, r7, r3
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2204      	movs	r2, #4
 80028d6:	4013      	ands	r3, r2
 80028d8:	d011      	beq.n	80028fe <HAL_UART_IRQHandler+0x132>
 80028da:	239c      	movs	r3, #156	@ 0x9c
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2201      	movs	r2, #1
 80028e2:	4013      	ands	r3, r2
 80028e4:	d00b      	beq.n	80028fe <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2204      	movs	r2, #4
 80028ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2290      	movs	r2, #144	@ 0x90
 80028f2:	589b      	ldr	r3, [r3, r2]
 80028f4:	2202      	movs	r2, #2
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2190      	movs	r1, #144	@ 0x90
 80028fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028fe:	23a4      	movs	r3, #164	@ 0xa4
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2208      	movs	r2, #8
 8002906:	4013      	ands	r3, r2
 8002908:	d017      	beq.n	800293a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800290a:	23a0      	movs	r3, #160	@ 0xa0
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2220      	movs	r2, #32
 8002912:	4013      	ands	r3, r2
 8002914:	d105      	bne.n	8002922 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002916:	239c      	movs	r3, #156	@ 0x9c
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a5b      	ldr	r2, [pc, #364]	@ (8002a8c <HAL_UART_IRQHandler+0x2c0>)
 800291e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002920:	d00b      	beq.n	800293a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2208      	movs	r2, #8
 8002928:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2290      	movs	r2, #144	@ 0x90
 800292e:	589b      	ldr	r3, [r3, r2]
 8002930:	2208      	movs	r2, #8
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2190      	movs	r1, #144	@ 0x90
 8002938:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800293a:	23a4      	movs	r3, #164	@ 0xa4
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	2380      	movs	r3, #128	@ 0x80
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	4013      	ands	r3, r2
 8002946:	d013      	beq.n	8002970 <HAL_UART_IRQHandler+0x1a4>
 8002948:	23a0      	movs	r3, #160	@ 0xa0
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	2380      	movs	r3, #128	@ 0x80
 8002950:	04db      	lsls	r3, r3, #19
 8002952:	4013      	ands	r3, r2
 8002954:	d00c      	beq.n	8002970 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2280      	movs	r2, #128	@ 0x80
 800295c:	0112      	lsls	r2, r2, #4
 800295e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2290      	movs	r2, #144	@ 0x90
 8002964:	589b      	ldr	r3, [r3, r2]
 8002966:	2220      	movs	r2, #32
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2190      	movs	r1, #144	@ 0x90
 800296e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2290      	movs	r2, #144	@ 0x90
 8002974:	589b      	ldr	r3, [r3, r2]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d100      	bne.n	800297c <HAL_UART_IRQHandler+0x1b0>
 800297a:	e23d      	b.n	8002df8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800297c:	23a4      	movs	r3, #164	@ 0xa4
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2220      	movs	r2, #32
 8002984:	4013      	ands	r3, r2
 8002986:	d015      	beq.n	80029b4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002988:	23a0      	movs	r3, #160	@ 0xa0
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2220      	movs	r2, #32
 8002990:	4013      	ands	r3, r2
 8002992:	d106      	bne.n	80029a2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002994:	239c      	movs	r3, #156	@ 0x9c
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	2380      	movs	r3, #128	@ 0x80
 800299c:	055b      	lsls	r3, r3, #21
 800299e:	4013      	ands	r3, r2
 80029a0:	d008      	beq.n	80029b4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d004      	beq.n	80029b4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	0010      	movs	r0, r2
 80029b2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2290      	movs	r2, #144	@ 0x90
 80029b8:	589b      	ldr	r3, [r3, r2]
 80029ba:	2194      	movs	r1, #148	@ 0x94
 80029bc:	187a      	adds	r2, r7, r1
 80029be:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2240      	movs	r2, #64	@ 0x40
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b40      	cmp	r3, #64	@ 0x40
 80029cc:	d004      	beq.n	80029d8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2228      	movs	r2, #40	@ 0x28
 80029d4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029d6:	d04c      	beq.n	8002a72 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 ffba 	bl	8003954 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2240      	movs	r2, #64	@ 0x40
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b40      	cmp	r3, #64	@ 0x40
 80029ec:	d13c      	bne.n	8002a68 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ee:	f3ef 8310 	mrs	r3, PRIMASK
 80029f2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80029f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029f6:	2090      	movs	r0, #144	@ 0x90
 80029f8:	183a      	adds	r2, r7, r0
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	2301      	movs	r3, #1
 80029fe:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a02:	f383 8810 	msr	PRIMASK, r3
}
 8002a06:	46c0      	nop			@ (mov r8, r8)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2140      	movs	r1, #64	@ 0x40
 8002a14:	438a      	bics	r2, r1
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	183b      	adds	r3, r7, r0
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a20:	f383 8810 	msr	PRIMASK, r3
}
 8002a24:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2280      	movs	r2, #128	@ 0x80
 8002a2a:	589b      	ldr	r3, [r3, r2]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d016      	beq.n	8002a5e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2280      	movs	r2, #128	@ 0x80
 8002a34:	589b      	ldr	r3, [r3, r2]
 8002a36:	4a17      	ldr	r2, [pc, #92]	@ (8002a94 <HAL_UART_IRQHandler+0x2c8>)
 8002a38:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2280      	movs	r2, #128	@ 0x80
 8002a3e:	589b      	ldr	r3, [r3, r2]
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7fe fb75 	bl	8001130 <HAL_DMA_Abort_IT>
 8002a46:	1e03      	subs	r3, r0, #0
 8002a48:	d01c      	beq.n	8002a84 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2280      	movs	r2, #128	@ 0x80
 8002a4e:	589b      	ldr	r3, [r3, r2]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	2180      	movs	r1, #128	@ 0x80
 8002a56:	5852      	ldr	r2, [r2, r1]
 8002a58:	0010      	movs	r0, r2
 8002a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a5c:	e012      	b.n	8002a84 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	0018      	movs	r0, r3
 8002a62:	f000 f9f1 	bl	8002e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a66:	e00d      	b.n	8002a84 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f000 f9ec 	bl	8002e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a70:	e008      	b.n	8002a84 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f000 f9e7 	bl	8002e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2290      	movs	r2, #144	@ 0x90
 8002a7e:	2100      	movs	r1, #0
 8002a80:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002a82:	e1b9      	b.n	8002df8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a84:	46c0      	nop			@ (mov r8, r8)
    return;
 8002a86:	e1b7      	b.n	8002df8 <HAL_UART_IRQHandler+0x62c>
 8002a88:	0000080f 	.word	0x0000080f
 8002a8c:	10000001 	.word	0x10000001
 8002a90:	04000120 	.word	0x04000120
 8002a94:	08003c19 	.word	0x08003c19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d000      	beq.n	8002aa2 <HAL_UART_IRQHandler+0x2d6>
 8002aa0:	e13e      	b.n	8002d20 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002aa2:	23a4      	movs	r3, #164	@ 0xa4
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2210      	movs	r2, #16
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d100      	bne.n	8002ab0 <HAL_UART_IRQHandler+0x2e4>
 8002aae:	e137      	b.n	8002d20 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ab0:	23a0      	movs	r3, #160	@ 0xa0
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2210      	movs	r2, #16
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d100      	bne.n	8002abe <HAL_UART_IRQHandler+0x2f2>
 8002abc:	e130      	b.n	8002d20 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2210      	movs	r2, #16
 8002ac4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2240      	movs	r2, #64	@ 0x40
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b40      	cmp	r3, #64	@ 0x40
 8002ad2:	d000      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x30a>
 8002ad4:	e0a4      	b.n	8002c20 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2280      	movs	r2, #128	@ 0x80
 8002ada:	589b      	ldr	r3, [r3, r2]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	217e      	movs	r1, #126	@ 0x7e
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d100      	bne.n	8002af0 <HAL_UART_IRQHandler+0x324>
 8002aee:	e185      	b.n	8002dfc <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	225c      	movs	r2, #92	@ 0x5c
 8002af4:	5a9b      	ldrh	r3, [r3, r2]
 8002af6:	187a      	adds	r2, r7, r1
 8002af8:	8812      	ldrh	r2, [r2, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d300      	bcc.n	8002b00 <HAL_UART_IRQHandler+0x334>
 8002afe:	e17d      	b.n	8002dfc <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	187a      	adds	r2, r7, r1
 8002b04:	215e      	movs	r1, #94	@ 0x5e
 8002b06:	8812      	ldrh	r2, [r2, #0]
 8002b08:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2280      	movs	r2, #128	@ 0x80
 8002b0e:	589b      	ldr	r3, [r3, r2]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2220      	movs	r2, #32
 8002b16:	4013      	ands	r3, r2
 8002b18:	d170      	bne.n	8002bfc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b1e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b24:	2301      	movs	r3, #1
 8002b26:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b2a:	f383 8810 	msr	PRIMASK, r3
}
 8002b2e:	46c0      	nop			@ (mov r8, r8)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	49b4      	ldr	r1, [pc, #720]	@ (8002e0c <HAL_UART_IRQHandler+0x640>)
 8002b3c:	400a      	ands	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b42:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b46:	f383 8810 	msr	PRIMASK, r3
}
 8002b4a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b54:	677b      	str	r3, [r7, #116]	@ 0x74
 8002b56:	2301      	movs	r3, #1
 8002b58:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b5c:	f383 8810 	msr	PRIMASK, r3
}
 8002b60:	46c0      	nop			@ (mov r8, r8)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	438a      	bics	r2, r1
 8002b70:	609a      	str	r2, [r3, #8]
 8002b72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b74:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b78:	f383 8810 	msr	PRIMASK, r3
}
 8002b7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b82:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002b84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b86:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b88:	2301      	movs	r3, #1
 8002b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b8e:	f383 8810 	msr	PRIMASK, r3
}
 8002b92:	46c0      	nop			@ (mov r8, r8)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2140      	movs	r1, #64	@ 0x40
 8002ba0:	438a      	bics	r2, r1
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ba6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002baa:	f383 8810 	msr	PRIMASK, r3
}
 8002bae:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	228c      	movs	r2, #140	@ 0x8c
 8002bb4:	2120      	movs	r1, #32
 8002bb6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8002bc2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002bc8:	2301      	movs	r3, #1
 8002bca:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bce:	f383 8810 	msr	PRIMASK, r3
}
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2110      	movs	r1, #16
 8002be0:	438a      	bics	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002be6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bea:	f383 8810 	msr	PRIMASK, r3
}
 8002bee:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2280      	movs	r2, #128	@ 0x80
 8002bf4:	589b      	ldr	r3, [r3, r2]
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f7fe fa38 	bl	800106c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	225c      	movs	r2, #92	@ 0x5c
 8002c06:	5a9a      	ldrh	r2, [r3, r2]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	215e      	movs	r1, #94	@ 0x5e
 8002c0c:	5a5b      	ldrh	r3, [r3, r1]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	0011      	movs	r1, r2
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f000 f91d 	bl	8002e58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c1e:	e0ed      	b.n	8002dfc <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	225c      	movs	r2, #92	@ 0x5c
 8002c24:	5a99      	ldrh	r1, [r3, r2]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	225e      	movs	r2, #94	@ 0x5e
 8002c2a:	5a9b      	ldrh	r3, [r3, r2]
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	208e      	movs	r0, #142	@ 0x8e
 8002c30:	183b      	adds	r3, r7, r0
 8002c32:	1a8a      	subs	r2, r1, r2
 8002c34:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	225e      	movs	r2, #94	@ 0x5e
 8002c3a:	5a9b      	ldrh	r3, [r3, r2]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d100      	bne.n	8002c44 <HAL_UART_IRQHandler+0x478>
 8002c42:	e0dd      	b.n	8002e00 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002c44:	183b      	adds	r3, r7, r0
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d100      	bne.n	8002c4e <HAL_UART_IRQHandler+0x482>
 8002c4c:	e0d8      	b.n	8002e00 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c52:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c54:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c56:	2488      	movs	r4, #136	@ 0x88
 8002c58:	193a      	adds	r2, r7, r4
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f383 8810 	msr	PRIMASK, r3
}
 8002c66:	46c0      	nop			@ (mov r8, r8)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4967      	ldr	r1, [pc, #412]	@ (8002e10 <HAL_UART_IRQHandler+0x644>)
 8002c74:	400a      	ands	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	193b      	adds	r3, r7, r4
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f383 8810 	msr	PRIMASK, r3
}
 8002c84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c86:	f3ef 8310 	mrs	r3, PRIMASK
 8002c8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c8c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c8e:	2484      	movs	r4, #132	@ 0x84
 8002c90:	193a      	adds	r2, r7, r4
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	2301      	movs	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f383 8810 	msr	PRIMASK, r3
}
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	495a      	ldr	r1, [pc, #360]	@ (8002e14 <HAL_UART_IRQHandler+0x648>)
 8002cac:	400a      	ands	r2, r1
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	193b      	adds	r3, r7, r4
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	f383 8810 	msr	PRIMASK, r3
}
 8002cbc:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	228c      	movs	r2, #140	@ 0x8c
 8002cc2:	2120      	movs	r1, #32
 8002cc4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cda:	2480      	movs	r4, #128	@ 0x80
 8002cdc:	193a      	adds	r2, r7, r4
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce6:	f383 8810 	msr	PRIMASK, r3
}
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2110      	movs	r1, #16
 8002cf8:	438a      	bics	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	193b      	adds	r3, r7, r4
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d04:	f383 8810 	msr	PRIMASK, r3
}
 8002d08:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d10:	183b      	adds	r3, r7, r0
 8002d12:	881a      	ldrh	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	0011      	movs	r1, r2
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f000 f89d 	bl	8002e58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d1e:	e06f      	b.n	8002e00 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d20:	23a4      	movs	r3, #164	@ 0xa4
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	2380      	movs	r3, #128	@ 0x80
 8002d28:	035b      	lsls	r3, r3, #13
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d010      	beq.n	8002d50 <HAL_UART_IRQHandler+0x584>
 8002d2e:	239c      	movs	r3, #156	@ 0x9c
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2380      	movs	r3, #128	@ 0x80
 8002d36:	03db      	lsls	r3, r3, #15
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d009      	beq.n	8002d50 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2280      	movs	r2, #128	@ 0x80
 8002d42:	0352      	lsls	r2, r2, #13
 8002d44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 ffa8 	bl	8003c9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d4e:	e05a      	b.n	8002e06 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002d50:	23a4      	movs	r3, #164	@ 0xa4
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2280      	movs	r2, #128	@ 0x80
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d016      	beq.n	8002d8a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002d5c:	23a0      	movs	r3, #160	@ 0xa0
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2280      	movs	r2, #128	@ 0x80
 8002d64:	4013      	ands	r3, r2
 8002d66:	d106      	bne.n	8002d76 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002d68:	239c      	movs	r3, #156	@ 0x9c
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	2380      	movs	r3, #128	@ 0x80
 8002d70:	041b      	lsls	r3, r3, #16
 8002d72:	4013      	ands	r3, r2
 8002d74:	d009      	beq.n	8002d8a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d042      	beq.n	8002e04 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	0010      	movs	r0, r2
 8002d86:	4798      	blx	r3
    }
    return;
 8002d88:	e03c      	b.n	8002e04 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d8a:	23a4      	movs	r3, #164	@ 0xa4
 8002d8c:	18fb      	adds	r3, r7, r3
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2240      	movs	r2, #64	@ 0x40
 8002d92:	4013      	ands	r3, r2
 8002d94:	d00a      	beq.n	8002dac <HAL_UART_IRQHandler+0x5e0>
 8002d96:	23a0      	movs	r3, #160	@ 0xa0
 8002d98:	18fb      	adds	r3, r7, r3
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2240      	movs	r2, #64	@ 0x40
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d004      	beq.n	8002dac <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	0018      	movs	r0, r3
 8002da6:	f000 ff4e 	bl	8003c46 <UART_EndTransmit_IT>
    return;
 8002daa:	e02c      	b.n	8002e06 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002dac:	23a4      	movs	r3, #164	@ 0xa4
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	2380      	movs	r3, #128	@ 0x80
 8002db4:	041b      	lsls	r3, r3, #16
 8002db6:	4013      	ands	r3, r2
 8002db8:	d00b      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x606>
 8002dba:	23a0      	movs	r3, #160	@ 0xa0
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	2380      	movs	r3, #128	@ 0x80
 8002dc2:	05db      	lsls	r3, r3, #23
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d004      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f000 ff77 	bl	8003cbe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002dd0:	e019      	b.n	8002e06 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002dd2:	23a4      	movs	r3, #164	@ 0xa4
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	045b      	lsls	r3, r3, #17
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d012      	beq.n	8002e06 <HAL_UART_IRQHandler+0x63a>
 8002de0:	23a0      	movs	r3, #160	@ 0xa0
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	da0d      	bge.n	8002e06 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 ff5e 	bl	8003cae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002df2:	e008      	b.n	8002e06 <HAL_UART_IRQHandler+0x63a>
      return;
 8002df4:	46c0      	nop			@ (mov r8, r8)
 8002df6:	e006      	b.n	8002e06 <HAL_UART_IRQHandler+0x63a>
    return;
 8002df8:	46c0      	nop			@ (mov r8, r8)
 8002dfa:	e004      	b.n	8002e06 <HAL_UART_IRQHandler+0x63a>
      return;
 8002dfc:	46c0      	nop			@ (mov r8, r8)
 8002dfe:	e002      	b.n	8002e06 <HAL_UART_IRQHandler+0x63a>
      return;
 8002e00:	46c0      	nop			@ (mov r8, r8)
 8002e02:	e000      	b.n	8002e06 <HAL_UART_IRQHandler+0x63a>
    return;
 8002e04:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b02a      	add	sp, #168	@ 0xa8
 8002e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e0c:	fffffeff 	.word	0xfffffeff
 8002e10:	fffffedf 	.word	0xfffffedf
 8002e14:	effffffe 	.word	0xeffffffe

08002e18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e20:	46c0      	nop			@ (mov r8, r8)
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b002      	add	sp, #8
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002e30:	46c0      	nop			@ (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b002      	add	sp, #8
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002e40:	46c0      	nop			@ (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b002      	add	sp, #8
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e50:	46c0      	nop			@ (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	000a      	movs	r2, r1
 8002e62:	1cbb      	adds	r3, r7, #2
 8002e64:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e66:	46c0      	nop			@ (mov r8, r8)
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b002      	add	sp, #8
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e70:	b5b0      	push	{r4, r5, r7, lr}
 8002e72:	b090      	sub	sp, #64	@ 0x40
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e78:	231a      	movs	r3, #26
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	189b      	adds	r3, r3, r2
 8002e7e:	19db      	adds	r3, r3, r7
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4aaf      	ldr	r2, [pc, #700]	@ (8003160 <UART_SetConfig+0x2f0>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4aaa      	ldr	r2, [pc, #680]	@ (8003164 <UART_SetConfig+0x2f4>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	68d9      	ldr	r1, [r3, #12]
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4aa4      	ldr	r2, [pc, #656]	@ (8003168 <UART_SetConfig+0x2f8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d004      	beq.n	8002ee6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4a9f      	ldr	r2, [pc, #636]	@ (800316c <UART_SetConfig+0x2fc>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f02:	220f      	movs	r2, #15
 8002f04:	4393      	bics	r3, r2
 8002f06:	0018      	movs	r0, r3
 8002f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	0003      	movs	r3, r0
 8002f12:	430b      	orrs	r3, r1
 8002f14:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a95      	ldr	r2, [pc, #596]	@ (8003170 <UART_SetConfig+0x300>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d131      	bne.n	8002f84 <UART_SetConfig+0x114>
 8002f20:	4b94      	ldr	r3, [pc, #592]	@ (8003174 <UART_SetConfig+0x304>)
 8002f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f24:	2203      	movs	r2, #3
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d01d      	beq.n	8002f68 <UART_SetConfig+0xf8>
 8002f2c:	d823      	bhi.n	8002f76 <UART_SetConfig+0x106>
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d00c      	beq.n	8002f4c <UART_SetConfig+0xdc>
 8002f32:	d820      	bhi.n	8002f76 <UART_SetConfig+0x106>
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <UART_SetConfig+0xce>
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d00e      	beq.n	8002f5a <UART_SetConfig+0xea>
 8002f3c:	e01b      	b.n	8002f76 <UART_SetConfig+0x106>
 8002f3e:	231b      	movs	r3, #27
 8002f40:	2220      	movs	r2, #32
 8002f42:	189b      	adds	r3, r3, r2
 8002f44:	19db      	adds	r3, r3, r7
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	e0b4      	b.n	80030b6 <UART_SetConfig+0x246>
 8002f4c:	231b      	movs	r3, #27
 8002f4e:	2220      	movs	r2, #32
 8002f50:	189b      	adds	r3, r3, r2
 8002f52:	19db      	adds	r3, r3, r7
 8002f54:	2202      	movs	r2, #2
 8002f56:	701a      	strb	r2, [r3, #0]
 8002f58:	e0ad      	b.n	80030b6 <UART_SetConfig+0x246>
 8002f5a:	231b      	movs	r3, #27
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	189b      	adds	r3, r3, r2
 8002f60:	19db      	adds	r3, r3, r7
 8002f62:	2204      	movs	r2, #4
 8002f64:	701a      	strb	r2, [r3, #0]
 8002f66:	e0a6      	b.n	80030b6 <UART_SetConfig+0x246>
 8002f68:	231b      	movs	r3, #27
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	189b      	adds	r3, r3, r2
 8002f6e:	19db      	adds	r3, r3, r7
 8002f70:	2208      	movs	r2, #8
 8002f72:	701a      	strb	r2, [r3, #0]
 8002f74:	e09f      	b.n	80030b6 <UART_SetConfig+0x246>
 8002f76:	231b      	movs	r3, #27
 8002f78:	2220      	movs	r2, #32
 8002f7a:	189b      	adds	r3, r3, r2
 8002f7c:	19db      	adds	r3, r3, r7
 8002f7e:	2210      	movs	r2, #16
 8002f80:	701a      	strb	r2, [r3, #0]
 8002f82:	e098      	b.n	80030b6 <UART_SetConfig+0x246>
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a7b      	ldr	r2, [pc, #492]	@ (8003178 <UART_SetConfig+0x308>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d131      	bne.n	8002ff2 <UART_SetConfig+0x182>
 8002f8e:	4b79      	ldr	r3, [pc, #484]	@ (8003174 <UART_SetConfig+0x304>)
 8002f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f92:	220c      	movs	r2, #12
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d01d      	beq.n	8002fd6 <UART_SetConfig+0x166>
 8002f9a:	d823      	bhi.n	8002fe4 <UART_SetConfig+0x174>
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d00c      	beq.n	8002fba <UART_SetConfig+0x14a>
 8002fa0:	d820      	bhi.n	8002fe4 <UART_SetConfig+0x174>
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <UART_SetConfig+0x13c>
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d00e      	beq.n	8002fc8 <UART_SetConfig+0x158>
 8002faa:	e01b      	b.n	8002fe4 <UART_SetConfig+0x174>
 8002fac:	231b      	movs	r3, #27
 8002fae:	2220      	movs	r2, #32
 8002fb0:	189b      	adds	r3, r3, r2
 8002fb2:	19db      	adds	r3, r3, r7
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	701a      	strb	r2, [r3, #0]
 8002fb8:	e07d      	b.n	80030b6 <UART_SetConfig+0x246>
 8002fba:	231b      	movs	r3, #27
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	189b      	adds	r3, r3, r2
 8002fc0:	19db      	adds	r3, r3, r7
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	e076      	b.n	80030b6 <UART_SetConfig+0x246>
 8002fc8:	231b      	movs	r3, #27
 8002fca:	2220      	movs	r2, #32
 8002fcc:	189b      	adds	r3, r3, r2
 8002fce:	19db      	adds	r3, r3, r7
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	e06f      	b.n	80030b6 <UART_SetConfig+0x246>
 8002fd6:	231b      	movs	r3, #27
 8002fd8:	2220      	movs	r2, #32
 8002fda:	189b      	adds	r3, r3, r2
 8002fdc:	19db      	adds	r3, r3, r7
 8002fde:	2208      	movs	r2, #8
 8002fe0:	701a      	strb	r2, [r3, #0]
 8002fe2:	e068      	b.n	80030b6 <UART_SetConfig+0x246>
 8002fe4:	231b      	movs	r3, #27
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	189b      	adds	r3, r3, r2
 8002fea:	19db      	adds	r3, r3, r7
 8002fec:	2210      	movs	r2, #16
 8002fee:	701a      	strb	r2, [r3, #0]
 8002ff0:	e061      	b.n	80030b6 <UART_SetConfig+0x246>
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a61      	ldr	r2, [pc, #388]	@ (800317c <UART_SetConfig+0x30c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d106      	bne.n	800300a <UART_SetConfig+0x19a>
 8002ffc:	231b      	movs	r3, #27
 8002ffe:	2220      	movs	r2, #32
 8003000:	189b      	adds	r3, r3, r2
 8003002:	19db      	adds	r3, r3, r7
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]
 8003008:	e055      	b.n	80030b6 <UART_SetConfig+0x246>
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a5c      	ldr	r2, [pc, #368]	@ (8003180 <UART_SetConfig+0x310>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d106      	bne.n	8003022 <UART_SetConfig+0x1b2>
 8003014:	231b      	movs	r3, #27
 8003016:	2220      	movs	r2, #32
 8003018:	189b      	adds	r3, r3, r2
 800301a:	19db      	adds	r3, r3, r7
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	e049      	b.n	80030b6 <UART_SetConfig+0x246>
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a50      	ldr	r2, [pc, #320]	@ (8003168 <UART_SetConfig+0x2f8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d13e      	bne.n	80030aa <UART_SetConfig+0x23a>
 800302c:	4b51      	ldr	r3, [pc, #324]	@ (8003174 <UART_SetConfig+0x304>)
 800302e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003030:	23c0      	movs	r3, #192	@ 0xc0
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	4013      	ands	r3, r2
 8003036:	22c0      	movs	r2, #192	@ 0xc0
 8003038:	0112      	lsls	r2, r2, #4
 800303a:	4293      	cmp	r3, r2
 800303c:	d027      	beq.n	800308e <UART_SetConfig+0x21e>
 800303e:	22c0      	movs	r2, #192	@ 0xc0
 8003040:	0112      	lsls	r2, r2, #4
 8003042:	4293      	cmp	r3, r2
 8003044:	d82a      	bhi.n	800309c <UART_SetConfig+0x22c>
 8003046:	2280      	movs	r2, #128	@ 0x80
 8003048:	0112      	lsls	r2, r2, #4
 800304a:	4293      	cmp	r3, r2
 800304c:	d011      	beq.n	8003072 <UART_SetConfig+0x202>
 800304e:	2280      	movs	r2, #128	@ 0x80
 8003050:	0112      	lsls	r2, r2, #4
 8003052:	4293      	cmp	r3, r2
 8003054:	d822      	bhi.n	800309c <UART_SetConfig+0x22c>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d004      	beq.n	8003064 <UART_SetConfig+0x1f4>
 800305a:	2280      	movs	r2, #128	@ 0x80
 800305c:	00d2      	lsls	r2, r2, #3
 800305e:	4293      	cmp	r3, r2
 8003060:	d00e      	beq.n	8003080 <UART_SetConfig+0x210>
 8003062:	e01b      	b.n	800309c <UART_SetConfig+0x22c>
 8003064:	231b      	movs	r3, #27
 8003066:	2220      	movs	r2, #32
 8003068:	189b      	adds	r3, r3, r2
 800306a:	19db      	adds	r3, r3, r7
 800306c:	2200      	movs	r2, #0
 800306e:	701a      	strb	r2, [r3, #0]
 8003070:	e021      	b.n	80030b6 <UART_SetConfig+0x246>
 8003072:	231b      	movs	r3, #27
 8003074:	2220      	movs	r2, #32
 8003076:	189b      	adds	r3, r3, r2
 8003078:	19db      	adds	r3, r3, r7
 800307a:	2202      	movs	r2, #2
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	e01a      	b.n	80030b6 <UART_SetConfig+0x246>
 8003080:	231b      	movs	r3, #27
 8003082:	2220      	movs	r2, #32
 8003084:	189b      	adds	r3, r3, r2
 8003086:	19db      	adds	r3, r3, r7
 8003088:	2204      	movs	r2, #4
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	e013      	b.n	80030b6 <UART_SetConfig+0x246>
 800308e:	231b      	movs	r3, #27
 8003090:	2220      	movs	r2, #32
 8003092:	189b      	adds	r3, r3, r2
 8003094:	19db      	adds	r3, r3, r7
 8003096:	2208      	movs	r2, #8
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	e00c      	b.n	80030b6 <UART_SetConfig+0x246>
 800309c:	231b      	movs	r3, #27
 800309e:	2220      	movs	r2, #32
 80030a0:	189b      	adds	r3, r3, r2
 80030a2:	19db      	adds	r3, r3, r7
 80030a4:	2210      	movs	r2, #16
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e005      	b.n	80030b6 <UART_SetConfig+0x246>
 80030aa:	231b      	movs	r3, #27
 80030ac:	2220      	movs	r2, #32
 80030ae:	189b      	adds	r3, r3, r2
 80030b0:	19db      	adds	r3, r3, r7
 80030b2:	2210      	movs	r2, #16
 80030b4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003168 <UART_SetConfig+0x2f8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d000      	beq.n	80030c2 <UART_SetConfig+0x252>
 80030c0:	e0a9      	b.n	8003216 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030c2:	231b      	movs	r3, #27
 80030c4:	2220      	movs	r2, #32
 80030c6:	189b      	adds	r3, r3, r2
 80030c8:	19db      	adds	r3, r3, r7
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d015      	beq.n	80030fc <UART_SetConfig+0x28c>
 80030d0:	dc18      	bgt.n	8003104 <UART_SetConfig+0x294>
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d00d      	beq.n	80030f2 <UART_SetConfig+0x282>
 80030d6:	dc15      	bgt.n	8003104 <UART_SetConfig+0x294>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <UART_SetConfig+0x272>
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d005      	beq.n	80030ec <UART_SetConfig+0x27c>
 80030e0:	e010      	b.n	8003104 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030e2:	f7ff f84d 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
 80030e6:	0003      	movs	r3, r0
 80030e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80030ea:	e014      	b.n	8003116 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030ec:	4b25      	ldr	r3, [pc, #148]	@ (8003184 <UART_SetConfig+0x314>)
 80030ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80030f0:	e011      	b.n	8003116 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030f2:	f7fe ffb9 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 80030f6:	0003      	movs	r3, r0
 80030f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80030fa:	e00c      	b.n	8003116 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030fc:	2380      	movs	r3, #128	@ 0x80
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003102:	e008      	b.n	8003116 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003108:	231a      	movs	r3, #26
 800310a:	2220      	movs	r2, #32
 800310c:	189b      	adds	r3, r3, r2
 800310e:	19db      	adds	r3, r3, r7
 8003110:	2201      	movs	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
        break;
 8003114:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003118:	2b00      	cmp	r3, #0
 800311a:	d100      	bne.n	800311e <UART_SetConfig+0x2ae>
 800311c:	e14b      	b.n	80033b6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003120:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003122:	4b19      	ldr	r3, [pc, #100]	@ (8003188 <UART_SetConfig+0x318>)
 8003124:	0052      	lsls	r2, r2, #1
 8003126:	5ad3      	ldrh	r3, [r2, r3]
 8003128:	0019      	movs	r1, r3
 800312a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800312c:	f7fc ffea 	bl	8000104 <__udivsi3>
 8003130:	0003      	movs	r3, r0
 8003132:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	0013      	movs	r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	189b      	adds	r3, r3, r2
 800313e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003140:	429a      	cmp	r2, r3
 8003142:	d305      	bcc.n	8003150 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800314a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800314c:	429a      	cmp	r2, r3
 800314e:	d91d      	bls.n	800318c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003150:	231a      	movs	r3, #26
 8003152:	2220      	movs	r2, #32
 8003154:	189b      	adds	r3, r3, r2
 8003156:	19db      	adds	r3, r3, r7
 8003158:	2201      	movs	r2, #1
 800315a:	701a      	strb	r2, [r3, #0]
 800315c:	e12b      	b.n	80033b6 <UART_SetConfig+0x546>
 800315e:	46c0      	nop			@ (mov r8, r8)
 8003160:	cfff69f3 	.word	0xcfff69f3
 8003164:	ffffcfff 	.word	0xffffcfff
 8003168:	40008000 	.word	0x40008000
 800316c:	11fff4ff 	.word	0x11fff4ff
 8003170:	40013800 	.word	0x40013800
 8003174:	40021000 	.word	0x40021000
 8003178:	40004400 	.word	0x40004400
 800317c:	40004800 	.word	0x40004800
 8003180:	40004c00 	.word	0x40004c00
 8003184:	00f42400 	.word	0x00f42400
 8003188:	08003fe4 	.word	0x08003fe4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800318c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	2300      	movs	r3, #0
 8003192:	61fb      	str	r3, [r7, #28]
 8003194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003196:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003198:	4b92      	ldr	r3, [pc, #584]	@ (80033e4 <UART_SetConfig+0x574>)
 800319a:	0052      	lsls	r2, r2, #1
 800319c:	5ad3      	ldrh	r3, [r2, r3]
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	69b8      	ldr	r0, [r7, #24]
 80031aa:	69f9      	ldr	r1, [r7, #28]
 80031ac:	f7fd f920 	bl	80003f0 <__aeabi_uldivmod>
 80031b0:	0002      	movs	r2, r0
 80031b2:	000b      	movs	r3, r1
 80031b4:	0e11      	lsrs	r1, r2, #24
 80031b6:	021d      	lsls	r5, r3, #8
 80031b8:	430d      	orrs	r5, r1
 80031ba:	0214      	lsls	r4, r2, #8
 80031bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68b8      	ldr	r0, [r7, #8]
 80031ca:	68f9      	ldr	r1, [r7, #12]
 80031cc:	1900      	adds	r0, r0, r4
 80031ce:	4169      	adcs	r1, r5
 80031d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	603b      	str	r3, [r7, #0]
 80031d6:	2300      	movs	r3, #0
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f7fd f907 	bl	80003f0 <__aeabi_uldivmod>
 80031e2:	0002      	movs	r2, r0
 80031e4:	000b      	movs	r3, r1
 80031e6:	0013      	movs	r3, r2
 80031e8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031ec:	23c0      	movs	r3, #192	@ 0xc0
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d309      	bcc.n	8003208 <UART_SetConfig+0x398>
 80031f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031f6:	2380      	movs	r3, #128	@ 0x80
 80031f8:	035b      	lsls	r3, r3, #13
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d204      	bcs.n	8003208 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	e0d6      	b.n	80033b6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003208:	231a      	movs	r3, #26
 800320a:	2220      	movs	r2, #32
 800320c:	189b      	adds	r3, r3, r2
 800320e:	19db      	adds	r3, r3, r7
 8003210:	2201      	movs	r2, #1
 8003212:	701a      	strb	r2, [r3, #0]
 8003214:	e0cf      	b.n	80033b6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	69da      	ldr	r2, [r3, #28]
 800321a:	2380      	movs	r3, #128	@ 0x80
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	429a      	cmp	r2, r3
 8003220:	d000      	beq.n	8003224 <UART_SetConfig+0x3b4>
 8003222:	e070      	b.n	8003306 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003224:	231b      	movs	r3, #27
 8003226:	2220      	movs	r2, #32
 8003228:	189b      	adds	r3, r3, r2
 800322a:	19db      	adds	r3, r3, r7
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b08      	cmp	r3, #8
 8003230:	d015      	beq.n	800325e <UART_SetConfig+0x3ee>
 8003232:	dc18      	bgt.n	8003266 <UART_SetConfig+0x3f6>
 8003234:	2b04      	cmp	r3, #4
 8003236:	d00d      	beq.n	8003254 <UART_SetConfig+0x3e4>
 8003238:	dc15      	bgt.n	8003266 <UART_SetConfig+0x3f6>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <UART_SetConfig+0x3d4>
 800323e:	2b02      	cmp	r3, #2
 8003240:	d005      	beq.n	800324e <UART_SetConfig+0x3de>
 8003242:	e010      	b.n	8003266 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003244:	f7fe ff9c 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
 8003248:	0003      	movs	r3, r0
 800324a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800324c:	e014      	b.n	8003278 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800324e:	4b66      	ldr	r3, [pc, #408]	@ (80033e8 <UART_SetConfig+0x578>)
 8003250:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003252:	e011      	b.n	8003278 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003254:	f7fe ff08 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8003258:	0003      	movs	r3, r0
 800325a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800325c:	e00c      	b.n	8003278 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800325e:	2380      	movs	r3, #128	@ 0x80
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003264:	e008      	b.n	8003278 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800326a:	231a      	movs	r3, #26
 800326c:	2220      	movs	r2, #32
 800326e:	189b      	adds	r3, r3, r2
 8003270:	19db      	adds	r3, r3, r7
 8003272:	2201      	movs	r2, #1
 8003274:	701a      	strb	r2, [r3, #0]
        break;
 8003276:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800327a:	2b00      	cmp	r3, #0
 800327c:	d100      	bne.n	8003280 <UART_SetConfig+0x410>
 800327e:	e09a      	b.n	80033b6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003282:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003284:	4b57      	ldr	r3, [pc, #348]	@ (80033e4 <UART_SetConfig+0x574>)
 8003286:	0052      	lsls	r2, r2, #1
 8003288:	5ad3      	ldrh	r3, [r2, r3]
 800328a:	0019      	movs	r1, r3
 800328c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800328e:	f7fc ff39 	bl	8000104 <__udivsi3>
 8003292:	0003      	movs	r3, r0
 8003294:	005a      	lsls	r2, r3, #1
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	18d2      	adds	r2, r2, r3
 800329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	0019      	movs	r1, r3
 80032a4:	0010      	movs	r0, r2
 80032a6:	f7fc ff2d 	bl	8000104 <__udivsi3>
 80032aa:	0003      	movs	r3, r0
 80032ac:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b0:	2b0f      	cmp	r3, #15
 80032b2:	d921      	bls.n	80032f8 <UART_SetConfig+0x488>
 80032b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032b6:	2380      	movs	r3, #128	@ 0x80
 80032b8:	025b      	lsls	r3, r3, #9
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d21c      	bcs.n	80032f8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	200e      	movs	r0, #14
 80032c4:	2420      	movs	r4, #32
 80032c6:	1903      	adds	r3, r0, r4
 80032c8:	19db      	adds	r3, r3, r7
 80032ca:	210f      	movs	r1, #15
 80032cc:	438a      	bics	r2, r1
 80032ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d2:	085b      	lsrs	r3, r3, #1
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2207      	movs	r2, #7
 80032d8:	4013      	ands	r3, r2
 80032da:	b299      	uxth	r1, r3
 80032dc:	1903      	adds	r3, r0, r4
 80032de:	19db      	adds	r3, r3, r7
 80032e0:	1902      	adds	r2, r0, r4
 80032e2:	19d2      	adds	r2, r2, r7
 80032e4:	8812      	ldrh	r2, [r2, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80032ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	1902      	adds	r2, r0, r4
 80032f0:	19d2      	adds	r2, r2, r7
 80032f2:	8812      	ldrh	r2, [r2, #0]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	e05e      	b.n	80033b6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80032f8:	231a      	movs	r3, #26
 80032fa:	2220      	movs	r2, #32
 80032fc:	189b      	adds	r3, r3, r2
 80032fe:	19db      	adds	r3, r3, r7
 8003300:	2201      	movs	r2, #1
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	e057      	b.n	80033b6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003306:	231b      	movs	r3, #27
 8003308:	2220      	movs	r2, #32
 800330a:	189b      	adds	r3, r3, r2
 800330c:	19db      	adds	r3, r3, r7
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d015      	beq.n	8003340 <UART_SetConfig+0x4d0>
 8003314:	dc18      	bgt.n	8003348 <UART_SetConfig+0x4d8>
 8003316:	2b04      	cmp	r3, #4
 8003318:	d00d      	beq.n	8003336 <UART_SetConfig+0x4c6>
 800331a:	dc15      	bgt.n	8003348 <UART_SetConfig+0x4d8>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <UART_SetConfig+0x4b6>
 8003320:	2b02      	cmp	r3, #2
 8003322:	d005      	beq.n	8003330 <UART_SetConfig+0x4c0>
 8003324:	e010      	b.n	8003348 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003326:	f7fe ff2b 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
 800332a:	0003      	movs	r3, r0
 800332c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800332e:	e014      	b.n	800335a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003330:	4b2d      	ldr	r3, [pc, #180]	@ (80033e8 <UART_SetConfig+0x578>)
 8003332:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003334:	e011      	b.n	800335a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003336:	f7fe fe97 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 800333a:	0003      	movs	r3, r0
 800333c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800333e:	e00c      	b.n	800335a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003340:	2380      	movs	r3, #128	@ 0x80
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003346:	e008      	b.n	800335a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800334c:	231a      	movs	r3, #26
 800334e:	2220      	movs	r2, #32
 8003350:	189b      	adds	r3, r3, r2
 8003352:	19db      	adds	r3, r3, r7
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]
        break;
 8003358:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800335a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800335c:	2b00      	cmp	r3, #0
 800335e:	d02a      	beq.n	80033b6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003362:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003364:	4b1f      	ldr	r3, [pc, #124]	@ (80033e4 <UART_SetConfig+0x574>)
 8003366:	0052      	lsls	r2, r2, #1
 8003368:	5ad3      	ldrh	r3, [r2, r3]
 800336a:	0019      	movs	r1, r3
 800336c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800336e:	f7fc fec9 	bl	8000104 <__udivsi3>
 8003372:	0003      	movs	r3, r0
 8003374:	001a      	movs	r2, r3
 8003376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	18d2      	adds	r2, r2, r3
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	0019      	movs	r1, r3
 8003384:	0010      	movs	r0, r2
 8003386:	f7fc febd 	bl	8000104 <__udivsi3>
 800338a:	0003      	movs	r3, r0
 800338c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800338e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003390:	2b0f      	cmp	r3, #15
 8003392:	d90a      	bls.n	80033aa <UART_SetConfig+0x53a>
 8003394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003396:	2380      	movs	r3, #128	@ 0x80
 8003398:	025b      	lsls	r3, r3, #9
 800339a:	429a      	cmp	r2, r3
 800339c:	d205      	bcs.n	80033aa <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800339e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60da      	str	r2, [r3, #12]
 80033a8:	e005      	b.n	80033b6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80033aa:	231a      	movs	r3, #26
 80033ac:	2220      	movs	r2, #32
 80033ae:	189b      	adds	r3, r3, r2
 80033b0:	19db      	adds	r3, r3, r7
 80033b2:	2201      	movs	r2, #1
 80033b4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b8:	226a      	movs	r2, #106	@ 0x6a
 80033ba:	2101      	movs	r1, #1
 80033bc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80033be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c0:	2268      	movs	r2, #104	@ 0x68
 80033c2:	2101      	movs	r1, #1
 80033c4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	2200      	movs	r2, #0
 80033ca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	2200      	movs	r2, #0
 80033d0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80033d2:	231a      	movs	r3, #26
 80033d4:	2220      	movs	r2, #32
 80033d6:	189b      	adds	r3, r3, r2
 80033d8:	19db      	adds	r3, r3, r7
 80033da:	781b      	ldrb	r3, [r3, #0]
}
 80033dc:	0018      	movs	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	b010      	add	sp, #64	@ 0x40
 80033e2:	bdb0      	pop	{r4, r5, r7, pc}
 80033e4:	08003fe4 	.word	0x08003fe4
 80033e8:	00f42400 	.word	0x00f42400

080033ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f8:	2208      	movs	r2, #8
 80033fa:	4013      	ands	r3, r2
 80033fc:	d00b      	beq.n	8003416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	4a4a      	ldr	r2, [pc, #296]	@ (8003530 <UART_AdvFeatureConfig+0x144>)
 8003406:	4013      	ands	r3, r2
 8003408:	0019      	movs	r1, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341a:	2201      	movs	r2, #1
 800341c:	4013      	ands	r3, r2
 800341e:	d00b      	beq.n	8003438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4a43      	ldr	r2, [pc, #268]	@ (8003534 <UART_AdvFeatureConfig+0x148>)
 8003428:	4013      	ands	r3, r2
 800342a:	0019      	movs	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343c:	2202      	movs	r2, #2
 800343e:	4013      	ands	r3, r2
 8003440:	d00b      	beq.n	800345a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4a3b      	ldr	r2, [pc, #236]	@ (8003538 <UART_AdvFeatureConfig+0x14c>)
 800344a:	4013      	ands	r3, r2
 800344c:	0019      	movs	r1, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345e:	2204      	movs	r2, #4
 8003460:	4013      	ands	r3, r2
 8003462:	d00b      	beq.n	800347c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4a34      	ldr	r2, [pc, #208]	@ (800353c <UART_AdvFeatureConfig+0x150>)
 800346c:	4013      	ands	r3, r2
 800346e:	0019      	movs	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003480:	2210      	movs	r2, #16
 8003482:	4013      	ands	r3, r2
 8003484:	d00b      	beq.n	800349e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4a2c      	ldr	r2, [pc, #176]	@ (8003540 <UART_AdvFeatureConfig+0x154>)
 800348e:	4013      	ands	r3, r2
 8003490:	0019      	movs	r1, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a2:	2220      	movs	r2, #32
 80034a4:	4013      	ands	r3, r2
 80034a6:	d00b      	beq.n	80034c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	4a25      	ldr	r2, [pc, #148]	@ (8003544 <UART_AdvFeatureConfig+0x158>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c4:	2240      	movs	r2, #64	@ 0x40
 80034c6:	4013      	ands	r3, r2
 80034c8:	d01d      	beq.n	8003506 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003548 <UART_AdvFeatureConfig+0x15c>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	0019      	movs	r1, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034e6:	2380      	movs	r3, #128	@ 0x80
 80034e8:	035b      	lsls	r3, r3, #13
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d10b      	bne.n	8003506 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4a15      	ldr	r2, [pc, #84]	@ (800354c <UART_AdvFeatureConfig+0x160>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	0019      	movs	r1, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350a:	2280      	movs	r2, #128	@ 0x80
 800350c:	4013      	ands	r3, r2
 800350e:	d00b      	beq.n	8003528 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	4a0e      	ldr	r2, [pc, #56]	@ (8003550 <UART_AdvFeatureConfig+0x164>)
 8003518:	4013      	ands	r3, r2
 800351a:	0019      	movs	r1, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
  }
}
 8003528:	46c0      	nop			@ (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	b002      	add	sp, #8
 800352e:	bd80      	pop	{r7, pc}
 8003530:	ffff7fff 	.word	0xffff7fff
 8003534:	fffdffff 	.word	0xfffdffff
 8003538:	fffeffff 	.word	0xfffeffff
 800353c:	fffbffff 	.word	0xfffbffff
 8003540:	ffffefff 	.word	0xffffefff
 8003544:	ffffdfff 	.word	0xffffdfff
 8003548:	ffefffff 	.word	0xffefffff
 800354c:	ff9fffff 	.word	0xff9fffff
 8003550:	fff7ffff 	.word	0xfff7ffff

08003554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b092      	sub	sp, #72	@ 0x48
 8003558:	af02      	add	r7, sp, #8
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2290      	movs	r2, #144	@ 0x90
 8003560:	2100      	movs	r1, #0
 8003562:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003564:	f7fd fb66 	bl	8000c34 <HAL_GetTick>
 8003568:	0003      	movs	r3, r0
 800356a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2208      	movs	r2, #8
 8003574:	4013      	ands	r3, r2
 8003576:	2b08      	cmp	r3, #8
 8003578:	d12d      	bne.n	80035d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800357a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800357c:	2280      	movs	r2, #128	@ 0x80
 800357e:	0391      	lsls	r1, r2, #14
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4a47      	ldr	r2, [pc, #284]	@ (80036a0 <UART_CheckIdleState+0x14c>)
 8003584:	9200      	str	r2, [sp, #0]
 8003586:	2200      	movs	r2, #0
 8003588:	f000 f88e 	bl	80036a8 <UART_WaitOnFlagUntilTimeout>
 800358c:	1e03      	subs	r3, r0, #0
 800358e:	d022      	beq.n	80035d6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003590:	f3ef 8310 	mrs	r3, PRIMASK
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003598:	63bb      	str	r3, [r7, #56]	@ 0x38
 800359a:	2301      	movs	r3, #1
 800359c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a0:	f383 8810 	msr	PRIMASK, r3
}
 80035a4:	46c0      	nop			@ (mov r8, r8)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2180      	movs	r1, #128	@ 0x80
 80035b2:	438a      	bics	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035bc:	f383 8810 	msr	PRIMASK, r3
}
 80035c0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2288      	movs	r2, #136	@ 0x88
 80035c6:	2120      	movs	r1, #32
 80035c8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2284      	movs	r2, #132	@ 0x84
 80035ce:	2100      	movs	r1, #0
 80035d0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e060      	b.n	8003698 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2204      	movs	r2, #4
 80035de:	4013      	ands	r3, r2
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d146      	bne.n	8003672 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e6:	2280      	movs	r2, #128	@ 0x80
 80035e8:	03d1      	lsls	r1, r2, #15
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4a2c      	ldr	r2, [pc, #176]	@ (80036a0 <UART_CheckIdleState+0x14c>)
 80035ee:	9200      	str	r2, [sp, #0]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f000 f859 	bl	80036a8 <UART_WaitOnFlagUntilTimeout>
 80035f6:	1e03      	subs	r3, r0, #0
 80035f8:	d03b      	beq.n	8003672 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035fa:	f3ef 8310 	mrs	r3, PRIMASK
 80035fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8003600:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003602:	637b      	str	r3, [r7, #52]	@ 0x34
 8003604:	2301      	movs	r3, #1
 8003606:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f383 8810 	msr	PRIMASK, r3
}
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4922      	ldr	r1, [pc, #136]	@ (80036a4 <UART_CheckIdleState+0x150>)
 800361c:	400a      	ands	r2, r1
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003622:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f383 8810 	msr	PRIMASK, r3
}
 800362a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800362c:	f3ef 8310 	mrs	r3, PRIMASK
 8003630:	61bb      	str	r3, [r7, #24]
  return(result);
 8003632:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003634:	633b      	str	r3, [r7, #48]	@ 0x30
 8003636:	2301      	movs	r3, #1
 8003638:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f383 8810 	msr	PRIMASK, r3
}
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2101      	movs	r1, #1
 800364e:	438a      	bics	r2, r1
 8003650:	609a      	str	r2, [r3, #8]
 8003652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003654:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	f383 8810 	msr	PRIMASK, r3
}
 800365c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	228c      	movs	r2, #140	@ 0x8c
 8003662:	2120      	movs	r1, #32
 8003664:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2284      	movs	r2, #132	@ 0x84
 800366a:	2100      	movs	r1, #0
 800366c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e012      	b.n	8003698 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2288      	movs	r2, #136	@ 0x88
 8003676:	2120      	movs	r1, #32
 8003678:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	228c      	movs	r2, #140	@ 0x8c
 800367e:	2120      	movs	r1, #32
 8003680:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2284      	movs	r2, #132	@ 0x84
 8003692:	2100      	movs	r1, #0
 8003694:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	0018      	movs	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	b010      	add	sp, #64	@ 0x40
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	01ffffff 	.word	0x01ffffff
 80036a4:	fffffedf 	.word	0xfffffedf

080036a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	1dfb      	adds	r3, r7, #7
 80036b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b8:	e051      	b.n	800375e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	3301      	adds	r3, #1
 80036be:	d04e      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c0:	f7fd fab8 	bl	8000c34 <HAL_GetTick>
 80036c4:	0002      	movs	r2, r0
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d302      	bcc.n	80036d6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e051      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2204      	movs	r2, #4
 80036e2:	4013      	ands	r3, r2
 80036e4:	d03b      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0xb6>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b80      	cmp	r3, #128	@ 0x80
 80036ea:	d038      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0xb6>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b40      	cmp	r3, #64	@ 0x40
 80036f0:	d035      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	2208      	movs	r2, #8
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d111      	bne.n	8003724 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2208      	movs	r2, #8
 8003706:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	0018      	movs	r0, r3
 800370c:	f000 f922 	bl	8003954 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2290      	movs	r2, #144	@ 0x90
 8003714:	2108      	movs	r1, #8
 8003716:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2284      	movs	r2, #132	@ 0x84
 800371c:	2100      	movs	r1, #0
 800371e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e02c      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69da      	ldr	r2, [r3, #28]
 800372a:	2380      	movs	r3, #128	@ 0x80
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	401a      	ands	r2, r3
 8003730:	2380      	movs	r3, #128	@ 0x80
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	429a      	cmp	r2, r3
 8003736:	d112      	bne.n	800375e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2280      	movs	r2, #128	@ 0x80
 800373e:	0112      	lsls	r2, r2, #4
 8003740:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	0018      	movs	r0, r3
 8003746:	f000 f905 	bl	8003954 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2290      	movs	r2, #144	@ 0x90
 800374e:	2120      	movs	r1, #32
 8003750:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2284      	movs	r2, #132	@ 0x84
 8003756:	2100      	movs	r1, #0
 8003758:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e00f      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	4013      	ands	r3, r2
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	425a      	negs	r2, r3
 800376e:	4153      	adcs	r3, r2
 8003770:	b2db      	uxtb	r3, r3
 8003772:	001a      	movs	r2, r3
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d09e      	beq.n	80036ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	0018      	movs	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	b004      	add	sp, #16
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b090      	sub	sp, #64	@ 0x40
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	1dbb      	adds	r3, r7, #6
 8003794:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1dba      	adds	r2, r7, #6
 80037a0:	215c      	movs	r1, #92	@ 0x5c
 80037a2:	8812      	ldrh	r2, [r2, #0]
 80037a4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2290      	movs	r2, #144	@ 0x90
 80037aa:	2100      	movs	r1, #0
 80037ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	228c      	movs	r2, #140	@ 0x8c
 80037b2:	2122      	movs	r1, #34	@ 0x22
 80037b4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2280      	movs	r2, #128	@ 0x80
 80037ba:	589b      	ldr	r3, [r3, r2]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d02d      	beq.n	800381c <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2280      	movs	r2, #128	@ 0x80
 80037c4:	589b      	ldr	r3, [r3, r2]
 80037c6:	4a40      	ldr	r2, [pc, #256]	@ (80038c8 <UART_Start_Receive_DMA+0x140>)
 80037c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2280      	movs	r2, #128	@ 0x80
 80037ce:	589b      	ldr	r3, [r3, r2]
 80037d0:	4a3e      	ldr	r2, [pc, #248]	@ (80038cc <UART_Start_Receive_DMA+0x144>)
 80037d2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2280      	movs	r2, #128	@ 0x80
 80037d8:	589b      	ldr	r3, [r3, r2]
 80037da:	4a3d      	ldr	r2, [pc, #244]	@ (80038d0 <UART_Start_Receive_DMA+0x148>)
 80037dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2280      	movs	r2, #128	@ 0x80
 80037e2:	589b      	ldr	r3, [r3, r2]
 80037e4:	2200      	movs	r2, #0
 80037e6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2280      	movs	r2, #128	@ 0x80
 80037ec:	5898      	ldr	r0, [r3, r2]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3324      	adds	r3, #36	@ 0x24
 80037f4:	0019      	movs	r1, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fa:	001a      	movs	r2, r3
 80037fc:	1dbb      	adds	r3, r7, #6
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	f7fd fbae 	bl	8000f60 <HAL_DMA_Start_IT>
 8003804:	1e03      	subs	r3, r0, #0
 8003806:	d009      	beq.n	800381c <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2290      	movs	r2, #144	@ 0x90
 800380c:	2110      	movs	r1, #16
 800380e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	228c      	movs	r2, #140	@ 0x8c
 8003814:	2120      	movs	r1, #32
 8003816:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e050      	b.n	80038be <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d019      	beq.n	8003858 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003824:	f3ef 8310 	mrs	r3, PRIMASK
 8003828:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800382a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800382c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800382e:	2301      	movs	r3, #1
 8003830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003834:	f383 8810 	msr	PRIMASK, r3
}
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2180      	movs	r1, #128	@ 0x80
 8003846:	0049      	lsls	r1, r1, #1
 8003848:	430a      	orrs	r2, r1
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800384e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003852:	f383 8810 	msr	PRIMASK, r3
}
 8003856:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003858:	f3ef 8310 	mrs	r3, PRIMASK
 800385c:	613b      	str	r3, [r7, #16]
  return(result);
 800385e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003860:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003862:	2301      	movs	r3, #1
 8003864:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f383 8810 	msr	PRIMASK, r3
}
 800386c:	46c0      	nop			@ (mov r8, r8)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2101      	movs	r1, #1
 800387a:	430a      	orrs	r2, r1
 800387c:	609a      	str	r2, [r3, #8]
 800387e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003880:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f383 8810 	msr	PRIMASK, r3
}
 8003888:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388a:	f3ef 8310 	mrs	r3, PRIMASK
 800388e:	61fb      	str	r3, [r7, #28]
  return(result);
 8003890:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003892:	637b      	str	r3, [r7, #52]	@ 0x34
 8003894:	2301      	movs	r3, #1
 8003896:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	f383 8810 	msr	PRIMASK, r3
}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2140      	movs	r1, #64	@ 0x40
 80038ac:	430a      	orrs	r2, r1
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b6:	f383 8810 	msr	PRIMASK, r3
}
 80038ba:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	0018      	movs	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b010      	add	sp, #64	@ 0x40
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	46c0      	nop			@ (mov r8, r8)
 80038c8:	08003a21 	.word	0x08003a21
 80038cc:	08003b51 	.word	0x08003b51
 80038d0:	08003b93 	.word	0x08003b93

080038d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08a      	sub	sp, #40	@ 0x28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038dc:	f3ef 8310 	mrs	r3, PRIMASK
 80038e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80038e2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80038e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e6:	2301      	movs	r3, #1
 80038e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f383 8810 	msr	PRIMASK, r3
}
 80038f0:	46c0      	nop			@ (mov r8, r8)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	21c0      	movs	r1, #192	@ 0xc0
 80038fe:	438a      	bics	r2, r1
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f383 8810 	msr	PRIMASK, r3
}
 800390c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800390e:	f3ef 8310 	mrs	r3, PRIMASK
 8003912:	617b      	str	r3, [r7, #20]
  return(result);
 8003914:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003916:	623b      	str	r3, [r7, #32]
 8003918:	2301      	movs	r3, #1
 800391a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f383 8810 	msr	PRIMASK, r3
}
 8003922:	46c0      	nop			@ (mov r8, r8)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4908      	ldr	r1, [pc, #32]	@ (8003950 <UART_EndTxTransfer+0x7c>)
 8003930:	400a      	ands	r2, r1
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f383 8810 	msr	PRIMASK, r3
}
 800393e:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2288      	movs	r2, #136	@ 0x88
 8003944:	2120      	movs	r1, #32
 8003946:	5099      	str	r1, [r3, r2]
}
 8003948:	46c0      	nop			@ (mov r8, r8)
 800394a:	46bd      	mov	sp, r7
 800394c:	b00a      	add	sp, #40	@ 0x28
 800394e:	bd80      	pop	{r7, pc}
 8003950:	ff7fffff 	.word	0xff7fffff

08003954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08e      	sub	sp, #56	@ 0x38
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395c:	f3ef 8310 	mrs	r3, PRIMASK
 8003960:	617b      	str	r3, [r7, #20]
  return(result);
 8003962:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003964:	637b      	str	r3, [r7, #52]	@ 0x34
 8003966:	2301      	movs	r3, #1
 8003968:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f383 8810 	msr	PRIMASK, r3
}
 8003970:	46c0      	nop			@ (mov r8, r8)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4926      	ldr	r1, [pc, #152]	@ (8003a18 <UART_EndRxTransfer+0xc4>)
 800397e:	400a      	ands	r2, r1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003984:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f383 8810 	msr	PRIMASK, r3
}
 800398c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800398e:	f3ef 8310 	mrs	r3, PRIMASK
 8003992:	623b      	str	r3, [r7, #32]
  return(result);
 8003994:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003996:	633b      	str	r3, [r7, #48]	@ 0x30
 8003998:	2301      	movs	r3, #1
 800399a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	f383 8810 	msr	PRIMASK, r3
}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	491b      	ldr	r1, [pc, #108]	@ (8003a1c <UART_EndRxTransfer+0xc8>)
 80039b0:	400a      	ands	r2, r1
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ba:	f383 8810 	msr	PRIMASK, r3
}
 80039be:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d118      	bne.n	80039fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c8:	f3ef 8310 	mrs	r3, PRIMASK
 80039cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80039ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039d2:	2301      	movs	r3, #1
 80039d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f383 8810 	msr	PRIMASK, r3
}
 80039dc:	46c0      	nop			@ (mov r8, r8)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2110      	movs	r1, #16
 80039ea:	438a      	bics	r2, r1
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f383 8810 	msr	PRIMASK, r3
}
 80039f8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	228c      	movs	r2, #140	@ 0x8c
 80039fe:	2120      	movs	r1, #32
 8003a00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b00e      	add	sp, #56	@ 0x38
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	46c0      	nop			@ (mov r8, r8)
 8003a18:	fffffedf 	.word	0xfffffedf
 8003a1c:	effffffe 	.word	0xeffffffe

08003a20 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b094      	sub	sp, #80	@ 0x50
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2220      	movs	r2, #32
 8003a36:	4013      	ands	r3, r2
 8003a38:	d16f      	bne.n	8003b1a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003a3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a3c:	225e      	movs	r2, #94	@ 0x5e
 8003a3e:	2100      	movs	r1, #0
 8003a40:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a42:	f3ef 8310 	mrs	r3, PRIMASK
 8003a46:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a48:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f383 8810 	msr	PRIMASK, r3
}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	493a      	ldr	r1, [pc, #232]	@ (8003b4c <UART_DMAReceiveCplt+0x12c>)
 8003a64:	400a      	ands	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	f383 8810 	msr	PRIMASK, r3
}
 8003a72:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a74:	f3ef 8310 	mrs	r3, PRIMASK
 8003a78:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a7e:	2301      	movs	r3, #1
 8003a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a84:	f383 8810 	msr	PRIMASK, r3
}
 8003a88:	46c0      	nop			@ (mov r8, r8)
 8003a8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2101      	movs	r1, #1
 8003a96:	438a      	bics	r2, r1
 8003a98:	609a      	str	r2, [r3, #8]
 8003a9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa0:	f383 8810 	msr	PRIMASK, r3
}
 8003aa4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aae:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab6:	f383 8810 	msr	PRIMASK, r3
}
 8003aba:	46c0      	nop			@ (mov r8, r8)
 8003abc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2140      	movs	r1, #64	@ 0x40
 8003ac8:	438a      	bics	r2, r1
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ace:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad2:	f383 8810 	msr	PRIMASK, r3
}
 8003ad6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ada:	228c      	movs	r2, #140	@ 0x8c
 8003adc:	2120      	movs	r1, #32
 8003ade:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d118      	bne.n	8003b1a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8003aec:	60fb      	str	r3, [r7, #12]
  return(result);
 8003aee:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003af2:	2301      	movs	r3, #1
 8003af4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f383 8810 	msr	PRIMASK, r3
}
 8003afc:	46c0      	nop			@ (mov r8, r8)
 8003afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2110      	movs	r1, #16
 8003b0a:	438a      	bics	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f383 8810 	msr	PRIMASK, r3
}
 8003b18:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d108      	bne.n	8003b3a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b2a:	225c      	movs	r2, #92	@ 0x5c
 8003b2c:	5a9a      	ldrh	r2, [r3, r2]
 8003b2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b30:	0011      	movs	r1, r2
 8003b32:	0018      	movs	r0, r3
 8003b34:	f7ff f990 	bl	8002e58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b38:	e003      	b.n	8003b42 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8003b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f7ff f973 	bl	8002e28 <HAL_UART_RxCpltCallback>
}
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b014      	add	sp, #80	@ 0x50
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	fffffeff 	.word	0xfffffeff

08003b50 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d10a      	bne.n	8003b82 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	225c      	movs	r2, #92	@ 0x5c
 8003b70:	5a9b      	ldrh	r3, [r3, r2]
 8003b72:	085b      	lsrs	r3, r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	0011      	movs	r1, r2
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f7ff f96c 	bl	8002e58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b80:	e003      	b.n	8003b8a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	0018      	movs	r0, r3
 8003b86:	f7ff f957 	bl	8002e38 <HAL_UART_RxHalfCpltCallback>
}
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b004      	add	sp, #16
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b086      	sub	sp, #24
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2288      	movs	r2, #136	@ 0x88
 8003ba4:	589b      	ldr	r3, [r3, r2]
 8003ba6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	228c      	movs	r2, #140	@ 0x8c
 8003bac:	589b      	ldr	r3, [r3, r2]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2280      	movs	r2, #128	@ 0x80
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b80      	cmp	r3, #128	@ 0x80
 8003bbc:	d10a      	bne.n	8003bd4 <UART_DMAError+0x42>
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2b21      	cmp	r3, #33	@ 0x21
 8003bc2:	d107      	bne.n	8003bd4 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2256      	movs	r2, #86	@ 0x56
 8003bc8:	2100      	movs	r1, #0
 8003bca:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f7ff fe80 	bl	80038d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2240      	movs	r2, #64	@ 0x40
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b40      	cmp	r3, #64	@ 0x40
 8003be0:	d10a      	bne.n	8003bf8 <UART_DMAError+0x66>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b22      	cmp	r3, #34	@ 0x22
 8003be6:	d107      	bne.n	8003bf8 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	225e      	movs	r2, #94	@ 0x5e
 8003bec:	2100      	movs	r1, #0
 8003bee:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f7ff feae 	bl	8003954 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2290      	movs	r2, #144	@ 0x90
 8003bfc:	589b      	ldr	r3, [r3, r2]
 8003bfe:	2210      	movs	r2, #16
 8003c00:	431a      	orrs	r2, r3
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2190      	movs	r1, #144	@ 0x90
 8003c06:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f7ff f91c 	bl	8002e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c10:	46c0      	nop			@ (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b006      	add	sp, #24
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	225e      	movs	r2, #94	@ 0x5e
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2256      	movs	r2, #86	@ 0x56
 8003c32:	2100      	movs	r1, #0
 8003c34:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f7ff f905 	bl	8002e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b004      	add	sp, #16
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b086      	sub	sp, #24
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c52:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c54:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	2301      	movs	r3, #1
 8003c5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f383 8810 	msr	PRIMASK, r3
}
 8003c62:	46c0      	nop			@ (mov r8, r8)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2140      	movs	r1, #64	@ 0x40
 8003c70:	438a      	bics	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f383 8810 	msr	PRIMASK, r3
}
 8003c7e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2288      	movs	r2, #136	@ 0x88
 8003c84:	2120      	movs	r1, #32
 8003c86:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	0018      	movs	r0, r3
 8003c92:	f7ff f8c1 	bl	8002e18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b006      	add	sp, #24
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b002      	add	sp, #8
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b002      	add	sp, #8
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003cc6:	46c0      	nop			@ (mov r8, r8)
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b002      	add	sp, #8
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2284      	movs	r2, #132	@ 0x84
 8003cdc:	5c9b      	ldrb	r3, [r3, r2]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_UARTEx_DisableFifoMode+0x16>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e027      	b.n	8003d36 <HAL_UARTEx_DisableFifoMode+0x66>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2284      	movs	r2, #132	@ 0x84
 8003cea:	2101      	movs	r1, #1
 8003cec:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2288      	movs	r2, #136	@ 0x88
 8003cf2:	2124      	movs	r1, #36	@ 0x24
 8003cf4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2101      	movs	r1, #1
 8003d0a:	438a      	bics	r2, r1
 8003d0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4a0b      	ldr	r2, [pc, #44]	@ (8003d40 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2288      	movs	r2, #136	@ 0x88
 8003d28:	2120      	movs	r1, #32
 8003d2a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2284      	movs	r2, #132	@ 0x84
 8003d30:	2100      	movs	r1, #0
 8003d32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b004      	add	sp, #16
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	46c0      	nop			@ (mov r8, r8)
 8003d40:	dfffffff 	.word	0xdfffffff

08003d44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2284      	movs	r2, #132	@ 0x84
 8003d52:	5c9b      	ldrb	r3, [r3, r2]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e02e      	b.n	8003dba <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2284      	movs	r2, #132	@ 0x84
 8003d60:	2101      	movs	r1, #1
 8003d62:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2288      	movs	r2, #136	@ 0x88
 8003d68:	2124      	movs	r1, #36	@ 0x24
 8003d6a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2101      	movs	r1, #1
 8003d80:	438a      	bics	r2, r1
 8003d82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	08d9      	lsrs	r1, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f000 f854 	bl	8003e48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2288      	movs	r2, #136	@ 0x88
 8003dac:	2120      	movs	r1, #32
 8003dae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2284      	movs	r2, #132	@ 0x84
 8003db4:	2100      	movs	r1, #0
 8003db6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	0018      	movs	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b004      	add	sp, #16
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2284      	movs	r2, #132	@ 0x84
 8003dd2:	5c9b      	ldrb	r3, [r3, r2]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e02f      	b.n	8003e3c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2284      	movs	r2, #132	@ 0x84
 8003de0:	2101      	movs	r1, #1
 8003de2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2288      	movs	r2, #136	@ 0x88
 8003de8:	2124      	movs	r1, #36	@ 0x24
 8003dea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2101      	movs	r1, #1
 8003e00:	438a      	bics	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	4a0e      	ldr	r2, [pc, #56]	@ (8003e44 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	0019      	movs	r1, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f000 f813 	bl	8003e48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2288      	movs	r2, #136	@ 0x88
 8003e2e:	2120      	movs	r1, #32
 8003e30:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2284      	movs	r2, #132	@ 0x84
 8003e36:	2100      	movs	r1, #0
 8003e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b004      	add	sp, #16
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	f1ffffff 	.word	0xf1ffffff

08003e48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d108      	bne.n	8003e6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	226a      	movs	r2, #106	@ 0x6a
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2268      	movs	r2, #104	@ 0x68
 8003e64:	2101      	movs	r1, #1
 8003e66:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e68:	e043      	b.n	8003ef2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e6a:	260f      	movs	r6, #15
 8003e6c:	19bb      	adds	r3, r7, r6
 8003e6e:	2208      	movs	r2, #8
 8003e70:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e72:	200e      	movs	r0, #14
 8003e74:	183b      	adds	r3, r7, r0
 8003e76:	2208      	movs	r2, #8
 8003e78:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	0e5b      	lsrs	r3, r3, #25
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	240d      	movs	r4, #13
 8003e86:	193b      	adds	r3, r7, r4
 8003e88:	2107      	movs	r1, #7
 8003e8a:	400a      	ands	r2, r1
 8003e8c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	0f5b      	lsrs	r3, r3, #29
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	250c      	movs	r5, #12
 8003e9a:	197b      	adds	r3, r7, r5
 8003e9c:	2107      	movs	r1, #7
 8003e9e:	400a      	ands	r2, r1
 8003ea0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ea2:	183b      	adds	r3, r7, r0
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	197a      	adds	r2, r7, r5
 8003ea8:	7812      	ldrb	r2, [r2, #0]
 8003eaa:	4914      	ldr	r1, [pc, #80]	@ (8003efc <UARTEx_SetNbDataToProcess+0xb4>)
 8003eac:	5c8a      	ldrb	r2, [r1, r2]
 8003eae:	435a      	muls	r2, r3
 8003eb0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003eb2:	197b      	adds	r3, r7, r5
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	4a12      	ldr	r2, [pc, #72]	@ (8003f00 <UARTEx_SetNbDataToProcess+0xb8>)
 8003eb8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003eba:	0019      	movs	r1, r3
 8003ebc:	f7fc f9ac 	bl	8000218 <__divsi3>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	b299      	uxth	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	226a      	movs	r2, #106	@ 0x6a
 8003ec8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003eca:	19bb      	adds	r3, r7, r6
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	193a      	adds	r2, r7, r4
 8003ed0:	7812      	ldrb	r2, [r2, #0]
 8003ed2:	490a      	ldr	r1, [pc, #40]	@ (8003efc <UARTEx_SetNbDataToProcess+0xb4>)
 8003ed4:	5c8a      	ldrb	r2, [r1, r2]
 8003ed6:	435a      	muls	r2, r3
 8003ed8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003eda:	193b      	adds	r3, r7, r4
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	4a08      	ldr	r2, [pc, #32]	@ (8003f00 <UARTEx_SetNbDataToProcess+0xb8>)
 8003ee0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ee2:	0019      	movs	r1, r3
 8003ee4:	f7fc f998 	bl	8000218 <__divsi3>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	b299      	uxth	r1, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2268      	movs	r2, #104	@ 0x68
 8003ef0:	5299      	strh	r1, [r3, r2]
}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b005      	add	sp, #20
 8003ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	08003ffc 	.word	0x08003ffc
 8003f00:	08004004 	.word	0x08004004

08003f04 <memset>:
 8003f04:	0003      	movs	r3, r0
 8003f06:	1882      	adds	r2, r0, r2
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d100      	bne.n	8003f0e <memset+0xa>
 8003f0c:	4770      	bx	lr
 8003f0e:	7019      	strb	r1, [r3, #0]
 8003f10:	3301      	adds	r3, #1
 8003f12:	e7f9      	b.n	8003f08 <memset+0x4>

08003f14 <__libc_init_array>:
 8003f14:	b570      	push	{r4, r5, r6, lr}
 8003f16:	2600      	movs	r6, #0
 8003f18:	4c0c      	ldr	r4, [pc, #48]	@ (8003f4c <__libc_init_array+0x38>)
 8003f1a:	4d0d      	ldr	r5, [pc, #52]	@ (8003f50 <__libc_init_array+0x3c>)
 8003f1c:	1b64      	subs	r4, r4, r5
 8003f1e:	10a4      	asrs	r4, r4, #2
 8003f20:	42a6      	cmp	r6, r4
 8003f22:	d109      	bne.n	8003f38 <__libc_init_array+0x24>
 8003f24:	2600      	movs	r6, #0
 8003f26:	f000 f819 	bl	8003f5c <_init>
 8003f2a:	4c0a      	ldr	r4, [pc, #40]	@ (8003f54 <__libc_init_array+0x40>)
 8003f2c:	4d0a      	ldr	r5, [pc, #40]	@ (8003f58 <__libc_init_array+0x44>)
 8003f2e:	1b64      	subs	r4, r4, r5
 8003f30:	10a4      	asrs	r4, r4, #2
 8003f32:	42a6      	cmp	r6, r4
 8003f34:	d105      	bne.n	8003f42 <__libc_init_array+0x2e>
 8003f36:	bd70      	pop	{r4, r5, r6, pc}
 8003f38:	00b3      	lsls	r3, r6, #2
 8003f3a:	58eb      	ldr	r3, [r5, r3]
 8003f3c:	4798      	blx	r3
 8003f3e:	3601      	adds	r6, #1
 8003f40:	e7ee      	b.n	8003f20 <__libc_init_array+0xc>
 8003f42:	00b3      	lsls	r3, r6, #2
 8003f44:	58eb      	ldr	r3, [r5, r3]
 8003f46:	4798      	blx	r3
 8003f48:	3601      	adds	r6, #1
 8003f4a:	e7f2      	b.n	8003f32 <__libc_init_array+0x1e>
 8003f4c:	08004014 	.word	0x08004014
 8003f50:	08004014 	.word	0x08004014
 8003f54:	08004018 	.word	0x08004018
 8003f58:	08004014 	.word	0x08004014

08003f5c <_init>:
 8003f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5e:	46c0      	nop			@ (mov r8, r8)
 8003f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f62:	bc08      	pop	{r3}
 8003f64:	469e      	mov	lr, r3
 8003f66:	4770      	bx	lr

08003f68 <_fini>:
 8003f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6a:	46c0      	nop			@ (mov r8, r8)
 8003f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6e:	bc08      	pop	{r3}
 8003f70:	469e      	mov	lr, r3
 8003f72:	4770      	bx	lr
