
WEEK07_SPI_MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003710  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080037cc  080037cc  000047cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003864  08003864  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003864  08003864  00004864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800386c  0800386c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800386c  0800386c  0000486c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003870  08003870  00004870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003874  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08003880  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003880  00005120  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf74  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0e  00000000  00000000  00011fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00013eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f7  00000000  00000000  00014900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176d5  00000000  00000000  000150f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000def2  00000000  00000000  0002c7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096574  00000000  00000000  0003a6be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0c32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002414  00000000  00000000  000d0c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000d308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080037b4 	.word	0x080037b4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080037b4 	.word	0x080037b4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fb3b 	bl	8000c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f873 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f957 	bl	80008dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062e:	f000 f907 	bl	8000840 <MX_USART2_UART_Init>
  MX_USART1_Init();
 8000632:	f000 f8b5 	bl	80007a0 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */
  unsigned char data[10] = "A";
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2241      	movs	r2, #65	@ 0x41
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	3304      	adds	r3, #4
 800063e:	2206      	movs	r2, #6
 8000640:	2100      	movs	r1, #0
 8000642:	0018      	movs	r0, r3
 8000644:	f003 f88a 	bl	800375c <memset>
  HAL_GPIO_WritePin(CE1_GPIO_Port, CE1_Pin, 0);
 8000648:	4b2e      	ldr	r3, [pc, #184]	@ (8000704 <main+0xe8>)
 800064a:	2200      	movs	r2, #0
 800064c:	2110      	movs	r1, #16
 800064e:	0018      	movs	r0, r3
 8000650:	f000 fe03 	bl	800125a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CE2_GPIO_Port, CE2_Pin, 0);
 8000654:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <main+0xe8>)
 8000656:	2200      	movs	r2, #0
 8000658:	2120      	movs	r1, #32
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fdfd 	bl	800125a <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(USER_BTN_GPIO_Port, USER_BTN_Pin)) {
 8000660:	2380      	movs	r3, #128	@ 0x80
 8000662:	019b      	lsls	r3, r3, #6
 8000664:	4a28      	ldr	r2, [pc, #160]	@ (8000708 <main+0xec>)
 8000666:	0019      	movs	r1, r3
 8000668:	0010      	movs	r0, r2
 800066a:	f000 fdd9 	bl	8001220 <HAL_GPIO_ReadPin>
 800066e:	1e03      	subs	r3, r0, #0
 8000670:	d01a      	beq.n	80006a8 <main+0x8c>
		  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, 0);
 8000672:	23a0      	movs	r3, #160	@ 0xa0
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	2200      	movs	r2, #0
 8000678:	2120      	movs	r1, #32
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fded 	bl	800125a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(CE1_GPIO_Port, CE1_Pin, 1);
 8000680:	4b20      	ldr	r3, [pc, #128]	@ (8000704 <main+0xe8>)
 8000682:	2201      	movs	r2, #1
 8000684:	2110      	movs	r1, #16
 8000686:	0018      	movs	r0, r3
 8000688:	f000 fde7 	bl	800125a <HAL_GPIO_WritePin>
		  HAL_USART_Transmit(&husart1, data, 1, 1000);
 800068c:	23fa      	movs	r3, #250	@ 0xfa
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	1d39      	adds	r1, r7, #4
 8000692:	481e      	ldr	r0, [pc, #120]	@ (800070c <main+0xf0>)
 8000694:	2201      	movs	r2, #1
 8000696:	f002 fb77 	bl	8002d88 <HAL_USART_Transmit>
		  HAL_GPIO_WritePin(CE1_GPIO_Port, CE1_Pin, 0);
 800069a:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <main+0xe8>)
 800069c:	2200      	movs	r2, #0
 800069e:	2110      	movs	r1, #16
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fdda 	bl	800125a <HAL_GPIO_WritePin>
 80006a6:	e019      	b.n	80006dc <main+0xc0>
	  } else {
		  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, 1);
 80006a8:	23a0      	movs	r3, #160	@ 0xa0
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	2201      	movs	r2, #1
 80006ae:	2120      	movs	r1, #32
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 fdd2 	bl	800125a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(CE2_GPIO_Port, CE2_Pin, 1);
 80006b6:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <main+0xe8>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	2120      	movs	r1, #32
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fdcc 	bl	800125a <HAL_GPIO_WritePin>
		  HAL_USART_Transmit(&husart1, data, 1, 1000);
 80006c2:	23fa      	movs	r3, #250	@ 0xfa
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	1d39      	adds	r1, r7, #4
 80006c8:	4810      	ldr	r0, [pc, #64]	@ (800070c <main+0xf0>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	f002 fb5c 	bl	8002d88 <HAL_USART_Transmit>
		  HAL_GPIO_WritePin(CE2_GPIO_Port, CE2_Pin, 0);
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <main+0xe8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	2120      	movs	r1, #32
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fdbf 	bl	800125a <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(1000);
 80006dc:	23fa      	movs	r3, #250	@ 0xfa
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 fb61 	bl	8000da8 <HAL_Delay>
	  data[0]++;
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	701a      	strb	r2, [r3, #0]

	  if (data[0] > 'Z') {
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b5a      	cmp	r3, #90	@ 0x5a
 80006f8:	d9b2      	bls.n	8000660 <main+0x44>
		  data[0] = 'A';
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2241      	movs	r2, #65	@ 0x41
 80006fe:	701a      	strb	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(USER_BTN_GPIO_Port, USER_BTN_Pin)) {
 8000700:	e7ae      	b.n	8000660 <main+0x44>
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	50000400 	.word	0x50000400
 8000708:	50000800 	.word	0x50000800
 800070c:	20000028 	.word	0x20000028

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b093      	sub	sp, #76	@ 0x4c
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	2410      	movs	r4, #16
 8000718:	193b      	adds	r3, r7, r4
 800071a:	0018      	movs	r0, r3
 800071c:	2338      	movs	r3, #56	@ 0x38
 800071e:	001a      	movs	r2, r3
 8000720:	2100      	movs	r1, #0
 8000722:	f003 f81b 	bl	800375c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000726:	003b      	movs	r3, r7
 8000728:	0018      	movs	r0, r3
 800072a:	2310      	movs	r3, #16
 800072c:	001a      	movs	r2, r3
 800072e:	2100      	movs	r1, #0
 8000730:	f003 f814 	bl	800375c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	2380      	movs	r3, #128	@ 0x80
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	0018      	movs	r0, r3
 800073a:	f000 fdab 	bl	8001294 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2202      	movs	r2, #2
 8000742:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2280      	movs	r2, #128	@ 0x80
 8000748:	0052      	lsls	r2, r2, #1
 800074a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000752:	193b      	adds	r3, r7, r4
 8000754:	2240      	movs	r2, #64	@ 0x40
 8000756:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000758:	193b      	adds	r3, r7, r4
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	193b      	adds	r3, r7, r4
 8000760:	0018      	movs	r0, r3
 8000762:	f000 fde3 	bl	800132c <HAL_RCC_OscConfig>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800076a:	f000 f93f 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	003b      	movs	r3, r7
 8000770:	2207      	movs	r2, #7
 8000772:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000774:	003b      	movs	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	003b      	movs	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	003b      	movs	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000786:	003b      	movs	r3, r7
 8000788:	2100      	movs	r1, #0
 800078a:	0018      	movs	r0, r3
 800078c:	f001 f8e8 	bl	8001960 <HAL_RCC_ClockConfig>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000794:	f000 f92a 	bl	80009ec <Error_Handler>
  }
}
 8000798:	46c0      	nop			@ (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b013      	add	sp, #76	@ 0x4c
 800079e:	bd90      	pop	{r4, r7, pc}

080007a0 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80007a4:	4b23      	ldr	r3, [pc, #140]	@ (8000834 <MX_USART1_Init+0x94>)
 80007a6:	4a24      	ldr	r2, [pc, #144]	@ (8000838 <MX_USART1_Init+0x98>)
 80007a8:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 10000;
 80007aa:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <MX_USART1_Init+0x94>)
 80007ac:	4a23      	ldr	r2, [pc, #140]	@ (800083c <MX_USART1_Init+0x9c>)
 80007ae:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80007b0:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <MX_USART1_Init+0x94>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80007b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <MX_USART1_Init+0x94>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80007bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <MX_USART1_Init+0x94>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <MX_USART1_Init+0x94>)
 80007c4:	220c      	movs	r2, #12
 80007c6:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_USART1_Init+0x94>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80007ce:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <MX_USART1_Init+0x94>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 80007d4:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_USART1_Init+0x94>)
 80007d6:	2280      	movs	r2, #128	@ 0x80
 80007d8:	0052      	lsls	r2, r2, #1
 80007da:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80007dc:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_USART1_Init+0x94>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	@ 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 80007e2:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_USART1_Init+0x94>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <MX_USART1_Init+0x94>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f002 fa7c 	bl	8002ce8 <HAL_USART_Init>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 80007f4:	f000 f8fa 	bl	80009ec <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_USART1_Init+0x94>)
 80007fa:	2100      	movs	r1, #0
 80007fc:	0018      	movs	r0, r3
 80007fe:	f002 fed1 	bl	80035a4 <HAL_USARTEx_SetTxFifoThreshold>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8000806:	f000 f8f1 	bl	80009ec <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080a:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <MX_USART1_Init+0x94>)
 800080c:	2100      	movs	r1, #0
 800080e:	0018      	movs	r0, r3
 8000810:	f002 ff08 	bl	8003624 <HAL_USARTEx_SetRxFifoThreshold>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d001      	beq.n	800081c <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8000818:	f000 f8e8 	bl	80009ec <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 800081c:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <MX_USART1_Init+0x94>)
 800081e:	0018      	movs	r0, r3
 8000820:	f002 fe86 	bl	8003530 <HAL_USARTEx_DisableFifoMode>
 8000824:	1e03      	subs	r3, r0, #0
 8000826:	d001      	beq.n	800082c <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 8000828:	f000 f8e0 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082c:	46c0      	nop			@ (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	20000028 	.word	0x20000028
 8000838:	40013800 	.word	0x40013800
 800083c:	00002710 	.word	0x00002710

08000840 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000844:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <MX_USART2_UART_Init+0x94>)
 8000846:	4a24      	ldr	r2, [pc, #144]	@ (80008d8 <MX_USART2_UART_Init+0x98>)
 8000848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800084a:	4b22      	ldr	r3, [pc, #136]	@ (80008d4 <MX_USART2_UART_Init+0x94>)
 800084c:	22e1      	movs	r2, #225	@ 0xe1
 800084e:	0252      	lsls	r2, r2, #9
 8000850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <MX_USART2_UART_Init+0x94>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <MX_USART2_UART_Init+0x94>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085e:	4b1d      	ldr	r3, [pc, #116]	@ (80008d4 <MX_USART2_UART_Init+0x94>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <MX_USART2_UART_Init+0x94>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <MX_USART2_UART_Init+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <MX_USART2_UART_Init+0x94>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000876:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <MX_USART2_UART_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800087c:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <MX_USART2_UART_Init+0x94>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000882:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_USART2_UART_Init+0x94>)
 8000884:	2200      	movs	r2, #0
 8000886:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <MX_USART2_UART_Init+0x94>)
 800088a:	0018      	movs	r0, r3
 800088c:	f001 fbca 	bl	8002024 <HAL_UART_Init>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000894:	f000 f8aa 	bl	80009ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000898:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <MX_USART2_UART_Init+0x94>)
 800089a:	2100      	movs	r1, #0
 800089c:	0018      	movs	r0, r3
 800089e:	f002 f943 	bl	8002b28 <HAL_UARTEx_SetTxFifoThreshold>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008a6:	f000 f8a1 	bl	80009ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008aa:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <MX_USART2_UART_Init+0x94>)
 80008ac:	2100      	movs	r1, #0
 80008ae:	0018      	movs	r0, r3
 80008b0:	f002 f97a 	bl	8002ba8 <HAL_UARTEx_SetRxFifoThreshold>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008b8:	f000 f898 	bl	80009ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008bc:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <MX_USART2_UART_Init+0x94>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f002 f8f8 	bl	8002ab4 <HAL_UARTEx_DisableFifoMode>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008c8:	f000 f890 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008cc:	46c0      	nop			@ (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	20000088 	.word	0x20000088
 80008d8:	40004400 	.word	0x40004400

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b08b      	sub	sp, #44	@ 0x2c
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	2414      	movs	r4, #20
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	0018      	movs	r0, r3
 80008e8:	2314      	movs	r3, #20
 80008ea:	001a      	movs	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f002 ff35 	bl	800375c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b3b      	ldr	r3, [pc, #236]	@ (80009e0 <MX_GPIO_Init+0x104>)
 80008f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008f6:	4b3a      	ldr	r3, [pc, #232]	@ (80009e0 <MX_GPIO_Init+0x104>)
 80008f8:	2104      	movs	r1, #4
 80008fa:	430a      	orrs	r2, r1
 80008fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80008fe:	4b38      	ldr	r3, [pc, #224]	@ (80009e0 <MX_GPIO_Init+0x104>)
 8000900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000902:	2204      	movs	r2, #4
 8000904:	4013      	ands	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090a:	4b35      	ldr	r3, [pc, #212]	@ (80009e0 <MX_GPIO_Init+0x104>)
 800090c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800090e:	4b34      	ldr	r3, [pc, #208]	@ (80009e0 <MX_GPIO_Init+0x104>)
 8000910:	2120      	movs	r1, #32
 8000912:	430a      	orrs	r2, r1
 8000914:	635a      	str	r2, [r3, #52]	@ 0x34
 8000916:	4b32      	ldr	r3, [pc, #200]	@ (80009e0 <MX_GPIO_Init+0x104>)
 8000918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800091a:	2220      	movs	r2, #32
 800091c:	4013      	ands	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b2f      	ldr	r3, [pc, #188]	@ (80009e0 <MX_GPIO_Init+0x104>)
 8000924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000926:	4b2e      	ldr	r3, [pc, #184]	@ (80009e0 <MX_GPIO_Init+0x104>)
 8000928:	2101      	movs	r1, #1
 800092a:	430a      	orrs	r2, r1
 800092c:	635a      	str	r2, [r3, #52]	@ 0x34
 800092e:	4b2c      	ldr	r3, [pc, #176]	@ (80009e0 <MX_GPIO_Init+0x104>)
 8000930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000932:	2201      	movs	r2, #1
 8000934:	4013      	ands	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b29      	ldr	r3, [pc, #164]	@ (80009e0 <MX_GPIO_Init+0x104>)
 800093c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800093e:	4b28      	ldr	r3, [pc, #160]	@ (80009e0 <MX_GPIO_Init+0x104>)
 8000940:	2102      	movs	r1, #2
 8000942:	430a      	orrs	r2, r1
 8000944:	635a      	str	r2, [r3, #52]	@ 0x34
 8000946:	4b26      	ldr	r3, [pc, #152]	@ (80009e0 <MX_GPIO_Init+0x104>)
 8000948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800094a:	2202      	movs	r2, #2
 800094c:	4013      	ands	r3, r2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000952:	23a0      	movs	r3, #160	@ 0xa0
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	2200      	movs	r2, #0
 8000958:	2120      	movs	r1, #32
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fc7d 	bl	800125a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE1_Pin|CE2_Pin, GPIO_PIN_RESET);
 8000960:	4b20      	ldr	r3, [pc, #128]	@ (80009e4 <MX_GPIO_Init+0x108>)
 8000962:	2200      	movs	r2, #0
 8000964:	2130      	movs	r1, #48	@ 0x30
 8000966:	0018      	movs	r0, r3
 8000968:	f000 fc77 	bl	800125a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 800096c:	193b      	adds	r3, r7, r4
 800096e:	2280      	movs	r2, #128	@ 0x80
 8000970:	0192      	lsls	r2, r2, #6
 8000972:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2200      	movs	r2, #0
 8000978:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	193b      	adds	r3, r7, r4
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000980:	193b      	adds	r3, r7, r4
 8000982:	4a19      	ldr	r2, [pc, #100]	@ (80009e8 <MX_GPIO_Init+0x10c>)
 8000984:	0019      	movs	r1, r3
 8000986:	0010      	movs	r0, r2
 8000988:	f000 fae6 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 800098c:	193b      	adds	r3, r7, r4
 800098e:	2220      	movs	r2, #32
 8000990:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	193b      	adds	r3, r7, r4
 8000994:	2201      	movs	r2, #1
 8000996:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2202      	movs	r2, #2
 80009a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80009a4:	193a      	adds	r2, r7, r4
 80009a6:	23a0      	movs	r3, #160	@ 0xa0
 80009a8:	05db      	lsls	r3, r3, #23
 80009aa:	0011      	movs	r1, r2
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 fad3 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE1_Pin CE2_Pin */
  GPIO_InitStruct.Pin = CE1_Pin|CE2_Pin;
 80009b2:	0021      	movs	r1, r4
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2230      	movs	r2, #48	@ 0x30
 80009b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2201      	movs	r2, #1
 80009be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <MX_GPIO_Init+0x108>)
 80009d0:	0019      	movs	r1, r3
 80009d2:	0010      	movs	r0, r2
 80009d4:	f000 fac0 	bl	8000f58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d8:	46c0      	nop			@ (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b00b      	add	sp, #44	@ 0x2c
 80009de:	bd90      	pop	{r4, r7, pc}
 80009e0:	40021000 	.word	0x40021000
 80009e4:	50000400 	.word	0x50000400
 80009e8:	50000800 	.word	0x50000800

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	e7fd      	b.n	80009f4 <Error_Handler+0x8>

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <HAL_MspInit+0x44>)
 8000a00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <HAL_MspInit+0x44>)
 8000a04:	2101      	movs	r1, #1
 8000a06:	430a      	orrs	r2, r1
 8000a08:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <HAL_MspInit+0x44>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4013      	ands	r3, r2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <HAL_MspInit+0x44>)
 8000a18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <HAL_MspInit+0x44>)
 8000a1c:	2180      	movs	r1, #128	@ 0x80
 8000a1e:	0549      	lsls	r1, r1, #21
 8000a20:	430a      	orrs	r2, r1
 8000a22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a24:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <HAL_MspInit+0x44>)
 8000a26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a28:	2380      	movs	r3, #128	@ 0x80
 8000a2a:	055b      	lsls	r3, r3, #21
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b002      	add	sp, #8
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	40021000 	.word	0x40021000

08000a40 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b099      	sub	sp, #100	@ 0x64
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	234c      	movs	r3, #76	@ 0x4c
 8000a4a:	18fb      	adds	r3, r7, r3
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	2314      	movs	r3, #20
 8000a50:	001a      	movs	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	f002 fe82 	bl	800375c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a58:	2418      	movs	r4, #24
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	2334      	movs	r3, #52	@ 0x34
 8000a60:	001a      	movs	r2, r3
 8000a62:	2100      	movs	r1, #0
 8000a64:	f002 fe7a 	bl	800375c <memset>
  if(husart->Instance==USART1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a34      	ldr	r2, [pc, #208]	@ (8000b40 <HAL_USART_MspInit+0x100>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d161      	bne.n	8000b36 <HAL_USART_MspInit+0xf6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2201      	movs	r2, #1
 8000a76:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	0018      	movs	r0, r3
 8000a82:	f001 f917 	bl	8001cb4 <HAL_RCCEx_PeriphCLKConfig>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 8000a8a:	f7ff ffaf 	bl	80009ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b44 <HAL_USART_MspInit+0x104>)
 8000a90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a92:	4b2c      	ldr	r3, [pc, #176]	@ (8000b44 <HAL_USART_MspInit+0x104>)
 8000a94:	2180      	movs	r1, #128	@ 0x80
 8000a96:	01c9      	lsls	r1, r1, #7
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a9c:	4b29      	ldr	r3, [pc, #164]	@ (8000b44 <HAL_USART_MspInit+0x104>)
 8000a9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000aa0:	2380      	movs	r3, #128	@ 0x80
 8000aa2:	01db      	lsls	r3, r3, #7
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	4b26      	ldr	r3, [pc, #152]	@ (8000b44 <HAL_USART_MspInit+0x104>)
 8000aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aae:	4b25      	ldr	r3, [pc, #148]	@ (8000b44 <HAL_USART_MspInit+0x104>)
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ab6:	4b23      	ldr	r3, [pc, #140]	@ (8000b44 <HAL_USART_MspInit+0x104>)
 8000ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aba:	2204      	movs	r2, #4
 8000abc:	4013      	ands	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b20      	ldr	r3, [pc, #128]	@ (8000b44 <HAL_USART_MspInit+0x104>)
 8000ac4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b44 <HAL_USART_MspInit+0x104>)
 8000ac8:	2101      	movs	r1, #1
 8000aca:	430a      	orrs	r2, r1
 8000acc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ace:	4b1d      	ldr	r3, [pc, #116]	@ (8000b44 <HAL_USART_MspInit+0x104>)
 8000ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    PA12 [PA10]     ------> USART1_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ada:	244c      	movs	r4, #76	@ 0x4c
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	2230      	movs	r2, #48	@ 0x30
 8000ae0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2201      	movs	r2, #1
 8000af8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	4a12      	ldr	r2, [pc, #72]	@ (8000b48 <HAL_USART_MspInit+0x108>)
 8000afe:	0019      	movs	r1, r3
 8000b00:	0010      	movs	r0, r2
 8000b02:	f000 fa29 	bl	8000f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b06:	0021      	movs	r1, r4
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2280      	movs	r2, #128	@ 0x80
 8000b0c:	0152      	lsls	r2, r2, #5
 8000b0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2202      	movs	r2, #2
 8000b14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	2201      	movs	r2, #1
 8000b26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	187a      	adds	r2, r7, r1
 8000b2a:	23a0      	movs	r3, #160	@ 0xa0
 8000b2c:	05db      	lsls	r3, r3, #23
 8000b2e:	0011      	movs	r1, r2
 8000b30:	0018      	movs	r0, r3
 8000b32:	f000 fa11 	bl	8000f58 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b019      	add	sp, #100	@ 0x64
 8000b3c:	bd90      	pop	{r4, r7, pc}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	40013800 	.word	0x40013800
 8000b44:	40021000 	.word	0x40021000
 8000b48:	50000800 	.word	0x50000800

08000b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b097      	sub	sp, #92	@ 0x5c
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	2344      	movs	r3, #68	@ 0x44
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	0018      	movs	r0, r3
 8000b5a:	2314      	movs	r3, #20
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f002 fdfc 	bl	800375c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b64:	2410      	movs	r4, #16
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	0018      	movs	r0, r3
 8000b6a:	2334      	movs	r3, #52	@ 0x34
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	2100      	movs	r1, #0
 8000b70:	f002 fdf4 	bl	800375c <memset>
  if(huart->Instance==USART2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a22      	ldr	r2, [pc, #136]	@ (8000c04 <HAL_UART_MspInit+0xb8>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d13e      	bne.n	8000bfc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	2202      	movs	r2, #2
 8000b82:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f001 f891 	bl	8001cb4 <HAL_RCCEx_PeriphCLKConfig>
 8000b92:	1e03      	subs	r3, r0, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b96:	f7ff ff29 	bl	80009ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <HAL_UART_MspInit+0xbc>)
 8000b9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <HAL_UART_MspInit+0xbc>)
 8000ba0:	2180      	movs	r1, #128	@ 0x80
 8000ba2:	0289      	lsls	r1, r1, #10
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ba8:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <HAL_UART_MspInit+0xbc>)
 8000baa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bac:	2380      	movs	r3, #128	@ 0x80
 8000bae:	029b      	lsls	r3, r3, #10
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <HAL_UART_MspInit+0xbc>)
 8000bb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bba:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <HAL_UART_MspInit+0xbc>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bc2:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <HAL_UART_MspInit+0xbc>)
 8000bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000bce:	2144      	movs	r1, #68	@ 0x44
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2202      	movs	r2, #2
 8000bda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2201      	movs	r2, #1
 8000be0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2201      	movs	r2, #1
 8000bec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	187a      	adds	r2, r7, r1
 8000bf0:	23a0      	movs	r3, #160	@ 0xa0
 8000bf2:	05db      	lsls	r3, r3, #23
 8000bf4:	0011      	movs	r1, r2
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f000 f9ae 	bl	8000f58 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bfc:	46c0      	nop			@ (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b017      	add	sp, #92	@ 0x5c
 8000c02:	bd90      	pop	{r4, r7, pc}
 8000c04:	40004400 	.word	0x40004400
 8000c08:	40021000 	.word	0x40021000

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c10:	46c0      	nop			@ (mov r8, r8)
 8000c12:	e7fd      	b.n	8000c10 <NMI_Handler+0x4>

08000c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c18:	46c0      	nop			@ (mov r8, r8)
 8000c1a:	e7fd      	b.n	8000c18 <HardFault_Handler+0x4>

08000c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c20:	46c0      	nop			@ (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c34:	f000 f89c 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c48:	480d      	ldr	r0, [pc, #52]	@ (8000c80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c4c:	f7ff fff7 	bl	8000c3e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c50:	480c      	ldr	r0, [pc, #48]	@ (8000c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c52:	490d      	ldr	r1, [pc, #52]	@ (8000c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c54:	4a0d      	ldr	r2, [pc, #52]	@ (8000c8c <LoopForever+0xe>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c68:	4c0a      	ldr	r4, [pc, #40]	@ (8000c94 <LoopForever+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c76:	f002 fd79 	bl	800376c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c7a:	f7ff fccf 	bl	800061c <main>

08000c7e <LoopForever>:

LoopForever:
  b LoopForever
 8000c7e:	e7fe      	b.n	8000c7e <LoopForever>
  ldr   r0, =_estack
 8000c80:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c8c:	08003874 	.word	0x08003874
  ldr r2, =_sbss
 8000c90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c94:	20000120 	.word	0x20000120

08000c98 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC1_COMP_IRQHandler>
	...

08000c9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <HAL_Init+0x3c>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <HAL_Init+0x3c>)
 8000cae:	2180      	movs	r1, #128	@ 0x80
 8000cb0:	0049      	lsls	r1, r1, #1
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 f810 	bl	8000cdc <HAL_InitTick>
 8000cbc:	1e03      	subs	r3, r0, #0
 8000cbe:	d003      	beq.n	8000cc8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cc0:	1dfb      	adds	r3, r7, #7
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
 8000cc6:	e001      	b.n	8000ccc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff fe96 	bl	80009f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	781b      	ldrb	r3, [r3, #0]
}
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000cec:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <HAL_InitTick+0x88>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d02b      	beq.n	8000d4c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <HAL_InitTick+0x8c>)
 8000cf6:	681c      	ldr	r4, [r3, #0]
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <HAL_InitTick+0x88>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	23fa      	movs	r3, #250	@ 0xfa
 8000d00:	0098      	lsls	r0, r3, #2
 8000d02:	f7ff f9ff 	bl	8000104 <__udivsi3>
 8000d06:	0003      	movs	r3, r0
 8000d08:	0019      	movs	r1, r3
 8000d0a:	0020      	movs	r0, r4
 8000d0c:	f7ff f9fa 	bl	8000104 <__udivsi3>
 8000d10:	0003      	movs	r3, r0
 8000d12:	0018      	movs	r0, r3
 8000d14:	f000 f913 	bl	8000f3e <HAL_SYSTICK_Config>
 8000d18:	1e03      	subs	r3, r0, #0
 8000d1a:	d112      	bne.n	8000d42 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d80a      	bhi.n	8000d38 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	2301      	movs	r3, #1
 8000d26:	425b      	negs	r3, r3
 8000d28:	2200      	movs	r2, #0
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 f8f2 	bl	8000f14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d30:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <HAL_InitTick+0x90>)
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	e00d      	b.n	8000d54 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d38:	230f      	movs	r3, #15
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
 8000d40:	e008      	b.n	8000d54 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d42:	230f      	movs	r3, #15
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e003      	b.n	8000d54 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d54:	230f      	movs	r3, #15
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	781b      	ldrb	r3, [r3, #0]
}
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b005      	add	sp, #20
 8000d60:	bd90      	pop	{r4, r7, pc}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000004 	.word	0x20000004

08000d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d74:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <HAL_IncTick+0x1c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	001a      	movs	r2, r3
 8000d7a:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <HAL_IncTick+0x20>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	18d2      	adds	r2, r2, r3
 8000d80:	4b03      	ldr	r3, [pc, #12]	@ (8000d90 <HAL_IncTick+0x20>)
 8000d82:	601a      	str	r2, [r3, #0]
}
 8000d84:	46c0      	nop			@ (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	2000011c 	.word	0x2000011c

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b02      	ldr	r3, [pc, #8]	@ (8000da4 <HAL_GetTick+0x10>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	2000011c 	.word	0x2000011c

08000da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff fff0 	bl	8000d94 <HAL_GetTick>
 8000db4:	0003      	movs	r3, r0
 8000db6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	d005      	beq.n	8000dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_Delay+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	001a      	movs	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	189b      	adds	r3, r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	f7ff ffe0 	bl	8000d94 <HAL_GetTick>
 8000dd4:	0002      	movs	r2, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d8f7      	bhi.n	8000dd0 <HAL_Delay+0x28>
  {
  }
}
 8000de0:	46c0      	nop			@ (mov r8, r8)
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b004      	add	sp, #16
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	20000008 	.word	0x20000008

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	0002      	movs	r2, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e04:	d828      	bhi.n	8000e58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e06:	4a2f      	ldr	r2, [pc, #188]	@ (8000ec4 <__NVIC_SetPriority+0xd4>)
 8000e08:	1dfb      	adds	r3, r7, #7
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	33c0      	adds	r3, #192	@ 0xc0
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	589b      	ldr	r3, [r3, r2]
 8000e16:	1dfa      	adds	r2, r7, #7
 8000e18:	7812      	ldrb	r2, [r2, #0]
 8000e1a:	0011      	movs	r1, r2
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	400a      	ands	r2, r1
 8000e20:	00d2      	lsls	r2, r2, #3
 8000e22:	21ff      	movs	r1, #255	@ 0xff
 8000e24:	4091      	lsls	r1, r2
 8000e26:	000a      	movs	r2, r1
 8000e28:	43d2      	mvns	r2, r2
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	019b      	lsls	r3, r3, #6
 8000e32:	22ff      	movs	r2, #255	@ 0xff
 8000e34:	401a      	ands	r2, r3
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	4003      	ands	r3, r0
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e44:	481f      	ldr	r0, [pc, #124]	@ (8000ec4 <__NVIC_SetPriority+0xd4>)
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	b25b      	sxtb	r3, r3
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	33c0      	adds	r3, #192	@ 0xc0
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e56:	e031      	b.n	8000ebc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e58:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec8 <__NVIC_SetPriority+0xd8>)
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	0019      	movs	r1, r3
 8000e60:	230f      	movs	r3, #15
 8000e62:	400b      	ands	r3, r1
 8000e64:	3b08      	subs	r3, #8
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3306      	adds	r3, #6
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	18d3      	adds	r3, r2, r3
 8000e6e:	3304      	adds	r3, #4
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	1dfa      	adds	r2, r7, #7
 8000e74:	7812      	ldrb	r2, [r2, #0]
 8000e76:	0011      	movs	r1, r2
 8000e78:	2203      	movs	r2, #3
 8000e7a:	400a      	ands	r2, r1
 8000e7c:	00d2      	lsls	r2, r2, #3
 8000e7e:	21ff      	movs	r1, #255	@ 0xff
 8000e80:	4091      	lsls	r1, r2
 8000e82:	000a      	movs	r2, r1
 8000e84:	43d2      	mvns	r2, r2
 8000e86:	401a      	ands	r2, r3
 8000e88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	019b      	lsls	r3, r3, #6
 8000e8e:	22ff      	movs	r2, #255	@ 0xff
 8000e90:	401a      	ands	r2, r3
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	0018      	movs	r0, r3
 8000e98:	2303      	movs	r3, #3
 8000e9a:	4003      	ands	r3, r0
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea0:	4809      	ldr	r0, [pc, #36]	@ (8000ec8 <__NVIC_SetPriority+0xd8>)
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	001c      	movs	r4, r3
 8000ea8:	230f      	movs	r3, #15
 8000eaa:	4023      	ands	r3, r4
 8000eac:	3b08      	subs	r3, #8
 8000eae:	089b      	lsrs	r3, r3, #2
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	3306      	adds	r3, #6
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	18c3      	adds	r3, r0, r3
 8000eb8:	3304      	adds	r3, #4
 8000eba:	601a      	str	r2, [r3, #0]
}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b003      	add	sp, #12
 8000ec2:	bd90      	pop	{r4, r7, pc}
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	1e5a      	subs	r2, r3, #1
 8000ed8:	2380      	movs	r3, #128	@ 0x80
 8000eda:	045b      	lsls	r3, r3, #17
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d301      	bcc.n	8000ee4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e010      	b.n	8000f06 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <SysTick_Config+0x44>)
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	3a01      	subs	r2, #1
 8000eea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eec:	2301      	movs	r3, #1
 8000eee:	425b      	negs	r3, r3
 8000ef0:	2103      	movs	r1, #3
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f7ff ff7c 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <SysTick_Config+0x44>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <SysTick_Config+0x44>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	0018      	movs	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b002      	add	sp, #8
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	210f      	movs	r1, #15
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	1c02      	adds	r2, r0, #0
 8000f24:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	0011      	movs	r1, r2
 8000f30:	0018      	movs	r0, r3
 8000f32:	f7ff ff5d 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b004      	add	sp, #16
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f7ff ffbf 	bl	8000ecc <SysTick_Config>
 8000f4e:	0003      	movs	r3, r0
}
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b002      	add	sp, #8
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f66:	e147      	b.n	80011f8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	4091      	lsls	r1, r2
 8000f72:	000a      	movs	r2, r1
 8000f74:	4013      	ands	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d100      	bne.n	8000f80 <HAL_GPIO_Init+0x28>
 8000f7e:	e138      	b.n	80011f2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2203      	movs	r2, #3
 8000f86:	4013      	ands	r3, r2
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d005      	beq.n	8000f98 <HAL_GPIO_Init+0x40>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2203      	movs	r2, #3
 8000f92:	4013      	ands	r3, r2
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d130      	bne.n	8000ffa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	409a      	lsls	r2, r3
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	43da      	mvns	r2, r3
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	409a      	lsls	r2, r3
 8000fba:	0013      	movs	r3, r2
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fce:	2201      	movs	r2, #1
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	0013      	movs	r3, r2
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	091b      	lsrs	r3, r3, #4
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
 8000fec:	0013      	movs	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2203      	movs	r2, #3
 8001000:	4013      	ands	r3, r2
 8001002:	2b03      	cmp	r3, #3
 8001004:	d017      	beq.n	8001036 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	409a      	lsls	r2, r3
 8001014:	0013      	movs	r3, r2
 8001016:	43da      	mvns	r2, r3
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	409a      	lsls	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2203      	movs	r2, #3
 800103c:	4013      	ands	r3, r2
 800103e:	2b02      	cmp	r3, #2
 8001040:	d123      	bne.n	800108a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	08da      	lsrs	r2, r3, #3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3208      	adds	r2, #8
 800104a:	0092      	lsls	r2, r2, #2
 800104c:	58d3      	ldr	r3, [r2, r3]
 800104e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	2207      	movs	r2, #7
 8001054:	4013      	ands	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	220f      	movs	r2, #15
 800105a:	409a      	lsls	r2, r3
 800105c:	0013      	movs	r3, r2
 800105e:	43da      	mvns	r2, r3
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	691a      	ldr	r2, [r3, #16]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2107      	movs	r1, #7
 800106e:	400b      	ands	r3, r1
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	409a      	lsls	r2, r3
 8001074:	0013      	movs	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	08da      	lsrs	r2, r3, #3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3208      	adds	r2, #8
 8001084:	0092      	lsls	r2, r2, #2
 8001086:	6939      	ldr	r1, [r7, #16]
 8001088:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	409a      	lsls	r2, r3
 8001098:	0013      	movs	r3, r2
 800109a:	43da      	mvns	r2, r3
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2203      	movs	r2, #3
 80010a8:	401a      	ands	r2, r3
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	409a      	lsls	r2, r3
 80010b0:	0013      	movs	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	23c0      	movs	r3, #192	@ 0xc0
 80010c4:	029b      	lsls	r3, r3, #10
 80010c6:	4013      	ands	r3, r2
 80010c8:	d100      	bne.n	80010cc <HAL_GPIO_Init+0x174>
 80010ca:	e092      	b.n	80011f2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80010cc:	4a50      	ldr	r2, [pc, #320]	@ (8001210 <HAL_GPIO_Init+0x2b8>)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3318      	adds	r3, #24
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	589b      	ldr	r3, [r3, r2]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	2203      	movs	r2, #3
 80010de:	4013      	ands	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	220f      	movs	r2, #15
 80010e4:	409a      	lsls	r2, r3
 80010e6:	0013      	movs	r3, r2
 80010e8:	43da      	mvns	r2, r3
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	23a0      	movs	r3, #160	@ 0xa0
 80010f4:	05db      	lsls	r3, r3, #23
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d013      	beq.n	8001122 <HAL_GPIO_Init+0x1ca>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a45      	ldr	r2, [pc, #276]	@ (8001214 <HAL_GPIO_Init+0x2bc>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d00d      	beq.n	800111e <HAL_GPIO_Init+0x1c6>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a44      	ldr	r2, [pc, #272]	@ (8001218 <HAL_GPIO_Init+0x2c0>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d007      	beq.n	800111a <HAL_GPIO_Init+0x1c2>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a43      	ldr	r2, [pc, #268]	@ (800121c <HAL_GPIO_Init+0x2c4>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_GPIO_Init+0x1be>
 8001112:	2303      	movs	r3, #3
 8001114:	e006      	b.n	8001124 <HAL_GPIO_Init+0x1cc>
 8001116:	2305      	movs	r3, #5
 8001118:	e004      	b.n	8001124 <HAL_GPIO_Init+0x1cc>
 800111a:	2302      	movs	r3, #2
 800111c:	e002      	b.n	8001124 <HAL_GPIO_Init+0x1cc>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <HAL_GPIO_Init+0x1cc>
 8001122:	2300      	movs	r3, #0
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	2103      	movs	r1, #3
 8001128:	400a      	ands	r2, r1
 800112a:	00d2      	lsls	r2, r2, #3
 800112c:	4093      	lsls	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001134:	4936      	ldr	r1, [pc, #216]	@ (8001210 <HAL_GPIO_Init+0x2b8>)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3318      	adds	r3, #24
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001142:	4b33      	ldr	r3, [pc, #204]	@ (8001210 <HAL_GPIO_Init+0x2b8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43da      	mvns	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	2380      	movs	r3, #128	@ 0x80
 8001158:	035b      	lsls	r3, r3, #13
 800115a:	4013      	ands	r3, r2
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001166:	4b2a      	ldr	r3, [pc, #168]	@ (8001210 <HAL_GPIO_Init+0x2b8>)
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800116c:	4b28      	ldr	r3, [pc, #160]	@ (8001210 <HAL_GPIO_Init+0x2b8>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	43da      	mvns	r2, r3
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	2380      	movs	r3, #128	@ 0x80
 8001182:	039b      	lsls	r3, r3, #14
 8001184:	4013      	ands	r3, r2
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001190:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <HAL_GPIO_Init+0x2b8>)
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001196:	4a1e      	ldr	r2, [pc, #120]	@ (8001210 <HAL_GPIO_Init+0x2b8>)
 8001198:	2384      	movs	r3, #132	@ 0x84
 800119a:	58d3      	ldr	r3, [r2, r3]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	43da      	mvns	r2, r3
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	2380      	movs	r3, #128	@ 0x80
 80011ae:	029b      	lsls	r3, r3, #10
 80011b0:	4013      	ands	r3, r2
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011bc:	4914      	ldr	r1, [pc, #80]	@ (8001210 <HAL_GPIO_Init+0x2b8>)
 80011be:	2284      	movs	r2, #132	@ 0x84
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80011c4:	4a12      	ldr	r2, [pc, #72]	@ (8001210 <HAL_GPIO_Init+0x2b8>)
 80011c6:	2380      	movs	r3, #128	@ 0x80
 80011c8:	58d3      	ldr	r3, [r2, r3]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	43da      	mvns	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	2380      	movs	r3, #128	@ 0x80
 80011dc:	025b      	lsls	r3, r3, #9
 80011de:	4013      	ands	r3, r2
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011ea:	4909      	ldr	r1, [pc, #36]	@ (8001210 <HAL_GPIO_Init+0x2b8>)
 80011ec:	2280      	movs	r2, #128	@ 0x80
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3301      	adds	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	40da      	lsrs	r2, r3
 8001200:	1e13      	subs	r3, r2, #0
 8001202:	d000      	beq.n	8001206 <HAL_GPIO_Init+0x2ae>
 8001204:	e6b0      	b.n	8000f68 <HAL_GPIO_Init+0x10>
  }
}
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	46c0      	nop			@ (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	b006      	add	sp, #24
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021800 	.word	0x40021800
 8001214:	50000400 	.word	0x50000400
 8001218:	50000800 	.word	0x50000800
 800121c:	50000c00 	.word	0x50000c00

08001220 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	000a      	movs	r2, r1
 800122a:	1cbb      	adds	r3, r7, #2
 800122c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	1cba      	adds	r2, r7, #2
 8001234:	8812      	ldrh	r2, [r2, #0]
 8001236:	4013      	ands	r3, r2
 8001238:	d004      	beq.n	8001244 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800123a:	230f      	movs	r3, #15
 800123c:	18fb      	adds	r3, r7, r3
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	e003      	b.n	800124c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001244:	230f      	movs	r3, #15
 8001246:	18fb      	adds	r3, r7, r3
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800124c:	230f      	movs	r3, #15
 800124e:	18fb      	adds	r3, r7, r3
 8001250:	781b      	ldrb	r3, [r3, #0]
}
 8001252:	0018      	movs	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	b004      	add	sp, #16
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	0008      	movs	r0, r1
 8001264:	0011      	movs	r1, r2
 8001266:	1cbb      	adds	r3, r7, #2
 8001268:	1c02      	adds	r2, r0, #0
 800126a:	801a      	strh	r2, [r3, #0]
 800126c:	1c7b      	adds	r3, r7, #1
 800126e:	1c0a      	adds	r2, r1, #0
 8001270:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001272:	1c7b      	adds	r3, r7, #1
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d004      	beq.n	8001284 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800127a:	1cbb      	adds	r3, r7, #2
 800127c:	881a      	ldrh	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001282:	e003      	b.n	800128c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001284:	1cbb      	adds	r3, r7, #2
 8001286:	881a      	ldrh	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800128c:	46c0      	nop			@ (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	b002      	add	sp, #8
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800129c:	4b19      	ldr	r3, [pc, #100]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a19      	ldr	r2, [pc, #100]	@ (8001308 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	0019      	movs	r1, r3
 80012a6:	4b17      	ldr	r3, [pc, #92]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	2380      	movs	r3, #128	@ 0x80
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d11f      	bne.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80012b8:	4b14      	ldr	r3, [pc, #80]	@ (800130c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	0013      	movs	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	189b      	adds	r3, r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4912      	ldr	r1, [pc, #72]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80012c6:	0018      	movs	r0, r3
 80012c8:	f7fe ff1c 	bl	8000104 <__udivsi3>
 80012cc:	0003      	movs	r3, r0
 80012ce:	3301      	adds	r3, #1
 80012d0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012d2:	e008      	b.n	80012e6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3b01      	subs	r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	e001      	b.n	80012e6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e009      	b.n	80012fa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012e8:	695a      	ldr	r2, [r3, #20]
 80012ea:	2380      	movs	r3, #128	@ 0x80
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	401a      	ands	r2, r3
 80012f0:	2380      	movs	r3, #128	@ 0x80
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d0ed      	beq.n	80012d4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	0018      	movs	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b004      	add	sp, #16
 8001300:	bd80      	pop	{r7, pc}
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	40007000 	.word	0x40007000
 8001308:	fffff9ff 	.word	0xfffff9ff
 800130c:	20000000 	.word	0x20000000
 8001310:	000f4240 	.word	0x000f4240

08001314 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001318:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <LL_RCC_GetAPB1Prescaler+0x14>)
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	23e0      	movs	r3, #224	@ 0xe0
 800131e:	01db      	lsls	r3, r3, #7
 8001320:	4013      	ands	r3, r2
}
 8001322:	0018      	movs	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40021000 	.word	0x40021000

0800132c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e2fe      	b.n	800193c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2201      	movs	r2, #1
 8001344:	4013      	ands	r3, r2
 8001346:	d100      	bne.n	800134a <HAL_RCC_OscConfig+0x1e>
 8001348:	e07c      	b.n	8001444 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800134a:	4bc3      	ldr	r3, [pc, #780]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2238      	movs	r2, #56	@ 0x38
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001354:	4bc0      	ldr	r3, [pc, #768]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2203      	movs	r2, #3
 800135a:	4013      	ands	r3, r2
 800135c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	2b10      	cmp	r3, #16
 8001362:	d102      	bne.n	800136a <HAL_RCC_OscConfig+0x3e>
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	2b03      	cmp	r3, #3
 8001368:	d002      	beq.n	8001370 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	2b08      	cmp	r3, #8
 800136e:	d10b      	bne.n	8001388 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001370:	4bb9      	ldr	r3, [pc, #740]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2380      	movs	r3, #128	@ 0x80
 8001376:	029b      	lsls	r3, r3, #10
 8001378:	4013      	ands	r3, r2
 800137a:	d062      	beq.n	8001442 <HAL_RCC_OscConfig+0x116>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d15e      	bne.n	8001442 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e2d9      	b.n	800193c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	025b      	lsls	r3, r3, #9
 8001390:	429a      	cmp	r2, r3
 8001392:	d107      	bne.n	80013a4 <HAL_RCC_OscConfig+0x78>
 8001394:	4bb0      	ldr	r3, [pc, #704]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4baf      	ldr	r3, [pc, #700]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 800139a:	2180      	movs	r1, #128	@ 0x80
 800139c:	0249      	lsls	r1, r1, #9
 800139e:	430a      	orrs	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e020      	b.n	80013e6 <HAL_RCC_OscConfig+0xba>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	23a0      	movs	r3, #160	@ 0xa0
 80013aa:	02db      	lsls	r3, r3, #11
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d10e      	bne.n	80013ce <HAL_RCC_OscConfig+0xa2>
 80013b0:	4ba9      	ldr	r3, [pc, #676]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4ba8      	ldr	r3, [pc, #672]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80013b6:	2180      	movs	r1, #128	@ 0x80
 80013b8:	02c9      	lsls	r1, r1, #11
 80013ba:	430a      	orrs	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	4ba6      	ldr	r3, [pc, #664]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4ba5      	ldr	r3, [pc, #660]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80013c4:	2180      	movs	r1, #128	@ 0x80
 80013c6:	0249      	lsls	r1, r1, #9
 80013c8:	430a      	orrs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	e00b      	b.n	80013e6 <HAL_RCC_OscConfig+0xba>
 80013ce:	4ba2      	ldr	r3, [pc, #648]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4ba1      	ldr	r3, [pc, #644]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80013d4:	49a1      	ldr	r1, [pc, #644]	@ (800165c <HAL_RCC_OscConfig+0x330>)
 80013d6:	400a      	ands	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	4b9f      	ldr	r3, [pc, #636]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b9e      	ldr	r3, [pc, #632]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80013e0:	499f      	ldr	r1, [pc, #636]	@ (8001660 <HAL_RCC_OscConfig+0x334>)
 80013e2:	400a      	ands	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d014      	beq.n	8001418 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ee:	f7ff fcd1 	bl	8000d94 <HAL_GetTick>
 80013f2:	0003      	movs	r3, r0
 80013f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff fccc 	bl	8000d94 <HAL_GetTick>
 80013fc:	0002      	movs	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	@ 0x64
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e298      	b.n	800193c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800140a:	4b93      	ldr	r3, [pc, #588]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	2380      	movs	r3, #128	@ 0x80
 8001410:	029b      	lsls	r3, r3, #10
 8001412:	4013      	ands	r3, r2
 8001414:	d0f0      	beq.n	80013f8 <HAL_RCC_OscConfig+0xcc>
 8001416:	e015      	b.n	8001444 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001418:	f7ff fcbc 	bl	8000d94 <HAL_GetTick>
 800141c:	0003      	movs	r3, r0
 800141e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001422:	f7ff fcb7 	bl	8000d94 <HAL_GetTick>
 8001426:	0002      	movs	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b64      	cmp	r3, #100	@ 0x64
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e283      	b.n	800193c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001434:	4b88      	ldr	r3, [pc, #544]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	2380      	movs	r3, #128	@ 0x80
 800143a:	029b      	lsls	r3, r3, #10
 800143c:	4013      	ands	r3, r2
 800143e:	d1f0      	bne.n	8001422 <HAL_RCC_OscConfig+0xf6>
 8001440:	e000      	b.n	8001444 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001442:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2202      	movs	r2, #2
 800144a:	4013      	ands	r3, r2
 800144c:	d100      	bne.n	8001450 <HAL_RCC_OscConfig+0x124>
 800144e:	e099      	b.n	8001584 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001450:	4b81      	ldr	r3, [pc, #516]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2238      	movs	r2, #56	@ 0x38
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800145a:	4b7f      	ldr	r3, [pc, #508]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	2203      	movs	r2, #3
 8001460:	4013      	ands	r3, r2
 8001462:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2b10      	cmp	r3, #16
 8001468:	d102      	bne.n	8001470 <HAL_RCC_OscConfig+0x144>
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d002      	beq.n	8001476 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d135      	bne.n	80014e2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001476:	4b78      	ldr	r3, [pc, #480]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	2380      	movs	r3, #128	@ 0x80
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	4013      	ands	r3, r2
 8001480:	d005      	beq.n	800148e <HAL_RCC_OscConfig+0x162>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e256      	b.n	800193c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148e:	4b72      	ldr	r3, [pc, #456]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	4a74      	ldr	r2, [pc, #464]	@ (8001664 <HAL_RCC_OscConfig+0x338>)
 8001494:	4013      	ands	r3, r2
 8001496:	0019      	movs	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	021a      	lsls	r2, r3, #8
 800149e:	4b6e      	ldr	r3, [pc, #440]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80014a0:	430a      	orrs	r2, r1
 80014a2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d112      	bne.n	80014d0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014aa:	4b6b      	ldr	r3, [pc, #428]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a6e      	ldr	r2, [pc, #440]	@ (8001668 <HAL_RCC_OscConfig+0x33c>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	0019      	movs	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	4b67      	ldr	r3, [pc, #412]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80014be:	4b66      	ldr	r3, [pc, #408]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0adb      	lsrs	r3, r3, #11
 80014c4:	2207      	movs	r2, #7
 80014c6:	4013      	ands	r3, r2
 80014c8:	4a68      	ldr	r2, [pc, #416]	@ (800166c <HAL_RCC_OscConfig+0x340>)
 80014ca:	40da      	lsrs	r2, r3
 80014cc:	4b68      	ldr	r3, [pc, #416]	@ (8001670 <HAL_RCC_OscConfig+0x344>)
 80014ce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014d0:	4b68      	ldr	r3, [pc, #416]	@ (8001674 <HAL_RCC_OscConfig+0x348>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7ff fc01 	bl	8000cdc <HAL_InitTick>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d051      	beq.n	8001582 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e22c      	b.n	800193c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d030      	beq.n	800154c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001668 <HAL_RCC_OscConfig+0x33c>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	0019      	movs	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	4b57      	ldr	r3, [pc, #348]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80014fa:	430a      	orrs	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80014fe:	4b56      	ldr	r3, [pc, #344]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4b55      	ldr	r3, [pc, #340]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 8001504:	2180      	movs	r1, #128	@ 0x80
 8001506:	0049      	lsls	r1, r1, #1
 8001508:	430a      	orrs	r2, r1
 800150a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff fc42 	bl	8000d94 <HAL_GetTick>
 8001510:	0003      	movs	r3, r0
 8001512:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001516:	f7ff fc3d 	bl	8000d94 <HAL_GetTick>
 800151a:	0002      	movs	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e209      	b.n	800193c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001528:	4b4b      	ldr	r3, [pc, #300]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	2380      	movs	r3, #128	@ 0x80
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4013      	ands	r3, r2
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4b48      	ldr	r3, [pc, #288]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4a4a      	ldr	r2, [pc, #296]	@ (8001664 <HAL_RCC_OscConfig+0x338>)
 800153a:	4013      	ands	r3, r2
 800153c:	0019      	movs	r1, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	021a      	lsls	r2, r3, #8
 8001544:	4b44      	ldr	r3, [pc, #272]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 8001546:	430a      	orrs	r2, r1
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	e01b      	b.n	8001584 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800154c:	4b42      	ldr	r3, [pc, #264]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b41      	ldr	r3, [pc, #260]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 8001552:	4949      	ldr	r1, [pc, #292]	@ (8001678 <HAL_RCC_OscConfig+0x34c>)
 8001554:	400a      	ands	r2, r1
 8001556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fc1c 	bl	8000d94 <HAL_GetTick>
 800155c:	0003      	movs	r3, r0
 800155e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001562:	f7ff fc17 	bl	8000d94 <HAL_GetTick>
 8001566:	0002      	movs	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e1e3      	b.n	800193c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001574:	4b38      	ldr	r3, [pc, #224]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2380      	movs	r3, #128	@ 0x80
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4013      	ands	r3, r2
 800157e:	d1f0      	bne.n	8001562 <HAL_RCC_OscConfig+0x236>
 8001580:	e000      	b.n	8001584 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001582:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2208      	movs	r2, #8
 800158a:	4013      	ands	r3, r2
 800158c:	d047      	beq.n	800161e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800158e:	4b32      	ldr	r3, [pc, #200]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2238      	movs	r2, #56	@ 0x38
 8001594:	4013      	ands	r3, r2
 8001596:	2b18      	cmp	r3, #24
 8001598:	d10a      	bne.n	80015b0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800159a:	4b2f      	ldr	r3, [pc, #188]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 800159c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159e:	2202      	movs	r2, #2
 80015a0:	4013      	ands	r3, r2
 80015a2:	d03c      	beq.n	800161e <HAL_RCC_OscConfig+0x2f2>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d138      	bne.n	800161e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e1c5      	b.n	800193c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d019      	beq.n	80015ec <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80015b8:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80015ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015bc:	4b26      	ldr	r3, [pc, #152]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80015be:	2101      	movs	r1, #1
 80015c0:	430a      	orrs	r2, r1
 80015c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fbe6 	bl	8000d94 <HAL_GetTick>
 80015c8:	0003      	movs	r3, r0
 80015ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ce:	f7ff fbe1 	bl	8000d94 <HAL_GetTick>
 80015d2:	0002      	movs	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e1ad      	b.n	800193c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80015e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015e4:	2202      	movs	r2, #2
 80015e6:	4013      	ands	r3, r2
 80015e8:	d0f1      	beq.n	80015ce <HAL_RCC_OscConfig+0x2a2>
 80015ea:	e018      	b.n	800161e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80015ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015f0:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	2101      	movs	r1, #1
 80015f4:	438a      	bics	r2, r1
 80015f6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fbcc 	bl	8000d94 <HAL_GetTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001602:	f7ff fbc7 	bl	8000d94 <HAL_GetTick>
 8001606:	0002      	movs	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e193      	b.n	800193c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001614:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 8001616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001618:	2202      	movs	r2, #2
 800161a:	4013      	ands	r3, r2
 800161c:	d1f1      	bne.n	8001602 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2204      	movs	r2, #4
 8001624:	4013      	ands	r3, r2
 8001626:	d100      	bne.n	800162a <HAL_RCC_OscConfig+0x2fe>
 8001628:	e0c6      	b.n	80017b8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162a:	231f      	movs	r3, #31
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2238      	movs	r2, #56	@ 0x38
 8001638:	4013      	ands	r3, r2
 800163a:	2b20      	cmp	r3, #32
 800163c:	d11e      	bne.n	800167c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HAL_RCC_OscConfig+0x32c>)
 8001640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001642:	2202      	movs	r2, #2
 8001644:	4013      	ands	r3, r2
 8001646:	d100      	bne.n	800164a <HAL_RCC_OscConfig+0x31e>
 8001648:	e0b6      	b.n	80017b8 <HAL_RCC_OscConfig+0x48c>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d000      	beq.n	8001654 <HAL_RCC_OscConfig+0x328>
 8001652:	e0b1      	b.n	80017b8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e171      	b.n	800193c <HAL_RCC_OscConfig+0x610>
 8001658:	40021000 	.word	0x40021000
 800165c:	fffeffff 	.word	0xfffeffff
 8001660:	fffbffff 	.word	0xfffbffff
 8001664:	ffff80ff 	.word	0xffff80ff
 8001668:	ffffc7ff 	.word	0xffffc7ff
 800166c:	00f42400 	.word	0x00f42400
 8001670:	20000000 	.word	0x20000000
 8001674:	20000004 	.word	0x20000004
 8001678:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800167c:	4bb1      	ldr	r3, [pc, #708]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 800167e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001680:	2380      	movs	r3, #128	@ 0x80
 8001682:	055b      	lsls	r3, r3, #21
 8001684:	4013      	ands	r3, r2
 8001686:	d101      	bne.n	800168c <HAL_RCC_OscConfig+0x360>
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <HAL_RCC_OscConfig+0x362>
 800168c:	2300      	movs	r3, #0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d011      	beq.n	80016b6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	4bac      	ldr	r3, [pc, #688]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 8001694:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001696:	4bab      	ldr	r3, [pc, #684]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 8001698:	2180      	movs	r1, #128	@ 0x80
 800169a:	0549      	lsls	r1, r1, #21
 800169c:	430a      	orrs	r2, r1
 800169e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016a0:	4ba8      	ldr	r3, [pc, #672]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 80016a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016a4:	2380      	movs	r3, #128	@ 0x80
 80016a6:	055b      	lsls	r3, r3, #21
 80016a8:	4013      	ands	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80016ae:	231f      	movs	r3, #31
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b6:	4ba4      	ldr	r3, [pc, #656]	@ (8001948 <HAL_RCC_OscConfig+0x61c>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	2380      	movs	r3, #128	@ 0x80
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4013      	ands	r3, r2
 80016c0:	d11a      	bne.n	80016f8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016c2:	4ba1      	ldr	r3, [pc, #644]	@ (8001948 <HAL_RCC_OscConfig+0x61c>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4ba0      	ldr	r3, [pc, #640]	@ (8001948 <HAL_RCC_OscConfig+0x61c>)
 80016c8:	2180      	movs	r1, #128	@ 0x80
 80016ca:	0049      	lsls	r1, r1, #1
 80016cc:	430a      	orrs	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fb60 	bl	8000d94 <HAL_GetTick>
 80016d4:	0003      	movs	r3, r0
 80016d6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016da:	f7ff fb5b 	bl	8000d94 <HAL_GetTick>
 80016de:	0002      	movs	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e127      	b.n	800193c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ec:	4b96      	ldr	r3, [pc, #600]	@ (8001948 <HAL_RCC_OscConfig+0x61c>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4013      	ands	r3, r2
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x3e2>
 8001700:	4b90      	ldr	r3, [pc, #576]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 8001702:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001704:	4b8f      	ldr	r3, [pc, #572]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 8001706:	2101      	movs	r1, #1
 8001708:	430a      	orrs	r2, r1
 800170a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800170c:	e01c      	b.n	8001748 <HAL_RCC_OscConfig+0x41c>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b05      	cmp	r3, #5
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x404>
 8001716:	4b8b      	ldr	r3, [pc, #556]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 8001718:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800171a:	4b8a      	ldr	r3, [pc, #552]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 800171c:	2104      	movs	r1, #4
 800171e:	430a      	orrs	r2, r1
 8001720:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001722:	4b88      	ldr	r3, [pc, #544]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 8001724:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001726:	4b87      	ldr	r3, [pc, #540]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 8001728:	2101      	movs	r1, #1
 800172a:	430a      	orrs	r2, r1
 800172c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0x41c>
 8001730:	4b84      	ldr	r3, [pc, #528]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 8001732:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001734:	4b83      	ldr	r3, [pc, #524]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 8001736:	2101      	movs	r1, #1
 8001738:	438a      	bics	r2, r1
 800173a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800173c:	4b81      	ldr	r3, [pc, #516]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 800173e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001740:	4b80      	ldr	r3, [pc, #512]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 8001742:	2104      	movs	r1, #4
 8001744:	438a      	bics	r2, r1
 8001746:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d014      	beq.n	800177a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fb20 	bl	8000d94 <HAL_GetTick>
 8001754:	0003      	movs	r3, r0
 8001756:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001758:	e009      	b.n	800176e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7ff fb1b 	bl	8000d94 <HAL_GetTick>
 800175e:	0002      	movs	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	4a79      	ldr	r2, [pc, #484]	@ (800194c <HAL_RCC_OscConfig+0x620>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e0e6      	b.n	800193c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800176e:	4b75      	ldr	r3, [pc, #468]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 8001770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001772:	2202      	movs	r2, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x42e>
 8001778:	e013      	b.n	80017a2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177a:	f7ff fb0b 	bl	8000d94 <HAL_GetTick>
 800177e:	0003      	movs	r3, r0
 8001780:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001782:	e009      	b.n	8001798 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001784:	f7ff fb06 	bl	8000d94 <HAL_GetTick>
 8001788:	0002      	movs	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	4a6f      	ldr	r2, [pc, #444]	@ (800194c <HAL_RCC_OscConfig+0x620>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e0d1      	b.n	800193c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001798:	4b6a      	ldr	r3, [pc, #424]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 800179a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179c:	2202      	movs	r2, #2
 800179e:	4013      	ands	r3, r2
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80017a2:	231f      	movs	r3, #31
 80017a4:	18fb      	adds	r3, r7, r3
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d105      	bne.n	80017b8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80017ac:	4b65      	ldr	r3, [pc, #404]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 80017ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017b0:	4b64      	ldr	r3, [pc, #400]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 80017b2:	4967      	ldr	r1, [pc, #412]	@ (8001950 <HAL_RCC_OscConfig+0x624>)
 80017b4:	400a      	ands	r2, r1
 80017b6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d100      	bne.n	80017c2 <HAL_RCC_OscConfig+0x496>
 80017c0:	e0bb      	b.n	800193a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c2:	4b60      	ldr	r3, [pc, #384]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2238      	movs	r2, #56	@ 0x38
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b10      	cmp	r3, #16
 80017cc:	d100      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4a4>
 80017ce:	e07b      	b.n	80018c8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d156      	bne.n	8001886 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d8:	4b5a      	ldr	r3, [pc, #360]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b59      	ldr	r3, [pc, #356]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 80017de:	495d      	ldr	r1, [pc, #372]	@ (8001954 <HAL_RCC_OscConfig+0x628>)
 80017e0:	400a      	ands	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff fad6 	bl	8000d94 <HAL_GetTick>
 80017e8:	0003      	movs	r3, r0
 80017ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ee:	f7ff fad1 	bl	8000d94 <HAL_GetTick>
 80017f2:	0002      	movs	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e09d      	b.n	800193c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001800:	4b50      	ldr	r3, [pc, #320]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	2380      	movs	r3, #128	@ 0x80
 8001806:	049b      	lsls	r3, r3, #18
 8001808:	4013      	ands	r3, r2
 800180a:	d1f0      	bne.n	80017ee <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800180c:	4b4d      	ldr	r3, [pc, #308]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4a51      	ldr	r2, [pc, #324]	@ (8001958 <HAL_RCC_OscConfig+0x62c>)
 8001812:	4013      	ands	r3, r2
 8001814:	0019      	movs	r1, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1a      	ldr	r2, [r3, #32]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001824:	021b      	lsls	r3, r3, #8
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001838:	431a      	orrs	r2, r3
 800183a:	4b42      	ldr	r3, [pc, #264]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 800183c:	430a      	orrs	r2, r1
 800183e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001840:	4b40      	ldr	r3, [pc, #256]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b3f      	ldr	r3, [pc, #252]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 8001846:	2180      	movs	r1, #128	@ 0x80
 8001848:	0449      	lsls	r1, r1, #17
 800184a:	430a      	orrs	r2, r1
 800184c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800184e:	4b3d      	ldr	r3, [pc, #244]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	4b3c      	ldr	r3, [pc, #240]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 8001854:	2180      	movs	r1, #128	@ 0x80
 8001856:	0549      	lsls	r1, r1, #21
 8001858:	430a      	orrs	r2, r1
 800185a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff fa9a 	bl	8000d94 <HAL_GetTick>
 8001860:	0003      	movs	r3, r0
 8001862:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001866:	f7ff fa95 	bl	8000d94 <HAL_GetTick>
 800186a:	0002      	movs	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e061      	b.n	800193c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001878:	4b32      	ldr	r3, [pc, #200]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2380      	movs	r3, #128	@ 0x80
 800187e:	049b      	lsls	r3, r3, #18
 8001880:	4013      	ands	r3, r2
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x53a>
 8001884:	e059      	b.n	800193a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001886:	4b2f      	ldr	r3, [pc, #188]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	4b2e      	ldr	r3, [pc, #184]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 800188c:	4931      	ldr	r1, [pc, #196]	@ (8001954 <HAL_RCC_OscConfig+0x628>)
 800188e:	400a      	ands	r2, r1
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff fa7f 	bl	8000d94 <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff fa7a 	bl	8000d94 <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e046      	b.n	800193c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ae:	4b25      	ldr	r3, [pc, #148]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	2380      	movs	r3, #128	@ 0x80
 80018b4:	049b      	lsls	r3, r3, #18
 80018b6:	4013      	ands	r3, r2
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80018ba:	4b22      	ldr	r3, [pc, #136]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	4b21      	ldr	r3, [pc, #132]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 80018c0:	4926      	ldr	r1, [pc, #152]	@ (800195c <HAL_RCC_OscConfig+0x630>)
 80018c2:	400a      	ands	r2, r1
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	e038      	b.n	800193a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e033      	b.n	800193c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80018d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <HAL_RCC_OscConfig+0x618>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2203      	movs	r2, #3
 80018de:	401a      	ands	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d126      	bne.n	8001936 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2270      	movs	r2, #112	@ 0x70
 80018ec:	401a      	ands	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d11f      	bne.n	8001936 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	23fe      	movs	r3, #254	@ 0xfe
 80018fa:	01db      	lsls	r3, r3, #7
 80018fc:	401a      	ands	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001902:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d116      	bne.n	8001936 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	23f8      	movs	r3, #248	@ 0xf8
 800190c:	039b      	lsls	r3, r3, #14
 800190e:	401a      	ands	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d10e      	bne.n	8001936 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	23e0      	movs	r3, #224	@ 0xe0
 800191c:	051b      	lsls	r3, r3, #20
 800191e:	401a      	ands	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	0f5b      	lsrs	r3, r3, #29
 800192c:	075a      	lsls	r2, r3, #29
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d001      	beq.n	800193a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b008      	add	sp, #32
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40021000 	.word	0x40021000
 8001948:	40007000 	.word	0x40007000
 800194c:	00001388 	.word	0x00001388
 8001950:	efffffff 	.word	0xefffffff
 8001954:	feffffff 	.word	0xfeffffff
 8001958:	11c1808c 	.word	0x11c1808c
 800195c:	eefefffc 	.word	0xeefefffc

08001960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0e9      	b.n	8001b48 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001974:	4b76      	ldr	r3, [pc, #472]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2207      	movs	r2, #7
 800197a:	4013      	ands	r3, r2
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d91e      	bls.n	80019c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b73      	ldr	r3, [pc, #460]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2207      	movs	r2, #7
 8001988:	4393      	bics	r3, r2
 800198a:	0019      	movs	r1, r3
 800198c:	4b70      	ldr	r3, [pc, #448]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001994:	f7ff f9fe 	bl	8000d94 <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800199c:	e009      	b.n	80019b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199e:	f7ff f9f9 	bl	8000d94 <HAL_GetTick>
 80019a2:	0002      	movs	r2, r0
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001b54 <HAL_RCC_ClockConfig+0x1f4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e0ca      	b.n	8001b48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019b2:	4b67      	ldr	r3, [pc, #412]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2207      	movs	r2, #7
 80019b8:	4013      	ands	r3, r2
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d1ee      	bne.n	800199e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2202      	movs	r2, #2
 80019c6:	4013      	ands	r3, r2
 80019c8:	d015      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2204      	movs	r2, #4
 80019d0:	4013      	ands	r3, r2
 80019d2:	d006      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019d4:	4b60      	ldr	r3, [pc, #384]	@ (8001b58 <HAL_RCC_ClockConfig+0x1f8>)
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	4b5f      	ldr	r3, [pc, #380]	@ (8001b58 <HAL_RCC_ClockConfig+0x1f8>)
 80019da:	21e0      	movs	r1, #224	@ 0xe0
 80019dc:	01c9      	lsls	r1, r1, #7
 80019de:	430a      	orrs	r2, r1
 80019e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001b58 <HAL_RCC_ClockConfig+0x1f8>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	4a5d      	ldr	r2, [pc, #372]	@ (8001b5c <HAL_RCC_ClockConfig+0x1fc>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	0019      	movs	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	4b59      	ldr	r3, [pc, #356]	@ (8001b58 <HAL_RCC_ClockConfig+0x1f8>)
 80019f2:	430a      	orrs	r2, r1
 80019f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2201      	movs	r2, #1
 80019fc:	4013      	ands	r3, r2
 80019fe:	d057      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d107      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a08:	4b53      	ldr	r3, [pc, #332]	@ (8001b58 <HAL_RCC_ClockConfig+0x1f8>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2380      	movs	r3, #128	@ 0x80
 8001a0e:	029b      	lsls	r3, r3, #10
 8001a10:	4013      	ands	r3, r2
 8001a12:	d12b      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e097      	b.n	8001b48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a20:	4b4d      	ldr	r3, [pc, #308]	@ (8001b58 <HAL_RCC_ClockConfig+0x1f8>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	@ 0x80
 8001a26:	049b      	lsls	r3, r3, #18
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d11f      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e08b      	b.n	8001b48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d107      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a38:	4b47      	ldr	r3, [pc, #284]	@ (8001b58 <HAL_RCC_ClockConfig+0x1f8>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2380      	movs	r3, #128	@ 0x80
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4013      	ands	r3, r2
 8001a42:	d113      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e07f      	b.n	8001b48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d106      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a50:	4b41      	ldr	r3, [pc, #260]	@ (8001b58 <HAL_RCC_ClockConfig+0x1f8>)
 8001a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a54:	2202      	movs	r2, #2
 8001a56:	4013      	ands	r3, r2
 8001a58:	d108      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e074      	b.n	8001b48 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b58 <HAL_RCC_ClockConfig+0x1f8>)
 8001a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a62:	2202      	movs	r2, #2
 8001a64:	4013      	ands	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e06d      	b.n	8001b48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b58 <HAL_RCC_ClockConfig+0x1f8>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2207      	movs	r2, #7
 8001a72:	4393      	bics	r3, r2
 8001a74:	0019      	movs	r1, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	4b37      	ldr	r3, [pc, #220]	@ (8001b58 <HAL_RCC_ClockConfig+0x1f8>)
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a80:	f7ff f988 	bl	8000d94 <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a88:	e009      	b.n	8001a9e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8a:	f7ff f983 	bl	8000d94 <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	4a2f      	ldr	r2, [pc, #188]	@ (8001b54 <HAL_RCC_ClockConfig+0x1f4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e054      	b.n	8001b48 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b58 <HAL_RCC_ClockConfig+0x1f8>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2238      	movs	r2, #56	@ 0x38
 8001aa4:	401a      	ands	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d1ec      	bne.n	8001a8a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b27      	ldr	r3, [pc, #156]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d21e      	bcs.n	8001afc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b24      	ldr	r3, [pc, #144]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	4393      	bics	r3, r2
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	4b21      	ldr	r3, [pc, #132]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ad0:	f7ff f960 	bl	8000d94 <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ad8:	e009      	b.n	8001aee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ada:	f7ff f95b 	bl	8000d94 <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b54 <HAL_RCC_ClockConfig+0x1f4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e02c      	b.n	8001b48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aee:	4b18      	ldr	r3, [pc, #96]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2207      	movs	r2, #7
 8001af4:	4013      	ands	r3, r2
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d1ee      	bne.n	8001ada <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2204      	movs	r2, #4
 8001b02:	4013      	ands	r3, r2
 8001b04:	d009      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b06:	4b14      	ldr	r3, [pc, #80]	@ (8001b58 <HAL_RCC_ClockConfig+0x1f8>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	4a15      	ldr	r2, [pc, #84]	@ (8001b60 <HAL_RCC_ClockConfig+0x200>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	0019      	movs	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	4b10      	ldr	r3, [pc, #64]	@ (8001b58 <HAL_RCC_ClockConfig+0x1f8>)
 8001b16:	430a      	orrs	r2, r1
 8001b18:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b1a:	f000 f829 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b1e:	0001      	movs	r1, r0
 8001b20:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <HAL_RCC_ClockConfig+0x1f8>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	220f      	movs	r2, #15
 8001b28:	401a      	ands	r2, r3
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <HAL_RCC_ClockConfig+0x204>)
 8001b2c:	0092      	lsls	r2, r2, #2
 8001b2e:	58d3      	ldr	r3, [r2, r3]
 8001b30:	221f      	movs	r2, #31
 8001b32:	4013      	ands	r3, r2
 8001b34:	000a      	movs	r2, r1
 8001b36:	40da      	lsrs	r2, r3
 8001b38:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <HAL_RCC_ClockConfig+0x208>)
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b6c <HAL_RCC_ClockConfig+0x20c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0018      	movs	r0, r3
 8001b42:	f7ff f8cb 	bl	8000cdc <HAL_InitTick>
 8001b46:	0003      	movs	r3, r0
}
 8001b48:	0018      	movs	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b004      	add	sp, #16
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40022000 	.word	0x40022000
 8001b54:	00001388 	.word	0x00001388
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	fffff0ff 	.word	0xfffff0ff
 8001b60:	ffff8fff 	.word	0xffff8fff
 8001b64:	080037cc 	.word	0x080037cc
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b76:	4b3c      	ldr	r3, [pc, #240]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2238      	movs	r2, #56	@ 0x38
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d10f      	bne.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b80:	4b39      	ldr	r3, [pc, #228]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0adb      	lsrs	r3, r3, #11
 8001b86:	2207      	movs	r2, #7
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	0013      	movs	r3, r2
 8001b90:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b92:	6839      	ldr	r1, [r7, #0]
 8001b94:	4835      	ldr	r0, [pc, #212]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b96:	f7fe fab5 	bl	8000104 <__udivsi3>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	e05d      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ba0:	4b31      	ldr	r3, [pc, #196]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2238      	movs	r2, #56	@ 0x38
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d102      	bne.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bac:	4b30      	ldr	r3, [pc, #192]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x100>)
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	e054      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2238      	movs	r2, #56	@ 0x38
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b10      	cmp	r3, #16
 8001bbc:	d138      	bne.n	8001c30 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bc8:	4b27      	ldr	r3, [pc, #156]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	2207      	movs	r2, #7
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d10d      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	4824      	ldr	r0, [pc, #144]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x100>)
 8001be0:	f7fe fa90 	bl	8000104 <__udivsi3>
 8001be4:	0003      	movs	r3, r0
 8001be6:	0019      	movs	r1, r3
 8001be8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	227f      	movs	r2, #127	@ 0x7f
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	434b      	muls	r3, r1
 8001bf4:	617b      	str	r3, [r7, #20]
        break;
 8001bf6:	e00d      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	481c      	ldr	r0, [pc, #112]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bfc:	f7fe fa82 	bl	8000104 <__udivsi3>
 8001c00:	0003      	movs	r3, r0
 8001c02:	0019      	movs	r1, r3
 8001c04:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	0a1b      	lsrs	r3, r3, #8
 8001c0a:	227f      	movs	r2, #127	@ 0x7f
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	434b      	muls	r3, r1
 8001c10:	617b      	str	r3, [r7, #20]
        break;
 8001c12:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c14:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	0f5b      	lsrs	r3, r3, #29
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	3301      	adds	r3, #1
 8001c20:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	6978      	ldr	r0, [r7, #20]
 8001c26:	f7fe fa6d 	bl	8000104 <__udivsi3>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	e015      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c30:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2238      	movs	r2, #56	@ 0x38
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b20      	cmp	r3, #32
 8001c3a:	d103      	bne.n	8001c44 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c3c:	2380      	movs	r3, #128	@ 0x80
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	e00b      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c44:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2238      	movs	r2, #56	@ 0x38
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b18      	cmp	r3, #24
 8001c4e:	d103      	bne.n	8001c58 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c50:	23fa      	movs	r3, #250	@ 0xfa
 8001c52:	01db      	lsls	r3, r3, #7
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	e001      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c5c:	693b      	ldr	r3, [r7, #16]
}
 8001c5e:	0018      	movs	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b006      	add	sp, #24
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	00f42400 	.word	0x00f42400
 8001c70:	007a1200 	.word	0x007a1200

08001c74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c78:	4b02      	ldr	r3, [pc, #8]	@ (8001c84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			@ (mov r8, r8)
 8001c84:	20000000 	.word	0x20000000

08001c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c88:	b5b0      	push	{r4, r5, r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c8c:	f7ff fff2 	bl	8001c74 <HAL_RCC_GetHCLKFreq>
 8001c90:	0004      	movs	r4, r0
 8001c92:	f7ff fb3f 	bl	8001314 <LL_RCC_GetAPB1Prescaler>
 8001c96:	0003      	movs	r3, r0
 8001c98:	0b1a      	lsrs	r2, r3, #12
 8001c9a:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c9c:	0092      	lsls	r2, r2, #2
 8001c9e:	58d3      	ldr	r3, [r2, r3]
 8001ca0:	221f      	movs	r2, #31
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	40dc      	lsrs	r4, r3
 8001ca6:	0023      	movs	r3, r4
}
 8001ca8:	0018      	movs	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bdb0      	pop	{r4, r5, r7, pc}
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	0800380c 	.word	0x0800380c

08001cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001cbc:	2313      	movs	r3, #19
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cc4:	2312      	movs	r3, #18
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	@ 0x80
 8001cd2:	029b      	lsls	r3, r3, #10
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d100      	bne.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001cd8:	e0a3      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cda:	2011      	movs	r0, #17
 8001cdc:	183b      	adds	r3, r7, r0
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce2:	4bc3      	ldr	r3, [pc, #780]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ce4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ce6:	2380      	movs	r3, #128	@ 0x80
 8001ce8:	055b      	lsls	r3, r3, #21
 8001cea:	4013      	ands	r3, r2
 8001cec:	d110      	bne.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	4bc0      	ldr	r3, [pc, #768]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cf2:	4bbf      	ldr	r3, [pc, #764]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cf4:	2180      	movs	r1, #128	@ 0x80
 8001cf6:	0549      	lsls	r1, r1, #21
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cfc:	4bbc      	ldr	r3, [pc, #752]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d00:	2380      	movs	r3, #128	@ 0x80
 8001d02:	055b      	lsls	r3, r3, #21
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d0a:	183b      	adds	r3, r7, r0
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d10:	4bb8      	ldr	r3, [pc, #736]	@ (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4bb7      	ldr	r3, [pc, #732]	@ (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d16:	2180      	movs	r1, #128	@ 0x80
 8001d18:	0049      	lsls	r1, r1, #1
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d1e:	f7ff f839 	bl	8000d94 <HAL_GetTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d26:	e00b      	b.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d28:	f7ff f834 	bl	8000d94 <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d904      	bls.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d36:	2313      	movs	r3, #19
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	701a      	strb	r2, [r3, #0]
        break;
 8001d3e:	e005      	b.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d40:	4bac      	ldr	r3, [pc, #688]	@ (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	@ 0x80
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d0ed      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d4c:	2313      	movs	r3, #19
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d154      	bne.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d56:	4ba6      	ldr	r3, [pc, #664]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d5a:	23c0      	movs	r3, #192	@ 0xc0
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4013      	ands	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d019      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d014      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d72:	4b9f      	ldr	r3, [pc, #636]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d76:	4aa0      	ldr	r2, [pc, #640]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d7c:	4b9c      	ldr	r3, [pc, #624]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d80:	4b9b      	ldr	r3, [pc, #620]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d82:	2180      	movs	r1, #128	@ 0x80
 8001d84:	0249      	lsls	r1, r1, #9
 8001d86:	430a      	orrs	r2, r1
 8001d88:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d8a:	4b99      	ldr	r3, [pc, #612]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d8e:	4b98      	ldr	r3, [pc, #608]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d90:	499a      	ldr	r1, [pc, #616]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001d92:	400a      	ands	r2, r1
 8001d94:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d96:	4b96      	ldr	r3, [pc, #600]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4013      	ands	r3, r2
 8001da2:	d016      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7fe fff6 	bl	8000d94 <HAL_GetTick>
 8001da8:	0003      	movs	r3, r0
 8001daa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dac:	e00c      	b.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f7fe fff1 	bl	8000d94 <HAL_GetTick>
 8001db2:	0002      	movs	r2, r0
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	4a91      	ldr	r2, [pc, #580]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d904      	bls.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001dbe:	2313      	movs	r3, #19
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	701a      	strb	r2, [r3, #0]
            break;
 8001dc6:	e004      	b.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc8:	4b89      	ldr	r3, [pc, #548]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dcc:	2202      	movs	r2, #2
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d0ed      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001dd2:	2313      	movs	r3, #19
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10a      	bne.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ddc:	4b84      	ldr	r3, [pc, #528]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de0:	4a85      	ldr	r2, [pc, #532]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	0019      	movs	r1, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dea:	4b81      	ldr	r3, [pc, #516]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dec:	430a      	orrs	r2, r1
 8001dee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001df0:	e00c      	b.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001df2:	2312      	movs	r3, #18
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	2213      	movs	r2, #19
 8001df8:	18ba      	adds	r2, r7, r2
 8001dfa:	7812      	ldrb	r2, [r2, #0]
 8001dfc:	701a      	strb	r2, [r3, #0]
 8001dfe:	e005      	b.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e00:	2312      	movs	r3, #18
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	2213      	movs	r2, #19
 8001e06:	18ba      	adds	r2, r7, r2
 8001e08:	7812      	ldrb	r2, [r2, #0]
 8001e0a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e0c:	2311      	movs	r3, #17
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d105      	bne.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e16:	4b76      	ldr	r3, [pc, #472]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e1a:	4b75      	ldr	r3, [pc, #468]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e1c:	4979      	ldr	r1, [pc, #484]	@ (8002004 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001e1e:	400a      	ands	r2, r1
 8001e20:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2201      	movs	r2, #1
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d009      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e2c:	4b70      	ldr	r3, [pc, #448]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e30:	2203      	movs	r2, #3
 8001e32:	4393      	bics	r3, r2
 8001e34:	0019      	movs	r1, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2202      	movs	r2, #2
 8001e46:	4013      	ands	r3, r2
 8001e48:	d009      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e4a:	4b69      	ldr	r3, [pc, #420]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4e:	220c      	movs	r2, #12
 8001e50:	4393      	bics	r3, r2
 8001e52:	0019      	movs	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	4b65      	ldr	r3, [pc, #404]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2210      	movs	r2, #16
 8001e64:	4013      	ands	r3, r2
 8001e66:	d009      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e68:	4b61      	ldr	r3, [pc, #388]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e6c:	4a66      	ldr	r2, [pc, #408]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	0019      	movs	r1, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	4b5e      	ldr	r3, [pc, #376]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	@ 0x80
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4013      	ands	r3, r2
 8001e86:	d009      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e88:	4b59      	ldr	r3, [pc, #356]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8c:	4a5f      	ldr	r2, [pc, #380]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	4b56      	ldr	r3, [pc, #344]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d009      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ea8:	4b51      	ldr	r3, [pc, #324]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eac:	4a58      	ldr	r2, [pc, #352]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69da      	ldr	r2, [r3, #28]
 8001eb6:	4b4e      	ldr	r3, [pc, #312]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d009      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eca:	4a52      	ldr	r2, [pc, #328]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	0019      	movs	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	4b46      	ldr	r3, [pc, #280]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	2380      	movs	r3, #128	@ 0x80
 8001ee0:	01db      	lsls	r3, r3, #7
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d015      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ee6:	4b42      	ldr	r3, [pc, #264]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	0899      	lsrs	r1, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1a      	ldr	r2, [r3, #32]
 8001ef2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1a      	ldr	r2, [r3, #32]
 8001efc:	2380      	movs	r3, #128	@ 0x80
 8001efe:	05db      	lsls	r3, r3, #23
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d106      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f04:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	4b39      	ldr	r3, [pc, #228]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f0a:	2180      	movs	r1, #128	@ 0x80
 8001f0c:	0249      	lsls	r1, r1, #9
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	2380      	movs	r3, #128	@ 0x80
 8001f18:	031b      	lsls	r3, r3, #12
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d009      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f1e:	4b34      	ldr	r3, [pc, #208]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f22:	2240      	movs	r2, #64	@ 0x40
 8001f24:	4393      	bics	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f2c:	4b30      	ldr	r3, [pc, #192]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	2380      	movs	r3, #128	@ 0x80
 8001f38:	039b      	lsls	r3, r3, #14
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d016      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f42:	4a35      	ldr	r2, [pc, #212]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	0019      	movs	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f4c:	4b28      	ldr	r3, [pc, #160]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f56:	2380      	movs	r3, #128	@ 0x80
 8001f58:	03db      	lsls	r3, r3, #15
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d106      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	4b23      	ldr	r3, [pc, #140]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f64:	2180      	movs	r1, #128	@ 0x80
 8001f66:	0449      	lsls	r1, r1, #17
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	2380      	movs	r3, #128	@ 0x80
 8001f72:	03db      	lsls	r3, r3, #15
 8001f74:	4013      	ands	r3, r2
 8001f76:	d016      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001f78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f7c:	4a27      	ldr	r2, [pc, #156]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f90:	2380      	movs	r3, #128	@ 0x80
 8001f92:	045b      	lsls	r3, r3, #17
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f98:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f9e:	2180      	movs	r1, #128	@ 0x80
 8001fa0:	0449      	lsls	r1, r1, #17
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	2380      	movs	r3, #128	@ 0x80
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d016      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	0019      	movs	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	2380      	movs	r3, #128	@ 0x80
 8001fcc:	01db      	lsls	r3, r3, #7
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d106      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fd2:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fd8:	2180      	movs	r1, #128	@ 0x80
 8001fda:	0249      	lsls	r1, r1, #9
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001fe0:	2312      	movs	r3, #18
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	781b      	ldrb	r3, [r3, #0]
}
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b006      	add	sp, #24
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40007000 	.word	0x40007000
 8001ff8:	fffffcff 	.word	0xfffffcff
 8001ffc:	fffeffff 	.word	0xfffeffff
 8002000:	00001388 	.word	0x00001388
 8002004:	efffffff 	.word	0xefffffff
 8002008:	fffff3ff 	.word	0xfffff3ff
 800200c:	fff3ffff 	.word	0xfff3ffff
 8002010:	ffcfffff 	.word	0xffcfffff
 8002014:	ffffcfff 	.word	0xffffcfff
 8002018:	ffbfffff 	.word	0xffbfffff
 800201c:	feffffff 	.word	0xfeffffff
 8002020:	ffff3fff 	.word	0xffff3fff

08002024 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e046      	b.n	80020c4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2288      	movs	r2, #136	@ 0x88
 800203a:	589b      	ldr	r3, [r3, r2]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d107      	bne.n	8002050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2284      	movs	r2, #132	@ 0x84
 8002044:	2100      	movs	r1, #0
 8002046:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	0018      	movs	r0, r3
 800204c:	f7fe fd7e 	bl	8000b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2288      	movs	r2, #136	@ 0x88
 8002054:	2124      	movs	r1, #36	@ 0x24
 8002056:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2101      	movs	r1, #1
 8002064:	438a      	bics	r2, r1
 8002066:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	0018      	movs	r0, r3
 8002074:	f000 faea 	bl	800264c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	0018      	movs	r0, r3
 800207c:	f000 f828 	bl	80020d0 <UART_SetConfig>
 8002080:	0003      	movs	r3, r0
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e01c      	b.n	80020c4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	490d      	ldr	r1, [pc, #52]	@ (80020cc <HAL_UART_Init+0xa8>)
 8002096:	400a      	ands	r2, r1
 8002098:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	212a      	movs	r1, #42	@ 0x2a
 80020a6:	438a      	bics	r2, r1
 80020a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2101      	movs	r1, #1
 80020b6:	430a      	orrs	r2, r1
 80020b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	0018      	movs	r0, r3
 80020be:	f000 fb79 	bl	80027b4 <UART_CheckIdleState>
 80020c2:	0003      	movs	r3, r0
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b002      	add	sp, #8
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	ffffb7ff 	.word	0xffffb7ff

080020d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020d0:	b5b0      	push	{r4, r5, r7, lr}
 80020d2:	b090      	sub	sp, #64	@ 0x40
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020d8:	231a      	movs	r3, #26
 80020da:	2220      	movs	r2, #32
 80020dc:	189b      	adds	r3, r3, r2
 80020de:	19db      	adds	r3, r3, r7
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	431a      	orrs	r2, r3
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	431a      	orrs	r2, r3
 80020f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4aaf      	ldr	r2, [pc, #700]	@ (80023c0 <UART_SetConfig+0x2f0>)
 8002104:	4013      	ands	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800210e:	430b      	orrs	r3, r1
 8002110:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4aaa      	ldr	r2, [pc, #680]	@ (80023c4 <UART_SetConfig+0x2f4>)
 800211a:	4013      	ands	r3, r2
 800211c:	0018      	movs	r0, r3
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	68d9      	ldr	r1, [r3, #12]
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	0003      	movs	r3, r0
 8002128:	430b      	orrs	r3, r1
 800212a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4aa4      	ldr	r2, [pc, #656]	@ (80023c8 <UART_SetConfig+0x2f8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d004      	beq.n	8002146 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002142:	4313      	orrs	r3, r2
 8002144:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a9f      	ldr	r2, [pc, #636]	@ (80023cc <UART_SetConfig+0x2fc>)
 800214e:	4013      	ands	r3, r2
 8002150:	0019      	movs	r1, r3
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002158:	430b      	orrs	r3, r1
 800215a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002162:	220f      	movs	r2, #15
 8002164:	4393      	bics	r3, r2
 8002166:	0018      	movs	r0, r3
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	0003      	movs	r3, r0
 8002172:	430b      	orrs	r3, r1
 8002174:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a95      	ldr	r2, [pc, #596]	@ (80023d0 <UART_SetConfig+0x300>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d131      	bne.n	80021e4 <UART_SetConfig+0x114>
 8002180:	4b94      	ldr	r3, [pc, #592]	@ (80023d4 <UART_SetConfig+0x304>)
 8002182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002184:	2203      	movs	r2, #3
 8002186:	4013      	ands	r3, r2
 8002188:	2b03      	cmp	r3, #3
 800218a:	d01d      	beq.n	80021c8 <UART_SetConfig+0xf8>
 800218c:	d823      	bhi.n	80021d6 <UART_SetConfig+0x106>
 800218e:	2b02      	cmp	r3, #2
 8002190:	d00c      	beq.n	80021ac <UART_SetConfig+0xdc>
 8002192:	d820      	bhi.n	80021d6 <UART_SetConfig+0x106>
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <UART_SetConfig+0xce>
 8002198:	2b01      	cmp	r3, #1
 800219a:	d00e      	beq.n	80021ba <UART_SetConfig+0xea>
 800219c:	e01b      	b.n	80021d6 <UART_SetConfig+0x106>
 800219e:	231b      	movs	r3, #27
 80021a0:	2220      	movs	r2, #32
 80021a2:	189b      	adds	r3, r3, r2
 80021a4:	19db      	adds	r3, r3, r7
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
 80021aa:	e0b4      	b.n	8002316 <UART_SetConfig+0x246>
 80021ac:	231b      	movs	r3, #27
 80021ae:	2220      	movs	r2, #32
 80021b0:	189b      	adds	r3, r3, r2
 80021b2:	19db      	adds	r3, r3, r7
 80021b4:	2202      	movs	r2, #2
 80021b6:	701a      	strb	r2, [r3, #0]
 80021b8:	e0ad      	b.n	8002316 <UART_SetConfig+0x246>
 80021ba:	231b      	movs	r3, #27
 80021bc:	2220      	movs	r2, #32
 80021be:	189b      	adds	r3, r3, r2
 80021c0:	19db      	adds	r3, r3, r7
 80021c2:	2204      	movs	r2, #4
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	e0a6      	b.n	8002316 <UART_SetConfig+0x246>
 80021c8:	231b      	movs	r3, #27
 80021ca:	2220      	movs	r2, #32
 80021cc:	189b      	adds	r3, r3, r2
 80021ce:	19db      	adds	r3, r3, r7
 80021d0:	2208      	movs	r2, #8
 80021d2:	701a      	strb	r2, [r3, #0]
 80021d4:	e09f      	b.n	8002316 <UART_SetConfig+0x246>
 80021d6:	231b      	movs	r3, #27
 80021d8:	2220      	movs	r2, #32
 80021da:	189b      	adds	r3, r3, r2
 80021dc:	19db      	adds	r3, r3, r7
 80021de:	2210      	movs	r2, #16
 80021e0:	701a      	strb	r2, [r3, #0]
 80021e2:	e098      	b.n	8002316 <UART_SetConfig+0x246>
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a7b      	ldr	r2, [pc, #492]	@ (80023d8 <UART_SetConfig+0x308>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d131      	bne.n	8002252 <UART_SetConfig+0x182>
 80021ee:	4b79      	ldr	r3, [pc, #484]	@ (80023d4 <UART_SetConfig+0x304>)
 80021f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f2:	220c      	movs	r2, #12
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b0c      	cmp	r3, #12
 80021f8:	d01d      	beq.n	8002236 <UART_SetConfig+0x166>
 80021fa:	d823      	bhi.n	8002244 <UART_SetConfig+0x174>
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d00c      	beq.n	800221a <UART_SetConfig+0x14a>
 8002200:	d820      	bhi.n	8002244 <UART_SetConfig+0x174>
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <UART_SetConfig+0x13c>
 8002206:	2b04      	cmp	r3, #4
 8002208:	d00e      	beq.n	8002228 <UART_SetConfig+0x158>
 800220a:	e01b      	b.n	8002244 <UART_SetConfig+0x174>
 800220c:	231b      	movs	r3, #27
 800220e:	2220      	movs	r2, #32
 8002210:	189b      	adds	r3, r3, r2
 8002212:	19db      	adds	r3, r3, r7
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	e07d      	b.n	8002316 <UART_SetConfig+0x246>
 800221a:	231b      	movs	r3, #27
 800221c:	2220      	movs	r2, #32
 800221e:	189b      	adds	r3, r3, r2
 8002220:	19db      	adds	r3, r3, r7
 8002222:	2202      	movs	r2, #2
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e076      	b.n	8002316 <UART_SetConfig+0x246>
 8002228:	231b      	movs	r3, #27
 800222a:	2220      	movs	r2, #32
 800222c:	189b      	adds	r3, r3, r2
 800222e:	19db      	adds	r3, r3, r7
 8002230:	2204      	movs	r2, #4
 8002232:	701a      	strb	r2, [r3, #0]
 8002234:	e06f      	b.n	8002316 <UART_SetConfig+0x246>
 8002236:	231b      	movs	r3, #27
 8002238:	2220      	movs	r2, #32
 800223a:	189b      	adds	r3, r3, r2
 800223c:	19db      	adds	r3, r3, r7
 800223e:	2208      	movs	r2, #8
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	e068      	b.n	8002316 <UART_SetConfig+0x246>
 8002244:	231b      	movs	r3, #27
 8002246:	2220      	movs	r2, #32
 8002248:	189b      	adds	r3, r3, r2
 800224a:	19db      	adds	r3, r3, r7
 800224c:	2210      	movs	r2, #16
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	e061      	b.n	8002316 <UART_SetConfig+0x246>
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a61      	ldr	r2, [pc, #388]	@ (80023dc <UART_SetConfig+0x30c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d106      	bne.n	800226a <UART_SetConfig+0x19a>
 800225c:	231b      	movs	r3, #27
 800225e:	2220      	movs	r2, #32
 8002260:	189b      	adds	r3, r3, r2
 8002262:	19db      	adds	r3, r3, r7
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	e055      	b.n	8002316 <UART_SetConfig+0x246>
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a5c      	ldr	r2, [pc, #368]	@ (80023e0 <UART_SetConfig+0x310>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d106      	bne.n	8002282 <UART_SetConfig+0x1b2>
 8002274:	231b      	movs	r3, #27
 8002276:	2220      	movs	r2, #32
 8002278:	189b      	adds	r3, r3, r2
 800227a:	19db      	adds	r3, r3, r7
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e049      	b.n	8002316 <UART_SetConfig+0x246>
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a50      	ldr	r2, [pc, #320]	@ (80023c8 <UART_SetConfig+0x2f8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d13e      	bne.n	800230a <UART_SetConfig+0x23a>
 800228c:	4b51      	ldr	r3, [pc, #324]	@ (80023d4 <UART_SetConfig+0x304>)
 800228e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002290:	23c0      	movs	r3, #192	@ 0xc0
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	4013      	ands	r3, r2
 8002296:	22c0      	movs	r2, #192	@ 0xc0
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	4293      	cmp	r3, r2
 800229c:	d027      	beq.n	80022ee <UART_SetConfig+0x21e>
 800229e:	22c0      	movs	r2, #192	@ 0xc0
 80022a0:	0112      	lsls	r2, r2, #4
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d82a      	bhi.n	80022fc <UART_SetConfig+0x22c>
 80022a6:	2280      	movs	r2, #128	@ 0x80
 80022a8:	0112      	lsls	r2, r2, #4
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d011      	beq.n	80022d2 <UART_SetConfig+0x202>
 80022ae:	2280      	movs	r2, #128	@ 0x80
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d822      	bhi.n	80022fc <UART_SetConfig+0x22c>
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d004      	beq.n	80022c4 <UART_SetConfig+0x1f4>
 80022ba:	2280      	movs	r2, #128	@ 0x80
 80022bc:	00d2      	lsls	r2, r2, #3
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00e      	beq.n	80022e0 <UART_SetConfig+0x210>
 80022c2:	e01b      	b.n	80022fc <UART_SetConfig+0x22c>
 80022c4:	231b      	movs	r3, #27
 80022c6:	2220      	movs	r2, #32
 80022c8:	189b      	adds	r3, r3, r2
 80022ca:	19db      	adds	r3, r3, r7
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
 80022d0:	e021      	b.n	8002316 <UART_SetConfig+0x246>
 80022d2:	231b      	movs	r3, #27
 80022d4:	2220      	movs	r2, #32
 80022d6:	189b      	adds	r3, r3, r2
 80022d8:	19db      	adds	r3, r3, r7
 80022da:	2202      	movs	r2, #2
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	e01a      	b.n	8002316 <UART_SetConfig+0x246>
 80022e0:	231b      	movs	r3, #27
 80022e2:	2220      	movs	r2, #32
 80022e4:	189b      	adds	r3, r3, r2
 80022e6:	19db      	adds	r3, r3, r7
 80022e8:	2204      	movs	r2, #4
 80022ea:	701a      	strb	r2, [r3, #0]
 80022ec:	e013      	b.n	8002316 <UART_SetConfig+0x246>
 80022ee:	231b      	movs	r3, #27
 80022f0:	2220      	movs	r2, #32
 80022f2:	189b      	adds	r3, r3, r2
 80022f4:	19db      	adds	r3, r3, r7
 80022f6:	2208      	movs	r2, #8
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	e00c      	b.n	8002316 <UART_SetConfig+0x246>
 80022fc:	231b      	movs	r3, #27
 80022fe:	2220      	movs	r2, #32
 8002300:	189b      	adds	r3, r3, r2
 8002302:	19db      	adds	r3, r3, r7
 8002304:	2210      	movs	r2, #16
 8002306:	701a      	strb	r2, [r3, #0]
 8002308:	e005      	b.n	8002316 <UART_SetConfig+0x246>
 800230a:	231b      	movs	r3, #27
 800230c:	2220      	movs	r2, #32
 800230e:	189b      	adds	r3, r3, r2
 8002310:	19db      	adds	r3, r3, r7
 8002312:	2210      	movs	r2, #16
 8002314:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a2b      	ldr	r2, [pc, #172]	@ (80023c8 <UART_SetConfig+0x2f8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d000      	beq.n	8002322 <UART_SetConfig+0x252>
 8002320:	e0a9      	b.n	8002476 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002322:	231b      	movs	r3, #27
 8002324:	2220      	movs	r2, #32
 8002326:	189b      	adds	r3, r3, r2
 8002328:	19db      	adds	r3, r3, r7
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b08      	cmp	r3, #8
 800232e:	d015      	beq.n	800235c <UART_SetConfig+0x28c>
 8002330:	dc18      	bgt.n	8002364 <UART_SetConfig+0x294>
 8002332:	2b04      	cmp	r3, #4
 8002334:	d00d      	beq.n	8002352 <UART_SetConfig+0x282>
 8002336:	dc15      	bgt.n	8002364 <UART_SetConfig+0x294>
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <UART_SetConfig+0x272>
 800233c:	2b02      	cmp	r3, #2
 800233e:	d005      	beq.n	800234c <UART_SetConfig+0x27c>
 8002340:	e010      	b.n	8002364 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002342:	f7ff fca1 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8002346:	0003      	movs	r3, r0
 8002348:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800234a:	e014      	b.n	8002376 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800234c:	4b25      	ldr	r3, [pc, #148]	@ (80023e4 <UART_SetConfig+0x314>)
 800234e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002350:	e011      	b.n	8002376 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002352:	f7ff fc0d 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8002356:	0003      	movs	r3, r0
 8002358:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800235a:	e00c      	b.n	8002376 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800235c:	2380      	movs	r3, #128	@ 0x80
 800235e:	021b      	lsls	r3, r3, #8
 8002360:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002362:	e008      	b.n	8002376 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002368:	231a      	movs	r3, #26
 800236a:	2220      	movs	r2, #32
 800236c:	189b      	adds	r3, r3, r2
 800236e:	19db      	adds	r3, r3, r7
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
        break;
 8002374:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002378:	2b00      	cmp	r3, #0
 800237a:	d100      	bne.n	800237e <UART_SetConfig+0x2ae>
 800237c:	e14b      	b.n	8002616 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002382:	4b19      	ldr	r3, [pc, #100]	@ (80023e8 <UART_SetConfig+0x318>)
 8002384:	0052      	lsls	r2, r2, #1
 8002386:	5ad3      	ldrh	r3, [r2, r3]
 8002388:	0019      	movs	r1, r3
 800238a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800238c:	f7fd feba 	bl	8000104 <__udivsi3>
 8002390:	0003      	movs	r3, r0
 8002392:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	0013      	movs	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	189b      	adds	r3, r3, r2
 800239e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d305      	bcc.n	80023b0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80023aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d91d      	bls.n	80023ec <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80023b0:	231a      	movs	r3, #26
 80023b2:	2220      	movs	r2, #32
 80023b4:	189b      	adds	r3, r3, r2
 80023b6:	19db      	adds	r3, r3, r7
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
 80023bc:	e12b      	b.n	8002616 <UART_SetConfig+0x546>
 80023be:	46c0      	nop			@ (mov r8, r8)
 80023c0:	cfff69f3 	.word	0xcfff69f3
 80023c4:	ffffcfff 	.word	0xffffcfff
 80023c8:	40008000 	.word	0x40008000
 80023cc:	11fff4ff 	.word	0x11fff4ff
 80023d0:	40013800 	.word	0x40013800
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40004400 	.word	0x40004400
 80023dc:	40004800 	.word	0x40004800
 80023e0:	40004c00 	.word	0x40004c00
 80023e4:	00f42400 	.word	0x00f42400
 80023e8:	0800382c 	.word	0x0800382c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ee:	61bb      	str	r3, [r7, #24]
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023f8:	4b92      	ldr	r3, [pc, #584]	@ (8002644 <UART_SetConfig+0x574>)
 80023fa:	0052      	lsls	r2, r2, #1
 80023fc:	5ad3      	ldrh	r3, [r2, r3]
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	69b8      	ldr	r0, [r7, #24]
 800240a:	69f9      	ldr	r1, [r7, #28]
 800240c:	f7fd fff0 	bl	80003f0 <__aeabi_uldivmod>
 8002410:	0002      	movs	r2, r0
 8002412:	000b      	movs	r3, r1
 8002414:	0e11      	lsrs	r1, r2, #24
 8002416:	021d      	lsls	r5, r3, #8
 8002418:	430d      	orrs	r5, r1
 800241a:	0214      	lsls	r4, r2, #8
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68b8      	ldr	r0, [r7, #8]
 800242a:	68f9      	ldr	r1, [r7, #12]
 800242c:	1900      	adds	r0, r0, r4
 800242e:	4169      	adcs	r1, r5
 8002430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f7fd ffd7 	bl	80003f0 <__aeabi_uldivmod>
 8002442:	0002      	movs	r2, r0
 8002444:	000b      	movs	r3, r1
 8002446:	0013      	movs	r3, r2
 8002448:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800244a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800244c:	23c0      	movs	r3, #192	@ 0xc0
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	429a      	cmp	r2, r3
 8002452:	d309      	bcc.n	8002468 <UART_SetConfig+0x398>
 8002454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002456:	2380      	movs	r3, #128	@ 0x80
 8002458:	035b      	lsls	r3, r3, #13
 800245a:	429a      	cmp	r2, r3
 800245c:	d204      	bcs.n	8002468 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	e0d6      	b.n	8002616 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002468:	231a      	movs	r3, #26
 800246a:	2220      	movs	r2, #32
 800246c:	189b      	adds	r3, r3, r2
 800246e:	19db      	adds	r3, r3, r7
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
 8002474:	e0cf      	b.n	8002616 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	69da      	ldr	r2, [r3, #28]
 800247a:	2380      	movs	r3, #128	@ 0x80
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	429a      	cmp	r2, r3
 8002480:	d000      	beq.n	8002484 <UART_SetConfig+0x3b4>
 8002482:	e070      	b.n	8002566 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002484:	231b      	movs	r3, #27
 8002486:	2220      	movs	r2, #32
 8002488:	189b      	adds	r3, r3, r2
 800248a:	19db      	adds	r3, r3, r7
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b08      	cmp	r3, #8
 8002490:	d015      	beq.n	80024be <UART_SetConfig+0x3ee>
 8002492:	dc18      	bgt.n	80024c6 <UART_SetConfig+0x3f6>
 8002494:	2b04      	cmp	r3, #4
 8002496:	d00d      	beq.n	80024b4 <UART_SetConfig+0x3e4>
 8002498:	dc15      	bgt.n	80024c6 <UART_SetConfig+0x3f6>
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <UART_SetConfig+0x3d4>
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d005      	beq.n	80024ae <UART_SetConfig+0x3de>
 80024a2:	e010      	b.n	80024c6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024a4:	f7ff fbf0 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 80024a8:	0003      	movs	r3, r0
 80024aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80024ac:	e014      	b.n	80024d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024ae:	4b66      	ldr	r3, [pc, #408]	@ (8002648 <UART_SetConfig+0x578>)
 80024b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80024b2:	e011      	b.n	80024d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024b4:	f7ff fb5c 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 80024b8:	0003      	movs	r3, r0
 80024ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80024bc:	e00c      	b.n	80024d8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024be:	2380      	movs	r3, #128	@ 0x80
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80024c4:	e008      	b.n	80024d8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80024ca:	231a      	movs	r3, #26
 80024cc:	2220      	movs	r2, #32
 80024ce:	189b      	adds	r3, r3, r2
 80024d0:	19db      	adds	r3, r3, r7
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
        break;
 80024d6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80024d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d100      	bne.n	80024e0 <UART_SetConfig+0x410>
 80024de:	e09a      	b.n	8002616 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024e4:	4b57      	ldr	r3, [pc, #348]	@ (8002644 <UART_SetConfig+0x574>)
 80024e6:	0052      	lsls	r2, r2, #1
 80024e8:	5ad3      	ldrh	r3, [r2, r3]
 80024ea:	0019      	movs	r1, r3
 80024ec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80024ee:	f7fd fe09 	bl	8000104 <__udivsi3>
 80024f2:	0003      	movs	r3, r0
 80024f4:	005a      	lsls	r2, r3, #1
 80024f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	085b      	lsrs	r3, r3, #1
 80024fc:	18d2      	adds	r2, r2, r3
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	0019      	movs	r1, r3
 8002504:	0010      	movs	r0, r2
 8002506:	f7fd fdfd 	bl	8000104 <__udivsi3>
 800250a:	0003      	movs	r3, r0
 800250c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800250e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002510:	2b0f      	cmp	r3, #15
 8002512:	d921      	bls.n	8002558 <UART_SetConfig+0x488>
 8002514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002516:	2380      	movs	r3, #128	@ 0x80
 8002518:	025b      	lsls	r3, r3, #9
 800251a:	429a      	cmp	r2, r3
 800251c:	d21c      	bcs.n	8002558 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800251e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002520:	b29a      	uxth	r2, r3
 8002522:	200e      	movs	r0, #14
 8002524:	2420      	movs	r4, #32
 8002526:	1903      	adds	r3, r0, r4
 8002528:	19db      	adds	r3, r3, r7
 800252a:	210f      	movs	r1, #15
 800252c:	438a      	bics	r2, r1
 800252e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	b29b      	uxth	r3, r3
 8002536:	2207      	movs	r2, #7
 8002538:	4013      	ands	r3, r2
 800253a:	b299      	uxth	r1, r3
 800253c:	1903      	adds	r3, r0, r4
 800253e:	19db      	adds	r3, r3, r7
 8002540:	1902      	adds	r2, r0, r4
 8002542:	19d2      	adds	r2, r2, r7
 8002544:	8812      	ldrh	r2, [r2, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	1902      	adds	r2, r0, r4
 8002550:	19d2      	adds	r2, r2, r7
 8002552:	8812      	ldrh	r2, [r2, #0]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	e05e      	b.n	8002616 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002558:	231a      	movs	r3, #26
 800255a:	2220      	movs	r2, #32
 800255c:	189b      	adds	r3, r3, r2
 800255e:	19db      	adds	r3, r3, r7
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
 8002564:	e057      	b.n	8002616 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002566:	231b      	movs	r3, #27
 8002568:	2220      	movs	r2, #32
 800256a:	189b      	adds	r3, r3, r2
 800256c:	19db      	adds	r3, r3, r7
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b08      	cmp	r3, #8
 8002572:	d015      	beq.n	80025a0 <UART_SetConfig+0x4d0>
 8002574:	dc18      	bgt.n	80025a8 <UART_SetConfig+0x4d8>
 8002576:	2b04      	cmp	r3, #4
 8002578:	d00d      	beq.n	8002596 <UART_SetConfig+0x4c6>
 800257a:	dc15      	bgt.n	80025a8 <UART_SetConfig+0x4d8>
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <UART_SetConfig+0x4b6>
 8002580:	2b02      	cmp	r3, #2
 8002582:	d005      	beq.n	8002590 <UART_SetConfig+0x4c0>
 8002584:	e010      	b.n	80025a8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002586:	f7ff fb7f 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 800258a:	0003      	movs	r3, r0
 800258c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800258e:	e014      	b.n	80025ba <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002590:	4b2d      	ldr	r3, [pc, #180]	@ (8002648 <UART_SetConfig+0x578>)
 8002592:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002594:	e011      	b.n	80025ba <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002596:	f7ff faeb 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 800259a:	0003      	movs	r3, r0
 800259c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800259e:	e00c      	b.n	80025ba <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025a0:	2380      	movs	r3, #128	@ 0x80
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80025a6:	e008      	b.n	80025ba <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80025ac:	231a      	movs	r3, #26
 80025ae:	2220      	movs	r2, #32
 80025b0:	189b      	adds	r3, r3, r2
 80025b2:	19db      	adds	r3, r3, r7
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
        break;
 80025b8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80025ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d02a      	beq.n	8002616 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002644 <UART_SetConfig+0x574>)
 80025c6:	0052      	lsls	r2, r2, #1
 80025c8:	5ad3      	ldrh	r3, [r2, r3]
 80025ca:	0019      	movs	r1, r3
 80025cc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80025ce:	f7fd fd99 	bl	8000104 <__udivsi3>
 80025d2:	0003      	movs	r3, r0
 80025d4:	001a      	movs	r2, r3
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	085b      	lsrs	r3, r3, #1
 80025dc:	18d2      	adds	r2, r2, r3
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	0019      	movs	r1, r3
 80025e4:	0010      	movs	r0, r2
 80025e6:	f7fd fd8d 	bl	8000104 <__udivsi3>
 80025ea:	0003      	movs	r3, r0
 80025ec:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f0:	2b0f      	cmp	r3, #15
 80025f2:	d90a      	bls.n	800260a <UART_SetConfig+0x53a>
 80025f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025f6:	2380      	movs	r3, #128	@ 0x80
 80025f8:	025b      	lsls	r3, r3, #9
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d205      	bcs.n	800260a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80025fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002600:	b29a      	uxth	r2, r3
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60da      	str	r2, [r3, #12]
 8002608:	e005      	b.n	8002616 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800260a:	231a      	movs	r3, #26
 800260c:	2220      	movs	r2, #32
 800260e:	189b      	adds	r3, r3, r2
 8002610:	19db      	adds	r3, r3, r7
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002618:	226a      	movs	r2, #106	@ 0x6a
 800261a:	2101      	movs	r1, #1
 800261c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	2268      	movs	r2, #104	@ 0x68
 8002622:	2101      	movs	r1, #1
 8002624:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	2200      	movs	r2, #0
 800262a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	2200      	movs	r2, #0
 8002630:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002632:	231a      	movs	r3, #26
 8002634:	2220      	movs	r2, #32
 8002636:	189b      	adds	r3, r3, r2
 8002638:	19db      	adds	r3, r3, r7
 800263a:	781b      	ldrb	r3, [r3, #0]
}
 800263c:	0018      	movs	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	b010      	add	sp, #64	@ 0x40
 8002642:	bdb0      	pop	{r4, r5, r7, pc}
 8002644:	0800382c 	.word	0x0800382c
 8002648:	00f42400 	.word	0x00f42400

0800264c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002658:	2208      	movs	r2, #8
 800265a:	4013      	ands	r3, r2
 800265c:	d00b      	beq.n	8002676 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a4a      	ldr	r2, [pc, #296]	@ (8002790 <UART_AdvFeatureConfig+0x144>)
 8002666:	4013      	ands	r3, r2
 8002668:	0019      	movs	r1, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267a:	2201      	movs	r2, #1
 800267c:	4013      	ands	r3, r2
 800267e:	d00b      	beq.n	8002698 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4a43      	ldr	r2, [pc, #268]	@ (8002794 <UART_AdvFeatureConfig+0x148>)
 8002688:	4013      	ands	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	2202      	movs	r2, #2
 800269e:	4013      	ands	r3, r2
 80026a0:	d00b      	beq.n	80026ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a3b      	ldr	r2, [pc, #236]	@ (8002798 <UART_AdvFeatureConfig+0x14c>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	0019      	movs	r1, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026be:	2204      	movs	r2, #4
 80026c0:	4013      	ands	r3, r2
 80026c2:	d00b      	beq.n	80026dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4a34      	ldr	r2, [pc, #208]	@ (800279c <UART_AdvFeatureConfig+0x150>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	0019      	movs	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e0:	2210      	movs	r2, #16
 80026e2:	4013      	ands	r3, r2
 80026e4:	d00b      	beq.n	80026fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4a2c      	ldr	r2, [pc, #176]	@ (80027a0 <UART_AdvFeatureConfig+0x154>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002702:	2220      	movs	r2, #32
 8002704:	4013      	ands	r3, r2
 8002706:	d00b      	beq.n	8002720 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	4a25      	ldr	r2, [pc, #148]	@ (80027a4 <UART_AdvFeatureConfig+0x158>)
 8002710:	4013      	ands	r3, r2
 8002712:	0019      	movs	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002724:	2240      	movs	r2, #64	@ 0x40
 8002726:	4013      	ands	r3, r2
 8002728:	d01d      	beq.n	8002766 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4a1d      	ldr	r2, [pc, #116]	@ (80027a8 <UART_AdvFeatureConfig+0x15c>)
 8002732:	4013      	ands	r3, r2
 8002734:	0019      	movs	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002746:	2380      	movs	r3, #128	@ 0x80
 8002748:	035b      	lsls	r3, r3, #13
 800274a:	429a      	cmp	r2, r3
 800274c:	d10b      	bne.n	8002766 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a15      	ldr	r2, [pc, #84]	@ (80027ac <UART_AdvFeatureConfig+0x160>)
 8002756:	4013      	ands	r3, r2
 8002758:	0019      	movs	r1, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276a:	2280      	movs	r2, #128	@ 0x80
 800276c:	4013      	ands	r3, r2
 800276e:	d00b      	beq.n	8002788 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4a0e      	ldr	r2, [pc, #56]	@ (80027b0 <UART_AdvFeatureConfig+0x164>)
 8002778:	4013      	ands	r3, r2
 800277a:	0019      	movs	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	605a      	str	r2, [r3, #4]
  }
}
 8002788:	46c0      	nop			@ (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	b002      	add	sp, #8
 800278e:	bd80      	pop	{r7, pc}
 8002790:	ffff7fff 	.word	0xffff7fff
 8002794:	fffdffff 	.word	0xfffdffff
 8002798:	fffeffff 	.word	0xfffeffff
 800279c:	fffbffff 	.word	0xfffbffff
 80027a0:	ffffefff 	.word	0xffffefff
 80027a4:	ffffdfff 	.word	0xffffdfff
 80027a8:	ffefffff 	.word	0xffefffff
 80027ac:	ff9fffff 	.word	0xff9fffff
 80027b0:	fff7ffff 	.word	0xfff7ffff

080027b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b092      	sub	sp, #72	@ 0x48
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2290      	movs	r2, #144	@ 0x90
 80027c0:	2100      	movs	r1, #0
 80027c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027c4:	f7fe fae6 	bl	8000d94 <HAL_GetTick>
 80027c8:	0003      	movs	r3, r0
 80027ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2208      	movs	r2, #8
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d12d      	bne.n	8002836 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027dc:	2280      	movs	r2, #128	@ 0x80
 80027de:	0391      	lsls	r1, r2, #14
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	4a47      	ldr	r2, [pc, #284]	@ (8002900 <UART_CheckIdleState+0x14c>)
 80027e4:	9200      	str	r2, [sp, #0]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f000 f88e 	bl	8002908 <UART_WaitOnFlagUntilTimeout>
 80027ec:	1e03      	subs	r3, r0, #0
 80027ee:	d022      	beq.n	8002836 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027f0:	f3ef 8310 	mrs	r3, PRIMASK
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80027f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80027f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027fa:	2301      	movs	r3, #1
 80027fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002800:	f383 8810 	msr	PRIMASK, r3
}
 8002804:	46c0      	nop			@ (mov r8, r8)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2180      	movs	r1, #128	@ 0x80
 8002812:	438a      	bics	r2, r1
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281c:	f383 8810 	msr	PRIMASK, r3
}
 8002820:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2288      	movs	r2, #136	@ 0x88
 8002826:	2120      	movs	r1, #32
 8002828:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2284      	movs	r2, #132	@ 0x84
 800282e:	2100      	movs	r1, #0
 8002830:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e060      	b.n	80028f8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2204      	movs	r2, #4
 800283e:	4013      	ands	r3, r2
 8002840:	2b04      	cmp	r3, #4
 8002842:	d146      	bne.n	80028d2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002846:	2280      	movs	r2, #128	@ 0x80
 8002848:	03d1      	lsls	r1, r2, #15
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	4a2c      	ldr	r2, [pc, #176]	@ (8002900 <UART_CheckIdleState+0x14c>)
 800284e:	9200      	str	r2, [sp, #0]
 8002850:	2200      	movs	r2, #0
 8002852:	f000 f859 	bl	8002908 <UART_WaitOnFlagUntilTimeout>
 8002856:	1e03      	subs	r3, r0, #0
 8002858:	d03b      	beq.n	80028d2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800285a:	f3ef 8310 	mrs	r3, PRIMASK
 800285e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002860:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002862:	637b      	str	r3, [r7, #52]	@ 0x34
 8002864:	2301      	movs	r3, #1
 8002866:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f383 8810 	msr	PRIMASK, r3
}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4922      	ldr	r1, [pc, #136]	@ (8002904 <UART_CheckIdleState+0x150>)
 800287c:	400a      	ands	r2, r1
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002882:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f383 8810 	msr	PRIMASK, r3
}
 800288a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800288c:	f3ef 8310 	mrs	r3, PRIMASK
 8002890:	61bb      	str	r3, [r7, #24]
  return(result);
 8002892:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002894:	633b      	str	r3, [r7, #48]	@ 0x30
 8002896:	2301      	movs	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f383 8810 	msr	PRIMASK, r3
}
 80028a0:	46c0      	nop			@ (mov r8, r8)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2101      	movs	r1, #1
 80028ae:	438a      	bics	r2, r1
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	f383 8810 	msr	PRIMASK, r3
}
 80028bc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	228c      	movs	r2, #140	@ 0x8c
 80028c2:	2120      	movs	r1, #32
 80028c4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2284      	movs	r2, #132	@ 0x84
 80028ca:	2100      	movs	r1, #0
 80028cc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e012      	b.n	80028f8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2288      	movs	r2, #136	@ 0x88
 80028d6:	2120      	movs	r1, #32
 80028d8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	228c      	movs	r2, #140	@ 0x8c
 80028de:	2120      	movs	r1, #32
 80028e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2284      	movs	r2, #132	@ 0x84
 80028f2:	2100      	movs	r1, #0
 80028f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b010      	add	sp, #64	@ 0x40
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	01ffffff 	.word	0x01ffffff
 8002904:	fffffedf 	.word	0xfffffedf

08002908 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	1dfb      	adds	r3, r7, #7
 8002916:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002918:	e051      	b.n	80029be <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	3301      	adds	r3, #1
 800291e:	d04e      	beq.n	80029be <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002920:	f7fe fa38 	bl	8000d94 <HAL_GetTick>
 8002924:	0002      	movs	r2, r0
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	429a      	cmp	r2, r3
 800292e:	d302      	bcc.n	8002936 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e051      	b.n	80029de <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2204      	movs	r2, #4
 8002942:	4013      	ands	r3, r2
 8002944:	d03b      	beq.n	80029be <UART_WaitOnFlagUntilTimeout+0xb6>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b80      	cmp	r3, #128	@ 0x80
 800294a:	d038      	beq.n	80029be <UART_WaitOnFlagUntilTimeout+0xb6>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b40      	cmp	r3, #64	@ 0x40
 8002950:	d035      	beq.n	80029be <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	2208      	movs	r2, #8
 800295a:	4013      	ands	r3, r2
 800295c:	2b08      	cmp	r3, #8
 800295e:	d111      	bne.n	8002984 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2208      	movs	r2, #8
 8002966:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	0018      	movs	r0, r3
 800296c:	f000 f83c 	bl	80029e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2290      	movs	r2, #144	@ 0x90
 8002974:	2108      	movs	r1, #8
 8002976:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2284      	movs	r2, #132	@ 0x84
 800297c:	2100      	movs	r1, #0
 800297e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e02c      	b.n	80029de <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69da      	ldr	r2, [r3, #28]
 800298a:	2380      	movs	r3, #128	@ 0x80
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	401a      	ands	r2, r3
 8002990:	2380      	movs	r3, #128	@ 0x80
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	429a      	cmp	r2, r3
 8002996:	d112      	bne.n	80029be <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2280      	movs	r2, #128	@ 0x80
 800299e:	0112      	lsls	r2, r2, #4
 80029a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	0018      	movs	r0, r3
 80029a6:	f000 f81f 	bl	80029e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2290      	movs	r2, #144	@ 0x90
 80029ae:	2120      	movs	r1, #32
 80029b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2284      	movs	r2, #132	@ 0x84
 80029b6:	2100      	movs	r1, #0
 80029b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e00f      	b.n	80029de <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	4013      	ands	r3, r2
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	425a      	negs	r2, r3
 80029ce:	4153      	adcs	r3, r2
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	001a      	movs	r2, r3
 80029d4:	1dfb      	adds	r3, r7, #7
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d09e      	beq.n	800291a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	0018      	movs	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b004      	add	sp, #16
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08e      	sub	sp, #56	@ 0x38
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029f0:	f3ef 8310 	mrs	r3, PRIMASK
 80029f4:	617b      	str	r3, [r7, #20]
  return(result);
 80029f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80029f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80029fa:	2301      	movs	r3, #1
 80029fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	f383 8810 	msr	PRIMASK, r3
}
 8002a04:	46c0      	nop			@ (mov r8, r8)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4926      	ldr	r1, [pc, #152]	@ (8002aac <UART_EndRxTransfer+0xc4>)
 8002a12:	400a      	ands	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	f383 8810 	msr	PRIMASK, r3
}
 8002a20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a22:	f3ef 8310 	mrs	r3, PRIMASK
 8002a26:	623b      	str	r3, [r7, #32]
  return(result);
 8002a28:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002a2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	f383 8810 	msr	PRIMASK, r3
}
 8002a36:	46c0      	nop			@ (mov r8, r8)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	491b      	ldr	r1, [pc, #108]	@ (8002ab0 <UART_EndRxTransfer+0xc8>)
 8002a44:	400a      	ands	r2, r1
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4e:	f383 8810 	msr	PRIMASK, r3
}
 8002a52:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d118      	bne.n	8002a8e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a60:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a62:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a66:	2301      	movs	r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f383 8810 	msr	PRIMASK, r3
}
 8002a70:	46c0      	nop			@ (mov r8, r8)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2110      	movs	r1, #16
 8002a7e:	438a      	bics	r2, r1
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f383 8810 	msr	PRIMASK, r3
}
 8002a8c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	228c      	movs	r2, #140	@ 0x8c
 8002a92:	2120      	movs	r1, #32
 8002a94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002aa2:	46c0      	nop			@ (mov r8, r8)
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b00e      	add	sp, #56	@ 0x38
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	fffffedf 	.word	0xfffffedf
 8002ab0:	effffffe 	.word	0xeffffffe

08002ab4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2284      	movs	r2, #132	@ 0x84
 8002ac0:	5c9b      	ldrb	r3, [r3, r2]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_UARTEx_DisableFifoMode+0x16>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e027      	b.n	8002b1a <HAL_UARTEx_DisableFifoMode+0x66>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2284      	movs	r2, #132	@ 0x84
 8002ace:	2101      	movs	r1, #1
 8002ad0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2288      	movs	r2, #136	@ 0x88
 8002ad6:	2124      	movs	r1, #36	@ 0x24
 8002ad8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2101      	movs	r1, #1
 8002aee:	438a      	bics	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4a0b      	ldr	r2, [pc, #44]	@ (8002b24 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2288      	movs	r2, #136	@ 0x88
 8002b0c:	2120      	movs	r1, #32
 8002b0e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2284      	movs	r2, #132	@ 0x84
 8002b14:	2100      	movs	r1, #0
 8002b16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b004      	add	sp, #16
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	dfffffff 	.word	0xdfffffff

08002b28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2284      	movs	r2, #132	@ 0x84
 8002b36:	5c9b      	ldrb	r3, [r3, r2]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e02e      	b.n	8002b9e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2284      	movs	r2, #132	@ 0x84
 8002b44:	2101      	movs	r1, #1
 8002b46:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2288      	movs	r2, #136	@ 0x88
 8002b4c:	2124      	movs	r1, #36	@ 0x24
 8002b4e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2101      	movs	r1, #1
 8002b64:	438a      	bics	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	08d9      	lsrs	r1, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f000 f854 	bl	8002c2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2288      	movs	r2, #136	@ 0x88
 8002b90:	2120      	movs	r1, #32
 8002b92:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2284      	movs	r2, #132	@ 0x84
 8002b98:	2100      	movs	r1, #0
 8002b9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b004      	add	sp, #16
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2284      	movs	r2, #132	@ 0x84
 8002bb6:	5c9b      	ldrb	r3, [r3, r2]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e02f      	b.n	8002c20 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2284      	movs	r2, #132	@ 0x84
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2288      	movs	r2, #136	@ 0x88
 8002bcc:	2124      	movs	r1, #36	@ 0x24
 8002bce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2101      	movs	r1, #1
 8002be4:	438a      	bics	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	4a0e      	ldr	r2, [pc, #56]	@ (8002c28 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	0018      	movs	r0, r3
 8002c02:	f000 f813 	bl	8002c2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2288      	movs	r2, #136	@ 0x88
 8002c12:	2120      	movs	r1, #32
 8002c14:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2284      	movs	r2, #132	@ 0x84
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	0018      	movs	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b004      	add	sp, #16
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	f1ffffff 	.word	0xf1ffffff

08002c2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d108      	bne.n	8002c4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	226a      	movs	r2, #106	@ 0x6a
 8002c40:	2101      	movs	r1, #1
 8002c42:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2268      	movs	r2, #104	@ 0x68
 8002c48:	2101      	movs	r1, #1
 8002c4a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002c4c:	e043      	b.n	8002cd6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002c4e:	260f      	movs	r6, #15
 8002c50:	19bb      	adds	r3, r7, r6
 8002c52:	2208      	movs	r2, #8
 8002c54:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002c56:	200e      	movs	r0, #14
 8002c58:	183b      	adds	r3, r7, r0
 8002c5a:	2208      	movs	r2, #8
 8002c5c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	0e5b      	lsrs	r3, r3, #25
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	240d      	movs	r4, #13
 8002c6a:	193b      	adds	r3, r7, r4
 8002c6c:	2107      	movs	r1, #7
 8002c6e:	400a      	ands	r2, r1
 8002c70:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	0f5b      	lsrs	r3, r3, #29
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	250c      	movs	r5, #12
 8002c7e:	197b      	adds	r3, r7, r5
 8002c80:	2107      	movs	r1, #7
 8002c82:	400a      	ands	r2, r1
 8002c84:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002c86:	183b      	adds	r3, r7, r0
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	197a      	adds	r2, r7, r5
 8002c8c:	7812      	ldrb	r2, [r2, #0]
 8002c8e:	4914      	ldr	r1, [pc, #80]	@ (8002ce0 <UARTEx_SetNbDataToProcess+0xb4>)
 8002c90:	5c8a      	ldrb	r2, [r1, r2]
 8002c92:	435a      	muls	r2, r3
 8002c94:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002c96:	197b      	adds	r3, r7, r5
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	4a12      	ldr	r2, [pc, #72]	@ (8002ce4 <UARTEx_SetNbDataToProcess+0xb8>)
 8002c9c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002c9e:	0019      	movs	r1, r3
 8002ca0:	f7fd faba 	bl	8000218 <__divsi3>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	b299      	uxth	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	226a      	movs	r2, #106	@ 0x6a
 8002cac:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002cae:	19bb      	adds	r3, r7, r6
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	193a      	adds	r2, r7, r4
 8002cb4:	7812      	ldrb	r2, [r2, #0]
 8002cb6:	490a      	ldr	r1, [pc, #40]	@ (8002ce0 <UARTEx_SetNbDataToProcess+0xb4>)
 8002cb8:	5c8a      	ldrb	r2, [r1, r2]
 8002cba:	435a      	muls	r2, r3
 8002cbc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002cbe:	193b      	adds	r3, r7, r4
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	4a08      	ldr	r2, [pc, #32]	@ (8002ce4 <UARTEx_SetNbDataToProcess+0xb8>)
 8002cc4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	f7fd faa6 	bl	8000218 <__divsi3>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	b299      	uxth	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2268      	movs	r2, #104	@ 0x68
 8002cd4:	5299      	strh	r1, [r3, r2]
}
 8002cd6:	46c0      	nop			@ (mov r8, r8)
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b005      	add	sp, #20
 8002cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cde:	46c0      	nop			@ (mov r8, r8)
 8002ce0:	08003844 	.word	0x08003844
 8002ce4:	0800384c 	.word	0x0800384c

08002ce8 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e03f      	b.n	8002d7a <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2259      	movs	r2, #89	@ 0x59
 8002cfe:	5c9b      	ldrb	r3, [r3, r2]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d107      	bne.n	8002d16 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2258      	movs	r2, #88	@ 0x58
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7fd fe95 	bl	8000a40 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2259      	movs	r2, #89	@ 0x59
 8002d1a:	2102      	movs	r1, #2
 8002d1c:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2101      	movs	r1, #1
 8002d2a:	438a      	bics	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	0018      	movs	r0, r3
 8002d32:	f000 f91d 	bl	8002f70 <USART_SetConfig>
 8002d36:	0003      	movs	r3, r0
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e01c      	b.n	8002d7a <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	490e      	ldr	r1, [pc, #56]	@ (8002d84 <HAL_USART_Init+0x9c>)
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	212a      	movs	r1, #42	@ 0x2a
 8002d5c:	438a      	bics	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	0018      	movs	r0, r3
 8002d74:	f000 fb98 	bl	80034a8 <USART_CheckIdleState>
 8002d78:	0003      	movs	r3, r0
}
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b002      	add	sp, #8
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			@ (mov r8, r8)
 8002d84:	ffffbfff 	.word	0xffffbfff

08002d88 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	@ 0x28
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	1dbb      	adds	r3, r7, #6
 8002d96:	801a      	strh	r2, [r3, #0]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2259      	movs	r2, #89	@ 0x59
 8002d9c:	5c9b      	ldrb	r3, [r3, r2]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d000      	beq.n	8002da6 <HAL_USART_Transmit+0x1e>
 8002da4:	e0a9      	b.n	8002efa <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_USART_Transmit+0x2c>
 8002dac:	1dbb      	adds	r3, r7, #6
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0a1      	b.n	8002efc <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	2380      	movs	r3, #128	@ 0x80
 8002dbe:	015b      	lsls	r3, r3, #5
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d109      	bne.n	8002dd8 <HAL_USART_Transmit+0x50>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d105      	bne.n	8002dd8 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d001      	beq.n	8002dd8 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e091      	b.n	8002efc <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2258      	movs	r2, #88	@ 0x58
 8002ddc:	5c9b      	ldrb	r3, [r3, r2]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_USART_Transmit+0x5e>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e08a      	b.n	8002efc <HAL_USART_Transmit+0x174>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2258      	movs	r2, #88	@ 0x58
 8002dea:	2101      	movs	r1, #1
 8002dec:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	65da      	str	r2, [r3, #92]	@ 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2259      	movs	r2, #89	@ 0x59
 8002df8:	2112      	movs	r1, #18
 8002dfa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dfc:	f7fd ffca 	bl	8000d94 <HAL_GetTick>
 8002e00:	0003      	movs	r3, r0
 8002e02:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1dba      	adds	r2, r7, #6
 8002e08:	8812      	ldrh	r2, [r2, #0]
 8002e0a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    husart->TxXferCount = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1dba      	adds	r2, r7, #6
 8002e10:	8812      	ldrh	r2, [r2, #0]
 8002e12:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	2380      	movs	r3, #128	@ 0x80
 8002e1a:	015b      	lsls	r3, r3, #5
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d108      	bne.n	8002e32 <HAL_USART_Transmit+0xaa>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d104      	bne.n	8002e32 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	e003      	b.n	8002e3a <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8002e3a:	e02a      	b.n	8002e92 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	0013      	movs	r3, r2
 8002e46:	2200      	movs	r2, #0
 8002e48:	2180      	movs	r1, #128	@ 0x80
 8002e4a:	f000 f85b 	bl	8002f04 <USART_WaitOnFlagUntilTimeout>
 8002e4e:	1e03      	subs	r3, r0, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e052      	b.n	8002efc <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10b      	bne.n	8002e74 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	001a      	movs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	05d2      	lsls	r2, r2, #23
 8002e68:	0dd2      	lsrs	r2, r2, #23
 8002e6a:	629a      	str	r2, [r3, #40]	@ 0x28
        ptxdata16bits++;
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	3302      	adds	r3, #2
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	e007      	b.n	8002e84 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	781a      	ldrb	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	629a      	str	r2, [r3, #40]	@ 0x28
        ptxdata8bits++;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3301      	adds	r3, #1
 8002e82:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (husart->TxXferCount > 0U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1cf      	bne.n	8002e3c <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	0013      	movs	r3, r2
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2140      	movs	r1, #64	@ 0x40
 8002eaa:	f000 f82b 	bl	8002f04 <USART_WaitOnFlagUntilTimeout>
 8002eae:	1e03      	subs	r3, r0, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e022      	b.n	8002efc <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2240      	movs	r2, #64	@ 0x40
 8002ebc:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2208      	movs	r2, #8
 8002ec4:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699a      	ldr	r2, [r3, #24]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2108      	movs	r1, #8
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699a      	ldr	r2, [r3, #24]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2110      	movs	r1, #16
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2259      	movs	r2, #89	@ 0x59
 8002eea:	2101      	movs	r1, #1
 8002eec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2258      	movs	r2, #88	@ 0x58
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e000      	b.n	8002efc <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002efa:	2302      	movs	r3, #2
  }
}
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b008      	add	sp, #32
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	1dfb      	adds	r3, r7, #7
 8002f12:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002f14:	e017      	b.n	8002f46 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	d014      	beq.n	8002f46 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1c:	f7fd ff3a 	bl	8000d94 <HAL_GetTick>
 8002f20:	0002      	movs	r2, r0
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d302      	bcc.n	8002f32 <USART_WaitOnFlagUntilTimeout+0x2e>
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2259      	movs	r2, #89	@ 0x59
 8002f36:	2101      	movs	r1, #1
 8002f38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2258      	movs	r2, #88	@ 0x58
 8002f3e:	2100      	movs	r1, #0
 8002f40:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e00f      	b.n	8002f66 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	425a      	negs	r2, r3
 8002f56:	4153      	adcs	r3, r2
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	001a      	movs	r2, r3
 8002f5c:	1dfb      	adds	r3, r7, #7
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d0d8      	beq.n	8002f16 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	0018      	movs	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b004      	add	sp, #16
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8002f78:	231e      	movs	r3, #30
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	2280      	movs	r2, #128	@ 0x80
 8002f96:	0212      	lsls	r2, r2, #8
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4ab1      	ldr	r2, [pc, #708]	@ (8003268 <USART_SetConfig+0x2f8>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8002fb2:	2380      	movs	r3, #128	@ 0x80
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4aa2      	ldr	r2, [pc, #648]	@ (800326c <USART_SetConfig+0x2fc>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff8:	220f      	movs	r2, #15
 8002ffa:	4393      	bics	r3, r2
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a98      	ldr	r2, [pc, #608]	@ (8003270 <USART_SetConfig+0x300>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d127      	bne.n	8003064 <USART_SetConfig+0xf4>
 8003014:	4b97      	ldr	r3, [pc, #604]	@ (8003274 <USART_SetConfig+0x304>)
 8003016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003018:	2203      	movs	r2, #3
 800301a:	4013      	ands	r3, r2
 800301c:	2b03      	cmp	r3, #3
 800301e:	d017      	beq.n	8003050 <USART_SetConfig+0xe0>
 8003020:	d81b      	bhi.n	800305a <USART_SetConfig+0xea>
 8003022:	2b02      	cmp	r3, #2
 8003024:	d00a      	beq.n	800303c <USART_SetConfig+0xcc>
 8003026:	d818      	bhi.n	800305a <USART_SetConfig+0xea>
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <USART_SetConfig+0xc2>
 800302c:	2b01      	cmp	r3, #1
 800302e:	d00a      	beq.n	8003046 <USART_SetConfig+0xd6>
 8003030:	e013      	b.n	800305a <USART_SetConfig+0xea>
 8003032:	231f      	movs	r3, #31
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	e058      	b.n	80030ee <USART_SetConfig+0x17e>
 800303c:	231f      	movs	r3, #31
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	2202      	movs	r2, #2
 8003042:	701a      	strb	r2, [r3, #0]
 8003044:	e053      	b.n	80030ee <USART_SetConfig+0x17e>
 8003046:	231f      	movs	r3, #31
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	2204      	movs	r2, #4
 800304c:	701a      	strb	r2, [r3, #0]
 800304e:	e04e      	b.n	80030ee <USART_SetConfig+0x17e>
 8003050:	231f      	movs	r3, #31
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	2208      	movs	r2, #8
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	e049      	b.n	80030ee <USART_SetConfig+0x17e>
 800305a:	231f      	movs	r3, #31
 800305c:	18fb      	adds	r3, r7, r3
 800305e:	2210      	movs	r2, #16
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	e044      	b.n	80030ee <USART_SetConfig+0x17e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a83      	ldr	r2, [pc, #524]	@ (8003278 <USART_SetConfig+0x308>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d127      	bne.n	80030be <USART_SetConfig+0x14e>
 800306e:	4b81      	ldr	r3, [pc, #516]	@ (8003274 <USART_SetConfig+0x304>)
 8003070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003072:	220c      	movs	r2, #12
 8003074:	4013      	ands	r3, r2
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d017      	beq.n	80030aa <USART_SetConfig+0x13a>
 800307a:	d81b      	bhi.n	80030b4 <USART_SetConfig+0x144>
 800307c:	2b08      	cmp	r3, #8
 800307e:	d00a      	beq.n	8003096 <USART_SetConfig+0x126>
 8003080:	d818      	bhi.n	80030b4 <USART_SetConfig+0x144>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <USART_SetConfig+0x11c>
 8003086:	2b04      	cmp	r3, #4
 8003088:	d00a      	beq.n	80030a0 <USART_SetConfig+0x130>
 800308a:	e013      	b.n	80030b4 <USART_SetConfig+0x144>
 800308c:	231f      	movs	r3, #31
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
 8003094:	e02b      	b.n	80030ee <USART_SetConfig+0x17e>
 8003096:	231f      	movs	r3, #31
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	2202      	movs	r2, #2
 800309c:	701a      	strb	r2, [r3, #0]
 800309e:	e026      	b.n	80030ee <USART_SetConfig+0x17e>
 80030a0:	231f      	movs	r3, #31
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	2204      	movs	r2, #4
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e021      	b.n	80030ee <USART_SetConfig+0x17e>
 80030aa:	231f      	movs	r3, #31
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	2208      	movs	r2, #8
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	e01c      	b.n	80030ee <USART_SetConfig+0x17e>
 80030b4:	231f      	movs	r3, #31
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	2210      	movs	r2, #16
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	e017      	b.n	80030ee <USART_SetConfig+0x17e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a6e      	ldr	r2, [pc, #440]	@ (800327c <USART_SetConfig+0x30c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d104      	bne.n	80030d2 <USART_SetConfig+0x162>
 80030c8:	231f      	movs	r3, #31
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	e00d      	b.n	80030ee <USART_SetConfig+0x17e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a6a      	ldr	r2, [pc, #424]	@ (8003280 <USART_SetConfig+0x310>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d104      	bne.n	80030e6 <USART_SetConfig+0x176>
 80030dc:	231f      	movs	r3, #31
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
 80030e4:	e003      	b.n	80030ee <USART_SetConfig+0x17e>
 80030e6:	231f      	movs	r3, #31
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	2210      	movs	r2, #16
 80030ec:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 80030ee:	231f      	movs	r3, #31
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d100      	bne.n	80030fa <USART_SetConfig+0x18a>
 80030f8:	e139      	b.n	800336e <USART_SetConfig+0x3fe>
 80030fa:	dd00      	ble.n	80030fe <USART_SetConfig+0x18e>
 80030fc:	e195      	b.n	800342a <USART_SetConfig+0x4ba>
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d100      	bne.n	8003104 <USART_SetConfig+0x194>
 8003102:	e0d3      	b.n	80032ac <USART_SetConfig+0x33c>
 8003104:	dd00      	ble.n	8003108 <USART_SetConfig+0x198>
 8003106:	e190      	b.n	800342a <USART_SetConfig+0x4ba>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <USART_SetConfig+0x1a4>
 800310c:	2b02      	cmp	r3, #2
 800310e:	d100      	bne.n	8003112 <USART_SetConfig+0x1a2>
 8003110:	e061      	b.n	80031d6 <USART_SetConfig+0x266>
 8003112:	e18a      	b.n	800342a <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8003114:	f7fe fdb8 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8003118:	0003      	movs	r3, r0
 800311a:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	2b00      	cmp	r3, #0
 8003122:	d044      	beq.n	80031ae <USART_SetConfig+0x23e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	2b01      	cmp	r3, #1
 800312a:	d03e      	beq.n	80031aa <USART_SetConfig+0x23a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	2b02      	cmp	r3, #2
 8003132:	d038      	beq.n	80031a6 <USART_SetConfig+0x236>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003138:	2b03      	cmp	r3, #3
 800313a:	d032      	beq.n	80031a2 <USART_SetConfig+0x232>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	2b04      	cmp	r3, #4
 8003142:	d02c      	beq.n	800319e <USART_SetConfig+0x22e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003148:	2b05      	cmp	r3, #5
 800314a:	d026      	beq.n	800319a <USART_SetConfig+0x22a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003150:	2b06      	cmp	r3, #6
 8003152:	d020      	beq.n	8003196 <USART_SetConfig+0x226>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003158:	2b07      	cmp	r3, #7
 800315a:	d01a      	beq.n	8003192 <USART_SetConfig+0x222>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	2b08      	cmp	r3, #8
 8003162:	d014      	beq.n	800318e <USART_SetConfig+0x21e>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	2b09      	cmp	r3, #9
 800316a:	d00e      	beq.n	800318a <USART_SetConfig+0x21a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	2b0a      	cmp	r3, #10
 8003172:	d008      	beq.n	8003186 <USART_SetConfig+0x216>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	2b0b      	cmp	r3, #11
 800317a:	d102      	bne.n	8003182 <USART_SetConfig+0x212>
 800317c:	2380      	movs	r3, #128	@ 0x80
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	e016      	b.n	80031b0 <USART_SetConfig+0x240>
 8003182:	2301      	movs	r3, #1
 8003184:	e014      	b.n	80031b0 <USART_SetConfig+0x240>
 8003186:	2380      	movs	r3, #128	@ 0x80
 8003188:	e012      	b.n	80031b0 <USART_SetConfig+0x240>
 800318a:	2340      	movs	r3, #64	@ 0x40
 800318c:	e010      	b.n	80031b0 <USART_SetConfig+0x240>
 800318e:	2320      	movs	r3, #32
 8003190:	e00e      	b.n	80031b0 <USART_SetConfig+0x240>
 8003192:	2310      	movs	r3, #16
 8003194:	e00c      	b.n	80031b0 <USART_SetConfig+0x240>
 8003196:	230c      	movs	r3, #12
 8003198:	e00a      	b.n	80031b0 <USART_SetConfig+0x240>
 800319a:	230a      	movs	r3, #10
 800319c:	e008      	b.n	80031b0 <USART_SetConfig+0x240>
 800319e:	2308      	movs	r3, #8
 80031a0:	e006      	b.n	80031b0 <USART_SetConfig+0x240>
 80031a2:	2306      	movs	r3, #6
 80031a4:	e004      	b.n	80031b0 <USART_SetConfig+0x240>
 80031a6:	2304      	movs	r3, #4
 80031a8:	e002      	b.n	80031b0 <USART_SetConfig+0x240>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e000      	b.n	80031b0 <USART_SetConfig+0x240>
 80031ae:	2301      	movs	r3, #1
 80031b0:	0019      	movs	r1, r3
 80031b2:	6938      	ldr	r0, [r7, #16]
 80031b4:	f7fc ffa6 	bl	8000104 <__udivsi3>
 80031b8:	0003      	movs	r3, r0
 80031ba:	005a      	lsls	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	18d2      	adds	r2, r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	0019      	movs	r1, r3
 80031ca:	0010      	movs	r0, r2
 80031cc:	f7fc ff9a 	bl	8000104 <__udivsi3>
 80031d0:	0003      	movs	r3, r0
 80031d2:	61bb      	str	r3, [r7, #24]
      break;
 80031d4:	e12e      	b.n	8003434 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d052      	beq.n	8003284 <USART_SetConfig+0x314>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d03e      	beq.n	8003264 <USART_SetConfig+0x2f4>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d038      	beq.n	8003260 <USART_SetConfig+0x2f0>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d032      	beq.n	800325c <USART_SetConfig+0x2ec>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d02c      	beq.n	8003258 <USART_SetConfig+0x2e8>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	2b05      	cmp	r3, #5
 8003204:	d026      	beq.n	8003254 <USART_SetConfig+0x2e4>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	2b06      	cmp	r3, #6
 800320c:	d020      	beq.n	8003250 <USART_SetConfig+0x2e0>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	2b07      	cmp	r3, #7
 8003214:	d01a      	beq.n	800324c <USART_SetConfig+0x2dc>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	2b08      	cmp	r3, #8
 800321c:	d014      	beq.n	8003248 <USART_SetConfig+0x2d8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003222:	2b09      	cmp	r3, #9
 8003224:	d00e      	beq.n	8003244 <USART_SetConfig+0x2d4>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322a:	2b0a      	cmp	r3, #10
 800322c:	d008      	beq.n	8003240 <USART_SetConfig+0x2d0>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003232:	2b0b      	cmp	r3, #11
 8003234:	d102      	bne.n	800323c <USART_SetConfig+0x2cc>
 8003236:	2380      	movs	r3, #128	@ 0x80
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	e024      	b.n	8003286 <USART_SetConfig+0x316>
 800323c:	2301      	movs	r3, #1
 800323e:	e022      	b.n	8003286 <USART_SetConfig+0x316>
 8003240:	2380      	movs	r3, #128	@ 0x80
 8003242:	e020      	b.n	8003286 <USART_SetConfig+0x316>
 8003244:	2340      	movs	r3, #64	@ 0x40
 8003246:	e01e      	b.n	8003286 <USART_SetConfig+0x316>
 8003248:	2320      	movs	r3, #32
 800324a:	e01c      	b.n	8003286 <USART_SetConfig+0x316>
 800324c:	2310      	movs	r3, #16
 800324e:	e01a      	b.n	8003286 <USART_SetConfig+0x316>
 8003250:	230c      	movs	r3, #12
 8003252:	e018      	b.n	8003286 <USART_SetConfig+0x316>
 8003254:	230a      	movs	r3, #10
 8003256:	e016      	b.n	8003286 <USART_SetConfig+0x316>
 8003258:	2308      	movs	r3, #8
 800325a:	e014      	b.n	8003286 <USART_SetConfig+0x316>
 800325c:	2306      	movs	r3, #6
 800325e:	e012      	b.n	8003286 <USART_SetConfig+0x316>
 8003260:	2304      	movs	r3, #4
 8003262:	e010      	b.n	8003286 <USART_SetConfig+0x316>
 8003264:	2302      	movs	r3, #2
 8003266:	e00e      	b.n	8003286 <USART_SetConfig+0x316>
 8003268:	cfff69f3 	.word	0xcfff69f3
 800326c:	ffffc0f6 	.word	0xffffc0f6
 8003270:	40013800 	.word	0x40013800
 8003274:	40021000 	.word	0x40021000
 8003278:	40004400 	.word	0x40004400
 800327c:	40004800 	.word	0x40004800
 8003280:	40004c00 	.word	0x40004c00
 8003284:	2301      	movs	r3, #1
 8003286:	0019      	movs	r1, r3
 8003288:	4886      	ldr	r0, [pc, #536]	@ (80034a4 <USART_SetConfig+0x534>)
 800328a:	f7fc ff3b 	bl	8000104 <__udivsi3>
 800328e:	0003      	movs	r3, r0
 8003290:	005a      	lsls	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	085b      	lsrs	r3, r3, #1
 8003298:	18d2      	adds	r2, r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	0019      	movs	r1, r3
 80032a0:	0010      	movs	r0, r2
 80032a2:	f7fc ff2f 	bl	8000104 <__udivsi3>
 80032a6:	0003      	movs	r3, r0
 80032a8:	61bb      	str	r3, [r7, #24]
      break;
 80032aa:	e0c3      	b.n	8003434 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80032ac:	f7fe fc60 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 80032b0:	0003      	movs	r3, r0
 80032b2:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d044      	beq.n	8003346 <USART_SetConfig+0x3d6>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d03e      	beq.n	8003342 <USART_SetConfig+0x3d2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d038      	beq.n	800333e <USART_SetConfig+0x3ce>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d032      	beq.n	800333a <USART_SetConfig+0x3ca>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d02c      	beq.n	8003336 <USART_SetConfig+0x3c6>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	2b05      	cmp	r3, #5
 80032e2:	d026      	beq.n	8003332 <USART_SetConfig+0x3c2>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	2b06      	cmp	r3, #6
 80032ea:	d020      	beq.n	800332e <USART_SetConfig+0x3be>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	2b07      	cmp	r3, #7
 80032f2:	d01a      	beq.n	800332a <USART_SetConfig+0x3ba>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d014      	beq.n	8003326 <USART_SetConfig+0x3b6>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	2b09      	cmp	r3, #9
 8003302:	d00e      	beq.n	8003322 <USART_SetConfig+0x3b2>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	2b0a      	cmp	r3, #10
 800330a:	d008      	beq.n	800331e <USART_SetConfig+0x3ae>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	2b0b      	cmp	r3, #11
 8003312:	d102      	bne.n	800331a <USART_SetConfig+0x3aa>
 8003314:	2380      	movs	r3, #128	@ 0x80
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	e016      	b.n	8003348 <USART_SetConfig+0x3d8>
 800331a:	2301      	movs	r3, #1
 800331c:	e014      	b.n	8003348 <USART_SetConfig+0x3d8>
 800331e:	2380      	movs	r3, #128	@ 0x80
 8003320:	e012      	b.n	8003348 <USART_SetConfig+0x3d8>
 8003322:	2340      	movs	r3, #64	@ 0x40
 8003324:	e010      	b.n	8003348 <USART_SetConfig+0x3d8>
 8003326:	2320      	movs	r3, #32
 8003328:	e00e      	b.n	8003348 <USART_SetConfig+0x3d8>
 800332a:	2310      	movs	r3, #16
 800332c:	e00c      	b.n	8003348 <USART_SetConfig+0x3d8>
 800332e:	230c      	movs	r3, #12
 8003330:	e00a      	b.n	8003348 <USART_SetConfig+0x3d8>
 8003332:	230a      	movs	r3, #10
 8003334:	e008      	b.n	8003348 <USART_SetConfig+0x3d8>
 8003336:	2308      	movs	r3, #8
 8003338:	e006      	b.n	8003348 <USART_SetConfig+0x3d8>
 800333a:	2306      	movs	r3, #6
 800333c:	e004      	b.n	8003348 <USART_SetConfig+0x3d8>
 800333e:	2304      	movs	r3, #4
 8003340:	e002      	b.n	8003348 <USART_SetConfig+0x3d8>
 8003342:	2302      	movs	r3, #2
 8003344:	e000      	b.n	8003348 <USART_SetConfig+0x3d8>
 8003346:	2301      	movs	r3, #1
 8003348:	0019      	movs	r1, r3
 800334a:	6938      	ldr	r0, [r7, #16]
 800334c:	f7fc feda 	bl	8000104 <__udivsi3>
 8003350:	0003      	movs	r3, r0
 8003352:	005a      	lsls	r2, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	085b      	lsrs	r3, r3, #1
 800335a:	18d2      	adds	r2, r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	0019      	movs	r1, r3
 8003362:	0010      	movs	r0, r2
 8003364:	f7fc fece 	bl	8000104 <__udivsi3>
 8003368:	0003      	movs	r3, r0
 800336a:	61bb      	str	r3, [r7, #24]
      break;
 800336c:	e062      	b.n	8003434 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	2b00      	cmp	r3, #0
 8003374:	d044      	beq.n	8003400 <USART_SetConfig+0x490>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337a:	2b01      	cmp	r3, #1
 800337c:	d03e      	beq.n	80033fc <USART_SetConfig+0x48c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003382:	2b02      	cmp	r3, #2
 8003384:	d038      	beq.n	80033f8 <USART_SetConfig+0x488>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338a:	2b03      	cmp	r3, #3
 800338c:	d032      	beq.n	80033f4 <USART_SetConfig+0x484>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003392:	2b04      	cmp	r3, #4
 8003394:	d02c      	beq.n	80033f0 <USART_SetConfig+0x480>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	2b05      	cmp	r3, #5
 800339c:	d026      	beq.n	80033ec <USART_SetConfig+0x47c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d020      	beq.n	80033e8 <USART_SetConfig+0x478>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	2b07      	cmp	r3, #7
 80033ac:	d01a      	beq.n	80033e4 <USART_SetConfig+0x474>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d014      	beq.n	80033e0 <USART_SetConfig+0x470>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	2b09      	cmp	r3, #9
 80033bc:	d00e      	beq.n	80033dc <USART_SetConfig+0x46c>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c2:	2b0a      	cmp	r3, #10
 80033c4:	d008      	beq.n	80033d8 <USART_SetConfig+0x468>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ca:	2b0b      	cmp	r3, #11
 80033cc:	d102      	bne.n	80033d4 <USART_SetConfig+0x464>
 80033ce:	2380      	movs	r3, #128	@ 0x80
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	e016      	b.n	8003402 <USART_SetConfig+0x492>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e014      	b.n	8003402 <USART_SetConfig+0x492>
 80033d8:	2380      	movs	r3, #128	@ 0x80
 80033da:	e012      	b.n	8003402 <USART_SetConfig+0x492>
 80033dc:	2340      	movs	r3, #64	@ 0x40
 80033de:	e010      	b.n	8003402 <USART_SetConfig+0x492>
 80033e0:	2320      	movs	r3, #32
 80033e2:	e00e      	b.n	8003402 <USART_SetConfig+0x492>
 80033e4:	2310      	movs	r3, #16
 80033e6:	e00c      	b.n	8003402 <USART_SetConfig+0x492>
 80033e8:	230c      	movs	r3, #12
 80033ea:	e00a      	b.n	8003402 <USART_SetConfig+0x492>
 80033ec:	230a      	movs	r3, #10
 80033ee:	e008      	b.n	8003402 <USART_SetConfig+0x492>
 80033f0:	2308      	movs	r3, #8
 80033f2:	e006      	b.n	8003402 <USART_SetConfig+0x492>
 80033f4:	2306      	movs	r3, #6
 80033f6:	e004      	b.n	8003402 <USART_SetConfig+0x492>
 80033f8:	2304      	movs	r3, #4
 80033fa:	e002      	b.n	8003402 <USART_SetConfig+0x492>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e000      	b.n	8003402 <USART_SetConfig+0x492>
 8003400:	2301      	movs	r3, #1
 8003402:	0019      	movs	r1, r3
 8003404:	2380      	movs	r3, #128	@ 0x80
 8003406:	0218      	lsls	r0, r3, #8
 8003408:	f7fc fe7c 	bl	8000104 <__udivsi3>
 800340c:	0003      	movs	r3, r0
 800340e:	005a      	lsls	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	18d2      	adds	r2, r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	0019      	movs	r1, r3
 800341e:	0010      	movs	r0, r2
 8003420:	f7fc fe70 	bl	8000104 <__udivsi3>
 8003424:	0003      	movs	r3, r0
 8003426:	61bb      	str	r3, [r7, #24]
      break;
 8003428:	e004      	b.n	8003434 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800342a:	231e      	movs	r3, #30
 800342c:	18fb      	adds	r3, r7, r3
 800342e:	2201      	movs	r2, #1
 8003430:	701a      	strb	r2, [r3, #0]
      break;
 8003432:	46c0      	nop			@ (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2b0f      	cmp	r3, #15
 8003438:	d91c      	bls.n	8003474 <USART_SetConfig+0x504>
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	2380      	movs	r3, #128	@ 0x80
 800343e:	025b      	lsls	r3, r3, #9
 8003440:	429a      	cmp	r2, r3
 8003442:	d217      	bcs.n	8003474 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	b29a      	uxth	r2, r3
 8003448:	200e      	movs	r0, #14
 800344a:	183b      	adds	r3, r7, r0
 800344c:	210f      	movs	r1, #15
 800344e:	438a      	bics	r2, r1
 8003450:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	085b      	lsrs	r3, r3, #1
 8003456:	b29b      	uxth	r3, r3
 8003458:	2207      	movs	r2, #7
 800345a:	4013      	ands	r3, r2
 800345c:	b299      	uxth	r1, r3
 800345e:	183b      	adds	r3, r7, r0
 8003460:	183a      	adds	r2, r7, r0
 8003462:	8812      	ldrh	r2, [r2, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	183a      	adds	r2, r7, r0
 800346e:	8812      	ldrh	r2, [r2, #0]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	e003      	b.n	800347c <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 8003474:	231e      	movs	r3, #30
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	2201      	movs	r2, #1
 800347a:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 8003494:	231e      	movs	r3, #30
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	781b      	ldrb	r3, [r3, #0]
}
 800349a:	0018      	movs	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	b008      	add	sp, #32
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			@ (mov r8, r8)
 80034a4:	00f42400 	.word	0x00f42400

080034a8 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034b6:	f7fd fc6d 	bl	8000d94 <HAL_GetTick>
 80034ba:	0003      	movs	r3, r0
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2208      	movs	r2, #8
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d10e      	bne.n	80034ea <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	2380      	movs	r3, #128	@ 0x80
 80034d0:	0399      	lsls	r1, r3, #14
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	23fa      	movs	r3, #250	@ 0xfa
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	0013      	movs	r3, r2
 80034dc:	2200      	movs	r2, #0
 80034de:	f7ff fd11 	bl	8002f04 <USART_WaitOnFlagUntilTimeout>
 80034e2:	1e03      	subs	r3, r0, #0
 80034e4:	d001      	beq.n	80034ea <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e01e      	b.n	8003528 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2204      	movs	r2, #4
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d10e      	bne.n	8003516 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	2380      	movs	r3, #128	@ 0x80
 80034fc:	03d9      	lsls	r1, r3, #15
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	23fa      	movs	r3, #250	@ 0xfa
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	0013      	movs	r3, r2
 8003508:	2200      	movs	r2, #0
 800350a:	f7ff fcfb 	bl	8002f04 <USART_WaitOnFlagUntilTimeout>
 800350e:	1e03      	subs	r3, r0, #0
 8003510:	d001      	beq.n	8003516 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e008      	b.n	8003528 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2259      	movs	r2, #89	@ 0x59
 800351a:	2101      	movs	r1, #1
 800351c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2258      	movs	r2, #88	@ 0x58
 8003522:	2100      	movs	r1, #0
 8003524:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	0018      	movs	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	b004      	add	sp, #16
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2258      	movs	r2, #88	@ 0x58
 800353c:	5c9b      	ldrb	r3, [r3, r2]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_USARTEx_DisableFifoMode+0x16>
 8003542:	2302      	movs	r3, #2
 8003544:	e027      	b.n	8003596 <HAL_USARTEx_DisableFifoMode+0x66>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2258      	movs	r2, #88	@ 0x58
 800354a:	2101      	movs	r1, #1
 800354c:	5499      	strb	r1, [r3, r2]

  husart->State = HAL_USART_STATE_BUSY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2259      	movs	r2, #89	@ 0x59
 8003552:	2102      	movs	r1, #2
 8003554:	5499      	strb	r1, [r3, r2]

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2101      	movs	r1, #1
 800356a:	438a      	bics	r2, r1
 800356c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4a0b      	ldr	r2, [pc, #44]	@ (80035a0 <HAL_USARTEx_DisableFifoMode+0x70>)
 8003572:	4013      	ands	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2259      	movs	r2, #89	@ 0x59
 8003588:	2101      	movs	r1, #1
 800358a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2258      	movs	r2, #88	@ 0x58
 8003590:	2100      	movs	r1, #0
 8003592:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	0018      	movs	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	b004      	add	sp, #16
 800359c:	bd80      	pop	{r7, pc}
 800359e:	46c0      	nop			@ (mov r8, r8)
 80035a0:	dfffffff 	.word	0xdfffffff

080035a4 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2258      	movs	r2, #88	@ 0x58
 80035b2:	5c9b      	ldrb	r3, [r3, r2]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_USARTEx_SetTxFifoThreshold+0x18>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e02e      	b.n	800361a <HAL_USARTEx_SetTxFifoThreshold+0x76>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2258      	movs	r2, #88	@ 0x58
 80035c0:	2101      	movs	r1, #1
 80035c2:	5499      	strb	r1, [r3, r2]

  husart->State = HAL_USART_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2259      	movs	r2, #89	@ 0x59
 80035c8:	2102      	movs	r1, #2
 80035ca:	5499      	strb	r1, [r3, r2]

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2101      	movs	r1, #1
 80035e0:	438a      	bics	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	08d9      	lsrs	r1, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 f854 	bl	80036a8 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2259      	movs	r2, #89	@ 0x59
 800360c:	2101      	movs	r1, #1
 800360e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2258      	movs	r2, #88	@ 0x58
 8003614:	2100      	movs	r1, #0
 8003616:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	0018      	movs	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	b004      	add	sp, #16
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2258      	movs	r2, #88	@ 0x58
 8003632:	5c9b      	ldrb	r3, [r3, r2]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8003638:	2302      	movs	r3, #2
 800363a:	e02f      	b.n	800369c <HAL_USARTEx_SetRxFifoThreshold+0x78>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2258      	movs	r2, #88	@ 0x58
 8003640:	2101      	movs	r1, #1
 8003642:	5499      	strb	r1, [r3, r2]

  husart->State = HAL_USART_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2259      	movs	r2, #89	@ 0x59
 8003648:	2102      	movs	r1, #2
 800364a:	5499      	strb	r1, [r3, r2]

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2101      	movs	r1, #1
 8003660:	438a      	bics	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	4a0e      	ldr	r2, [pc, #56]	@ (80036a4 <HAL_USARTEx_SetRxFifoThreshold+0x80>)
 800366c:	4013      	ands	r3, r2
 800366e:	0019      	movs	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	0018      	movs	r0, r3
 800367e:	f000 f813 	bl	80036a8 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2259      	movs	r2, #89	@ 0x59
 800368e:	2101      	movs	r1, #1
 8003690:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2258      	movs	r2, #88	@ 0x58
 8003696:	2100      	movs	r1, #0
 8003698:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	0018      	movs	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	b004      	add	sp, #16
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	f1ffffff 	.word	0xf1ffffff

080036a8 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 80036a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d106      	bne.n	80036c6 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80036c4:	e041      	b.n	800374a <USARTEx_SetNbDataToProcess+0xa2>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80036c6:	260f      	movs	r6, #15
 80036c8:	19bb      	adds	r3, r7, r6
 80036ca:	2208      	movs	r2, #8
 80036cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80036ce:	200e      	movs	r0, #14
 80036d0:	183b      	adds	r3, r7, r0
 80036d2:	2208      	movs	r2, #8
 80036d4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 80036dc:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	240d      	movs	r4, #13
 80036e2:	193b      	adds	r3, r7, r4
 80036e4:	2107      	movs	r1, #7
 80036e6:	400a      	ands	r2, r1
 80036e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 80036f0:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	250c      	movs	r5, #12
 80036f6:	197b      	adds	r3, r7, r5
 80036f8:	2107      	movs	r1, #7
 80036fa:	400a      	ands	r2, r1
 80036fc:	701a      	strb	r2, [r3, #0]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036fe:	183b      	adds	r3, r7, r0
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	197a      	adds	r2, r7, r5
 8003704:	7812      	ldrb	r2, [r2, #0]
 8003706:	4913      	ldr	r1, [pc, #76]	@ (8003754 <USARTEx_SetNbDataToProcess+0xac>)
 8003708:	5c8a      	ldrb	r2, [r1, r2]
 800370a:	435a      	muls	r2, r3
 800370c:	0010      	movs	r0, r2
                                (uint16_t)denominator[tx_fifo_threshold];
 800370e:	197b      	adds	r3, r7, r5
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	4a11      	ldr	r2, [pc, #68]	@ (8003758 <USARTEx_SetNbDataToProcess+0xb0>)
 8003714:	5cd3      	ldrb	r3, [r2, r3]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003716:	0019      	movs	r1, r3
 8003718:	f7fc fd7e 	bl	8000218 <__divsi3>
 800371c:	0003      	movs	r3, r0
 800371e:	b29a      	uxth	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003724:	19bb      	adds	r3, r7, r6
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	193a      	adds	r2, r7, r4
 800372a:	7812      	ldrb	r2, [r2, #0]
 800372c:	4909      	ldr	r1, [pc, #36]	@ (8003754 <USARTEx_SetNbDataToProcess+0xac>)
 800372e:	5c8a      	ldrb	r2, [r1, r2]
 8003730:	435a      	muls	r2, r3
 8003732:	0010      	movs	r0, r2
                                (uint16_t)denominator[rx_fifo_threshold];
 8003734:	193b      	adds	r3, r7, r4
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	4a07      	ldr	r2, [pc, #28]	@ (8003758 <USARTEx_SetNbDataToProcess+0xb0>)
 800373a:	5cd3      	ldrb	r3, [r2, r3]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800373c:	0019      	movs	r1, r3
 800373e:	f7fc fd6b 	bl	8000218 <__divsi3>
 8003742:	0003      	movs	r3, r0
 8003744:	b29a      	uxth	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	46bd      	mov	sp, r7
 800374e:	b005      	add	sp, #20
 8003750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	08003854 	.word	0x08003854
 8003758:	0800385c 	.word	0x0800385c

0800375c <memset>:
 800375c:	0003      	movs	r3, r0
 800375e:	1882      	adds	r2, r0, r2
 8003760:	4293      	cmp	r3, r2
 8003762:	d100      	bne.n	8003766 <memset+0xa>
 8003764:	4770      	bx	lr
 8003766:	7019      	strb	r1, [r3, #0]
 8003768:	3301      	adds	r3, #1
 800376a:	e7f9      	b.n	8003760 <memset+0x4>

0800376c <__libc_init_array>:
 800376c:	b570      	push	{r4, r5, r6, lr}
 800376e:	2600      	movs	r6, #0
 8003770:	4c0c      	ldr	r4, [pc, #48]	@ (80037a4 <__libc_init_array+0x38>)
 8003772:	4d0d      	ldr	r5, [pc, #52]	@ (80037a8 <__libc_init_array+0x3c>)
 8003774:	1b64      	subs	r4, r4, r5
 8003776:	10a4      	asrs	r4, r4, #2
 8003778:	42a6      	cmp	r6, r4
 800377a:	d109      	bne.n	8003790 <__libc_init_array+0x24>
 800377c:	2600      	movs	r6, #0
 800377e:	f000 f819 	bl	80037b4 <_init>
 8003782:	4c0a      	ldr	r4, [pc, #40]	@ (80037ac <__libc_init_array+0x40>)
 8003784:	4d0a      	ldr	r5, [pc, #40]	@ (80037b0 <__libc_init_array+0x44>)
 8003786:	1b64      	subs	r4, r4, r5
 8003788:	10a4      	asrs	r4, r4, #2
 800378a:	42a6      	cmp	r6, r4
 800378c:	d105      	bne.n	800379a <__libc_init_array+0x2e>
 800378e:	bd70      	pop	{r4, r5, r6, pc}
 8003790:	00b3      	lsls	r3, r6, #2
 8003792:	58eb      	ldr	r3, [r5, r3]
 8003794:	4798      	blx	r3
 8003796:	3601      	adds	r6, #1
 8003798:	e7ee      	b.n	8003778 <__libc_init_array+0xc>
 800379a:	00b3      	lsls	r3, r6, #2
 800379c:	58eb      	ldr	r3, [r5, r3]
 800379e:	4798      	blx	r3
 80037a0:	3601      	adds	r6, #1
 80037a2:	e7f2      	b.n	800378a <__libc_init_array+0x1e>
 80037a4:	0800386c 	.word	0x0800386c
 80037a8:	0800386c 	.word	0x0800386c
 80037ac:	08003870 	.word	0x08003870
 80037b0:	0800386c 	.word	0x0800386c

080037b4 <_init>:
 80037b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ba:	bc08      	pop	{r3}
 80037bc:	469e      	mov	lr, r3
 80037be:	4770      	bx	lr

080037c0 <_fini>:
 80037c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c2:	46c0      	nop			@ (mov r8, r8)
 80037c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c6:	bc08      	pop	{r3}
 80037c8:	469e      	mov	lr, r3
 80037ca:	4770      	bx	lr
