
WEEK07_I2C_MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080035ac  080035ac  000045ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003640  08003640  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003640  08003640  00004640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003648  08003648  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003648  08003648  00004648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800364c  0800364c  0000464c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003650  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  0800365c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  0800365c  00005114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc3e  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eea  00000000  00000000  00012c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00014b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008bb  00000000  00000000  00015688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176b7  00000000  00000000  00015f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f532  00000000  00000000  0002d5fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095b78  00000000  00000000  0003cb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d26a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c4  00000000  00000000  000d26e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000d4eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003594 	.word	0x08003594

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003594 	.word	0x08003594

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fac7 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f859 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f92d 	bl	8000888 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062e:	f000 f8dd 	bl	80007ec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000632:	f000 f89b 	bl	800076c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  unsigned char data[10] = "haruhi";
 8000636:	1d39      	adds	r1, r7, #4
 8000638:	4a25      	ldr	r2, [pc, #148]	@ (80006d0 <main+0xb4>)
 800063a:	000b      	movs	r3, r1
 800063c:	6810      	ldr	r0, [r2, #0]
 800063e:	6018      	str	r0, [r3, #0]
 8000640:	8890      	ldrh	r0, [r2, #4]
 8000642:	8098      	strh	r0, [r3, #4]
 8000644:	7992      	ldrb	r2, [r2, #6]
 8000646:	719a      	strb	r2, [r3, #6]
 8000648:	2307      	movs	r3, #7
 800064a:	18cb      	adds	r3, r1, r3
 800064c:	2203      	movs	r2, #3
 800064e:	2100      	movs	r1, #0
 8000650:	0018      	movs	r0, r3
 8000652:	f002 ff73 	bl	800353c <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(USER_BTN_GPIO_Port, USER_BTN_Pin) == 0) {
 8000656:	2380      	movs	r3, #128	@ 0x80
 8000658:	019b      	lsls	r3, r3, #6
 800065a:	4a1e      	ldr	r2, [pc, #120]	@ (80006d4 <main+0xb8>)
 800065c:	0019      	movs	r1, r3
 800065e:	0010      	movs	r0, r2
 8000660:	f000 fd6a 	bl	8001138 <HAL_GPIO_ReadPin>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d110      	bne.n	800068a <main+0x6e>
		  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, 0);
 8000668:	23a0      	movs	r3, #160	@ 0xa0
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	2200      	movs	r2, #0
 800066e:	2120      	movs	r1, #32
 8000670:	0018      	movs	r0, r3
 8000672:	f000 fd7e 	bl	8001172 <HAL_GPIO_WritePin>
		  HAL_I2C_Master_Transmit(&hi2c1, 0x03 << 1, data, 6, 1000);
 8000676:	1d3a      	adds	r2, r7, #4
 8000678:	4817      	ldr	r0, [pc, #92]	@ (80006d8 <main+0xbc>)
 800067a:	23fa      	movs	r3, #250	@ 0xfa
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2306      	movs	r3, #6
 8000682:	2106      	movs	r1, #6
 8000684:	f000 fe38 	bl	80012f8 <HAL_I2C_Master_Transmit>
 8000688:	e00f      	b.n	80006aa <main+0x8e>
	  } else {
		  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, 1);
 800068a:	23a0      	movs	r3, #160	@ 0xa0
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	2201      	movs	r2, #1
 8000690:	2120      	movs	r1, #32
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fd6d 	bl	8001172 <HAL_GPIO_WritePin>
		  HAL_I2C_Master_Transmit(&hi2c1, 0x04 << 1, data, 6, 1000);
 8000698:	1d3a      	adds	r2, r7, #4
 800069a:	480f      	ldr	r0, [pc, #60]	@ (80006d8 <main+0xbc>)
 800069c:	23fa      	movs	r3, #250	@ 0xfa
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2306      	movs	r3, #6
 80006a4:	2108      	movs	r1, #8
 80006a6:	f000 fe27 	bl	80012f8 <HAL_I2C_Master_Transmit>
	  }

	  HAL_Delay(2000);
 80006aa:	23fa      	movs	r3, #250	@ 0xfa
 80006ac:	00db      	lsls	r3, r3, #3
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fb06 	bl	8000cc0 <HAL_Delay>
	  data[0]++;
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	701a      	strb	r2, [r3, #0]

	  if (data[0] > 'z') {
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b7a      	cmp	r3, #122	@ 0x7a
 80006c6:	d9c6      	bls.n	8000656 <main+0x3a>
		  data[0] = 'a';
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2261      	movs	r2, #97	@ 0x61
 80006cc:	701a      	strb	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(USER_BTN_GPIO_Port, USER_BTN_Pin) == 0) {
 80006ce:	e7c2      	b.n	8000656 <main+0x3a>
 80006d0:	080035ac 	.word	0x080035ac
 80006d4:	50000800 	.word	0x50000800
 80006d8:	20000028 	.word	0x20000028

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b093      	sub	sp, #76	@ 0x4c
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	2410      	movs	r4, #16
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	0018      	movs	r0, r3
 80006e8:	2338      	movs	r3, #56	@ 0x38
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f002 ff25 	bl	800353c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f2:	003b      	movs	r3, r7
 80006f4:	0018      	movs	r0, r3
 80006f6:	2310      	movs	r3, #16
 80006f8:	001a      	movs	r2, r3
 80006fa:	2100      	movs	r1, #0
 80006fc:	f002 ff1e 	bl	800353c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2380      	movs	r3, #128	@ 0x80
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	0018      	movs	r0, r3
 8000706:	f001 f9ef 	bl	8001ae8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	2202      	movs	r2, #2
 800070e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2280      	movs	r2, #128	@ 0x80
 8000714:	0052      	lsls	r2, r2, #1
 8000716:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2240      	movs	r2, #64	@ 0x40
 8000722:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	193b      	adds	r3, r7, r4
 800072c:	0018      	movs	r0, r3
 800072e:	f001 fa27 	bl	8001b80 <HAL_RCC_OscConfig>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000736:	f000 f909 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	003b      	movs	r3, r7
 800073c:	2207      	movs	r2, #7
 800073e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000740:	003b      	movs	r3, r7
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	003b      	movs	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074c:	003b      	movs	r3, r7
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000752:	003b      	movs	r3, r7
 8000754:	2100      	movs	r1, #0
 8000756:	0018      	movs	r0, r3
 8000758:	f001 fd2c 	bl	80021b4 <HAL_RCC_ClockConfig>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000760:	f000 f8f4 	bl	800094c <Error_Handler>
  }
}
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b013      	add	sp, #76	@ 0x4c
 800076a:	bd90      	pop	{r4, r7, pc}

0800076c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <MX_I2C1_Init+0x74>)
 8000772:	4a1c      	ldr	r2, [pc, #112]	@ (80007e4 <MX_I2C1_Init+0x78>)
 8000774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <MX_I2C1_Init+0x74>)
 8000778:	4a1b      	ldr	r2, [pc, #108]	@ (80007e8 <MX_I2C1_Init+0x7c>)
 800077a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_I2C1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <MX_I2C1_Init+0x74>)
 8000784:	2201      	movs	r2, #1
 8000786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000788:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800078e:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_I2C1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000794:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_I2C1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_I2C1_Init+0x74>)
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 fcff 	bl	80011ac <HAL_I2C_Init>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007b2:	f000 f8cb 	bl	800094c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007b6:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <MX_I2C1_Init+0x74>)
 80007b8:	2100      	movs	r1, #0
 80007ba:	0018      	movs	r0, r3
 80007bc:	f001 f8fc 	bl	80019b8 <HAL_I2CEx_ConfigAnalogFilter>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007c4:	f000 f8c2 	bl	800094c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <MX_I2C1_Init+0x74>)
 80007ca:	2100      	movs	r1, #0
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 f93f 	bl	8001a50 <HAL_I2CEx_ConfigDigitalFilter>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007d6:	f000 f8b9 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000028 	.word	0x20000028
 80007e4:	40005400 	.word	0x40005400
 80007e8:	00503d58 	.word	0x00503d58

080007ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f0:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <MX_USART2_UART_Init+0x94>)
 80007f2:	4a24      	ldr	r2, [pc, #144]	@ (8000884 <MX_USART2_UART_Init+0x98>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f6:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <MX_USART2_UART_Init+0x94>)
 80007f8:	22e1      	movs	r2, #225	@ 0xe1
 80007fa:	0252      	lsls	r2, r2, #9
 80007fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b20      	ldr	r3, [pc, #128]	@ (8000880 <MX_USART2_UART_Init+0x94>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_USART2_UART_Init+0x94>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080a:	4b1d      	ldr	r3, [pc, #116]	@ (8000880 <MX_USART2_UART_Init+0x94>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_USART2_UART_Init+0x94>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_USART2_UART_Init+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <MX_USART2_UART_Init+0x94>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <MX_USART2_UART_Init+0x94>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000828:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <MX_USART2_UART_Init+0x94>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082e:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_USART2_UART_Init+0x94>)
 8000830:	2200      	movs	r2, #0
 8000832:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_USART2_UART_Init+0x94>)
 8000836:	0018      	movs	r0, r3
 8000838:	f002 f81e 	bl	8002878 <HAL_UART_Init>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d001      	beq.n	8000844 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000840:	f000 f884 	bl	800094c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000844:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_USART2_UART_Init+0x94>)
 8000846:	2100      	movs	r1, #0
 8000848:	0018      	movs	r0, r3
 800084a:	f002 fd97 	bl	800337c <HAL_UARTEx_SetTxFifoThreshold>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000852:	f000 f87b 	bl	800094c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000856:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <MX_USART2_UART_Init+0x94>)
 8000858:	2100      	movs	r1, #0
 800085a:	0018      	movs	r0, r3
 800085c:	f002 fdce 	bl	80033fc <HAL_UARTEx_SetRxFifoThreshold>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d001      	beq.n	8000868 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000864:	f000 f872 	bl	800094c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <MX_USART2_UART_Init+0x94>)
 800086a:	0018      	movs	r0, r3
 800086c:	f002 fd4c 	bl	8003308 <HAL_UARTEx_DisableFifoMode>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000874:	f000 f86a 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	2000007c 	.word	0x2000007c
 8000884:	40004400 	.word	0x40004400

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b089      	sub	sp, #36	@ 0x24
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	240c      	movs	r4, #12
 8000890:	193b      	adds	r3, r7, r4
 8000892:	0018      	movs	r0, r3
 8000894:	2314      	movs	r3, #20
 8000896:	001a      	movs	r2, r3
 8000898:	2100      	movs	r1, #0
 800089a:	f002 fe4f 	bl	800353c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	4b29      	ldr	r3, [pc, #164]	@ (8000944 <MX_GPIO_Init+0xbc>)
 80008a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008a2:	4b28      	ldr	r3, [pc, #160]	@ (8000944 <MX_GPIO_Init+0xbc>)
 80008a4:	2104      	movs	r1, #4
 80008a6:	430a      	orrs	r2, r1
 80008a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80008aa:	4b26      	ldr	r3, [pc, #152]	@ (8000944 <MX_GPIO_Init+0xbc>)
 80008ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ae:	2204      	movs	r2, #4
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b6:	4b23      	ldr	r3, [pc, #140]	@ (8000944 <MX_GPIO_Init+0xbc>)
 80008b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ba:	4b22      	ldr	r3, [pc, #136]	@ (8000944 <MX_GPIO_Init+0xbc>)
 80008bc:	2120      	movs	r1, #32
 80008be:	430a      	orrs	r2, r1
 80008c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008c2:	4b20      	ldr	r3, [pc, #128]	@ (8000944 <MX_GPIO_Init+0xbc>)
 80008c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008c6:	2220      	movs	r2, #32
 80008c8:	4013      	ands	r3, r2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <MX_GPIO_Init+0xbc>)
 80008d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <MX_GPIO_Init+0xbc>)
 80008d4:	2101      	movs	r1, #1
 80008d6:	430a      	orrs	r2, r1
 80008d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80008da:	4b1a      	ldr	r3, [pc, #104]	@ (8000944 <MX_GPIO_Init+0xbc>)
 80008dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008de:	2201      	movs	r2, #1
 80008e0:	4013      	ands	r3, r2
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80008e6:	23a0      	movs	r3, #160	@ 0xa0
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	2200      	movs	r2, #0
 80008ec:	2120      	movs	r1, #32
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 fc3f 	bl	8001172 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2280      	movs	r2, #128	@ 0x80
 80008f8:	0192      	lsls	r2, r2, #6
 80008fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	2200      	movs	r2, #0
 8000900:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	193b      	adds	r3, r7, r4
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000908:	193b      	adds	r3, r7, r4
 800090a:	4a0f      	ldr	r2, [pc, #60]	@ (8000948 <MX_GPIO_Init+0xc0>)
 800090c:	0019      	movs	r1, r3
 800090e:	0010      	movs	r0, r2
 8000910:	f000 faae 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000914:	0021      	movs	r1, r4
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2220      	movs	r2, #32
 800091a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2201      	movs	r2, #1
 8000920:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2202      	movs	r2, #2
 800092c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 800092e:	187a      	adds	r2, r7, r1
 8000930:	23a0      	movs	r3, #160	@ 0xa0
 8000932:	05db      	lsls	r3, r3, #23
 8000934:	0011      	movs	r1, r2
 8000936:	0018      	movs	r0, r3
 8000938:	f000 fa9a 	bl	8000e70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093c:	46c0      	nop			@ (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b009      	add	sp, #36	@ 0x24
 8000942:	bd90      	pop	{r4, r7, pc}
 8000944:	40021000 	.word	0x40021000
 8000948:	50000800 	.word	0x50000800

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	46c0      	nop			@ (mov r8, r8)
 8000956:	e7fd      	b.n	8000954 <Error_Handler+0x8>

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <HAL_MspInit+0x44>)
 8000960:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <HAL_MspInit+0x44>)
 8000964:	2101      	movs	r1, #1
 8000966:	430a      	orrs	r2, r1
 8000968:	641a      	str	r2, [r3, #64]	@ 0x40
 800096a:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <HAL_MspInit+0x44>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	2201      	movs	r2, #1
 8000970:	4013      	ands	r3, r2
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	4b09      	ldr	r3, [pc, #36]	@ (800099c <HAL_MspInit+0x44>)
 8000978:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_MspInit+0x44>)
 800097c:	2180      	movs	r1, #128	@ 0x80
 800097e:	0549      	lsls	r1, r1, #21
 8000980:	430a      	orrs	r2, r1
 8000982:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000984:	4b05      	ldr	r3, [pc, #20]	@ (800099c <HAL_MspInit+0x44>)
 8000986:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000988:	2380      	movs	r3, #128	@ 0x80
 800098a:	055b      	lsls	r3, r3, #21
 800098c:	4013      	ands	r3, r2
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b002      	add	sp, #8
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b097      	sub	sp, #92	@ 0x5c
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	2344      	movs	r3, #68	@ 0x44
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	0018      	movs	r0, r3
 80009ae:	2314      	movs	r3, #20
 80009b0:	001a      	movs	r2, r3
 80009b2:	2100      	movs	r1, #0
 80009b4:	f002 fdc2 	bl	800353c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b8:	2410      	movs	r4, #16
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	0018      	movs	r0, r3
 80009be:	2334      	movs	r3, #52	@ 0x34
 80009c0:	001a      	movs	r2, r3
 80009c2:	2100      	movs	r1, #0
 80009c4:	f002 fdba 	bl	800353c <memset>
  if(hi2c->Instance==I2C1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a23      	ldr	r2, [pc, #140]	@ (8000a5c <HAL_I2C_MspInit+0xbc>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d13f      	bne.n	8000a52 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	2220      	movs	r2, #32
 80009d6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	0018      	movs	r0, r3
 80009e2:	f001 fd91 	bl	8002508 <HAL_RCCEx_PeriphCLKConfig>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80009ea:	f7ff ffaf 	bl	800094c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <HAL_I2C_MspInit+0xc0>)
 80009f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <HAL_I2C_MspInit+0xc0>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	430a      	orrs	r2, r1
 80009f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009fa:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <HAL_I2C_MspInit+0xc0>)
 80009fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009fe:	2201      	movs	r2, #1
 8000a00:	4013      	ands	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a06:	2144      	movs	r1, #68	@ 0x44
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	22c0      	movs	r2, #192	@ 0xc0
 8000a0c:	00d2      	lsls	r2, r2, #3
 8000a0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2212      	movs	r2, #18
 8000a14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2201      	movs	r2, #1
 8000a1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2206      	movs	r2, #6
 8000a26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	187a      	adds	r2, r7, r1
 8000a2a:	23a0      	movs	r3, #160	@ 0xa0
 8000a2c:	05db      	lsls	r3, r3, #23
 8000a2e:	0011      	movs	r1, r2
 8000a30:	0018      	movs	r0, r3
 8000a32:	f000 fa1d 	bl	8000e70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a36:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <HAL_I2C_MspInit+0xc0>)
 8000a38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a3a:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <HAL_I2C_MspInit+0xc0>)
 8000a3c:	2180      	movs	r1, #128	@ 0x80
 8000a3e:	0389      	lsls	r1, r1, #14
 8000a40:	430a      	orrs	r2, r1
 8000a42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_I2C_MspInit+0xc0>)
 8000a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a48:	2380      	movs	r3, #128	@ 0x80
 8000a4a:	039b      	lsls	r3, r3, #14
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b017      	add	sp, #92	@ 0x5c
 8000a58:	bd90      	pop	{r4, r7, pc}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b097      	sub	sp, #92	@ 0x5c
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	2344      	movs	r3, #68	@ 0x44
 8000a6e:	18fb      	adds	r3, r7, r3
 8000a70:	0018      	movs	r0, r3
 8000a72:	2314      	movs	r3, #20
 8000a74:	001a      	movs	r2, r3
 8000a76:	2100      	movs	r1, #0
 8000a78:	f002 fd60 	bl	800353c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a7c:	2410      	movs	r4, #16
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	0018      	movs	r0, r3
 8000a82:	2334      	movs	r3, #52	@ 0x34
 8000a84:	001a      	movs	r2, r3
 8000a86:	2100      	movs	r1, #0
 8000a88:	f002 fd58 	bl	800353c <memset>
  if(huart->Instance==USART2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a22      	ldr	r2, [pc, #136]	@ (8000b1c <HAL_UART_MspInit+0xb8>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d13e      	bne.n	8000b14 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2202      	movs	r2, #2
 8000a9a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f001 fd2f 	bl	8002508 <HAL_RCCEx_PeriphCLKConfig>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000aae:	f7ff ff4d 	bl	800094c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <HAL_UART_MspInit+0xbc>)
 8000ab4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <HAL_UART_MspInit+0xbc>)
 8000ab8:	2180      	movs	r1, #128	@ 0x80
 8000aba:	0289      	lsls	r1, r1, #10
 8000abc:	430a      	orrs	r2, r1
 8000abe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ac0:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <HAL_UART_MspInit+0xbc>)
 8000ac2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ac4:	2380      	movs	r3, #128	@ 0x80
 8000ac6:	029b      	lsls	r3, r3, #10
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <HAL_UART_MspInit+0xbc>)
 8000ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ad2:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <HAL_UART_MspInit+0xbc>)
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <HAL_UART_MspInit+0xbc>)
 8000adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000ae6:	2144      	movs	r1, #68	@ 0x44
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	220c      	movs	r2, #12
 8000aec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2202      	movs	r2, #2
 8000af2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2201      	movs	r2, #1
 8000af8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2201      	movs	r2, #1
 8000b04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	187a      	adds	r2, r7, r1
 8000b08:	23a0      	movs	r3, #160	@ 0xa0
 8000b0a:	05db      	lsls	r3, r3, #23
 8000b0c:	0011      	movs	r1, r2
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 f9ae 	bl	8000e70 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b14:	46c0      	nop			@ (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b017      	add	sp, #92	@ 0x5c
 8000b1a:	bd90      	pop	{r4, r7, pc}
 8000b1c:	40004400 	.word	0x40004400
 8000b20:	40021000 	.word	0x40021000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b28:	46c0      	nop			@ (mov r8, r8)
 8000b2a:	e7fd      	b.n	8000b28 <NMI_Handler+0x4>

08000b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b30:	46c0      	nop			@ (mov r8, r8)
 8000b32:	e7fd      	b.n	8000b30 <HardFault_Handler+0x4>

08000b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 f89c 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	46c0      	nop			@ (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b60:	480d      	ldr	r0, [pc, #52]	@ (8000b98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b64:	f7ff fff7 	bl	8000b56 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b68:	480c      	ldr	r0, [pc, #48]	@ (8000b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6a:	490d      	ldr	r1, [pc, #52]	@ (8000ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba4 <LoopForever+0xe>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b70:	e002      	b.n	8000b78 <LoopCopyDataInit>

08000b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b76:	3304      	adds	r3, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b7c:	d3f9      	bcc.n	8000b72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b80:	4c0a      	ldr	r4, [pc, #40]	@ (8000bac <LoopForever+0x16>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b84:	e001      	b.n	8000b8a <LoopFillZerobss>

08000b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b88:	3204      	adds	r2, #4

08000b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b8c:	d3fb      	bcc.n	8000b86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b8e:	f002 fcdd 	bl	800354c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b92:	f7ff fd43 	bl	800061c <main>

08000b96 <LoopForever>:

LoopForever:
  b LoopForever
 8000b96:	e7fe      	b.n	8000b96 <LoopForever>
  ldr   r0, =_estack
 8000b98:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ba4:	08003650 	.word	0x08003650
  ldr r2, =_sbss
 8000ba8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bac:	20000114 	.word	0x20000114

08000bb0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_COMP_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <HAL_Init+0x3c>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <HAL_Init+0x3c>)
 8000bc6:	2180      	movs	r1, #128	@ 0x80
 8000bc8:	0049      	lsls	r1, r1, #1
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 f810 	bl	8000bf4 <HAL_InitTick>
 8000bd4:	1e03      	subs	r3, r0, #0
 8000bd6:	d003      	beq.n	8000be0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bd8:	1dfb      	adds	r3, r7, #7
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e001      	b.n	8000be4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000be0:	f7ff feba 	bl	8000958 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	781b      	ldrb	r3, [r3, #0]
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40022000 	.word	0x40022000

08000bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c04:	4b1d      	ldr	r3, [pc, #116]	@ (8000c7c <HAL_InitTick+0x88>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d02b      	beq.n	8000c64 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c80 <HAL_InitTick+0x8c>)
 8000c0e:	681c      	ldr	r4, [r3, #0]
 8000c10:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <HAL_InitTick+0x88>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	0019      	movs	r1, r3
 8000c16:	23fa      	movs	r3, #250	@ 0xfa
 8000c18:	0098      	lsls	r0, r3, #2
 8000c1a:	f7ff fa73 	bl	8000104 <__udivsi3>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	0019      	movs	r1, r3
 8000c22:	0020      	movs	r0, r4
 8000c24:	f7ff fa6e 	bl	8000104 <__udivsi3>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 f913 	bl	8000e56 <HAL_SYSTICK_Config>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d112      	bne.n	8000c5a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	d80a      	bhi.n	8000c50 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	425b      	negs	r3, r3
 8000c40:	2200      	movs	r2, #0
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 f8f2 	bl	8000e2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c48:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <HAL_InitTick+0x90>)
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	e00d      	b.n	8000c6c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c50:	230f      	movs	r3, #15
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	e008      	b.n	8000c6c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c5a:	230f      	movs	r3, #15
 8000c5c:	18fb      	adds	r3, r7, r3
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	e003      	b.n	8000c6c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c64:	230f      	movs	r3, #15
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	781b      	ldrb	r3, [r3, #0]
}
 8000c72:	0018      	movs	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b005      	add	sp, #20
 8000c78:	bd90      	pop	{r4, r7, pc}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000004 	.word	0x20000004

08000c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_IncTick+0x1c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	001a      	movs	r2, r3
 8000c92:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <HAL_IncTick+0x20>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	18d2      	adds	r2, r2, r3
 8000c98:	4b03      	ldr	r3, [pc, #12]	@ (8000ca8 <HAL_IncTick+0x20>)
 8000c9a:	601a      	str	r2, [r3, #0]
}
 8000c9c:	46c0      	nop			@ (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000110 	.word	0x20000110

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b02      	ldr	r3, [pc, #8]	@ (8000cbc <HAL_GetTick+0x10>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	20000110 	.word	0x20000110

08000cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc8:	f7ff fff0 	bl	8000cac <HAL_GetTick>
 8000ccc:	0003      	movs	r3, r0
 8000cce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	d005      	beq.n	8000ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_Delay+0x44>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	001a      	movs	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	189b      	adds	r3, r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	f7ff ffe0 	bl	8000cac <HAL_GetTick>
 8000cec:	0002      	movs	r2, r0
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d8f7      	bhi.n	8000ce8 <HAL_Delay+0x28>
  {
  }
}
 8000cf8:	46c0      	nop			@ (mov r8, r8)
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b004      	add	sp, #16
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	20000008 	.word	0x20000008

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	0002      	movs	r2, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d1c:	d828      	bhi.n	8000d70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d1e:	4a2f      	ldr	r2, [pc, #188]	@ (8000ddc <__NVIC_SetPriority+0xd4>)
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b25b      	sxtb	r3, r3
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	33c0      	adds	r3, #192	@ 0xc0
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	589b      	ldr	r3, [r3, r2]
 8000d2e:	1dfa      	adds	r2, r7, #7
 8000d30:	7812      	ldrb	r2, [r2, #0]
 8000d32:	0011      	movs	r1, r2
 8000d34:	2203      	movs	r2, #3
 8000d36:	400a      	ands	r2, r1
 8000d38:	00d2      	lsls	r2, r2, #3
 8000d3a:	21ff      	movs	r1, #255	@ 0xff
 8000d3c:	4091      	lsls	r1, r2
 8000d3e:	000a      	movs	r2, r1
 8000d40:	43d2      	mvns	r2, r2
 8000d42:	401a      	ands	r2, r3
 8000d44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	019b      	lsls	r3, r3, #6
 8000d4a:	22ff      	movs	r2, #255	@ 0xff
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	0018      	movs	r0, r3
 8000d54:	2303      	movs	r3, #3
 8000d56:	4003      	ands	r3, r0
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d5c:	481f      	ldr	r0, [pc, #124]	@ (8000ddc <__NVIC_SetPriority+0xd4>)
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b25b      	sxtb	r3, r3
 8000d64:	089b      	lsrs	r3, r3, #2
 8000d66:	430a      	orrs	r2, r1
 8000d68:	33c0      	adds	r3, #192	@ 0xc0
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d6e:	e031      	b.n	8000dd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d70:	4a1b      	ldr	r2, [pc, #108]	@ (8000de0 <__NVIC_SetPriority+0xd8>)
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	0019      	movs	r1, r3
 8000d78:	230f      	movs	r3, #15
 8000d7a:	400b      	ands	r3, r1
 8000d7c:	3b08      	subs	r3, #8
 8000d7e:	089b      	lsrs	r3, r3, #2
 8000d80:	3306      	adds	r3, #6
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	18d3      	adds	r3, r2, r3
 8000d86:	3304      	adds	r3, #4
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	1dfa      	adds	r2, r7, #7
 8000d8c:	7812      	ldrb	r2, [r2, #0]
 8000d8e:	0011      	movs	r1, r2
 8000d90:	2203      	movs	r2, #3
 8000d92:	400a      	ands	r2, r1
 8000d94:	00d2      	lsls	r2, r2, #3
 8000d96:	21ff      	movs	r1, #255	@ 0xff
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	000a      	movs	r2, r1
 8000d9c:	43d2      	mvns	r2, r2
 8000d9e:	401a      	ands	r2, r3
 8000da0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	019b      	lsls	r3, r3, #6
 8000da6:	22ff      	movs	r2, #255	@ 0xff
 8000da8:	401a      	ands	r2, r3
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	0018      	movs	r0, r3
 8000db0:	2303      	movs	r3, #3
 8000db2:	4003      	ands	r3, r0
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db8:	4809      	ldr	r0, [pc, #36]	@ (8000de0 <__NVIC_SetPriority+0xd8>)
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	001c      	movs	r4, r3
 8000dc0:	230f      	movs	r3, #15
 8000dc2:	4023      	ands	r3, r4
 8000dc4:	3b08      	subs	r3, #8
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	3306      	adds	r3, #6
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	18c3      	adds	r3, r0, r3
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	601a      	str	r2, [r3, #0]
}
 8000dd4:	46c0      	nop			@ (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b003      	add	sp, #12
 8000dda:	bd90      	pop	{r4, r7, pc}
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	1e5a      	subs	r2, r3, #1
 8000df0:	2380      	movs	r3, #128	@ 0x80
 8000df2:	045b      	lsls	r3, r3, #17
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d301      	bcc.n	8000dfc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e010      	b.n	8000e1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000e28 <SysTick_Config+0x44>)
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	3a01      	subs	r2, #1
 8000e02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e04:	2301      	movs	r3, #1
 8000e06:	425b      	negs	r3, r3
 8000e08:	2103      	movs	r1, #3
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f7ff ff7c 	bl	8000d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e10:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <SysTick_Config+0x44>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <SysTick_Config+0x44>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	0018      	movs	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b002      	add	sp, #8
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	210f      	movs	r1, #15
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	1c02      	adds	r2, r0, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b25b      	sxtb	r3, r3
 8000e46:	0011      	movs	r1, r2
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f7ff ff5d 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b004      	add	sp, #16
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	0018      	movs	r0, r3
 8000e62:	f7ff ffbf 	bl	8000de4 <SysTick_Config>
 8000e66:	0003      	movs	r3, r0
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b002      	add	sp, #8
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7e:	e147      	b.n	8001110 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2101      	movs	r1, #1
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	4091      	lsls	r1, r2
 8000e8a:	000a      	movs	r2, r1
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d100      	bne.n	8000e98 <HAL_GPIO_Init+0x28>
 8000e96:	e138      	b.n	800110a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d005      	beq.n	8000eb0 <HAL_GPIO_Init+0x40>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d130      	bne.n	8000f12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	409a      	lsls	r2, r3
 8000ebe:	0013      	movs	r3, r2
 8000ec0:	43da      	mvns	r2, r3
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	409a      	lsls	r2, r3
 8000ed2:	0013      	movs	r3, r2
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	091b      	lsrs	r3, r3, #4
 8000efc:	2201      	movs	r2, #1
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
 8000f04:	0013      	movs	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2203      	movs	r2, #3
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d017      	beq.n	8000f4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	0013      	movs	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2203      	movs	r2, #3
 8000f54:	4013      	ands	r3, r2
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d123      	bne.n	8000fa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	58d3      	ldr	r3, [r2, r3]
 8000f66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	2207      	movs	r2, #7
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	409a      	lsls	r2, r3
 8000f74:	0013      	movs	r3, r2
 8000f76:	43da      	mvns	r2, r3
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	691a      	ldr	r2, [r3, #16]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2107      	movs	r1, #7
 8000f86:	400b      	ands	r3, r1
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	0013      	movs	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	0092      	lsls	r2, r2, #2
 8000f9e:	6939      	ldr	r1, [r7, #16]
 8000fa0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	409a      	lsls	r2, r3
 8000fb0:	0013      	movs	r3, r2
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	409a      	lsls	r2, r3
 8000fc8:	0013      	movs	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	23c0      	movs	r3, #192	@ 0xc0
 8000fdc:	029b      	lsls	r3, r3, #10
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d100      	bne.n	8000fe4 <HAL_GPIO_Init+0x174>
 8000fe2:	e092      	b.n	800110a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000fe4:	4a50      	ldr	r2, [pc, #320]	@ (8001128 <HAL_GPIO_Init+0x2b8>)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3318      	adds	r3, #24
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	589b      	ldr	r3, [r3, r2]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	0013      	movs	r3, r2
 8001000:	43da      	mvns	r2, r3
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	23a0      	movs	r3, #160	@ 0xa0
 800100c:	05db      	lsls	r3, r3, #23
 800100e:	429a      	cmp	r2, r3
 8001010:	d013      	beq.n	800103a <HAL_GPIO_Init+0x1ca>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a45      	ldr	r2, [pc, #276]	@ (800112c <HAL_GPIO_Init+0x2bc>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00d      	beq.n	8001036 <HAL_GPIO_Init+0x1c6>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a44      	ldr	r2, [pc, #272]	@ (8001130 <HAL_GPIO_Init+0x2c0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d007      	beq.n	8001032 <HAL_GPIO_Init+0x1c2>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a43      	ldr	r2, [pc, #268]	@ (8001134 <HAL_GPIO_Init+0x2c4>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_GPIO_Init+0x1be>
 800102a:	2303      	movs	r3, #3
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x1cc>
 800102e:	2305      	movs	r3, #5
 8001030:	e004      	b.n	800103c <HAL_GPIO_Init+0x1cc>
 8001032:	2302      	movs	r3, #2
 8001034:	e002      	b.n	800103c <HAL_GPIO_Init+0x1cc>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <HAL_GPIO_Init+0x1cc>
 800103a:	2300      	movs	r3, #0
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	2103      	movs	r1, #3
 8001040:	400a      	ands	r2, r1
 8001042:	00d2      	lsls	r2, r2, #3
 8001044:	4093      	lsls	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800104c:	4936      	ldr	r1, [pc, #216]	@ (8001128 <HAL_GPIO_Init+0x2b8>)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3318      	adds	r3, #24
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800105a:	4b33      	ldr	r3, [pc, #204]	@ (8001128 <HAL_GPIO_Init+0x2b8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43da      	mvns	r2, r3
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	2380      	movs	r3, #128	@ 0x80
 8001070:	035b      	lsls	r3, r3, #13
 8001072:	4013      	ands	r3, r2
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800107e:	4b2a      	ldr	r3, [pc, #168]	@ (8001128 <HAL_GPIO_Init+0x2b8>)
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001084:	4b28      	ldr	r3, [pc, #160]	@ (8001128 <HAL_GPIO_Init+0x2b8>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43da      	mvns	r2, r3
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	2380      	movs	r3, #128	@ 0x80
 800109a:	039b      	lsls	r3, r3, #14
 800109c:	4013      	ands	r3, r2
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001128 <HAL_GPIO_Init+0x2b8>)
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001128 <HAL_GPIO_Init+0x2b8>)
 80010b0:	2384      	movs	r3, #132	@ 0x84
 80010b2:	58d3      	ldr	r3, [r2, r3]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	43da      	mvns	r2, r3
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	2380      	movs	r3, #128	@ 0x80
 80010c6:	029b      	lsls	r3, r3, #10
 80010c8:	4013      	ands	r3, r2
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010d4:	4914      	ldr	r1, [pc, #80]	@ (8001128 <HAL_GPIO_Init+0x2b8>)
 80010d6:	2284      	movs	r2, #132	@ 0x84
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80010dc:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <HAL_GPIO_Init+0x2b8>)
 80010de:	2380      	movs	r3, #128	@ 0x80
 80010e0:	58d3      	ldr	r3, [r2, r3]
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	43da      	mvns	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	2380      	movs	r3, #128	@ 0x80
 80010f4:	025b      	lsls	r3, r3, #9
 80010f6:	4013      	ands	r3, r2
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001102:	4909      	ldr	r1, [pc, #36]	@ (8001128 <HAL_GPIO_Init+0x2b8>)
 8001104:	2280      	movs	r2, #128	@ 0x80
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3301      	adds	r3, #1
 800110e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	40da      	lsrs	r2, r3
 8001118:	1e13      	subs	r3, r2, #0
 800111a:	d000      	beq.n	800111e <HAL_GPIO_Init+0x2ae>
 800111c:	e6b0      	b.n	8000e80 <HAL_GPIO_Init+0x10>
  }
}
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	46c0      	nop			@ (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b006      	add	sp, #24
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40021800 	.word	0x40021800
 800112c:	50000400 	.word	0x50000400
 8001130:	50000800 	.word	0x50000800
 8001134:	50000c00 	.word	0x50000c00

08001138 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	000a      	movs	r2, r1
 8001142:	1cbb      	adds	r3, r7, #2
 8001144:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	1cba      	adds	r2, r7, #2
 800114c:	8812      	ldrh	r2, [r2, #0]
 800114e:	4013      	ands	r3, r2
 8001150:	d004      	beq.n	800115c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001152:	230f      	movs	r3, #15
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
 800115a:	e003      	b.n	8001164 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800115c:	230f      	movs	r3, #15
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001164:	230f      	movs	r3, #15
 8001166:	18fb      	adds	r3, r7, r3
 8001168:	781b      	ldrb	r3, [r3, #0]
}
 800116a:	0018      	movs	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	b004      	add	sp, #16
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	0008      	movs	r0, r1
 800117c:	0011      	movs	r1, r2
 800117e:	1cbb      	adds	r3, r7, #2
 8001180:	1c02      	adds	r2, r0, #0
 8001182:	801a      	strh	r2, [r3, #0]
 8001184:	1c7b      	adds	r3, r7, #1
 8001186:	1c0a      	adds	r2, r1, #0
 8001188:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800118a:	1c7b      	adds	r3, r7, #1
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d004      	beq.n	800119c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001192:	1cbb      	adds	r3, r7, #2
 8001194:	881a      	ldrh	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800119a:	e003      	b.n	80011a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800119c:	1cbb      	adds	r3, r7, #2
 800119e:	881a      	ldrh	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011a4:	46c0      	nop			@ (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e08f      	b.n	80012de <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2241      	movs	r2, #65	@ 0x41
 80011c2:	5c9b      	ldrb	r3, [r3, r2]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d107      	bne.n	80011da <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2240      	movs	r2, #64	@ 0x40
 80011ce:	2100      	movs	r1, #0
 80011d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	0018      	movs	r0, r3
 80011d6:	f7ff fbe3 	bl	80009a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2241      	movs	r2, #65	@ 0x41
 80011de:	2124      	movs	r1, #36	@ 0x24
 80011e0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2101      	movs	r1, #1
 80011ee:	438a      	bics	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	493b      	ldr	r1, [pc, #236]	@ (80012e8 <HAL_I2C_Init+0x13c>)
 80011fc:	400a      	ands	r2, r1
 80011fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4938      	ldr	r1, [pc, #224]	@ (80012ec <HAL_I2C_Init+0x140>)
 800120c:	400a      	ands	r2, r1
 800120e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d108      	bne.n	800122a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2180      	movs	r1, #128	@ 0x80
 8001222:	0209      	lsls	r1, r1, #8
 8001224:	430a      	orrs	r2, r1
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	e007      	b.n	800123a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2184      	movs	r1, #132	@ 0x84
 8001234:	0209      	lsls	r1, r1, #8
 8001236:	430a      	orrs	r2, r1
 8001238:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d109      	bne.n	8001256 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2180      	movs	r1, #128	@ 0x80
 800124e:	0109      	lsls	r1, r1, #4
 8001250:	430a      	orrs	r2, r1
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	e007      	b.n	8001266 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4923      	ldr	r1, [pc, #140]	@ (80012f0 <HAL_I2C_Init+0x144>)
 8001262:	400a      	ands	r2, r1
 8001264:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4920      	ldr	r1, [pc, #128]	@ (80012f4 <HAL_I2C_Init+0x148>)
 8001272:	430a      	orrs	r2, r1
 8001274:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68da      	ldr	r2, [r3, #12]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	491a      	ldr	r1, [pc, #104]	@ (80012ec <HAL_I2C_Init+0x140>)
 8001282:	400a      	ands	r2, r1
 8001284:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691a      	ldr	r2, [r3, #16]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	431a      	orrs	r2, r3
 8001290:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	430a      	orrs	r2, r1
 800129e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69d9      	ldr	r1, [r3, #28]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1a      	ldr	r2, [r3, #32]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2101      	movs	r1, #1
 80012bc:	430a      	orrs	r2, r1
 80012be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2241      	movs	r2, #65	@ 0x41
 80012ca:	2120      	movs	r1, #32
 80012cc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2242      	movs	r2, #66	@ 0x42
 80012d8:	2100      	movs	r1, #0
 80012da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	0018      	movs	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b002      	add	sp, #8
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	f0ffffff 	.word	0xf0ffffff
 80012ec:	ffff7fff 	.word	0xffff7fff
 80012f0:	fffff7ff 	.word	0xfffff7ff
 80012f4:	02008000 	.word	0x02008000

080012f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b089      	sub	sp, #36	@ 0x24
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	0008      	movs	r0, r1
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	0019      	movs	r1, r3
 8001306:	230a      	movs	r3, #10
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	1c02      	adds	r2, r0, #0
 800130c:	801a      	strh	r2, [r3, #0]
 800130e:	2308      	movs	r3, #8
 8001310:	18fb      	adds	r3, r7, r3
 8001312:	1c0a      	adds	r2, r1, #0
 8001314:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2241      	movs	r2, #65	@ 0x41
 800131a:	5c9b      	ldrb	r3, [r3, r2]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b20      	cmp	r3, #32
 8001320:	d000      	beq.n	8001324 <HAL_I2C_Master_Transmit+0x2c>
 8001322:	e10a      	b.n	800153a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2240      	movs	r2, #64	@ 0x40
 8001328:	5c9b      	ldrb	r3, [r3, r2]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d101      	bne.n	8001332 <HAL_I2C_Master_Transmit+0x3a>
 800132e:	2302      	movs	r3, #2
 8001330:	e104      	b.n	800153c <HAL_I2C_Master_Transmit+0x244>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2240      	movs	r2, #64	@ 0x40
 8001336:	2101      	movs	r1, #1
 8001338:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800133a:	f7ff fcb7 	bl	8000cac <HAL_GetTick>
 800133e:	0003      	movs	r3, r0
 8001340:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001342:	2380      	movs	r3, #128	@ 0x80
 8001344:	0219      	lsls	r1, r3, #8
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2319      	movs	r3, #25
 800134e:	2201      	movs	r2, #1
 8001350:	f000 f91e 	bl	8001590 <I2C_WaitOnFlagUntilTimeout>
 8001354:	1e03      	subs	r3, r0, #0
 8001356:	d001      	beq.n	800135c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e0ef      	b.n	800153c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2241      	movs	r2, #65	@ 0x41
 8001360:	2121      	movs	r1, #33	@ 0x21
 8001362:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2242      	movs	r2, #66	@ 0x42
 8001368:	2110      	movs	r1, #16
 800136a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2208      	movs	r2, #8
 800137c:	18ba      	adds	r2, r7, r2
 800137e:	8812      	ldrh	r2, [r2, #0]
 8001380:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2200      	movs	r2, #0
 8001386:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800138c:	b29b      	uxth	r3, r3
 800138e:	2bff      	cmp	r3, #255	@ 0xff
 8001390:	d906      	bls.n	80013a0 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	22ff      	movs	r2, #255	@ 0xff
 8001396:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001398:	2380      	movs	r3, #128	@ 0x80
 800139a:	045b      	lsls	r3, r3, #17
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e007      	b.n	80013b0 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80013aa:	2380      	movs	r3, #128	@ 0x80
 80013ac:	049b      	lsls	r3, r3, #18
 80013ae:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d027      	beq.n	8001408 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013bc:	781a      	ldrb	r2, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	3b01      	subs	r3, #1
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013e0:	3b01      	subs	r3, #1
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	3301      	adds	r3, #1
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	697c      	ldr	r4, [r7, #20]
 80013f4:	230a      	movs	r3, #10
 80013f6:	18fb      	adds	r3, r7, r3
 80013f8:	8819      	ldrh	r1, [r3, #0]
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	4b51      	ldr	r3, [pc, #324]	@ (8001544 <HAL_I2C_Master_Transmit+0x24c>)
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	0023      	movs	r3, r4
 8001402:	f000 fa9f 	bl	8001944 <I2C_TransferConfig>
 8001406:	e06f      	b.n	80014e8 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800140c:	b2da      	uxtb	r2, r3
 800140e:	697c      	ldr	r4, [r7, #20]
 8001410:	230a      	movs	r3, #10
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	8819      	ldrh	r1, [r3, #0]
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	4b4a      	ldr	r3, [pc, #296]	@ (8001544 <HAL_I2C_Master_Transmit+0x24c>)
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	0023      	movs	r3, r4
 800141e:	f000 fa91 	bl	8001944 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001422:	e061      	b.n	80014e8 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	0018      	movs	r0, r3
 800142c:	f000 f908 	bl	8001640 <I2C_WaitOnTXISFlagUntilTimeout>
 8001430:	1e03      	subs	r3, r0, #0
 8001432:	d001      	beq.n	8001438 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e081      	b.n	800153c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143c:	781a      	ldrb	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001452:	b29b      	uxth	r3, r3
 8001454:	3b01      	subs	r3, #1
 8001456:	b29a      	uxth	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001460:	3b01      	subs	r3, #1
 8001462:	b29a      	uxth	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800146c:	b29b      	uxth	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d03a      	beq.n	80014e8 <HAL_I2C_Master_Transmit+0x1f0>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001476:	2b00      	cmp	r3, #0
 8001478:	d136      	bne.n	80014e8 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800147a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	0013      	movs	r3, r2
 8001484:	2200      	movs	r2, #0
 8001486:	2180      	movs	r1, #128	@ 0x80
 8001488:	f000 f882 	bl	8001590 <I2C_WaitOnFlagUntilTimeout>
 800148c:	1e03      	subs	r3, r0, #0
 800148e:	d001      	beq.n	8001494 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e053      	b.n	800153c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001498:	b29b      	uxth	r3, r3
 800149a:	2bff      	cmp	r3, #255	@ 0xff
 800149c:	d911      	bls.n	80014c2 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	22ff      	movs	r2, #255	@ 0xff
 80014a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	2380      	movs	r3, #128	@ 0x80
 80014ac:	045c      	lsls	r4, r3, #17
 80014ae:	230a      	movs	r3, #10
 80014b0:	18fb      	adds	r3, r7, r3
 80014b2:	8819      	ldrh	r1, [r3, #0]
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	2300      	movs	r3, #0
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	0023      	movs	r3, r4
 80014bc:	f000 fa42 	bl	8001944 <I2C_TransferConfig>
 80014c0:	e012      	b.n	80014e8 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	2380      	movs	r3, #128	@ 0x80
 80014d4:	049c      	lsls	r4, r3, #18
 80014d6:	230a      	movs	r3, #10
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	8819      	ldrh	r1, [r3, #0]
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	2300      	movs	r3, #0
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	0023      	movs	r3, r4
 80014e4:	f000 fa2e 	bl	8001944 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d198      	bne.n	8001424 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	0018      	movs	r0, r3
 80014fa:	f000 f8e7 	bl	80016cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80014fe:	1e03      	subs	r3, r0, #0
 8001500:	d001      	beq.n	8001506 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e01a      	b.n	800153c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2220      	movs	r2, #32
 800150c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	490b      	ldr	r1, [pc, #44]	@ (8001548 <HAL_I2C_Master_Transmit+0x250>)
 800151a:	400a      	ands	r2, r1
 800151c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2241      	movs	r2, #65	@ 0x41
 8001522:	2120      	movs	r1, #32
 8001524:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2242      	movs	r2, #66	@ 0x42
 800152a:	2100      	movs	r1, #0
 800152c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2240      	movs	r2, #64	@ 0x40
 8001532:	2100      	movs	r1, #0
 8001534:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800153a:	2302      	movs	r3, #2
  }
}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	b007      	add	sp, #28
 8001542:	bd90      	pop	{r4, r7, pc}
 8001544:	80002000 	.word	0x80002000
 8001548:	fe00e800 	.word	0xfe00e800

0800154c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	2202      	movs	r2, #2
 800155c:	4013      	ands	r3, r2
 800155e:	2b02      	cmp	r3, #2
 8001560:	d103      	bne.n	800156a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2200      	movs	r2, #0
 8001568:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2201      	movs	r2, #1
 8001572:	4013      	ands	r3, r2
 8001574:	2b01      	cmp	r3, #1
 8001576:	d007      	beq.n	8001588 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699a      	ldr	r2, [r3, #24]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2101      	movs	r1, #1
 8001584:	430a      	orrs	r2, r1
 8001586:	619a      	str	r2, [r3, #24]
  }
}
 8001588:	46c0      	nop			@ (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	b002      	add	sp, #8
 800158e:	bd80      	pop	{r7, pc}

08001590 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	1dfb      	adds	r3, r7, #7
 800159e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015a0:	e03a      	b.n	8001618 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	6839      	ldr	r1, [r7, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	0018      	movs	r0, r3
 80015aa:	f000 f8d3 	bl	8001754 <I2C_IsErrorOccurred>
 80015ae:	1e03      	subs	r3, r0, #0
 80015b0:	d001      	beq.n	80015b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e040      	b.n	8001638 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	3301      	adds	r3, #1
 80015ba:	d02d      	beq.n	8001618 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015bc:	f7ff fb76 	bl	8000cac <HAL_GetTick>
 80015c0:	0002      	movs	r2, r0
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d302      	bcc.n	80015d2 <I2C_WaitOnFlagUntilTimeout+0x42>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d122      	bne.n	8001618 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	4013      	ands	r3, r2
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	425a      	negs	r2, r3
 80015e2:	4153      	adcs	r3, r2
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	001a      	movs	r2, r3
 80015e8:	1dfb      	adds	r3, r7, #7
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d113      	bne.n	8001618 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f4:	2220      	movs	r2, #32
 80015f6:	431a      	orrs	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2241      	movs	r2, #65	@ 0x41
 8001600:	2120      	movs	r1, #32
 8001602:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2242      	movs	r2, #66	@ 0x42
 8001608:	2100      	movs	r1, #0
 800160a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2240      	movs	r2, #64	@ 0x40
 8001610:	2100      	movs	r1, #0
 8001612:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e00f      	b.n	8001638 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	4013      	ands	r3, r2
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	425a      	negs	r2, r3
 8001628:	4153      	adcs	r3, r2
 800162a:	b2db      	uxtb	r3, r3
 800162c:	001a      	movs	r2, r3
 800162e:	1dfb      	adds	r3, r7, #7
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d0b5      	beq.n	80015a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	0018      	movs	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	b004      	add	sp, #16
 800163e:	bd80      	pop	{r7, pc}

08001640 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800164c:	e032      	b.n	80016b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	0018      	movs	r0, r3
 8001656:	f000 f87d 	bl	8001754 <I2C_IsErrorOccurred>
 800165a:	1e03      	subs	r3, r0, #0
 800165c:	d001      	beq.n	8001662 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e030      	b.n	80016c4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	3301      	adds	r3, #1
 8001666:	d025      	beq.n	80016b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001668:	f7ff fb20 	bl	8000cac <HAL_GetTick>
 800166c:	0002      	movs	r2, r0
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	429a      	cmp	r2, r3
 8001676:	d302      	bcc.n	800167e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d11a      	bne.n	80016b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2202      	movs	r2, #2
 8001686:	4013      	ands	r3, r2
 8001688:	2b02      	cmp	r3, #2
 800168a:	d013      	beq.n	80016b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001690:	2220      	movs	r2, #32
 8001692:	431a      	orrs	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2241      	movs	r2, #65	@ 0x41
 800169c:	2120      	movs	r1, #32
 800169e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2242      	movs	r2, #66	@ 0x42
 80016a4:	2100      	movs	r1, #0
 80016a6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2240      	movs	r2, #64	@ 0x40
 80016ac:	2100      	movs	r1, #0
 80016ae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e007      	b.n	80016c4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2202      	movs	r2, #2
 80016bc:	4013      	ands	r3, r2
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d1c5      	bne.n	800164e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b004      	add	sp, #16
 80016ca:	bd80      	pop	{r7, pc}

080016cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016d8:	e02f      	b.n	800173a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	0018      	movs	r0, r3
 80016e2:	f000 f837 	bl	8001754 <I2C_IsErrorOccurred>
 80016e6:	1e03      	subs	r3, r0, #0
 80016e8:	d001      	beq.n	80016ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e02d      	b.n	800174a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ee:	f7ff fadd 	bl	8000cac <HAL_GetTick>
 80016f2:	0002      	movs	r2, r0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d302      	bcc.n	8001704 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d11a      	bne.n	800173a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	2220      	movs	r2, #32
 800170c:	4013      	ands	r3, r2
 800170e:	2b20      	cmp	r3, #32
 8001710:	d013      	beq.n	800173a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001716:	2220      	movs	r2, #32
 8001718:	431a      	orrs	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2241      	movs	r2, #65	@ 0x41
 8001722:	2120      	movs	r1, #32
 8001724:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2242      	movs	r2, #66	@ 0x42
 800172a:	2100      	movs	r1, #0
 800172c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2240      	movs	r2, #64	@ 0x40
 8001732:	2100      	movs	r1, #0
 8001734:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e007      	b.n	800174a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	2220      	movs	r2, #32
 8001742:	4013      	ands	r3, r2
 8001744:	2b20      	cmp	r3, #32
 8001746:	d1c8      	bne.n	80016da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	0018      	movs	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	b004      	add	sp, #16
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	@ 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001760:	2327      	movs	r3, #39	@ 0x27
 8001762:	18fb      	adds	r3, r7, r3
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2210      	movs	r2, #16
 800177c:	4013      	ands	r3, r2
 800177e:	d100      	bne.n	8001782 <I2C_IsErrorOccurred+0x2e>
 8001780:	e079      	b.n	8001876 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2210      	movs	r2, #16
 8001788:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800178a:	e057      	b.n	800183c <I2C_IsErrorOccurred+0xe8>
 800178c:	2227      	movs	r2, #39	@ 0x27
 800178e:	18bb      	adds	r3, r7, r2
 8001790:	18ba      	adds	r2, r7, r2
 8001792:	7812      	ldrb	r2, [r2, #0]
 8001794:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	3301      	adds	r3, #1
 800179a:	d04f      	beq.n	800183c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800179c:	f7ff fa86 	bl	8000cac <HAL_GetTick>
 80017a0:	0002      	movs	r2, r0
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d302      	bcc.n	80017b2 <I2C_IsErrorOccurred+0x5e>
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d144      	bne.n	800183c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	2380      	movs	r3, #128	@ 0x80
 80017ba:	01db      	lsls	r3, r3, #7
 80017bc:	4013      	ands	r3, r2
 80017be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80017c0:	2013      	movs	r0, #19
 80017c2:	183b      	adds	r3, r7, r0
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	2142      	movs	r1, #66	@ 0x42
 80017c8:	5c52      	ldrb	r2, [r2, r1]
 80017ca:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	699a      	ldr	r2, [r3, #24]
 80017d2:	2380      	movs	r3, #128	@ 0x80
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	401a      	ands	r2, r3
 80017d8:	2380      	movs	r3, #128	@ 0x80
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	429a      	cmp	r2, r3
 80017de:	d126      	bne.n	800182e <I2C_IsErrorOccurred+0xda>
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	2380      	movs	r3, #128	@ 0x80
 80017e4:	01db      	lsls	r3, r3, #7
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d021      	beq.n	800182e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80017ea:	183b      	adds	r3, r7, r0
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b20      	cmp	r3, #32
 80017f0:	d01d      	beq.n	800182e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2180      	movs	r1, #128	@ 0x80
 80017fe:	01c9      	lsls	r1, r1, #7
 8001800:	430a      	orrs	r2, r1
 8001802:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001804:	f7ff fa52 	bl	8000cac <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800180c:	e00f      	b.n	800182e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800180e:	f7ff fa4d 	bl	8000cac <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b19      	cmp	r3, #25
 800181a:	d908      	bls.n	800182e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	2220      	movs	r2, #32
 8001820:	4313      	orrs	r3, r2
 8001822:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001824:	2327      	movs	r3, #39	@ 0x27
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]

              break;
 800182c:	e006      	b.n	800183c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	2220      	movs	r2, #32
 8001836:	4013      	ands	r3, r2
 8001838:	2b20      	cmp	r3, #32
 800183a:	d1e8      	bne.n	800180e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	2220      	movs	r2, #32
 8001844:	4013      	ands	r3, r2
 8001846:	2b20      	cmp	r3, #32
 8001848:	d004      	beq.n	8001854 <I2C_IsErrorOccurred+0x100>
 800184a:	2327      	movs	r3, #39	@ 0x27
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d09b      	beq.n	800178c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001854:	2327      	movs	r3, #39	@ 0x27
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d103      	bne.n	8001866 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2220      	movs	r2, #32
 8001864:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	2204      	movs	r2, #4
 800186a:	4313      	orrs	r3, r2
 800186c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800186e:	2327      	movs	r3, #39	@ 0x27
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	2201      	movs	r2, #1
 8001874:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	2380      	movs	r3, #128	@ 0x80
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4013      	ands	r3, r2
 8001886:	d00c      	beq.n	80018a2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	2201      	movs	r2, #1
 800188c:	4313      	orrs	r3, r2
 800188e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2280      	movs	r2, #128	@ 0x80
 8001896:	0052      	lsls	r2, r2, #1
 8001898:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800189a:	2327      	movs	r3, #39	@ 0x27
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	2380      	movs	r3, #128	@ 0x80
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4013      	ands	r3, r2
 80018aa:	d00c      	beq.n	80018c6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	2208      	movs	r2, #8
 80018b0:	4313      	orrs	r3, r2
 80018b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2280      	movs	r2, #128	@ 0x80
 80018ba:	00d2      	lsls	r2, r2, #3
 80018bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018be:	2327      	movs	r3, #39	@ 0x27
 80018c0:	18fb      	adds	r3, r7, r3
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	2380      	movs	r3, #128	@ 0x80
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4013      	ands	r3, r2
 80018ce:	d00c      	beq.n	80018ea <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	2202      	movs	r2, #2
 80018d4:	4313      	orrs	r3, r2
 80018d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2280      	movs	r2, #128	@ 0x80
 80018de:	0092      	lsls	r2, r2, #2
 80018e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018e2:	2327      	movs	r3, #39	@ 0x27
 80018e4:	18fb      	adds	r3, r7, r3
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80018ea:	2327      	movs	r3, #39	@ 0x27
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d01d      	beq.n	8001930 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	0018      	movs	r0, r3
 80018f8:	f7ff fe28 	bl	800154c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	490e      	ldr	r1, [pc, #56]	@ (8001940 <I2C_IsErrorOccurred+0x1ec>)
 8001908:	400a      	ands	r2, r1
 800190a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	431a      	orrs	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2241      	movs	r2, #65	@ 0x41
 800191c:	2120      	movs	r1, #32
 800191e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2242      	movs	r2, #66	@ 0x42
 8001924:	2100      	movs	r1, #0
 8001926:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2240      	movs	r2, #64	@ 0x40
 800192c:	2100      	movs	r1, #0
 800192e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001930:	2327      	movs	r3, #39	@ 0x27
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	781b      	ldrb	r3, [r3, #0]
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b00a      	add	sp, #40	@ 0x28
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	fe00e800 	.word	0xfe00e800

08001944 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	0008      	movs	r0, r1
 800194e:	0011      	movs	r1, r2
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	240a      	movs	r4, #10
 8001954:	193b      	adds	r3, r7, r4
 8001956:	1c02      	adds	r2, r0, #0
 8001958:	801a      	strh	r2, [r3, #0]
 800195a:	2009      	movs	r0, #9
 800195c:	183b      	adds	r3, r7, r0
 800195e:	1c0a      	adds	r2, r1, #0
 8001960:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001962:	193b      	adds	r3, r7, r4
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	059b      	lsls	r3, r3, #22
 8001968:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800196a:	183b      	adds	r3, r7, r0
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	0419      	lsls	r1, r3, #16
 8001970:	23ff      	movs	r3, #255	@ 0xff
 8001972:	041b      	lsls	r3, r3, #16
 8001974:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001976:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800197c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800197e:	4313      	orrs	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	085b      	lsrs	r3, r3, #1
 8001984:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800198e:	0d51      	lsrs	r1, r2, #21
 8001990:	2280      	movs	r2, #128	@ 0x80
 8001992:	00d2      	lsls	r2, r2, #3
 8001994:	400a      	ands	r2, r1
 8001996:	4907      	ldr	r1, [pc, #28]	@ (80019b4 <I2C_TransferConfig+0x70>)
 8001998:	430a      	orrs	r2, r1
 800199a:	43d2      	mvns	r2, r2
 800199c:	401a      	ands	r2, r3
 800199e:	0011      	movs	r1, r2
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80019aa:	46c0      	nop			@ (mov r8, r8)
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b007      	add	sp, #28
 80019b0:	bd90      	pop	{r4, r7, pc}
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	03ff63ff 	.word	0x03ff63ff

080019b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2241      	movs	r2, #65	@ 0x41
 80019c6:	5c9b      	ldrb	r3, [r3, r2]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b20      	cmp	r3, #32
 80019cc:	d138      	bne.n	8001a40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2240      	movs	r2, #64	@ 0x40
 80019d2:	5c9b      	ldrb	r3, [r3, r2]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019d8:	2302      	movs	r3, #2
 80019da:	e032      	b.n	8001a42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2240      	movs	r2, #64	@ 0x40
 80019e0:	2101      	movs	r1, #1
 80019e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2241      	movs	r2, #65	@ 0x41
 80019e8:	2124      	movs	r1, #36	@ 0x24
 80019ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2101      	movs	r1, #1
 80019f8:	438a      	bics	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4911      	ldr	r1, [pc, #68]	@ (8001a4c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001a08:	400a      	ands	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6819      	ldr	r1, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2101      	movs	r1, #1
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2241      	movs	r2, #65	@ 0x41
 8001a30:	2120      	movs	r1, #32
 8001a32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2240      	movs	r2, #64	@ 0x40
 8001a38:	2100      	movs	r1, #0
 8001a3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e000      	b.n	8001a42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a40:	2302      	movs	r3, #2
  }
}
 8001a42:	0018      	movs	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b002      	add	sp, #8
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			@ (mov r8, r8)
 8001a4c:	ffffefff 	.word	0xffffefff

08001a50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2241      	movs	r2, #65	@ 0x41
 8001a5e:	5c9b      	ldrb	r3, [r3, r2]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b20      	cmp	r3, #32
 8001a64:	d139      	bne.n	8001ada <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2240      	movs	r2, #64	@ 0x40
 8001a6a:	5c9b      	ldrb	r3, [r3, r2]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e033      	b.n	8001adc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2240      	movs	r2, #64	@ 0x40
 8001a78:	2101      	movs	r1, #1
 8001a7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2241      	movs	r2, #65	@ 0x41
 8001a80:	2124      	movs	r1, #36	@ 0x24
 8001a82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2101      	movs	r1, #1
 8001a90:	438a      	bics	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4a11      	ldr	r2, [pc, #68]	@ (8001ae4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2241      	movs	r2, #65	@ 0x41
 8001aca:	2120      	movs	r1, #32
 8001acc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2240      	movs	r2, #64	@ 0x40
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e000      	b.n	8001adc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ada:	2302      	movs	r3, #2
  }
}
 8001adc:	0018      	movs	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b004      	add	sp, #16
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	fffff0ff 	.word	0xfffff0ff

08001ae8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001af0:	4b19      	ldr	r3, [pc, #100]	@ (8001b58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a19      	ldr	r2, [pc, #100]	@ (8001b5c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	0019      	movs	r1, r3
 8001afa:	4b17      	ldr	r3, [pc, #92]	@ (8001b58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	2380      	movs	r3, #128	@ 0x80
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d11f      	bne.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001b0c:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	0013      	movs	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	189b      	adds	r3, r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4912      	ldr	r1, [pc, #72]	@ (8001b64 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f7fe faf2 	bl	8000104 <__udivsi3>
 8001b20:	0003      	movs	r3, r0
 8001b22:	3301      	adds	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b26:	e008      	b.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	e001      	b.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e009      	b.n	8001b4e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b3a:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	2380      	movs	r3, #128	@ 0x80
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	401a      	ands	r2, r3
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d0ed      	beq.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b004      	add	sp, #16
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			@ (mov r8, r8)
 8001b58:	40007000 	.word	0x40007000
 8001b5c:	fffff9ff 	.word	0xfffff9ff
 8001b60:	20000000 	.word	0x20000000
 8001b64:	000f4240 	.word	0x000f4240

08001b68 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001b6c:	4b03      	ldr	r3, [pc, #12]	@ (8001b7c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	23e0      	movs	r3, #224	@ 0xe0
 8001b72:	01db      	lsls	r3, r3, #7
 8001b74:	4013      	ands	r3, r2
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000

08001b80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e2fe      	b.n	8002190 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2201      	movs	r2, #1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d100      	bne.n	8001b9e <HAL_RCC_OscConfig+0x1e>
 8001b9c:	e07c      	b.n	8001c98 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9e:	4bc3      	ldr	r3, [pc, #780]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2238      	movs	r2, #56	@ 0x38
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba8:	4bc0      	ldr	r3, [pc, #768]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2203      	movs	r2, #3
 8001bae:	4013      	ands	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2b10      	cmp	r3, #16
 8001bb6:	d102      	bne.n	8001bbe <HAL_RCC_OscConfig+0x3e>
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d002      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d10b      	bne.n	8001bdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	4bb9      	ldr	r3, [pc, #740]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2380      	movs	r3, #128	@ 0x80
 8001bca:	029b      	lsls	r3, r3, #10
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d062      	beq.n	8001c96 <HAL_RCC_OscConfig+0x116>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d15e      	bne.n	8001c96 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e2d9      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	2380      	movs	r3, #128	@ 0x80
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d107      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x78>
 8001be8:	4bb0      	ldr	r3, [pc, #704]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4baf      	ldr	r3, [pc, #700]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001bee:	2180      	movs	r1, #128	@ 0x80
 8001bf0:	0249      	lsls	r1, r1, #9
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	e020      	b.n	8001c3a <HAL_RCC_OscConfig+0xba>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	23a0      	movs	r3, #160	@ 0xa0
 8001bfe:	02db      	lsls	r3, r3, #11
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d10e      	bne.n	8001c22 <HAL_RCC_OscConfig+0xa2>
 8001c04:	4ba9      	ldr	r3, [pc, #676]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4ba8      	ldr	r3, [pc, #672]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001c0a:	2180      	movs	r1, #128	@ 0x80
 8001c0c:	02c9      	lsls	r1, r1, #11
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	4ba6      	ldr	r3, [pc, #664]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	4ba5      	ldr	r3, [pc, #660]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001c18:	2180      	movs	r1, #128	@ 0x80
 8001c1a:	0249      	lsls	r1, r1, #9
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	e00b      	b.n	8001c3a <HAL_RCC_OscConfig+0xba>
 8001c22:	4ba2      	ldr	r3, [pc, #648]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4ba1      	ldr	r3, [pc, #644]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001c28:	49a1      	ldr	r1, [pc, #644]	@ (8001eb0 <HAL_RCC_OscConfig+0x330>)
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	4b9f      	ldr	r3, [pc, #636]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4b9e      	ldr	r3, [pc, #632]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001c34:	499f      	ldr	r1, [pc, #636]	@ (8001eb4 <HAL_RCC_OscConfig+0x334>)
 8001c36:	400a      	ands	r2, r1
 8001c38:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d014      	beq.n	8001c6c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7ff f833 	bl	8000cac <HAL_GetTick>
 8001c46:	0003      	movs	r3, r0
 8001c48:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7ff f82e 	bl	8000cac <HAL_GetTick>
 8001c50:	0002      	movs	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	@ 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e298      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c5e:	4b93      	ldr	r3, [pc, #588]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	2380      	movs	r3, #128	@ 0x80
 8001c64:	029b      	lsls	r3, r3, #10
 8001c66:	4013      	ands	r3, r2
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0xcc>
 8001c6a:	e015      	b.n	8001c98 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6c:	f7ff f81e 	bl	8000cac <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c76:	f7ff f819 	bl	8000cac <HAL_GetTick>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b64      	cmp	r3, #100	@ 0x64
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e283      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c88:	4b88      	ldr	r3, [pc, #544]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2380      	movs	r3, #128	@ 0x80
 8001c8e:	029b      	lsls	r3, r3, #10
 8001c90:	4013      	ands	r3, r2
 8001c92:	d1f0      	bne.n	8001c76 <HAL_RCC_OscConfig+0xf6>
 8001c94:	e000      	b.n	8001c98 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c96:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d100      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x124>
 8001ca2:	e099      	b.n	8001dd8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca4:	4b81      	ldr	r3, [pc, #516]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2238      	movs	r2, #56	@ 0x38
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cae:	4b7f      	ldr	r3, [pc, #508]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	2b10      	cmp	r3, #16
 8001cbc:	d102      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x144>
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d002      	beq.n	8001cca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d135      	bne.n	8001d36 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cca:	4b78      	ldr	r3, [pc, #480]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	2380      	movs	r3, #128	@ 0x80
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d005      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x162>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e256      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce2:	4b72      	ldr	r3, [pc, #456]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4a74      	ldr	r2, [pc, #464]	@ (8001eb8 <HAL_RCC_OscConfig+0x338>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	0019      	movs	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	021a      	lsls	r2, r3, #8
 8001cf2:	4b6e      	ldr	r3, [pc, #440]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d112      	bne.n	8001d24 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cfe:	4b6b      	ldr	r3, [pc, #428]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a6e      	ldr	r2, [pc, #440]	@ (8001ebc <HAL_RCC_OscConfig+0x33c>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	0019      	movs	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	4b67      	ldr	r3, [pc, #412]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d12:	4b66      	ldr	r3, [pc, #408]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	0adb      	lsrs	r3, r3, #11
 8001d18:	2207      	movs	r2, #7
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	4a68      	ldr	r2, [pc, #416]	@ (8001ec0 <HAL_RCC_OscConfig+0x340>)
 8001d1e:	40da      	lsrs	r2, r3
 8001d20:	4b68      	ldr	r3, [pc, #416]	@ (8001ec4 <HAL_RCC_OscConfig+0x344>)
 8001d22:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d24:	4b68      	ldr	r3, [pc, #416]	@ (8001ec8 <HAL_RCC_OscConfig+0x348>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f7fe ff63 	bl	8000bf4 <HAL_InitTick>
 8001d2e:	1e03      	subs	r3, r0, #0
 8001d30:	d051      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e22c      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d030      	beq.n	8001da0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d3e:	4b5b      	ldr	r3, [pc, #364]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a5e      	ldr	r2, [pc, #376]	@ (8001ebc <HAL_RCC_OscConfig+0x33c>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	0019      	movs	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	4b57      	ldr	r3, [pc, #348]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001d52:	4b56      	ldr	r3, [pc, #344]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4b55      	ldr	r3, [pc, #340]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001d58:	2180      	movs	r1, #128	@ 0x80
 8001d5a:	0049      	lsls	r1, r1, #1
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7fe ffa4 	bl	8000cac <HAL_GetTick>
 8001d64:	0003      	movs	r3, r0
 8001d66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6a:	f7fe ff9f 	bl	8000cac <HAL_GetTick>
 8001d6e:	0002      	movs	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e209      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2380      	movs	r3, #128	@ 0x80
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4013      	ands	r3, r2
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d88:	4b48      	ldr	r3, [pc, #288]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	4a4a      	ldr	r2, [pc, #296]	@ (8001eb8 <HAL_RCC_OscConfig+0x338>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	0019      	movs	r1, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	021a      	lsls	r2, r3, #8
 8001d98:	4b44      	ldr	r3, [pc, #272]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	e01b      	b.n	8001dd8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001da0:	4b42      	ldr	r3, [pc, #264]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b41      	ldr	r3, [pc, #260]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001da6:	4949      	ldr	r1, [pc, #292]	@ (8001ecc <HAL_RCC_OscConfig+0x34c>)
 8001da8:	400a      	ands	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7fe ff7e 	bl	8000cac <HAL_GetTick>
 8001db0:	0003      	movs	r3, r0
 8001db2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db6:	f7fe ff79 	bl	8000cac <HAL_GetTick>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e1e3      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dc8:	4b38      	ldr	r3, [pc, #224]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2380      	movs	r3, #128	@ 0x80
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d1f0      	bne.n	8001db6 <HAL_RCC_OscConfig+0x236>
 8001dd4:	e000      	b.n	8001dd8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2208      	movs	r2, #8
 8001dde:	4013      	ands	r3, r2
 8001de0:	d047      	beq.n	8001e72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001de2:	4b32      	ldr	r3, [pc, #200]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2238      	movs	r2, #56	@ 0x38
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b18      	cmp	r3, #24
 8001dec:	d10a      	bne.n	8001e04 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001dee:	4b2f      	ldr	r3, [pc, #188]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df2:	2202      	movs	r2, #2
 8001df4:	4013      	ands	r3, r2
 8001df6:	d03c      	beq.n	8001e72 <HAL_RCC_OscConfig+0x2f2>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d138      	bne.n	8001e72 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e1c5      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d019      	beq.n	8001e40 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e0c:	4b27      	ldr	r3, [pc, #156]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001e0e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e10:	4b26      	ldr	r3, [pc, #152]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001e12:	2101      	movs	r1, #1
 8001e14:	430a      	orrs	r2, r1
 8001e16:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7fe ff48 	bl	8000cac <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e22:	f7fe ff43 	bl	8000cac <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e1ad      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e34:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e38:	2202      	movs	r2, #2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d0f1      	beq.n	8001e22 <HAL_RCC_OscConfig+0x2a2>
 8001e3e:	e018      	b.n	8001e72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001e40:	4b1a      	ldr	r3, [pc, #104]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001e42:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e44:	4b19      	ldr	r3, [pc, #100]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001e46:	2101      	movs	r1, #1
 8001e48:	438a      	bics	r2, r1
 8001e4a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7fe ff2e 	bl	8000cac <HAL_GetTick>
 8001e50:	0003      	movs	r3, r0
 8001e52:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e56:	f7fe ff29 	bl	8000cac <HAL_GetTick>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e193      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e68:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d1f1      	bne.n	8001e56 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2204      	movs	r2, #4
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d100      	bne.n	8001e7e <HAL_RCC_OscConfig+0x2fe>
 8001e7c:	e0c6      	b.n	800200c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7e:	231f      	movs	r3, #31
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e86:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2238      	movs	r2, #56	@ 0x38
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b20      	cmp	r3, #32
 8001e90:	d11e      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_RCC_OscConfig+0x32c>)
 8001e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e96:	2202      	movs	r2, #2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d100      	bne.n	8001e9e <HAL_RCC_OscConfig+0x31e>
 8001e9c:	e0b6      	b.n	800200c <HAL_RCC_OscConfig+0x48c>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d000      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x328>
 8001ea6:	e0b1      	b.n	800200c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e171      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	fffeffff 	.word	0xfffeffff
 8001eb4:	fffbffff 	.word	0xfffbffff
 8001eb8:	ffff80ff 	.word	0xffff80ff
 8001ebc:	ffffc7ff 	.word	0xffffc7ff
 8001ec0:	00f42400 	.word	0x00f42400
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000004 	.word	0x20000004
 8001ecc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ed0:	4bb1      	ldr	r3, [pc, #708]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8001ed2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ed4:	2380      	movs	r3, #128	@ 0x80
 8001ed6:	055b      	lsls	r3, r3, #21
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x360>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x362>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d011      	beq.n	8001f0a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	4bac      	ldr	r3, [pc, #688]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8001ee8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eea:	4bab      	ldr	r3, [pc, #684]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8001eec:	2180      	movs	r1, #128	@ 0x80
 8001eee:	0549      	lsls	r1, r1, #21
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ef4:	4ba8      	ldr	r3, [pc, #672]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8001ef6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ef8:	2380      	movs	r3, #128	@ 0x80
 8001efa:	055b      	lsls	r3, r3, #21
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001f02:	231f      	movs	r3, #31
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0a:	4ba4      	ldr	r3, [pc, #656]	@ (800219c <HAL_RCC_OscConfig+0x61c>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	2380      	movs	r3, #128	@ 0x80
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4013      	ands	r3, r2
 8001f14:	d11a      	bne.n	8001f4c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f16:	4ba1      	ldr	r3, [pc, #644]	@ (800219c <HAL_RCC_OscConfig+0x61c>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4ba0      	ldr	r3, [pc, #640]	@ (800219c <HAL_RCC_OscConfig+0x61c>)
 8001f1c:	2180      	movs	r1, #128	@ 0x80
 8001f1e:	0049      	lsls	r1, r1, #1
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001f24:	f7fe fec2 	bl	8000cac <HAL_GetTick>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2e:	f7fe febd 	bl	8000cac <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e127      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f40:	4b96      	ldr	r3, [pc, #600]	@ (800219c <HAL_RCC_OscConfig+0x61c>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d106      	bne.n	8001f62 <HAL_RCC_OscConfig+0x3e2>
 8001f54:	4b90      	ldr	r3, [pc, #576]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8001f56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f58:	4b8f      	ldr	r3, [pc, #572]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f60:	e01c      	b.n	8001f9c <HAL_RCC_OscConfig+0x41c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b05      	cmp	r3, #5
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x404>
 8001f6a:	4b8b      	ldr	r3, [pc, #556]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8001f6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f6e:	4b8a      	ldr	r3, [pc, #552]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8001f70:	2104      	movs	r1, #4
 8001f72:	430a      	orrs	r2, r1
 8001f74:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f76:	4b88      	ldr	r3, [pc, #544]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8001f78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f7a:	4b87      	ldr	r3, [pc, #540]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f82:	e00b      	b.n	8001f9c <HAL_RCC_OscConfig+0x41c>
 8001f84:	4b84      	ldr	r3, [pc, #528]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8001f86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f88:	4b83      	ldr	r3, [pc, #524]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	438a      	bics	r2, r1
 8001f8e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f90:	4b81      	ldr	r3, [pc, #516]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8001f92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f94:	4b80      	ldr	r3, [pc, #512]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8001f96:	2104      	movs	r1, #4
 8001f98:	438a      	bics	r2, r1
 8001f9a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d014      	beq.n	8001fce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fe82 	bl	8000cac <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fac:	e009      	b.n	8001fc2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7fe fe7d 	bl	8000cac <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	4a79      	ldr	r2, [pc, #484]	@ (80021a0 <HAL_RCC_OscConfig+0x620>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e0e6      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc2:	4b75      	ldr	r3, [pc, #468]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x42e>
 8001fcc:	e013      	b.n	8001ff6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fce:	f7fe fe6d 	bl	8000cac <HAL_GetTick>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fd6:	e009      	b.n	8001fec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd8:	f7fe fe68 	bl	8000cac <HAL_GetTick>
 8001fdc:	0002      	movs	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	4a6f      	ldr	r2, [pc, #444]	@ (80021a0 <HAL_RCC_OscConfig+0x620>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e0d1      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fec:	4b6a      	ldr	r3, [pc, #424]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8001fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001ff6:	231f      	movs	r3, #31
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d105      	bne.n	800200c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002000:	4b65      	ldr	r3, [pc, #404]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8002002:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002004:	4b64      	ldr	r3, [pc, #400]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8002006:	4967      	ldr	r1, [pc, #412]	@ (80021a4 <HAL_RCC_OscConfig+0x624>)
 8002008:	400a      	ands	r2, r1
 800200a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d100      	bne.n	8002016 <HAL_RCC_OscConfig+0x496>
 8002014:	e0bb      	b.n	800218e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002016:	4b60      	ldr	r3, [pc, #384]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2238      	movs	r2, #56	@ 0x38
 800201c:	4013      	ands	r3, r2
 800201e:	2b10      	cmp	r3, #16
 8002020:	d100      	bne.n	8002024 <HAL_RCC_OscConfig+0x4a4>
 8002022:	e07b      	b.n	800211c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d156      	bne.n	80020da <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202c:	4b5a      	ldr	r3, [pc, #360]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b59      	ldr	r3, [pc, #356]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8002032:	495d      	ldr	r1, [pc, #372]	@ (80021a8 <HAL_RCC_OscConfig+0x628>)
 8002034:	400a      	ands	r2, r1
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7fe fe38 	bl	8000cac <HAL_GetTick>
 800203c:	0003      	movs	r3, r0
 800203e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002042:	f7fe fe33 	bl	8000cac <HAL_GetTick>
 8002046:	0002      	movs	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e09d      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002054:	4b50      	ldr	r3, [pc, #320]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2380      	movs	r3, #128	@ 0x80
 800205a:	049b      	lsls	r3, r3, #18
 800205c:	4013      	ands	r3, r2
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002060:	4b4d      	ldr	r3, [pc, #308]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4a51      	ldr	r2, [pc, #324]	@ (80021ac <HAL_RCC_OscConfig+0x62c>)
 8002066:	4013      	ands	r3, r2
 8002068:	0019      	movs	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1a      	ldr	r2, [r3, #32]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002078:	021b      	lsls	r3, r3, #8
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208c:	431a      	orrs	r2, r3
 800208e:	4b42      	ldr	r3, [pc, #264]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8002090:	430a      	orrs	r2, r1
 8002092:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002094:	4b40      	ldr	r3, [pc, #256]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b3f      	ldr	r3, [pc, #252]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 800209a:	2180      	movs	r1, #128	@ 0x80
 800209c:	0449      	lsls	r1, r1, #17
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80020a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 80020a8:	2180      	movs	r1, #128	@ 0x80
 80020aa:	0549      	lsls	r1, r1, #21
 80020ac:	430a      	orrs	r2, r1
 80020ae:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe fdfc 	bl	8000cac <HAL_GetTick>
 80020b4:	0003      	movs	r3, r0
 80020b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ba:	f7fe fdf7 	bl	8000cac <HAL_GetTick>
 80020be:	0002      	movs	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e061      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020cc:	4b32      	ldr	r3, [pc, #200]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2380      	movs	r3, #128	@ 0x80
 80020d2:	049b      	lsls	r3, r3, #18
 80020d4:	4013      	ands	r3, r2
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x53a>
 80020d8:	e059      	b.n	800218e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020da:	4b2f      	ldr	r3, [pc, #188]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b2e      	ldr	r3, [pc, #184]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 80020e0:	4931      	ldr	r1, [pc, #196]	@ (80021a8 <HAL_RCC_OscConfig+0x628>)
 80020e2:	400a      	ands	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7fe fde1 	bl	8000cac <HAL_GetTick>
 80020ea:	0003      	movs	r3, r0
 80020ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f0:	f7fe fddc 	bl	8000cac <HAL_GetTick>
 80020f4:	0002      	movs	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e046      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002102:	4b25      	ldr	r3, [pc, #148]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	2380      	movs	r3, #128	@ 0x80
 8002108:	049b      	lsls	r3, r3, #18
 800210a:	4013      	ands	r3, r2
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800210e:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	4b21      	ldr	r3, [pc, #132]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 8002114:	4926      	ldr	r1, [pc, #152]	@ (80021b0 <HAL_RCC_OscConfig+0x630>)
 8002116:	400a      	ands	r2, r1
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	e038      	b.n	800218e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e033      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002128:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <HAL_RCC_OscConfig+0x618>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2203      	movs	r2, #3
 8002132:	401a      	ands	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	429a      	cmp	r2, r3
 800213a:	d126      	bne.n	800218a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2270      	movs	r2, #112	@ 0x70
 8002140:	401a      	ands	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002146:	429a      	cmp	r2, r3
 8002148:	d11f      	bne.n	800218a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	23fe      	movs	r3, #254	@ 0xfe
 800214e:	01db      	lsls	r3, r3, #7
 8002150:	401a      	ands	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002156:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002158:	429a      	cmp	r2, r3
 800215a:	d116      	bne.n	800218a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	23f8      	movs	r3, #248	@ 0xf8
 8002160:	039b      	lsls	r3, r3, #14
 8002162:	401a      	ands	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d10e      	bne.n	800218a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	23e0      	movs	r3, #224	@ 0xe0
 8002170:	051b      	lsls	r3, r3, #20
 8002172:	401a      	ands	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002178:	429a      	cmp	r2, r3
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	0f5b      	lsrs	r3, r3, #29
 8002180:	075a      	lsls	r2, r3, #29
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	0018      	movs	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	b008      	add	sp, #32
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000
 800219c:	40007000 	.word	0x40007000
 80021a0:	00001388 	.word	0x00001388
 80021a4:	efffffff 	.word	0xefffffff
 80021a8:	feffffff 	.word	0xfeffffff
 80021ac:	11c1808c 	.word	0x11c1808c
 80021b0:	eefefffc 	.word	0xeefefffc

080021b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0e9      	b.n	800239c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021c8:	4b76      	ldr	r3, [pc, #472]	@ (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2207      	movs	r2, #7
 80021ce:	4013      	ands	r3, r2
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d91e      	bls.n	8002214 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b73      	ldr	r3, [pc, #460]	@ (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2207      	movs	r2, #7
 80021dc:	4393      	bics	r3, r2
 80021de:	0019      	movs	r1, r3
 80021e0:	4b70      	ldr	r3, [pc, #448]	@ (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021e8:	f7fe fd60 	bl	8000cac <HAL_GetTick>
 80021ec:	0003      	movs	r3, r0
 80021ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021f0:	e009      	b.n	8002206 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f2:	f7fe fd5b 	bl	8000cac <HAL_GetTick>
 80021f6:	0002      	movs	r2, r0
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	4a6a      	ldr	r2, [pc, #424]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e0ca      	b.n	800239c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002206:	4b67      	ldr	r3, [pc, #412]	@ (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2207      	movs	r2, #7
 800220c:	4013      	ands	r3, r2
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d1ee      	bne.n	80021f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2202      	movs	r2, #2
 800221a:	4013      	ands	r3, r2
 800221c:	d015      	beq.n	800224a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2204      	movs	r2, #4
 8002224:	4013      	ands	r3, r2
 8002226:	d006      	beq.n	8002236 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002228:	4b60      	ldr	r3, [pc, #384]	@ (80023ac <HAL_RCC_ClockConfig+0x1f8>)
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	4b5f      	ldr	r3, [pc, #380]	@ (80023ac <HAL_RCC_ClockConfig+0x1f8>)
 800222e:	21e0      	movs	r1, #224	@ 0xe0
 8002230:	01c9      	lsls	r1, r1, #7
 8002232:	430a      	orrs	r2, r1
 8002234:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002236:	4b5d      	ldr	r3, [pc, #372]	@ (80023ac <HAL_RCC_ClockConfig+0x1f8>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	4a5d      	ldr	r2, [pc, #372]	@ (80023b0 <HAL_RCC_ClockConfig+0x1fc>)
 800223c:	4013      	ands	r3, r2
 800223e:	0019      	movs	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	4b59      	ldr	r3, [pc, #356]	@ (80023ac <HAL_RCC_ClockConfig+0x1f8>)
 8002246:	430a      	orrs	r2, r1
 8002248:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2201      	movs	r2, #1
 8002250:	4013      	ands	r3, r2
 8002252:	d057      	beq.n	8002304 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d107      	bne.n	800226c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800225c:	4b53      	ldr	r3, [pc, #332]	@ (80023ac <HAL_RCC_ClockConfig+0x1f8>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	2380      	movs	r3, #128	@ 0x80
 8002262:	029b      	lsls	r3, r3, #10
 8002264:	4013      	ands	r3, r2
 8002266:	d12b      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e097      	b.n	800239c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d107      	bne.n	8002284 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002274:	4b4d      	ldr	r3, [pc, #308]	@ (80023ac <HAL_RCC_ClockConfig+0x1f8>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	2380      	movs	r3, #128	@ 0x80
 800227a:	049b      	lsls	r3, r3, #18
 800227c:	4013      	ands	r3, r2
 800227e:	d11f      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e08b      	b.n	800239c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d107      	bne.n	800229c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800228c:	4b47      	ldr	r3, [pc, #284]	@ (80023ac <HAL_RCC_ClockConfig+0x1f8>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	2380      	movs	r3, #128	@ 0x80
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4013      	ands	r3, r2
 8002296:	d113      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e07f      	b.n	800239c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d106      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022a4:	4b41      	ldr	r3, [pc, #260]	@ (80023ac <HAL_RCC_ClockConfig+0x1f8>)
 80022a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a8:	2202      	movs	r2, #2
 80022aa:	4013      	ands	r3, r2
 80022ac:	d108      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e074      	b.n	800239c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022b2:	4b3e      	ldr	r3, [pc, #248]	@ (80023ac <HAL_RCC_ClockConfig+0x1f8>)
 80022b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b6:	2202      	movs	r2, #2
 80022b8:	4013      	ands	r3, r2
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e06d      	b.n	800239c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022c0:	4b3a      	ldr	r3, [pc, #232]	@ (80023ac <HAL_RCC_ClockConfig+0x1f8>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2207      	movs	r2, #7
 80022c6:	4393      	bics	r3, r2
 80022c8:	0019      	movs	r1, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	4b37      	ldr	r3, [pc, #220]	@ (80023ac <HAL_RCC_ClockConfig+0x1f8>)
 80022d0:	430a      	orrs	r2, r1
 80022d2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d4:	f7fe fcea 	bl	8000cac <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022dc:	e009      	b.n	80022f2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022de:	f7fe fce5 	bl	8000cac <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	4a2f      	ldr	r2, [pc, #188]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e054      	b.n	800239c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b2e      	ldr	r3, [pc, #184]	@ (80023ac <HAL_RCC_ClockConfig+0x1f8>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2238      	movs	r2, #56	@ 0x38
 80022f8:	401a      	ands	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	429a      	cmp	r2, r3
 8002302:	d1ec      	bne.n	80022de <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002304:	4b27      	ldr	r3, [pc, #156]	@ (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2207      	movs	r2, #7
 800230a:	4013      	ands	r3, r2
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d21e      	bcs.n	8002350 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2207      	movs	r2, #7
 8002318:	4393      	bics	r3, r2
 800231a:	0019      	movs	r1, r3
 800231c:	4b21      	ldr	r3, [pc, #132]	@ (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002324:	f7fe fcc2 	bl	8000cac <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800232c:	e009      	b.n	8002342 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232e:	f7fe fcbd 	bl	8000cac <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	4a1b      	ldr	r2, [pc, #108]	@ (80023a8 <HAL_RCC_ClockConfig+0x1f4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e02c      	b.n	800239c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002342:	4b18      	ldr	r3, [pc, #96]	@ (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2207      	movs	r2, #7
 8002348:	4013      	ands	r3, r2
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d1ee      	bne.n	800232e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2204      	movs	r2, #4
 8002356:	4013      	ands	r3, r2
 8002358:	d009      	beq.n	800236e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800235a:	4b14      	ldr	r3, [pc, #80]	@ (80023ac <HAL_RCC_ClockConfig+0x1f8>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	4a15      	ldr	r2, [pc, #84]	@ (80023b4 <HAL_RCC_ClockConfig+0x200>)
 8002360:	4013      	ands	r3, r2
 8002362:	0019      	movs	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <HAL_RCC_ClockConfig+0x1f8>)
 800236a:	430a      	orrs	r2, r1
 800236c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800236e:	f000 f829 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8002372:	0001      	movs	r1, r0
 8002374:	4b0d      	ldr	r3, [pc, #52]	@ (80023ac <HAL_RCC_ClockConfig+0x1f8>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	220f      	movs	r2, #15
 800237c:	401a      	ands	r2, r3
 800237e:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <HAL_RCC_ClockConfig+0x204>)
 8002380:	0092      	lsls	r2, r2, #2
 8002382:	58d3      	ldr	r3, [r2, r3]
 8002384:	221f      	movs	r2, #31
 8002386:	4013      	ands	r3, r2
 8002388:	000a      	movs	r2, r1
 800238a:	40da      	lsrs	r2, r3
 800238c:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <HAL_RCC_ClockConfig+0x208>)
 800238e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002390:	4b0b      	ldr	r3, [pc, #44]	@ (80023c0 <HAL_RCC_ClockConfig+0x20c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0018      	movs	r0, r3
 8002396:	f7fe fc2d 	bl	8000bf4 <HAL_InitTick>
 800239a:	0003      	movs	r3, r0
}
 800239c:	0018      	movs	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	b004      	add	sp, #16
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40022000 	.word	0x40022000
 80023a8:	00001388 	.word	0x00001388
 80023ac:	40021000 	.word	0x40021000
 80023b0:	fffff0ff 	.word	0xfffff0ff
 80023b4:	ffff8fff 	.word	0xffff8fff
 80023b8:	080035b8 	.word	0x080035b8
 80023bc:	20000000 	.word	0x20000000
 80023c0:	20000004 	.word	0x20000004

080023c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ca:	4b3c      	ldr	r3, [pc, #240]	@ (80024bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2238      	movs	r2, #56	@ 0x38
 80023d0:	4013      	ands	r3, r2
 80023d2:	d10f      	bne.n	80023f4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80023d4:	4b39      	ldr	r3, [pc, #228]	@ (80024bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	0adb      	lsrs	r3, r3, #11
 80023da:	2207      	movs	r2, #7
 80023dc:	4013      	ands	r3, r2
 80023de:	2201      	movs	r2, #1
 80023e0:	409a      	lsls	r2, r3
 80023e2:	0013      	movs	r3, r2
 80023e4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80023e6:	6839      	ldr	r1, [r7, #0]
 80023e8:	4835      	ldr	r0, [pc, #212]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80023ea:	f7fd fe8b 	bl	8000104 <__udivsi3>
 80023ee:	0003      	movs	r3, r0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	e05d      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023f4:	4b31      	ldr	r3, [pc, #196]	@ (80024bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2238      	movs	r2, #56	@ 0x38
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d102      	bne.n	8002406 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002400:	4b30      	ldr	r3, [pc, #192]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	e054      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002406:	4b2d      	ldr	r3, [pc, #180]	@ (80024bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2238      	movs	r2, #56	@ 0x38
 800240c:	4013      	ands	r3, r2
 800240e:	2b10      	cmp	r3, #16
 8002410:	d138      	bne.n	8002484 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002412:	4b2a      	ldr	r3, [pc, #168]	@ (80024bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2203      	movs	r2, #3
 8002418:	4013      	ands	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800241c:	4b27      	ldr	r3, [pc, #156]	@ (80024bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	2207      	movs	r2, #7
 8002424:	4013      	ands	r3, r2
 8002426:	3301      	adds	r3, #1
 8002428:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d10d      	bne.n	800244c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	4824      	ldr	r0, [pc, #144]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002434:	f7fd fe66 	bl	8000104 <__udivsi3>
 8002438:	0003      	movs	r3, r0
 800243a:	0019      	movs	r1, r3
 800243c:	4b1f      	ldr	r3, [pc, #124]	@ (80024bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	227f      	movs	r2, #127	@ 0x7f
 8002444:	4013      	ands	r3, r2
 8002446:	434b      	muls	r3, r1
 8002448:	617b      	str	r3, [r7, #20]
        break;
 800244a:	e00d      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	481c      	ldr	r0, [pc, #112]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002450:	f7fd fe58 	bl	8000104 <__udivsi3>
 8002454:	0003      	movs	r3, r0
 8002456:	0019      	movs	r1, r3
 8002458:	4b18      	ldr	r3, [pc, #96]	@ (80024bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	227f      	movs	r2, #127	@ 0x7f
 8002460:	4013      	ands	r3, r2
 8002462:	434b      	muls	r3, r1
 8002464:	617b      	str	r3, [r7, #20]
        break;
 8002466:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002468:	4b14      	ldr	r3, [pc, #80]	@ (80024bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	0f5b      	lsrs	r3, r3, #29
 800246e:	2207      	movs	r2, #7
 8002470:	4013      	ands	r3, r2
 8002472:	3301      	adds	r3, #1
 8002474:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	6978      	ldr	r0, [r7, #20]
 800247a:	f7fd fe43 	bl	8000104 <__udivsi3>
 800247e:	0003      	movs	r3, r0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	e015      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002484:	4b0d      	ldr	r3, [pc, #52]	@ (80024bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2238      	movs	r2, #56	@ 0x38
 800248a:	4013      	ands	r3, r2
 800248c:	2b20      	cmp	r3, #32
 800248e:	d103      	bne.n	8002498 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002490:	2380      	movs	r3, #128	@ 0x80
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	e00b      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002498:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2238      	movs	r2, #56	@ 0x38
 800249e:	4013      	ands	r3, r2
 80024a0:	2b18      	cmp	r3, #24
 80024a2:	d103      	bne.n	80024ac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80024a4:	23fa      	movs	r3, #250	@ 0xfa
 80024a6:	01db      	lsls	r3, r3, #7
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	e001      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024b0:	693b      	ldr	r3, [r7, #16]
}
 80024b2:	0018      	movs	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b006      	add	sp, #24
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	46c0      	nop			@ (mov r8, r8)
 80024bc:	40021000 	.word	0x40021000
 80024c0:	00f42400 	.word	0x00f42400
 80024c4:	007a1200 	.word	0x007a1200

080024c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024cc:	4b02      	ldr	r3, [pc, #8]	@ (80024d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	0018      	movs	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			@ (mov r8, r8)
 80024d8:	20000000 	.word	0x20000000

080024dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024dc:	b5b0      	push	{r4, r5, r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80024e0:	f7ff fff2 	bl	80024c8 <HAL_RCC_GetHCLKFreq>
 80024e4:	0004      	movs	r4, r0
 80024e6:	f7ff fb3f 	bl	8001b68 <LL_RCC_GetAPB1Prescaler>
 80024ea:	0003      	movs	r3, r0
 80024ec:	0b1a      	lsrs	r2, r3, #12
 80024ee:	4b05      	ldr	r3, [pc, #20]	@ (8002504 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024f0:	0092      	lsls	r2, r2, #2
 80024f2:	58d3      	ldr	r3, [r2, r3]
 80024f4:	221f      	movs	r2, #31
 80024f6:	4013      	ands	r3, r2
 80024f8:	40dc      	lsrs	r4, r3
 80024fa:	0023      	movs	r3, r4
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	bdb0      	pop	{r4, r5, r7, pc}
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	080035f8 	.word	0x080035f8

08002508 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002510:	2313      	movs	r3, #19
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002518:	2312      	movs	r3, #18
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2380      	movs	r3, #128	@ 0x80
 8002526:	029b      	lsls	r3, r3, #10
 8002528:	4013      	ands	r3, r2
 800252a:	d100      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800252c:	e0a3      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252e:	2011      	movs	r0, #17
 8002530:	183b      	adds	r3, r7, r0
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002536:	4bc3      	ldr	r3, [pc, #780]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002538:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800253a:	2380      	movs	r3, #128	@ 0x80
 800253c:	055b      	lsls	r3, r3, #21
 800253e:	4013      	ands	r3, r2
 8002540:	d110      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	4bc0      	ldr	r3, [pc, #768]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002544:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002546:	4bbf      	ldr	r3, [pc, #764]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002548:	2180      	movs	r1, #128	@ 0x80
 800254a:	0549      	lsls	r1, r1, #21
 800254c:	430a      	orrs	r2, r1
 800254e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002550:	4bbc      	ldr	r3, [pc, #752]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002552:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002554:	2380      	movs	r3, #128	@ 0x80
 8002556:	055b      	lsls	r3, r3, #21
 8002558:	4013      	ands	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255e:	183b      	adds	r3, r7, r0
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002564:	4bb8      	ldr	r3, [pc, #736]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4bb7      	ldr	r3, [pc, #732]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800256a:	2180      	movs	r1, #128	@ 0x80
 800256c:	0049      	lsls	r1, r1, #1
 800256e:	430a      	orrs	r2, r1
 8002570:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002572:	f7fe fb9b 	bl	8000cac <HAL_GetTick>
 8002576:	0003      	movs	r3, r0
 8002578:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800257a:	e00b      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257c:	f7fe fb96 	bl	8000cac <HAL_GetTick>
 8002580:	0002      	movs	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d904      	bls.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800258a:	2313      	movs	r3, #19
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	2203      	movs	r2, #3
 8002590:	701a      	strb	r2, [r3, #0]
        break;
 8002592:	e005      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002594:	4bac      	ldr	r3, [pc, #688]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	2380      	movs	r3, #128	@ 0x80
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4013      	ands	r3, r2
 800259e:	d0ed      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80025a0:	2313      	movs	r3, #19
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d154      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025aa:	4ba6      	ldr	r3, [pc, #664]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025ae:	23c0      	movs	r3, #192	@ 0xc0
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4013      	ands	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d019      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d014      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025c6:	4b9f      	ldr	r3, [pc, #636]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ca:	4aa0      	ldr	r2, [pc, #640]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025d0:	4b9c      	ldr	r3, [pc, #624]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025d4:	4b9b      	ldr	r3, [pc, #620]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025d6:	2180      	movs	r1, #128	@ 0x80
 80025d8:	0249      	lsls	r1, r1, #9
 80025da:	430a      	orrs	r2, r1
 80025dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025de:	4b99      	ldr	r3, [pc, #612]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025e2:	4b98      	ldr	r3, [pc, #608]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025e4:	499a      	ldr	r1, [pc, #616]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80025e6:	400a      	ands	r2, r1
 80025e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025ea:	4b96      	ldr	r3, [pc, #600]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2201      	movs	r2, #1
 80025f4:	4013      	ands	r3, r2
 80025f6:	d016      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe fb58 	bl	8000cac <HAL_GetTick>
 80025fc:	0003      	movs	r3, r0
 80025fe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002600:	e00c      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7fe fb53 	bl	8000cac <HAL_GetTick>
 8002606:	0002      	movs	r2, r0
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	4a91      	ldr	r2, [pc, #580]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d904      	bls.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002612:	2313      	movs	r3, #19
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	2203      	movs	r2, #3
 8002618:	701a      	strb	r2, [r3, #0]
            break;
 800261a:	e004      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800261c:	4b89      	ldr	r3, [pc, #548]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800261e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002620:	2202      	movs	r2, #2
 8002622:	4013      	ands	r3, r2
 8002624:	d0ed      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002626:	2313      	movs	r3, #19
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10a      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002630:	4b84      	ldr	r3, [pc, #528]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002634:	4a85      	ldr	r2, [pc, #532]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002636:	4013      	ands	r3, r2
 8002638:	0019      	movs	r1, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800263e:	4b81      	ldr	r3, [pc, #516]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002640:	430a      	orrs	r2, r1
 8002642:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002644:	e00c      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002646:	2312      	movs	r3, #18
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	2213      	movs	r2, #19
 800264c:	18ba      	adds	r2, r7, r2
 800264e:	7812      	ldrb	r2, [r2, #0]
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	e005      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002654:	2312      	movs	r3, #18
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	2213      	movs	r2, #19
 800265a:	18ba      	adds	r2, r7, r2
 800265c:	7812      	ldrb	r2, [r2, #0]
 800265e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002660:	2311      	movs	r3, #17
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d105      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266a:	4b76      	ldr	r3, [pc, #472]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800266c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800266e:	4b75      	ldr	r3, [pc, #468]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002670:	4979      	ldr	r1, [pc, #484]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002672:	400a      	ands	r2, r1
 8002674:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2201      	movs	r2, #1
 800267c:	4013      	ands	r3, r2
 800267e:	d009      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002680:	4b70      	ldr	r3, [pc, #448]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002684:	2203      	movs	r2, #3
 8002686:	4393      	bics	r3, r2
 8002688:	0019      	movs	r1, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4b6d      	ldr	r3, [pc, #436]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002690:	430a      	orrs	r2, r1
 8002692:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2202      	movs	r2, #2
 800269a:	4013      	ands	r3, r2
 800269c:	d009      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800269e:	4b69      	ldr	r3, [pc, #420]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a2:	220c      	movs	r2, #12
 80026a4:	4393      	bics	r3, r2
 80026a6:	0019      	movs	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	4b65      	ldr	r3, [pc, #404]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026ae:	430a      	orrs	r2, r1
 80026b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2210      	movs	r2, #16
 80026b8:	4013      	ands	r3, r2
 80026ba:	d009      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026bc:	4b61      	ldr	r3, [pc, #388]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c0:	4a66      	ldr	r2, [pc, #408]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	0019      	movs	r1, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	4b5e      	ldr	r3, [pc, #376]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026cc:	430a      	orrs	r2, r1
 80026ce:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2380      	movs	r3, #128	@ 0x80
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4013      	ands	r3, r2
 80026da:	d009      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026dc:	4b59      	ldr	r3, [pc, #356]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e0:	4a5f      	ldr	r2, [pc, #380]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	0019      	movs	r1, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	4b56      	ldr	r3, [pc, #344]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026ec:	430a      	orrs	r2, r1
 80026ee:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	2380      	movs	r3, #128	@ 0x80
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4013      	ands	r3, r2
 80026fa:	d009      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026fc:	4b51      	ldr	r3, [pc, #324]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002700:	4a58      	ldr	r2, [pc, #352]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002702:	4013      	ands	r3, r2
 8002704:	0019      	movs	r1, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	4b4e      	ldr	r3, [pc, #312]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800270c:	430a      	orrs	r2, r1
 800270e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2220      	movs	r2, #32
 8002716:	4013      	ands	r3, r2
 8002718:	d009      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800271a:	4b4a      	ldr	r3, [pc, #296]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800271c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271e:	4a52      	ldr	r2, [pc, #328]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002720:	4013      	ands	r3, r2
 8002722:	0019      	movs	r1, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	4b46      	ldr	r3, [pc, #280]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800272a:	430a      	orrs	r2, r1
 800272c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	2380      	movs	r3, #128	@ 0x80
 8002734:	01db      	lsls	r3, r3, #7
 8002736:	4013      	ands	r3, r2
 8002738:	d015      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800273a:	4b42      	ldr	r3, [pc, #264]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800273c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	0899      	lsrs	r1, r3, #2
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1a      	ldr	r2, [r3, #32]
 8002746:	4b3f      	ldr	r3, [pc, #252]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002748:	430a      	orrs	r2, r1
 800274a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1a      	ldr	r2, [r3, #32]
 8002750:	2380      	movs	r3, #128	@ 0x80
 8002752:	05db      	lsls	r3, r3, #23
 8002754:	429a      	cmp	r2, r3
 8002756:	d106      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002758:	4b3a      	ldr	r3, [pc, #232]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	4b39      	ldr	r3, [pc, #228]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800275e:	2180      	movs	r1, #128	@ 0x80
 8002760:	0249      	lsls	r1, r1, #9
 8002762:	430a      	orrs	r2, r1
 8002764:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	2380      	movs	r3, #128	@ 0x80
 800276c:	031b      	lsls	r3, r3, #12
 800276e:	4013      	ands	r3, r2
 8002770:	d009      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002772:	4b34      	ldr	r3, [pc, #208]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002776:	2240      	movs	r2, #64	@ 0x40
 8002778:	4393      	bics	r3, r2
 800277a:	0019      	movs	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002780:	4b30      	ldr	r3, [pc, #192]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002782:	430a      	orrs	r2, r1
 8002784:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	2380      	movs	r3, #128	@ 0x80
 800278c:	039b      	lsls	r3, r3, #14
 800278e:	4013      	ands	r3, r2
 8002790:	d016      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002792:	4b2c      	ldr	r3, [pc, #176]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002796:	4a35      	ldr	r2, [pc, #212]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002798:	4013      	ands	r3, r2
 800279a:	0019      	movs	r1, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027a0:	4b28      	ldr	r3, [pc, #160]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027a2:	430a      	orrs	r2, r1
 80027a4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027aa:	2380      	movs	r3, #128	@ 0x80
 80027ac:	03db      	lsls	r3, r3, #15
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d106      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80027b2:	4b24      	ldr	r3, [pc, #144]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	4b23      	ldr	r3, [pc, #140]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027b8:	2180      	movs	r1, #128	@ 0x80
 80027ba:	0449      	lsls	r1, r1, #17
 80027bc:	430a      	orrs	r2, r1
 80027be:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	2380      	movs	r3, #128	@ 0x80
 80027c6:	03db      	lsls	r3, r3, #15
 80027c8:	4013      	ands	r3, r2
 80027ca:	d016      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80027cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d0:	4a27      	ldr	r2, [pc, #156]	@ (8002870 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	0019      	movs	r1, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027da:	4b1a      	ldr	r3, [pc, #104]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027dc:	430a      	orrs	r2, r1
 80027de:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027e4:	2380      	movs	r3, #128	@ 0x80
 80027e6:	045b      	lsls	r3, r3, #17
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d106      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80027ec:	4b15      	ldr	r3, [pc, #84]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	4b14      	ldr	r3, [pc, #80]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027f2:	2180      	movs	r1, #128	@ 0x80
 80027f4:	0449      	lsls	r1, r1, #17
 80027f6:	430a      	orrs	r2, r1
 80027f8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	2380      	movs	r3, #128	@ 0x80
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	4013      	ands	r3, r2
 8002804:	d016      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002806:	4b0f      	ldr	r3, [pc, #60]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800280a:	4a1a      	ldr	r2, [pc, #104]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800280c:	4013      	ands	r3, r2
 800280e:	0019      	movs	r1, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695a      	ldr	r2, [r3, #20]
 8002814:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002816:	430a      	orrs	r2, r1
 8002818:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695a      	ldr	r2, [r3, #20]
 800281e:	2380      	movs	r3, #128	@ 0x80
 8002820:	01db      	lsls	r3, r3, #7
 8002822:	429a      	cmp	r2, r3
 8002824:	d106      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002826:	4b07      	ldr	r3, [pc, #28]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800282c:	2180      	movs	r1, #128	@ 0x80
 800282e:	0249      	lsls	r1, r1, #9
 8002830:	430a      	orrs	r2, r1
 8002832:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002834:	2312      	movs	r3, #18
 8002836:	18fb      	adds	r3, r7, r3
 8002838:	781b      	ldrb	r3, [r3, #0]
}
 800283a:	0018      	movs	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	b006      	add	sp, #24
 8002840:	bd80      	pop	{r7, pc}
 8002842:	46c0      	nop			@ (mov r8, r8)
 8002844:	40021000 	.word	0x40021000
 8002848:	40007000 	.word	0x40007000
 800284c:	fffffcff 	.word	0xfffffcff
 8002850:	fffeffff 	.word	0xfffeffff
 8002854:	00001388 	.word	0x00001388
 8002858:	efffffff 	.word	0xefffffff
 800285c:	fffff3ff 	.word	0xfffff3ff
 8002860:	fff3ffff 	.word	0xfff3ffff
 8002864:	ffcfffff 	.word	0xffcfffff
 8002868:	ffffcfff 	.word	0xffffcfff
 800286c:	ffbfffff 	.word	0xffbfffff
 8002870:	feffffff 	.word	0xfeffffff
 8002874:	ffff3fff 	.word	0xffff3fff

08002878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e046      	b.n	8002918 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2288      	movs	r2, #136	@ 0x88
 800288e:	589b      	ldr	r3, [r3, r2]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d107      	bne.n	80028a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2284      	movs	r2, #132	@ 0x84
 8002898:	2100      	movs	r1, #0
 800289a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0018      	movs	r0, r3
 80028a0:	f7fe f8e0 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2288      	movs	r2, #136	@ 0x88
 80028a8:	2124      	movs	r1, #36	@ 0x24
 80028aa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2101      	movs	r1, #1
 80028b8:	438a      	bics	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	0018      	movs	r0, r3
 80028c8:	f000 faea 	bl	8002ea0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	0018      	movs	r0, r3
 80028d0:	f000 f828 	bl	8002924 <UART_SetConfig>
 80028d4:	0003      	movs	r3, r0
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e01c      	b.n	8002918 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	490d      	ldr	r1, [pc, #52]	@ (8002920 <HAL_UART_Init+0xa8>)
 80028ea:	400a      	ands	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	212a      	movs	r1, #42	@ 0x2a
 80028fa:	438a      	bics	r2, r1
 80028fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2101      	movs	r1, #1
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0018      	movs	r0, r3
 8002912:	f000 fb79 	bl	8003008 <UART_CheckIdleState>
 8002916:	0003      	movs	r3, r0
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b002      	add	sp, #8
 800291e:	bd80      	pop	{r7, pc}
 8002920:	ffffb7ff 	.word	0xffffb7ff

08002924 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002924:	b5b0      	push	{r4, r5, r7, lr}
 8002926:	b090      	sub	sp, #64	@ 0x40
 8002928:	af00      	add	r7, sp, #0
 800292a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800292c:	231a      	movs	r3, #26
 800292e:	2220      	movs	r2, #32
 8002930:	189b      	adds	r3, r3, r2
 8002932:	19db      	adds	r3, r3, r7
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	431a      	orrs	r2, r3
 8002942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	431a      	orrs	r2, r3
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	4313      	orrs	r3, r2
 800294e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4aaf      	ldr	r2, [pc, #700]	@ (8002c14 <UART_SetConfig+0x2f0>)
 8002958:	4013      	ands	r3, r2
 800295a:	0019      	movs	r1, r3
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002962:	430b      	orrs	r3, r1
 8002964:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4aaa      	ldr	r2, [pc, #680]	@ (8002c18 <UART_SetConfig+0x2f4>)
 800296e:	4013      	ands	r3, r2
 8002970:	0018      	movs	r0, r3
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	68d9      	ldr	r1, [r3, #12]
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	0003      	movs	r3, r0
 800297c:	430b      	orrs	r3, r1
 800297e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4aa4      	ldr	r2, [pc, #656]	@ (8002c1c <UART_SetConfig+0x2f8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d004      	beq.n	800299a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002996:	4313      	orrs	r3, r2
 8002998:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a9f      	ldr	r2, [pc, #636]	@ (8002c20 <UART_SetConfig+0x2fc>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	0019      	movs	r1, r3
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ac:	430b      	orrs	r3, r1
 80029ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80029b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	220f      	movs	r2, #15
 80029b8:	4393      	bics	r3, r2
 80029ba:	0018      	movs	r0, r3
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80029c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	0003      	movs	r3, r0
 80029c6:	430b      	orrs	r3, r1
 80029c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a95      	ldr	r2, [pc, #596]	@ (8002c24 <UART_SetConfig+0x300>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d131      	bne.n	8002a38 <UART_SetConfig+0x114>
 80029d4:	4b94      	ldr	r3, [pc, #592]	@ (8002c28 <UART_SetConfig+0x304>)
 80029d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d8:	2203      	movs	r2, #3
 80029da:	4013      	ands	r3, r2
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d01d      	beq.n	8002a1c <UART_SetConfig+0xf8>
 80029e0:	d823      	bhi.n	8002a2a <UART_SetConfig+0x106>
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d00c      	beq.n	8002a00 <UART_SetConfig+0xdc>
 80029e6:	d820      	bhi.n	8002a2a <UART_SetConfig+0x106>
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <UART_SetConfig+0xce>
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d00e      	beq.n	8002a0e <UART_SetConfig+0xea>
 80029f0:	e01b      	b.n	8002a2a <UART_SetConfig+0x106>
 80029f2:	231b      	movs	r3, #27
 80029f4:	2220      	movs	r2, #32
 80029f6:	189b      	adds	r3, r3, r2
 80029f8:	19db      	adds	r3, r3, r7
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
 80029fe:	e0b4      	b.n	8002b6a <UART_SetConfig+0x246>
 8002a00:	231b      	movs	r3, #27
 8002a02:	2220      	movs	r2, #32
 8002a04:	189b      	adds	r3, r3, r2
 8002a06:	19db      	adds	r3, r3, r7
 8002a08:	2202      	movs	r2, #2
 8002a0a:	701a      	strb	r2, [r3, #0]
 8002a0c:	e0ad      	b.n	8002b6a <UART_SetConfig+0x246>
 8002a0e:	231b      	movs	r3, #27
 8002a10:	2220      	movs	r2, #32
 8002a12:	189b      	adds	r3, r3, r2
 8002a14:	19db      	adds	r3, r3, r7
 8002a16:	2204      	movs	r2, #4
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	e0a6      	b.n	8002b6a <UART_SetConfig+0x246>
 8002a1c:	231b      	movs	r3, #27
 8002a1e:	2220      	movs	r2, #32
 8002a20:	189b      	adds	r3, r3, r2
 8002a22:	19db      	adds	r3, r3, r7
 8002a24:	2208      	movs	r2, #8
 8002a26:	701a      	strb	r2, [r3, #0]
 8002a28:	e09f      	b.n	8002b6a <UART_SetConfig+0x246>
 8002a2a:	231b      	movs	r3, #27
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	189b      	adds	r3, r3, r2
 8002a30:	19db      	adds	r3, r3, r7
 8002a32:	2210      	movs	r2, #16
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	e098      	b.n	8002b6a <UART_SetConfig+0x246>
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a7b      	ldr	r2, [pc, #492]	@ (8002c2c <UART_SetConfig+0x308>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d131      	bne.n	8002aa6 <UART_SetConfig+0x182>
 8002a42:	4b79      	ldr	r3, [pc, #484]	@ (8002c28 <UART_SetConfig+0x304>)
 8002a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a46:	220c      	movs	r2, #12
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	d01d      	beq.n	8002a8a <UART_SetConfig+0x166>
 8002a4e:	d823      	bhi.n	8002a98 <UART_SetConfig+0x174>
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d00c      	beq.n	8002a6e <UART_SetConfig+0x14a>
 8002a54:	d820      	bhi.n	8002a98 <UART_SetConfig+0x174>
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <UART_SetConfig+0x13c>
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d00e      	beq.n	8002a7c <UART_SetConfig+0x158>
 8002a5e:	e01b      	b.n	8002a98 <UART_SetConfig+0x174>
 8002a60:	231b      	movs	r3, #27
 8002a62:	2220      	movs	r2, #32
 8002a64:	189b      	adds	r3, r3, r2
 8002a66:	19db      	adds	r3, r3, r7
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	e07d      	b.n	8002b6a <UART_SetConfig+0x246>
 8002a6e:	231b      	movs	r3, #27
 8002a70:	2220      	movs	r2, #32
 8002a72:	189b      	adds	r3, r3, r2
 8002a74:	19db      	adds	r3, r3, r7
 8002a76:	2202      	movs	r2, #2
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	e076      	b.n	8002b6a <UART_SetConfig+0x246>
 8002a7c:	231b      	movs	r3, #27
 8002a7e:	2220      	movs	r2, #32
 8002a80:	189b      	adds	r3, r3, r2
 8002a82:	19db      	adds	r3, r3, r7
 8002a84:	2204      	movs	r2, #4
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	e06f      	b.n	8002b6a <UART_SetConfig+0x246>
 8002a8a:	231b      	movs	r3, #27
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	189b      	adds	r3, r3, r2
 8002a90:	19db      	adds	r3, r3, r7
 8002a92:	2208      	movs	r2, #8
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e068      	b.n	8002b6a <UART_SetConfig+0x246>
 8002a98:	231b      	movs	r3, #27
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	189b      	adds	r3, r3, r2
 8002a9e:	19db      	adds	r3, r3, r7
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	e061      	b.n	8002b6a <UART_SetConfig+0x246>
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a61      	ldr	r2, [pc, #388]	@ (8002c30 <UART_SetConfig+0x30c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d106      	bne.n	8002abe <UART_SetConfig+0x19a>
 8002ab0:	231b      	movs	r3, #27
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	189b      	adds	r3, r3, r2
 8002ab6:	19db      	adds	r3, r3, r7
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	e055      	b.n	8002b6a <UART_SetConfig+0x246>
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a5c      	ldr	r2, [pc, #368]	@ (8002c34 <UART_SetConfig+0x310>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d106      	bne.n	8002ad6 <UART_SetConfig+0x1b2>
 8002ac8:	231b      	movs	r3, #27
 8002aca:	2220      	movs	r2, #32
 8002acc:	189b      	adds	r3, r3, r2
 8002ace:	19db      	adds	r3, r3, r7
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	e049      	b.n	8002b6a <UART_SetConfig+0x246>
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a50      	ldr	r2, [pc, #320]	@ (8002c1c <UART_SetConfig+0x2f8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d13e      	bne.n	8002b5e <UART_SetConfig+0x23a>
 8002ae0:	4b51      	ldr	r3, [pc, #324]	@ (8002c28 <UART_SetConfig+0x304>)
 8002ae2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ae4:	23c0      	movs	r3, #192	@ 0xc0
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	4013      	ands	r3, r2
 8002aea:	22c0      	movs	r2, #192	@ 0xc0
 8002aec:	0112      	lsls	r2, r2, #4
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d027      	beq.n	8002b42 <UART_SetConfig+0x21e>
 8002af2:	22c0      	movs	r2, #192	@ 0xc0
 8002af4:	0112      	lsls	r2, r2, #4
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d82a      	bhi.n	8002b50 <UART_SetConfig+0x22c>
 8002afa:	2280      	movs	r2, #128	@ 0x80
 8002afc:	0112      	lsls	r2, r2, #4
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d011      	beq.n	8002b26 <UART_SetConfig+0x202>
 8002b02:	2280      	movs	r2, #128	@ 0x80
 8002b04:	0112      	lsls	r2, r2, #4
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d822      	bhi.n	8002b50 <UART_SetConfig+0x22c>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d004      	beq.n	8002b18 <UART_SetConfig+0x1f4>
 8002b0e:	2280      	movs	r2, #128	@ 0x80
 8002b10:	00d2      	lsls	r2, r2, #3
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00e      	beq.n	8002b34 <UART_SetConfig+0x210>
 8002b16:	e01b      	b.n	8002b50 <UART_SetConfig+0x22c>
 8002b18:	231b      	movs	r3, #27
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	189b      	adds	r3, r3, r2
 8002b1e:	19db      	adds	r3, r3, r7
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
 8002b24:	e021      	b.n	8002b6a <UART_SetConfig+0x246>
 8002b26:	231b      	movs	r3, #27
 8002b28:	2220      	movs	r2, #32
 8002b2a:	189b      	adds	r3, r3, r2
 8002b2c:	19db      	adds	r3, r3, r7
 8002b2e:	2202      	movs	r2, #2
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	e01a      	b.n	8002b6a <UART_SetConfig+0x246>
 8002b34:	231b      	movs	r3, #27
 8002b36:	2220      	movs	r2, #32
 8002b38:	189b      	adds	r3, r3, r2
 8002b3a:	19db      	adds	r3, r3, r7
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e013      	b.n	8002b6a <UART_SetConfig+0x246>
 8002b42:	231b      	movs	r3, #27
 8002b44:	2220      	movs	r2, #32
 8002b46:	189b      	adds	r3, r3, r2
 8002b48:	19db      	adds	r3, r3, r7
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	e00c      	b.n	8002b6a <UART_SetConfig+0x246>
 8002b50:	231b      	movs	r3, #27
 8002b52:	2220      	movs	r2, #32
 8002b54:	189b      	adds	r3, r3, r2
 8002b56:	19db      	adds	r3, r3, r7
 8002b58:	2210      	movs	r2, #16
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	e005      	b.n	8002b6a <UART_SetConfig+0x246>
 8002b5e:	231b      	movs	r3, #27
 8002b60:	2220      	movs	r2, #32
 8002b62:	189b      	adds	r3, r3, r2
 8002b64:	19db      	adds	r3, r3, r7
 8002b66:	2210      	movs	r2, #16
 8002b68:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8002c1c <UART_SetConfig+0x2f8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d000      	beq.n	8002b76 <UART_SetConfig+0x252>
 8002b74:	e0a9      	b.n	8002cca <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b76:	231b      	movs	r3, #27
 8002b78:	2220      	movs	r2, #32
 8002b7a:	189b      	adds	r3, r3, r2
 8002b7c:	19db      	adds	r3, r3, r7
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d015      	beq.n	8002bb0 <UART_SetConfig+0x28c>
 8002b84:	dc18      	bgt.n	8002bb8 <UART_SetConfig+0x294>
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d00d      	beq.n	8002ba6 <UART_SetConfig+0x282>
 8002b8a:	dc15      	bgt.n	8002bb8 <UART_SetConfig+0x294>
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <UART_SetConfig+0x272>
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d005      	beq.n	8002ba0 <UART_SetConfig+0x27c>
 8002b94:	e010      	b.n	8002bb8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b96:	f7ff fca1 	bl	80024dc <HAL_RCC_GetPCLK1Freq>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002b9e:	e014      	b.n	8002bca <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ba0:	4b25      	ldr	r3, [pc, #148]	@ (8002c38 <UART_SetConfig+0x314>)
 8002ba2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002ba4:	e011      	b.n	8002bca <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ba6:	f7ff fc0d 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8002baa:	0003      	movs	r3, r0
 8002bac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002bae:	e00c      	b.n	8002bca <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bb0:	2380      	movs	r3, #128	@ 0x80
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002bb6:	e008      	b.n	8002bca <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002bbc:	231a      	movs	r3, #26
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	189b      	adds	r3, r3, r2
 8002bc2:	19db      	adds	r3, r3, r7
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	701a      	strb	r2, [r3, #0]
        break;
 8002bc8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d100      	bne.n	8002bd2 <UART_SetConfig+0x2ae>
 8002bd0:	e14b      	b.n	8002e6a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bd6:	4b19      	ldr	r3, [pc, #100]	@ (8002c3c <UART_SetConfig+0x318>)
 8002bd8:	0052      	lsls	r2, r2, #1
 8002bda:	5ad3      	ldrh	r3, [r2, r3]
 8002bdc:	0019      	movs	r1, r3
 8002bde:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002be0:	f7fd fa90 	bl	8000104 <__udivsi3>
 8002be4:	0003      	movs	r3, r0
 8002be6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	0013      	movs	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	189b      	adds	r3, r3, r2
 8002bf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d305      	bcc.n	8002c04 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002bfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d91d      	bls.n	8002c40 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002c04:	231a      	movs	r3, #26
 8002c06:	2220      	movs	r2, #32
 8002c08:	189b      	adds	r3, r3, r2
 8002c0a:	19db      	adds	r3, r3, r7
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
 8002c10:	e12b      	b.n	8002e6a <UART_SetConfig+0x546>
 8002c12:	46c0      	nop			@ (mov r8, r8)
 8002c14:	cfff69f3 	.word	0xcfff69f3
 8002c18:	ffffcfff 	.word	0xffffcfff
 8002c1c:	40008000 	.word	0x40008000
 8002c20:	11fff4ff 	.word	0x11fff4ff
 8002c24:	40013800 	.word	0x40013800
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40004400 	.word	0x40004400
 8002c30:	40004800 	.word	0x40004800
 8002c34:	40004c00 	.word	0x40004c00
 8002c38:	00f42400 	.word	0x00f42400
 8002c3c:	08003618 	.word	0x08003618
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c42:	61bb      	str	r3, [r7, #24]
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c4c:	4b92      	ldr	r3, [pc, #584]	@ (8002e98 <UART_SetConfig+0x574>)
 8002c4e:	0052      	lsls	r2, r2, #1
 8002c50:	5ad3      	ldrh	r3, [r2, r3]
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	69b8      	ldr	r0, [r7, #24]
 8002c5e:	69f9      	ldr	r1, [r7, #28]
 8002c60:	f7fd fbc6 	bl	80003f0 <__aeabi_uldivmod>
 8002c64:	0002      	movs	r2, r0
 8002c66:	000b      	movs	r3, r1
 8002c68:	0e11      	lsrs	r1, r2, #24
 8002c6a:	021d      	lsls	r5, r3, #8
 8002c6c:	430d      	orrs	r5, r1
 8002c6e:	0214      	lsls	r4, r2, #8
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68b8      	ldr	r0, [r7, #8]
 8002c7e:	68f9      	ldr	r1, [r7, #12]
 8002c80:	1900      	adds	r0, r0, r4
 8002c82:	4169      	adcs	r1, r5
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	603b      	str	r3, [r7, #0]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f7fd fbad 	bl	80003f0 <__aeabi_uldivmod>
 8002c96:	0002      	movs	r2, r0
 8002c98:	000b      	movs	r3, r1
 8002c9a:	0013      	movs	r3, r2
 8002c9c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ca0:	23c0      	movs	r3, #192	@ 0xc0
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d309      	bcc.n	8002cbc <UART_SetConfig+0x398>
 8002ca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002caa:	2380      	movs	r3, #128	@ 0x80
 8002cac:	035b      	lsls	r3, r3, #13
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d204      	bcs.n	8002cbc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	e0d6      	b.n	8002e6a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002cbc:	231a      	movs	r3, #26
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	189b      	adds	r3, r3, r2
 8002cc2:	19db      	adds	r3, r3, r7
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	701a      	strb	r2, [r3, #0]
 8002cc8:	e0cf      	b.n	8002e6a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	69da      	ldr	r2, [r3, #28]
 8002cce:	2380      	movs	r3, #128	@ 0x80
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d000      	beq.n	8002cd8 <UART_SetConfig+0x3b4>
 8002cd6:	e070      	b.n	8002dba <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002cd8:	231b      	movs	r3, #27
 8002cda:	2220      	movs	r2, #32
 8002cdc:	189b      	adds	r3, r3, r2
 8002cde:	19db      	adds	r3, r3, r7
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d015      	beq.n	8002d12 <UART_SetConfig+0x3ee>
 8002ce6:	dc18      	bgt.n	8002d1a <UART_SetConfig+0x3f6>
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d00d      	beq.n	8002d08 <UART_SetConfig+0x3e4>
 8002cec:	dc15      	bgt.n	8002d1a <UART_SetConfig+0x3f6>
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <UART_SetConfig+0x3d4>
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d005      	beq.n	8002d02 <UART_SetConfig+0x3de>
 8002cf6:	e010      	b.n	8002d1a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cf8:	f7ff fbf0 	bl	80024dc <HAL_RCC_GetPCLK1Freq>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d00:	e014      	b.n	8002d2c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d02:	4b66      	ldr	r3, [pc, #408]	@ (8002e9c <UART_SetConfig+0x578>)
 8002d04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d06:	e011      	b.n	8002d2c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d08:	f7ff fb5c 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d10:	e00c      	b.n	8002d2c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d12:	2380      	movs	r3, #128	@ 0x80
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d18:	e008      	b.n	8002d2c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002d1e:	231a      	movs	r3, #26
 8002d20:	2220      	movs	r2, #32
 8002d22:	189b      	adds	r3, r3, r2
 8002d24:	19db      	adds	r3, r3, r7
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
        break;
 8002d2a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d100      	bne.n	8002d34 <UART_SetConfig+0x410>
 8002d32:	e09a      	b.n	8002e6a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d38:	4b57      	ldr	r3, [pc, #348]	@ (8002e98 <UART_SetConfig+0x574>)
 8002d3a:	0052      	lsls	r2, r2, #1
 8002d3c:	5ad3      	ldrh	r3, [r2, r3]
 8002d3e:	0019      	movs	r1, r3
 8002d40:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002d42:	f7fd f9df 	bl	8000104 <__udivsi3>
 8002d46:	0003      	movs	r3, r0
 8002d48:	005a      	lsls	r2, r3, #1
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	085b      	lsrs	r3, r3, #1
 8002d50:	18d2      	adds	r2, r2, r3
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	0019      	movs	r1, r3
 8002d58:	0010      	movs	r0, r2
 8002d5a:	f7fd f9d3 	bl	8000104 <__udivsi3>
 8002d5e:	0003      	movs	r3, r0
 8002d60:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d64:	2b0f      	cmp	r3, #15
 8002d66:	d921      	bls.n	8002dac <UART_SetConfig+0x488>
 8002d68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d6a:	2380      	movs	r3, #128	@ 0x80
 8002d6c:	025b      	lsls	r3, r3, #9
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d21c      	bcs.n	8002dac <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	200e      	movs	r0, #14
 8002d78:	2420      	movs	r4, #32
 8002d7a:	1903      	adds	r3, r0, r4
 8002d7c:	19db      	adds	r3, r3, r7
 8002d7e:	210f      	movs	r1, #15
 8002d80:	438a      	bics	r2, r1
 8002d82:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2207      	movs	r2, #7
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	b299      	uxth	r1, r3
 8002d90:	1903      	adds	r3, r0, r4
 8002d92:	19db      	adds	r3, r3, r7
 8002d94:	1902      	adds	r2, r0, r4
 8002d96:	19d2      	adds	r2, r2, r7
 8002d98:	8812      	ldrh	r2, [r2, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	1902      	adds	r2, r0, r4
 8002da4:	19d2      	adds	r2, r2, r7
 8002da6:	8812      	ldrh	r2, [r2, #0]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	e05e      	b.n	8002e6a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002dac:	231a      	movs	r3, #26
 8002dae:	2220      	movs	r2, #32
 8002db0:	189b      	adds	r3, r3, r2
 8002db2:	19db      	adds	r3, r3, r7
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
 8002db8:	e057      	b.n	8002e6a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dba:	231b      	movs	r3, #27
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	189b      	adds	r3, r3, r2
 8002dc0:	19db      	adds	r3, r3, r7
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d015      	beq.n	8002df4 <UART_SetConfig+0x4d0>
 8002dc8:	dc18      	bgt.n	8002dfc <UART_SetConfig+0x4d8>
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d00d      	beq.n	8002dea <UART_SetConfig+0x4c6>
 8002dce:	dc15      	bgt.n	8002dfc <UART_SetConfig+0x4d8>
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <UART_SetConfig+0x4b6>
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d005      	beq.n	8002de4 <UART_SetConfig+0x4c0>
 8002dd8:	e010      	b.n	8002dfc <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dda:	f7ff fb7f 	bl	80024dc <HAL_RCC_GetPCLK1Freq>
 8002dde:	0003      	movs	r3, r0
 8002de0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002de2:	e014      	b.n	8002e0e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002de4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e9c <UART_SetConfig+0x578>)
 8002de6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002de8:	e011      	b.n	8002e0e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dea:	f7ff faeb 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8002dee:	0003      	movs	r3, r0
 8002df0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002df2:	e00c      	b.n	8002e0e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002df4:	2380      	movs	r3, #128	@ 0x80
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002dfa:	e008      	b.n	8002e0e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002e00:	231a      	movs	r3, #26
 8002e02:	2220      	movs	r2, #32
 8002e04:	189b      	adds	r3, r3, r2
 8002e06:	19db      	adds	r3, r3, r7
 8002e08:	2201      	movs	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]
        break;
 8002e0c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d02a      	beq.n	8002e6a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e18:	4b1f      	ldr	r3, [pc, #124]	@ (8002e98 <UART_SetConfig+0x574>)
 8002e1a:	0052      	lsls	r2, r2, #1
 8002e1c:	5ad3      	ldrh	r3, [r2, r3]
 8002e1e:	0019      	movs	r1, r3
 8002e20:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002e22:	f7fd f96f 	bl	8000104 <__udivsi3>
 8002e26:	0003      	movs	r3, r0
 8002e28:	001a      	movs	r2, r3
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	085b      	lsrs	r3, r3, #1
 8002e30:	18d2      	adds	r2, r2, r3
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	0019      	movs	r1, r3
 8002e38:	0010      	movs	r0, r2
 8002e3a:	f7fd f963 	bl	8000104 <__udivsi3>
 8002e3e:	0003      	movs	r3, r0
 8002e40:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e44:	2b0f      	cmp	r3, #15
 8002e46:	d90a      	bls.n	8002e5e <UART_SetConfig+0x53a>
 8002e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e4a:	2380      	movs	r3, #128	@ 0x80
 8002e4c:	025b      	lsls	r3, r3, #9
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d205      	bcs.n	8002e5e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	60da      	str	r2, [r3, #12]
 8002e5c:	e005      	b.n	8002e6a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002e5e:	231a      	movs	r3, #26
 8002e60:	2220      	movs	r2, #32
 8002e62:	189b      	adds	r3, r3, r2
 8002e64:	19db      	adds	r3, r3, r7
 8002e66:	2201      	movs	r2, #1
 8002e68:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6c:	226a      	movs	r2, #106	@ 0x6a
 8002e6e:	2101      	movs	r1, #1
 8002e70:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	2268      	movs	r2, #104	@ 0x68
 8002e76:	2101      	movs	r1, #1
 8002e78:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	2200      	movs	r2, #0
 8002e84:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002e86:	231a      	movs	r3, #26
 8002e88:	2220      	movs	r2, #32
 8002e8a:	189b      	adds	r3, r3, r2
 8002e8c:	19db      	adds	r3, r3, r7
 8002e8e:	781b      	ldrb	r3, [r3, #0]
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b010      	add	sp, #64	@ 0x40
 8002e96:	bdb0      	pop	{r4, r5, r7, pc}
 8002e98:	08003618 	.word	0x08003618
 8002e9c:	00f42400 	.word	0x00f42400

08002ea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eac:	2208      	movs	r2, #8
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d00b      	beq.n	8002eca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4a4a      	ldr	r2, [pc, #296]	@ (8002fe4 <UART_AdvFeatureConfig+0x144>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ece:	2201      	movs	r2, #1
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d00b      	beq.n	8002eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4a43      	ldr	r2, [pc, #268]	@ (8002fe8 <UART_AdvFeatureConfig+0x148>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	0019      	movs	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d00b      	beq.n	8002f0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4a3b      	ldr	r2, [pc, #236]	@ (8002fec <UART_AdvFeatureConfig+0x14c>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	0019      	movs	r1, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f12:	2204      	movs	r2, #4
 8002f14:	4013      	ands	r3, r2
 8002f16:	d00b      	beq.n	8002f30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4a34      	ldr	r2, [pc, #208]	@ (8002ff0 <UART_AdvFeatureConfig+0x150>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	0019      	movs	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	2210      	movs	r2, #16
 8002f36:	4013      	ands	r3, r2
 8002f38:	d00b      	beq.n	8002f52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4a2c      	ldr	r2, [pc, #176]	@ (8002ff4 <UART_AdvFeatureConfig+0x154>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	0019      	movs	r1, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f56:	2220      	movs	r2, #32
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d00b      	beq.n	8002f74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	4a25      	ldr	r2, [pc, #148]	@ (8002ff8 <UART_AdvFeatureConfig+0x158>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	0019      	movs	r1, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f78:	2240      	movs	r2, #64	@ 0x40
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d01d      	beq.n	8002fba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4a1d      	ldr	r2, [pc, #116]	@ (8002ffc <UART_AdvFeatureConfig+0x15c>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	0019      	movs	r1, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f9a:	2380      	movs	r3, #128	@ 0x80
 8002f9c:	035b      	lsls	r3, r3, #13
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d10b      	bne.n	8002fba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4a15      	ldr	r2, [pc, #84]	@ (8003000 <UART_AdvFeatureConfig+0x160>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	0019      	movs	r1, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbe:	2280      	movs	r2, #128	@ 0x80
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d00b      	beq.n	8002fdc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	4a0e      	ldr	r2, [pc, #56]	@ (8003004 <UART_AdvFeatureConfig+0x164>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	0019      	movs	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	605a      	str	r2, [r3, #4]
  }
}
 8002fdc:	46c0      	nop			@ (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b002      	add	sp, #8
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	ffff7fff 	.word	0xffff7fff
 8002fe8:	fffdffff 	.word	0xfffdffff
 8002fec:	fffeffff 	.word	0xfffeffff
 8002ff0:	fffbffff 	.word	0xfffbffff
 8002ff4:	ffffefff 	.word	0xffffefff
 8002ff8:	ffffdfff 	.word	0xffffdfff
 8002ffc:	ffefffff 	.word	0xffefffff
 8003000:	ff9fffff 	.word	0xff9fffff
 8003004:	fff7ffff 	.word	0xfff7ffff

08003008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b092      	sub	sp, #72	@ 0x48
 800300c:	af02      	add	r7, sp, #8
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2290      	movs	r2, #144	@ 0x90
 8003014:	2100      	movs	r1, #0
 8003016:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003018:	f7fd fe48 	bl	8000cac <HAL_GetTick>
 800301c:	0003      	movs	r3, r0
 800301e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2208      	movs	r2, #8
 8003028:	4013      	ands	r3, r2
 800302a:	2b08      	cmp	r3, #8
 800302c:	d12d      	bne.n	800308a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800302e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003030:	2280      	movs	r2, #128	@ 0x80
 8003032:	0391      	lsls	r1, r2, #14
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4a47      	ldr	r2, [pc, #284]	@ (8003154 <UART_CheckIdleState+0x14c>)
 8003038:	9200      	str	r2, [sp, #0]
 800303a:	2200      	movs	r2, #0
 800303c:	f000 f88e 	bl	800315c <UART_WaitOnFlagUntilTimeout>
 8003040:	1e03      	subs	r3, r0, #0
 8003042:	d022      	beq.n	800308a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003044:	f3ef 8310 	mrs	r3, PRIMASK
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800304c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800304e:	2301      	movs	r3, #1
 8003050:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003054:	f383 8810 	msr	PRIMASK, r3
}
 8003058:	46c0      	nop			@ (mov r8, r8)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2180      	movs	r1, #128	@ 0x80
 8003066:	438a      	bics	r2, r1
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800306c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003070:	f383 8810 	msr	PRIMASK, r3
}
 8003074:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2288      	movs	r2, #136	@ 0x88
 800307a:	2120      	movs	r1, #32
 800307c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2284      	movs	r2, #132	@ 0x84
 8003082:	2100      	movs	r1, #0
 8003084:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e060      	b.n	800314c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2204      	movs	r2, #4
 8003092:	4013      	ands	r3, r2
 8003094:	2b04      	cmp	r3, #4
 8003096:	d146      	bne.n	8003126 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800309a:	2280      	movs	r2, #128	@ 0x80
 800309c:	03d1      	lsls	r1, r2, #15
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003154 <UART_CheckIdleState+0x14c>)
 80030a2:	9200      	str	r2, [sp, #0]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f000 f859 	bl	800315c <UART_WaitOnFlagUntilTimeout>
 80030aa:	1e03      	subs	r3, r0, #0
 80030ac:	d03b      	beq.n	8003126 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ae:	f3ef 8310 	mrs	r3, PRIMASK
 80030b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80030b4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80030b8:	2301      	movs	r3, #1
 80030ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f383 8810 	msr	PRIMASK, r3
}
 80030c2:	46c0      	nop			@ (mov r8, r8)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4922      	ldr	r1, [pc, #136]	@ (8003158 <UART_CheckIdleState+0x150>)
 80030d0:	400a      	ands	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f383 8810 	msr	PRIMASK, r3
}
 80030de:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030e0:	f3ef 8310 	mrs	r3, PRIMASK
 80030e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80030e6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80030ea:	2301      	movs	r3, #1
 80030ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f383 8810 	msr	PRIMASK, r3
}
 80030f4:	46c0      	nop			@ (mov r8, r8)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2101      	movs	r1, #1
 8003102:	438a      	bics	r2, r1
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003108:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	f383 8810 	msr	PRIMASK, r3
}
 8003110:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	228c      	movs	r2, #140	@ 0x8c
 8003116:	2120      	movs	r1, #32
 8003118:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2284      	movs	r2, #132	@ 0x84
 800311e:	2100      	movs	r1, #0
 8003120:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e012      	b.n	800314c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2288      	movs	r2, #136	@ 0x88
 800312a:	2120      	movs	r1, #32
 800312c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	228c      	movs	r2, #140	@ 0x8c
 8003132:	2120      	movs	r1, #32
 8003134:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2284      	movs	r2, #132	@ 0x84
 8003146:	2100      	movs	r1, #0
 8003148:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	0018      	movs	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	b010      	add	sp, #64	@ 0x40
 8003152:	bd80      	pop	{r7, pc}
 8003154:	01ffffff 	.word	0x01ffffff
 8003158:	fffffedf 	.word	0xfffffedf

0800315c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	1dfb      	adds	r3, r7, #7
 800316a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316c:	e051      	b.n	8003212 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	3301      	adds	r3, #1
 8003172:	d04e      	beq.n	8003212 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003174:	f7fd fd9a 	bl	8000cac <HAL_GetTick>
 8003178:	0002      	movs	r2, r0
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	429a      	cmp	r2, r3
 8003182:	d302      	bcc.n	800318a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e051      	b.n	8003232 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2204      	movs	r2, #4
 8003196:	4013      	ands	r3, r2
 8003198:	d03b      	beq.n	8003212 <UART_WaitOnFlagUntilTimeout+0xb6>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b80      	cmp	r3, #128	@ 0x80
 800319e:	d038      	beq.n	8003212 <UART_WaitOnFlagUntilTimeout+0xb6>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b40      	cmp	r3, #64	@ 0x40
 80031a4:	d035      	beq.n	8003212 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	2208      	movs	r2, #8
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d111      	bne.n	80031d8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2208      	movs	r2, #8
 80031ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	0018      	movs	r0, r3
 80031c0:	f000 f83c 	bl	800323c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2290      	movs	r2, #144	@ 0x90
 80031c8:	2108      	movs	r1, #8
 80031ca:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2284      	movs	r2, #132	@ 0x84
 80031d0:	2100      	movs	r1, #0
 80031d2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e02c      	b.n	8003232 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69da      	ldr	r2, [r3, #28]
 80031de:	2380      	movs	r3, #128	@ 0x80
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	401a      	ands	r2, r3
 80031e4:	2380      	movs	r3, #128	@ 0x80
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d112      	bne.n	8003212 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2280      	movs	r2, #128	@ 0x80
 80031f2:	0112      	lsls	r2, r2, #4
 80031f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	0018      	movs	r0, r3
 80031fa:	f000 f81f 	bl	800323c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2290      	movs	r2, #144	@ 0x90
 8003202:	2120      	movs	r1, #32
 8003204:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2284      	movs	r2, #132	@ 0x84
 800320a:	2100      	movs	r1, #0
 800320c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e00f      	b.n	8003232 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	4013      	ands	r3, r2
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	425a      	negs	r2, r3
 8003222:	4153      	adcs	r3, r2
 8003224:	b2db      	uxtb	r3, r3
 8003226:	001a      	movs	r2, r3
 8003228:	1dfb      	adds	r3, r7, #7
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d09e      	beq.n	800316e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	0018      	movs	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	b004      	add	sp, #16
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08e      	sub	sp, #56	@ 0x38
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003244:	f3ef 8310 	mrs	r3, PRIMASK
 8003248:	617b      	str	r3, [r7, #20]
  return(result);
 800324a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800324c:	637b      	str	r3, [r7, #52]	@ 0x34
 800324e:	2301      	movs	r3, #1
 8003250:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f383 8810 	msr	PRIMASK, r3
}
 8003258:	46c0      	nop			@ (mov r8, r8)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4926      	ldr	r1, [pc, #152]	@ (8003300 <UART_EndRxTransfer+0xc4>)
 8003266:	400a      	ands	r2, r1
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800326c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f383 8810 	msr	PRIMASK, r3
}
 8003274:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003276:	f3ef 8310 	mrs	r3, PRIMASK
 800327a:	623b      	str	r3, [r7, #32]
  return(result);
 800327c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800327e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003280:	2301      	movs	r3, #1
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	f383 8810 	msr	PRIMASK, r3
}
 800328a:	46c0      	nop			@ (mov r8, r8)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	491b      	ldr	r1, [pc, #108]	@ (8003304 <UART_EndRxTransfer+0xc8>)
 8003298:	400a      	ands	r2, r1
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a2:	f383 8810 	msr	PRIMASK, r3
}
 80032a6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d118      	bne.n	80032e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b0:	f3ef 8310 	mrs	r3, PRIMASK
 80032b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80032b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032ba:	2301      	movs	r3, #1
 80032bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f383 8810 	msr	PRIMASK, r3
}
 80032c4:	46c0      	nop			@ (mov r8, r8)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2110      	movs	r1, #16
 80032d2:	438a      	bics	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f383 8810 	msr	PRIMASK, r3
}
 80032e0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	228c      	movs	r2, #140	@ 0x8c
 80032e6:	2120      	movs	r1, #32
 80032e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80032f6:	46c0      	nop			@ (mov r8, r8)
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b00e      	add	sp, #56	@ 0x38
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			@ (mov r8, r8)
 8003300:	fffffedf 	.word	0xfffffedf
 8003304:	effffffe 	.word	0xeffffffe

08003308 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2284      	movs	r2, #132	@ 0x84
 8003314:	5c9b      	ldrb	r3, [r3, r2]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_UARTEx_DisableFifoMode+0x16>
 800331a:	2302      	movs	r3, #2
 800331c:	e027      	b.n	800336e <HAL_UARTEx_DisableFifoMode+0x66>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2284      	movs	r2, #132	@ 0x84
 8003322:	2101      	movs	r1, #1
 8003324:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2288      	movs	r2, #136	@ 0x88
 800332a:	2124      	movs	r1, #36	@ 0x24
 800332c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2101      	movs	r1, #1
 8003342:	438a      	bics	r2, r1
 8003344:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4a0b      	ldr	r2, [pc, #44]	@ (8003378 <HAL_UARTEx_DisableFifoMode+0x70>)
 800334a:	4013      	ands	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2288      	movs	r2, #136	@ 0x88
 8003360:	2120      	movs	r1, #32
 8003362:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2284      	movs	r2, #132	@ 0x84
 8003368:	2100      	movs	r1, #0
 800336a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	0018      	movs	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	b004      	add	sp, #16
 8003374:	bd80      	pop	{r7, pc}
 8003376:	46c0      	nop			@ (mov r8, r8)
 8003378:	dfffffff 	.word	0xdfffffff

0800337c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2284      	movs	r2, #132	@ 0x84
 800338a:	5c9b      	ldrb	r3, [r3, r2]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003390:	2302      	movs	r3, #2
 8003392:	e02e      	b.n	80033f2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2284      	movs	r2, #132	@ 0x84
 8003398:	2101      	movs	r1, #1
 800339a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2288      	movs	r2, #136	@ 0x88
 80033a0:	2124      	movs	r1, #36	@ 0x24
 80033a2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2101      	movs	r1, #1
 80033b8:	438a      	bics	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	08d9      	lsrs	r1, r3, #3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	0018      	movs	r0, r3
 80033d4:	f000 f854 	bl	8003480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2288      	movs	r2, #136	@ 0x88
 80033e4:	2120      	movs	r1, #32
 80033e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2284      	movs	r2, #132	@ 0x84
 80033ec:	2100      	movs	r1, #0
 80033ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	0018      	movs	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b004      	add	sp, #16
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2284      	movs	r2, #132	@ 0x84
 800340a:	5c9b      	ldrb	r3, [r3, r2]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003410:	2302      	movs	r3, #2
 8003412:	e02f      	b.n	8003474 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2284      	movs	r2, #132	@ 0x84
 8003418:	2101      	movs	r1, #1
 800341a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2288      	movs	r2, #136	@ 0x88
 8003420:	2124      	movs	r1, #36	@ 0x24
 8003422:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2101      	movs	r1, #1
 8003438:	438a      	bics	r2, r1
 800343a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	4a0e      	ldr	r2, [pc, #56]	@ (800347c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003444:	4013      	ands	r3, r2
 8003446:	0019      	movs	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	0018      	movs	r0, r3
 8003456:	f000 f813 	bl	8003480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2288      	movs	r2, #136	@ 0x88
 8003466:	2120      	movs	r1, #32
 8003468:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2284      	movs	r2, #132	@ 0x84
 800346e:	2100      	movs	r1, #0
 8003470:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	b004      	add	sp, #16
 800347a:	bd80      	pop	{r7, pc}
 800347c:	f1ffffff 	.word	0xf1ffffff

08003480 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800348c:	2b00      	cmp	r3, #0
 800348e:	d108      	bne.n	80034a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	226a      	movs	r2, #106	@ 0x6a
 8003494:	2101      	movs	r1, #1
 8003496:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2268      	movs	r2, #104	@ 0x68
 800349c:	2101      	movs	r1, #1
 800349e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80034a0:	e043      	b.n	800352a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80034a2:	260f      	movs	r6, #15
 80034a4:	19bb      	adds	r3, r7, r6
 80034a6:	2208      	movs	r2, #8
 80034a8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80034aa:	200e      	movs	r0, #14
 80034ac:	183b      	adds	r3, r7, r0
 80034ae:	2208      	movs	r2, #8
 80034b0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	0e5b      	lsrs	r3, r3, #25
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	240d      	movs	r4, #13
 80034be:	193b      	adds	r3, r7, r4
 80034c0:	2107      	movs	r1, #7
 80034c2:	400a      	ands	r2, r1
 80034c4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	0f5b      	lsrs	r3, r3, #29
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	250c      	movs	r5, #12
 80034d2:	197b      	adds	r3, r7, r5
 80034d4:	2107      	movs	r1, #7
 80034d6:	400a      	ands	r2, r1
 80034d8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80034da:	183b      	adds	r3, r7, r0
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	197a      	adds	r2, r7, r5
 80034e0:	7812      	ldrb	r2, [r2, #0]
 80034e2:	4914      	ldr	r1, [pc, #80]	@ (8003534 <UARTEx_SetNbDataToProcess+0xb4>)
 80034e4:	5c8a      	ldrb	r2, [r1, r2]
 80034e6:	435a      	muls	r2, r3
 80034e8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80034ea:	197b      	adds	r3, r7, r5
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	4a12      	ldr	r2, [pc, #72]	@ (8003538 <UARTEx_SetNbDataToProcess+0xb8>)
 80034f0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80034f2:	0019      	movs	r1, r3
 80034f4:	f7fc fe90 	bl	8000218 <__divsi3>
 80034f8:	0003      	movs	r3, r0
 80034fa:	b299      	uxth	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	226a      	movs	r2, #106	@ 0x6a
 8003500:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003502:	19bb      	adds	r3, r7, r6
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	193a      	adds	r2, r7, r4
 8003508:	7812      	ldrb	r2, [r2, #0]
 800350a:	490a      	ldr	r1, [pc, #40]	@ (8003534 <UARTEx_SetNbDataToProcess+0xb4>)
 800350c:	5c8a      	ldrb	r2, [r1, r2]
 800350e:	435a      	muls	r2, r3
 8003510:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003512:	193b      	adds	r3, r7, r4
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	4a08      	ldr	r2, [pc, #32]	@ (8003538 <UARTEx_SetNbDataToProcess+0xb8>)
 8003518:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800351a:	0019      	movs	r1, r3
 800351c:	f7fc fe7c 	bl	8000218 <__divsi3>
 8003520:	0003      	movs	r3, r0
 8003522:	b299      	uxth	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2268      	movs	r2, #104	@ 0x68
 8003528:	5299      	strh	r1, [r3, r2]
}
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	46bd      	mov	sp, r7
 800352e:	b005      	add	sp, #20
 8003530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003532:	46c0      	nop			@ (mov r8, r8)
 8003534:	08003630 	.word	0x08003630
 8003538:	08003638 	.word	0x08003638

0800353c <memset>:
 800353c:	0003      	movs	r3, r0
 800353e:	1882      	adds	r2, r0, r2
 8003540:	4293      	cmp	r3, r2
 8003542:	d100      	bne.n	8003546 <memset+0xa>
 8003544:	4770      	bx	lr
 8003546:	7019      	strb	r1, [r3, #0]
 8003548:	3301      	adds	r3, #1
 800354a:	e7f9      	b.n	8003540 <memset+0x4>

0800354c <__libc_init_array>:
 800354c:	b570      	push	{r4, r5, r6, lr}
 800354e:	2600      	movs	r6, #0
 8003550:	4c0c      	ldr	r4, [pc, #48]	@ (8003584 <__libc_init_array+0x38>)
 8003552:	4d0d      	ldr	r5, [pc, #52]	@ (8003588 <__libc_init_array+0x3c>)
 8003554:	1b64      	subs	r4, r4, r5
 8003556:	10a4      	asrs	r4, r4, #2
 8003558:	42a6      	cmp	r6, r4
 800355a:	d109      	bne.n	8003570 <__libc_init_array+0x24>
 800355c:	2600      	movs	r6, #0
 800355e:	f000 f819 	bl	8003594 <_init>
 8003562:	4c0a      	ldr	r4, [pc, #40]	@ (800358c <__libc_init_array+0x40>)
 8003564:	4d0a      	ldr	r5, [pc, #40]	@ (8003590 <__libc_init_array+0x44>)
 8003566:	1b64      	subs	r4, r4, r5
 8003568:	10a4      	asrs	r4, r4, #2
 800356a:	42a6      	cmp	r6, r4
 800356c:	d105      	bne.n	800357a <__libc_init_array+0x2e>
 800356e:	bd70      	pop	{r4, r5, r6, pc}
 8003570:	00b3      	lsls	r3, r6, #2
 8003572:	58eb      	ldr	r3, [r5, r3]
 8003574:	4798      	blx	r3
 8003576:	3601      	adds	r6, #1
 8003578:	e7ee      	b.n	8003558 <__libc_init_array+0xc>
 800357a:	00b3      	lsls	r3, r6, #2
 800357c:	58eb      	ldr	r3, [r5, r3]
 800357e:	4798      	blx	r3
 8003580:	3601      	adds	r6, #1
 8003582:	e7f2      	b.n	800356a <__libc_init_array+0x1e>
 8003584:	08003648 	.word	0x08003648
 8003588:	08003648 	.word	0x08003648
 800358c:	0800364c 	.word	0x0800364c
 8003590:	08003648 	.word	0x08003648

08003594 <_init>:
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	46c0      	nop			@ (mov r8, r8)
 8003598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359a:	bc08      	pop	{r3}
 800359c:	469e      	mov	lr, r3
 800359e:	4770      	bx	lr

080035a0 <_fini>:
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a2:	46c0      	nop			@ (mov r8, r8)
 80035a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a6:	bc08      	pop	{r3}
 80035a8:	469e      	mov	lr, r3
 80035aa:	4770      	bx	lr
