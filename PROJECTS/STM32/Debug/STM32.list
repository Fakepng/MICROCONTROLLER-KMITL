
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006368  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08006424  08006424  00007424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006598  08006598  000080c0  2**0
                  CONTENTS
  4 .ARM          00000008  08006598  08006598  00007598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065a0  080065a0  000080c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065a0  080065a0  000075a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065a4  080065a4  000075a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  080065a8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  200000c0  08006668  000080c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08006668  00008408  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000080c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df81  00000000  00000000  000080e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ae  00000000  00000000  00016069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00018218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a0  00000000  00000000  00018d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017064  00000000  00000000  000195d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e88b  00000000  00000000  0003063c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098fa9  00000000  00000000  0003eec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7e70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c5c  00000000  00000000  000d7eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000dab10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000c0 	.word	0x200000c0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800640c 	.word	0x0800640c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000c4 	.word	0x200000c4
 8000100:	0800640c 	.word	0x0800640c

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_uldivmod>:
 8000428:	2b00      	cmp	r3, #0
 800042a:	d111      	bne.n	8000450 <__aeabi_uldivmod+0x28>
 800042c:	2a00      	cmp	r2, #0
 800042e:	d10f      	bne.n	8000450 <__aeabi_uldivmod+0x28>
 8000430:	2900      	cmp	r1, #0
 8000432:	d100      	bne.n	8000436 <__aeabi_uldivmod+0xe>
 8000434:	2800      	cmp	r0, #0
 8000436:	d002      	beq.n	800043e <__aeabi_uldivmod+0x16>
 8000438:	2100      	movs	r1, #0
 800043a:	43c9      	mvns	r1, r1
 800043c:	0008      	movs	r0, r1
 800043e:	b407      	push	{r0, r1, r2}
 8000440:	4802      	ldr	r0, [pc, #8]	@ (800044c <__aeabi_uldivmod+0x24>)
 8000442:	a102      	add	r1, pc, #8	@ (adr r1, 800044c <__aeabi_uldivmod+0x24>)
 8000444:	1840      	adds	r0, r0, r1
 8000446:	9002      	str	r0, [sp, #8]
 8000448:	bd03      	pop	{r0, r1, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	ffffffd9 	.word	0xffffffd9
 8000450:	b403      	push	{r0, r1}
 8000452:	4668      	mov	r0, sp
 8000454:	b501      	push	{r0, lr}
 8000456:	9802      	ldr	r0, [sp, #8]
 8000458:	f000 f806 	bl	8000468 <__udivmoddi4>
 800045c:	9b01      	ldr	r3, [sp, #4]
 800045e:	469e      	mov	lr, r3
 8000460:	b002      	add	sp, #8
 8000462:	bc0c      	pop	{r2, r3}
 8000464:	4770      	bx	lr
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__udivmoddi4>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	4657      	mov	r7, sl
 800046c:	464e      	mov	r6, r9
 800046e:	4645      	mov	r5, r8
 8000470:	46de      	mov	lr, fp
 8000472:	b5e0      	push	{r5, r6, r7, lr}
 8000474:	0004      	movs	r4, r0
 8000476:	000d      	movs	r5, r1
 8000478:	4692      	mov	sl, r2
 800047a:	4699      	mov	r9, r3
 800047c:	b083      	sub	sp, #12
 800047e:	428b      	cmp	r3, r1
 8000480:	d830      	bhi.n	80004e4 <__udivmoddi4+0x7c>
 8000482:	d02d      	beq.n	80004e0 <__udivmoddi4+0x78>
 8000484:	4649      	mov	r1, r9
 8000486:	4650      	mov	r0, sl
 8000488:	f000 f8d8 	bl	800063c <__clzdi2>
 800048c:	0029      	movs	r1, r5
 800048e:	0006      	movs	r6, r0
 8000490:	0020      	movs	r0, r4
 8000492:	f000 f8d3 	bl	800063c <__clzdi2>
 8000496:	1a33      	subs	r3, r6, r0
 8000498:	4698      	mov	r8, r3
 800049a:	3b20      	subs	r3, #32
 800049c:	d434      	bmi.n	8000508 <__udivmoddi4+0xa0>
 800049e:	469b      	mov	fp, r3
 80004a0:	4653      	mov	r3, sl
 80004a2:	465a      	mov	r2, fp
 80004a4:	4093      	lsls	r3, r2
 80004a6:	4642      	mov	r2, r8
 80004a8:	001f      	movs	r7, r3
 80004aa:	4653      	mov	r3, sl
 80004ac:	4093      	lsls	r3, r2
 80004ae:	001e      	movs	r6, r3
 80004b0:	42af      	cmp	r7, r5
 80004b2:	d83b      	bhi.n	800052c <__udivmoddi4+0xc4>
 80004b4:	42af      	cmp	r7, r5
 80004b6:	d100      	bne.n	80004ba <__udivmoddi4+0x52>
 80004b8:	e079      	b.n	80005ae <__udivmoddi4+0x146>
 80004ba:	465b      	mov	r3, fp
 80004bc:	1ba4      	subs	r4, r4, r6
 80004be:	41bd      	sbcs	r5, r7
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	da00      	bge.n	80004c6 <__udivmoddi4+0x5e>
 80004c4:	e076      	b.n	80005b4 <__udivmoddi4+0x14c>
 80004c6:	2200      	movs	r2, #0
 80004c8:	2300      	movs	r3, #0
 80004ca:	9200      	str	r2, [sp, #0]
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	2301      	movs	r3, #1
 80004d0:	465a      	mov	r2, fp
 80004d2:	4093      	lsls	r3, r2
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	2301      	movs	r3, #1
 80004d8:	4642      	mov	r2, r8
 80004da:	4093      	lsls	r3, r2
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	e029      	b.n	8000534 <__udivmoddi4+0xcc>
 80004e0:	4282      	cmp	r2, r0
 80004e2:	d9cf      	bls.n	8000484 <__udivmoddi4+0x1c>
 80004e4:	2200      	movs	r2, #0
 80004e6:	2300      	movs	r3, #0
 80004e8:	9200      	str	r2, [sp, #0]
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <__udivmoddi4+0x8e>
 80004f2:	601c      	str	r4, [r3, #0]
 80004f4:	605d      	str	r5, [r3, #4]
 80004f6:	9800      	ldr	r0, [sp, #0]
 80004f8:	9901      	ldr	r1, [sp, #4]
 80004fa:	b003      	add	sp, #12
 80004fc:	bcf0      	pop	{r4, r5, r6, r7}
 80004fe:	46bb      	mov	fp, r7
 8000500:	46b2      	mov	sl, r6
 8000502:	46a9      	mov	r9, r5
 8000504:	46a0      	mov	r8, r4
 8000506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000508:	4642      	mov	r2, r8
 800050a:	469b      	mov	fp, r3
 800050c:	2320      	movs	r3, #32
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	4652      	mov	r2, sl
 8000512:	40da      	lsrs	r2, r3
 8000514:	4641      	mov	r1, r8
 8000516:	0013      	movs	r3, r2
 8000518:	464a      	mov	r2, r9
 800051a:	408a      	lsls	r2, r1
 800051c:	0017      	movs	r7, r2
 800051e:	4642      	mov	r2, r8
 8000520:	431f      	orrs	r7, r3
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	001e      	movs	r6, r3
 8000528:	42af      	cmp	r7, r5
 800052a:	d9c3      	bls.n	80004b4 <__udivmoddi4+0x4c>
 800052c:	2200      	movs	r2, #0
 800052e:	2300      	movs	r3, #0
 8000530:	9200      	str	r2, [sp, #0]
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	4643      	mov	r3, r8
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0d8      	beq.n	80004ec <__udivmoddi4+0x84>
 800053a:	07fb      	lsls	r3, r7, #31
 800053c:	0872      	lsrs	r2, r6, #1
 800053e:	431a      	orrs	r2, r3
 8000540:	4646      	mov	r6, r8
 8000542:	087b      	lsrs	r3, r7, #1
 8000544:	e00e      	b.n	8000564 <__udivmoddi4+0xfc>
 8000546:	42ab      	cmp	r3, r5
 8000548:	d101      	bne.n	800054e <__udivmoddi4+0xe6>
 800054a:	42a2      	cmp	r2, r4
 800054c:	d80c      	bhi.n	8000568 <__udivmoddi4+0x100>
 800054e:	1aa4      	subs	r4, r4, r2
 8000550:	419d      	sbcs	r5, r3
 8000552:	2001      	movs	r0, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2100      	movs	r1, #0
 800055a:	3e01      	subs	r6, #1
 800055c:	1824      	adds	r4, r4, r0
 800055e:	414d      	adcs	r5, r1
 8000560:	2e00      	cmp	r6, #0
 8000562:	d006      	beq.n	8000572 <__udivmoddi4+0x10a>
 8000564:	42ab      	cmp	r3, r5
 8000566:	d9ee      	bls.n	8000546 <__udivmoddi4+0xde>
 8000568:	3e01      	subs	r6, #1
 800056a:	1924      	adds	r4, r4, r4
 800056c:	416d      	adcs	r5, r5
 800056e:	2e00      	cmp	r6, #0
 8000570:	d1f8      	bne.n	8000564 <__udivmoddi4+0xfc>
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	465b      	mov	r3, fp
 8000578:	1900      	adds	r0, r0, r4
 800057a:	4169      	adcs	r1, r5
 800057c:	2b00      	cmp	r3, #0
 800057e:	db24      	blt.n	80005ca <__udivmoddi4+0x162>
 8000580:	002b      	movs	r3, r5
 8000582:	465a      	mov	r2, fp
 8000584:	4644      	mov	r4, r8
 8000586:	40d3      	lsrs	r3, r2
 8000588:	002a      	movs	r2, r5
 800058a:	40e2      	lsrs	r2, r4
 800058c:	001c      	movs	r4, r3
 800058e:	465b      	mov	r3, fp
 8000590:	0015      	movs	r5, r2
 8000592:	2b00      	cmp	r3, #0
 8000594:	db2a      	blt.n	80005ec <__udivmoddi4+0x184>
 8000596:	0026      	movs	r6, r4
 8000598:	409e      	lsls	r6, r3
 800059a:	0033      	movs	r3, r6
 800059c:	0026      	movs	r6, r4
 800059e:	4647      	mov	r7, r8
 80005a0:	40be      	lsls	r6, r7
 80005a2:	0032      	movs	r2, r6
 80005a4:	1a80      	subs	r0, r0, r2
 80005a6:	4199      	sbcs	r1, r3
 80005a8:	9000      	str	r0, [sp, #0]
 80005aa:	9101      	str	r1, [sp, #4]
 80005ac:	e79e      	b.n	80004ec <__udivmoddi4+0x84>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d8bc      	bhi.n	800052c <__udivmoddi4+0xc4>
 80005b2:	e782      	b.n	80004ba <__udivmoddi4+0x52>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	2100      	movs	r1, #0
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	2200      	movs	r2, #0
 80005be:	9100      	str	r1, [sp, #0]
 80005c0:	9201      	str	r2, [sp, #4]
 80005c2:	2201      	movs	r2, #1
 80005c4:	40da      	lsrs	r2, r3
 80005c6:	9201      	str	r2, [sp, #4]
 80005c8:	e785      	b.n	80004d6 <__udivmoddi4+0x6e>
 80005ca:	4642      	mov	r2, r8
 80005cc:	2320      	movs	r3, #32
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	002a      	movs	r2, r5
 80005d2:	4646      	mov	r6, r8
 80005d4:	409a      	lsls	r2, r3
 80005d6:	0023      	movs	r3, r4
 80005d8:	40f3      	lsrs	r3, r6
 80005da:	4644      	mov	r4, r8
 80005dc:	4313      	orrs	r3, r2
 80005de:	002a      	movs	r2, r5
 80005e0:	40e2      	lsrs	r2, r4
 80005e2:	001c      	movs	r4, r3
 80005e4:	465b      	mov	r3, fp
 80005e6:	0015      	movs	r5, r2
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	dad4      	bge.n	8000596 <__udivmoddi4+0x12e>
 80005ec:	4642      	mov	r2, r8
 80005ee:	002f      	movs	r7, r5
 80005f0:	2320      	movs	r3, #32
 80005f2:	0026      	movs	r6, r4
 80005f4:	4097      	lsls	r7, r2
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	40de      	lsrs	r6, r3
 80005fa:	003b      	movs	r3, r7
 80005fc:	4333      	orrs	r3, r6
 80005fe:	e7cd      	b.n	800059c <__udivmoddi4+0x134>

08000600 <__clzsi2>:
 8000600:	211c      	movs	r1, #28
 8000602:	2301      	movs	r3, #1
 8000604:	041b      	lsls	r3, r3, #16
 8000606:	4298      	cmp	r0, r3
 8000608:	d301      	bcc.n	800060e <__clzsi2+0xe>
 800060a:	0c00      	lsrs	r0, r0, #16
 800060c:	3910      	subs	r1, #16
 800060e:	0a1b      	lsrs	r3, r3, #8
 8000610:	4298      	cmp	r0, r3
 8000612:	d301      	bcc.n	8000618 <__clzsi2+0x18>
 8000614:	0a00      	lsrs	r0, r0, #8
 8000616:	3908      	subs	r1, #8
 8000618:	091b      	lsrs	r3, r3, #4
 800061a:	4298      	cmp	r0, r3
 800061c:	d301      	bcc.n	8000622 <__clzsi2+0x22>
 800061e:	0900      	lsrs	r0, r0, #4
 8000620:	3904      	subs	r1, #4
 8000622:	a202      	add	r2, pc, #8	@ (adr r2, 800062c <__clzsi2+0x2c>)
 8000624:	5c10      	ldrb	r0, [r2, r0]
 8000626:	1840      	adds	r0, r0, r1
 8000628:	4770      	bx	lr
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	02020304 	.word	0x02020304
 8000630:	01010101 	.word	0x01010101
	...

0800063c <__clzdi2>:
 800063c:	b510      	push	{r4, lr}
 800063e:	2900      	cmp	r1, #0
 8000640:	d103      	bne.n	800064a <__clzdi2+0xe>
 8000642:	f7ff ffdd 	bl	8000600 <__clzsi2>
 8000646:	3020      	adds	r0, #32
 8000648:	e002      	b.n	8000650 <__clzdi2+0x14>
 800064a:	0008      	movs	r0, r1
 800064c:	f7ff ffd8 	bl	8000600 <__clzsi2>
 8000650:	bd10      	pop	{r4, pc}
 8000652:	46c0      	nop			@ (mov r8, r8)

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000658:	f000 fe18 	bl	800128c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065c:	f000 f826 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f000 f90a 	bl	8000878 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000664:	f000 f8ba 	bl	80007dc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000668:	f000 f87e 	bl	8000768 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 800066c:	490a      	ldr	r1, [pc, #40]	@ (8000698 <main+0x44>)
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <main+0x48>)
 8000670:	2201      	movs	r2, #1
 8000672:	0018      	movs	r0, r3
 8000674:	f003 f9dc 	bl	8003a30 <HAL_UART_Receive_IT>
  HAL_SPI_Receive_IT(&hspi1, spi_data, 8);
 8000678:	4909      	ldr	r1, [pc, #36]	@ (80006a0 <main+0x4c>)
 800067a:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <main+0x50>)
 800067c:	2208      	movs	r2, #8
 800067e:	0018      	movs	r0, r3
 8000680:	f002 fa96 	bl	8002bb0 <HAL_SPI_Receive_IT>

  HAL_UART_Transmit(&huart2, (uint8_t *)"Start\r\n", 7, 1000);
 8000684:	23fa      	movs	r3, #250	@ 0xfa
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	4907      	ldr	r1, [pc, #28]	@ (80006a8 <main+0x54>)
 800068a:	4804      	ldr	r0, [pc, #16]	@ (800069c <main+0x48>)
 800068c:	2207      	movs	r2, #7
 800068e:	f003 f92b 	bl	80038e8 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	e7fd      	b.n	8000692 <main+0x3e>
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	200001d8 	.word	0x200001d8
 800069c:	20000140 	.word	0x20000140
 80006a0:	200002a8 	.word	0x200002a8
 80006a4:	200000dc 	.word	0x200000dc
 80006a8:	08006424 	.word	0x08006424

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b093      	sub	sp, #76	@ 0x4c
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	2410      	movs	r4, #16
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	0018      	movs	r0, r3
 80006b8:	2338      	movs	r3, #56	@ 0x38
 80006ba:	001a      	movs	r2, r3
 80006bc:	2100      	movs	r1, #0
 80006be:	f005 fa13 	bl	8005ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c2:	003b      	movs	r3, r7
 80006c4:	0018      	movs	r0, r3
 80006c6:	2310      	movs	r3, #16
 80006c8:	001a      	movs	r2, r3
 80006ca:	2100      	movs	r1, #0
 80006cc:	f005 fa0c 	bl	8005ae8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2380      	movs	r3, #128	@ 0x80
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 f98b 	bl	80019f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2202      	movs	r2, #2
 80006de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2280      	movs	r2, #128	@ 0x80
 80006e4:	0052      	lsls	r2, r2, #1
 80006e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006e8:	0021      	movs	r1, r4
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2240      	movs	r2, #64	@ 0x40
 80006f4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2202      	movs	r2, #2
 80006fa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2202      	movs	r2, #2
 8000700:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2200      	movs	r2, #0
 8000706:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2208      	movs	r2, #8
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2280      	movs	r2, #128	@ 0x80
 8000712:	0292      	lsls	r2, r2, #10
 8000714:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2280      	movs	r2, #128	@ 0x80
 800071a:	0492      	lsls	r2, r2, #18
 800071c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2280      	movs	r2, #128	@ 0x80
 8000722:	0592      	lsls	r2, r2, #22
 8000724:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	187b      	adds	r3, r7, r1
 8000728:	0018      	movs	r0, r3
 800072a:	f001 f9ad 	bl	8001a88 <HAL_RCC_OscConfig>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000732:	f000 fc2f 	bl	8000f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	003b      	movs	r3, r7
 8000738:	2207      	movs	r2, #7
 800073a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	003b      	movs	r3, r7
 800073e:	2202      	movs	r2, #2
 8000740:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	003b      	movs	r3, r7
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	003b      	movs	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800074e:	003b      	movs	r3, r7
 8000750:	2102      	movs	r1, #2
 8000752:	0018      	movs	r0, r3
 8000754:	f001 fcb2 	bl	80020bc <HAL_RCC_ClockConfig>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800075c:	f000 fc1a 	bl	8000f94 <Error_Handler>
  }
}
 8000760:	46c0      	nop			@ (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b013      	add	sp, #76	@ 0x4c
 8000766:	bd90      	pop	{r4, r7, pc}

08000768 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800076c:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <MX_SPI1_Init+0x6c>)
 800076e:	4a1a      	ldr	r2, [pc, #104]	@ (80007d8 <MX_SPI1_Init+0x70>)
 8000770:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000772:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <MX_SPI1_Init+0x6c>)
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000778:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <MX_SPI1_Init+0x6c>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <MX_SPI1_Init+0x6c>)
 8000780:	22e0      	movs	r2, #224	@ 0xe0
 8000782:	00d2      	lsls	r2, r2, #3
 8000784:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000786:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <MX_SPI1_Init+0x6c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_SPI1_Init+0x6c>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000792:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <MX_SPI1_Init+0x6c>)
 8000794:	2280      	movs	r2, #128	@ 0x80
 8000796:	0092      	lsls	r2, r2, #2
 8000798:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <MX_SPI1_Init+0x6c>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <MX_SPI1_Init+0x6c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <MX_SPI1_Init+0x6c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007ac:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_SPI1_Init+0x6c>)
 80007ae:	2207      	movs	r2, #7
 80007b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <MX_SPI1_Init+0x6c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007b8:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <MX_SPI1_Init+0x6c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007be:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <MX_SPI1_Init+0x6c>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f001 ffdd 	bl	8002780 <HAL_SPI_Init>
 80007c6:	1e03      	subs	r3, r0, #0
 80007c8:	d001      	beq.n	80007ce <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80007ca:	f000 fbe3 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000dc 	.word	0x200000dc
 80007d8:	40013000 	.word	0x40013000

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b23      	ldr	r3, [pc, #140]	@ (8000870 <MX_USART2_UART_Init+0x94>)
 80007e2:	4a24      	ldr	r2, [pc, #144]	@ (8000874 <MX_USART2_UART_Init+0x98>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b22      	ldr	r3, [pc, #136]	@ (8000870 <MX_USART2_UART_Init+0x94>)
 80007e8:	22e1      	movs	r2, #225	@ 0xe1
 80007ea:	0252      	lsls	r2, r2, #9
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b20      	ldr	r3, [pc, #128]	@ (8000870 <MX_USART2_UART_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000870 <MX_USART2_UART_Init+0x94>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <MX_USART2_UART_Init+0x94>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_USART2_UART_Init+0x94>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <MX_USART2_UART_Init+0x94>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <MX_USART2_UART_Init+0x94>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <MX_USART2_UART_Init+0x94>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000818:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <MX_USART2_UART_Init+0x94>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081e:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_USART2_UART_Init+0x94>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <MX_USART2_UART_Init+0x94>)
 8000826:	0018      	movs	r0, r3
 8000828:	f003 f808 	bl	800383c <HAL_UART_Init>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d001      	beq.n	8000834 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000830:	f000 fbb0 	bl	8000f94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000834:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_USART2_UART_Init+0x94>)
 8000836:	2100      	movs	r1, #0
 8000838:	0018      	movs	r0, r3
 800083a:	f005 f855 	bl	80058e8 <HAL_UARTEx_SetTxFifoThreshold>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000842:	f000 fba7 	bl	8000f94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000846:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <MX_USART2_UART_Init+0x94>)
 8000848:	2100      	movs	r1, #0
 800084a:	0018      	movs	r0, r3
 800084c:	f005 f88c 	bl	8005968 <HAL_UARTEx_SetRxFifoThreshold>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000854:	f000 fb9e 	bl	8000f94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000858:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <MX_USART2_UART_Init+0x94>)
 800085a:	0018      	movs	r0, r3
 800085c:	f005 f80a 	bl	8005874 <HAL_UARTEx_DisableFifoMode>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d001      	beq.n	8000868 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000864:	f000 fb96 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	20000140 	.word	0x20000140
 8000874:	40004400 	.word	0x40004400

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b08b      	sub	sp, #44	@ 0x2c
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	2414      	movs	r4, #20
 8000880:	193b      	adds	r3, r7, r4
 8000882:	0018      	movs	r0, r3
 8000884:	2314      	movs	r3, #20
 8000886:	001a      	movs	r2, r3
 8000888:	2100      	movs	r1, #0
 800088a:	f005 f92d 	bl	8005ae8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b46      	ldr	r3, [pc, #280]	@ (80009a8 <MX_GPIO_Init+0x130>)
 8000890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000892:	4b45      	ldr	r3, [pc, #276]	@ (80009a8 <MX_GPIO_Init+0x130>)
 8000894:	2104      	movs	r1, #4
 8000896:	430a      	orrs	r2, r1
 8000898:	635a      	str	r2, [r3, #52]	@ 0x34
 800089a:	4b43      	ldr	r3, [pc, #268]	@ (80009a8 <MX_GPIO_Init+0x130>)
 800089c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800089e:	2204      	movs	r2, #4
 80008a0:	4013      	ands	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a6:	4b40      	ldr	r3, [pc, #256]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008aa:	4b3f      	ldr	r3, [pc, #252]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008ac:	2120      	movs	r1, #32
 80008ae:	430a      	orrs	r2, r1
 80008b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008b2:	4b3d      	ldr	r3, [pc, #244]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008b6:	2220      	movs	r2, #32
 80008b8:	4013      	ands	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b3a      	ldr	r3, [pc, #232]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008c2:	4b39      	ldr	r3, [pc, #228]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008c4:	2101      	movs	r1, #1
 80008c6:	430a      	orrs	r2, r1
 80008c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80008ca:	4b37      	ldr	r3, [pc, #220]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ce:	2201      	movs	r2, #1
 80008d0:	4013      	ands	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b34      	ldr	r3, [pc, #208]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008da:	4b33      	ldr	r3, [pc, #204]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008dc:	2102      	movs	r1, #2
 80008de:	430a      	orrs	r2, r1
 80008e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008e2:	4b31      	ldr	r3, [pc, #196]	@ (80009a8 <MX_GPIO_Init+0x130>)
 80008e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008e6:	2202      	movs	r2, #2
 80008e8:	4013      	ands	r3, r2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|RELAY_5_Pin, GPIO_PIN_RESET);
 80008ee:	2390      	movs	r3, #144	@ 0x90
 80008f0:	0059      	lsls	r1, r3, #1
 80008f2:	23a0      	movs	r3, #160	@ 0xa0
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	2200      	movs	r2, #0
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 f85b 	bl	80019b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_4_Pin|RELAY_1_Pin|RELAY_3_Pin|RELAY_2_Pin, GPIO_PIN_RESET);
 80008fe:	492b      	ldr	r1, [pc, #172]	@ (80009ac <MX_GPIO_Init+0x134>)
 8000900:	4b2b      	ldr	r3, [pc, #172]	@ (80009b0 <MX_GPIO_Init+0x138>)
 8000902:	2200      	movs	r2, #0
 8000904:	0018      	movs	r0, r3
 8000906:	f001 f855 	bl	80019b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 800090a:	193b      	adds	r3, r7, r4
 800090c:	2280      	movs	r2, #128	@ 0x80
 800090e:	0192      	lsls	r2, r2, #6
 8000910:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000912:	193b      	adds	r3, r7, r4
 8000914:	2288      	movs	r2, #136	@ 0x88
 8000916:	0352      	lsls	r2, r2, #13
 8000918:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	193b      	adds	r3, r7, r4
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000920:	193b      	adds	r3, r7, r4
 8000922:	4a24      	ldr	r2, [pc, #144]	@ (80009b4 <MX_GPIO_Init+0x13c>)
 8000924:	0019      	movs	r1, r3
 8000926:	0010      	movs	r0, r2
 8000928:	f000 fee0 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2220      	movs	r2, #32
 8000930:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2201      	movs	r2, #1
 8000936:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2202      	movs	r2, #2
 8000942:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000944:	193a      	adds	r2, r7, r4
 8000946:	23a0      	movs	r3, #160	@ 0xa0
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	0011      	movs	r1, r2
 800094c:	0018      	movs	r0, r3
 800094e:	f000 fecd 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_4_Pin RELAY_1_Pin RELAY_3_Pin RELAY_2_Pin */
  GPIO_InitStruct.Pin = RELAY_4_Pin|RELAY_1_Pin|RELAY_3_Pin|RELAY_2_Pin;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	4a15      	ldr	r2, [pc, #84]	@ (80009ac <MX_GPIO_Init+0x134>)
 8000956:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	193b      	adds	r3, r7, r4
 800095a:	2201      	movs	r2, #1
 800095c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	193b      	adds	r3, r7, r4
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096a:	193b      	adds	r3, r7, r4
 800096c:	4a10      	ldr	r2, [pc, #64]	@ (80009b0 <MX_GPIO_Init+0x138>)
 800096e:	0019      	movs	r1, r3
 8000970:	0010      	movs	r0, r2
 8000972:	f000 febb 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_5_Pin */
  GPIO_InitStruct.Pin = RELAY_5_Pin;
 8000976:	0021      	movs	r1, r4
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2280      	movs	r2, #128	@ 0x80
 800097c:	0052      	lsls	r2, r2, #1
 800097e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2201      	movs	r2, #1
 8000984:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RELAY_5_GPIO_Port, &GPIO_InitStruct);
 8000992:	187a      	adds	r2, r7, r1
 8000994:	23a0      	movs	r3, #160	@ 0xa0
 8000996:	05db      	lsls	r3, r3, #23
 8000998:	0011      	movs	r1, r2
 800099a:	0018      	movs	r0, r3
 800099c:	f000 fea6 	bl	80016ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a0:	46c0      	nop			@ (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b00b      	add	sp, #44	@ 0x2c
 80009a6:	bd90      	pop	{r4, r7, pc}
 80009a8:	40021000 	.word	0x40021000
 80009ac:	00004038 	.word	0x00004038
 80009b0:	50000400 	.word	0x50000400
 80009b4:	50000800 	.word	0x50000800

080009b8 <process_uart>:

	default:
	}
}

void process_uart() {
 80009b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ba:	46ce      	mov	lr, r9
 80009bc:	4647      	mov	r7, r8
 80009be:	b580      	push	{r7, lr}
 80009c0:	b099      	sub	sp, #100	@ 0x64
 80009c2:	af06      	add	r7, sp, #24
	strncpy(rx_buffer_old, rx_buffer, 100);
 80009c4:	495c      	ldr	r1, [pc, #368]	@ (8000b38 <process_uart+0x180>)
 80009c6:	4b5d      	ldr	r3, [pc, #372]	@ (8000b3c <process_uart+0x184>)
 80009c8:	2264      	movs	r2, #100	@ 0x64
 80009ca:	0018      	movs	r0, r3
 80009cc:	f005 f894 	bl	8005af8 <strncpy>
	HAL_UART_Transmit(&huart2, "\r\n", 2, 100);
 80009d0:	495b      	ldr	r1, [pc, #364]	@ (8000b40 <process_uart+0x188>)
 80009d2:	485c      	ldr	r0, [pc, #368]	@ (8000b44 <process_uart+0x18c>)
 80009d4:	2364      	movs	r3, #100	@ 0x64
 80009d6:	2202      	movs	r2, #2
 80009d8:	f002 ff86 	bl	80038e8 <HAL_UART_Transmit>

	if (!strcmp(rx_buffer, (uint8_t *)"?")) {
 80009dc:	4a5a      	ldr	r2, [pc, #360]	@ (8000b48 <process_uart+0x190>)
 80009de:	4b56      	ldr	r3, [pc, #344]	@ (8000b38 <process_uart+0x180>)
 80009e0:	0011      	movs	r1, r2
 80009e2:	0018      	movs	r0, r3
 80009e4:	f7ff fb8e 	bl	8000104 <strcmp>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d110      	bne.n	8000a0e <process_uart+0x56>
		const char message[] = "led on, led off, error, spi, clear, ?";
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	4a57      	ldr	r2, [pc, #348]	@ (8000b4c <process_uart+0x194>)
 80009f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009f2:	c313      	stmia	r3!, {r0, r1, r4}
 80009f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009f6:	c313      	stmia	r3!, {r0, r1, r4}
 80009f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009fa:	c313      	stmia	r3!, {r0, r1, r4}
 80009fc:	8812      	ldrh	r2, [r2, #0]
 80009fe:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)message, (int)strlen(message), 1000);
 8000a00:	23fa      	movs	r3, #250	@ 0xfa
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	1d39      	adds	r1, r7, #4
 8000a06:	484f      	ldr	r0, [pc, #316]	@ (8000b44 <process_uart+0x18c>)
 8000a08:	2225      	movs	r2, #37	@ 0x25
 8000a0a:	f002 ff6d 	bl	80038e8 <HAL_UART_Transmit>
	}

	if (!strcmp(rx_buffer, (uint8_t *)"led on")) {
 8000a0e:	4a50      	ldr	r2, [pc, #320]	@ (8000b50 <process_uart+0x198>)
 8000a10:	4b49      	ldr	r3, [pc, #292]	@ (8000b38 <process_uart+0x180>)
 8000a12:	0011      	movs	r1, r2
 8000a14:	0018      	movs	r0, r3
 8000a16:	f7ff fb75 	bl	8000104 <strcmp>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d10c      	bne.n	8000a38 <process_uart+0x80>
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, 1);
 8000a1e:	23a0      	movs	r3, #160	@ 0xa0
 8000a20:	05db      	lsls	r3, r3, #23
 8000a22:	2201      	movs	r2, #1
 8000a24:	2120      	movs	r1, #32
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 ffc4 	bl	80019b4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t *)"1", 1, 100);
 8000a2c:	4949      	ldr	r1, [pc, #292]	@ (8000b54 <process_uart+0x19c>)
 8000a2e:	4845      	ldr	r0, [pc, #276]	@ (8000b44 <process_uart+0x18c>)
 8000a30:	2364      	movs	r3, #100	@ 0x64
 8000a32:	2201      	movs	r2, #1
 8000a34:	f002 ff58 	bl	80038e8 <HAL_UART_Transmit>
	}

	if (!strcmp(rx_buffer, (uint8_t *)"led off")) {
 8000a38:	4a47      	ldr	r2, [pc, #284]	@ (8000b58 <process_uart+0x1a0>)
 8000a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b38 <process_uart+0x180>)
 8000a3c:	0011      	movs	r1, r2
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f7ff fb60 	bl	8000104 <strcmp>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d10c      	bne.n	8000a62 <process_uart+0xaa>
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, 0);
 8000a48:	23a0      	movs	r3, #160	@ 0xa0
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2120      	movs	r1, #32
 8000a50:	0018      	movs	r0, r3
 8000a52:	f000 ffaf 	bl	80019b4 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t *)"1", 1, 100);
 8000a56:	493f      	ldr	r1, [pc, #252]	@ (8000b54 <process_uart+0x19c>)
 8000a58:	483a      	ldr	r0, [pc, #232]	@ (8000b44 <process_uart+0x18c>)
 8000a5a:	2364      	movs	r3, #100	@ 0x64
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f002 ff43 	bl	80038e8 <HAL_UART_Transmit>
	}

	if (!strcmp(rx_buffer, (uint8_t *)"error")) {
 8000a62:	4a3e      	ldr	r2, [pc, #248]	@ (8000b5c <process_uart+0x1a4>)
 8000a64:	4b34      	ldr	r3, [pc, #208]	@ (8000b38 <process_uart+0x180>)
 8000a66:	0011      	movs	r1, r2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f7ff fb4b 	bl	8000104 <strcmp>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d111      	bne.n	8000a96 <process_uart+0xde>
		HAL_UART_Transmit(&huart2, debug_message, strlen(debug_message), 1000);
 8000a72:	4b3b      	ldr	r3, [pc, #236]	@ (8000b60 <process_uart+0x1a8>)
 8000a74:	0018      	movs	r0, r3
 8000a76:	f7ff fb4f 	bl	8000118 <strlen>
 8000a7a:	0003      	movs	r3, r0
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	23fa      	movs	r3, #250	@ 0xfa
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4937      	ldr	r1, [pc, #220]	@ (8000b60 <process_uart+0x1a8>)
 8000a84:	482f      	ldr	r0, [pc, #188]	@ (8000b44 <process_uart+0x18c>)
 8000a86:	f002 ff2f 	bl	80038e8 <HAL_UART_Transmit>
		strncpy(debug_message, (uint8_t *)"none", 100);
 8000a8a:	4936      	ldr	r1, [pc, #216]	@ (8000b64 <process_uart+0x1ac>)
 8000a8c:	4b34      	ldr	r3, [pc, #208]	@ (8000b60 <process_uart+0x1a8>)
 8000a8e:	2264      	movs	r2, #100	@ 0x64
 8000a90:	0018      	movs	r0, r3
 8000a92:	f005 f831 	bl	8005af8 <strncpy>
	}

	if (!strcmp(rx_buffer, (uint8_t *)"spi")) {
 8000a96:	4a34      	ldr	r2, [pc, #208]	@ (8000b68 <process_uart+0x1b0>)
 8000a98:	4b27      	ldr	r3, [pc, #156]	@ (8000b38 <process_uart+0x180>)
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f7ff fb31 	bl	8000104 <strcmp>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d12d      	bne.n	8000b02 <process_uart+0x14a>
		uint8_t message[64];
		int message_length = sprintf(message, "0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x", (int)spi_data[0], (int)spi_data[1], (int)spi_data[2], (int)spi_data[3], (int)spi_data[4], (int)spi_data[5], (int)spi_data[6], (int)spi_data[7]);
 8000aa6:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <process_uart+0x1b4>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	4698      	mov	r8, r3
 8000aac:	4b2f      	ldr	r3, [pc, #188]	@ (8000b6c <process_uart+0x1b4>)
 8000aae:	785b      	ldrb	r3, [r3, #1]
 8000ab0:	4699      	mov	r9, r3
 8000ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <process_uart+0x1b4>)
 8000ab4:	789b      	ldrb	r3, [r3, #2]
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <process_uart+0x1b4>)
 8000aba:	78db      	ldrb	r3, [r3, #3]
 8000abc:	001c      	movs	r4, r3
 8000abe:	4b2b      	ldr	r3, [pc, #172]	@ (8000b6c <process_uart+0x1b4>)
 8000ac0:	791b      	ldrb	r3, [r3, #4]
 8000ac2:	001d      	movs	r5, r3
 8000ac4:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <process_uart+0x1b4>)
 8000ac6:	795b      	ldrb	r3, [r3, #5]
 8000ac8:	001e      	movs	r6, r3
 8000aca:	4b28      	ldr	r3, [pc, #160]	@ (8000b6c <process_uart+0x1b4>)
 8000acc:	799b      	ldrb	r3, [r3, #6]
 8000ace:	469c      	mov	ip, r3
 8000ad0:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <process_uart+0x1b4>)
 8000ad2:	79db      	ldrb	r3, [r3, #7]
 8000ad4:	4926      	ldr	r1, [pc, #152]	@ (8000b70 <process_uart+0x1b8>)
 8000ad6:	1d38      	adds	r0, r7, #4
 8000ad8:	9305      	str	r3, [sp, #20]
 8000ada:	4663      	mov	r3, ip
 8000adc:	9304      	str	r3, [sp, #16]
 8000ade:	9603      	str	r6, [sp, #12]
 8000ae0:	9502      	str	r5, [sp, #8]
 8000ae2:	9401      	str	r4, [sp, #4]
 8000ae4:	9200      	str	r2, [sp, #0]
 8000ae6:	464b      	mov	r3, r9
 8000ae8:	4642      	mov	r2, r8
 8000aea:	f004 ffdd 	bl	8005aa8 <siprintf>
 8000aee:	0003      	movs	r3, r0
 8000af0:	647b      	str	r3, [r7, #68]	@ 0x44
		HAL_UART_Transmit(&huart2, message, message_length, 1000);
 8000af2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	23fa      	movs	r3, #250	@ 0xfa
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	1d39      	adds	r1, r7, #4
 8000afc:	4811      	ldr	r0, [pc, #68]	@ (8000b44 <process_uart+0x18c>)
 8000afe:	f002 fef3 	bl	80038e8 <HAL_UART_Transmit>
	}

	if (!strcmp(rx_buffer, "clear")) {
 8000b02:	4a1c      	ldr	r2, [pc, #112]	@ (8000b74 <process_uart+0x1bc>)
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <process_uart+0x180>)
 8000b06:	0011      	movs	r1, r2
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff fafb 	bl	8000104 <strcmp>
 8000b0e:	1e03      	subs	r3, r0, #0
 8000b10:	d105      	bne.n	8000b1e <process_uart+0x166>
		HAL_UART_Transmit(&huart2, (uint8_t *)"\033[2J\033[0;0H", (int)strlen("\033[2J\033[0;0H"), 100);
 8000b12:	4919      	ldr	r1, [pc, #100]	@ (8000b78 <process_uart+0x1c0>)
 8000b14:	480b      	ldr	r0, [pc, #44]	@ (8000b44 <process_uart+0x18c>)
 8000b16:	2364      	movs	r3, #100	@ 0x64
 8000b18:	220a      	movs	r2, #10
 8000b1a:	f002 fee5 	bl	80038e8 <HAL_UART_Transmit>
	}

	HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 100);
 8000b1e:	4908      	ldr	r1, [pc, #32]	@ (8000b40 <process_uart+0x188>)
 8000b20:	4808      	ldr	r0, [pc, #32]	@ (8000b44 <process_uart+0x18c>)
 8000b22:	2364      	movs	r3, #100	@ 0x64
 8000b24:	2202      	movs	r2, #2
 8000b26:	f002 fedf 	bl	80038e8 <HAL_UART_Transmit>
}
 8000b2a:	46c0      	nop			@ (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b013      	add	sp, #76	@ 0x4c
 8000b30:	bcc0      	pop	{r6, r7}
 8000b32:	46b9      	mov	r9, r7
 8000b34:	46b0      	mov	r8, r6
 8000b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b38:	200001dc 	.word	0x200001dc
 8000b3c:	20000240 	.word	0x20000240
 8000b40:	0800642c 	.word	0x0800642c
 8000b44:	20000140 	.word	0x20000140
 8000b48:	08006430 	.word	0x08006430
 8000b4c:	080064a0 	.word	0x080064a0
 8000b50:	08006434 	.word	0x08006434
 8000b54:	0800643c 	.word	0x0800643c
 8000b58:	08006440 	.word	0x08006440
 8000b5c:	08006448 	.word	0x08006448
 8000b60:	20000000 	.word	0x20000000
 8000b64:	08006450 	.word	0x08006450
 8000b68:	08006458 	.word	0x08006458
 8000b6c:	200002a8 	.word	0x200002a8
 8000b70:	0800645c 	.word	0x0800645c
 8000b74:	0800648c 	.word	0x0800648c
 8000b78:	08006494 	.word	0x08006494

08000b7c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	UNUSED(huart);

	uint8_t i;
	if (huart->Instance == USART2) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a37      	ldr	r2, [pc, #220]	@ (8000c68 <HAL_UART_RxCpltCallback+0xec>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d167      	bne.n	8000c5e <HAL_UART_RxCpltCallback+0xe2>
		if (rx_indx == 0) {
 8000b8e:	4b37      	ldr	r3, [pc, #220]	@ (8000c6c <HAL_UART_RxCpltCallback+0xf0>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d114      	bne.n	8000bc0 <HAL_UART_RxCpltCallback+0x44>
			for (i = 0; i < 100; i++) {
 8000b96:	230f      	movs	r3, #15
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	e00a      	b.n	8000bb6 <HAL_UART_RxCpltCallback+0x3a>
				rx_buffer[i] = 0;
 8000ba0:	200f      	movs	r0, #15
 8000ba2:	183b      	adds	r3, r7, r0
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	4a32      	ldr	r2, [pc, #200]	@ (8000c70 <HAL_UART_RxCpltCallback+0xf4>)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < 100; i++) {
 8000bac:	183b      	adds	r3, r7, r0
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	183b      	adds	r3, r7, r0
 8000bb2:	3201      	adds	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	230f      	movs	r3, #15
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b63      	cmp	r3, #99	@ 0x63
 8000bbe:	d9ef      	bls.n	8000ba0 <HAL_UART_RxCpltCallback+0x24>
			}
		}
		if (rx_data[0] == 8) {
 8000bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c74 <HAL_UART_RxCpltCallback+0xf8>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b08      	cmp	r3, #8
 8000bc6:	d110      	bne.n	8000bea <HAL_UART_RxCpltCallback+0x6e>
			if (rx_indx > 0) {
 8000bc8:	4b28      	ldr	r3, [pc, #160]	@ (8000c6c <HAL_UART_RxCpltCallback+0xf0>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d035      	beq.n	8000c3c <HAL_UART_RxCpltCallback+0xc0>
				rx_buffer[--rx_indx] = 0;
 8000bd0:	4b26      	ldr	r3, [pc, #152]	@ (8000c6c <HAL_UART_RxCpltCallback+0xf0>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b24      	ldr	r3, [pc, #144]	@ (8000c6c <HAL_UART_RxCpltCallback+0xf0>)
 8000bda:	701a      	strb	r2, [r3, #0]
 8000bdc:	4b23      	ldr	r3, [pc, #140]	@ (8000c6c <HAL_UART_RxCpltCallback+0xf0>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	001a      	movs	r2, r3
 8000be2:	4b23      	ldr	r3, [pc, #140]	@ (8000c70 <HAL_UART_RxCpltCallback+0xf4>)
 8000be4:	2100      	movs	r1, #0
 8000be6:	5499      	strb	r1, [r3, r2]
 8000be8:	e028      	b.n	8000c3c <HAL_UART_RxCpltCallback+0xc0>
			}
		} else if (rx_data[0] == 13 && rx_indx == 0) {
 8000bea:	4b22      	ldr	r3, [pc, #136]	@ (8000c74 <HAL_UART_RxCpltCallback+0xf8>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b0d      	cmp	r3, #13
 8000bf0:	d10c      	bne.n	8000c0c <HAL_UART_RxCpltCallback+0x90>
 8000bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c6c <HAL_UART_RxCpltCallback+0xf0>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d108      	bne.n	8000c0c <HAL_UART_RxCpltCallback+0x90>
			strncpy(rx_buffer, rx_buffer_old, 100);
 8000bfa:	491f      	ldr	r1, [pc, #124]	@ (8000c78 <HAL_UART_RxCpltCallback+0xfc>)
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c70 <HAL_UART_RxCpltCallback+0xf4>)
 8000bfe:	2264      	movs	r2, #100	@ 0x64
 8000c00:	0018      	movs	r0, r3
 8000c02:	f004 ff79 	bl	8005af8 <strncpy>
			process_uart();
 8000c06:	f7ff fed7 	bl	80009b8 <process_uart>
 8000c0a:	e017      	b.n	8000c3c <HAL_UART_RxCpltCallback+0xc0>
		} else if (rx_data[0] != 13) {
 8000c0c:	4b19      	ldr	r3, [pc, #100]	@ (8000c74 <HAL_UART_RxCpltCallback+0xf8>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b0d      	cmp	r3, #13
 8000c12:	d00b      	beq.n	8000c2c <HAL_UART_RxCpltCallback+0xb0>
			rx_buffer[rx_indx++] = rx_data[0];
 8000c14:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <HAL_UART_RxCpltCallback+0xf0>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	b2d1      	uxtb	r1, r2
 8000c1c:	4a13      	ldr	r2, [pc, #76]	@ (8000c6c <HAL_UART_RxCpltCallback+0xf0>)
 8000c1e:	7011      	strb	r1, [r2, #0]
 8000c20:	001a      	movs	r2, r3
 8000c22:	4b14      	ldr	r3, [pc, #80]	@ (8000c74 <HAL_UART_RxCpltCallback+0xf8>)
 8000c24:	7819      	ldrb	r1, [r3, #0]
 8000c26:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <HAL_UART_RxCpltCallback+0xf4>)
 8000c28:	5499      	strb	r1, [r3, r2]
 8000c2a:	e007      	b.n	8000c3c <HAL_UART_RxCpltCallback+0xc0>
		} else {
			rx_indx = 0;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <HAL_UART_RxCpltCallback+0xf0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
			transfer_cplt = 1;
 8000c32:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <HAL_UART_RxCpltCallback+0x100>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	701a      	strb	r2, [r3, #0]
			process_uart();
 8000c38:	f7ff febe 	bl	80009b8 <process_uart>
		}

		HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000c3c:	490d      	ldr	r1, [pc, #52]	@ (8000c74 <HAL_UART_RxCpltCallback+0xf8>)
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <HAL_UART_RxCpltCallback+0x104>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	0018      	movs	r0, r3
 8000c44:	f002 fef4 	bl	8003a30 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2, rx_data, strlen(rx_data), 100);
 8000c48:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <HAL_UART_RxCpltCallback+0xf8>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f7ff fa64 	bl	8000118 <strlen>
 8000c50:	0003      	movs	r3, r0
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	4907      	ldr	r1, [pc, #28]	@ (8000c74 <HAL_UART_RxCpltCallback+0xf8>)
 8000c56:	480a      	ldr	r0, [pc, #40]	@ (8000c80 <HAL_UART_RxCpltCallback+0x104>)
 8000c58:	2364      	movs	r3, #100	@ 0x64
 8000c5a:	f002 fe45 	bl	80038e8 <HAL_UART_Transmit>
	}
}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b004      	add	sp, #16
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	40004400 	.word	0x40004400
 8000c6c:	200001d4 	.word	0x200001d4
 8000c70:	200001dc 	.word	0x200001dc
 8000c74:	200001d8 	.word	0x200001d8
 8000c78:	20000240 	.word	0x20000240
 8000c7c:	200002a4 	.word	0x200002a4
 8000c80:	20000140 	.word	0x20000140

08000c84 <crc16_modbus>:

uint16_t crc16_modbus(uint8_t *data, uint16_t length) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	000a      	movs	r2, r1
 8000c8e:	1cbb      	adds	r3, r7, #2
 8000c90:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0xFFFF;
 8000c92:	230e      	movs	r3, #14
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	2201      	movs	r2, #1
 8000c98:	4252      	negs	r2, r2
 8000c9a:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < length; i++) {
 8000c9c:	230c      	movs	r3, #12
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	801a      	strh	r2, [r3, #0]
 8000ca4:	e037      	b.n	8000d16 <crc16_modbus+0x92>
        crc ^= data[i];  // XOR byte into least sig. byte of crc
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	18d3      	adds	r3, r2, r3
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	0019      	movs	r1, r3
 8000cb4:	220e      	movs	r2, #14
 8000cb6:	18bb      	adds	r3, r7, r2
 8000cb8:	18ba      	adds	r2, r7, r2
 8000cba:	8812      	ldrh	r2, [r2, #0]
 8000cbc:	404a      	eors	r2, r1
 8000cbe:	801a      	strh	r2, [r3, #0]

        for (uint8_t j = 0; j < 8; j++) {
 8000cc0:	230b      	movs	r3, #11
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
 8000cc8:	e01a      	b.n	8000d00 <crc16_modbus+0x7c>
            if (crc & 0x0001) {  // If LSB is set
 8000cca:	210e      	movs	r1, #14
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	d008      	beq.n	8000ce8 <crc16_modbus+0x64>
                crc = (crc >> 1) ^ 0xA001;  // Shift right and XOR with polynomial
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	085b      	lsrs	r3, r3, #1
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	4914      	ldr	r1, [pc, #80]	@ (8000d34 <crc16_modbus+0xb0>)
 8000ce2:	404a      	eors	r2, r1
 8000ce4:	801a      	strh	r2, [r3, #0]
 8000ce6:	e005      	b.n	8000cf4 <crc16_modbus+0x70>
            } else {
                crc >>= 1;  // Just shift right
 8000ce8:	220e      	movs	r2, #14
 8000cea:	18bb      	adds	r3, r7, r2
 8000cec:	18ba      	adds	r2, r7, r2
 8000cee:	8812      	ldrh	r2, [r2, #0]
 8000cf0:	0852      	lsrs	r2, r2, #1
 8000cf2:	801a      	strh	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8000cf4:	210b      	movs	r1, #11
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	781a      	ldrb	r2, [r3, #0]
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	3201      	adds	r2, #1
 8000cfe:	701a      	strb	r2, [r3, #0]
 8000d00:	230b      	movs	r3, #11
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b07      	cmp	r3, #7
 8000d08:	d9df      	bls.n	8000cca <crc16_modbus+0x46>
    for (uint16_t i = 0; i < length; i++) {
 8000d0a:	210c      	movs	r1, #12
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	881a      	ldrh	r2, [r3, #0]
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	3201      	adds	r2, #1
 8000d14:	801a      	strh	r2, [r3, #0]
 8000d16:	230c      	movs	r3, #12
 8000d18:	18fa      	adds	r2, r7, r3
 8000d1a:	1cbb      	adds	r3, r7, #2
 8000d1c:	8812      	ldrh	r2, [r2, #0]
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d3c0      	bcc.n	8000ca6 <crc16_modbus+0x22>
            }
        }
    }

    return crc;  // Return the CRC16 result
 8000d24:	230e      	movs	r3, #14
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	881b      	ldrh	r3, [r3, #0]
}
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b004      	add	sp, #16
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	ffffa001 	.word	0xffffa001

08000d38 <validate_crc16_modbus>:

int validate_crc16_modbus(uint8_t *data, uint16_t length) {
 8000d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	000a      	movs	r2, r1
 8000d42:	1cbb      	adds	r3, r7, #2
 8000d44:	801a      	strh	r2, [r3, #0]
    if (length != 8) {
 8000d46:	1cbb      	adds	r3, r7, #2
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	2b08      	cmp	r3, #8
 8000d4c:	d001      	beq.n	8000d52 <validate_crc16_modbus+0x1a>
        return 0;  // Only works for 8-byte packets (6 bytes data + 2 bytes CRC)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e028      	b.n	8000da4 <validate_crc16_modbus+0x6c>
    }

    // Last two bytes in the data array are the received CRC (MSB first)
    uint16_t received_crc = (data[length - 2] << 8) | data[length - 1];  // Combine MSB and LSB
 8000d52:	1cbb      	adds	r3, r7, #2
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	3b02      	subs	r3, #2
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	18d3      	adds	r3, r2, r3
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	021b      	lsls	r3, r3, #8
 8000d60:	b21a      	sxth	r2, r3
 8000d62:	1cbb      	adds	r3, r7, #2
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	6879      	ldr	r1, [r7, #4]
 8000d6a:	18cb      	adds	r3, r1, r3
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b21b      	sxth	r3, r3
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b21a      	sxth	r2, r3
 8000d74:	250e      	movs	r5, #14
 8000d76:	197b      	adds	r3, r7, r5
 8000d78:	801a      	strh	r2, [r3, #0]

    // Calculate the CRC on the first 6 bytes of data
    uint16_t calculated_crc = crc16_modbus(data, length - 2);
 8000d7a:	1cbb      	adds	r3, r7, #2
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	3b02      	subs	r3, #2
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	260c      	movs	r6, #12
 8000d84:	19bc      	adds	r4, r7, r6
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	0011      	movs	r1, r2
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff ff7a 	bl	8000c84 <crc16_modbus>
 8000d90:	0003      	movs	r3, r0
 8000d92:	8023      	strh	r3, [r4, #0]

    // Compare calculated CRC with received CRC
    return (calculated_crc == received_crc);
 8000d94:	19ba      	adds	r2, r7, r6
 8000d96:	197b      	adds	r3, r7, r5
 8000d98:	8812      	ldrh	r2, [r2, #0]
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	425a      	negs	r2, r3
 8000da0:	4153      	adcs	r3, r2
 8000da2:	b2db      	uxtb	r3, r3
}
 8000da4:	0018      	movs	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b005      	add	sp, #20
 8000daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000dac <spi_transmit>:

void spi_transmit(SPI_HandleTypeDef *hspi) {
 8000dac:	b5b0      	push	{r4, r5, r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
    uint16_t crc = crc16_modbus(spi_response, 6);  // Calculate CRC for the first 6 bytes
 8000db4:	250e      	movs	r5, #14
 8000db6:	197c      	adds	r4, r7, r5
 8000db8:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <spi_transmit+0x48>)
 8000dba:	2106      	movs	r1, #6
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff ff61 	bl	8000c84 <crc16_modbus>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	8023      	strh	r3, [r4, #0]
    spi_response[6] = (crc >> 8) & 0xFF;  // CRC MSB
 8000dc6:	0029      	movs	r1, r5
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <spi_transmit+0x48>)
 8000dd4:	719a      	strb	r2, [r3, #6]
    spi_response[7] = crc & 0xFF;         // CRC LSB
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <spi_transmit+0x48>)
 8000dde:	71da      	strb	r2, [r3, #7]

    HAL_SPI_Transmit(hspi, spi_response, 8, 100);
 8000de0:	4904      	ldr	r1, [pc, #16]	@ (8000df4 <spi_transmit+0x48>)
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	2364      	movs	r3, #100	@ 0x64
 8000de6:	2208      	movs	r2, #8
 8000de8:	f001 fd82 	bl	80028f0 <HAL_SPI_Transmit>
}
 8000dec:	46c0      	nop			@ (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b004      	add	sp, #16
 8000df2:	bdb0      	pop	{r4, r5, r7, pc}
 8000df4:	200002b0 	.word	0x200002b0

08000df8 <printb>:

void printb(uint8_t n) {
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b089      	sub	sp, #36	@ 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	0002      	movs	r2, r0
 8000e00:	1dfb      	adds	r3, r7, #7
 8000e02:	701a      	strb	r2, [r3, #0]
	int i;
	for (i = 8; i >= 0; i--) {
 8000e04:	2308      	movs	r3, #8
 8000e06:	61fb      	str	r3, [r7, #28]
 8000e08:	e01a      	b.n	8000e40 <printb+0x48>
		unsigned char message[10];
		int message_length = sprintf(message, "%d", (n & (1<<i)) >> i);
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2101      	movs	r1, #1
 8000e10:	69fa      	ldr	r2, [r7, #28]
 8000e12:	4091      	lsls	r1, r2
 8000e14:	000a      	movs	r2, r1
 8000e16:	401a      	ands	r2, r3
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	411a      	asrs	r2, r3
 8000e1c:	490f      	ldr	r1, [pc, #60]	@ (8000e5c <printb+0x64>)
 8000e1e:	240c      	movs	r4, #12
 8000e20:	193b      	adds	r3, r7, r4
 8000e22:	0018      	movs	r0, r3
 8000e24:	f004 fe40 	bl	8005aa8 <siprintf>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	61bb      	str	r3, [r7, #24]
		HAL_UART_Transmit(&huart2, message, message_length, 100);
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	1939      	adds	r1, r7, r4
 8000e32:	480b      	ldr	r0, [pc, #44]	@ (8000e60 <printb+0x68>)
 8000e34:	2364      	movs	r3, #100	@ 0x64
 8000e36:	f002 fd57 	bl	80038e8 <HAL_UART_Transmit>
	for (i = 8; i >= 0; i--) {
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	61fb      	str	r3, [r7, #28]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	dae1      	bge.n	8000e0a <printb+0x12>
	}
    HAL_UART_Transmit(&huart2, "\r\n", 2, 100);
 8000e46:	4907      	ldr	r1, [pc, #28]	@ (8000e64 <printb+0x6c>)
 8000e48:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <printb+0x68>)
 8000e4a:	2364      	movs	r3, #100	@ 0x64
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	f002 fd4b 	bl	80038e8 <HAL_UART_Transmit>
}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b009      	add	sp, #36	@ 0x24
 8000e58:	bd90      	pop	{r4, r7, pc}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	080064c8 	.word	0x080064c8
 8000e60:	20000140 	.word	0x20000140
 8000e64:	0800642c 	.word	0x0800642c

08000e68 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	4b42      	ldr	r3, [pc, #264]	@ (8000f7c <HAL_SPI_RxCpltCallback+0x114>)
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d000      	beq.n	8000e7a <HAL_SPI_RxCpltCallback+0x12>
 8000e78:	e07b      	b.n	8000f72 <HAL_SPI_RxCpltCallback+0x10a>
		int checksum = validate_crc16_modbus(spi_data, 8);
 8000e7a:	4b41      	ldr	r3, [pc, #260]	@ (8000f80 <HAL_SPI_RxCpltCallback+0x118>)
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f7ff ff5a 	bl	8000d38 <validate_crc16_modbus>
 8000e84:	0003      	movs	r3, r0
 8000e86:	60fb      	str	r3, [r7, #12]
		if (!checksum) {
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d105      	bne.n	8000e9a <HAL_SPI_RxCpltCallback+0x32>
			strncpy(debug_message, "SPI CRC Error", 100);
 8000e8e:	493d      	ldr	r1, [pc, #244]	@ (8000f84 <HAL_SPI_RxCpltCallback+0x11c>)
 8000e90:	4b3d      	ldr	r3, [pc, #244]	@ (8000f88 <HAL_SPI_RxCpltCallback+0x120>)
 8000e92:	2264      	movs	r2, #100	@ 0x64
 8000e94:	0018      	movs	r0, r3
 8000e96:	f004 fe2f 	bl	8005af8 <strncpy>
		}

		if (spi_data[0] == 1 &&
 8000e9a:	4b39      	ldr	r3, [pc, #228]	@ (8000f80 <HAL_SPI_RxCpltCallback+0x118>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d145      	bne.n	8000f2e <HAL_SPI_RxCpltCallback+0xc6>
			spi_data[1] == 1) {
 8000ea2:	4b37      	ldr	r3, [pc, #220]	@ (8000f80 <HAL_SPI_RxCpltCallback+0x118>)
 8000ea4:	785b      	ldrb	r3, [r3, #1]
		if (spi_data[0] == 1 &&
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d141      	bne.n	8000f2e <HAL_SPI_RxCpltCallback+0xc6>
			HAL_GPIO_WritePin(RELAY_5_GPIO_Port, RELAY_5_Pin, (spi_data[5] & (1<<4)) >> 4);
 8000eaa:	4b35      	ldr	r3, [pc, #212]	@ (8000f80 <HAL_SPI_RxCpltCallback+0x118>)
 8000eac:	795b      	ldrb	r3, [r3, #5]
 8000eae:	111b      	asrs	r3, r3, #4
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	2380      	movs	r3, #128	@ 0x80
 8000eba:	0059      	lsls	r1, r3, #1
 8000ebc:	23a0      	movs	r3, #160	@ 0xa0
 8000ebe:	05db      	lsls	r3, r3, #23
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f000 fd77 	bl	80019b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RELAY_4_GPIO_Port, RELAY_4_Pin, (spi_data[5] & (1<<3)) >> 3);
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f80 <HAL_SPI_RxCpltCallback+0x118>)
 8000ec8:	795b      	ldrb	r3, [r3, #5]
 8000eca:	10db      	asrs	r3, r3, #3
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	2380      	movs	r3, #128	@ 0x80
 8000ed6:	01db      	lsls	r3, r3, #7
 8000ed8:	482c      	ldr	r0, [pc, #176]	@ (8000f8c <HAL_SPI_RxCpltCallback+0x124>)
 8000eda:	0019      	movs	r1, r3
 8000edc:	f000 fd6a 	bl	80019b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RELAY_3_GPIO_Port, RELAY_3_Pin, (spi_data[5] & (1<<2)) >> 2);
 8000ee0:	4b27      	ldr	r3, [pc, #156]	@ (8000f80 <HAL_SPI_RxCpltCallback+0x118>)
 8000ee2:	795b      	ldrb	r3, [r3, #5]
 8000ee4:	109b      	asrs	r3, r3, #2
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2201      	movs	r2, #1
 8000eea:	4013      	ands	r3, r2
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	4827      	ldr	r0, [pc, #156]	@ (8000f8c <HAL_SPI_RxCpltCallback+0x124>)
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	f000 fd5e 	bl	80019b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, (spi_data[5] & (1<<1)) >> 1);
 8000ef8:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <HAL_SPI_RxCpltCallback+0x118>)
 8000efa:	795b      	ldrb	r3, [r3, #5]
 8000efc:	105b      	asrs	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2201      	movs	r2, #1
 8000f02:	4013      	ands	r3, r2
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	4821      	ldr	r0, [pc, #132]	@ (8000f8c <HAL_SPI_RxCpltCallback+0x124>)
 8000f08:	001a      	movs	r2, r3
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	f000 fd52 	bl	80019b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, (spi_data[5] & (1<<0)) >> 0);
 8000f10:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <HAL_SPI_RxCpltCallback+0x118>)
 8000f12:	795b      	ldrb	r3, [r3, #5]
 8000f14:	2201      	movs	r2, #1
 8000f16:	4013      	ands	r3, r2
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	481c      	ldr	r0, [pc, #112]	@ (8000f8c <HAL_SPI_RxCpltCallback+0x124>)
 8000f1c:	001a      	movs	r2, r3
 8000f1e:	2108      	movs	r1, #8
 8000f20:	f000 fd48 	bl	80019b4 <HAL_GPIO_WritePin>

			printb((int)spi_data[5]);
 8000f24:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <HAL_SPI_RxCpltCallback+0x118>)
 8000f26:	795b      	ldrb	r3, [r3, #5]
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff ff65 	bl	8000df8 <printb>
		}

		spi_response[0] = spi_data[0];
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <HAL_SPI_RxCpltCallback+0x118>)
 8000f30:	781a      	ldrb	r2, [r3, #0]
 8000f32:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <HAL_SPI_RxCpltCallback+0x128>)
 8000f34:	701a      	strb	r2, [r3, #0]
		spi_response[1] = spi_data[1];
 8000f36:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <HAL_SPI_RxCpltCallback+0x118>)
 8000f38:	785a      	ldrb	r2, [r3, #1]
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <HAL_SPI_RxCpltCallback+0x128>)
 8000f3c:	705a      	strb	r2, [r3, #1]
		spi_response[2] = spi_data[2];
 8000f3e:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <HAL_SPI_RxCpltCallback+0x118>)
 8000f40:	789a      	ldrb	r2, [r3, #2]
 8000f42:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <HAL_SPI_RxCpltCallback+0x128>)
 8000f44:	709a      	strb	r2, [r3, #2]
		spi_response[3] = spi_data[3];
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <HAL_SPI_RxCpltCallback+0x118>)
 8000f48:	78da      	ldrb	r2, [r3, #3]
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <HAL_SPI_RxCpltCallback+0x128>)
 8000f4c:	70da      	strb	r2, [r3, #3]
		spi_response[4] = spi_data[4];
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <HAL_SPI_RxCpltCallback+0x118>)
 8000f50:	791a      	ldrb	r2, [r3, #4]
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <HAL_SPI_RxCpltCallback+0x128>)
 8000f54:	711a      	strb	r2, [r3, #4]
		spi_response[5] = spi_data[5];
 8000f56:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <HAL_SPI_RxCpltCallback+0x118>)
 8000f58:	795a      	ldrb	r2, [r3, #5]
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f90 <HAL_SPI_RxCpltCallback+0x128>)
 8000f5c:	715a      	strb	r2, [r3, #5]
		spi_transmit(&hspi1);
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <HAL_SPI_RxCpltCallback+0x114>)
 8000f60:	0018      	movs	r0, r3
 8000f62:	f7ff ff23 	bl	8000dac <spi_transmit>

		HAL_SPI_Receive_IT(&hspi1, spi_data, 8);
 8000f66:	4906      	ldr	r1, [pc, #24]	@ (8000f80 <HAL_SPI_RxCpltCallback+0x118>)
 8000f68:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <HAL_SPI_RxCpltCallback+0x114>)
 8000f6a:	2208      	movs	r2, #8
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f001 fe1f 	bl	8002bb0 <HAL_SPI_Receive_IT>
	}
}
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b004      	add	sp, #16
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	200000dc 	.word	0x200000dc
 8000f80:	200002a8 	.word	0x200002a8
 8000f84:	080064cc 	.word	0x080064cc
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	50000400 	.word	0x50000400
 8000f90:	200002b0 	.word	0x200002b0

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	46c0      	nop			@ (mov r8, r8)
 8000f9e:	e7fd      	b.n	8000f9c <Error_Handler+0x8>

08000fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <HAL_MspInit+0x44>)
 8000fa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000faa:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <HAL_MspInit+0x44>)
 8000fac:	2101      	movs	r1, #1
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <HAL_MspInit+0x44>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4013      	ands	r3, r2
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <HAL_MspInit+0x44>)
 8000fc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fc2:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <HAL_MspInit+0x44>)
 8000fc4:	2180      	movs	r1, #128	@ 0x80
 8000fc6:	0549      	lsls	r1, r1, #21
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <HAL_MspInit+0x44>)
 8000fce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fd0:	2380      	movs	r3, #128	@ 0x80
 8000fd2:	055b      	lsls	r3, r3, #21
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b002      	add	sp, #8
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b08b      	sub	sp, #44	@ 0x2c
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	2414      	movs	r4, #20
 8000ff2:	193b      	adds	r3, r7, r4
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	2314      	movs	r3, #20
 8000ff8:	001a      	movs	r2, r3
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	f004 fd74 	bl	8005ae8 <memset>
  if(hspi->Instance==SPI1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a1f      	ldr	r2, [pc, #124]	@ (8001084 <HAL_SPI_MspInit+0x9c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d138      	bne.n	800107c <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800100a:	4b1f      	ldr	r3, [pc, #124]	@ (8001088 <HAL_SPI_MspInit+0xa0>)
 800100c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800100e:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <HAL_SPI_MspInit+0xa0>)
 8001010:	2180      	movs	r1, #128	@ 0x80
 8001012:	0149      	lsls	r1, r1, #5
 8001014:	430a      	orrs	r2, r1
 8001016:	641a      	str	r2, [r3, #64]	@ 0x40
 8001018:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <HAL_SPI_MspInit+0xa0>)
 800101a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800101c:	2380      	movs	r3, #128	@ 0x80
 800101e:	015b      	lsls	r3, r3, #5
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <HAL_SPI_MspInit+0xa0>)
 8001028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800102a:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_SPI_MspInit+0xa0>)
 800102c:	2101      	movs	r1, #1
 800102e:	430a      	orrs	r2, r1
 8001030:	635a      	str	r2, [r3, #52]	@ 0x34
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <HAL_SPI_MspInit+0xa0>)
 8001034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001036:	2201      	movs	r2, #1
 8001038:	4013      	ands	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800103e:	0021      	movs	r1, r4
 8001040:	187b      	adds	r3, r7, r1
 8001042:	22c2      	movs	r2, #194	@ 0xc2
 8001044:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	187b      	adds	r3, r7, r1
 8001048:	2202      	movs	r2, #2
 800104a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	187b      	adds	r3, r7, r1
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	187b      	adds	r3, r7, r1
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001058:	187b      	adds	r3, r7, r1
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	187a      	adds	r2, r7, r1
 8001060:	23a0      	movs	r3, #160	@ 0xa0
 8001062:	05db      	lsls	r3, r3, #23
 8001064:	0011      	movs	r1, r2
 8001066:	0018      	movs	r0, r3
 8001068:	f000 fb40 	bl	80016ec <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	2019      	movs	r0, #25
 8001072:	f000 fa3d 	bl	80014f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001076:	2019      	movs	r0, #25
 8001078:	f000 fa4f 	bl	800151a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800107c:	46c0      	nop			@ (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	b00b      	add	sp, #44	@ 0x2c
 8001082:	bd90      	pop	{r4, r7, pc}
 8001084:	40013000 	.word	0x40013000
 8001088:	40021000 	.word	0x40021000

0800108c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b097      	sub	sp, #92	@ 0x5c
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	2344      	movs	r3, #68	@ 0x44
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	0018      	movs	r0, r3
 800109a:	2314      	movs	r3, #20
 800109c:	001a      	movs	r2, r3
 800109e:	2100      	movs	r1, #0
 80010a0:	f004 fd22 	bl	8005ae8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a4:	2410      	movs	r4, #16
 80010a6:	193b      	adds	r3, r7, r4
 80010a8:	0018      	movs	r0, r3
 80010aa:	2334      	movs	r3, #52	@ 0x34
 80010ac:	001a      	movs	r2, r3
 80010ae:	2100      	movs	r1, #0
 80010b0:	f004 fd1a 	bl	8005ae8 <memset>
  if(huart->Instance==USART2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a26      	ldr	r2, [pc, #152]	@ (8001154 <HAL_UART_MspInit+0xc8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d146      	bne.n	800114c <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010be:	193b      	adds	r3, r7, r4
 80010c0:	2202      	movs	r2, #2
 80010c2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010c4:	193b      	adds	r3, r7, r4
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ca:	193b      	adds	r3, r7, r4
 80010cc:	0018      	movs	r0, r3
 80010ce:	f001 f99f 	bl	8002410 <HAL_RCCEx_PeriphCLKConfig>
 80010d2:	1e03      	subs	r3, r0, #0
 80010d4:	d001      	beq.n	80010da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010d6:	f7ff ff5d 	bl	8000f94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010da:	4b1f      	ldr	r3, [pc, #124]	@ (8001158 <HAL_UART_MspInit+0xcc>)
 80010dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010de:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <HAL_UART_MspInit+0xcc>)
 80010e0:	2180      	movs	r1, #128	@ 0x80
 80010e2:	0289      	lsls	r1, r1, #10
 80010e4:	430a      	orrs	r2, r1
 80010e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <HAL_UART_MspInit+0xcc>)
 80010ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010ec:	2380      	movs	r3, #128	@ 0x80
 80010ee:	029b      	lsls	r3, r3, #10
 80010f0:	4013      	ands	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b18      	ldr	r3, [pc, #96]	@ (8001158 <HAL_UART_MspInit+0xcc>)
 80010f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010fa:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <HAL_UART_MspInit+0xcc>)
 80010fc:	2101      	movs	r1, #1
 80010fe:	430a      	orrs	r2, r1
 8001100:	635a      	str	r2, [r3, #52]	@ 0x34
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <HAL_UART_MspInit+0xcc>)
 8001104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001106:	2201      	movs	r2, #1
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800110e:	2144      	movs	r1, #68	@ 0x44
 8001110:	187b      	adds	r3, r7, r1
 8001112:	220c      	movs	r2, #12
 8001114:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	187b      	adds	r3, r7, r1
 8001118:	2202      	movs	r2, #2
 800111a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800111c:	187b      	adds	r3, r7, r1
 800111e:	2201      	movs	r2, #1
 8001120:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001128:	187b      	adds	r3, r7, r1
 800112a:	2201      	movs	r2, #1
 800112c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	187a      	adds	r2, r7, r1
 8001130:	23a0      	movs	r3, #160	@ 0xa0
 8001132:	05db      	lsls	r3, r3, #23
 8001134:	0011      	movs	r1, r2
 8001136:	0018      	movs	r0, r3
 8001138:	f000 fad8 	bl	80016ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	201c      	movs	r0, #28
 8001142:	f000 f9d5 	bl	80014f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001146:	201c      	movs	r0, #28
 8001148:	f000 f9e7 	bl	800151a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800114c:	46c0      	nop			@ (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b017      	add	sp, #92	@ 0x5c
 8001152:	bd90      	pop	{r4, r7, pc}
 8001154:	40004400 	.word	0x40004400
 8001158:	40021000 	.word	0x40021000

0800115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001160:	46c0      	nop			@ (mov r8, r8)
 8001162:	e7fd      	b.n	8001160 <NMI_Handler+0x4>

08001164 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001168:	46c0      	nop			@ (mov r8, r8)
 800116a:	e7fd      	b.n	8001168 <HardFault_Handler+0x4>

0800116c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001170:	46c0      	nop			@ (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001184:	f000 f8ec 	bl	8001360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001188:	46c0      	nop			@ (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001194:	4b03      	ldr	r3, [pc, #12]	@ (80011a4 <SPI1_IRQHandler+0x14>)
 8001196:	0018      	movs	r0, r3
 8001198:	f001 fe94 	bl	8002ec4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800119c:	46c0      	nop			@ (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			@ (mov r8, r8)
 80011a4:	200000dc 	.word	0x200000dc

080011a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011ac:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <USART2_IRQHandler+0x14>)
 80011ae:	0018      	movs	r0, r3
 80011b0:	f002 fc9c 	bl	8003aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011b4:	46c0      	nop			@ (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	20000140 	.word	0x20000140

080011c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c8:	4a14      	ldr	r2, [pc, #80]	@ (800121c <_sbrk+0x5c>)
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <_sbrk+0x60>)
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d4:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <_sbrk+0x64>)
 80011de:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <_sbrk+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	18d3      	adds	r3, r2, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d207      	bcs.n	8001200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f0:	f004 fc96 	bl	8005b20 <__errno>
 80011f4:	0003      	movs	r3, r0
 80011f6:	220c      	movs	r2, #12
 80011f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fa:	2301      	movs	r3, #1
 80011fc:	425b      	negs	r3, r3
 80011fe:	e009      	b.n	8001214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001200:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	18d2      	adds	r2, r2, r3
 800120e:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <_sbrk+0x64>)
 8001210:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	0018      	movs	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	b006      	add	sp, #24
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20009000 	.word	0x20009000
 8001220:	00000400 	.word	0x00000400
 8001224:	200002b8 	.word	0x200002b8
 8001228:	20000408 	.word	0x20000408

0800122c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001230:	46c0      	nop			@ (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001238:	480d      	ldr	r0, [pc, #52]	@ (8001270 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800123a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800123c:	f7ff fff6 	bl	800122c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001240:	480c      	ldr	r0, [pc, #48]	@ (8001274 <LoopForever+0x6>)
  ldr r1, =_edata
 8001242:	490d      	ldr	r1, [pc, #52]	@ (8001278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001244:	4a0d      	ldr	r2, [pc, #52]	@ (800127c <LoopForever+0xe>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001258:	4c0a      	ldr	r4, [pc, #40]	@ (8001284 <LoopForever+0x16>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001266:	f004 fc61 	bl	8005b2c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800126a:	f7ff f9f3 	bl	8000654 <main>

0800126e <LoopForever>:

LoopForever:
  b LoopForever
 800126e:	e7fe      	b.n	800126e <LoopForever>
  ldr   r0, =_estack
 8001270:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001278:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 800127c:	080065a8 	.word	0x080065a8
  ldr r2, =_sbss
 8001280:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001284:	20000408 	.word	0x20000408

08001288 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <ADC1_COMP_IRQHandler>
	...

0800128c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001298:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <HAL_Init+0x3c>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <HAL_Init+0x3c>)
 800129e:	2180      	movs	r1, #128	@ 0x80
 80012a0:	0049      	lsls	r1, r1, #1
 80012a2:	430a      	orrs	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 f810 	bl	80012cc <HAL_InitTick>
 80012ac:	1e03      	subs	r3, r0, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80012b0:	1dfb      	adds	r3, r7, #7
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	e001      	b.n	80012bc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80012b8:	f7ff fe72 	bl	8000fa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012bc:	1dfb      	adds	r3, r7, #7
 80012be:	781b      	ldrb	r3, [r3, #0]
}
 80012c0:	0018      	movs	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b002      	add	sp, #8
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40022000 	.word	0x40022000

080012cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012d4:	230f      	movs	r3, #15
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80012dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001354 <HAL_InitTick+0x88>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d02b      	beq.n	800133c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80012e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001358 <HAL_InitTick+0x8c>)
 80012e6:	681c      	ldr	r4, [r3, #0]
 80012e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <HAL_InitTick+0x88>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	0019      	movs	r1, r3
 80012ee:	23fa      	movs	r3, #250	@ 0xfa
 80012f0:	0098      	lsls	r0, r3, #2
 80012f2:	f7fe ff23 	bl	800013c <__udivsi3>
 80012f6:	0003      	movs	r3, r0
 80012f8:	0019      	movs	r1, r3
 80012fa:	0020      	movs	r0, r4
 80012fc:	f7fe ff1e 	bl	800013c <__udivsi3>
 8001300:	0003      	movs	r3, r0
 8001302:	0018      	movs	r0, r3
 8001304:	f000 f919 	bl	800153a <HAL_SYSTICK_Config>
 8001308:	1e03      	subs	r3, r0, #0
 800130a:	d112      	bne.n	8001332 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b03      	cmp	r3, #3
 8001310:	d80a      	bhi.n	8001328 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	2301      	movs	r3, #1
 8001316:	425b      	negs	r3, r3
 8001318:	2200      	movs	r2, #0
 800131a:	0018      	movs	r0, r3
 800131c:	f000 f8e8 	bl	80014f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001320:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <HAL_InitTick+0x90>)
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	e00d      	b.n	8001344 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001328:	230f      	movs	r3, #15
 800132a:	18fb      	adds	r3, r7, r3
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
 8001330:	e008      	b.n	8001344 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001332:	230f      	movs	r3, #15
 8001334:	18fb      	adds	r3, r7, r3
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	e003      	b.n	8001344 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800133c:	230f      	movs	r3, #15
 800133e:	18fb      	adds	r3, r7, r3
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001344:	230f      	movs	r3, #15
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	781b      	ldrb	r3, [r3, #0]
}
 800134a:	0018      	movs	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	b005      	add	sp, #20
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	2000006c 	.word	0x2000006c
 8001358:	20000064 	.word	0x20000064
 800135c:	20000068 	.word	0x20000068

08001360 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001364:	4b05      	ldr	r3, [pc, #20]	@ (800137c <HAL_IncTick+0x1c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	001a      	movs	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <HAL_IncTick+0x20>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	18d2      	adds	r2, r2, r3
 8001370:	4b03      	ldr	r3, [pc, #12]	@ (8001380 <HAL_IncTick+0x20>)
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	46c0      	nop			@ (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	46c0      	nop			@ (mov r8, r8)
 800137c:	2000006c 	.word	0x2000006c
 8001380:	200002bc 	.word	0x200002bc

08001384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b02      	ldr	r3, [pc, #8]	@ (8001394 <HAL_GetTick+0x10>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	200002bc 	.word	0x200002bc

08001398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	0002      	movs	r2, r0
 80013a0:	1dfb      	adds	r3, r7, #7
 80013a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	1dfb      	adds	r3, r7, #7
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80013aa:	d809      	bhi.n	80013c0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	001a      	movs	r2, r3
 80013b2:	231f      	movs	r3, #31
 80013b4:	401a      	ands	r2, r3
 80013b6:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <__NVIC_EnableIRQ+0x30>)
 80013b8:	2101      	movs	r1, #1
 80013ba:	4091      	lsls	r1, r2
 80013bc:	000a      	movs	r2, r1
 80013be:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80013c0:	46c0      	nop			@ (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b002      	add	sp, #8
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	0002      	movs	r2, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b7f      	cmp	r3, #127	@ 0x7f
 80013e0:	d828      	bhi.n	8001434 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e2:	4a2f      	ldr	r2, [pc, #188]	@ (80014a0 <__NVIC_SetPriority+0xd4>)
 80013e4:	1dfb      	adds	r3, r7, #7
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	33c0      	adds	r3, #192	@ 0xc0
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	589b      	ldr	r3, [r3, r2]
 80013f2:	1dfa      	adds	r2, r7, #7
 80013f4:	7812      	ldrb	r2, [r2, #0]
 80013f6:	0011      	movs	r1, r2
 80013f8:	2203      	movs	r2, #3
 80013fa:	400a      	ands	r2, r1
 80013fc:	00d2      	lsls	r2, r2, #3
 80013fe:	21ff      	movs	r1, #255	@ 0xff
 8001400:	4091      	lsls	r1, r2
 8001402:	000a      	movs	r2, r1
 8001404:	43d2      	mvns	r2, r2
 8001406:	401a      	ands	r2, r3
 8001408:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	019b      	lsls	r3, r3, #6
 800140e:	22ff      	movs	r2, #255	@ 0xff
 8001410:	401a      	ands	r2, r3
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	0018      	movs	r0, r3
 8001418:	2303      	movs	r3, #3
 800141a:	4003      	ands	r3, r0
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001420:	481f      	ldr	r0, [pc, #124]	@ (80014a0 <__NVIC_SetPriority+0xd4>)
 8001422:	1dfb      	adds	r3, r7, #7
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b25b      	sxtb	r3, r3
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	430a      	orrs	r2, r1
 800142c:	33c0      	adds	r3, #192	@ 0xc0
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001432:	e031      	b.n	8001498 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001434:	4a1b      	ldr	r2, [pc, #108]	@ (80014a4 <__NVIC_SetPriority+0xd8>)
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	0019      	movs	r1, r3
 800143c:	230f      	movs	r3, #15
 800143e:	400b      	ands	r3, r1
 8001440:	3b08      	subs	r3, #8
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3306      	adds	r3, #6
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	18d3      	adds	r3, r2, r3
 800144a:	3304      	adds	r3, #4
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	1dfa      	adds	r2, r7, #7
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	0011      	movs	r1, r2
 8001454:	2203      	movs	r2, #3
 8001456:	400a      	ands	r2, r1
 8001458:	00d2      	lsls	r2, r2, #3
 800145a:	21ff      	movs	r1, #255	@ 0xff
 800145c:	4091      	lsls	r1, r2
 800145e:	000a      	movs	r2, r1
 8001460:	43d2      	mvns	r2, r2
 8001462:	401a      	ands	r2, r3
 8001464:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	019b      	lsls	r3, r3, #6
 800146a:	22ff      	movs	r2, #255	@ 0xff
 800146c:	401a      	ands	r2, r3
 800146e:	1dfb      	adds	r3, r7, #7
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	0018      	movs	r0, r3
 8001474:	2303      	movs	r3, #3
 8001476:	4003      	ands	r3, r0
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800147c:	4809      	ldr	r0, [pc, #36]	@ (80014a4 <__NVIC_SetPriority+0xd8>)
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	001c      	movs	r4, r3
 8001484:	230f      	movs	r3, #15
 8001486:	4023      	ands	r3, r4
 8001488:	3b08      	subs	r3, #8
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	430a      	orrs	r2, r1
 800148e:	3306      	adds	r3, #6
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	18c3      	adds	r3, r0, r3
 8001494:	3304      	adds	r3, #4
 8001496:	601a      	str	r2, [r3, #0]
}
 8001498:	46c0      	nop			@ (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	b003      	add	sp, #12
 800149e:	bd90      	pop	{r4, r7, pc}
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	1e5a      	subs	r2, r3, #1
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	045b      	lsls	r3, r3, #17
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d301      	bcc.n	80014c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014bc:	2301      	movs	r3, #1
 80014be:	e010      	b.n	80014e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c0:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <SysTick_Config+0x44>)
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	3a01      	subs	r2, #1
 80014c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c8:	2301      	movs	r3, #1
 80014ca:	425b      	negs	r3, r3
 80014cc:	2103      	movs	r1, #3
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7ff ff7c 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <SysTick_Config+0x44>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <SysTick_Config+0x44>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	0018      	movs	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b002      	add	sp, #8
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	210f      	movs	r1, #15
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	1c02      	adds	r2, r0, #0
 8001500:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	187b      	adds	r3, r7, r1
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b25b      	sxtb	r3, r3
 800150a:	0011      	movs	r1, r2
 800150c:	0018      	movs	r0, r3
 800150e:	f7ff ff5d 	bl	80013cc <__NVIC_SetPriority>
}
 8001512:	46c0      	nop			@ (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	b004      	add	sp, #16
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	0002      	movs	r2, r0
 8001522:	1dfb      	adds	r3, r7, #7
 8001524:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b25b      	sxtb	r3, r3
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff ff33 	bl	8001398 <__NVIC_EnableIRQ>
}
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b002      	add	sp, #8
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	0018      	movs	r0, r3
 8001546:	f7ff ffaf 	bl	80014a8 <SysTick_Config>
 800154a:	0003      	movs	r3, r0
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	b002      	add	sp, #8
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e050      	b.n	8001608 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2225      	movs	r2, #37	@ 0x25
 800156a:	5c9b      	ldrb	r3, [r3, r2]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d008      	beq.n	8001584 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2204      	movs	r2, #4
 8001576:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2224      	movs	r2, #36	@ 0x24
 800157c:	2100      	movs	r1, #0
 800157e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e041      	b.n	8001608 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	210e      	movs	r1, #14
 8001590:	438a      	bics	r2, r1
 8001592:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	491c      	ldr	r1, [pc, #112]	@ (8001610 <HAL_DMA_Abort+0xbc>)
 80015a0:	400a      	ands	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2101      	movs	r1, #1
 80015b0:	438a      	bics	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80015b4:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <HAL_DMA_Abort+0xc0>)
 80015b6:	6859      	ldr	r1, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015bc:	221c      	movs	r2, #28
 80015be:	4013      	ands	r3, r2
 80015c0:	2201      	movs	r2, #1
 80015c2:	409a      	lsls	r2, r3
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <HAL_DMA_Abort+0xc0>)
 80015c6:	430a      	orrs	r2, r1
 80015c8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80015d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00c      	beq.n	80015f6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015e6:	490a      	ldr	r1, [pc, #40]	@ (8001610 <HAL_DMA_Abort+0xbc>)
 80015e8:	400a      	ands	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80015f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2225      	movs	r2, #37	@ 0x25
 80015fa:	2101      	movs	r1, #1
 80015fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2224      	movs	r2, #36	@ 0x24
 8001602:	2100      	movs	r1, #0
 8001604:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	b002      	add	sp, #8
 800160e:	bd80      	pop	{r7, pc}
 8001610:	fffffeff 	.word	0xfffffeff
 8001614:	40020000 	.word	0x40020000

08001618 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001620:	210f      	movs	r1, #15
 8001622:	187b      	adds	r3, r7, r1
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2225      	movs	r2, #37	@ 0x25
 800162c:	5c9b      	ldrb	r3, [r3, r2]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d006      	beq.n	8001642 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2204      	movs	r2, #4
 8001638:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800163a:	187b      	adds	r3, r7, r1
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
 8001640:	e049      	b.n	80016d6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	210e      	movs	r1, #14
 800164e:	438a      	bics	r2, r1
 8001650:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2101      	movs	r1, #1
 800165e:	438a      	bics	r2, r1
 8001660:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166c:	491d      	ldr	r1, [pc, #116]	@ (80016e4 <HAL_DMA_Abort_IT+0xcc>)
 800166e:	400a      	ands	r2, r1
 8001670:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001672:	4b1d      	ldr	r3, [pc, #116]	@ (80016e8 <HAL_DMA_Abort_IT+0xd0>)
 8001674:	6859      	ldr	r1, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	221c      	movs	r2, #28
 800167c:	4013      	ands	r3, r2
 800167e:	2201      	movs	r2, #1
 8001680:	409a      	lsls	r2, r3
 8001682:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <HAL_DMA_Abort_IT+0xd0>)
 8001684:	430a      	orrs	r2, r1
 8001686:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001690:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00c      	beq.n	80016b4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016a4:	490f      	ldr	r1, [pc, #60]	@ (80016e4 <HAL_DMA_Abort_IT+0xcc>)
 80016a6:	400a      	ands	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80016b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2225      	movs	r2, #37	@ 0x25
 80016b8:	2101      	movs	r1, #1
 80016ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2224      	movs	r2, #36	@ 0x24
 80016c0:	2100      	movs	r1, #0
 80016c2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d004      	beq.n	80016d6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	0010      	movs	r0, r2
 80016d4:	4798      	blx	r3
    }
  }
  return status;
 80016d6:	230f      	movs	r3, #15
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	781b      	ldrb	r3, [r3, #0]
}
 80016dc:	0018      	movs	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	b004      	add	sp, #16
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	fffffeff 	.word	0xfffffeff
 80016e8:	40020000 	.word	0x40020000

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fa:	e147      	b.n	800198c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2101      	movs	r1, #1
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4091      	lsls	r1, r2
 8001706:	000a      	movs	r2, r1
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d100      	bne.n	8001714 <HAL_GPIO_Init+0x28>
 8001712:	e138      	b.n	8001986 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2203      	movs	r2, #3
 800171a:	4013      	ands	r3, r2
 800171c:	2b01      	cmp	r3, #1
 800171e:	d005      	beq.n	800172c <HAL_GPIO_Init+0x40>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2203      	movs	r2, #3
 8001726:	4013      	ands	r3, r2
 8001728:	2b02      	cmp	r3, #2
 800172a:	d130      	bne.n	800178e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	409a      	lsls	r2, r3
 800173a:	0013      	movs	r3, r2
 800173c:	43da      	mvns	r2, r3
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	409a      	lsls	r2, r3
 800174e:	0013      	movs	r3, r2
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001762:	2201      	movs	r2, #1
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	409a      	lsls	r2, r3
 8001768:	0013      	movs	r3, r2
 800176a:	43da      	mvns	r2, r3
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	2201      	movs	r2, #1
 800177a:	401a      	ands	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	409a      	lsls	r2, r3
 8001780:	0013      	movs	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2203      	movs	r2, #3
 8001794:	4013      	ands	r3, r2
 8001796:	2b03      	cmp	r3, #3
 8001798:	d017      	beq.n	80017ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	2203      	movs	r2, #3
 80017a6:	409a      	lsls	r2, r3
 80017a8:	0013      	movs	r3, r2
 80017aa:	43da      	mvns	r2, r3
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2203      	movs	r2, #3
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d123      	bne.n	800181e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	08da      	lsrs	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3208      	adds	r2, #8
 80017de:	0092      	lsls	r2, r2, #2
 80017e0:	58d3      	ldr	r3, [r2, r3]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2207      	movs	r2, #7
 80017e8:	4013      	ands	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	220f      	movs	r2, #15
 80017ee:	409a      	lsls	r2, r3
 80017f0:	0013      	movs	r3, r2
 80017f2:	43da      	mvns	r2, r3
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	691a      	ldr	r2, [r3, #16]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2107      	movs	r1, #7
 8001802:	400b      	ands	r3, r1
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	409a      	lsls	r2, r3
 8001808:	0013      	movs	r3, r2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	08da      	lsrs	r2, r3, #3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3208      	adds	r2, #8
 8001818:	0092      	lsls	r2, r2, #2
 800181a:	6939      	ldr	r1, [r7, #16]
 800181c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	2203      	movs	r2, #3
 800182a:	409a      	lsls	r2, r3
 800182c:	0013      	movs	r3, r2
 800182e:	43da      	mvns	r2, r3
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2203      	movs	r2, #3
 800183c:	401a      	ands	r2, r3
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	409a      	lsls	r2, r3
 8001844:	0013      	movs	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	23c0      	movs	r3, #192	@ 0xc0
 8001858:	029b      	lsls	r3, r3, #10
 800185a:	4013      	ands	r3, r2
 800185c:	d100      	bne.n	8001860 <HAL_GPIO_Init+0x174>
 800185e:	e092      	b.n	8001986 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001860:	4a50      	ldr	r2, [pc, #320]	@ (80019a4 <HAL_GPIO_Init+0x2b8>)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3318      	adds	r3, #24
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	589b      	ldr	r3, [r3, r2]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2203      	movs	r2, #3
 8001872:	4013      	ands	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	220f      	movs	r2, #15
 8001878:	409a      	lsls	r2, r3
 800187a:	0013      	movs	r3, r2
 800187c:	43da      	mvns	r2, r3
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	23a0      	movs	r3, #160	@ 0xa0
 8001888:	05db      	lsls	r3, r3, #23
 800188a:	429a      	cmp	r2, r3
 800188c:	d013      	beq.n	80018b6 <HAL_GPIO_Init+0x1ca>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a45      	ldr	r2, [pc, #276]	@ (80019a8 <HAL_GPIO_Init+0x2bc>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d00d      	beq.n	80018b2 <HAL_GPIO_Init+0x1c6>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a44      	ldr	r2, [pc, #272]	@ (80019ac <HAL_GPIO_Init+0x2c0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d007      	beq.n	80018ae <HAL_GPIO_Init+0x1c2>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a43      	ldr	r2, [pc, #268]	@ (80019b0 <HAL_GPIO_Init+0x2c4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d101      	bne.n	80018aa <HAL_GPIO_Init+0x1be>
 80018a6:	2303      	movs	r3, #3
 80018a8:	e006      	b.n	80018b8 <HAL_GPIO_Init+0x1cc>
 80018aa:	2305      	movs	r3, #5
 80018ac:	e004      	b.n	80018b8 <HAL_GPIO_Init+0x1cc>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e002      	b.n	80018b8 <HAL_GPIO_Init+0x1cc>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_GPIO_Init+0x1cc>
 80018b6:	2300      	movs	r3, #0
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	2103      	movs	r1, #3
 80018bc:	400a      	ands	r2, r1
 80018be:	00d2      	lsls	r2, r2, #3
 80018c0:	4093      	lsls	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80018c8:	4936      	ldr	r1, [pc, #216]	@ (80019a4 <HAL_GPIO_Init+0x2b8>)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3318      	adds	r3, #24
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018d6:	4b33      	ldr	r3, [pc, #204]	@ (80019a4 <HAL_GPIO_Init+0x2b8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43da      	mvns	r2, r3
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	2380      	movs	r3, #128	@ 0x80
 80018ec:	035b      	lsls	r3, r3, #13
 80018ee:	4013      	ands	r3, r2
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018fa:	4b2a      	ldr	r3, [pc, #168]	@ (80019a4 <HAL_GPIO_Init+0x2b8>)
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001900:	4b28      	ldr	r3, [pc, #160]	@ (80019a4 <HAL_GPIO_Init+0x2b8>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	43da      	mvns	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	2380      	movs	r3, #128	@ 0x80
 8001916:	039b      	lsls	r3, r3, #14
 8001918:	4013      	ands	r3, r2
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001924:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <HAL_GPIO_Init+0x2b8>)
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800192a:	4a1e      	ldr	r2, [pc, #120]	@ (80019a4 <HAL_GPIO_Init+0x2b8>)
 800192c:	2384      	movs	r3, #132	@ 0x84
 800192e:	58d3      	ldr	r3, [r2, r3]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	43da      	mvns	r2, r3
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	2380      	movs	r3, #128	@ 0x80
 8001942:	029b      	lsls	r3, r3, #10
 8001944:	4013      	ands	r3, r2
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001950:	4914      	ldr	r1, [pc, #80]	@ (80019a4 <HAL_GPIO_Init+0x2b8>)
 8001952:	2284      	movs	r2, #132	@ 0x84
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001958:	4a12      	ldr	r2, [pc, #72]	@ (80019a4 <HAL_GPIO_Init+0x2b8>)
 800195a:	2380      	movs	r3, #128	@ 0x80
 800195c:	58d3      	ldr	r3, [r2, r3]
 800195e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43da      	mvns	r2, r3
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	2380      	movs	r3, #128	@ 0x80
 8001970:	025b      	lsls	r3, r3, #9
 8001972:	4013      	ands	r3, r2
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800197e:	4909      	ldr	r1, [pc, #36]	@ (80019a4 <HAL_GPIO_Init+0x2b8>)
 8001980:	2280      	movs	r2, #128	@ 0x80
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	40da      	lsrs	r2, r3
 8001994:	1e13      	subs	r3, r2, #0
 8001996:	d000      	beq.n	800199a <HAL_GPIO_Init+0x2ae>
 8001998:	e6b0      	b.n	80016fc <HAL_GPIO_Init+0x10>
  }
}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	46c0      	nop			@ (mov r8, r8)
 800199e:	46bd      	mov	sp, r7
 80019a0:	b006      	add	sp, #24
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021800 	.word	0x40021800
 80019a8:	50000400 	.word	0x50000400
 80019ac:	50000800 	.word	0x50000800
 80019b0:	50000c00 	.word	0x50000c00

080019b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	0008      	movs	r0, r1
 80019be:	0011      	movs	r1, r2
 80019c0:	1cbb      	adds	r3, r7, #2
 80019c2:	1c02      	adds	r2, r0, #0
 80019c4:	801a      	strh	r2, [r3, #0]
 80019c6:	1c7b      	adds	r3, r7, #1
 80019c8:	1c0a      	adds	r2, r1, #0
 80019ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019cc:	1c7b      	adds	r3, r7, #1
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d004      	beq.n	80019de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019d4:	1cbb      	adds	r3, r7, #2
 80019d6:	881a      	ldrh	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019dc:	e003      	b.n	80019e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019de:	1cbb      	adds	r3, r7, #2
 80019e0:	881a      	ldrh	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019e6:	46c0      	nop			@ (mov r8, r8)
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b002      	add	sp, #8
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a19      	ldr	r2, [pc, #100]	@ (8001a64 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	0019      	movs	r1, r3
 8001a02:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	2380      	movs	r3, #128	@ 0x80
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d11f      	bne.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001a14:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	0013      	movs	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	189b      	adds	r3, r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4912      	ldr	r1, [pc, #72]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001a22:	0018      	movs	r0, r3
 8001a24:	f7fe fb8a 	bl	800013c <__udivsi3>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a2e:	e008      	b.n	8001a42 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	e001      	b.n	8001a42 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e009      	b.n	8001a56 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a42:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a44:	695a      	ldr	r2, [r3, #20]
 8001a46:	2380      	movs	r3, #128	@ 0x80
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	2380      	movs	r3, #128	@ 0x80
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d0ed      	beq.n	8001a30 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	0018      	movs	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b004      	add	sp, #16
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	40007000 	.word	0x40007000
 8001a64:	fffff9ff 	.word	0xfffff9ff
 8001a68:	20000064 	.word	0x20000064
 8001a6c:	000f4240 	.word	0x000f4240

08001a70 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001a74:	4b03      	ldr	r3, [pc, #12]	@ (8001a84 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	23e0      	movs	r3, #224	@ 0xe0
 8001a7a:	01db      	lsls	r3, r3, #7
 8001a7c:	4013      	ands	r3, r2
}
 8001a7e:	0018      	movs	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000

08001a88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e2fe      	b.n	8002098 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d100      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x1e>
 8001aa4:	e07c      	b.n	8001ba0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aa6:	4bc3      	ldr	r3, [pc, #780]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2238      	movs	r2, #56	@ 0x38
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab0:	4bc0      	ldr	r3, [pc, #768]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	2b10      	cmp	r3, #16
 8001abe:	d102      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x3e>
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d002      	beq.n	8001acc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d10b      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001acc:	4bb9      	ldr	r3, [pc, #740]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	029b      	lsls	r3, r3, #10
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d062      	beq.n	8001b9e <HAL_RCC_OscConfig+0x116>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d15e      	bne.n	8001b9e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e2d9      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	025b      	lsls	r3, r3, #9
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_OscConfig+0x78>
 8001af0:	4bb0      	ldr	r3, [pc, #704]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4baf      	ldr	r3, [pc, #700]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001af6:	2180      	movs	r1, #128	@ 0x80
 8001af8:	0249      	lsls	r1, r1, #9
 8001afa:	430a      	orrs	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	e020      	b.n	8001b42 <HAL_RCC_OscConfig+0xba>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	23a0      	movs	r3, #160	@ 0xa0
 8001b06:	02db      	lsls	r3, r3, #11
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d10e      	bne.n	8001b2a <HAL_RCC_OscConfig+0xa2>
 8001b0c:	4ba9      	ldr	r3, [pc, #676]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4ba8      	ldr	r3, [pc, #672]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001b12:	2180      	movs	r1, #128	@ 0x80
 8001b14:	02c9      	lsls	r1, r1, #11
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	4ba6      	ldr	r3, [pc, #664]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4ba5      	ldr	r3, [pc, #660]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001b20:	2180      	movs	r1, #128	@ 0x80
 8001b22:	0249      	lsls	r1, r1, #9
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e00b      	b.n	8001b42 <HAL_RCC_OscConfig+0xba>
 8001b2a:	4ba2      	ldr	r3, [pc, #648]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4ba1      	ldr	r3, [pc, #644]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001b30:	49a1      	ldr	r1, [pc, #644]	@ (8001db8 <HAL_RCC_OscConfig+0x330>)
 8001b32:	400a      	ands	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	4b9f      	ldr	r3, [pc, #636]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b9e      	ldr	r3, [pc, #632]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001b3c:	499f      	ldr	r1, [pc, #636]	@ (8001dbc <HAL_RCC_OscConfig+0x334>)
 8001b3e:	400a      	ands	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d014      	beq.n	8001b74 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fc1b 	bl	8001384 <HAL_GetTick>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff fc16 	bl	8001384 <HAL_GetTick>
 8001b58:	0002      	movs	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	@ 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e298      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b66:	4b93      	ldr	r3, [pc, #588]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	2380      	movs	r3, #128	@ 0x80
 8001b6c:	029b      	lsls	r3, r3, #10
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0xcc>
 8001b72:	e015      	b.n	8001ba0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff fc06 	bl	8001384 <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7e:	f7ff fc01 	bl	8001384 <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b64      	cmp	r3, #100	@ 0x64
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e283      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b90:	4b88      	ldr	r3, [pc, #544]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	029b      	lsls	r3, r3, #10
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0xf6>
 8001b9c:	e000      	b.n	8001ba0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d100      	bne.n	8001bac <HAL_RCC_OscConfig+0x124>
 8001baa:	e099      	b.n	8001ce0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bac:	4b81      	ldr	r3, [pc, #516]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2238      	movs	r2, #56	@ 0x38
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bb6:	4b7f      	ldr	r3, [pc, #508]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	2203      	movs	r2, #3
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2b10      	cmp	r3, #16
 8001bc4:	d102      	bne.n	8001bcc <HAL_RCC_OscConfig+0x144>
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d002      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d135      	bne.n	8001c3e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bd2:	4b78      	ldr	r3, [pc, #480]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	2380      	movs	r3, #128	@ 0x80
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d005      	beq.n	8001bea <HAL_RCC_OscConfig+0x162>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e256      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bea:	4b72      	ldr	r3, [pc, #456]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4a74      	ldr	r2, [pc, #464]	@ (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	021a      	lsls	r2, r3, #8
 8001bfa:	4b6e      	ldr	r3, [pc, #440]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d112      	bne.n	8001c2c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c06:	4b6b      	ldr	r3, [pc, #428]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a6e      	ldr	r2, [pc, #440]	@ (8001dc4 <HAL_RCC_OscConfig+0x33c>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	0019      	movs	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	4b67      	ldr	r3, [pc, #412]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001c16:	430a      	orrs	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001c1a:	4b66      	ldr	r3, [pc, #408]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	0adb      	lsrs	r3, r3, #11
 8001c20:	2207      	movs	r2, #7
 8001c22:	4013      	ands	r3, r2
 8001c24:	4a68      	ldr	r2, [pc, #416]	@ (8001dc8 <HAL_RCC_OscConfig+0x340>)
 8001c26:	40da      	lsrs	r2, r3
 8001c28:	4b68      	ldr	r3, [pc, #416]	@ (8001dcc <HAL_RCC_OscConfig+0x344>)
 8001c2a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c2c:	4b68      	ldr	r3, [pc, #416]	@ (8001dd0 <HAL_RCC_OscConfig+0x348>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	0018      	movs	r0, r3
 8001c32:	f7ff fb4b 	bl	80012cc <HAL_InitTick>
 8001c36:	1e03      	subs	r3, r0, #0
 8001c38:	d051      	beq.n	8001cde <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e22c      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d030      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c46:	4b5b      	ldr	r3, [pc, #364]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a5e      	ldr	r2, [pc, #376]	@ (8001dc4 <HAL_RCC_OscConfig+0x33c>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	0019      	movs	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	4b57      	ldr	r3, [pc, #348]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001c5a:	4b56      	ldr	r3, [pc, #344]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4b55      	ldr	r3, [pc, #340]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001c60:	2180      	movs	r1, #128	@ 0x80
 8001c62:	0049      	lsls	r1, r1, #1
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff fb8c 	bl	8001384 <HAL_GetTick>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c72:	f7ff fb87 	bl	8001384 <HAL_GetTick>
 8001c76:	0002      	movs	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e209      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c84:	4b4b      	ldr	r3, [pc, #300]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c90:	4b48      	ldr	r3, [pc, #288]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4a4a      	ldr	r2, [pc, #296]	@ (8001dc0 <HAL_RCC_OscConfig+0x338>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	021a      	lsls	r2, r3, #8
 8001ca0:	4b44      	ldr	r3, [pc, #272]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	e01b      	b.n	8001ce0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001ca8:	4b42      	ldr	r3, [pc, #264]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b41      	ldr	r3, [pc, #260]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001cae:	4949      	ldr	r1, [pc, #292]	@ (8001dd4 <HAL_RCC_OscConfig+0x34c>)
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fb66 	bl	8001384 <HAL_GetTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cbe:	f7ff fb61 	bl	8001384 <HAL_GetTick>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e1e3      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cd0:	4b38      	ldr	r3, [pc, #224]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2380      	movs	r3, #128	@ 0x80
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d1f0      	bne.n	8001cbe <HAL_RCC_OscConfig+0x236>
 8001cdc:	e000      	b.n	8001ce0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cde:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2208      	movs	r2, #8
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d047      	beq.n	8001d7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001cea:	4b32      	ldr	r3, [pc, #200]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2238      	movs	r2, #56	@ 0x38
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b18      	cmp	r3, #24
 8001cf4:	d10a      	bne.n	8001d0c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d03c      	beq.n	8001d7a <HAL_RCC_OscConfig+0x2f2>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d138      	bne.n	8001d7a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e1c5      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d019      	beq.n	8001d48 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001d14:	4b27      	ldr	r3, [pc, #156]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001d16:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d18:	4b26      	ldr	r3, [pc, #152]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff fb30 	bl	8001384 <HAL_GetTick>
 8001d24:	0003      	movs	r3, r0
 8001d26:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2a:	f7ff fb2b 	bl	8001384 <HAL_GetTick>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e1ad      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d40:	2202      	movs	r2, #2
 8001d42:	4013      	ands	r3, r2
 8001d44:	d0f1      	beq.n	8001d2a <HAL_RCC_OscConfig+0x2a2>
 8001d46:	e018      	b.n	8001d7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001d48:	4b1a      	ldr	r3, [pc, #104]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001d4a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001d4e:	2101      	movs	r1, #1
 8001d50:	438a      	bics	r2, r1
 8001d52:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff fb16 	bl	8001384 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5e:	f7ff fb11 	bl	8001384 <HAL_GetTick>
 8001d62:	0002      	movs	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e193      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d70:	4b10      	ldr	r3, [pc, #64]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001d72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d74:	2202      	movs	r2, #2
 8001d76:	4013      	ands	r3, r2
 8001d78:	d1f1      	bne.n	8001d5e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2204      	movs	r2, #4
 8001d80:	4013      	ands	r3, r2
 8001d82:	d100      	bne.n	8001d86 <HAL_RCC_OscConfig+0x2fe>
 8001d84:	e0c6      	b.n	8001f14 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d86:	231f      	movs	r3, #31
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d8e:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2238      	movs	r2, #56	@ 0x38
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	d11e      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d9a:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <HAL_RCC_OscConfig+0x32c>)
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9e:	2202      	movs	r2, #2
 8001da0:	4013      	ands	r3, r2
 8001da2:	d100      	bne.n	8001da6 <HAL_RCC_OscConfig+0x31e>
 8001da4:	e0b6      	b.n	8001f14 <HAL_RCC_OscConfig+0x48c>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d000      	beq.n	8001db0 <HAL_RCC_OscConfig+0x328>
 8001dae:	e0b1      	b.n	8001f14 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e171      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
 8001db4:	40021000 	.word	0x40021000
 8001db8:	fffeffff 	.word	0xfffeffff
 8001dbc:	fffbffff 	.word	0xfffbffff
 8001dc0:	ffff80ff 	.word	0xffff80ff
 8001dc4:	ffffc7ff 	.word	0xffffc7ff
 8001dc8:	00f42400 	.word	0x00f42400
 8001dcc:	20000064 	.word	0x20000064
 8001dd0:	20000068 	.word	0x20000068
 8001dd4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dd8:	4bb1      	ldr	r3, [pc, #708]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001dda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ddc:	2380      	movs	r3, #128	@ 0x80
 8001dde:	055b      	lsls	r3, r3, #21
 8001de0:	4013      	ands	r3, r2
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_OscConfig+0x360>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x362>
 8001de8:	2300      	movs	r3, #0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d011      	beq.n	8001e12 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001dee:	4bac      	ldr	r3, [pc, #688]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001df0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001df2:	4bab      	ldr	r3, [pc, #684]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001df4:	2180      	movs	r1, #128	@ 0x80
 8001df6:	0549      	lsls	r1, r1, #21
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001dfc:	4ba8      	ldr	r3, [pc, #672]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001dfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e00:	2380      	movs	r3, #128	@ 0x80
 8001e02:	055b      	lsls	r3, r3, #21
 8001e04:	4013      	ands	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001e0a:	231f      	movs	r3, #31
 8001e0c:	18fb      	adds	r3, r7, r3
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e12:	4ba4      	ldr	r3, [pc, #656]	@ (80020a4 <HAL_RCC_OscConfig+0x61c>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	2380      	movs	r3, #128	@ 0x80
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d11a      	bne.n	8001e54 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e1e:	4ba1      	ldr	r3, [pc, #644]	@ (80020a4 <HAL_RCC_OscConfig+0x61c>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4ba0      	ldr	r3, [pc, #640]	@ (80020a4 <HAL_RCC_OscConfig+0x61c>)
 8001e24:	2180      	movs	r1, #128	@ 0x80
 8001e26:	0049      	lsls	r1, r1, #1
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff faaa 	bl	8001384 <HAL_GetTick>
 8001e30:	0003      	movs	r3, r0
 8001e32:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e36:	f7ff faa5 	bl	8001384 <HAL_GetTick>
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e127      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e48:	4b96      	ldr	r3, [pc, #600]	@ (80020a4 <HAL_RCC_OscConfig+0x61c>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	2380      	movs	r3, #128	@ 0x80
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4013      	ands	r3, r2
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x3e2>
 8001e5c:	4b90      	ldr	r3, [pc, #576]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001e5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e60:	4b8f      	ldr	r3, [pc, #572]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001e62:	2101      	movs	r1, #1
 8001e64:	430a      	orrs	r2, r1
 8001e66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e68:	e01c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x41c>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b05      	cmp	r3, #5
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x404>
 8001e72:	4b8b      	ldr	r3, [pc, #556]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001e74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e76:	4b8a      	ldr	r3, [pc, #552]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001e78:	2104      	movs	r1, #4
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e7e:	4b88      	ldr	r3, [pc, #544]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001e80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e82:	4b87      	ldr	r3, [pc, #540]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001e84:	2101      	movs	r1, #1
 8001e86:	430a      	orrs	r2, r1
 8001e88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e8a:	e00b      	b.n	8001ea4 <HAL_RCC_OscConfig+0x41c>
 8001e8c:	4b84      	ldr	r3, [pc, #528]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001e8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e90:	4b83      	ldr	r3, [pc, #524]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001e92:	2101      	movs	r1, #1
 8001e94:	438a      	bics	r2, r1
 8001e96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e98:	4b81      	ldr	r3, [pc, #516]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001e9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e9c:	4b80      	ldr	r3, [pc, #512]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001e9e:	2104      	movs	r1, #4
 8001ea0:	438a      	bics	r2, r1
 8001ea2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d014      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7ff fa6a 	bl	8001384 <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb4:	e009      	b.n	8001eca <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7ff fa65 	bl	8001384 <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	4a79      	ldr	r2, [pc, #484]	@ (80020a8 <HAL_RCC_OscConfig+0x620>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e0e6      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eca:	4b75      	ldr	r3, [pc, #468]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ece:	2202      	movs	r2, #2
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x42e>
 8001ed4:	e013      	b.n	8001efe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7ff fa55 	bl	8001384 <HAL_GetTick>
 8001eda:	0003      	movs	r3, r0
 8001edc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ede:	e009      	b.n	8001ef4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fa50 	bl	8001384 <HAL_GetTick>
 8001ee4:	0002      	movs	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	4a6f      	ldr	r2, [pc, #444]	@ (80020a8 <HAL_RCC_OscConfig+0x620>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e0d1      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ef4:	4b6a      	ldr	r3, [pc, #424]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef8:	2202      	movs	r2, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001efe:	231f      	movs	r3, #31
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d105      	bne.n	8001f14 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f08:	4b65      	ldr	r3, [pc, #404]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001f0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f0c:	4b64      	ldr	r3, [pc, #400]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001f0e:	4967      	ldr	r1, [pc, #412]	@ (80020ac <HAL_RCC_OscConfig+0x624>)
 8001f10:	400a      	ands	r2, r1
 8001f12:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d100      	bne.n	8001f1e <HAL_RCC_OscConfig+0x496>
 8001f1c:	e0bb      	b.n	8002096 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f1e:	4b60      	ldr	r3, [pc, #384]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2238      	movs	r2, #56	@ 0x38
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b10      	cmp	r3, #16
 8001f28:	d100      	bne.n	8001f2c <HAL_RCC_OscConfig+0x4a4>
 8001f2a:	e07b      	b.n	8002024 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d156      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f34:	4b5a      	ldr	r3, [pc, #360]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b59      	ldr	r3, [pc, #356]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001f3a:	495d      	ldr	r1, [pc, #372]	@ (80020b0 <HAL_RCC_OscConfig+0x628>)
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7ff fa20 	bl	8001384 <HAL_GetTick>
 8001f44:	0003      	movs	r3, r0
 8001f46:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7ff fa1b 	bl	8001384 <HAL_GetTick>
 8001f4e:	0002      	movs	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e09d      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f5c:	4b50      	ldr	r3, [pc, #320]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2380      	movs	r3, #128	@ 0x80
 8001f62:	049b      	lsls	r3, r3, #18
 8001f64:	4013      	ands	r3, r2
 8001f66:	d1f0      	bne.n	8001f4a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f68:	4b4d      	ldr	r3, [pc, #308]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4a51      	ldr	r2, [pc, #324]	@ (80020b4 <HAL_RCC_OscConfig+0x62c>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	0019      	movs	r1, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1a      	ldr	r2, [r3, #32]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f80:	021b      	lsls	r3, r3, #8
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f94:	431a      	orrs	r2, r3
 8001f96:	4b42      	ldr	r3, [pc, #264]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f9c:	4b40      	ldr	r3, [pc, #256]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b3f      	ldr	r3, [pc, #252]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001fa2:	2180      	movs	r1, #128	@ 0x80
 8001fa4:	0449      	lsls	r1, r1, #17
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001faa:	4b3d      	ldr	r3, [pc, #244]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	4b3c      	ldr	r3, [pc, #240]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001fb0:	2180      	movs	r1, #128	@ 0x80
 8001fb2:	0549      	lsls	r1, r1, #21
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7ff f9e4 	bl	8001384 <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7ff f9df 	bl	8001384 <HAL_GetTick>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e061      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd4:	4b32      	ldr	r3, [pc, #200]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	2380      	movs	r3, #128	@ 0x80
 8001fda:	049b      	lsls	r3, r3, #18
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x53a>
 8001fe0:	e059      	b.n	8002096 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4b2e      	ldr	r3, [pc, #184]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8001fe8:	4931      	ldr	r1, [pc, #196]	@ (80020b0 <HAL_RCC_OscConfig+0x628>)
 8001fea:	400a      	ands	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7ff f9c9 	bl	8001384 <HAL_GetTick>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7ff f9c4 	bl	8001384 <HAL_GetTick>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e046      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800200a:	4b25      	ldr	r3, [pc, #148]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	2380      	movs	r3, #128	@ 0x80
 8002010:	049b      	lsls	r3, r3, #18
 8002012:	4013      	ands	r3, r2
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002016:	4b22      	ldr	r3, [pc, #136]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	4b21      	ldr	r3, [pc, #132]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 800201c:	4926      	ldr	r1, [pc, #152]	@ (80020b8 <HAL_RCC_OscConfig+0x630>)
 800201e:	400a      	ands	r2, r1
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	e038      	b.n	8002096 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e033      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002030:	4b1b      	ldr	r3, [pc, #108]	@ (80020a0 <HAL_RCC_OscConfig+0x618>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2203      	movs	r2, #3
 800203a:	401a      	ands	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	429a      	cmp	r2, r3
 8002042:	d126      	bne.n	8002092 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2270      	movs	r2, #112	@ 0x70
 8002048:	401a      	ands	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d11f      	bne.n	8002092 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	23fe      	movs	r3, #254	@ 0xfe
 8002056:	01db      	lsls	r3, r3, #7
 8002058:	401a      	ands	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002060:	429a      	cmp	r2, r3
 8002062:	d116      	bne.n	8002092 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	23f8      	movs	r3, #248	@ 0xf8
 8002068:	039b      	lsls	r3, r3, #14
 800206a:	401a      	ands	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002070:	429a      	cmp	r2, r3
 8002072:	d10e      	bne.n	8002092 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	23e0      	movs	r3, #224	@ 0xe0
 8002078:	051b      	lsls	r3, r3, #20
 800207a:	401a      	ands	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002080:	429a      	cmp	r2, r3
 8002082:	d106      	bne.n	8002092 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	0f5b      	lsrs	r3, r3, #29
 8002088:	075a      	lsls	r2, r3, #29
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d001      	beq.n	8002096 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	b008      	add	sp, #32
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40007000 	.word	0x40007000
 80020a8:	00001388 	.word	0x00001388
 80020ac:	efffffff 	.word	0xefffffff
 80020b0:	feffffff 	.word	0xfeffffff
 80020b4:	11c1808c 	.word	0x11c1808c
 80020b8:	eefefffc 	.word	0xeefefffc

080020bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0e9      	b.n	80022a4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b76      	ldr	r3, [pc, #472]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2207      	movs	r2, #7
 80020d6:	4013      	ands	r3, r2
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d91e      	bls.n	800211c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b73      	ldr	r3, [pc, #460]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2207      	movs	r2, #7
 80020e4:	4393      	bics	r3, r2
 80020e6:	0019      	movs	r1, r3
 80020e8:	4b70      	ldr	r3, [pc, #448]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020f0:	f7ff f948 	bl	8001384 <HAL_GetTick>
 80020f4:	0003      	movs	r3, r0
 80020f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020f8:	e009      	b.n	800210e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fa:	f7ff f943 	bl	8001384 <HAL_GetTick>
 80020fe:	0002      	movs	r2, r0
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	4a6a      	ldr	r2, [pc, #424]	@ (80022b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e0ca      	b.n	80022a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800210e:	4b67      	ldr	r3, [pc, #412]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2207      	movs	r2, #7
 8002114:	4013      	ands	r3, r2
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d1ee      	bne.n	80020fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2202      	movs	r2, #2
 8002122:	4013      	ands	r3, r2
 8002124:	d015      	beq.n	8002152 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2204      	movs	r2, #4
 800212c:	4013      	ands	r3, r2
 800212e:	d006      	beq.n	800213e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002130:	4b60      	ldr	r3, [pc, #384]	@ (80022b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	4b5f      	ldr	r3, [pc, #380]	@ (80022b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002136:	21e0      	movs	r1, #224	@ 0xe0
 8002138:	01c9      	lsls	r1, r1, #7
 800213a:	430a      	orrs	r2, r1
 800213c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800213e:	4b5d      	ldr	r3, [pc, #372]	@ (80022b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	4a5d      	ldr	r2, [pc, #372]	@ (80022b8 <HAL_RCC_ClockConfig+0x1fc>)
 8002144:	4013      	ands	r3, r2
 8002146:	0019      	movs	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	4b59      	ldr	r3, [pc, #356]	@ (80022b4 <HAL_RCC_ClockConfig+0x1f8>)
 800214e:	430a      	orrs	r2, r1
 8002150:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2201      	movs	r2, #1
 8002158:	4013      	ands	r3, r2
 800215a:	d057      	beq.n	800220c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d107      	bne.n	8002174 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002164:	4b53      	ldr	r3, [pc, #332]	@ (80022b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	2380      	movs	r3, #128	@ 0x80
 800216a:	029b      	lsls	r3, r3, #10
 800216c:	4013      	ands	r3, r2
 800216e:	d12b      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e097      	b.n	80022a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d107      	bne.n	800218c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217c:	4b4d      	ldr	r3, [pc, #308]	@ (80022b4 <HAL_RCC_ClockConfig+0x1f8>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	2380      	movs	r3, #128	@ 0x80
 8002182:	049b      	lsls	r3, r3, #18
 8002184:	4013      	ands	r3, r2
 8002186:	d11f      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e08b      	b.n	80022a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d107      	bne.n	80021a4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002194:	4b47      	ldr	r3, [pc, #284]	@ (80022b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	2380      	movs	r3, #128	@ 0x80
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4013      	ands	r3, r2
 800219e:	d113      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e07f      	b.n	80022a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ac:	4b41      	ldr	r3, [pc, #260]	@ (80022b4 <HAL_RCC_ClockConfig+0x1f8>)
 80021ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b0:	2202      	movs	r2, #2
 80021b2:	4013      	ands	r3, r2
 80021b4:	d108      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e074      	b.n	80022a4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ba:	4b3e      	ldr	r3, [pc, #248]	@ (80022b4 <HAL_RCC_ClockConfig+0x1f8>)
 80021bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021be:	2202      	movs	r2, #2
 80021c0:	4013      	ands	r3, r2
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e06d      	b.n	80022a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021c8:	4b3a      	ldr	r3, [pc, #232]	@ (80022b4 <HAL_RCC_ClockConfig+0x1f8>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2207      	movs	r2, #7
 80021ce:	4393      	bics	r3, r2
 80021d0:	0019      	movs	r1, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	4b37      	ldr	r3, [pc, #220]	@ (80022b4 <HAL_RCC_ClockConfig+0x1f8>)
 80021d8:	430a      	orrs	r2, r1
 80021da:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021dc:	f7ff f8d2 	bl	8001384 <HAL_GetTick>
 80021e0:	0003      	movs	r3, r0
 80021e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e4:	e009      	b.n	80021fa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e6:	f7ff f8cd 	bl	8001384 <HAL_GetTick>
 80021ea:	0002      	movs	r2, r0
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	4a2f      	ldr	r2, [pc, #188]	@ (80022b0 <HAL_RCC_ClockConfig+0x1f4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e054      	b.n	80022a4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b2e      	ldr	r3, [pc, #184]	@ (80022b4 <HAL_RCC_ClockConfig+0x1f8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2238      	movs	r2, #56	@ 0x38
 8002200:	401a      	ands	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	429a      	cmp	r2, r3
 800220a:	d1ec      	bne.n	80021e6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b27      	ldr	r3, [pc, #156]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2207      	movs	r2, #7
 8002212:	4013      	ands	r3, r2
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d21e      	bcs.n	8002258 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2207      	movs	r2, #7
 8002220:	4393      	bics	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	4b21      	ldr	r3, [pc, #132]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800222c:	f7ff f8aa 	bl	8001384 <HAL_GetTick>
 8002230:	0003      	movs	r3, r0
 8002232:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002234:	e009      	b.n	800224a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002236:	f7ff f8a5 	bl	8001384 <HAL_GetTick>
 800223a:	0002      	movs	r2, r0
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	4a1b      	ldr	r2, [pc, #108]	@ (80022b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e02c      	b.n	80022a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800224a:	4b18      	ldr	r3, [pc, #96]	@ (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2207      	movs	r2, #7
 8002250:	4013      	ands	r3, r2
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d1ee      	bne.n	8002236 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2204      	movs	r2, #4
 800225e:	4013      	ands	r3, r2
 8002260:	d009      	beq.n	8002276 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002262:	4b14      	ldr	r3, [pc, #80]	@ (80022b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	4a15      	ldr	r2, [pc, #84]	@ (80022bc <HAL_RCC_ClockConfig+0x200>)
 8002268:	4013      	ands	r3, r2
 800226a:	0019      	movs	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	4b10      	ldr	r3, [pc, #64]	@ (80022b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002272:	430a      	orrs	r2, r1
 8002274:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002276:	f000 f829 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 800227a:	0001      	movs	r1, r0
 800227c:	4b0d      	ldr	r3, [pc, #52]	@ (80022b4 <HAL_RCC_ClockConfig+0x1f8>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	220f      	movs	r2, #15
 8002284:	401a      	ands	r2, r3
 8002286:	4b0e      	ldr	r3, [pc, #56]	@ (80022c0 <HAL_RCC_ClockConfig+0x204>)
 8002288:	0092      	lsls	r2, r2, #2
 800228a:	58d3      	ldr	r3, [r2, r3]
 800228c:	221f      	movs	r2, #31
 800228e:	4013      	ands	r3, r2
 8002290:	000a      	movs	r2, r1
 8002292:	40da      	lsrs	r2, r3
 8002294:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <HAL_RCC_ClockConfig+0x208>)
 8002296:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <HAL_RCC_ClockConfig+0x20c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0018      	movs	r0, r3
 800229e:	f7ff f815 	bl	80012cc <HAL_InitTick>
 80022a2:	0003      	movs	r3, r0
}
 80022a4:	0018      	movs	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b004      	add	sp, #16
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40022000 	.word	0x40022000
 80022b0:	00001388 	.word	0x00001388
 80022b4:	40021000 	.word	0x40021000
 80022b8:	fffff0ff 	.word	0xfffff0ff
 80022bc:	ffff8fff 	.word	0xffff8fff
 80022c0:	080064dc 	.word	0x080064dc
 80022c4:	20000064 	.word	0x20000064
 80022c8:	20000068 	.word	0x20000068

080022cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022d2:	4b3c      	ldr	r3, [pc, #240]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2238      	movs	r2, #56	@ 0x38
 80022d8:	4013      	ands	r3, r2
 80022da:	d10f      	bne.n	80022fc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80022dc:	4b39      	ldr	r3, [pc, #228]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0adb      	lsrs	r3, r3, #11
 80022e2:	2207      	movs	r2, #7
 80022e4:	4013      	ands	r3, r2
 80022e6:	2201      	movs	r2, #1
 80022e8:	409a      	lsls	r2, r3
 80022ea:	0013      	movs	r3, r2
 80022ec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80022ee:	6839      	ldr	r1, [r7, #0]
 80022f0:	4835      	ldr	r0, [pc, #212]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022f2:	f7fd ff23 	bl	800013c <__udivsi3>
 80022f6:	0003      	movs	r3, r0
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	e05d      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022fc:	4b31      	ldr	r3, [pc, #196]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2238      	movs	r2, #56	@ 0x38
 8002302:	4013      	ands	r3, r2
 8002304:	2b08      	cmp	r3, #8
 8002306:	d102      	bne.n	800230e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002308:	4b30      	ldr	r3, [pc, #192]	@ (80023cc <HAL_RCC_GetSysClockFreq+0x100>)
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	e054      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800230e:	4b2d      	ldr	r3, [pc, #180]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2238      	movs	r2, #56	@ 0x38
 8002314:	4013      	ands	r3, r2
 8002316:	2b10      	cmp	r3, #16
 8002318:	d138      	bne.n	800238c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800231a:	4b2a      	ldr	r3, [pc, #168]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2203      	movs	r2, #3
 8002320:	4013      	ands	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002324:	4b27      	ldr	r3, [pc, #156]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	2207      	movs	r2, #7
 800232c:	4013      	ands	r3, r2
 800232e:	3301      	adds	r3, #1
 8002330:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d10d      	bne.n	8002354 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	4824      	ldr	r0, [pc, #144]	@ (80023cc <HAL_RCC_GetSysClockFreq+0x100>)
 800233c:	f7fd fefe 	bl	800013c <__udivsi3>
 8002340:	0003      	movs	r3, r0
 8002342:	0019      	movs	r1, r3
 8002344:	4b1f      	ldr	r3, [pc, #124]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	227f      	movs	r2, #127	@ 0x7f
 800234c:	4013      	ands	r3, r2
 800234e:	434b      	muls	r3, r1
 8002350:	617b      	str	r3, [r7, #20]
        break;
 8002352:	e00d      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	481c      	ldr	r0, [pc, #112]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002358:	f7fd fef0 	bl	800013c <__udivsi3>
 800235c:	0003      	movs	r3, r0
 800235e:	0019      	movs	r1, r3
 8002360:	4b18      	ldr	r3, [pc, #96]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	227f      	movs	r2, #127	@ 0x7f
 8002368:	4013      	ands	r3, r2
 800236a:	434b      	muls	r3, r1
 800236c:	617b      	str	r3, [r7, #20]
        break;
 800236e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002370:	4b14      	ldr	r3, [pc, #80]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	0f5b      	lsrs	r3, r3, #29
 8002376:	2207      	movs	r2, #7
 8002378:	4013      	ands	r3, r2
 800237a:	3301      	adds	r3, #1
 800237c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	6978      	ldr	r0, [r7, #20]
 8002382:	f7fd fedb 	bl	800013c <__udivsi3>
 8002386:	0003      	movs	r3, r0
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	e015      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800238c:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2238      	movs	r2, #56	@ 0x38
 8002392:	4013      	ands	r3, r2
 8002394:	2b20      	cmp	r3, #32
 8002396:	d103      	bne.n	80023a0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002398:	2380      	movs	r3, #128	@ 0x80
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	e00b      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80023a0:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2238      	movs	r2, #56	@ 0x38
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b18      	cmp	r3, #24
 80023aa:	d103      	bne.n	80023b4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80023ac:	23fa      	movs	r3, #250	@ 0xfa
 80023ae:	01db      	lsls	r3, r3, #7
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	e001      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023b8:	693b      	ldr	r3, [r7, #16]
}
 80023ba:	0018      	movs	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	b006      	add	sp, #24
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	40021000 	.word	0x40021000
 80023c8:	00f42400 	.word	0x00f42400
 80023cc:	007a1200 	.word	0x007a1200

080023d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d4:	4b02      	ldr	r3, [pc, #8]	@ (80023e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	0018      	movs	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	20000064 	.word	0x20000064

080023e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e4:	b5b0      	push	{r4, r5, r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80023e8:	f7ff fff2 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 80023ec:	0004      	movs	r4, r0
 80023ee:	f7ff fb3f 	bl	8001a70 <LL_RCC_GetAPB1Prescaler>
 80023f2:	0003      	movs	r3, r0
 80023f4:	0b1a      	lsrs	r2, r3, #12
 80023f6:	4b05      	ldr	r3, [pc, #20]	@ (800240c <HAL_RCC_GetPCLK1Freq+0x28>)
 80023f8:	0092      	lsls	r2, r2, #2
 80023fa:	58d3      	ldr	r3, [r2, r3]
 80023fc:	221f      	movs	r2, #31
 80023fe:	4013      	ands	r3, r2
 8002400:	40dc      	lsrs	r4, r3
 8002402:	0023      	movs	r3, r4
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	bdb0      	pop	{r4, r5, r7, pc}
 800240a:	46c0      	nop			@ (mov r8, r8)
 800240c:	0800651c 	.word	0x0800651c

08002410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002418:	2313      	movs	r3, #19
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002420:	2312      	movs	r3, #18
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2380      	movs	r3, #128	@ 0x80
 800242e:	029b      	lsls	r3, r3, #10
 8002430:	4013      	ands	r3, r2
 8002432:	d100      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002434:	e0a3      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002436:	2011      	movs	r0, #17
 8002438:	183b      	adds	r3, r7, r0
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243e:	4bc3      	ldr	r3, [pc, #780]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002440:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002442:	2380      	movs	r3, #128	@ 0x80
 8002444:	055b      	lsls	r3, r3, #21
 8002446:	4013      	ands	r3, r2
 8002448:	d110      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	4bc0      	ldr	r3, [pc, #768]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800244c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800244e:	4bbf      	ldr	r3, [pc, #764]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002450:	2180      	movs	r1, #128	@ 0x80
 8002452:	0549      	lsls	r1, r1, #21
 8002454:	430a      	orrs	r2, r1
 8002456:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002458:	4bbc      	ldr	r3, [pc, #752]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800245a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800245c:	2380      	movs	r3, #128	@ 0x80
 800245e:	055b      	lsls	r3, r3, #21
 8002460:	4013      	ands	r3, r2
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002466:	183b      	adds	r3, r7, r0
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800246c:	4bb8      	ldr	r3, [pc, #736]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4bb7      	ldr	r3, [pc, #732]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002472:	2180      	movs	r1, #128	@ 0x80
 8002474:	0049      	lsls	r1, r1, #1
 8002476:	430a      	orrs	r2, r1
 8002478:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800247a:	f7fe ff83 	bl	8001384 <HAL_GetTick>
 800247e:	0003      	movs	r3, r0
 8002480:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002482:	e00b      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002484:	f7fe ff7e 	bl	8001384 <HAL_GetTick>
 8002488:	0002      	movs	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d904      	bls.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002492:	2313      	movs	r3, #19
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	2203      	movs	r2, #3
 8002498:	701a      	strb	r2, [r3, #0]
        break;
 800249a:	e005      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800249c:	4bac      	ldr	r3, [pc, #688]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2380      	movs	r3, #128	@ 0x80
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4013      	ands	r3, r2
 80024a6:	d0ed      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80024a8:	2313      	movs	r3, #19
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d154      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024b2:	4ba6      	ldr	r3, [pc, #664]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024b6:	23c0      	movs	r3, #192	@ 0xc0
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4013      	ands	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d019      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d014      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024ce:	4b9f      	ldr	r3, [pc, #636]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d2:	4aa0      	ldr	r2, [pc, #640]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024d8:	4b9c      	ldr	r3, [pc, #624]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024dc:	4b9b      	ldr	r3, [pc, #620]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024de:	2180      	movs	r1, #128	@ 0x80
 80024e0:	0249      	lsls	r1, r1, #9
 80024e2:	430a      	orrs	r2, r1
 80024e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024e6:	4b99      	ldr	r3, [pc, #612]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024ea:	4b98      	ldr	r3, [pc, #608]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ec:	499a      	ldr	r1, [pc, #616]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80024ee:	400a      	ands	r2, r1
 80024f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024f2:	4b96      	ldr	r3, [pc, #600]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2201      	movs	r2, #1
 80024fc:	4013      	ands	r3, r2
 80024fe:	d016      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe ff40 	bl	8001384 <HAL_GetTick>
 8002504:	0003      	movs	r3, r0
 8002506:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002508:	e00c      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250a:	f7fe ff3b 	bl	8001384 <HAL_GetTick>
 800250e:	0002      	movs	r2, r0
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	4a91      	ldr	r2, [pc, #580]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d904      	bls.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800251a:	2313      	movs	r3, #19
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	2203      	movs	r2, #3
 8002520:	701a      	strb	r2, [r3, #0]
            break;
 8002522:	e004      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002524:	4b89      	ldr	r3, [pc, #548]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002528:	2202      	movs	r2, #2
 800252a:	4013      	ands	r3, r2
 800252c:	d0ed      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800252e:	2313      	movs	r3, #19
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10a      	bne.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002538:	4b84      	ldr	r3, [pc, #528]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800253a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253c:	4a85      	ldr	r2, [pc, #532]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800253e:	4013      	ands	r3, r2
 8002540:	0019      	movs	r1, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002546:	4b81      	ldr	r3, [pc, #516]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002548:	430a      	orrs	r2, r1
 800254a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800254c:	e00c      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800254e:	2312      	movs	r3, #18
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	2213      	movs	r2, #19
 8002554:	18ba      	adds	r2, r7, r2
 8002556:	7812      	ldrb	r2, [r2, #0]
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e005      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800255c:	2312      	movs	r3, #18
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	2213      	movs	r2, #19
 8002562:	18ba      	adds	r2, r7, r2
 8002564:	7812      	ldrb	r2, [r2, #0]
 8002566:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002568:	2311      	movs	r3, #17
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d105      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002572:	4b76      	ldr	r3, [pc, #472]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002574:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002576:	4b75      	ldr	r3, [pc, #468]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002578:	4979      	ldr	r1, [pc, #484]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800257a:	400a      	ands	r2, r1
 800257c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2201      	movs	r2, #1
 8002584:	4013      	ands	r3, r2
 8002586:	d009      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002588:	4b70      	ldr	r3, [pc, #448]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800258a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258c:	2203      	movs	r2, #3
 800258e:	4393      	bics	r3, r2
 8002590:	0019      	movs	r1, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4b6d      	ldr	r3, [pc, #436]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002598:	430a      	orrs	r2, r1
 800259a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2202      	movs	r2, #2
 80025a2:	4013      	ands	r3, r2
 80025a4:	d009      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025a6:	4b69      	ldr	r3, [pc, #420]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025aa:	220c      	movs	r2, #12
 80025ac:	4393      	bics	r3, r2
 80025ae:	0019      	movs	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	4b65      	ldr	r3, [pc, #404]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b6:	430a      	orrs	r2, r1
 80025b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2210      	movs	r2, #16
 80025c0:	4013      	ands	r3, r2
 80025c2:	d009      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025c4:	4b61      	ldr	r3, [pc, #388]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c8:	4a66      	ldr	r2, [pc, #408]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	4b5e      	ldr	r3, [pc, #376]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025d4:	430a      	orrs	r2, r1
 80025d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	2380      	movs	r3, #128	@ 0x80
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4013      	ands	r3, r2
 80025e2:	d009      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025e4:	4b59      	ldr	r3, [pc, #356]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e8:	4a5f      	ldr	r2, [pc, #380]	@ (8002768 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	0019      	movs	r1, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	4b56      	ldr	r3, [pc, #344]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025f4:	430a      	orrs	r2, r1
 80025f6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2380      	movs	r3, #128	@ 0x80
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4013      	ands	r3, r2
 8002602:	d009      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002604:	4b51      	ldr	r3, [pc, #324]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002608:	4a58      	ldr	r2, [pc, #352]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800260a:	4013      	ands	r3, r2
 800260c:	0019      	movs	r1, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69da      	ldr	r2, [r3, #28]
 8002612:	4b4e      	ldr	r3, [pc, #312]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002614:	430a      	orrs	r2, r1
 8002616:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2220      	movs	r2, #32
 800261e:	4013      	ands	r3, r2
 8002620:	d009      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002622:	4b4a      	ldr	r3, [pc, #296]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002626:	4a52      	ldr	r2, [pc, #328]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002628:	4013      	ands	r3, r2
 800262a:	0019      	movs	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	4b46      	ldr	r3, [pc, #280]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002632:	430a      	orrs	r2, r1
 8002634:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	2380      	movs	r3, #128	@ 0x80
 800263c:	01db      	lsls	r3, r3, #7
 800263e:	4013      	ands	r3, r2
 8002640:	d015      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002642:	4b42      	ldr	r3, [pc, #264]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	0899      	lsrs	r1, r3, #2
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1a      	ldr	r2, [r3, #32]
 800264e:	4b3f      	ldr	r3, [pc, #252]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002650:	430a      	orrs	r2, r1
 8002652:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1a      	ldr	r2, [r3, #32]
 8002658:	2380      	movs	r3, #128	@ 0x80
 800265a:	05db      	lsls	r3, r3, #23
 800265c:	429a      	cmp	r2, r3
 800265e:	d106      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002660:	4b3a      	ldr	r3, [pc, #232]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	4b39      	ldr	r3, [pc, #228]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002666:	2180      	movs	r1, #128	@ 0x80
 8002668:	0249      	lsls	r1, r1, #9
 800266a:	430a      	orrs	r2, r1
 800266c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	2380      	movs	r3, #128	@ 0x80
 8002674:	031b      	lsls	r3, r3, #12
 8002676:	4013      	ands	r3, r2
 8002678:	d009      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800267a:	4b34      	ldr	r3, [pc, #208]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800267c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267e:	2240      	movs	r2, #64	@ 0x40
 8002680:	4393      	bics	r3, r2
 8002682:	0019      	movs	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002688:	4b30      	ldr	r3, [pc, #192]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800268a:	430a      	orrs	r2, r1
 800268c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	2380      	movs	r3, #128	@ 0x80
 8002694:	039b      	lsls	r3, r3, #14
 8002696:	4013      	ands	r3, r2
 8002698:	d016      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800269a:	4b2c      	ldr	r3, [pc, #176]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800269c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269e:	4a35      	ldr	r2, [pc, #212]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	0019      	movs	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026a8:	4b28      	ldr	r3, [pc, #160]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026aa:	430a      	orrs	r2, r1
 80026ac:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026b2:	2380      	movs	r3, #128	@ 0x80
 80026b4:	03db      	lsls	r3, r3, #15
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d106      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026ba:	4b24      	ldr	r3, [pc, #144]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	4b23      	ldr	r3, [pc, #140]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026c0:	2180      	movs	r1, #128	@ 0x80
 80026c2:	0449      	lsls	r1, r1, #17
 80026c4:	430a      	orrs	r2, r1
 80026c6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2380      	movs	r3, #128	@ 0x80
 80026ce:	03db      	lsls	r3, r3, #15
 80026d0:	4013      	ands	r3, r2
 80026d2:	d016      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026d4:	4b1d      	ldr	r3, [pc, #116]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d8:	4a27      	ldr	r2, [pc, #156]	@ (8002778 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80026da:	4013      	ands	r3, r2
 80026dc:	0019      	movs	r1, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026e2:	4b1a      	ldr	r3, [pc, #104]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026e4:	430a      	orrs	r2, r1
 80026e6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ec:	2380      	movs	r3, #128	@ 0x80
 80026ee:	045b      	lsls	r3, r3, #17
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d106      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026f4:	4b15      	ldr	r3, [pc, #84]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	4b14      	ldr	r3, [pc, #80]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026fa:	2180      	movs	r1, #128	@ 0x80
 80026fc:	0449      	lsls	r1, r1, #17
 80026fe:	430a      	orrs	r2, r1
 8002700:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	2380      	movs	r3, #128	@ 0x80
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	4013      	ands	r3, r2
 800270c:	d016      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800270e:	4b0f      	ldr	r3, [pc, #60]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002712:	4a1a      	ldr	r2, [pc, #104]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002714:	4013      	ands	r3, r2
 8002716:	0019      	movs	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800271e:	430a      	orrs	r2, r1
 8002720:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	2380      	movs	r3, #128	@ 0x80
 8002728:	01db      	lsls	r3, r3, #7
 800272a:	429a      	cmp	r2, r3
 800272c:	d106      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800272e:	4b07      	ldr	r3, [pc, #28]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	4b06      	ldr	r3, [pc, #24]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002734:	2180      	movs	r1, #128	@ 0x80
 8002736:	0249      	lsls	r1, r1, #9
 8002738:	430a      	orrs	r2, r1
 800273a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800273c:	2312      	movs	r3, #18
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	781b      	ldrb	r3, [r3, #0]
}
 8002742:	0018      	movs	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	b006      	add	sp, #24
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			@ (mov r8, r8)
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
 8002754:	fffffcff 	.word	0xfffffcff
 8002758:	fffeffff 	.word	0xfffeffff
 800275c:	00001388 	.word	0x00001388
 8002760:	efffffff 	.word	0xefffffff
 8002764:	fffff3ff 	.word	0xfffff3ff
 8002768:	fff3ffff 	.word	0xfff3ffff
 800276c:	ffcfffff 	.word	0xffcfffff
 8002770:	ffffcfff 	.word	0xffffcfff
 8002774:	ffbfffff 	.word	0xffbfffff
 8002778:	feffffff 	.word	0xfeffffff
 800277c:	ffff3fff 	.word	0xffff3fff

08002780 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e0a8      	b.n	80028e4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	2382      	movs	r3, #130	@ 0x82
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d009      	beq.n	80027ba <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	61da      	str	r2, [r3, #28]
 80027ac:	e005      	b.n	80027ba <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	225d      	movs	r2, #93	@ 0x5d
 80027c4:	5c9b      	ldrb	r3, [r3, r2]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d107      	bne.n	80027dc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	225c      	movs	r2, #92	@ 0x5c
 80027d0:	2100      	movs	r1, #0
 80027d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7fe fc06 	bl	8000fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	225d      	movs	r2, #93	@ 0x5d
 80027e0:	2102      	movs	r1, #2
 80027e2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2140      	movs	r1, #64	@ 0x40
 80027f0:	438a      	bics	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	23e0      	movs	r3, #224	@ 0xe0
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d902      	bls.n	8002806 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	e002      	b.n	800280c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002806:	2380      	movs	r3, #128	@ 0x80
 8002808:	015b      	lsls	r3, r3, #5
 800280a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	23f0      	movs	r3, #240	@ 0xf0
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	429a      	cmp	r2, r3
 8002816:	d008      	beq.n	800282a <HAL_SPI_Init+0xaa>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	23e0      	movs	r3, #224	@ 0xe0
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	429a      	cmp	r2, r3
 8002822:	d002      	beq.n	800282a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	2382      	movs	r3, #130	@ 0x82
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	401a      	ands	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6899      	ldr	r1, [r3, #8]
 8002838:	2384      	movs	r3, #132	@ 0x84
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	400b      	ands	r3, r1
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2102      	movs	r1, #2
 8002846:	400b      	ands	r3, r1
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	2101      	movs	r1, #1
 8002850:	400b      	ands	r3, r1
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6999      	ldr	r1, [r3, #24]
 8002858:	2380      	movs	r3, #128	@ 0x80
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	400b      	ands	r3, r1
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	2138      	movs	r1, #56	@ 0x38
 8002866:	400b      	ands	r3, r1
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	2180      	movs	r1, #128	@ 0x80
 8002870:	400b      	ands	r3, r1
 8002872:	431a      	orrs	r2, r3
 8002874:	0011      	movs	r1, r2
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800287a:	2380      	movs	r3, #128	@ 0x80
 800287c:	019b      	lsls	r3, r3, #6
 800287e:	401a      	ands	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	0c1b      	lsrs	r3, r3, #16
 800288e:	2204      	movs	r2, #4
 8002890:	401a      	ands	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002896:	2110      	movs	r1, #16
 8002898:	400b      	ands	r3, r1
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a0:	2108      	movs	r1, #8
 80028a2:	400b      	ands	r3, r1
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68d9      	ldr	r1, [r3, #12]
 80028aa:	23f0      	movs	r3, #240	@ 0xf0
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	400b      	ands	r3, r1
 80028b0:	431a      	orrs	r2, r3
 80028b2:	0011      	movs	r1, r2
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	2380      	movs	r3, #128	@ 0x80
 80028b8:	015b      	lsls	r3, r3, #5
 80028ba:	401a      	ands	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4907      	ldr	r1, [pc, #28]	@ (80028ec <HAL_SPI_Init+0x16c>)
 80028d0:	400a      	ands	r2, r1
 80028d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	225d      	movs	r2, #93	@ 0x5d
 80028de:	2101      	movs	r1, #1
 80028e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b004      	add	sp, #16
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	fffff7ff 	.word	0xfffff7ff

080028f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	1dbb      	adds	r3, r7, #6
 80028fe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002900:	231f      	movs	r3, #31
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	225c      	movs	r2, #92	@ 0x5c
 800290c:	5c9b      	ldrb	r3, [r3, r2]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_SPI_Transmit+0x26>
 8002912:	2302      	movs	r3, #2
 8002914:	e147      	b.n	8002ba6 <HAL_SPI_Transmit+0x2b6>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	225c      	movs	r2, #92	@ 0x5c
 800291a:	2101      	movs	r1, #1
 800291c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800291e:	f7fe fd31 	bl	8001384 <HAL_GetTick>
 8002922:	0003      	movs	r3, r0
 8002924:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002926:	2316      	movs	r3, #22
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	1dba      	adds	r2, r7, #6
 800292c:	8812      	ldrh	r2, [r2, #0]
 800292e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	225d      	movs	r2, #93	@ 0x5d
 8002934:	5c9b      	ldrb	r3, [r3, r2]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d004      	beq.n	8002946 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800293c:	231f      	movs	r3, #31
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	2202      	movs	r2, #2
 8002942:	701a      	strb	r2, [r3, #0]
    goto error;
 8002944:	e128      	b.n	8002b98 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_SPI_Transmit+0x64>
 800294c:	1dbb      	adds	r3, r7, #6
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d104      	bne.n	800295e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002954:	231f      	movs	r3, #31
 8002956:	18fb      	adds	r3, r7, r3
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
    goto error;
 800295c:	e11c      	b.n	8002b98 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	225d      	movs	r2, #93	@ 0x5d
 8002962:	2103      	movs	r1, #3
 8002964:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1dba      	adds	r2, r7, #6
 8002976:	8812      	ldrh	r2, [r2, #0]
 8002978:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1dba      	adds	r2, r7, #6
 800297e:	8812      	ldrh	r2, [r2, #0]
 8002980:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2244      	movs	r2, #68	@ 0x44
 800298c:	2100      	movs	r1, #0
 800298e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2246      	movs	r2, #70	@ 0x46
 8002994:	2100      	movs	r1, #0
 8002996:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	2380      	movs	r3, #128	@ 0x80
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d110      	bne.n	80029d2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2140      	movs	r1, #64	@ 0x40
 80029bc:	438a      	bics	r2, r1
 80029be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2180      	movs	r1, #128	@ 0x80
 80029cc:	01c9      	lsls	r1, r1, #7
 80029ce:	430a      	orrs	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2240      	movs	r2, #64	@ 0x40
 80029da:	4013      	ands	r3, r2
 80029dc:	2b40      	cmp	r3, #64	@ 0x40
 80029de:	d007      	beq.n	80029f0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2140      	movs	r1, #64	@ 0x40
 80029ec:	430a      	orrs	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	23e0      	movs	r3, #224	@ 0xe0
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d952      	bls.n	8002aa2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d004      	beq.n	8002a0e <HAL_SPI_Transmit+0x11e>
 8002a04:	2316      	movs	r3, #22
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d143      	bne.n	8002a96 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a12:	881a      	ldrh	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1e:	1c9a      	adds	r2, r3, #2
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a32:	e030      	b.n	8002a96 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d112      	bne.n	8002a68 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a46:	881a      	ldrh	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a52:	1c9a      	adds	r2, r3, #2
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a66:	e016      	b.n	8002a96 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a68:	f7fe fc8c 	bl	8001384 <HAL_GetTick>
 8002a6c:	0002      	movs	r2, r0
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d802      	bhi.n	8002a7e <HAL_SPI_Transmit+0x18e>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	d102      	bne.n	8002a84 <HAL_SPI_Transmit+0x194>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d108      	bne.n	8002a96 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002a84:	231f      	movs	r3, #31
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	2203      	movs	r2, #3
 8002a8a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	225d      	movs	r2, #93	@ 0x5d
 8002a90:	2101      	movs	r1, #1
 8002a92:	5499      	strb	r1, [r3, r2]
          goto error;
 8002a94:	e080      	b.n	8002b98 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1c9      	bne.n	8002a34 <HAL_SPI_Transmit+0x144>
 8002aa0:	e053      	b.n	8002b4a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d004      	beq.n	8002ab4 <HAL_SPI_Transmit+0x1c4>
 8002aaa:	2316      	movs	r3, #22
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d145      	bne.n	8002b40 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	330c      	adds	r3, #12
 8002abe:	7812      	ldrb	r2, [r2, #0]
 8002ac0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002ada:	e031      	b.n	8002b40 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d113      	bne.n	8002b12 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	330c      	adds	r3, #12
 8002af4:	7812      	ldrb	r2, [r2, #0]
 8002af6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b10:	e016      	b.n	8002b40 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b12:	f7fe fc37 	bl	8001384 <HAL_GetTick>
 8002b16:	0002      	movs	r2, r0
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d802      	bhi.n	8002b28 <HAL_SPI_Transmit+0x238>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	3301      	adds	r3, #1
 8002b26:	d102      	bne.n	8002b2e <HAL_SPI_Transmit+0x23e>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d108      	bne.n	8002b40 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002b2e:	231f      	movs	r3, #31
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	2203      	movs	r2, #3
 8002b34:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	225d      	movs	r2, #93	@ 0x5d
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	5499      	strb	r1, [r3, r2]
          goto error;
 8002b3e:	e02b      	b.n	8002b98 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1c8      	bne.n	8002adc <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	6839      	ldr	r1, [r7, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f000 fdb5 	bl	80036c0 <SPI_EndRxTxTransaction>
 8002b56:	1e03      	subs	r3, r0, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b68:	2300      	movs	r3, #0
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d004      	beq.n	8002b90 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002b86:	231f      	movs	r3, #31
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e003      	b.n	8002b98 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	225d      	movs	r2, #93	@ 0x5d
 8002b94:	2101      	movs	r1, #1
 8002b96:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	225c      	movs	r2, #92	@ 0x5c
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002ba0:	231f      	movs	r3, #31
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	781b      	ldrb	r3, [r3, #0]
}
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b008      	add	sp, #32
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	1dbb      	adds	r3, r7, #6
 8002bbc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bbe:	2117      	movs	r1, #23
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]


  if (hspi->State != HAL_SPI_STATE_READY)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	225d      	movs	r2, #93	@ 0x5d
 8002bca:	5c9b      	ldrb	r3, [r3, r2]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d003      	beq.n	8002bda <HAL_SPI_Receive_IT+0x2a>
  {
    errorcode = HAL_BUSY;
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	701a      	strb	r2, [r3, #0]
    goto error;
 8002bd8:	e09c      	b.n	8002d14 <HAL_SPI_Receive_IT+0x164>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d112      	bne.n	8002c08 <HAL_SPI_Receive_IT+0x58>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	2382      	movs	r3, #130	@ 0x82
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d10c      	bne.n	8002c08 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	225d      	movs	r2, #93	@ 0x5d
 8002bf2:	2104      	movs	r1, #4
 8002bf4:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002bf6:	1dbb      	adds	r3, r7, #6
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 f898 	bl	8002d34 <HAL_SPI_TransmitReceive_IT>
 8002c04:	0003      	movs	r3, r0
 8002c06:	e088      	b.n	8002d1a <HAL_SPI_Receive_IT+0x16a>
  }


  if ((pData == NULL) || (Size == 0U))
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_SPI_Receive_IT+0x66>
 8002c0e:	1dbb      	adds	r3, r7, #6
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d104      	bne.n	8002c20 <HAL_SPI_Receive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8002c16:	2317      	movs	r3, #23
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c1e:	e079      	b.n	8002d14 <HAL_SPI_Receive_IT+0x164>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	225c      	movs	r2, #92	@ 0x5c
 8002c24:	5c9b      	ldrb	r3, [r3, r2]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_SPI_Receive_IT+0x7e>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e075      	b.n	8002d1a <HAL_SPI_Receive_IT+0x16a>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	225c      	movs	r2, #92	@ 0x5c
 8002c32:	2101      	movs	r1, #1
 8002c34:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	225d      	movs	r2, #93	@ 0x5d
 8002c3a:	2104      	movs	r1, #4
 8002c3c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1dba      	adds	r2, r7, #6
 8002c4e:	2144      	movs	r1, #68	@ 0x44
 8002c50:	8812      	ldrh	r2, [r2, #0]
 8002c52:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1dba      	adds	r2, r7, #6
 8002c58:	2146      	movs	r1, #70	@ 0x46
 8002c5a:	8812      	ldrh	r2, [r2, #0]
 8002c5c:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	23e0      	movs	r3, #224	@ 0xe0
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d90b      	bls.n	8002c9a <HAL_SPI_Receive_IT+0xea>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4925      	ldr	r1, [pc, #148]	@ (8002d24 <HAL_SPI_Receive_IT+0x174>)
 8002c8e:	400a      	ands	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a24      	ldr	r2, [pc, #144]	@ (8002d28 <HAL_SPI_Receive_IT+0x178>)
 8002c96:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002c98:	e00b      	b.n	8002cb2 <HAL_SPI_Receive_IT+0x102>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2180      	movs	r1, #128	@ 0x80
 8002ca6:	0149      	lsls	r1, r1, #5
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4a1f      	ldr	r2, [pc, #124]	@ (8002d2c <HAL_SPI_Receive_IT+0x17c>)
 8002cb0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	2380      	movs	r3, #128	@ 0x80
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d10f      	bne.n	8002cde <HAL_SPI_Receive_IT+0x12e>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2140      	movs	r1, #64	@ 0x40
 8002cca:	438a      	bics	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4915      	ldr	r1, [pc, #84]	@ (8002d30 <HAL_SPI_Receive_IT+0x180>)
 8002cda:	400a      	ands	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2240      	movs	r2, #64	@ 0x40
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b40      	cmp	r3, #64	@ 0x40
 8002cea:	d007      	beq.n	8002cfc <HAL_SPI_Receive_IT+0x14c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2140      	movs	r1, #64	@ 0x40
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	225c      	movs	r2, #92	@ 0x5c
 8002d00:	2100      	movs	r1, #0
 8002d02:	5499      	strb	r1, [r3, r2]
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2160      	movs	r1, #96	@ 0x60
 8002d10:	430a      	orrs	r2, r1
 8002d12:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002d14:	2317      	movs	r3, #23
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	781b      	ldrb	r3, [r3, #0]
}
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b006      	add	sp, #24
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	ffffefff 	.word	0xffffefff
 8002d28:	08003357 	.word	0x08003357
 8002d2c:	08003305 	.word	0x08003305
 8002d30:	ffffbfff 	.word	0xffffbfff

08002d34 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	001a      	movs	r2, r3
 8002d42:	1cbb      	adds	r3, r7, #2
 8002d44:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d46:	2317      	movs	r3, #23
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d4e:	2016      	movs	r0, #22
 8002d50:	183b      	adds	r3, r7, r0
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	215d      	movs	r1, #93	@ 0x5d
 8002d56:	5c52      	ldrb	r2, [r2, r1]
 8002d58:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d60:	0001      	movs	r1, r0
 8002d62:	187b      	adds	r3, r7, r1
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d011      	beq.n	8002d8e <HAL_SPI_TransmitReceive_IT+0x5a>
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	2382      	movs	r3, #130	@ 0x82
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d107      	bne.n	8002d84 <HAL_SPI_TransmitReceive_IT+0x50>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d103      	bne.n	8002d84 <HAL_SPI_TransmitReceive_IT+0x50>
 8002d7c:	187b      	adds	r3, r7, r1
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d004      	beq.n	8002d8e <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 8002d84:	2317      	movs	r3, #23
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	2202      	movs	r2, #2
 8002d8a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d8c:	e088      	b.n	8002ea0 <HAL_SPI_TransmitReceive_IT+0x16c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d006      	beq.n	8002da2 <HAL_SPI_TransmitReceive_IT+0x6e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_SPI_TransmitReceive_IT+0x6e>
 8002d9a:	1cbb      	adds	r3, r7, #2
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d104      	bne.n	8002dac <HAL_SPI_TransmitReceive_IT+0x78>
  {
    errorcode = HAL_ERROR;
 8002da2:	2317      	movs	r3, #23
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	2201      	movs	r2, #1
 8002da8:	701a      	strb	r2, [r3, #0]
    goto error;
 8002daa:	e079      	b.n	8002ea0 <HAL_SPI_TransmitReceive_IT+0x16c>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	225c      	movs	r2, #92	@ 0x5c
 8002db0:	5c9b      	ldrb	r3, [r3, r2]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_SPI_TransmitReceive_IT+0x86>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e075      	b.n	8002ea6 <HAL_SPI_TransmitReceive_IT+0x172>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	225c      	movs	r2, #92	@ 0x5c
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	225d      	movs	r2, #93	@ 0x5d
 8002dc6:	5c9b      	ldrb	r3, [r3, r2]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d003      	beq.n	8002dd6 <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	225d      	movs	r2, #93	@ 0x5d
 8002dd2:	2105      	movs	r1, #5
 8002dd4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1cba      	adds	r2, r7, #2
 8002de6:	8812      	ldrh	r2, [r2, #0]
 8002de8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1cba      	adds	r2, r7, #2
 8002dee:	8812      	ldrh	r2, [r2, #0]
 8002df0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	1cba      	adds	r2, r7, #2
 8002dfc:	2144      	movs	r1, #68	@ 0x44
 8002dfe:	8812      	ldrh	r2, [r2, #0]
 8002e00:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1cba      	adds	r2, r7, #2
 8002e06:	2146      	movs	r1, #70	@ 0x46
 8002e08:	8812      	ldrh	r2, [r2, #0]
 8002e0a:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	23e0      	movs	r3, #224	@ 0xe0
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d906      	bls.n	8002e26 <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a25      	ldr	r2, [pc, #148]	@ (8002eb0 <HAL_SPI_TransmitReceive_IT+0x17c>)
 8002e1c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4a24      	ldr	r2, [pc, #144]	@ (8002eb4 <HAL_SPI_TransmitReceive_IT+0x180>)
 8002e22:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e24:	e005      	b.n	8002e32 <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4a23      	ldr	r2, [pc, #140]	@ (8002eb8 <HAL_SPI_TransmitReceive_IT+0x184>)
 8002e2a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4a23      	ldr	r2, [pc, #140]	@ (8002ebc <HAL_SPI_TransmitReceive_IT+0x188>)
 8002e30:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	23e0      	movs	r3, #224	@ 0xe0
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d803      	bhi.n	8002e46 <HAL_SPI_TransmitReceive_IT+0x112>
 8002e3e:	1cbb      	adds	r3, r7, #2
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d908      	bls.n	8002e58 <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	491b      	ldr	r1, [pc, #108]	@ (8002ec0 <HAL_SPI_TransmitReceive_IT+0x18c>)
 8002e52:	400a      	ands	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	e008      	b.n	8002e6a <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2180      	movs	r1, #128	@ 0x80
 8002e64:	0149      	lsls	r1, r1, #5
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2240      	movs	r2, #64	@ 0x40
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b40      	cmp	r3, #64	@ 0x40
 8002e76:	d007      	beq.n	8002e88 <HAL_SPI_TransmitReceive_IT+0x154>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2140      	movs	r1, #64	@ 0x40
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	225c      	movs	r2, #92	@ 0x5c
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	5499      	strb	r1, [r3, r2]
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	21e0      	movs	r1, #224	@ 0xe0
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002ea0:	2317      	movs	r3, #23
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	781b      	ldrb	r3, [r3, #0]
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b006      	add	sp, #24
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	0800323b 	.word	0x0800323b
 8002eb4:	080032a3 	.word	0x080032a3
 8002eb8:	080030e5 	.word	0x080030e5
 8002ebc:	080031a7 	.word	0x080031a7
 8002ec0:	ffffefff 	.word	0xffffefff

08002ec4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	2240      	movs	r2, #64	@ 0x40
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d10d      	bne.n	8002f00 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002eea:	d009      	beq.n	8002f00 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	2240      	movs	r2, #64	@ 0x40
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d005      	beq.n	8002f00 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	0010      	movs	r0, r2
 8002efc:	4798      	blx	r3
    return;
 8002efe:	e0c5      	b.n	800308c <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	2202      	movs	r2, #2
 8002f04:	4013      	ands	r3, r2
 8002f06:	d009      	beq.n	8002f1c <HAL_SPI_IRQHandler+0x58>
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	2280      	movs	r2, #128	@ 0x80
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d005      	beq.n	8002f1c <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	0010      	movs	r0, r2
 8002f18:	4798      	blx	r3
    return;
 8002f1a:	e0b7      	b.n	800308c <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	4013      	ands	r3, r2
 8002f22:	d109      	bne.n	8002f38 <HAL_SPI_IRQHandler+0x74>
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	2240      	movs	r2, #64	@ 0x40
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d105      	bne.n	8002f38 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	2380      	movs	r3, #128	@ 0x80
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4013      	ands	r3, r2
 8002f34:	d100      	bne.n	8002f38 <HAL_SPI_IRQHandler+0x74>
 8002f36:	e0a9      	b.n	800308c <HAL_SPI_IRQHandler+0x1c8>
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d100      	bne.n	8002f42 <HAL_SPI_IRQHandler+0x7e>
 8002f40:	e0a4      	b.n	800308c <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2240      	movs	r2, #64	@ 0x40
 8002f46:	4013      	ands	r3, r2
 8002f48:	d023      	beq.n	8002f92 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	225d      	movs	r2, #93	@ 0x5d
 8002f4e:	5c9b      	ldrb	r3, [r3, r2]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d011      	beq.n	8002f7a <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	e00b      	b.n	8002f92 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	693b      	ldr	r3, [r7, #16]
        return;
 8002f90:	e07c      	b.n	800308c <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2220      	movs	r2, #32
 8002f96:	4013      	ands	r3, r2
 8002f98:	d014      	beq.n	8002fc4 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2140      	movs	r1, #64	@ 0x40
 8002fbe:	438a      	bics	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	2380      	movs	r3, #128	@ 0x80
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d00c      	beq.n	8002fe8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d04c      	beq.n	800308a <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	21e0      	movs	r1, #224	@ 0xe0
 8002ffc:	438a      	bics	r2, r1
 8002ffe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	225d      	movs	r2, #93	@ 0x5d
 8003004:	2101      	movs	r1, #1
 8003006:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	2202      	movs	r2, #2
 800300c:	4013      	ands	r3, r2
 800300e:	d103      	bne.n	8003018 <HAL_SPI_IRQHandler+0x154>
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2201      	movs	r2, #1
 8003014:	4013      	ands	r3, r2
 8003016:	d032      	beq.n	800307e <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2103      	movs	r1, #3
 8003024:	438a      	bics	r2, r1
 8003026:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302c:	2b00      	cmp	r3, #0
 800302e:	d010      	beq.n	8003052 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003034:	4a17      	ldr	r2, [pc, #92]	@ (8003094 <HAL_SPI_IRQHandler+0x1d0>)
 8003036:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303c:	0018      	movs	r0, r3
 800303e:	f7fe faeb 	bl	8001618 <HAL_DMA_Abort_IT>
 8003042:	1e03      	subs	r3, r0, #0
 8003044:	d005      	beq.n	8003052 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304a:	2240      	movs	r2, #64	@ 0x40
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003056:	2b00      	cmp	r3, #0
 8003058:	d016      	beq.n	8003088 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305e:	4a0d      	ldr	r2, [pc, #52]	@ (8003094 <HAL_SPI_IRQHandler+0x1d0>)
 8003060:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003066:	0018      	movs	r0, r3
 8003068:	f7fe fad6 	bl	8001618 <HAL_DMA_Abort_IT>
 800306c:	1e03      	subs	r3, r0, #0
 800306e:	d00b      	beq.n	8003088 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003074:	2240      	movs	r2, #64	@ 0x40
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800307c:	e004      	b.n	8003088 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	0018      	movs	r0, r3
 8003082:	f000 f811 	bl	80030a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003086:	e000      	b.n	800308a <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8003088:	46c0      	nop			@ (mov r8, r8)
    return;
 800308a:	46c0      	nop			@ (mov r8, r8)
  }
}
 800308c:	46bd      	mov	sp, r7
 800308e:	b008      	add	sp, #32
 8003090:	bd80      	pop	{r7, pc}
 8003092:	46c0      	nop			@ (mov r8, r8)
 8003094:	080030b9 	.word	0x080030b9

08003098 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80030a0:	46c0      	nop			@ (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80030b0:	46c0      	nop			@ (mov r8, r8)
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b002      	add	sp, #8
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2246      	movs	r2, #70	@ 0x46
 80030ca:	2100      	movs	r1, #0
 80030cc:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	0018      	movs	r0, r3
 80030d8:	f7ff ffe6 	bl	80030a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030dc:	46c0      	nop			@ (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b004      	add	sp, #16
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2246      	movs	r2, #70	@ 0x46
 80030f0:	5a9b      	ldrh	r3, [r3, r2]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d924      	bls.n	8003142 <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	b292      	uxth	r2, r2
 8003104:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	1c9a      	adds	r2, r3, #2
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2246      	movs	r2, #70	@ 0x46
 8003114:	5a9b      	ldrh	r3, [r3, r2]
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b02      	subs	r3, #2
 800311a:	b299      	uxth	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2246      	movs	r2, #70	@ 0x46
 8003120:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2246      	movs	r2, #70	@ 0x46
 8003126:	5a9b      	ldrh	r3, [r3, r2]
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d120      	bne.n	8003170 <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2180      	movs	r1, #128	@ 0x80
 800313a:	0149      	lsls	r1, r1, #5
 800313c:	430a      	orrs	r2, r1
 800313e:	605a      	str	r2, [r3, #4]
 8003140:	e016      	b.n	8003170 <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	330c      	adds	r3, #12
 8003148:	001a      	movs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314e:	7812      	ldrb	r2, [r2, #0]
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2246      	movs	r2, #70	@ 0x46
 8003162:	5a9b      	ldrh	r3, [r3, r2]
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b299      	uxth	r1, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2246      	movs	r2, #70	@ 0x46
 800316e:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2246      	movs	r2, #70	@ 0x46
 8003174:	5a9b      	ldrh	r3, [r3, r2]
 8003176:	b29b      	uxth	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d110      	bne.n	800319e <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2160      	movs	r1, #96	@ 0x60
 8003188:	438a      	bics	r2, r1
 800318a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d103      	bne.n	800319e <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	0018      	movs	r0, r3
 800319a:	f000 fad7 	bl	800374c <SPI_CloseRxTx_ISR>
    }
  }
}
 800319e:	46c0      	nop			@ (mov r8, r8)
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b002      	add	sp, #8
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d912      	bls.n	80031de <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031bc:	881a      	ldrh	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c8:	1c9a      	adds	r2, r3, #2
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b02      	subs	r3, #2
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031dc:	e012      	b.n	8003204 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	330c      	adds	r3, #12
 80031e8:	7812      	ldrb	r2, [r2, #0]
 80031ea:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d111      	bne.n	8003232 <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2180      	movs	r1, #128	@ 0x80
 800321a:	438a      	bics	r2, r1
 800321c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2246      	movs	r2, #70	@ 0x46
 8003222:	5a9b      	ldrh	r3, [r3, r2]
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	0018      	movs	r0, r3
 800322e:	f000 fa8d 	bl	800374c <SPI_CloseRxTx_ISR>
    }
  }
}
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	46bd      	mov	sp, r7
 8003236:	b002      	add	sp, #8
 8003238:	bd80      	pop	{r7, pc}

0800323a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324c:	b292      	uxth	r2, r2
 800324e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	1c9a      	adds	r2, r3, #2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2246      	movs	r2, #70	@ 0x46
 800325e:	5a9b      	ldrh	r3, [r3, r2]
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b299      	uxth	r1, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2246      	movs	r2, #70	@ 0x46
 800326a:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2246      	movs	r2, #70	@ 0x46
 8003270:	5a9b      	ldrh	r3, [r3, r2]
 8003272:	b29b      	uxth	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d110      	bne.n	800329a <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2140      	movs	r1, #64	@ 0x40
 8003284:	438a      	bics	r2, r1
 8003286:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d103      	bne.n	800329a <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	0018      	movs	r0, r3
 8003296:	f000 fa59 	bl	800374c <SPI_CloseRxTx_ISR>
    }
  }
}
 800329a:	46c0      	nop			@ (mov r8, r8)
 800329c:	46bd      	mov	sp, r7
 800329e:	b002      	add	sp, #8
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ae:	881a      	ldrh	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ba:	1c9a      	adds	r2, r3, #2
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d111      	bne.n	80032fc <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2180      	movs	r1, #128	@ 0x80
 80032e4:	438a      	bics	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2246      	movs	r2, #70	@ 0x46
 80032ec:	5a9b      	ldrh	r3, [r3, r2]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d103      	bne.n	80032fc <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 fa28 	bl	800374c <SPI_CloseRxTx_ISR>
    }
  }
}
 80032fc:	46c0      	nop			@ (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}

08003304 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	330c      	adds	r3, #12
 8003312:	001a      	movs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	7812      	ldrb	r2, [r2, #0]
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2246      	movs	r2, #70	@ 0x46
 800332c:	5a9b      	ldrh	r3, [r3, r2]
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b299      	uxth	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2246      	movs	r2, #70	@ 0x46
 8003338:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2246      	movs	r2, #70	@ 0x46
 800333e:	5a9b      	ldrh	r3, [r3, r2]
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d103      	bne.n	800334e <SPI_RxISR_8BIT+0x4a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	0018      	movs	r0, r3
 800334a:	f000 fa45 	bl	80037d8 <SPI_CloseRx_ISR>
  }
}
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	46bd      	mov	sp, r7
 8003352:	b002      	add	sp, #8
 8003354:	bd80      	pop	{r7, pc}

08003356 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003368:	b292      	uxth	r2, r2
 800336a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	1c9a      	adds	r2, r3, #2
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2246      	movs	r2, #70	@ 0x46
 800337a:	5a9b      	ldrh	r3, [r3, r2]
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b299      	uxth	r1, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2246      	movs	r2, #70	@ 0x46
 8003386:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2246      	movs	r2, #70	@ 0x46
 800338c:	5a9b      	ldrh	r3, [r3, r2]
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d103      	bne.n	800339c <SPI_RxISR_16BIT+0x46>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	0018      	movs	r0, r3
 8003398:	f000 fa1e 	bl	80037d8 <SPI_CloseRx_ISR>
  }
}
 800339c:	46c0      	nop			@ (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	b002      	add	sp, #8
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	1dfb      	adds	r3, r7, #7
 80033b2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033b4:	f7fd ffe6 	bl	8001384 <HAL_GetTick>
 80033b8:	0002      	movs	r2, r0
 80033ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	18d3      	adds	r3, r2, r3
 80033c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033c4:	f7fd ffde 	bl	8001384 <HAL_GetTick>
 80033c8:	0003      	movs	r3, r0
 80033ca:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033cc:	4b3a      	ldr	r3, [pc, #232]	@ (80034b8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	015b      	lsls	r3, r3, #5
 80033d2:	0d1b      	lsrs	r3, r3, #20
 80033d4:	69fa      	ldr	r2, [r7, #28]
 80033d6:	4353      	muls	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033da:	e058      	b.n	800348e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	3301      	adds	r3, #1
 80033e0:	d055      	beq.n	800348e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033e2:	f7fd ffcf 	bl	8001384 <HAL_GetTick>
 80033e6:	0002      	movs	r2, r0
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d902      	bls.n	80033f8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d142      	bne.n	800347e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	21e0      	movs	r1, #224	@ 0xe0
 8003404:	438a      	bics	r2, r1
 8003406:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	2382      	movs	r3, #130	@ 0x82
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	429a      	cmp	r2, r3
 8003412:	d113      	bne.n	800343c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	2380      	movs	r3, #128	@ 0x80
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	429a      	cmp	r2, r3
 800341e:	d005      	beq.n	800342c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	2380      	movs	r3, #128	@ 0x80
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	429a      	cmp	r2, r3
 800342a:	d107      	bne.n	800343c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2140      	movs	r1, #64	@ 0x40
 8003438:	438a      	bics	r2, r1
 800343a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003440:	2380      	movs	r3, #128	@ 0x80
 8003442:	019b      	lsls	r3, r3, #6
 8003444:	429a      	cmp	r2, r3
 8003446:	d110      	bne.n	800346a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	491a      	ldr	r1, [pc, #104]	@ (80034bc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003454:	400a      	ands	r2, r1
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2180      	movs	r1, #128	@ 0x80
 8003464:	0189      	lsls	r1, r1, #6
 8003466:	430a      	orrs	r2, r1
 8003468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	225d      	movs	r2, #93	@ 0x5d
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	225c      	movs	r2, #92	@ 0x5c
 8003476:	2100      	movs	r1, #0
 8003478:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e017      	b.n	80034ae <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	3b01      	subs	r3, #1
 800348c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	4013      	ands	r3, r2
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	425a      	negs	r2, r3
 800349e:	4153      	adcs	r3, r2
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	001a      	movs	r2, r3
 80034a4:	1dfb      	adds	r3, r7, #7
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d197      	bne.n	80033dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b008      	add	sp, #32
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	20000064 	.word	0x20000064
 80034bc:	ffffdfff 	.word	0xffffdfff

080034c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08a      	sub	sp, #40	@ 0x28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80034ce:	2317      	movs	r3, #23
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80034d6:	f7fd ff55 	bl	8001384 <HAL_GetTick>
 80034da:	0002      	movs	r2, r0
 80034dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	18d3      	adds	r3, r2, r3
 80034e4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80034e6:	f7fd ff4d 	bl	8001384 <HAL_GetTick>
 80034ea:	0003      	movs	r3, r0
 80034ec:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	330c      	adds	r3, #12
 80034f4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80034f6:	4b41      	ldr	r3, [pc, #260]	@ (80035fc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	0013      	movs	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	189b      	adds	r3, r3, r2
 8003500:	00da      	lsls	r2, r3, #3
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	0d1b      	lsrs	r3, r3, #20
 8003506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003508:	4353      	muls	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800350c:	e068      	b.n	80035e0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	23c0      	movs	r3, #192	@ 0xc0
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	429a      	cmp	r2, r3
 8003516:	d10a      	bne.n	800352e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d107      	bne.n	800352e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	b2da      	uxtb	r2, r3
 8003524:	2117      	movs	r1, #23
 8003526:	187b      	adds	r3, r7, r1
 8003528:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800352a:	187b      	adds	r3, r7, r1
 800352c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	d055      	beq.n	80035e0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003534:	f7fd ff26 	bl	8001384 <HAL_GetTick>
 8003538:	0002      	movs	r2, r0
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003540:	429a      	cmp	r2, r3
 8003542:	d902      	bls.n	800354a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003546:	2b00      	cmp	r3, #0
 8003548:	d142      	bne.n	80035d0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	21e0      	movs	r1, #224	@ 0xe0
 8003556:	438a      	bics	r2, r1
 8003558:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	2382      	movs	r3, #130	@ 0x82
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	429a      	cmp	r2, r3
 8003564:	d113      	bne.n	800358e <SPI_WaitFifoStateUntilTimeout+0xce>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	2380      	movs	r3, #128	@ 0x80
 800356c:	021b      	lsls	r3, r3, #8
 800356e:	429a      	cmp	r2, r3
 8003570:	d005      	beq.n	800357e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	2380      	movs	r3, #128	@ 0x80
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	429a      	cmp	r2, r3
 800357c:	d107      	bne.n	800358e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2140      	movs	r1, #64	@ 0x40
 800358a:	438a      	bics	r2, r1
 800358c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003592:	2380      	movs	r3, #128	@ 0x80
 8003594:	019b      	lsls	r3, r3, #6
 8003596:	429a      	cmp	r2, r3
 8003598:	d110      	bne.n	80035bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4916      	ldr	r1, [pc, #88]	@ (8003600 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80035a6:	400a      	ands	r2, r1
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2180      	movs	r1, #128	@ 0x80
 80035b6:	0189      	lsls	r1, r1, #6
 80035b8:	430a      	orrs	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	225d      	movs	r2, #93	@ 0x5d
 80035c0:	2101      	movs	r1, #1
 80035c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	225c      	movs	r2, #92	@ 0x5c
 80035c8:	2100      	movs	r1, #0
 80035ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e010      	b.n	80035f2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	3b01      	subs	r3, #1
 80035de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d18e      	bne.n	800350e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	0018      	movs	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	b00a      	add	sp, #40	@ 0x28
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	20000064 	.word	0x20000064
 8003600:	ffffdfff 	.word	0xffffdfff

08003604 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	2382      	movs	r3, #130	@ 0x82
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	429a      	cmp	r2, r3
 800361a:	d113      	bne.n	8003644 <SPI_EndRxTransaction+0x40>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	2380      	movs	r3, #128	@ 0x80
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	429a      	cmp	r2, r3
 8003626:	d005      	beq.n	8003634 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	2380      	movs	r3, #128	@ 0x80
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	429a      	cmp	r2, r3
 8003632:	d107      	bne.n	8003644 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2140      	movs	r1, #64	@ 0x40
 8003640:	438a      	bics	r2, r1
 8003642:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	0013      	movs	r3, r2
 800364e:	2200      	movs	r2, #0
 8003650:	2180      	movs	r1, #128	@ 0x80
 8003652:	f7ff fea7 	bl	80033a4 <SPI_WaitFlagStateUntilTimeout>
 8003656:	1e03      	subs	r3, r0, #0
 8003658:	d007      	beq.n	800366a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800365e:	2220      	movs	r2, #32
 8003660:	431a      	orrs	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e026      	b.n	80036b8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	2382      	movs	r3, #130	@ 0x82
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	429a      	cmp	r2, r3
 8003674:	d11f      	bne.n	80036b6 <SPI_EndRxTransaction+0xb2>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	2380      	movs	r3, #128	@ 0x80
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	429a      	cmp	r2, r3
 8003680:	d005      	beq.n	800368e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	2380      	movs	r3, #128	@ 0x80
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	429a      	cmp	r2, r3
 800368c:	d113      	bne.n	80036b6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	23c0      	movs	r3, #192	@ 0xc0
 8003692:	00d9      	lsls	r1, r3, #3
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	0013      	movs	r3, r2
 800369c:	2200      	movs	r2, #0
 800369e:	f7ff ff0f 	bl	80034c0 <SPI_WaitFifoStateUntilTimeout>
 80036a2:	1e03      	subs	r3, r0, #0
 80036a4:	d007      	beq.n	80036b6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036aa:	2220      	movs	r2, #32
 80036ac:	431a      	orrs	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e000      	b.n	80036b8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b004      	add	sp, #16
 80036be:	bd80      	pop	{r7, pc}

080036c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	23c0      	movs	r3, #192	@ 0xc0
 80036d0:	0159      	lsls	r1, r3, #5
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	0013      	movs	r3, r2
 80036da:	2200      	movs	r2, #0
 80036dc:	f7ff fef0 	bl	80034c0 <SPI_WaitFifoStateUntilTimeout>
 80036e0:	1e03      	subs	r3, r0, #0
 80036e2:	d007      	beq.n	80036f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e8:	2220      	movs	r2, #32
 80036ea:	431a      	orrs	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e027      	b.n	8003744 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	0013      	movs	r3, r2
 80036fe:	2200      	movs	r2, #0
 8003700:	2180      	movs	r1, #128	@ 0x80
 8003702:	f7ff fe4f 	bl	80033a4 <SPI_WaitFlagStateUntilTimeout>
 8003706:	1e03      	subs	r3, r0, #0
 8003708:	d007      	beq.n	800371a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800370e:	2220      	movs	r2, #32
 8003710:	431a      	orrs	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e014      	b.n	8003744 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	23c0      	movs	r3, #192	@ 0xc0
 800371e:	00d9      	lsls	r1, r3, #3
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	0013      	movs	r3, r2
 8003728:	2200      	movs	r2, #0
 800372a:	f7ff fec9 	bl	80034c0 <SPI_WaitFifoStateUntilTimeout>
 800372e:	1e03      	subs	r3, r0, #0
 8003730:	d007      	beq.n	8003742 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003736:	2220      	movs	r2, #32
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e000      	b.n	8003744 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	0018      	movs	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	b004      	add	sp, #16
 800374a:	bd80      	pop	{r7, pc}

0800374c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003754:	f7fd fe16 	bl	8001384 <HAL_GetTick>
 8003758:	0003      	movs	r3, r0
 800375a:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2120      	movs	r1, #32
 8003768:	438a      	bics	r2, r1
 800376a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2164      	movs	r1, #100	@ 0x64
 8003772:	0018      	movs	r0, r3
 8003774:	f7ff ffa4 	bl	80036c0 <SPI_EndRxTxTransaction>
 8003778:	1e03      	subs	r3, r0, #0
 800377a:	d005      	beq.n	8003788 <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003780:	2220      	movs	r2, #32
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378c:	2b00      	cmp	r3, #0
 800378e:	d117      	bne.n	80037c0 <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	225d      	movs	r2, #93	@ 0x5d
 8003794:	5c9b      	ldrb	r3, [r3, r2]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b04      	cmp	r3, #4
 800379a:	d108      	bne.n	80037ae <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	225d      	movs	r2, #93	@ 0x5d
 80037a0:	2101      	movs	r1, #1
 80037a2:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	0018      	movs	r0, r3
 80037a8:	f7fd fb5e 	bl	8000e68 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80037ac:	e010      	b.n	80037d0 <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	225d      	movs	r2, #93	@ 0x5d
 80037b2:	2101      	movs	r1, #1
 80037b4:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7ff fc6d 	bl	8003098 <HAL_SPI_TxRxCpltCallback>
}
 80037be:	e007      	b.n	80037d0 <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	225d      	movs	r2, #93	@ 0x5d
 80037c4:	2101      	movs	r1, #1
 80037c6:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	0018      	movs	r0, r3
 80037cc:	f7ff fc6c 	bl	80030a8 <HAL_SPI_ErrorCallback>
}
 80037d0:	46c0      	nop			@ (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b004      	add	sp, #16
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2160      	movs	r1, #96	@ 0x60
 80037ec:	438a      	bics	r2, r1
 80037ee:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80037f0:	f7fd fdc8 	bl	8001384 <HAL_GetTick>
 80037f4:	0002      	movs	r2, r0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2164      	movs	r1, #100	@ 0x64
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7ff ff02 	bl	8003604 <SPI_EndRxTransaction>
 8003800:	1e03      	subs	r3, r0, #0
 8003802:	d005      	beq.n	8003810 <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003808:	2220      	movs	r2, #32
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	225d      	movs	r2, #93	@ 0x5d
 8003814:	2101      	movs	r1, #1
 8003816:	5499      	strb	r1, [r3, r2]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	0018      	movs	r0, r3
 8003824:	f7fd fb20 	bl	8000e68 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003828:	e003      	b.n	8003832 <SPI_CloseRx_ISR+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	0018      	movs	r0, r3
 800382e:	f7ff fc3b 	bl	80030a8 <HAL_SPI_ErrorCallback>
}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	46bd      	mov	sp, r7
 8003836:	b002      	add	sp, #8
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e046      	b.n	80038dc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2288      	movs	r2, #136	@ 0x88
 8003852:	589b      	ldr	r3, [r3, r2]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d107      	bne.n	8003868 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2284      	movs	r2, #132	@ 0x84
 800385c:	2100      	movs	r1, #0
 800385e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	0018      	movs	r0, r3
 8003864:	f7fd fc12 	bl	800108c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2288      	movs	r2, #136	@ 0x88
 800386c:	2124      	movs	r1, #36	@ 0x24
 800386e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2101      	movs	r1, #1
 800387c:	438a      	bics	r2, r1
 800387e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	0018      	movs	r0, r3
 800388c:	f000 ff2e 	bl	80046ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	0018      	movs	r0, r3
 8003894:	f000 fc6c 	bl	8004170 <UART_SetConfig>
 8003898:	0003      	movs	r3, r0
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e01c      	b.n	80038dc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	490d      	ldr	r1, [pc, #52]	@ (80038e4 <HAL_UART_Init+0xa8>)
 80038ae:	400a      	ands	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	212a      	movs	r1, #42	@ 0x2a
 80038be:	438a      	bics	r2, r1
 80038c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	430a      	orrs	r2, r1
 80038d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f000 ffbd 	bl	8004854 <UART_CheckIdleState>
 80038da:	0003      	movs	r3, r0
}
 80038dc:	0018      	movs	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	b002      	add	sp, #8
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	ffffb7ff 	.word	0xffffb7ff

080038e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	@ 0x28
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	1dbb      	adds	r3, r7, #6
 80038f6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2288      	movs	r2, #136	@ 0x88
 80038fc:	589b      	ldr	r3, [r3, r2]
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d000      	beq.n	8003904 <HAL_UART_Transmit+0x1c>
 8003902:	e090      	b.n	8003a26 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_UART_Transmit+0x2a>
 800390a:	1dbb      	adds	r3, r7, #6
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e088      	b.n	8003a28 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	2380      	movs	r3, #128	@ 0x80
 800391c:	015b      	lsls	r3, r3, #5
 800391e:	429a      	cmp	r2, r3
 8003920:	d109      	bne.n	8003936 <HAL_UART_Transmit+0x4e>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d105      	bne.n	8003936 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2201      	movs	r2, #1
 800392e:	4013      	ands	r3, r2
 8003930:	d001      	beq.n	8003936 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e078      	b.n	8003a28 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2290      	movs	r2, #144	@ 0x90
 800393a:	2100      	movs	r1, #0
 800393c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2288      	movs	r2, #136	@ 0x88
 8003942:	2121      	movs	r1, #33	@ 0x21
 8003944:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003946:	f7fd fd1d 	bl	8001384 <HAL_GetTick>
 800394a:	0003      	movs	r3, r0
 800394c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1dba      	adds	r2, r7, #6
 8003952:	2154      	movs	r1, #84	@ 0x54
 8003954:	8812      	ldrh	r2, [r2, #0]
 8003956:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1dba      	adds	r2, r7, #6
 800395c:	2156      	movs	r1, #86	@ 0x56
 800395e:	8812      	ldrh	r2, [r2, #0]
 8003960:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	2380      	movs	r3, #128	@ 0x80
 8003968:	015b      	lsls	r3, r3, #5
 800396a:	429a      	cmp	r2, r3
 800396c:	d108      	bne.n	8003980 <HAL_UART_Transmit+0x98>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d104      	bne.n	8003980 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	e003      	b.n	8003988 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003984:	2300      	movs	r3, #0
 8003986:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003988:	e030      	b.n	80039ec <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	0013      	movs	r3, r2
 8003994:	2200      	movs	r2, #0
 8003996:	2180      	movs	r1, #128	@ 0x80
 8003998:	f001 f806 	bl	80049a8 <UART_WaitOnFlagUntilTimeout>
 800399c:	1e03      	subs	r3, r0, #0
 800399e:	d005      	beq.n	80039ac <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2288      	movs	r2, #136	@ 0x88
 80039a4:	2120      	movs	r1, #32
 80039a6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e03d      	b.n	8003a28 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10b      	bne.n	80039ca <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	001a      	movs	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	05d2      	lsls	r2, r2, #23
 80039be:	0dd2      	lsrs	r2, r2, #23
 80039c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	3302      	adds	r3, #2
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	e007      	b.n	80039da <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	781a      	ldrb	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	3301      	adds	r3, #1
 80039d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2256      	movs	r2, #86	@ 0x56
 80039de:	5a9b      	ldrh	r3, [r3, r2]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b299      	uxth	r1, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2256      	movs	r2, #86	@ 0x56
 80039ea:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2256      	movs	r2, #86	@ 0x56
 80039f0:	5a9b      	ldrh	r3, [r3, r2]
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1c8      	bne.n	800398a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	0013      	movs	r3, r2
 8003a02:	2200      	movs	r2, #0
 8003a04:	2140      	movs	r1, #64	@ 0x40
 8003a06:	f000 ffcf 	bl	80049a8 <UART_WaitOnFlagUntilTimeout>
 8003a0a:	1e03      	subs	r3, r0, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2288      	movs	r2, #136	@ 0x88
 8003a12:	2120      	movs	r1, #32
 8003a14:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e006      	b.n	8003a28 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2288      	movs	r2, #136	@ 0x88
 8003a1e:	2120      	movs	r1, #32
 8003a20:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e000      	b.n	8003a28 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003a26:	2302      	movs	r3, #2
  }
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b008      	add	sp, #32
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	1dbb      	adds	r3, r7, #6
 8003a3c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	228c      	movs	r2, #140	@ 0x8c
 8003a42:	589b      	ldr	r3, [r3, r2]
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d14a      	bne.n	8003ade <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_UART_Receive_IT+0x26>
 8003a4e:	1dbb      	adds	r3, r7, #6
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e042      	b.n	8003ae0 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	2380      	movs	r3, #128	@ 0x80
 8003a60:	015b      	lsls	r3, r3, #5
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d109      	bne.n	8003a7a <HAL_UART_Receive_IT+0x4a>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d105      	bne.n	8003a7a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2201      	movs	r2, #1
 8003a72:	4013      	ands	r3, r2
 8003a74:	d001      	beq.n	8003a7a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e032      	b.n	8003ae0 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a18      	ldr	r2, [pc, #96]	@ (8003ae8 <HAL_UART_Receive_IT+0xb8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d020      	beq.n	8003acc <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	2380      	movs	r3, #128	@ 0x80
 8003a92:	041b      	lsls	r3, r3, #16
 8003a94:	4013      	ands	r3, r2
 8003a96:	d019      	beq.n	8003acc <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a98:	f3ef 8310 	mrs	r3, PRIMASK
 8003a9c:	613b      	str	r3, [r7, #16]
  return(result);
 8003a9e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f383 8810 	msr	PRIMASK, r3
}
 8003aac:	46c0      	nop			@ (mov r8, r8)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2180      	movs	r1, #128	@ 0x80
 8003aba:	04c9      	lsls	r1, r1, #19
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f383 8810 	msr	PRIMASK, r3
}
 8003aca:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003acc:	1dbb      	adds	r3, r7, #6
 8003ace:	881a      	ldrh	r2, [r3, #0]
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f000 ffd7 	bl	8004a88 <UART_Start_Receive_IT>
 8003ada:	0003      	movs	r3, r0
 8003adc:	e000      	b.n	8003ae0 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
  }
}
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b008      	add	sp, #32
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40008000 	.word	0x40008000

08003aec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aec:	b5b0      	push	{r4, r5, r7, lr}
 8003aee:	b0aa      	sub	sp, #168	@ 0xa8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	22a4      	movs	r2, #164	@ 0xa4
 8003afc:	18b9      	adds	r1, r7, r2
 8003afe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	20a0      	movs	r0, #160	@ 0xa0
 8003b08:	1839      	adds	r1, r7, r0
 8003b0a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	249c      	movs	r4, #156	@ 0x9c
 8003b14:	1939      	adds	r1, r7, r4
 8003b16:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b18:	0011      	movs	r1, r2
 8003b1a:	18bb      	adds	r3, r7, r2
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4aa2      	ldr	r2, [pc, #648]	@ (8003da8 <HAL_UART_IRQHandler+0x2bc>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	2298      	movs	r2, #152	@ 0x98
 8003b24:	18bd      	adds	r5, r7, r2
 8003b26:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003b28:	18bb      	adds	r3, r7, r2
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d11a      	bne.n	8003b66 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b30:	187b      	adds	r3, r7, r1
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2220      	movs	r2, #32
 8003b36:	4013      	ands	r3, r2
 8003b38:	d015      	beq.n	8003b66 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b3a:	183b      	adds	r3, r7, r0
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	4013      	ands	r3, r2
 8003b42:	d105      	bne.n	8003b50 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b44:	193b      	adds	r3, r7, r4
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	2380      	movs	r3, #128	@ 0x80
 8003b4a:	055b      	lsls	r3, r3, #21
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d00a      	beq.n	8003b66 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d100      	bne.n	8003b5a <HAL_UART_IRQHandler+0x6e>
 8003b58:	e2dc      	b.n	8004114 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	0010      	movs	r0, r2
 8003b62:	4798      	blx	r3
      }
      return;
 8003b64:	e2d6      	b.n	8004114 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b66:	2398      	movs	r3, #152	@ 0x98
 8003b68:	18fb      	adds	r3, r7, r3
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d100      	bne.n	8003b72 <HAL_UART_IRQHandler+0x86>
 8003b70:	e122      	b.n	8003db8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003b72:	239c      	movs	r3, #156	@ 0x9c
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a8c      	ldr	r2, [pc, #560]	@ (8003dac <HAL_UART_IRQHandler+0x2c0>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d106      	bne.n	8003b8c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003b7e:	23a0      	movs	r3, #160	@ 0xa0
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a8a      	ldr	r2, [pc, #552]	@ (8003db0 <HAL_UART_IRQHandler+0x2c4>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	d100      	bne.n	8003b8c <HAL_UART_IRQHandler+0xa0>
 8003b8a:	e115      	b.n	8003db8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b8c:	23a4      	movs	r3, #164	@ 0xa4
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2201      	movs	r2, #1
 8003b94:	4013      	ands	r3, r2
 8003b96:	d012      	beq.n	8003bbe <HAL_UART_IRQHandler+0xd2>
 8003b98:	23a0      	movs	r3, #160	@ 0xa0
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	2380      	movs	r3, #128	@ 0x80
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d00b      	beq.n	8003bbe <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2201      	movs	r2, #1
 8003bac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2290      	movs	r2, #144	@ 0x90
 8003bb2:	589b      	ldr	r3, [r3, r2]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2190      	movs	r1, #144	@ 0x90
 8003bbc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bbe:	23a4      	movs	r3, #164	@ 0xa4
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d011      	beq.n	8003bee <HAL_UART_IRQHandler+0x102>
 8003bca:	239c      	movs	r3, #156	@ 0x9c
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d00b      	beq.n	8003bee <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2290      	movs	r2, #144	@ 0x90
 8003be2:	589b      	ldr	r3, [r3, r2]
 8003be4:	2204      	movs	r2, #4
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2190      	movs	r1, #144	@ 0x90
 8003bec:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bee:	23a4      	movs	r3, #164	@ 0xa4
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	d011      	beq.n	8003c1e <HAL_UART_IRQHandler+0x132>
 8003bfa:	239c      	movs	r3, #156	@ 0x9c
 8003bfc:	18fb      	adds	r3, r7, r3
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2201      	movs	r2, #1
 8003c02:	4013      	ands	r3, r2
 8003c04:	d00b      	beq.n	8003c1e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2290      	movs	r2, #144	@ 0x90
 8003c12:	589b      	ldr	r3, [r3, r2]
 8003c14:	2202      	movs	r2, #2
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2190      	movs	r1, #144	@ 0x90
 8003c1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c1e:	23a4      	movs	r3, #164	@ 0xa4
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2208      	movs	r2, #8
 8003c26:	4013      	ands	r3, r2
 8003c28:	d017      	beq.n	8003c5a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c2a:	23a0      	movs	r3, #160	@ 0xa0
 8003c2c:	18fb      	adds	r3, r7, r3
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2220      	movs	r2, #32
 8003c32:	4013      	ands	r3, r2
 8003c34:	d105      	bne.n	8003c42 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003c36:	239c      	movs	r3, #156	@ 0x9c
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a5b      	ldr	r2, [pc, #364]	@ (8003dac <HAL_UART_IRQHandler+0x2c0>)
 8003c3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c40:	d00b      	beq.n	8003c5a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2208      	movs	r2, #8
 8003c48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2290      	movs	r2, #144	@ 0x90
 8003c4e:	589b      	ldr	r3, [r3, r2]
 8003c50:	2208      	movs	r2, #8
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2190      	movs	r1, #144	@ 0x90
 8003c58:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c5a:	23a4      	movs	r3, #164	@ 0xa4
 8003c5c:	18fb      	adds	r3, r7, r3
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	2380      	movs	r3, #128	@ 0x80
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	4013      	ands	r3, r2
 8003c66:	d013      	beq.n	8003c90 <HAL_UART_IRQHandler+0x1a4>
 8003c68:	23a0      	movs	r3, #160	@ 0xa0
 8003c6a:	18fb      	adds	r3, r7, r3
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	2380      	movs	r3, #128	@ 0x80
 8003c70:	04db      	lsls	r3, r3, #19
 8003c72:	4013      	ands	r3, r2
 8003c74:	d00c      	beq.n	8003c90 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2280      	movs	r2, #128	@ 0x80
 8003c7c:	0112      	lsls	r2, r2, #4
 8003c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2290      	movs	r2, #144	@ 0x90
 8003c84:	589b      	ldr	r3, [r3, r2]
 8003c86:	2220      	movs	r2, #32
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2190      	movs	r1, #144	@ 0x90
 8003c8e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2290      	movs	r2, #144	@ 0x90
 8003c94:	589b      	ldr	r3, [r3, r2]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d100      	bne.n	8003c9c <HAL_UART_IRQHandler+0x1b0>
 8003c9a:	e23d      	b.n	8004118 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c9c:	23a4      	movs	r3, #164	@ 0xa4
 8003c9e:	18fb      	adds	r3, r7, r3
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d015      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ca8:	23a0      	movs	r3, #160	@ 0xa0
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d106      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003cb4:	239c      	movs	r3, #156	@ 0x9c
 8003cb6:	18fb      	adds	r3, r7, r3
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	2380      	movs	r3, #128	@ 0x80
 8003cbc:	055b      	lsls	r3, r3, #21
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d008      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	0010      	movs	r0, r2
 8003cd2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2290      	movs	r2, #144	@ 0x90
 8003cd8:	589b      	ldr	r3, [r3, r2]
 8003cda:	2194      	movs	r1, #148	@ 0x94
 8003cdc:	187a      	adds	r2, r7, r1
 8003cde:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2240      	movs	r2, #64	@ 0x40
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b40      	cmp	r3, #64	@ 0x40
 8003cec:	d004      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cee:	187b      	adds	r3, r7, r1
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2228      	movs	r2, #40	@ 0x28
 8003cf4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cf6:	d04c      	beq.n	8003d92 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f000 ffe8 	bl	8004cd0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2240      	movs	r2, #64	@ 0x40
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b40      	cmp	r3, #64	@ 0x40
 8003d0c:	d13c      	bne.n	8003d88 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d12:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003d14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d16:	2090      	movs	r0, #144	@ 0x90
 8003d18:	183a      	adds	r2, r7, r0
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d22:	f383 8810 	msr	PRIMASK, r3
}
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2140      	movs	r1, #64	@ 0x40
 8003d34:	438a      	bics	r2, r1
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	183b      	adds	r3, r7, r0
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d40:	f383 8810 	msr	PRIMASK, r3
}
 8003d44:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2280      	movs	r2, #128	@ 0x80
 8003d4a:	589b      	ldr	r3, [r3, r2]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d016      	beq.n	8003d7e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2280      	movs	r2, #128	@ 0x80
 8003d54:	589b      	ldr	r3, [r3, r2]
 8003d56:	4a17      	ldr	r2, [pc, #92]	@ (8003db4 <HAL_UART_IRQHandler+0x2c8>)
 8003d58:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2280      	movs	r2, #128	@ 0x80
 8003d5e:	589b      	ldr	r3, [r3, r2]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7fd fc59 	bl	8001618 <HAL_DMA_Abort_IT>
 8003d66:	1e03      	subs	r3, r0, #0
 8003d68:	d01c      	beq.n	8003da4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2280      	movs	r2, #128	@ 0x80
 8003d6e:	589b      	ldr	r3, [r3, r2]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	2180      	movs	r1, #128	@ 0x80
 8003d76:	5852      	ldr	r2, [r2, r1]
 8003d78:	0010      	movs	r0, r2
 8003d7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7c:	e012      	b.n	8003da4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	0018      	movs	r0, r3
 8003d82:	f000 f9e1 	bl	8004148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d86:	e00d      	b.n	8003da4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f000 f9dc 	bl	8004148 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d90:	e008      	b.n	8003da4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	0018      	movs	r0, r3
 8003d96:	f000 f9d7 	bl	8004148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2290      	movs	r2, #144	@ 0x90
 8003d9e:	2100      	movs	r1, #0
 8003da0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003da2:	e1b9      	b.n	8004118 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da4:	46c0      	nop			@ (mov r8, r8)
    return;
 8003da6:	e1b7      	b.n	8004118 <HAL_UART_IRQHandler+0x62c>
 8003da8:	0000080f 	.word	0x0000080f
 8003dac:	10000001 	.word	0x10000001
 8003db0:	04000120 	.word	0x04000120
 8003db4:	08004d9d 	.word	0x08004d9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d000      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x2d6>
 8003dc0:	e13e      	b.n	8004040 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003dc2:	23a4      	movs	r3, #164	@ 0xa4
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2210      	movs	r2, #16
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d100      	bne.n	8003dd0 <HAL_UART_IRQHandler+0x2e4>
 8003dce:	e137      	b.n	8004040 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003dd0:	23a0      	movs	r3, #160	@ 0xa0
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2210      	movs	r2, #16
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d100      	bne.n	8003dde <HAL_UART_IRQHandler+0x2f2>
 8003ddc:	e130      	b.n	8004040 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2210      	movs	r2, #16
 8003de4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2240      	movs	r2, #64	@ 0x40
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b40      	cmp	r3, #64	@ 0x40
 8003df2:	d000      	beq.n	8003df6 <HAL_UART_IRQHandler+0x30a>
 8003df4:	e0a4      	b.n	8003f40 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2280      	movs	r2, #128	@ 0x80
 8003dfa:	589b      	ldr	r3, [r3, r2]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	217e      	movs	r1, #126	@ 0x7e
 8003e02:	187b      	adds	r3, r7, r1
 8003e04:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003e06:	187b      	adds	r3, r7, r1
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d100      	bne.n	8003e10 <HAL_UART_IRQHandler+0x324>
 8003e0e:	e185      	b.n	800411c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	225c      	movs	r2, #92	@ 0x5c
 8003e14:	5a9b      	ldrh	r3, [r3, r2]
 8003e16:	187a      	adds	r2, r7, r1
 8003e18:	8812      	ldrh	r2, [r2, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d300      	bcc.n	8003e20 <HAL_UART_IRQHandler+0x334>
 8003e1e:	e17d      	b.n	800411c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	187a      	adds	r2, r7, r1
 8003e24:	215e      	movs	r1, #94	@ 0x5e
 8003e26:	8812      	ldrh	r2, [r2, #0]
 8003e28:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2280      	movs	r2, #128	@ 0x80
 8003e2e:	589b      	ldr	r3, [r3, r2]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2220      	movs	r2, #32
 8003e36:	4013      	ands	r3, r2
 8003e38:	d170      	bne.n	8003f1c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e44:	2301      	movs	r3, #1
 8003e46:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4a:	f383 8810 	msr	PRIMASK, r3
}
 8003e4e:	46c0      	nop			@ (mov r8, r8)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	49b4      	ldr	r1, [pc, #720]	@ (800412c <HAL_UART_IRQHandler+0x640>)
 8003e5c:	400a      	ands	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e62:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e66:	f383 8810 	msr	PRIMASK, r3
}
 8003e6a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e74:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e76:	2301      	movs	r3, #1
 8003e78:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e7c:	f383 8810 	msr	PRIMASK, r3
}
 8003e80:	46c0      	nop			@ (mov r8, r8)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	438a      	bics	r2, r1
 8003e90:	609a      	str	r2, [r3, #8]
 8003e92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e94:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e98:	f383 8810 	msr	PRIMASK, r3
}
 8003e9c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003ea4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea6:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eae:	f383 8810 	msr	PRIMASK, r3
}
 8003eb2:	46c0      	nop			@ (mov r8, r8)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2140      	movs	r1, #64	@ 0x40
 8003ec0:	438a      	bics	r2, r1
 8003ec2:	609a      	str	r2, [r3, #8]
 8003ec4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ec6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003eca:	f383 8810 	msr	PRIMASK, r3
}
 8003ece:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	228c      	movs	r2, #140	@ 0x8c
 8003ed4:	2120      	movs	r1, #32
 8003ed6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ede:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ee8:	2301      	movs	r3, #1
 8003eea:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003eee:	f383 8810 	msr	PRIMASK, r3
}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2110      	movs	r1, #16
 8003f00:	438a      	bics	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f06:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f0a:	f383 8810 	msr	PRIMASK, r3
}
 8003f0e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2280      	movs	r2, #128	@ 0x80
 8003f14:	589b      	ldr	r3, [r3, r2]
 8003f16:	0018      	movs	r0, r3
 8003f18:	f7fd fb1c 	bl	8001554 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	225c      	movs	r2, #92	@ 0x5c
 8003f26:	5a9a      	ldrh	r2, [r3, r2]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	215e      	movs	r1, #94	@ 0x5e
 8003f2c:	5a5b      	ldrh	r3, [r3, r1]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	0011      	movs	r1, r2
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f000 f90d 	bl	8004158 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f3e:	e0ed      	b.n	800411c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	225c      	movs	r2, #92	@ 0x5c
 8003f44:	5a99      	ldrh	r1, [r3, r2]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	225e      	movs	r2, #94	@ 0x5e
 8003f4a:	5a9b      	ldrh	r3, [r3, r2]
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	208e      	movs	r0, #142	@ 0x8e
 8003f50:	183b      	adds	r3, r7, r0
 8003f52:	1a8a      	subs	r2, r1, r2
 8003f54:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	225e      	movs	r2, #94	@ 0x5e
 8003f5a:	5a9b      	ldrh	r3, [r3, r2]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d100      	bne.n	8003f64 <HAL_UART_IRQHandler+0x478>
 8003f62:	e0dd      	b.n	8004120 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003f64:	183b      	adds	r3, r7, r0
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d100      	bne.n	8003f6e <HAL_UART_IRQHandler+0x482>
 8003f6c:	e0d8      	b.n	8004120 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f72:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f74:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f76:	2488      	movs	r4, #136	@ 0x88
 8003f78:	193a      	adds	r2, r7, r4
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f383 8810 	msr	PRIMASK, r3
}
 8003f86:	46c0      	nop			@ (mov r8, r8)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4967      	ldr	r1, [pc, #412]	@ (8004130 <HAL_UART_IRQHandler+0x644>)
 8003f94:	400a      	ands	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	193b      	adds	r3, r7, r4
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f383 8810 	msr	PRIMASK, r3
}
 8003fa4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8003faa:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fac:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fae:	2484      	movs	r4, #132	@ 0x84
 8003fb0:	193a      	adds	r2, r7, r4
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f383 8810 	msr	PRIMASK, r3
}
 8003fbe:	46c0      	nop			@ (mov r8, r8)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	495a      	ldr	r1, [pc, #360]	@ (8004134 <HAL_UART_IRQHandler+0x648>)
 8003fcc:	400a      	ands	r2, r1
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	193b      	adds	r3, r7, r4
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	f383 8810 	msr	PRIMASK, r3
}
 8003fdc:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	228c      	movs	r2, #140	@ 0x8c
 8003fe2:	2120      	movs	r1, #32
 8003fe4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ffa:	2480      	movs	r4, #128	@ 0x80
 8003ffc:	193a      	adds	r2, r7, r4
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	2301      	movs	r3, #1
 8004002:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004006:	f383 8810 	msr	PRIMASK, r3
}
 800400a:	46c0      	nop			@ (mov r8, r8)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2110      	movs	r1, #16
 8004018:	438a      	bics	r2, r1
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	193b      	adds	r3, r7, r4
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004024:	f383 8810 	msr	PRIMASK, r3
}
 8004028:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004030:	183b      	adds	r3, r7, r0
 8004032:	881a      	ldrh	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	0011      	movs	r1, r2
 8004038:	0018      	movs	r0, r3
 800403a:	f000 f88d 	bl	8004158 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800403e:	e06f      	b.n	8004120 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004040:	23a4      	movs	r3, #164	@ 0xa4
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	2380      	movs	r3, #128	@ 0x80
 8004048:	035b      	lsls	r3, r3, #13
 800404a:	4013      	ands	r3, r2
 800404c:	d010      	beq.n	8004070 <HAL_UART_IRQHandler+0x584>
 800404e:	239c      	movs	r3, #156	@ 0x9c
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	2380      	movs	r3, #128	@ 0x80
 8004056:	03db      	lsls	r3, r3, #15
 8004058:	4013      	ands	r3, r2
 800405a:	d009      	beq.n	8004070 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2280      	movs	r2, #128	@ 0x80
 8004062:	0352      	lsls	r2, r2, #13
 8004064:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0018      	movs	r0, r3
 800406a:	f001 fbeb 	bl	8005844 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800406e:	e05a      	b.n	8004126 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004070:	23a4      	movs	r3, #164	@ 0xa4
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2280      	movs	r2, #128	@ 0x80
 8004078:	4013      	ands	r3, r2
 800407a:	d016      	beq.n	80040aa <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800407c:	23a0      	movs	r3, #160	@ 0xa0
 800407e:	18fb      	adds	r3, r7, r3
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2280      	movs	r2, #128	@ 0x80
 8004084:	4013      	ands	r3, r2
 8004086:	d106      	bne.n	8004096 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004088:	239c      	movs	r3, #156	@ 0x9c
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	2380      	movs	r3, #128	@ 0x80
 8004090:	041b      	lsls	r3, r3, #16
 8004092:	4013      	ands	r3, r2
 8004094:	d009      	beq.n	80040aa <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800409a:	2b00      	cmp	r3, #0
 800409c:	d042      	beq.n	8004124 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	0010      	movs	r0, r2
 80040a6:	4798      	blx	r3
    }
    return;
 80040a8:	e03c      	b.n	8004124 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040aa:	23a4      	movs	r3, #164	@ 0xa4
 80040ac:	18fb      	adds	r3, r7, r3
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2240      	movs	r2, #64	@ 0x40
 80040b2:	4013      	ands	r3, r2
 80040b4:	d00a      	beq.n	80040cc <HAL_UART_IRQHandler+0x5e0>
 80040b6:	23a0      	movs	r3, #160	@ 0xa0
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2240      	movs	r2, #64	@ 0x40
 80040be:	4013      	ands	r3, r2
 80040c0:	d004      	beq.n	80040cc <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	0018      	movs	r0, r3
 80040c6:	f000 fe80 	bl	8004dca <UART_EndTransmit_IT>
    return;
 80040ca:	e02c      	b.n	8004126 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80040cc:	23a4      	movs	r3, #164	@ 0xa4
 80040ce:	18fb      	adds	r3, r7, r3
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	2380      	movs	r3, #128	@ 0x80
 80040d4:	041b      	lsls	r3, r3, #16
 80040d6:	4013      	ands	r3, r2
 80040d8:	d00b      	beq.n	80040f2 <HAL_UART_IRQHandler+0x606>
 80040da:	23a0      	movs	r3, #160	@ 0xa0
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	2380      	movs	r3, #128	@ 0x80
 80040e2:	05db      	lsls	r3, r3, #23
 80040e4:	4013      	ands	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	0018      	movs	r0, r3
 80040ec:	f001 fbba 	bl	8005864 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040f0:	e019      	b.n	8004126 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80040f2:	23a4      	movs	r3, #164	@ 0xa4
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	2380      	movs	r3, #128	@ 0x80
 80040fa:	045b      	lsls	r3, r3, #17
 80040fc:	4013      	ands	r3, r2
 80040fe:	d012      	beq.n	8004126 <HAL_UART_IRQHandler+0x63a>
 8004100:	23a0      	movs	r3, #160	@ 0xa0
 8004102:	18fb      	adds	r3, r7, r3
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	da0d      	bge.n	8004126 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	0018      	movs	r0, r3
 800410e:	f001 fba1 	bl	8005854 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004112:	e008      	b.n	8004126 <HAL_UART_IRQHandler+0x63a>
      return;
 8004114:	46c0      	nop			@ (mov r8, r8)
 8004116:	e006      	b.n	8004126 <HAL_UART_IRQHandler+0x63a>
    return;
 8004118:	46c0      	nop			@ (mov r8, r8)
 800411a:	e004      	b.n	8004126 <HAL_UART_IRQHandler+0x63a>
      return;
 800411c:	46c0      	nop			@ (mov r8, r8)
 800411e:	e002      	b.n	8004126 <HAL_UART_IRQHandler+0x63a>
      return;
 8004120:	46c0      	nop			@ (mov r8, r8)
 8004122:	e000      	b.n	8004126 <HAL_UART_IRQHandler+0x63a>
    return;
 8004124:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004126:	46bd      	mov	sp, r7
 8004128:	b02a      	add	sp, #168	@ 0xa8
 800412a:	bdb0      	pop	{r4, r5, r7, pc}
 800412c:	fffffeff 	.word	0xfffffeff
 8004130:	fffffedf 	.word	0xfffffedf
 8004134:	effffffe 	.word	0xeffffffe

08004138 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004140:	46c0      	nop			@ (mov r8, r8)
 8004142:	46bd      	mov	sp, r7
 8004144:	b002      	add	sp, #8
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004150:	46c0      	nop			@ (mov r8, r8)
 8004152:	46bd      	mov	sp, r7
 8004154:	b002      	add	sp, #8
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	000a      	movs	r2, r1
 8004162:	1cbb      	adds	r3, r7, #2
 8004164:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	46bd      	mov	sp, r7
 800416a:	b002      	add	sp, #8
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004170:	b5b0      	push	{r4, r5, r7, lr}
 8004172:	b090      	sub	sp, #64	@ 0x40
 8004174:	af00      	add	r7, sp, #0
 8004176:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004178:	231a      	movs	r3, #26
 800417a:	2220      	movs	r2, #32
 800417c:	189b      	adds	r3, r3, r2
 800417e:	19db      	adds	r3, r3, r7
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	431a      	orrs	r2, r3
 800418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	431a      	orrs	r2, r3
 8004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	4313      	orrs	r3, r2
 800419a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4aaf      	ldr	r2, [pc, #700]	@ (8004460 <UART_SetConfig+0x2f0>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	0019      	movs	r1, r3
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ae:	430b      	orrs	r3, r1
 80041b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	4aaa      	ldr	r2, [pc, #680]	@ (8004464 <UART_SetConfig+0x2f4>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	0018      	movs	r0, r3
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	68d9      	ldr	r1, [r3, #12]
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	0003      	movs	r3, r0
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4aa4      	ldr	r2, [pc, #656]	@ (8004468 <UART_SetConfig+0x2f8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d004      	beq.n	80041e6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041e2:	4313      	orrs	r3, r2
 80041e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	4a9f      	ldr	r2, [pc, #636]	@ (800446c <UART_SetConfig+0x2fc>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	0019      	movs	r1, r3
 80041f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041f8:	430b      	orrs	r3, r1
 80041fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004202:	220f      	movs	r2, #15
 8004204:	4393      	bics	r3, r2
 8004206:	0018      	movs	r0, r3
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800420c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	0003      	movs	r3, r0
 8004212:	430b      	orrs	r3, r1
 8004214:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a95      	ldr	r2, [pc, #596]	@ (8004470 <UART_SetConfig+0x300>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d131      	bne.n	8004284 <UART_SetConfig+0x114>
 8004220:	4b94      	ldr	r3, [pc, #592]	@ (8004474 <UART_SetConfig+0x304>)
 8004222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004224:	2203      	movs	r2, #3
 8004226:	4013      	ands	r3, r2
 8004228:	2b03      	cmp	r3, #3
 800422a:	d01d      	beq.n	8004268 <UART_SetConfig+0xf8>
 800422c:	d823      	bhi.n	8004276 <UART_SetConfig+0x106>
 800422e:	2b02      	cmp	r3, #2
 8004230:	d00c      	beq.n	800424c <UART_SetConfig+0xdc>
 8004232:	d820      	bhi.n	8004276 <UART_SetConfig+0x106>
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <UART_SetConfig+0xce>
 8004238:	2b01      	cmp	r3, #1
 800423a:	d00e      	beq.n	800425a <UART_SetConfig+0xea>
 800423c:	e01b      	b.n	8004276 <UART_SetConfig+0x106>
 800423e:	231b      	movs	r3, #27
 8004240:	2220      	movs	r2, #32
 8004242:	189b      	adds	r3, r3, r2
 8004244:	19db      	adds	r3, r3, r7
 8004246:	2200      	movs	r2, #0
 8004248:	701a      	strb	r2, [r3, #0]
 800424a:	e0b4      	b.n	80043b6 <UART_SetConfig+0x246>
 800424c:	231b      	movs	r3, #27
 800424e:	2220      	movs	r2, #32
 8004250:	189b      	adds	r3, r3, r2
 8004252:	19db      	adds	r3, r3, r7
 8004254:	2202      	movs	r2, #2
 8004256:	701a      	strb	r2, [r3, #0]
 8004258:	e0ad      	b.n	80043b6 <UART_SetConfig+0x246>
 800425a:	231b      	movs	r3, #27
 800425c:	2220      	movs	r2, #32
 800425e:	189b      	adds	r3, r3, r2
 8004260:	19db      	adds	r3, r3, r7
 8004262:	2204      	movs	r2, #4
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	e0a6      	b.n	80043b6 <UART_SetConfig+0x246>
 8004268:	231b      	movs	r3, #27
 800426a:	2220      	movs	r2, #32
 800426c:	189b      	adds	r3, r3, r2
 800426e:	19db      	adds	r3, r3, r7
 8004270:	2208      	movs	r2, #8
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	e09f      	b.n	80043b6 <UART_SetConfig+0x246>
 8004276:	231b      	movs	r3, #27
 8004278:	2220      	movs	r2, #32
 800427a:	189b      	adds	r3, r3, r2
 800427c:	19db      	adds	r3, r3, r7
 800427e:	2210      	movs	r2, #16
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	e098      	b.n	80043b6 <UART_SetConfig+0x246>
 8004284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a7b      	ldr	r2, [pc, #492]	@ (8004478 <UART_SetConfig+0x308>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d131      	bne.n	80042f2 <UART_SetConfig+0x182>
 800428e:	4b79      	ldr	r3, [pc, #484]	@ (8004474 <UART_SetConfig+0x304>)
 8004290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004292:	220c      	movs	r2, #12
 8004294:	4013      	ands	r3, r2
 8004296:	2b0c      	cmp	r3, #12
 8004298:	d01d      	beq.n	80042d6 <UART_SetConfig+0x166>
 800429a:	d823      	bhi.n	80042e4 <UART_SetConfig+0x174>
 800429c:	2b08      	cmp	r3, #8
 800429e:	d00c      	beq.n	80042ba <UART_SetConfig+0x14a>
 80042a0:	d820      	bhi.n	80042e4 <UART_SetConfig+0x174>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <UART_SetConfig+0x13c>
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d00e      	beq.n	80042c8 <UART_SetConfig+0x158>
 80042aa:	e01b      	b.n	80042e4 <UART_SetConfig+0x174>
 80042ac:	231b      	movs	r3, #27
 80042ae:	2220      	movs	r2, #32
 80042b0:	189b      	adds	r3, r3, r2
 80042b2:	19db      	adds	r3, r3, r7
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	e07d      	b.n	80043b6 <UART_SetConfig+0x246>
 80042ba:	231b      	movs	r3, #27
 80042bc:	2220      	movs	r2, #32
 80042be:	189b      	adds	r3, r3, r2
 80042c0:	19db      	adds	r3, r3, r7
 80042c2:	2202      	movs	r2, #2
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	e076      	b.n	80043b6 <UART_SetConfig+0x246>
 80042c8:	231b      	movs	r3, #27
 80042ca:	2220      	movs	r2, #32
 80042cc:	189b      	adds	r3, r3, r2
 80042ce:	19db      	adds	r3, r3, r7
 80042d0:	2204      	movs	r2, #4
 80042d2:	701a      	strb	r2, [r3, #0]
 80042d4:	e06f      	b.n	80043b6 <UART_SetConfig+0x246>
 80042d6:	231b      	movs	r3, #27
 80042d8:	2220      	movs	r2, #32
 80042da:	189b      	adds	r3, r3, r2
 80042dc:	19db      	adds	r3, r3, r7
 80042de:	2208      	movs	r2, #8
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	e068      	b.n	80043b6 <UART_SetConfig+0x246>
 80042e4:	231b      	movs	r3, #27
 80042e6:	2220      	movs	r2, #32
 80042e8:	189b      	adds	r3, r3, r2
 80042ea:	19db      	adds	r3, r3, r7
 80042ec:	2210      	movs	r2, #16
 80042ee:	701a      	strb	r2, [r3, #0]
 80042f0:	e061      	b.n	80043b6 <UART_SetConfig+0x246>
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a61      	ldr	r2, [pc, #388]	@ (800447c <UART_SetConfig+0x30c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d106      	bne.n	800430a <UART_SetConfig+0x19a>
 80042fc:	231b      	movs	r3, #27
 80042fe:	2220      	movs	r2, #32
 8004300:	189b      	adds	r3, r3, r2
 8004302:	19db      	adds	r3, r3, r7
 8004304:	2200      	movs	r2, #0
 8004306:	701a      	strb	r2, [r3, #0]
 8004308:	e055      	b.n	80043b6 <UART_SetConfig+0x246>
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a5c      	ldr	r2, [pc, #368]	@ (8004480 <UART_SetConfig+0x310>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d106      	bne.n	8004322 <UART_SetConfig+0x1b2>
 8004314:	231b      	movs	r3, #27
 8004316:	2220      	movs	r2, #32
 8004318:	189b      	adds	r3, r3, r2
 800431a:	19db      	adds	r3, r3, r7
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	e049      	b.n	80043b6 <UART_SetConfig+0x246>
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a50      	ldr	r2, [pc, #320]	@ (8004468 <UART_SetConfig+0x2f8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d13e      	bne.n	80043aa <UART_SetConfig+0x23a>
 800432c:	4b51      	ldr	r3, [pc, #324]	@ (8004474 <UART_SetConfig+0x304>)
 800432e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004330:	23c0      	movs	r3, #192	@ 0xc0
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	4013      	ands	r3, r2
 8004336:	22c0      	movs	r2, #192	@ 0xc0
 8004338:	0112      	lsls	r2, r2, #4
 800433a:	4293      	cmp	r3, r2
 800433c:	d027      	beq.n	800438e <UART_SetConfig+0x21e>
 800433e:	22c0      	movs	r2, #192	@ 0xc0
 8004340:	0112      	lsls	r2, r2, #4
 8004342:	4293      	cmp	r3, r2
 8004344:	d82a      	bhi.n	800439c <UART_SetConfig+0x22c>
 8004346:	2280      	movs	r2, #128	@ 0x80
 8004348:	0112      	lsls	r2, r2, #4
 800434a:	4293      	cmp	r3, r2
 800434c:	d011      	beq.n	8004372 <UART_SetConfig+0x202>
 800434e:	2280      	movs	r2, #128	@ 0x80
 8004350:	0112      	lsls	r2, r2, #4
 8004352:	4293      	cmp	r3, r2
 8004354:	d822      	bhi.n	800439c <UART_SetConfig+0x22c>
 8004356:	2b00      	cmp	r3, #0
 8004358:	d004      	beq.n	8004364 <UART_SetConfig+0x1f4>
 800435a:	2280      	movs	r2, #128	@ 0x80
 800435c:	00d2      	lsls	r2, r2, #3
 800435e:	4293      	cmp	r3, r2
 8004360:	d00e      	beq.n	8004380 <UART_SetConfig+0x210>
 8004362:	e01b      	b.n	800439c <UART_SetConfig+0x22c>
 8004364:	231b      	movs	r3, #27
 8004366:	2220      	movs	r2, #32
 8004368:	189b      	adds	r3, r3, r2
 800436a:	19db      	adds	r3, r3, r7
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]
 8004370:	e021      	b.n	80043b6 <UART_SetConfig+0x246>
 8004372:	231b      	movs	r3, #27
 8004374:	2220      	movs	r2, #32
 8004376:	189b      	adds	r3, r3, r2
 8004378:	19db      	adds	r3, r3, r7
 800437a:	2202      	movs	r2, #2
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	e01a      	b.n	80043b6 <UART_SetConfig+0x246>
 8004380:	231b      	movs	r3, #27
 8004382:	2220      	movs	r2, #32
 8004384:	189b      	adds	r3, r3, r2
 8004386:	19db      	adds	r3, r3, r7
 8004388:	2204      	movs	r2, #4
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	e013      	b.n	80043b6 <UART_SetConfig+0x246>
 800438e:	231b      	movs	r3, #27
 8004390:	2220      	movs	r2, #32
 8004392:	189b      	adds	r3, r3, r2
 8004394:	19db      	adds	r3, r3, r7
 8004396:	2208      	movs	r2, #8
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	e00c      	b.n	80043b6 <UART_SetConfig+0x246>
 800439c:	231b      	movs	r3, #27
 800439e:	2220      	movs	r2, #32
 80043a0:	189b      	adds	r3, r3, r2
 80043a2:	19db      	adds	r3, r3, r7
 80043a4:	2210      	movs	r2, #16
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	e005      	b.n	80043b6 <UART_SetConfig+0x246>
 80043aa:	231b      	movs	r3, #27
 80043ac:	2220      	movs	r2, #32
 80043ae:	189b      	adds	r3, r3, r2
 80043b0:	19db      	adds	r3, r3, r7
 80043b2:	2210      	movs	r2, #16
 80043b4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a2b      	ldr	r2, [pc, #172]	@ (8004468 <UART_SetConfig+0x2f8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d000      	beq.n	80043c2 <UART_SetConfig+0x252>
 80043c0:	e0a9      	b.n	8004516 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043c2:	231b      	movs	r3, #27
 80043c4:	2220      	movs	r2, #32
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	19db      	adds	r3, r3, r7
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d015      	beq.n	80043fc <UART_SetConfig+0x28c>
 80043d0:	dc18      	bgt.n	8004404 <UART_SetConfig+0x294>
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d00d      	beq.n	80043f2 <UART_SetConfig+0x282>
 80043d6:	dc15      	bgt.n	8004404 <UART_SetConfig+0x294>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <UART_SetConfig+0x272>
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d005      	beq.n	80043ec <UART_SetConfig+0x27c>
 80043e0:	e010      	b.n	8004404 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043e2:	f7fd ffff 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 80043e6:	0003      	movs	r3, r0
 80043e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043ea:	e014      	b.n	8004416 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043ec:	4b25      	ldr	r3, [pc, #148]	@ (8004484 <UART_SetConfig+0x314>)
 80043ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043f0:	e011      	b.n	8004416 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043f2:	f7fd ff6b 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 80043f6:	0003      	movs	r3, r0
 80043f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043fa:	e00c      	b.n	8004416 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043fc:	2380      	movs	r3, #128	@ 0x80
 80043fe:	021b      	lsls	r3, r3, #8
 8004400:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004402:	e008      	b.n	8004416 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004408:	231a      	movs	r3, #26
 800440a:	2220      	movs	r2, #32
 800440c:	189b      	adds	r3, r3, r2
 800440e:	19db      	adds	r3, r3, r7
 8004410:	2201      	movs	r2, #1
 8004412:	701a      	strb	r2, [r3, #0]
        break;
 8004414:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004418:	2b00      	cmp	r3, #0
 800441a:	d100      	bne.n	800441e <UART_SetConfig+0x2ae>
 800441c:	e14b      	b.n	80046b6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004422:	4b19      	ldr	r3, [pc, #100]	@ (8004488 <UART_SetConfig+0x318>)
 8004424:	0052      	lsls	r2, r2, #1
 8004426:	5ad3      	ldrh	r3, [r2, r3]
 8004428:	0019      	movs	r1, r3
 800442a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800442c:	f7fb fe86 	bl	800013c <__udivsi3>
 8004430:	0003      	movs	r3, r0
 8004432:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	0013      	movs	r3, r2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	189b      	adds	r3, r3, r2
 800443e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004440:	429a      	cmp	r2, r3
 8004442:	d305      	bcc.n	8004450 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800444a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800444c:	429a      	cmp	r2, r3
 800444e:	d91d      	bls.n	800448c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004450:	231a      	movs	r3, #26
 8004452:	2220      	movs	r2, #32
 8004454:	189b      	adds	r3, r3, r2
 8004456:	19db      	adds	r3, r3, r7
 8004458:	2201      	movs	r2, #1
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	e12b      	b.n	80046b6 <UART_SetConfig+0x546>
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	cfff69f3 	.word	0xcfff69f3
 8004464:	ffffcfff 	.word	0xffffcfff
 8004468:	40008000 	.word	0x40008000
 800446c:	11fff4ff 	.word	0x11fff4ff
 8004470:	40013800 	.word	0x40013800
 8004474:	40021000 	.word	0x40021000
 8004478:	40004400 	.word	0x40004400
 800447c:	40004800 	.word	0x40004800
 8004480:	40004c00 	.word	0x40004c00
 8004484:	00f42400 	.word	0x00f42400
 8004488:	0800653c 	.word	0x0800653c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800448c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448e:	61bb      	str	r3, [r7, #24]
 8004490:	2300      	movs	r3, #0
 8004492:	61fb      	str	r3, [r7, #28]
 8004494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004496:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004498:	4b92      	ldr	r3, [pc, #584]	@ (80046e4 <UART_SetConfig+0x574>)
 800449a:	0052      	lsls	r2, r2, #1
 800449c:	5ad3      	ldrh	r3, [r2, r3]
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	2300      	movs	r3, #0
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	69b8      	ldr	r0, [r7, #24]
 80044aa:	69f9      	ldr	r1, [r7, #28]
 80044ac:	f7fb ffbc 	bl	8000428 <__aeabi_uldivmod>
 80044b0:	0002      	movs	r2, r0
 80044b2:	000b      	movs	r3, r1
 80044b4:	0e11      	lsrs	r1, r2, #24
 80044b6:	021d      	lsls	r5, r3, #8
 80044b8:	430d      	orrs	r5, r1
 80044ba:	0214      	lsls	r4, r2, #8
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	085b      	lsrs	r3, r3, #1
 80044c2:	60bb      	str	r3, [r7, #8]
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68b8      	ldr	r0, [r7, #8]
 80044ca:	68f9      	ldr	r1, [r7, #12]
 80044cc:	1900      	adds	r0, r0, r4
 80044ce:	4169      	adcs	r1, r5
 80044d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	603b      	str	r3, [r7, #0]
 80044d6:	2300      	movs	r3, #0
 80044d8:	607b      	str	r3, [r7, #4]
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f7fb ffa3 	bl	8000428 <__aeabi_uldivmod>
 80044e2:	0002      	movs	r2, r0
 80044e4:	000b      	movs	r3, r1
 80044e6:	0013      	movs	r3, r2
 80044e8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044ec:	23c0      	movs	r3, #192	@ 0xc0
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d309      	bcc.n	8004508 <UART_SetConfig+0x398>
 80044f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044f6:	2380      	movs	r3, #128	@ 0x80
 80044f8:	035b      	lsls	r3, r3, #13
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d204      	bcs.n	8004508 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004504:	60da      	str	r2, [r3, #12]
 8004506:	e0d6      	b.n	80046b6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004508:	231a      	movs	r3, #26
 800450a:	2220      	movs	r2, #32
 800450c:	189b      	adds	r3, r3, r2
 800450e:	19db      	adds	r3, r3, r7
 8004510:	2201      	movs	r2, #1
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	e0cf      	b.n	80046b6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	2380      	movs	r3, #128	@ 0x80
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	429a      	cmp	r2, r3
 8004520:	d000      	beq.n	8004524 <UART_SetConfig+0x3b4>
 8004522:	e070      	b.n	8004606 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004524:	231b      	movs	r3, #27
 8004526:	2220      	movs	r2, #32
 8004528:	189b      	adds	r3, r3, r2
 800452a:	19db      	adds	r3, r3, r7
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b08      	cmp	r3, #8
 8004530:	d015      	beq.n	800455e <UART_SetConfig+0x3ee>
 8004532:	dc18      	bgt.n	8004566 <UART_SetConfig+0x3f6>
 8004534:	2b04      	cmp	r3, #4
 8004536:	d00d      	beq.n	8004554 <UART_SetConfig+0x3e4>
 8004538:	dc15      	bgt.n	8004566 <UART_SetConfig+0x3f6>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <UART_SetConfig+0x3d4>
 800453e:	2b02      	cmp	r3, #2
 8004540:	d005      	beq.n	800454e <UART_SetConfig+0x3de>
 8004542:	e010      	b.n	8004566 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004544:	f7fd ff4e 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 8004548:	0003      	movs	r3, r0
 800454a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800454c:	e014      	b.n	8004578 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800454e:	4b66      	ldr	r3, [pc, #408]	@ (80046e8 <UART_SetConfig+0x578>)
 8004550:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004552:	e011      	b.n	8004578 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004554:	f7fd feba 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 8004558:	0003      	movs	r3, r0
 800455a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800455c:	e00c      	b.n	8004578 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455e:	2380      	movs	r3, #128	@ 0x80
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004564:	e008      	b.n	8004578 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800456a:	231a      	movs	r3, #26
 800456c:	2220      	movs	r2, #32
 800456e:	189b      	adds	r3, r3, r2
 8004570:	19db      	adds	r3, r3, r7
 8004572:	2201      	movs	r2, #1
 8004574:	701a      	strb	r2, [r3, #0]
        break;
 8004576:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800457a:	2b00      	cmp	r3, #0
 800457c:	d100      	bne.n	8004580 <UART_SetConfig+0x410>
 800457e:	e09a      	b.n	80046b6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004582:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004584:	4b57      	ldr	r3, [pc, #348]	@ (80046e4 <UART_SetConfig+0x574>)
 8004586:	0052      	lsls	r2, r2, #1
 8004588:	5ad3      	ldrh	r3, [r2, r3]
 800458a:	0019      	movs	r1, r3
 800458c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800458e:	f7fb fdd5 	bl	800013c <__udivsi3>
 8004592:	0003      	movs	r3, r0
 8004594:	005a      	lsls	r2, r3, #1
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	18d2      	adds	r2, r2, r3
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	0019      	movs	r1, r3
 80045a4:	0010      	movs	r0, r2
 80045a6:	f7fb fdc9 	bl	800013c <__udivsi3>
 80045aa:	0003      	movs	r3, r0
 80045ac:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b0:	2b0f      	cmp	r3, #15
 80045b2:	d921      	bls.n	80045f8 <UART_SetConfig+0x488>
 80045b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045b6:	2380      	movs	r3, #128	@ 0x80
 80045b8:	025b      	lsls	r3, r3, #9
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d21c      	bcs.n	80045f8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	200e      	movs	r0, #14
 80045c4:	2420      	movs	r4, #32
 80045c6:	1903      	adds	r3, r0, r4
 80045c8:	19db      	adds	r3, r3, r7
 80045ca:	210f      	movs	r1, #15
 80045cc:	438a      	bics	r2, r1
 80045ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d2:	085b      	lsrs	r3, r3, #1
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2207      	movs	r2, #7
 80045d8:	4013      	ands	r3, r2
 80045da:	b299      	uxth	r1, r3
 80045dc:	1903      	adds	r3, r0, r4
 80045de:	19db      	adds	r3, r3, r7
 80045e0:	1902      	adds	r2, r0, r4
 80045e2:	19d2      	adds	r2, r2, r7
 80045e4:	8812      	ldrh	r2, [r2, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	1902      	adds	r2, r0, r4
 80045f0:	19d2      	adds	r2, r2, r7
 80045f2:	8812      	ldrh	r2, [r2, #0]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	e05e      	b.n	80046b6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80045f8:	231a      	movs	r3, #26
 80045fa:	2220      	movs	r2, #32
 80045fc:	189b      	adds	r3, r3, r2
 80045fe:	19db      	adds	r3, r3, r7
 8004600:	2201      	movs	r2, #1
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	e057      	b.n	80046b6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004606:	231b      	movs	r3, #27
 8004608:	2220      	movs	r2, #32
 800460a:	189b      	adds	r3, r3, r2
 800460c:	19db      	adds	r3, r3, r7
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b08      	cmp	r3, #8
 8004612:	d015      	beq.n	8004640 <UART_SetConfig+0x4d0>
 8004614:	dc18      	bgt.n	8004648 <UART_SetConfig+0x4d8>
 8004616:	2b04      	cmp	r3, #4
 8004618:	d00d      	beq.n	8004636 <UART_SetConfig+0x4c6>
 800461a:	dc15      	bgt.n	8004648 <UART_SetConfig+0x4d8>
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <UART_SetConfig+0x4b6>
 8004620:	2b02      	cmp	r3, #2
 8004622:	d005      	beq.n	8004630 <UART_SetConfig+0x4c0>
 8004624:	e010      	b.n	8004648 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004626:	f7fd fedd 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 800462a:	0003      	movs	r3, r0
 800462c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800462e:	e014      	b.n	800465a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004630:	4b2d      	ldr	r3, [pc, #180]	@ (80046e8 <UART_SetConfig+0x578>)
 8004632:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004634:	e011      	b.n	800465a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004636:	f7fd fe49 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 800463a:	0003      	movs	r3, r0
 800463c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800463e:	e00c      	b.n	800465a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004640:	2380      	movs	r3, #128	@ 0x80
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004646:	e008      	b.n	800465a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800464c:	231a      	movs	r3, #26
 800464e:	2220      	movs	r2, #32
 8004650:	189b      	adds	r3, r3, r2
 8004652:	19db      	adds	r3, r3, r7
 8004654:	2201      	movs	r2, #1
 8004656:	701a      	strb	r2, [r3, #0]
        break;
 8004658:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800465a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800465c:	2b00      	cmp	r3, #0
 800465e:	d02a      	beq.n	80046b6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004662:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004664:	4b1f      	ldr	r3, [pc, #124]	@ (80046e4 <UART_SetConfig+0x574>)
 8004666:	0052      	lsls	r2, r2, #1
 8004668:	5ad3      	ldrh	r3, [r2, r3]
 800466a:	0019      	movs	r1, r3
 800466c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800466e:	f7fb fd65 	bl	800013c <__udivsi3>
 8004672:	0003      	movs	r3, r0
 8004674:	001a      	movs	r2, r3
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	085b      	lsrs	r3, r3, #1
 800467c:	18d2      	adds	r2, r2, r3
 800467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	0019      	movs	r1, r3
 8004684:	0010      	movs	r0, r2
 8004686:	f7fb fd59 	bl	800013c <__udivsi3>
 800468a:	0003      	movs	r3, r0
 800468c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004690:	2b0f      	cmp	r3, #15
 8004692:	d90a      	bls.n	80046aa <UART_SetConfig+0x53a>
 8004694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004696:	2380      	movs	r3, #128	@ 0x80
 8004698:	025b      	lsls	r3, r3, #9
 800469a:	429a      	cmp	r2, r3
 800469c:	d205      	bcs.n	80046aa <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800469e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60da      	str	r2, [r3, #12]
 80046a8:	e005      	b.n	80046b6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80046aa:	231a      	movs	r3, #26
 80046ac:	2220      	movs	r2, #32
 80046ae:	189b      	adds	r3, r3, r2
 80046b0:	19db      	adds	r3, r3, r7
 80046b2:	2201      	movs	r2, #1
 80046b4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b8:	226a      	movs	r2, #106	@ 0x6a
 80046ba:	2101      	movs	r1, #1
 80046bc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	2268      	movs	r2, #104	@ 0x68
 80046c2:	2101      	movs	r1, #1
 80046c4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c8:	2200      	movs	r2, #0
 80046ca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80046cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ce:	2200      	movs	r2, #0
 80046d0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80046d2:	231a      	movs	r3, #26
 80046d4:	2220      	movs	r2, #32
 80046d6:	189b      	adds	r3, r3, r2
 80046d8:	19db      	adds	r3, r3, r7
 80046da:	781b      	ldrb	r3, [r3, #0]
}
 80046dc:	0018      	movs	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	b010      	add	sp, #64	@ 0x40
 80046e2:	bdb0      	pop	{r4, r5, r7, pc}
 80046e4:	0800653c 	.word	0x0800653c
 80046e8:	00f42400 	.word	0x00f42400

080046ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f8:	2208      	movs	r2, #8
 80046fa:	4013      	ands	r3, r2
 80046fc:	d00b      	beq.n	8004716 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4a4a      	ldr	r2, [pc, #296]	@ (8004830 <UART_AdvFeatureConfig+0x144>)
 8004706:	4013      	ands	r3, r2
 8004708:	0019      	movs	r1, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471a:	2201      	movs	r2, #1
 800471c:	4013      	ands	r3, r2
 800471e:	d00b      	beq.n	8004738 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	4a43      	ldr	r2, [pc, #268]	@ (8004834 <UART_AdvFeatureConfig+0x148>)
 8004728:	4013      	ands	r3, r2
 800472a:	0019      	movs	r1, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473c:	2202      	movs	r2, #2
 800473e:	4013      	ands	r3, r2
 8004740:	d00b      	beq.n	800475a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	4a3b      	ldr	r2, [pc, #236]	@ (8004838 <UART_AdvFeatureConfig+0x14c>)
 800474a:	4013      	ands	r3, r2
 800474c:	0019      	movs	r1, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475e:	2204      	movs	r2, #4
 8004760:	4013      	ands	r3, r2
 8004762:	d00b      	beq.n	800477c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	4a34      	ldr	r2, [pc, #208]	@ (800483c <UART_AdvFeatureConfig+0x150>)
 800476c:	4013      	ands	r3, r2
 800476e:	0019      	movs	r1, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004780:	2210      	movs	r2, #16
 8004782:	4013      	ands	r3, r2
 8004784:	d00b      	beq.n	800479e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	4a2c      	ldr	r2, [pc, #176]	@ (8004840 <UART_AdvFeatureConfig+0x154>)
 800478e:	4013      	ands	r3, r2
 8004790:	0019      	movs	r1, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a2:	2220      	movs	r2, #32
 80047a4:	4013      	ands	r3, r2
 80047a6:	d00b      	beq.n	80047c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	4a25      	ldr	r2, [pc, #148]	@ (8004844 <UART_AdvFeatureConfig+0x158>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	0019      	movs	r1, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c4:	2240      	movs	r2, #64	@ 0x40
 80047c6:	4013      	ands	r3, r2
 80047c8:	d01d      	beq.n	8004806 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004848 <UART_AdvFeatureConfig+0x15c>)
 80047d2:	4013      	ands	r3, r2
 80047d4:	0019      	movs	r1, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047e6:	2380      	movs	r3, #128	@ 0x80
 80047e8:	035b      	lsls	r3, r3, #13
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d10b      	bne.n	8004806 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4a15      	ldr	r2, [pc, #84]	@ (800484c <UART_AdvFeatureConfig+0x160>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	0019      	movs	r1, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480a:	2280      	movs	r2, #128	@ 0x80
 800480c:	4013      	ands	r3, r2
 800480e:	d00b      	beq.n	8004828 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	4a0e      	ldr	r2, [pc, #56]	@ (8004850 <UART_AdvFeatureConfig+0x164>)
 8004818:	4013      	ands	r3, r2
 800481a:	0019      	movs	r1, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]
  }
}
 8004828:	46c0      	nop			@ (mov r8, r8)
 800482a:	46bd      	mov	sp, r7
 800482c:	b002      	add	sp, #8
 800482e:	bd80      	pop	{r7, pc}
 8004830:	ffff7fff 	.word	0xffff7fff
 8004834:	fffdffff 	.word	0xfffdffff
 8004838:	fffeffff 	.word	0xfffeffff
 800483c:	fffbffff 	.word	0xfffbffff
 8004840:	ffffefff 	.word	0xffffefff
 8004844:	ffffdfff 	.word	0xffffdfff
 8004848:	ffefffff 	.word	0xffefffff
 800484c:	ff9fffff 	.word	0xff9fffff
 8004850:	fff7ffff 	.word	0xfff7ffff

08004854 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b092      	sub	sp, #72	@ 0x48
 8004858:	af02      	add	r7, sp, #8
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2290      	movs	r2, #144	@ 0x90
 8004860:	2100      	movs	r1, #0
 8004862:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004864:	f7fc fd8e 	bl	8001384 <HAL_GetTick>
 8004868:	0003      	movs	r3, r0
 800486a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2208      	movs	r2, #8
 8004874:	4013      	ands	r3, r2
 8004876:	2b08      	cmp	r3, #8
 8004878:	d12d      	bne.n	80048d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800487a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800487c:	2280      	movs	r2, #128	@ 0x80
 800487e:	0391      	lsls	r1, r2, #14
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	4a47      	ldr	r2, [pc, #284]	@ (80049a0 <UART_CheckIdleState+0x14c>)
 8004884:	9200      	str	r2, [sp, #0]
 8004886:	2200      	movs	r2, #0
 8004888:	f000 f88e 	bl	80049a8 <UART_WaitOnFlagUntilTimeout>
 800488c:	1e03      	subs	r3, r0, #0
 800488e:	d022      	beq.n	80048d6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004890:	f3ef 8310 	mrs	r3, PRIMASK
 8004894:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004898:	63bb      	str	r3, [r7, #56]	@ 0x38
 800489a:	2301      	movs	r3, #1
 800489c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a0:	f383 8810 	msr	PRIMASK, r3
}
 80048a4:	46c0      	nop			@ (mov r8, r8)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2180      	movs	r1, #128	@ 0x80
 80048b2:	438a      	bics	r2, r1
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048bc:	f383 8810 	msr	PRIMASK, r3
}
 80048c0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2288      	movs	r2, #136	@ 0x88
 80048c6:	2120      	movs	r1, #32
 80048c8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2284      	movs	r2, #132	@ 0x84
 80048ce:	2100      	movs	r1, #0
 80048d0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e060      	b.n	8004998 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2204      	movs	r2, #4
 80048de:	4013      	ands	r3, r2
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d146      	bne.n	8004972 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048e6:	2280      	movs	r2, #128	@ 0x80
 80048e8:	03d1      	lsls	r1, r2, #15
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	4a2c      	ldr	r2, [pc, #176]	@ (80049a0 <UART_CheckIdleState+0x14c>)
 80048ee:	9200      	str	r2, [sp, #0]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f000 f859 	bl	80049a8 <UART_WaitOnFlagUntilTimeout>
 80048f6:	1e03      	subs	r3, r0, #0
 80048f8:	d03b      	beq.n	8004972 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048fa:	f3ef 8310 	mrs	r3, PRIMASK
 80048fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8004900:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004902:	637b      	str	r3, [r7, #52]	@ 0x34
 8004904:	2301      	movs	r3, #1
 8004906:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f383 8810 	msr	PRIMASK, r3
}
 800490e:	46c0      	nop			@ (mov r8, r8)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4922      	ldr	r1, [pc, #136]	@ (80049a4 <UART_CheckIdleState+0x150>)
 800491c:	400a      	ands	r2, r1
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004922:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f383 8810 	msr	PRIMASK, r3
}
 800492a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800492c:	f3ef 8310 	mrs	r3, PRIMASK
 8004930:	61bb      	str	r3, [r7, #24]
  return(result);
 8004932:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004934:	633b      	str	r3, [r7, #48]	@ 0x30
 8004936:	2301      	movs	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	f383 8810 	msr	PRIMASK, r3
}
 8004940:	46c0      	nop			@ (mov r8, r8)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2101      	movs	r1, #1
 800494e:	438a      	bics	r2, r1
 8004950:	609a      	str	r2, [r3, #8]
 8004952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004954:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	f383 8810 	msr	PRIMASK, r3
}
 800495c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	228c      	movs	r2, #140	@ 0x8c
 8004962:	2120      	movs	r1, #32
 8004964:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2284      	movs	r2, #132	@ 0x84
 800496a:	2100      	movs	r1, #0
 800496c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e012      	b.n	8004998 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2288      	movs	r2, #136	@ 0x88
 8004976:	2120      	movs	r1, #32
 8004978:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	228c      	movs	r2, #140	@ 0x8c
 800497e:	2120      	movs	r1, #32
 8004980:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2284      	movs	r2, #132	@ 0x84
 8004992:	2100      	movs	r1, #0
 8004994:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	0018      	movs	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	b010      	add	sp, #64	@ 0x40
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	01ffffff 	.word	0x01ffffff
 80049a4:	fffffedf 	.word	0xfffffedf

080049a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	1dfb      	adds	r3, r7, #7
 80049b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b8:	e051      	b.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	3301      	adds	r3, #1
 80049be:	d04e      	beq.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c0:	f7fc fce0 	bl	8001384 <HAL_GetTick>
 80049c4:	0002      	movs	r2, r0
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d302      	bcc.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e051      	b.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2204      	movs	r2, #4
 80049e2:	4013      	ands	r3, r2
 80049e4:	d03b      	beq.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xb6>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b80      	cmp	r3, #128	@ 0x80
 80049ea:	d038      	beq.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xb6>
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b40      	cmp	r3, #64	@ 0x40
 80049f0:	d035      	beq.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	2208      	movs	r2, #8
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d111      	bne.n	8004a24 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2208      	movs	r2, #8
 8004a06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	f000 f960 	bl	8004cd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2290      	movs	r2, #144	@ 0x90
 8004a14:	2108      	movs	r1, #8
 8004a16:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2284      	movs	r2, #132	@ 0x84
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e02c      	b.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	69da      	ldr	r2, [r3, #28]
 8004a2a:	2380      	movs	r3, #128	@ 0x80
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	401a      	ands	r2, r3
 8004a30:	2380      	movs	r3, #128	@ 0x80
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d112      	bne.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2280      	movs	r2, #128	@ 0x80
 8004a3e:	0112      	lsls	r2, r2, #4
 8004a40:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	0018      	movs	r0, r3
 8004a46:	f000 f943 	bl	8004cd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2290      	movs	r2, #144	@ 0x90
 8004a4e:	2120      	movs	r1, #32
 8004a50:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2284      	movs	r2, #132	@ 0x84
 8004a56:	2100      	movs	r1, #0
 8004a58:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e00f      	b.n	8004a7e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	4013      	ands	r3, r2
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	425a      	negs	r2, r3
 8004a6e:	4153      	adcs	r3, r2
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	001a      	movs	r2, r3
 8004a74:	1dfb      	adds	r3, r7, #7
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d09e      	beq.n	80049ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	0018      	movs	r0, r3
 8004a80:	46bd      	mov	sp, r7
 8004a82:	b004      	add	sp, #16
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b098      	sub	sp, #96	@ 0x60
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	1dbb      	adds	r3, r7, #6
 8004a94:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	1dba      	adds	r2, r7, #6
 8004aa0:	215c      	movs	r1, #92	@ 0x5c
 8004aa2:	8812      	ldrh	r2, [r2, #0]
 8004aa4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	1dba      	adds	r2, r7, #6
 8004aaa:	215e      	movs	r1, #94	@ 0x5e
 8004aac:	8812      	ldrh	r2, [r2, #0]
 8004aae:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	2380      	movs	r3, #128	@ 0x80
 8004abc:	015b      	lsls	r3, r3, #5
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d10d      	bne.n	8004ade <UART_Start_Receive_IT+0x56>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d104      	bne.n	8004ad4 <UART_Start_Receive_IT+0x4c>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2260      	movs	r2, #96	@ 0x60
 8004ace:	497b      	ldr	r1, [pc, #492]	@ (8004cbc <UART_Start_Receive_IT+0x234>)
 8004ad0:	5299      	strh	r1, [r3, r2]
 8004ad2:	e02e      	b.n	8004b32 <UART_Start_Receive_IT+0xaa>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2260      	movs	r2, #96	@ 0x60
 8004ad8:	21ff      	movs	r1, #255	@ 0xff
 8004ada:	5299      	strh	r1, [r3, r2]
 8004adc:	e029      	b.n	8004b32 <UART_Start_Receive_IT+0xaa>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10d      	bne.n	8004b02 <UART_Start_Receive_IT+0x7a>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d104      	bne.n	8004af8 <UART_Start_Receive_IT+0x70>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2260      	movs	r2, #96	@ 0x60
 8004af2:	21ff      	movs	r1, #255	@ 0xff
 8004af4:	5299      	strh	r1, [r3, r2]
 8004af6:	e01c      	b.n	8004b32 <UART_Start_Receive_IT+0xaa>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2260      	movs	r2, #96	@ 0x60
 8004afc:	217f      	movs	r1, #127	@ 0x7f
 8004afe:	5299      	strh	r1, [r3, r2]
 8004b00:	e017      	b.n	8004b32 <UART_Start_Receive_IT+0xaa>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	2380      	movs	r3, #128	@ 0x80
 8004b08:	055b      	lsls	r3, r3, #21
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d10d      	bne.n	8004b2a <UART_Start_Receive_IT+0xa2>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d104      	bne.n	8004b20 <UART_Start_Receive_IT+0x98>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2260      	movs	r2, #96	@ 0x60
 8004b1a:	217f      	movs	r1, #127	@ 0x7f
 8004b1c:	5299      	strh	r1, [r3, r2]
 8004b1e:	e008      	b.n	8004b32 <UART_Start_Receive_IT+0xaa>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2260      	movs	r2, #96	@ 0x60
 8004b24:	213f      	movs	r1, #63	@ 0x3f
 8004b26:	5299      	strh	r1, [r3, r2]
 8004b28:	e003      	b.n	8004b32 <UART_Start_Receive_IT+0xaa>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2260      	movs	r2, #96	@ 0x60
 8004b2e:	2100      	movs	r1, #0
 8004b30:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2290      	movs	r2, #144	@ 0x90
 8004b36:	2100      	movs	r1, #0
 8004b38:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	228c      	movs	r2, #140	@ 0x8c
 8004b3e:	2122      	movs	r1, #34	@ 0x22
 8004b40:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b42:	f3ef 8310 	mrs	r3, PRIMASK
 8004b46:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8004b48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b52:	f383 8810 	msr	PRIMASK, r3
}
 8004b56:	46c0      	nop			@ (mov r8, r8)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2101      	movs	r1, #1
 8004b64:	430a      	orrs	r2, r1
 8004b66:	609a      	str	r2, [r3, #8]
 8004b68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b6e:	f383 8810 	msr	PRIMASK, r3
}
 8004b72:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004b78:	2380      	movs	r3, #128	@ 0x80
 8004b7a:	059b      	lsls	r3, r3, #22
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d150      	bne.n	8004c22 <UART_Start_Receive_IT+0x19a>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2268      	movs	r2, #104	@ 0x68
 8004b84:	5a9b      	ldrh	r3, [r3, r2]
 8004b86:	1dba      	adds	r2, r7, #6
 8004b88:	8812      	ldrh	r2, [r2, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d349      	bcc.n	8004c22 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	2380      	movs	r3, #128	@ 0x80
 8004b94:	015b      	lsls	r3, r3, #5
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d107      	bne.n	8004baa <UART_Start_Receive_IT+0x122>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d103      	bne.n	8004baa <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4a46      	ldr	r2, [pc, #280]	@ (8004cc0 <UART_Start_Receive_IT+0x238>)
 8004ba6:	675a      	str	r2, [r3, #116]	@ 0x74
 8004ba8:	e002      	b.n	8004bb0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4a45      	ldr	r2, [pc, #276]	@ (8004cc4 <UART_Start_Receive_IT+0x23c>)
 8004bae:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d019      	beq.n	8004bec <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8004bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc8:	f383 8810 	msr	PRIMASK, r3
}
 8004bcc:	46c0      	nop			@ (mov r8, r8)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2180      	movs	r1, #128	@ 0x80
 8004bda:	0049      	lsls	r1, r1, #1
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be6:	f383 8810 	msr	PRIMASK, r3
}
 8004bea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bec:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004bf4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfc:	f383 8810 	msr	PRIMASK, r3
}
 8004c00:	46c0      	nop			@ (mov r8, r8)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2180      	movs	r1, #128	@ 0x80
 8004c0e:	0549      	lsls	r1, r1, #21
 8004c10:	430a      	orrs	r2, r1
 8004c12:	609a      	str	r2, [r3, #8]
 8004c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c16:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1a:	f383 8810 	msr	PRIMASK, r3
}
 8004c1e:	46c0      	nop			@ (mov r8, r8)
 8004c20:	e047      	b.n	8004cb2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	2380      	movs	r3, #128	@ 0x80
 8004c28:	015b      	lsls	r3, r3, #5
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d107      	bne.n	8004c3e <UART_Start_Receive_IT+0x1b6>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d103      	bne.n	8004c3e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4a23      	ldr	r2, [pc, #140]	@ (8004cc8 <UART_Start_Receive_IT+0x240>)
 8004c3a:	675a      	str	r2, [r3, #116]	@ 0x74
 8004c3c:	e002      	b.n	8004c44 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a22      	ldr	r2, [pc, #136]	@ (8004ccc <UART_Start_Receive_IT+0x244>)
 8004c42:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d019      	beq.n	8004c80 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c50:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c52:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c56:	2301      	movs	r3, #1
 8004c58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	f383 8810 	msr	PRIMASK, r3
}
 8004c60:	46c0      	nop			@ (mov r8, r8)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2190      	movs	r1, #144	@ 0x90
 8004c6e:	0049      	lsls	r1, r1, #1
 8004c70:	430a      	orrs	r2, r1
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c76:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7a:	f383 8810 	msr	PRIMASK, r3
}
 8004c7e:	e018      	b.n	8004cb2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c80:	f3ef 8310 	mrs	r3, PRIMASK
 8004c84:	613b      	str	r3, [r7, #16]
  return(result);
 8004c86:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004c88:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f383 8810 	msr	PRIMASK, r3
}
 8004c94:	46c0      	nop			@ (mov r8, r8)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2120      	movs	r1, #32
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ca8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	f383 8810 	msr	PRIMASK, r3
}
 8004cb0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b018      	add	sp, #96	@ 0x60
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	000001ff 	.word	0x000001ff
 8004cc0:	080054ed 	.word	0x080054ed
 8004cc4:	080051ad 	.word	0x080051ad
 8004cc8:	08004fe9 	.word	0x08004fe9
 8004ccc:	08004e25 	.word	0x08004e25

08004cd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08e      	sub	sp, #56	@ 0x38
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cdc:	617b      	str	r3, [r7, #20]
  return(result);
 8004cde:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	f383 8810 	msr	PRIMASK, r3
}
 8004cec:	46c0      	nop			@ (mov r8, r8)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4926      	ldr	r1, [pc, #152]	@ (8004d94 <UART_EndRxTransfer+0xc4>)
 8004cfa:	400a      	ands	r2, r1
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f383 8810 	msr	PRIMASK, r3
}
 8004d08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d0e:	623b      	str	r3, [r7, #32]
  return(result);
 8004d10:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d12:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d14:	2301      	movs	r3, #1
 8004d16:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1a:	f383 8810 	msr	PRIMASK, r3
}
 8004d1e:	46c0      	nop			@ (mov r8, r8)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	491b      	ldr	r1, [pc, #108]	@ (8004d98 <UART_EndRxTransfer+0xc8>)
 8004d2c:	400a      	ands	r2, r1
 8004d2e:	609a      	str	r2, [r3, #8]
 8004d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d36:	f383 8810 	msr	PRIMASK, r3
}
 8004d3a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d118      	bne.n	8004d76 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d44:	f3ef 8310 	mrs	r3, PRIMASK
 8004d48:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d4a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d4e:	2301      	movs	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f383 8810 	msr	PRIMASK, r3
}
 8004d58:	46c0      	nop			@ (mov r8, r8)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2110      	movs	r1, #16
 8004d66:	438a      	bics	r2, r1
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f383 8810 	msr	PRIMASK, r3
}
 8004d74:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	228c      	movs	r2, #140	@ 0x8c
 8004d7a:	2120      	movs	r1, #32
 8004d7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b00e      	add	sp, #56	@ 0x38
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	fffffedf 	.word	0xfffffedf
 8004d98:	effffffe 	.word	0xeffffffe

08004d9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	225e      	movs	r2, #94	@ 0x5e
 8004dae:	2100      	movs	r1, #0
 8004db0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2256      	movs	r2, #86	@ 0x56
 8004db6:	2100      	movs	r1, #0
 8004db8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f7ff f9c3 	bl	8004148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dc2:	46c0      	nop			@ (mov r8, r8)
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	b004      	add	sp, #16
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b086      	sub	sp, #24
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	2301      	movs	r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f383 8810 	msr	PRIMASK, r3
}
 8004de6:	46c0      	nop			@ (mov r8, r8)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2140      	movs	r1, #64	@ 0x40
 8004df4:	438a      	bics	r2, r1
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f383 8810 	msr	PRIMASK, r3
}
 8004e02:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2288      	movs	r2, #136	@ 0x88
 8004e08:	2120      	movs	r1, #32
 8004e0a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	0018      	movs	r0, r3
 8004e16:	f7ff f98f 	bl	8004138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e1a:	46c0      	nop			@ (mov r8, r8)
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b006      	add	sp, #24
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b094      	sub	sp, #80	@ 0x50
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e2c:	204e      	movs	r0, #78	@ 0x4e
 8004e2e:	183b      	adds	r3, r7, r0
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	2160      	movs	r1, #96	@ 0x60
 8004e34:	5a52      	ldrh	r2, [r2, r1]
 8004e36:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	228c      	movs	r2, #140	@ 0x8c
 8004e3c:	589b      	ldr	r3, [r3, r2]
 8004e3e:	2b22      	cmp	r3, #34	@ 0x22
 8004e40:	d000      	beq.n	8004e44 <UART_RxISR_8BIT+0x20>
 8004e42:	e0bf      	b.n	8004fc4 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e4a:	214c      	movs	r1, #76	@ 0x4c
 8004e4c:	187b      	adds	r3, r7, r1
 8004e4e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e50:	187b      	adds	r3, r7, r1
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	183b      	adds	r3, r7, r0
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	b2d9      	uxtb	r1, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e60:	400a      	ands	r2, r1
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	225e      	movs	r2, #94	@ 0x5e
 8004e74:	5a9b      	ldrh	r3, [r3, r2]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b299      	uxth	r1, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	225e      	movs	r2, #94	@ 0x5e
 8004e80:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	225e      	movs	r2, #94	@ 0x5e
 8004e86:	5a9b      	ldrh	r3, [r3, r2]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d000      	beq.n	8004e90 <UART_RxISR_8BIT+0x6c>
 8004e8e:	e0a1      	b.n	8004fd4 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e90:	f3ef 8310 	mrs	r3, PRIMASK
 8004e94:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea0:	f383 8810 	msr	PRIMASK, r3
}
 8004ea4:	46c0      	nop			@ (mov r8, r8)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	494a      	ldr	r1, [pc, #296]	@ (8004fdc <UART_RxISR_8BIT+0x1b8>)
 8004eb2:	400a      	ands	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ebc:	f383 8810 	msr	PRIMASK, r3
}
 8004ec0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eca:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ecc:	2301      	movs	r3, #1
 8004ece:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed2:	f383 8810 	msr	PRIMASK, r3
}
 8004ed6:	46c0      	nop			@ (mov r8, r8)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	438a      	bics	r2, r1
 8004ee6:	609a      	str	r2, [r3, #8]
 8004ee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eea:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eee:	f383 8810 	msr	PRIMASK, r3
}
 8004ef2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	228c      	movs	r2, #140	@ 0x8c
 8004ef8:	2120      	movs	r1, #32
 8004efa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a34      	ldr	r2, [pc, #208]	@ (8004fe0 <UART_RxISR_8BIT+0x1bc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d01f      	beq.n	8004f52 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	2380      	movs	r3, #128	@ 0x80
 8004f1a:	041b      	lsls	r3, r3, #16
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	d018      	beq.n	8004f52 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f20:	f3ef 8310 	mrs	r3, PRIMASK
 8004f24:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f26:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	f383 8810 	msr	PRIMASK, r3
}
 8004f34:	46c0      	nop			@ (mov r8, r8)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4928      	ldr	r1, [pc, #160]	@ (8004fe4 <UART_RxISR_8BIT+0x1c0>)
 8004f42:	400a      	ands	r2, r1
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	f383 8810 	msr	PRIMASK, r3
}
 8004f50:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d12f      	bne.n	8004fba <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f60:	f3ef 8310 	mrs	r3, PRIMASK
 8004f64:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f66:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f383 8810 	msr	PRIMASK, r3
}
 8004f74:	46c0      	nop			@ (mov r8, r8)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2110      	movs	r1, #16
 8004f82:	438a      	bics	r2, r1
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f383 8810 	msr	PRIMASK, r3
}
 8004f90:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	2210      	movs	r2, #16
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b10      	cmp	r3, #16
 8004f9e:	d103      	bne.n	8004fa8 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2210      	movs	r2, #16
 8004fa6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	225c      	movs	r2, #92	@ 0x5c
 8004fac:	5a9a      	ldrh	r2, [r3, r2]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	0011      	movs	r1, r2
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	f7ff f8d0 	bl	8004158 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fb8:	e00c      	b.n	8004fd4 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	f7fb fddd 	bl	8000b7c <HAL_UART_RxCpltCallback>
}
 8004fc2:	e007      	b.n	8004fd4 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2108      	movs	r1, #8
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	619a      	str	r2, [r3, #24]
}
 8004fd4:	46c0      	nop			@ (mov r8, r8)
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b014      	add	sp, #80	@ 0x50
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	fffffedf 	.word	0xfffffedf
 8004fe0:	40008000 	.word	0x40008000
 8004fe4:	fbffffff 	.word	0xfbffffff

08004fe8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b094      	sub	sp, #80	@ 0x50
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ff0:	204e      	movs	r0, #78	@ 0x4e
 8004ff2:	183b      	adds	r3, r7, r0
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	2160      	movs	r1, #96	@ 0x60
 8004ff8:	5a52      	ldrh	r2, [r2, r1]
 8004ffa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	228c      	movs	r2, #140	@ 0x8c
 8005000:	589b      	ldr	r3, [r3, r2]
 8005002:	2b22      	cmp	r3, #34	@ 0x22
 8005004:	d000      	beq.n	8005008 <UART_RxISR_16BIT+0x20>
 8005006:	e0bf      	b.n	8005188 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800500e:	214c      	movs	r1, #76	@ 0x4c
 8005010:	187b      	adds	r3, r7, r1
 8005012:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005018:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800501a:	187b      	adds	r3, r7, r1
 800501c:	183a      	adds	r2, r7, r0
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	8812      	ldrh	r2, [r2, #0]
 8005022:	4013      	ands	r3, r2
 8005024:	b29a      	uxth	r2, r3
 8005026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005028:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800502e:	1c9a      	adds	r2, r3, #2
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	225e      	movs	r2, #94	@ 0x5e
 8005038:	5a9b      	ldrh	r3, [r3, r2]
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b299      	uxth	r1, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	225e      	movs	r2, #94	@ 0x5e
 8005044:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	225e      	movs	r2, #94	@ 0x5e
 800504a:	5a9b      	ldrh	r3, [r3, r2]
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d000      	beq.n	8005054 <UART_RxISR_16BIT+0x6c>
 8005052:	e0a1      	b.n	8005198 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005054:	f3ef 8310 	mrs	r3, PRIMASK
 8005058:	623b      	str	r3, [r7, #32]
  return(result);
 800505a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800505c:	647b      	str	r3, [r7, #68]	@ 0x44
 800505e:	2301      	movs	r3, #1
 8005060:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	f383 8810 	msr	PRIMASK, r3
}
 8005068:	46c0      	nop			@ (mov r8, r8)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	494a      	ldr	r1, [pc, #296]	@ (80051a0 <UART_RxISR_16BIT+0x1b8>)
 8005076:	400a      	ands	r2, r1
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800507c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800507e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005080:	f383 8810 	msr	PRIMASK, r3
}
 8005084:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005086:	f3ef 8310 	mrs	r3, PRIMASK
 800508a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800508c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005090:	2301      	movs	r3, #1
 8005092:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005096:	f383 8810 	msr	PRIMASK, r3
}
 800509a:	46c0      	nop			@ (mov r8, r8)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2101      	movs	r1, #1
 80050a8:	438a      	bics	r2, r1
 80050aa:	609a      	str	r2, [r3, #8]
 80050ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ae:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b2:	f383 8810 	msr	PRIMASK, r3
}
 80050b6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	228c      	movs	r2, #140	@ 0x8c
 80050bc:	2120      	movs	r1, #32
 80050be:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a34      	ldr	r2, [pc, #208]	@ (80051a4 <UART_RxISR_16BIT+0x1bc>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d01f      	beq.n	8005116 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	2380      	movs	r3, #128	@ 0x80
 80050de:	041b      	lsls	r3, r3, #16
 80050e0:	4013      	ands	r3, r2
 80050e2:	d018      	beq.n	8005116 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e4:	f3ef 8310 	mrs	r3, PRIMASK
 80050e8:	617b      	str	r3, [r7, #20]
  return(result);
 80050ea:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050ee:	2301      	movs	r3, #1
 80050f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	f383 8810 	msr	PRIMASK, r3
}
 80050f8:	46c0      	nop			@ (mov r8, r8)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4928      	ldr	r1, [pc, #160]	@ (80051a8 <UART_RxISR_16BIT+0x1c0>)
 8005106:	400a      	ands	r2, r1
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800510c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	f383 8810 	msr	PRIMASK, r3
}
 8005114:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800511a:	2b01      	cmp	r3, #1
 800511c:	d12f      	bne.n	800517e <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005124:	f3ef 8310 	mrs	r3, PRIMASK
 8005128:	60bb      	str	r3, [r7, #8]
  return(result);
 800512a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800512e:	2301      	movs	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f383 8810 	msr	PRIMASK, r3
}
 8005138:	46c0      	nop			@ (mov r8, r8)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2110      	movs	r1, #16
 8005146:	438a      	bics	r2, r1
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f383 8810 	msr	PRIMASK, r3
}
 8005154:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	2210      	movs	r2, #16
 800515e:	4013      	ands	r3, r2
 8005160:	2b10      	cmp	r3, #16
 8005162:	d103      	bne.n	800516c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2210      	movs	r2, #16
 800516a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	225c      	movs	r2, #92	@ 0x5c
 8005170:	5a9a      	ldrh	r2, [r3, r2]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	0011      	movs	r1, r2
 8005176:	0018      	movs	r0, r3
 8005178:	f7fe ffee 	bl	8004158 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800517c:	e00c      	b.n	8005198 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	0018      	movs	r0, r3
 8005182:	f7fb fcfb 	bl	8000b7c <HAL_UART_RxCpltCallback>
}
 8005186:	e007      	b.n	8005198 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699a      	ldr	r2, [r3, #24]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2108      	movs	r1, #8
 8005194:	430a      	orrs	r2, r1
 8005196:	619a      	str	r2, [r3, #24]
}
 8005198:	46c0      	nop			@ (mov r8, r8)
 800519a:	46bd      	mov	sp, r7
 800519c:	b014      	add	sp, #80	@ 0x50
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	fffffedf 	.word	0xfffffedf
 80051a4:	40008000 	.word	0x40008000
 80051a8:	fbffffff 	.word	0xfbffffff

080051ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b0a0      	sub	sp, #128	@ 0x80
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80051b4:	237a      	movs	r3, #122	@ 0x7a
 80051b6:	18fb      	adds	r3, r7, r3
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	2160      	movs	r1, #96	@ 0x60
 80051bc:	5a52      	ldrh	r2, [r2, r1]
 80051be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	228c      	movs	r2, #140	@ 0x8c
 80051dc:	589b      	ldr	r3, [r3, r2]
 80051de:	2b22      	cmp	r3, #34	@ 0x22
 80051e0:	d000      	beq.n	80051e4 <UART_RxISR_8BIT_FIFOEN+0x38>
 80051e2:	e16a      	b.n	80054ba <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80051e4:	236e      	movs	r3, #110	@ 0x6e
 80051e6:	18fb      	adds	r3, r7, r3
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	2168      	movs	r1, #104	@ 0x68
 80051ec:	5a52      	ldrh	r2, [r2, r1]
 80051ee:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051f0:	e111      	b.n	8005416 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051f8:	216c      	movs	r1, #108	@ 0x6c
 80051fa:	187b      	adds	r3, r7, r1
 80051fc:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051fe:	187b      	adds	r3, r7, r1
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b2da      	uxtb	r2, r3
 8005204:	237a      	movs	r3, #122	@ 0x7a
 8005206:	18fb      	adds	r3, r7, r3
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b2d9      	uxtb	r1, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005210:	400a      	ands	r2, r1
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	225e      	movs	r2, #94	@ 0x5e
 8005224:	5a9b      	ldrh	r3, [r3, r2]
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b299      	uxth	r1, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	225e      	movs	r2, #94	@ 0x5e
 8005230:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800523a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800523c:	2207      	movs	r2, #7
 800523e:	4013      	ands	r3, r2
 8005240:	d049      	beq.n	80052d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005242:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005244:	2201      	movs	r2, #1
 8005246:	4013      	ands	r3, r2
 8005248:	d010      	beq.n	800526c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800524a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800524c:	2380      	movs	r3, #128	@ 0x80
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	4013      	ands	r3, r2
 8005252:	d00b      	beq.n	800526c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2201      	movs	r2, #1
 800525a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2290      	movs	r2, #144	@ 0x90
 8005260:	589b      	ldr	r3, [r3, r2]
 8005262:	2201      	movs	r2, #1
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2190      	movs	r1, #144	@ 0x90
 800526a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800526c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800526e:	2202      	movs	r2, #2
 8005270:	4013      	ands	r3, r2
 8005272:	d00f      	beq.n	8005294 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005274:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005276:	2201      	movs	r2, #1
 8005278:	4013      	ands	r3, r2
 800527a:	d00b      	beq.n	8005294 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2202      	movs	r2, #2
 8005282:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2290      	movs	r2, #144	@ 0x90
 8005288:	589b      	ldr	r3, [r3, r2]
 800528a:	2204      	movs	r2, #4
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2190      	movs	r1, #144	@ 0x90
 8005292:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005294:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005296:	2204      	movs	r2, #4
 8005298:	4013      	ands	r3, r2
 800529a:	d00f      	beq.n	80052bc <UART_RxISR_8BIT_FIFOEN+0x110>
 800529c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800529e:	2201      	movs	r2, #1
 80052a0:	4013      	ands	r3, r2
 80052a2:	d00b      	beq.n	80052bc <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2204      	movs	r2, #4
 80052aa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2290      	movs	r2, #144	@ 0x90
 80052b0:	589b      	ldr	r3, [r3, r2]
 80052b2:	2202      	movs	r2, #2
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2190      	movs	r1, #144	@ 0x90
 80052ba:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2290      	movs	r2, #144	@ 0x90
 80052c0:	589b      	ldr	r3, [r3, r2]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d007      	beq.n	80052d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	0018      	movs	r0, r3
 80052ca:	f7fe ff3d 	bl	8004148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2290      	movs	r2, #144	@ 0x90
 80052d2:	2100      	movs	r1, #0
 80052d4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	225e      	movs	r2, #94	@ 0x5e
 80052da:	5a9b      	ldrh	r3, [r3, r2]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d000      	beq.n	80052e4 <UART_RxISR_8BIT_FIFOEN+0x138>
 80052e2:	e098      	b.n	8005416 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e4:	f3ef 8310 	mrs	r3, PRIMASK
 80052e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80052ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052ee:	2301      	movs	r3, #1
 80052f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052f4:	f383 8810 	msr	PRIMASK, r3
}
 80052f8:	46c0      	nop			@ (mov r8, r8)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4973      	ldr	r1, [pc, #460]	@ (80054d4 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8005306:	400a      	ands	r2, r1
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800530c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800530e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005310:	f383 8810 	msr	PRIMASK, r3
}
 8005314:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005316:	f3ef 8310 	mrs	r3, PRIMASK
 800531a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800531c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800531e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005320:	2301      	movs	r3, #1
 8005322:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005324:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005326:	f383 8810 	msr	PRIMASK, r3
}
 800532a:	46c0      	nop			@ (mov r8, r8)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4968      	ldr	r1, [pc, #416]	@ (80054d8 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8005338:	400a      	ands	r2, r1
 800533a:	609a      	str	r2, [r3, #8]
 800533c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800533e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005342:	f383 8810 	msr	PRIMASK, r3
}
 8005346:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	228c      	movs	r2, #140	@ 0x8c
 800534c:	2120      	movs	r1, #32
 800534e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a5e      	ldr	r2, [pc, #376]	@ (80054dc <UART_RxISR_8BIT_FIFOEN+0x330>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d01f      	beq.n	80053a6 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	2380      	movs	r3, #128	@ 0x80
 800536e:	041b      	lsls	r3, r3, #16
 8005370:	4013      	ands	r3, r2
 8005372:	d018      	beq.n	80053a6 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005374:	f3ef 8310 	mrs	r3, PRIMASK
 8005378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800537a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800537c:	663b      	str	r3, [r7, #96]	@ 0x60
 800537e:	2301      	movs	r3, #1
 8005380:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	f383 8810 	msr	PRIMASK, r3
}
 8005388:	46c0      	nop			@ (mov r8, r8)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4952      	ldr	r1, [pc, #328]	@ (80054e0 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8005396:	400a      	ands	r2, r1
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800539c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a0:	f383 8810 	msr	PRIMASK, r3
}
 80053a4:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d12f      	bne.n	800540e <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053b4:	f3ef 8310 	mrs	r3, PRIMASK
 80053b8:	623b      	str	r3, [r7, #32]
  return(result);
 80053ba:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053be:	2301      	movs	r3, #1
 80053c0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	f383 8810 	msr	PRIMASK, r3
}
 80053c8:	46c0      	nop			@ (mov r8, r8)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2110      	movs	r1, #16
 80053d6:	438a      	bics	r2, r1
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e0:	f383 8810 	msr	PRIMASK, r3
}
 80053e4:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	2210      	movs	r2, #16
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d103      	bne.n	80053fc <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2210      	movs	r2, #16
 80053fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	225c      	movs	r2, #92	@ 0x5c
 8005400:	5a9a      	ldrh	r2, [r3, r2]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	0011      	movs	r1, r2
 8005406:	0018      	movs	r0, r3
 8005408:	f7fe fea6 	bl	8004158 <HAL_UARTEx_RxEventCallback>
 800540c:	e003      	b.n	8005416 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	0018      	movs	r0, r3
 8005412:	f7fb fbb3 	bl	8000b7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005416:	236e      	movs	r3, #110	@ 0x6e
 8005418:	18fb      	adds	r3, r7, r3
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d004      	beq.n	800542a <UART_RxISR_8BIT_FIFOEN+0x27e>
 8005420:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005422:	2220      	movs	r2, #32
 8005424:	4013      	ands	r3, r2
 8005426:	d000      	beq.n	800542a <UART_RxISR_8BIT_FIFOEN+0x27e>
 8005428:	e6e3      	b.n	80051f2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800542a:	205a      	movs	r0, #90	@ 0x5a
 800542c:	183b      	adds	r3, r7, r0
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	215e      	movs	r1, #94	@ 0x5e
 8005432:	5a52      	ldrh	r2, [r2, r1]
 8005434:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005436:	0001      	movs	r1, r0
 8005438:	187b      	adds	r3, r7, r1
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d044      	beq.n	80054ca <UART_RxISR_8BIT_FIFOEN+0x31e>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2268      	movs	r2, #104	@ 0x68
 8005444:	5a9b      	ldrh	r3, [r3, r2]
 8005446:	187a      	adds	r2, r7, r1
 8005448:	8812      	ldrh	r2, [r2, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d23d      	bcs.n	80054ca <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800544e:	f3ef 8310 	mrs	r3, PRIMASK
 8005452:	60bb      	str	r3, [r7, #8]
  return(result);
 8005454:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005456:	657b      	str	r3, [r7, #84]	@ 0x54
 8005458:	2301      	movs	r3, #1
 800545a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f383 8810 	msr	PRIMASK, r3
}
 8005462:	46c0      	nop			@ (mov r8, r8)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	491d      	ldr	r1, [pc, #116]	@ (80054e4 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8005470:	400a      	ands	r2, r1
 8005472:	609a      	str	r2, [r3, #8]
 8005474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005476:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f383 8810 	msr	PRIMASK, r3
}
 800547e:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a19      	ldr	r2, [pc, #100]	@ (80054e8 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8005484:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005486:	f3ef 8310 	mrs	r3, PRIMASK
 800548a:	617b      	str	r3, [r7, #20]
  return(result);
 800548c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800548e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005490:	2301      	movs	r3, #1
 8005492:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	f383 8810 	msr	PRIMASK, r3
}
 800549a:	46c0      	nop			@ (mov r8, r8)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2120      	movs	r1, #32
 80054a8:	430a      	orrs	r2, r1
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f383 8810 	msr	PRIMASK, r3
}
 80054b6:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054b8:	e007      	b.n	80054ca <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	699a      	ldr	r2, [r3, #24]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2108      	movs	r1, #8
 80054c6:	430a      	orrs	r2, r1
 80054c8:	619a      	str	r2, [r3, #24]
}
 80054ca:	46c0      	nop			@ (mov r8, r8)
 80054cc:	46bd      	mov	sp, r7
 80054ce:	b020      	add	sp, #128	@ 0x80
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	46c0      	nop			@ (mov r8, r8)
 80054d4:	fffffeff 	.word	0xfffffeff
 80054d8:	effffffe 	.word	0xeffffffe
 80054dc:	40008000 	.word	0x40008000
 80054e0:	fbffffff 	.word	0xfbffffff
 80054e4:	efffffff 	.word	0xefffffff
 80054e8:	08004e25 	.word	0x08004e25

080054ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b0a2      	sub	sp, #136	@ 0x88
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80054f4:	2382      	movs	r3, #130	@ 0x82
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	2160      	movs	r1, #96	@ 0x60
 80054fc:	5a52      	ldrh	r2, [r2, r1]
 80054fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	2284      	movs	r2, #132	@ 0x84
 8005508:	18ba      	adds	r2, r7, r2
 800550a:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	228c      	movs	r2, #140	@ 0x8c
 8005520:	589b      	ldr	r3, [r3, r2]
 8005522:	2b22      	cmp	r3, #34	@ 0x22
 8005524:	d000      	beq.n	8005528 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8005526:	e174      	b.n	8005812 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005528:	2376      	movs	r3, #118	@ 0x76
 800552a:	18fb      	adds	r3, r7, r3
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	2168      	movs	r1, #104	@ 0x68
 8005530:	5a52      	ldrh	r2, [r2, r1]
 8005532:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005534:	e119      	b.n	800576a <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800553c:	2174      	movs	r1, #116	@ 0x74
 800553e:	187b      	adds	r3, r7, r1
 8005540:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005546:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005548:	187b      	adds	r3, r7, r1
 800554a:	2282      	movs	r2, #130	@ 0x82
 800554c:	18ba      	adds	r2, r7, r2
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	8812      	ldrh	r2, [r2, #0]
 8005552:	4013      	ands	r3, r2
 8005554:	b29a      	uxth	r2, r3
 8005556:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005558:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800555e:	1c9a      	adds	r2, r3, #2
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	225e      	movs	r2, #94	@ 0x5e
 8005568:	5a9b      	ldrh	r3, [r3, r2]
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b299      	uxth	r1, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	225e      	movs	r2, #94	@ 0x5e
 8005574:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	2184      	movs	r1, #132	@ 0x84
 800557e:	187a      	adds	r2, r7, r1
 8005580:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005582:	187b      	adds	r3, r7, r1
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2207      	movs	r2, #7
 8005588:	4013      	ands	r3, r2
 800558a:	d04e      	beq.n	800562a <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800558c:	187b      	adds	r3, r7, r1
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2201      	movs	r2, #1
 8005592:	4013      	ands	r3, r2
 8005594:	d010      	beq.n	80055b8 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005596:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005598:	2380      	movs	r3, #128	@ 0x80
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	4013      	ands	r3, r2
 800559e:	d00b      	beq.n	80055b8 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2201      	movs	r2, #1
 80055a6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2290      	movs	r2, #144	@ 0x90
 80055ac:	589b      	ldr	r3, [r3, r2]
 80055ae:	2201      	movs	r2, #1
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2190      	movs	r1, #144	@ 0x90
 80055b6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055b8:	2384      	movs	r3, #132	@ 0x84
 80055ba:	18fb      	adds	r3, r7, r3
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2202      	movs	r2, #2
 80055c0:	4013      	ands	r3, r2
 80055c2:	d00f      	beq.n	80055e4 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80055c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055c6:	2201      	movs	r2, #1
 80055c8:	4013      	ands	r3, r2
 80055ca:	d00b      	beq.n	80055e4 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2202      	movs	r2, #2
 80055d2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2290      	movs	r2, #144	@ 0x90
 80055d8:	589b      	ldr	r3, [r3, r2]
 80055da:	2204      	movs	r2, #4
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2190      	movs	r1, #144	@ 0x90
 80055e2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055e4:	2384      	movs	r3, #132	@ 0x84
 80055e6:	18fb      	adds	r3, r7, r3
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2204      	movs	r2, #4
 80055ec:	4013      	ands	r3, r2
 80055ee:	d00f      	beq.n	8005610 <UART_RxISR_16BIT_FIFOEN+0x124>
 80055f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055f2:	2201      	movs	r2, #1
 80055f4:	4013      	ands	r3, r2
 80055f6:	d00b      	beq.n	8005610 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2204      	movs	r2, #4
 80055fe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2290      	movs	r2, #144	@ 0x90
 8005604:	589b      	ldr	r3, [r3, r2]
 8005606:	2202      	movs	r2, #2
 8005608:	431a      	orrs	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2190      	movs	r1, #144	@ 0x90
 800560e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2290      	movs	r2, #144	@ 0x90
 8005614:	589b      	ldr	r3, [r3, r2]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d007      	beq.n	800562a <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	0018      	movs	r0, r3
 800561e:	f7fe fd93 	bl	8004148 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2290      	movs	r2, #144	@ 0x90
 8005626:	2100      	movs	r1, #0
 8005628:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	225e      	movs	r2, #94	@ 0x5e
 800562e:	5a9b      	ldrh	r3, [r3, r2]
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d000      	beq.n	8005638 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005636:	e098      	b.n	800576a <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005638:	f3ef 8310 	mrs	r3, PRIMASK
 800563c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800563e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005640:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005642:	2301      	movs	r3, #1
 8005644:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005648:	f383 8810 	msr	PRIMASK, r3
}
 800564c:	46c0      	nop			@ (mov r8, r8)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4974      	ldr	r1, [pc, #464]	@ (800582c <UART_RxISR_16BIT_FIFOEN+0x340>)
 800565a:	400a      	ands	r2, r1
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005660:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005664:	f383 8810 	msr	PRIMASK, r3
}
 8005668:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800566a:	f3ef 8310 	mrs	r3, PRIMASK
 800566e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005670:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005672:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005674:	2301      	movs	r3, #1
 8005676:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800567a:	f383 8810 	msr	PRIMASK, r3
}
 800567e:	46c0      	nop			@ (mov r8, r8)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4969      	ldr	r1, [pc, #420]	@ (8005830 <UART_RxISR_16BIT_FIFOEN+0x344>)
 800568c:	400a      	ands	r2, r1
 800568e:	609a      	str	r2, [r3, #8]
 8005690:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005692:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005696:	f383 8810 	msr	PRIMASK, r3
}
 800569a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	228c      	movs	r2, #140	@ 0x8c
 80056a0:	2120      	movs	r1, #32
 80056a2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a5f      	ldr	r2, [pc, #380]	@ (8005834 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d01f      	beq.n	80056fa <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	2380      	movs	r3, #128	@ 0x80
 80056c2:	041b      	lsls	r3, r3, #16
 80056c4:	4013      	ands	r3, r2
 80056c6:	d018      	beq.n	80056fa <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056c8:	f3ef 8310 	mrs	r3, PRIMASK
 80056cc:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80056ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80056d2:	2301      	movs	r3, #1
 80056d4:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d8:	f383 8810 	msr	PRIMASK, r3
}
 80056dc:	46c0      	nop			@ (mov r8, r8)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4953      	ldr	r1, [pc, #332]	@ (8005838 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 80056ea:	400a      	ands	r2, r1
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f4:	f383 8810 	msr	PRIMASK, r3
}
 80056f8:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d12f      	bne.n	8005762 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005708:	f3ef 8310 	mrs	r3, PRIMASK
 800570c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800570e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005710:	663b      	str	r3, [r7, #96]	@ 0x60
 8005712:	2301      	movs	r3, #1
 8005714:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005718:	f383 8810 	msr	PRIMASK, r3
}
 800571c:	46c0      	nop			@ (mov r8, r8)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2110      	movs	r1, #16
 800572a:	438a      	bics	r2, r1
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005734:	f383 8810 	msr	PRIMASK, r3
}
 8005738:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	2210      	movs	r2, #16
 8005742:	4013      	ands	r3, r2
 8005744:	2b10      	cmp	r3, #16
 8005746:	d103      	bne.n	8005750 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2210      	movs	r2, #16
 800574e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	225c      	movs	r2, #92	@ 0x5c
 8005754:	5a9a      	ldrh	r2, [r3, r2]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	0011      	movs	r1, r2
 800575a:	0018      	movs	r0, r3
 800575c:	f7fe fcfc 	bl	8004158 <HAL_UARTEx_RxEventCallback>
 8005760:	e003      	b.n	800576a <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	0018      	movs	r0, r3
 8005766:	f7fb fa09 	bl	8000b7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800576a:	2376      	movs	r3, #118	@ 0x76
 800576c:	18fb      	adds	r3, r7, r3
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d006      	beq.n	8005782 <UART_RxISR_16BIT_FIFOEN+0x296>
 8005774:	2384      	movs	r3, #132	@ 0x84
 8005776:	18fb      	adds	r3, r7, r3
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2220      	movs	r2, #32
 800577c:	4013      	ands	r3, r2
 800577e:	d000      	beq.n	8005782 <UART_RxISR_16BIT_FIFOEN+0x296>
 8005780:	e6d9      	b.n	8005536 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005782:	205e      	movs	r0, #94	@ 0x5e
 8005784:	183b      	adds	r3, r7, r0
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	215e      	movs	r1, #94	@ 0x5e
 800578a:	5a52      	ldrh	r2, [r2, r1]
 800578c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800578e:	0001      	movs	r1, r0
 8005790:	187b      	adds	r3, r7, r1
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d044      	beq.n	8005822 <UART_RxISR_16BIT_FIFOEN+0x336>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2268      	movs	r2, #104	@ 0x68
 800579c:	5a9b      	ldrh	r3, [r3, r2]
 800579e:	187a      	adds	r2, r7, r1
 80057a0:	8812      	ldrh	r2, [r2, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d23d      	bcs.n	8005822 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a6:	f3ef 8310 	mrs	r3, PRIMASK
 80057aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80057ac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80057ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057b0:	2301      	movs	r3, #1
 80057b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f383 8810 	msr	PRIMASK, r3
}
 80057ba:	46c0      	nop			@ (mov r8, r8)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	491d      	ldr	r1, [pc, #116]	@ (800583c <UART_RxISR_16BIT_FIFOEN+0x350>)
 80057c8:	400a      	ands	r2, r1
 80057ca:	609a      	str	r2, [r3, #8]
 80057cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f383 8810 	msr	PRIMASK, r3
}
 80057d6:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a19      	ldr	r2, [pc, #100]	@ (8005840 <UART_RxISR_16BIT_FIFOEN+0x354>)
 80057dc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057de:	f3ef 8310 	mrs	r3, PRIMASK
 80057e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80057e4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80057e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80057e8:	2301      	movs	r3, #1
 80057ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f383 8810 	msr	PRIMASK, r3
}
 80057f2:	46c0      	nop			@ (mov r8, r8)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2120      	movs	r1, #32
 8005800:	430a      	orrs	r2, r1
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005806:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	f383 8810 	msr	PRIMASK, r3
}
 800580e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005810:	e007      	b.n	8005822 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699a      	ldr	r2, [r3, #24]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2108      	movs	r1, #8
 800581e:	430a      	orrs	r2, r1
 8005820:	619a      	str	r2, [r3, #24]
}
 8005822:	46c0      	nop			@ (mov r8, r8)
 8005824:	46bd      	mov	sp, r7
 8005826:	b022      	add	sp, #136	@ 0x88
 8005828:	bd80      	pop	{r7, pc}
 800582a:	46c0      	nop			@ (mov r8, r8)
 800582c:	fffffeff 	.word	0xfffffeff
 8005830:	effffffe 	.word	0xeffffffe
 8005834:	40008000 	.word	0x40008000
 8005838:	fbffffff 	.word	0xfbffffff
 800583c:	efffffff 	.word	0xefffffff
 8005840:	08004fe9 	.word	0x08004fe9

08005844 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800584c:	46c0      	nop			@ (mov r8, r8)
 800584e:	46bd      	mov	sp, r7
 8005850:	b002      	add	sp, #8
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800585c:	46c0      	nop			@ (mov r8, r8)
 800585e:	46bd      	mov	sp, r7
 8005860:	b002      	add	sp, #8
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800586c:	46c0      	nop			@ (mov r8, r8)
 800586e:	46bd      	mov	sp, r7
 8005870:	b002      	add	sp, #8
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2284      	movs	r2, #132	@ 0x84
 8005880:	5c9b      	ldrb	r3, [r3, r2]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_UARTEx_DisableFifoMode+0x16>
 8005886:	2302      	movs	r3, #2
 8005888:	e027      	b.n	80058da <HAL_UARTEx_DisableFifoMode+0x66>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2284      	movs	r2, #132	@ 0x84
 800588e:	2101      	movs	r1, #1
 8005890:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2288      	movs	r2, #136	@ 0x88
 8005896:	2124      	movs	r1, #36	@ 0x24
 8005898:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2101      	movs	r1, #1
 80058ae:	438a      	bics	r2, r1
 80058b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4a0b      	ldr	r2, [pc, #44]	@ (80058e4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2288      	movs	r2, #136	@ 0x88
 80058cc:	2120      	movs	r1, #32
 80058ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2284      	movs	r2, #132	@ 0x84
 80058d4:	2100      	movs	r1, #0
 80058d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	0018      	movs	r0, r3
 80058dc:	46bd      	mov	sp, r7
 80058de:	b004      	add	sp, #16
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	46c0      	nop			@ (mov r8, r8)
 80058e4:	dfffffff 	.word	0xdfffffff

080058e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2284      	movs	r2, #132	@ 0x84
 80058f6:	5c9b      	ldrb	r3, [r3, r2]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058fc:	2302      	movs	r3, #2
 80058fe:	e02e      	b.n	800595e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2284      	movs	r2, #132	@ 0x84
 8005904:	2101      	movs	r1, #1
 8005906:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2288      	movs	r2, #136	@ 0x88
 800590c:	2124      	movs	r1, #36	@ 0x24
 800590e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2101      	movs	r1, #1
 8005924:	438a      	bics	r2, r1
 8005926:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	08d9      	lsrs	r1, r3, #3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	0018      	movs	r0, r3
 8005940:	f000 f854 	bl	80059ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2288      	movs	r2, #136	@ 0x88
 8005950:	2120      	movs	r1, #32
 8005952:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2284      	movs	r2, #132	@ 0x84
 8005958:	2100      	movs	r1, #0
 800595a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	0018      	movs	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	b004      	add	sp, #16
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2284      	movs	r2, #132	@ 0x84
 8005976:	5c9b      	ldrb	r3, [r3, r2]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d101      	bne.n	8005980 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800597c:	2302      	movs	r3, #2
 800597e:	e02f      	b.n	80059e0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2284      	movs	r2, #132	@ 0x84
 8005984:	2101      	movs	r1, #1
 8005986:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2288      	movs	r2, #136	@ 0x88
 800598c:	2124      	movs	r1, #36	@ 0x24
 800598e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2101      	movs	r1, #1
 80059a4:	438a      	bics	r2, r1
 80059a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	4a0e      	ldr	r2, [pc, #56]	@ (80059e8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	0019      	movs	r1, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	0018      	movs	r0, r3
 80059c2:	f000 f813 	bl	80059ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2288      	movs	r2, #136	@ 0x88
 80059d2:	2120      	movs	r1, #32
 80059d4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2284      	movs	r2, #132	@ 0x84
 80059da:	2100      	movs	r1, #0
 80059dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	0018      	movs	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	b004      	add	sp, #16
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	f1ffffff 	.word	0xf1ffffff

080059ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80059ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d108      	bne.n	8005a0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	226a      	movs	r2, #106	@ 0x6a
 8005a00:	2101      	movs	r1, #1
 8005a02:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2268      	movs	r2, #104	@ 0x68
 8005a08:	2101      	movs	r1, #1
 8005a0a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a0c:	e043      	b.n	8005a96 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a0e:	260f      	movs	r6, #15
 8005a10:	19bb      	adds	r3, r7, r6
 8005a12:	2208      	movs	r2, #8
 8005a14:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a16:	200e      	movs	r0, #14
 8005a18:	183b      	adds	r3, r7, r0
 8005a1a:	2208      	movs	r2, #8
 8005a1c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	0e5b      	lsrs	r3, r3, #25
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	240d      	movs	r4, #13
 8005a2a:	193b      	adds	r3, r7, r4
 8005a2c:	2107      	movs	r1, #7
 8005a2e:	400a      	ands	r2, r1
 8005a30:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	0f5b      	lsrs	r3, r3, #29
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	250c      	movs	r5, #12
 8005a3e:	197b      	adds	r3, r7, r5
 8005a40:	2107      	movs	r1, #7
 8005a42:	400a      	ands	r2, r1
 8005a44:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a46:	183b      	adds	r3, r7, r0
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	197a      	adds	r2, r7, r5
 8005a4c:	7812      	ldrb	r2, [r2, #0]
 8005a4e:	4914      	ldr	r1, [pc, #80]	@ (8005aa0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005a50:	5c8a      	ldrb	r2, [r1, r2]
 8005a52:	435a      	muls	r2, r3
 8005a54:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a56:	197b      	adds	r3, r7, r5
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	4a12      	ldr	r2, [pc, #72]	@ (8005aa4 <UARTEx_SetNbDataToProcess+0xb8>)
 8005a5c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a5e:	0019      	movs	r1, r3
 8005a60:	f7fa fbf6 	bl	8000250 <__divsi3>
 8005a64:	0003      	movs	r3, r0
 8005a66:	b299      	uxth	r1, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	226a      	movs	r2, #106	@ 0x6a
 8005a6c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a6e:	19bb      	adds	r3, r7, r6
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	193a      	adds	r2, r7, r4
 8005a74:	7812      	ldrb	r2, [r2, #0]
 8005a76:	490a      	ldr	r1, [pc, #40]	@ (8005aa0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005a78:	5c8a      	ldrb	r2, [r1, r2]
 8005a7a:	435a      	muls	r2, r3
 8005a7c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a7e:	193b      	adds	r3, r7, r4
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	4a08      	ldr	r2, [pc, #32]	@ (8005aa4 <UARTEx_SetNbDataToProcess+0xb8>)
 8005a84:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a86:	0019      	movs	r1, r3
 8005a88:	f7fa fbe2 	bl	8000250 <__divsi3>
 8005a8c:	0003      	movs	r3, r0
 8005a8e:	b299      	uxth	r1, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2268      	movs	r2, #104	@ 0x68
 8005a94:	5299      	strh	r1, [r3, r2]
}
 8005a96:	46c0      	nop			@ (mov r8, r8)
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	b005      	add	sp, #20
 8005a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a9e:	46c0      	nop			@ (mov r8, r8)
 8005aa0:	08006554 	.word	0x08006554
 8005aa4:	0800655c 	.word	0x0800655c

08005aa8 <siprintf>:
 8005aa8:	b40e      	push	{r1, r2, r3}
 8005aaa:	b500      	push	{lr}
 8005aac:	490b      	ldr	r1, [pc, #44]	@ (8005adc <siprintf+0x34>)
 8005aae:	b09c      	sub	sp, #112	@ 0x70
 8005ab0:	ab1d      	add	r3, sp, #116	@ 0x74
 8005ab2:	9002      	str	r0, [sp, #8]
 8005ab4:	9006      	str	r0, [sp, #24]
 8005ab6:	9107      	str	r1, [sp, #28]
 8005ab8:	9104      	str	r1, [sp, #16]
 8005aba:	4809      	ldr	r0, [pc, #36]	@ (8005ae0 <siprintf+0x38>)
 8005abc:	4909      	ldr	r1, [pc, #36]	@ (8005ae4 <siprintf+0x3c>)
 8005abe:	cb04      	ldmia	r3!, {r2}
 8005ac0:	9105      	str	r1, [sp, #20]
 8005ac2:	6800      	ldr	r0, [r0, #0]
 8005ac4:	a902      	add	r1, sp, #8
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	f000 f9b2 	bl	8005e30 <_svfiprintf_r>
 8005acc:	2200      	movs	r2, #0
 8005ace:	9b02      	ldr	r3, [sp, #8]
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	b01c      	add	sp, #112	@ 0x70
 8005ad4:	bc08      	pop	{r3}
 8005ad6:	b003      	add	sp, #12
 8005ad8:	4718      	bx	r3
 8005ada:	46c0      	nop			@ (mov r8, r8)
 8005adc:	7fffffff 	.word	0x7fffffff
 8005ae0:	20000070 	.word	0x20000070
 8005ae4:	ffff0208 	.word	0xffff0208

08005ae8 <memset>:
 8005ae8:	0003      	movs	r3, r0
 8005aea:	1882      	adds	r2, r0, r2
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d100      	bne.n	8005af2 <memset+0xa>
 8005af0:	4770      	bx	lr
 8005af2:	7019      	strb	r1, [r3, #0]
 8005af4:	3301      	adds	r3, #1
 8005af6:	e7f9      	b.n	8005aec <memset+0x4>

08005af8 <strncpy>:
 8005af8:	0003      	movs	r3, r0
 8005afa:	b530      	push	{r4, r5, lr}
 8005afc:	001d      	movs	r5, r3
 8005afe:	2a00      	cmp	r2, #0
 8005b00:	d006      	beq.n	8005b10 <strncpy+0x18>
 8005b02:	780c      	ldrb	r4, [r1, #0]
 8005b04:	3a01      	subs	r2, #1
 8005b06:	3301      	adds	r3, #1
 8005b08:	702c      	strb	r4, [r5, #0]
 8005b0a:	3101      	adds	r1, #1
 8005b0c:	2c00      	cmp	r4, #0
 8005b0e:	d1f5      	bne.n	8005afc <strncpy+0x4>
 8005b10:	2100      	movs	r1, #0
 8005b12:	189a      	adds	r2, r3, r2
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d100      	bne.n	8005b1a <strncpy+0x22>
 8005b18:	bd30      	pop	{r4, r5, pc}
 8005b1a:	7019      	strb	r1, [r3, #0]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	e7f9      	b.n	8005b14 <strncpy+0x1c>

08005b20 <__errno>:
 8005b20:	4b01      	ldr	r3, [pc, #4]	@ (8005b28 <__errno+0x8>)
 8005b22:	6818      	ldr	r0, [r3, #0]
 8005b24:	4770      	bx	lr
 8005b26:	46c0      	nop			@ (mov r8, r8)
 8005b28:	20000070 	.word	0x20000070

08005b2c <__libc_init_array>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	2600      	movs	r6, #0
 8005b30:	4c0c      	ldr	r4, [pc, #48]	@ (8005b64 <__libc_init_array+0x38>)
 8005b32:	4d0d      	ldr	r5, [pc, #52]	@ (8005b68 <__libc_init_array+0x3c>)
 8005b34:	1b64      	subs	r4, r4, r5
 8005b36:	10a4      	asrs	r4, r4, #2
 8005b38:	42a6      	cmp	r6, r4
 8005b3a:	d109      	bne.n	8005b50 <__libc_init_array+0x24>
 8005b3c:	2600      	movs	r6, #0
 8005b3e:	f000 fc65 	bl	800640c <_init>
 8005b42:	4c0a      	ldr	r4, [pc, #40]	@ (8005b6c <__libc_init_array+0x40>)
 8005b44:	4d0a      	ldr	r5, [pc, #40]	@ (8005b70 <__libc_init_array+0x44>)
 8005b46:	1b64      	subs	r4, r4, r5
 8005b48:	10a4      	asrs	r4, r4, #2
 8005b4a:	42a6      	cmp	r6, r4
 8005b4c:	d105      	bne.n	8005b5a <__libc_init_array+0x2e>
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
 8005b50:	00b3      	lsls	r3, r6, #2
 8005b52:	58eb      	ldr	r3, [r5, r3]
 8005b54:	4798      	blx	r3
 8005b56:	3601      	adds	r6, #1
 8005b58:	e7ee      	b.n	8005b38 <__libc_init_array+0xc>
 8005b5a:	00b3      	lsls	r3, r6, #2
 8005b5c:	58eb      	ldr	r3, [r5, r3]
 8005b5e:	4798      	blx	r3
 8005b60:	3601      	adds	r6, #1
 8005b62:	e7f2      	b.n	8005b4a <__libc_init_array+0x1e>
 8005b64:	080065a0 	.word	0x080065a0
 8005b68:	080065a0 	.word	0x080065a0
 8005b6c:	080065a4 	.word	0x080065a4
 8005b70:	080065a0 	.word	0x080065a0

08005b74 <__retarget_lock_acquire_recursive>:
 8005b74:	4770      	bx	lr

08005b76 <__retarget_lock_release_recursive>:
 8005b76:	4770      	bx	lr

08005b78 <_free_r>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	0005      	movs	r5, r0
 8005b7c:	1e0c      	subs	r4, r1, #0
 8005b7e:	d010      	beq.n	8005ba2 <_free_r+0x2a>
 8005b80:	3c04      	subs	r4, #4
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	da00      	bge.n	8005b8a <_free_r+0x12>
 8005b88:	18e4      	adds	r4, r4, r3
 8005b8a:	0028      	movs	r0, r5
 8005b8c:	f000 f8e0 	bl	8005d50 <__malloc_lock>
 8005b90:	4a1d      	ldr	r2, [pc, #116]	@ (8005c08 <_free_r+0x90>)
 8005b92:	6813      	ldr	r3, [r2, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d105      	bne.n	8005ba4 <_free_r+0x2c>
 8005b98:	6063      	str	r3, [r4, #4]
 8005b9a:	6014      	str	r4, [r2, #0]
 8005b9c:	0028      	movs	r0, r5
 8005b9e:	f000 f8df 	bl	8005d60 <__malloc_unlock>
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	d908      	bls.n	8005bba <_free_r+0x42>
 8005ba8:	6820      	ldr	r0, [r4, #0]
 8005baa:	1821      	adds	r1, r4, r0
 8005bac:	428b      	cmp	r3, r1
 8005bae:	d1f3      	bne.n	8005b98 <_free_r+0x20>
 8005bb0:	6819      	ldr	r1, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	1809      	adds	r1, r1, r0
 8005bb6:	6021      	str	r1, [r4, #0]
 8005bb8:	e7ee      	b.n	8005b98 <_free_r+0x20>
 8005bba:	001a      	movs	r2, r3
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <_free_r+0x4e>
 8005bc2:	42a3      	cmp	r3, r4
 8005bc4:	d9f9      	bls.n	8005bba <_free_r+0x42>
 8005bc6:	6811      	ldr	r1, [r2, #0]
 8005bc8:	1850      	adds	r0, r2, r1
 8005bca:	42a0      	cmp	r0, r4
 8005bcc:	d10b      	bne.n	8005be6 <_free_r+0x6e>
 8005bce:	6820      	ldr	r0, [r4, #0]
 8005bd0:	1809      	adds	r1, r1, r0
 8005bd2:	1850      	adds	r0, r2, r1
 8005bd4:	6011      	str	r1, [r2, #0]
 8005bd6:	4283      	cmp	r3, r0
 8005bd8:	d1e0      	bne.n	8005b9c <_free_r+0x24>
 8005bda:	6818      	ldr	r0, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	1841      	adds	r1, r0, r1
 8005be0:	6011      	str	r1, [r2, #0]
 8005be2:	6053      	str	r3, [r2, #4]
 8005be4:	e7da      	b.n	8005b9c <_free_r+0x24>
 8005be6:	42a0      	cmp	r0, r4
 8005be8:	d902      	bls.n	8005bf0 <_free_r+0x78>
 8005bea:	230c      	movs	r3, #12
 8005bec:	602b      	str	r3, [r5, #0]
 8005bee:	e7d5      	b.n	8005b9c <_free_r+0x24>
 8005bf0:	6820      	ldr	r0, [r4, #0]
 8005bf2:	1821      	adds	r1, r4, r0
 8005bf4:	428b      	cmp	r3, r1
 8005bf6:	d103      	bne.n	8005c00 <_free_r+0x88>
 8005bf8:	6819      	ldr	r1, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	1809      	adds	r1, r1, r0
 8005bfe:	6021      	str	r1, [r4, #0]
 8005c00:	6063      	str	r3, [r4, #4]
 8005c02:	6054      	str	r4, [r2, #4]
 8005c04:	e7ca      	b.n	8005b9c <_free_r+0x24>
 8005c06:	46c0      	nop			@ (mov r8, r8)
 8005c08:	20000404 	.word	0x20000404

08005c0c <sbrk_aligned>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	4e0f      	ldr	r6, [pc, #60]	@ (8005c4c <sbrk_aligned+0x40>)
 8005c10:	000d      	movs	r5, r1
 8005c12:	6831      	ldr	r1, [r6, #0]
 8005c14:	0004      	movs	r4, r0
 8005c16:	2900      	cmp	r1, #0
 8005c18:	d102      	bne.n	8005c20 <sbrk_aligned+0x14>
 8005c1a:	f000 fb99 	bl	8006350 <_sbrk_r>
 8005c1e:	6030      	str	r0, [r6, #0]
 8005c20:	0029      	movs	r1, r5
 8005c22:	0020      	movs	r0, r4
 8005c24:	f000 fb94 	bl	8006350 <_sbrk_r>
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	d103      	bne.n	8005c34 <sbrk_aligned+0x28>
 8005c2c:	2501      	movs	r5, #1
 8005c2e:	426d      	negs	r5, r5
 8005c30:	0028      	movs	r0, r5
 8005c32:	bd70      	pop	{r4, r5, r6, pc}
 8005c34:	2303      	movs	r3, #3
 8005c36:	1cc5      	adds	r5, r0, #3
 8005c38:	439d      	bics	r5, r3
 8005c3a:	42a8      	cmp	r0, r5
 8005c3c:	d0f8      	beq.n	8005c30 <sbrk_aligned+0x24>
 8005c3e:	1a29      	subs	r1, r5, r0
 8005c40:	0020      	movs	r0, r4
 8005c42:	f000 fb85 	bl	8006350 <_sbrk_r>
 8005c46:	3001      	adds	r0, #1
 8005c48:	d1f2      	bne.n	8005c30 <sbrk_aligned+0x24>
 8005c4a:	e7ef      	b.n	8005c2c <sbrk_aligned+0x20>
 8005c4c:	20000400 	.word	0x20000400

08005c50 <_malloc_r>:
 8005c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c52:	2203      	movs	r2, #3
 8005c54:	1ccb      	adds	r3, r1, #3
 8005c56:	4393      	bics	r3, r2
 8005c58:	3308      	adds	r3, #8
 8005c5a:	0005      	movs	r5, r0
 8005c5c:	001f      	movs	r7, r3
 8005c5e:	2b0c      	cmp	r3, #12
 8005c60:	d234      	bcs.n	8005ccc <_malloc_r+0x7c>
 8005c62:	270c      	movs	r7, #12
 8005c64:	42b9      	cmp	r1, r7
 8005c66:	d833      	bhi.n	8005cd0 <_malloc_r+0x80>
 8005c68:	0028      	movs	r0, r5
 8005c6a:	f000 f871 	bl	8005d50 <__malloc_lock>
 8005c6e:	4e37      	ldr	r6, [pc, #220]	@ (8005d4c <_malloc_r+0xfc>)
 8005c70:	6833      	ldr	r3, [r6, #0]
 8005c72:	001c      	movs	r4, r3
 8005c74:	2c00      	cmp	r4, #0
 8005c76:	d12f      	bne.n	8005cd8 <_malloc_r+0x88>
 8005c78:	0039      	movs	r1, r7
 8005c7a:	0028      	movs	r0, r5
 8005c7c:	f7ff ffc6 	bl	8005c0c <sbrk_aligned>
 8005c80:	0004      	movs	r4, r0
 8005c82:	1c43      	adds	r3, r0, #1
 8005c84:	d15f      	bne.n	8005d46 <_malloc_r+0xf6>
 8005c86:	6834      	ldr	r4, [r6, #0]
 8005c88:	9400      	str	r4, [sp, #0]
 8005c8a:	9b00      	ldr	r3, [sp, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d14a      	bne.n	8005d26 <_malloc_r+0xd6>
 8005c90:	2c00      	cmp	r4, #0
 8005c92:	d052      	beq.n	8005d3a <_malloc_r+0xea>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	0028      	movs	r0, r5
 8005c98:	18e3      	adds	r3, r4, r3
 8005c9a:	9900      	ldr	r1, [sp, #0]
 8005c9c:	9301      	str	r3, [sp, #4]
 8005c9e:	f000 fb57 	bl	8006350 <_sbrk_r>
 8005ca2:	9b01      	ldr	r3, [sp, #4]
 8005ca4:	4283      	cmp	r3, r0
 8005ca6:	d148      	bne.n	8005d3a <_malloc_r+0xea>
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	0028      	movs	r0, r5
 8005cac:	1aff      	subs	r7, r7, r3
 8005cae:	0039      	movs	r1, r7
 8005cb0:	f7ff ffac 	bl	8005c0c <sbrk_aligned>
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	d040      	beq.n	8005d3a <_malloc_r+0xea>
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	19db      	adds	r3, r3, r7
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	6833      	ldr	r3, [r6, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	2a00      	cmp	r2, #0
 8005cc4:	d133      	bne.n	8005d2e <_malloc_r+0xde>
 8005cc6:	9b00      	ldr	r3, [sp, #0]
 8005cc8:	6033      	str	r3, [r6, #0]
 8005cca:	e019      	b.n	8005d00 <_malloc_r+0xb0>
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	dac9      	bge.n	8005c64 <_malloc_r+0x14>
 8005cd0:	230c      	movs	r3, #12
 8005cd2:	602b      	str	r3, [r5, #0]
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005cd8:	6821      	ldr	r1, [r4, #0]
 8005cda:	1bc9      	subs	r1, r1, r7
 8005cdc:	d420      	bmi.n	8005d20 <_malloc_r+0xd0>
 8005cde:	290b      	cmp	r1, #11
 8005ce0:	d90a      	bls.n	8005cf8 <_malloc_r+0xa8>
 8005ce2:	19e2      	adds	r2, r4, r7
 8005ce4:	6027      	str	r7, [r4, #0]
 8005ce6:	42a3      	cmp	r3, r4
 8005ce8:	d104      	bne.n	8005cf4 <_malloc_r+0xa4>
 8005cea:	6032      	str	r2, [r6, #0]
 8005cec:	6863      	ldr	r3, [r4, #4]
 8005cee:	6011      	str	r1, [r2, #0]
 8005cf0:	6053      	str	r3, [r2, #4]
 8005cf2:	e005      	b.n	8005d00 <_malloc_r+0xb0>
 8005cf4:	605a      	str	r2, [r3, #4]
 8005cf6:	e7f9      	b.n	8005cec <_malloc_r+0x9c>
 8005cf8:	6862      	ldr	r2, [r4, #4]
 8005cfa:	42a3      	cmp	r3, r4
 8005cfc:	d10e      	bne.n	8005d1c <_malloc_r+0xcc>
 8005cfe:	6032      	str	r2, [r6, #0]
 8005d00:	0028      	movs	r0, r5
 8005d02:	f000 f82d 	bl	8005d60 <__malloc_unlock>
 8005d06:	0020      	movs	r0, r4
 8005d08:	2207      	movs	r2, #7
 8005d0a:	300b      	adds	r0, #11
 8005d0c:	1d23      	adds	r3, r4, #4
 8005d0e:	4390      	bics	r0, r2
 8005d10:	1ac2      	subs	r2, r0, r3
 8005d12:	4298      	cmp	r0, r3
 8005d14:	d0df      	beq.n	8005cd6 <_malloc_r+0x86>
 8005d16:	1a1b      	subs	r3, r3, r0
 8005d18:	50a3      	str	r3, [r4, r2]
 8005d1a:	e7dc      	b.n	8005cd6 <_malloc_r+0x86>
 8005d1c:	605a      	str	r2, [r3, #4]
 8005d1e:	e7ef      	b.n	8005d00 <_malloc_r+0xb0>
 8005d20:	0023      	movs	r3, r4
 8005d22:	6864      	ldr	r4, [r4, #4]
 8005d24:	e7a6      	b.n	8005c74 <_malloc_r+0x24>
 8005d26:	9c00      	ldr	r4, [sp, #0]
 8005d28:	6863      	ldr	r3, [r4, #4]
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	e7ad      	b.n	8005c8a <_malloc_r+0x3a>
 8005d2e:	001a      	movs	r2, r3
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	42a3      	cmp	r3, r4
 8005d34:	d1fb      	bne.n	8005d2e <_malloc_r+0xde>
 8005d36:	2300      	movs	r3, #0
 8005d38:	e7da      	b.n	8005cf0 <_malloc_r+0xa0>
 8005d3a:	230c      	movs	r3, #12
 8005d3c:	0028      	movs	r0, r5
 8005d3e:	602b      	str	r3, [r5, #0]
 8005d40:	f000 f80e 	bl	8005d60 <__malloc_unlock>
 8005d44:	e7c6      	b.n	8005cd4 <_malloc_r+0x84>
 8005d46:	6007      	str	r7, [r0, #0]
 8005d48:	e7da      	b.n	8005d00 <_malloc_r+0xb0>
 8005d4a:	46c0      	nop			@ (mov r8, r8)
 8005d4c:	20000404 	.word	0x20000404

08005d50 <__malloc_lock>:
 8005d50:	b510      	push	{r4, lr}
 8005d52:	4802      	ldr	r0, [pc, #8]	@ (8005d5c <__malloc_lock+0xc>)
 8005d54:	f7ff ff0e 	bl	8005b74 <__retarget_lock_acquire_recursive>
 8005d58:	bd10      	pop	{r4, pc}
 8005d5a:	46c0      	nop			@ (mov r8, r8)
 8005d5c:	200003fc 	.word	0x200003fc

08005d60 <__malloc_unlock>:
 8005d60:	b510      	push	{r4, lr}
 8005d62:	4802      	ldr	r0, [pc, #8]	@ (8005d6c <__malloc_unlock+0xc>)
 8005d64:	f7ff ff07 	bl	8005b76 <__retarget_lock_release_recursive>
 8005d68:	bd10      	pop	{r4, pc}
 8005d6a:	46c0      	nop			@ (mov r8, r8)
 8005d6c:	200003fc 	.word	0x200003fc

08005d70 <__ssputs_r>:
 8005d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d72:	688e      	ldr	r6, [r1, #8]
 8005d74:	b085      	sub	sp, #20
 8005d76:	001f      	movs	r7, r3
 8005d78:	000c      	movs	r4, r1
 8005d7a:	680b      	ldr	r3, [r1, #0]
 8005d7c:	9002      	str	r0, [sp, #8]
 8005d7e:	9203      	str	r2, [sp, #12]
 8005d80:	42be      	cmp	r6, r7
 8005d82:	d830      	bhi.n	8005de6 <__ssputs_r+0x76>
 8005d84:	210c      	movs	r1, #12
 8005d86:	5e62      	ldrsh	r2, [r4, r1]
 8005d88:	2190      	movs	r1, #144	@ 0x90
 8005d8a:	00c9      	lsls	r1, r1, #3
 8005d8c:	420a      	tst	r2, r1
 8005d8e:	d028      	beq.n	8005de2 <__ssputs_r+0x72>
 8005d90:	2003      	movs	r0, #3
 8005d92:	6921      	ldr	r1, [r4, #16]
 8005d94:	1a5b      	subs	r3, r3, r1
 8005d96:	9301      	str	r3, [sp, #4]
 8005d98:	6963      	ldr	r3, [r4, #20]
 8005d9a:	4343      	muls	r3, r0
 8005d9c:	9801      	ldr	r0, [sp, #4]
 8005d9e:	0fdd      	lsrs	r5, r3, #31
 8005da0:	18ed      	adds	r5, r5, r3
 8005da2:	1c7b      	adds	r3, r7, #1
 8005da4:	181b      	adds	r3, r3, r0
 8005da6:	106d      	asrs	r5, r5, #1
 8005da8:	42ab      	cmp	r3, r5
 8005daa:	d900      	bls.n	8005dae <__ssputs_r+0x3e>
 8005dac:	001d      	movs	r5, r3
 8005dae:	0552      	lsls	r2, r2, #21
 8005db0:	d528      	bpl.n	8005e04 <__ssputs_r+0x94>
 8005db2:	0029      	movs	r1, r5
 8005db4:	9802      	ldr	r0, [sp, #8]
 8005db6:	f7ff ff4b 	bl	8005c50 <_malloc_r>
 8005dba:	1e06      	subs	r6, r0, #0
 8005dbc:	d02c      	beq.n	8005e18 <__ssputs_r+0xa8>
 8005dbe:	9a01      	ldr	r2, [sp, #4]
 8005dc0:	6921      	ldr	r1, [r4, #16]
 8005dc2:	f000 fae2 	bl	800638a <memcpy>
 8005dc6:	89a2      	ldrh	r2, [r4, #12]
 8005dc8:	4b18      	ldr	r3, [pc, #96]	@ (8005e2c <__ssputs_r+0xbc>)
 8005dca:	401a      	ands	r2, r3
 8005dcc:	2380      	movs	r3, #128	@ 0x80
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	81a3      	strh	r3, [r4, #12]
 8005dd2:	9b01      	ldr	r3, [sp, #4]
 8005dd4:	6126      	str	r6, [r4, #16]
 8005dd6:	18f6      	adds	r6, r6, r3
 8005dd8:	6026      	str	r6, [r4, #0]
 8005dda:	003e      	movs	r6, r7
 8005ddc:	6165      	str	r5, [r4, #20]
 8005dde:	1aed      	subs	r5, r5, r3
 8005de0:	60a5      	str	r5, [r4, #8]
 8005de2:	42be      	cmp	r6, r7
 8005de4:	d900      	bls.n	8005de8 <__ssputs_r+0x78>
 8005de6:	003e      	movs	r6, r7
 8005de8:	0032      	movs	r2, r6
 8005dea:	9903      	ldr	r1, [sp, #12]
 8005dec:	6820      	ldr	r0, [r4, #0]
 8005dee:	f000 fa9b 	bl	8006328 <memmove>
 8005df2:	2000      	movs	r0, #0
 8005df4:	68a3      	ldr	r3, [r4, #8]
 8005df6:	1b9b      	subs	r3, r3, r6
 8005df8:	60a3      	str	r3, [r4, #8]
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	199b      	adds	r3, r3, r6
 8005dfe:	6023      	str	r3, [r4, #0]
 8005e00:	b005      	add	sp, #20
 8005e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e04:	002a      	movs	r2, r5
 8005e06:	9802      	ldr	r0, [sp, #8]
 8005e08:	f000 fac8 	bl	800639c <_realloc_r>
 8005e0c:	1e06      	subs	r6, r0, #0
 8005e0e:	d1e0      	bne.n	8005dd2 <__ssputs_r+0x62>
 8005e10:	6921      	ldr	r1, [r4, #16]
 8005e12:	9802      	ldr	r0, [sp, #8]
 8005e14:	f7ff feb0 	bl	8005b78 <_free_r>
 8005e18:	230c      	movs	r3, #12
 8005e1a:	2001      	movs	r0, #1
 8005e1c:	9a02      	ldr	r2, [sp, #8]
 8005e1e:	4240      	negs	r0, r0
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	89a2      	ldrh	r2, [r4, #12]
 8005e24:	3334      	adds	r3, #52	@ 0x34
 8005e26:	4313      	orrs	r3, r2
 8005e28:	81a3      	strh	r3, [r4, #12]
 8005e2a:	e7e9      	b.n	8005e00 <__ssputs_r+0x90>
 8005e2c:	fffffb7f 	.word	0xfffffb7f

08005e30 <_svfiprintf_r>:
 8005e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e32:	b0a1      	sub	sp, #132	@ 0x84
 8005e34:	9003      	str	r0, [sp, #12]
 8005e36:	001d      	movs	r5, r3
 8005e38:	898b      	ldrh	r3, [r1, #12]
 8005e3a:	000f      	movs	r7, r1
 8005e3c:	0016      	movs	r6, r2
 8005e3e:	061b      	lsls	r3, r3, #24
 8005e40:	d511      	bpl.n	8005e66 <_svfiprintf_r+0x36>
 8005e42:	690b      	ldr	r3, [r1, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10e      	bne.n	8005e66 <_svfiprintf_r+0x36>
 8005e48:	2140      	movs	r1, #64	@ 0x40
 8005e4a:	f7ff ff01 	bl	8005c50 <_malloc_r>
 8005e4e:	6038      	str	r0, [r7, #0]
 8005e50:	6138      	str	r0, [r7, #16]
 8005e52:	2800      	cmp	r0, #0
 8005e54:	d105      	bne.n	8005e62 <_svfiprintf_r+0x32>
 8005e56:	230c      	movs	r3, #12
 8005e58:	9a03      	ldr	r2, [sp, #12]
 8005e5a:	6013      	str	r3, [r2, #0]
 8005e5c:	2001      	movs	r0, #1
 8005e5e:	4240      	negs	r0, r0
 8005e60:	e0cf      	b.n	8006002 <_svfiprintf_r+0x1d2>
 8005e62:	2340      	movs	r3, #64	@ 0x40
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	2300      	movs	r3, #0
 8005e68:	ac08      	add	r4, sp, #32
 8005e6a:	6163      	str	r3, [r4, #20]
 8005e6c:	3320      	adds	r3, #32
 8005e6e:	7663      	strb	r3, [r4, #25]
 8005e70:	3310      	adds	r3, #16
 8005e72:	76a3      	strb	r3, [r4, #26]
 8005e74:	9507      	str	r5, [sp, #28]
 8005e76:	0035      	movs	r5, r6
 8005e78:	782b      	ldrb	r3, [r5, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <_svfiprintf_r+0x52>
 8005e7e:	2b25      	cmp	r3, #37	@ 0x25
 8005e80:	d148      	bne.n	8005f14 <_svfiprintf_r+0xe4>
 8005e82:	1bab      	subs	r3, r5, r6
 8005e84:	9305      	str	r3, [sp, #20]
 8005e86:	42b5      	cmp	r5, r6
 8005e88:	d00b      	beq.n	8005ea2 <_svfiprintf_r+0x72>
 8005e8a:	0032      	movs	r2, r6
 8005e8c:	0039      	movs	r1, r7
 8005e8e:	9803      	ldr	r0, [sp, #12]
 8005e90:	f7ff ff6e 	bl	8005d70 <__ssputs_r>
 8005e94:	3001      	adds	r0, #1
 8005e96:	d100      	bne.n	8005e9a <_svfiprintf_r+0x6a>
 8005e98:	e0ae      	b.n	8005ff8 <_svfiprintf_r+0x1c8>
 8005e9a:	6963      	ldr	r3, [r4, #20]
 8005e9c:	9a05      	ldr	r2, [sp, #20]
 8005e9e:	189b      	adds	r3, r3, r2
 8005ea0:	6163      	str	r3, [r4, #20]
 8005ea2:	782b      	ldrb	r3, [r5, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d100      	bne.n	8005eaa <_svfiprintf_r+0x7a>
 8005ea8:	e0a6      	b.n	8005ff8 <_svfiprintf_r+0x1c8>
 8005eaa:	2201      	movs	r2, #1
 8005eac:	2300      	movs	r3, #0
 8005eae:	4252      	negs	r2, r2
 8005eb0:	6062      	str	r2, [r4, #4]
 8005eb2:	a904      	add	r1, sp, #16
 8005eb4:	3254      	adds	r2, #84	@ 0x54
 8005eb6:	1852      	adds	r2, r2, r1
 8005eb8:	1c6e      	adds	r6, r5, #1
 8005eba:	6023      	str	r3, [r4, #0]
 8005ebc:	60e3      	str	r3, [r4, #12]
 8005ebe:	60a3      	str	r3, [r4, #8]
 8005ec0:	7013      	strb	r3, [r2, #0]
 8005ec2:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005ec4:	4b54      	ldr	r3, [pc, #336]	@ (8006018 <_svfiprintf_r+0x1e8>)
 8005ec6:	2205      	movs	r2, #5
 8005ec8:	0018      	movs	r0, r3
 8005eca:	7831      	ldrb	r1, [r6, #0]
 8005ecc:	9305      	str	r3, [sp, #20]
 8005ece:	f000 fa51 	bl	8006374 <memchr>
 8005ed2:	1c75      	adds	r5, r6, #1
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d11f      	bne.n	8005f18 <_svfiprintf_r+0xe8>
 8005ed8:	6822      	ldr	r2, [r4, #0]
 8005eda:	06d3      	lsls	r3, r2, #27
 8005edc:	d504      	bpl.n	8005ee8 <_svfiprintf_r+0xb8>
 8005ede:	2353      	movs	r3, #83	@ 0x53
 8005ee0:	a904      	add	r1, sp, #16
 8005ee2:	185b      	adds	r3, r3, r1
 8005ee4:	2120      	movs	r1, #32
 8005ee6:	7019      	strb	r1, [r3, #0]
 8005ee8:	0713      	lsls	r3, r2, #28
 8005eea:	d504      	bpl.n	8005ef6 <_svfiprintf_r+0xc6>
 8005eec:	2353      	movs	r3, #83	@ 0x53
 8005eee:	a904      	add	r1, sp, #16
 8005ef0:	185b      	adds	r3, r3, r1
 8005ef2:	212b      	movs	r1, #43	@ 0x2b
 8005ef4:	7019      	strb	r1, [r3, #0]
 8005ef6:	7833      	ldrb	r3, [r6, #0]
 8005ef8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005efa:	d016      	beq.n	8005f2a <_svfiprintf_r+0xfa>
 8005efc:	0035      	movs	r5, r6
 8005efe:	2100      	movs	r1, #0
 8005f00:	200a      	movs	r0, #10
 8005f02:	68e3      	ldr	r3, [r4, #12]
 8005f04:	782a      	ldrb	r2, [r5, #0]
 8005f06:	1c6e      	adds	r6, r5, #1
 8005f08:	3a30      	subs	r2, #48	@ 0x30
 8005f0a:	2a09      	cmp	r2, #9
 8005f0c:	d950      	bls.n	8005fb0 <_svfiprintf_r+0x180>
 8005f0e:	2900      	cmp	r1, #0
 8005f10:	d111      	bne.n	8005f36 <_svfiprintf_r+0x106>
 8005f12:	e017      	b.n	8005f44 <_svfiprintf_r+0x114>
 8005f14:	3501      	adds	r5, #1
 8005f16:	e7af      	b.n	8005e78 <_svfiprintf_r+0x48>
 8005f18:	9b05      	ldr	r3, [sp, #20]
 8005f1a:	6822      	ldr	r2, [r4, #0]
 8005f1c:	1ac0      	subs	r0, r0, r3
 8005f1e:	2301      	movs	r3, #1
 8005f20:	4083      	lsls	r3, r0
 8005f22:	4313      	orrs	r3, r2
 8005f24:	002e      	movs	r6, r5
 8005f26:	6023      	str	r3, [r4, #0]
 8005f28:	e7cc      	b.n	8005ec4 <_svfiprintf_r+0x94>
 8005f2a:	9b07      	ldr	r3, [sp, #28]
 8005f2c:	1d19      	adds	r1, r3, #4
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	9107      	str	r1, [sp, #28]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	db01      	blt.n	8005f3a <_svfiprintf_r+0x10a>
 8005f36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f38:	e004      	b.n	8005f44 <_svfiprintf_r+0x114>
 8005f3a:	425b      	negs	r3, r3
 8005f3c:	60e3      	str	r3, [r4, #12]
 8005f3e:	2302      	movs	r3, #2
 8005f40:	4313      	orrs	r3, r2
 8005f42:	6023      	str	r3, [r4, #0]
 8005f44:	782b      	ldrb	r3, [r5, #0]
 8005f46:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f48:	d10c      	bne.n	8005f64 <_svfiprintf_r+0x134>
 8005f4a:	786b      	ldrb	r3, [r5, #1]
 8005f4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f4e:	d134      	bne.n	8005fba <_svfiprintf_r+0x18a>
 8005f50:	9b07      	ldr	r3, [sp, #28]
 8005f52:	3502      	adds	r5, #2
 8005f54:	1d1a      	adds	r2, r3, #4
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	9207      	str	r2, [sp, #28]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	da01      	bge.n	8005f62 <_svfiprintf_r+0x132>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	425b      	negs	r3, r3
 8005f62:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f64:	4e2d      	ldr	r6, [pc, #180]	@ (800601c <_svfiprintf_r+0x1ec>)
 8005f66:	2203      	movs	r2, #3
 8005f68:	0030      	movs	r0, r6
 8005f6a:	7829      	ldrb	r1, [r5, #0]
 8005f6c:	f000 fa02 	bl	8006374 <memchr>
 8005f70:	2800      	cmp	r0, #0
 8005f72:	d006      	beq.n	8005f82 <_svfiprintf_r+0x152>
 8005f74:	2340      	movs	r3, #64	@ 0x40
 8005f76:	1b80      	subs	r0, r0, r6
 8005f78:	4083      	lsls	r3, r0
 8005f7a:	6822      	ldr	r2, [r4, #0]
 8005f7c:	3501      	adds	r5, #1
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	7829      	ldrb	r1, [r5, #0]
 8005f84:	2206      	movs	r2, #6
 8005f86:	4826      	ldr	r0, [pc, #152]	@ (8006020 <_svfiprintf_r+0x1f0>)
 8005f88:	1c6e      	adds	r6, r5, #1
 8005f8a:	7621      	strb	r1, [r4, #24]
 8005f8c:	f000 f9f2 	bl	8006374 <memchr>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d038      	beq.n	8006006 <_svfiprintf_r+0x1d6>
 8005f94:	4b23      	ldr	r3, [pc, #140]	@ (8006024 <_svfiprintf_r+0x1f4>)
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d122      	bne.n	8005fe0 <_svfiprintf_r+0x1b0>
 8005f9a:	2207      	movs	r2, #7
 8005f9c:	9b07      	ldr	r3, [sp, #28]
 8005f9e:	3307      	adds	r3, #7
 8005fa0:	4393      	bics	r3, r2
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	9307      	str	r3, [sp, #28]
 8005fa6:	6963      	ldr	r3, [r4, #20]
 8005fa8:	9a04      	ldr	r2, [sp, #16]
 8005faa:	189b      	adds	r3, r3, r2
 8005fac:	6163      	str	r3, [r4, #20]
 8005fae:	e762      	b.n	8005e76 <_svfiprintf_r+0x46>
 8005fb0:	4343      	muls	r3, r0
 8005fb2:	0035      	movs	r5, r6
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	189b      	adds	r3, r3, r2
 8005fb8:	e7a4      	b.n	8005f04 <_svfiprintf_r+0xd4>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	200a      	movs	r0, #10
 8005fbe:	0019      	movs	r1, r3
 8005fc0:	3501      	adds	r5, #1
 8005fc2:	6063      	str	r3, [r4, #4]
 8005fc4:	782a      	ldrb	r2, [r5, #0]
 8005fc6:	1c6e      	adds	r6, r5, #1
 8005fc8:	3a30      	subs	r2, #48	@ 0x30
 8005fca:	2a09      	cmp	r2, #9
 8005fcc:	d903      	bls.n	8005fd6 <_svfiprintf_r+0x1a6>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0c8      	beq.n	8005f64 <_svfiprintf_r+0x134>
 8005fd2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005fd4:	e7c6      	b.n	8005f64 <_svfiprintf_r+0x134>
 8005fd6:	4341      	muls	r1, r0
 8005fd8:	0035      	movs	r5, r6
 8005fda:	2301      	movs	r3, #1
 8005fdc:	1889      	adds	r1, r1, r2
 8005fde:	e7f1      	b.n	8005fc4 <_svfiprintf_r+0x194>
 8005fe0:	aa07      	add	r2, sp, #28
 8005fe2:	9200      	str	r2, [sp, #0]
 8005fe4:	0021      	movs	r1, r4
 8005fe6:	003a      	movs	r2, r7
 8005fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8006028 <_svfiprintf_r+0x1f8>)
 8005fea:	9803      	ldr	r0, [sp, #12]
 8005fec:	e000      	b.n	8005ff0 <_svfiprintf_r+0x1c0>
 8005fee:	bf00      	nop
 8005ff0:	9004      	str	r0, [sp, #16]
 8005ff2:	9b04      	ldr	r3, [sp, #16]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	d1d6      	bne.n	8005fa6 <_svfiprintf_r+0x176>
 8005ff8:	89bb      	ldrh	r3, [r7, #12]
 8005ffa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005ffc:	065b      	lsls	r3, r3, #25
 8005ffe:	d500      	bpl.n	8006002 <_svfiprintf_r+0x1d2>
 8006000:	e72c      	b.n	8005e5c <_svfiprintf_r+0x2c>
 8006002:	b021      	add	sp, #132	@ 0x84
 8006004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006006:	aa07      	add	r2, sp, #28
 8006008:	9200      	str	r2, [sp, #0]
 800600a:	0021      	movs	r1, r4
 800600c:	003a      	movs	r2, r7
 800600e:	4b06      	ldr	r3, [pc, #24]	@ (8006028 <_svfiprintf_r+0x1f8>)
 8006010:	9803      	ldr	r0, [sp, #12]
 8006012:	f000 f87b 	bl	800610c <_printf_i>
 8006016:	e7eb      	b.n	8005ff0 <_svfiprintf_r+0x1c0>
 8006018:	08006564 	.word	0x08006564
 800601c:	0800656a 	.word	0x0800656a
 8006020:	0800656e 	.word	0x0800656e
 8006024:	00000000 	.word	0x00000000
 8006028:	08005d71 	.word	0x08005d71

0800602c <_printf_common>:
 800602c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800602e:	0016      	movs	r6, r2
 8006030:	9301      	str	r3, [sp, #4]
 8006032:	688a      	ldr	r2, [r1, #8]
 8006034:	690b      	ldr	r3, [r1, #16]
 8006036:	000c      	movs	r4, r1
 8006038:	9000      	str	r0, [sp, #0]
 800603a:	4293      	cmp	r3, r2
 800603c:	da00      	bge.n	8006040 <_printf_common+0x14>
 800603e:	0013      	movs	r3, r2
 8006040:	0022      	movs	r2, r4
 8006042:	6033      	str	r3, [r6, #0]
 8006044:	3243      	adds	r2, #67	@ 0x43
 8006046:	7812      	ldrb	r2, [r2, #0]
 8006048:	2a00      	cmp	r2, #0
 800604a:	d001      	beq.n	8006050 <_printf_common+0x24>
 800604c:	3301      	adds	r3, #1
 800604e:	6033      	str	r3, [r6, #0]
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	069b      	lsls	r3, r3, #26
 8006054:	d502      	bpl.n	800605c <_printf_common+0x30>
 8006056:	6833      	ldr	r3, [r6, #0]
 8006058:	3302      	adds	r3, #2
 800605a:	6033      	str	r3, [r6, #0]
 800605c:	6822      	ldr	r2, [r4, #0]
 800605e:	2306      	movs	r3, #6
 8006060:	0015      	movs	r5, r2
 8006062:	401d      	ands	r5, r3
 8006064:	421a      	tst	r2, r3
 8006066:	d027      	beq.n	80060b8 <_printf_common+0x8c>
 8006068:	0023      	movs	r3, r4
 800606a:	3343      	adds	r3, #67	@ 0x43
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	1e5a      	subs	r2, r3, #1
 8006070:	4193      	sbcs	r3, r2
 8006072:	6822      	ldr	r2, [r4, #0]
 8006074:	0692      	lsls	r2, r2, #26
 8006076:	d430      	bmi.n	80060da <_printf_common+0xae>
 8006078:	0022      	movs	r2, r4
 800607a:	9901      	ldr	r1, [sp, #4]
 800607c:	9800      	ldr	r0, [sp, #0]
 800607e:	9d08      	ldr	r5, [sp, #32]
 8006080:	3243      	adds	r2, #67	@ 0x43
 8006082:	47a8      	blx	r5
 8006084:	3001      	adds	r0, #1
 8006086:	d025      	beq.n	80060d4 <_printf_common+0xa8>
 8006088:	2206      	movs	r2, #6
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	2500      	movs	r5, #0
 800608e:	4013      	ands	r3, r2
 8006090:	2b04      	cmp	r3, #4
 8006092:	d105      	bne.n	80060a0 <_printf_common+0x74>
 8006094:	6833      	ldr	r3, [r6, #0]
 8006096:	68e5      	ldr	r5, [r4, #12]
 8006098:	1aed      	subs	r5, r5, r3
 800609a:	43eb      	mvns	r3, r5
 800609c:	17db      	asrs	r3, r3, #31
 800609e:	401d      	ands	r5, r3
 80060a0:	68a3      	ldr	r3, [r4, #8]
 80060a2:	6922      	ldr	r2, [r4, #16]
 80060a4:	4293      	cmp	r3, r2
 80060a6:	dd01      	ble.n	80060ac <_printf_common+0x80>
 80060a8:	1a9b      	subs	r3, r3, r2
 80060aa:	18ed      	adds	r5, r5, r3
 80060ac:	2600      	movs	r6, #0
 80060ae:	42b5      	cmp	r5, r6
 80060b0:	d120      	bne.n	80060f4 <_printf_common+0xc8>
 80060b2:	2000      	movs	r0, #0
 80060b4:	e010      	b.n	80060d8 <_printf_common+0xac>
 80060b6:	3501      	adds	r5, #1
 80060b8:	68e3      	ldr	r3, [r4, #12]
 80060ba:	6832      	ldr	r2, [r6, #0]
 80060bc:	1a9b      	subs	r3, r3, r2
 80060be:	42ab      	cmp	r3, r5
 80060c0:	ddd2      	ble.n	8006068 <_printf_common+0x3c>
 80060c2:	0022      	movs	r2, r4
 80060c4:	2301      	movs	r3, #1
 80060c6:	9901      	ldr	r1, [sp, #4]
 80060c8:	9800      	ldr	r0, [sp, #0]
 80060ca:	9f08      	ldr	r7, [sp, #32]
 80060cc:	3219      	adds	r2, #25
 80060ce:	47b8      	blx	r7
 80060d0:	3001      	adds	r0, #1
 80060d2:	d1f0      	bne.n	80060b6 <_printf_common+0x8a>
 80060d4:	2001      	movs	r0, #1
 80060d6:	4240      	negs	r0, r0
 80060d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060da:	2030      	movs	r0, #48	@ 0x30
 80060dc:	18e1      	adds	r1, r4, r3
 80060de:	3143      	adds	r1, #67	@ 0x43
 80060e0:	7008      	strb	r0, [r1, #0]
 80060e2:	0021      	movs	r1, r4
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	3145      	adds	r1, #69	@ 0x45
 80060e8:	7809      	ldrb	r1, [r1, #0]
 80060ea:	18a2      	adds	r2, r4, r2
 80060ec:	3243      	adds	r2, #67	@ 0x43
 80060ee:	3302      	adds	r3, #2
 80060f0:	7011      	strb	r1, [r2, #0]
 80060f2:	e7c1      	b.n	8006078 <_printf_common+0x4c>
 80060f4:	0022      	movs	r2, r4
 80060f6:	2301      	movs	r3, #1
 80060f8:	9901      	ldr	r1, [sp, #4]
 80060fa:	9800      	ldr	r0, [sp, #0]
 80060fc:	9f08      	ldr	r7, [sp, #32]
 80060fe:	321a      	adds	r2, #26
 8006100:	47b8      	blx	r7
 8006102:	3001      	adds	r0, #1
 8006104:	d0e6      	beq.n	80060d4 <_printf_common+0xa8>
 8006106:	3601      	adds	r6, #1
 8006108:	e7d1      	b.n	80060ae <_printf_common+0x82>
	...

0800610c <_printf_i>:
 800610c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800610e:	b08b      	sub	sp, #44	@ 0x2c
 8006110:	9206      	str	r2, [sp, #24]
 8006112:	000a      	movs	r2, r1
 8006114:	3243      	adds	r2, #67	@ 0x43
 8006116:	9307      	str	r3, [sp, #28]
 8006118:	9005      	str	r0, [sp, #20]
 800611a:	9203      	str	r2, [sp, #12]
 800611c:	7e0a      	ldrb	r2, [r1, #24]
 800611e:	000c      	movs	r4, r1
 8006120:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006122:	2a78      	cmp	r2, #120	@ 0x78
 8006124:	d809      	bhi.n	800613a <_printf_i+0x2e>
 8006126:	2a62      	cmp	r2, #98	@ 0x62
 8006128:	d80b      	bhi.n	8006142 <_printf_i+0x36>
 800612a:	2a00      	cmp	r2, #0
 800612c:	d100      	bne.n	8006130 <_printf_i+0x24>
 800612e:	e0bc      	b.n	80062aa <_printf_i+0x19e>
 8006130:	497b      	ldr	r1, [pc, #492]	@ (8006320 <_printf_i+0x214>)
 8006132:	9104      	str	r1, [sp, #16]
 8006134:	2a58      	cmp	r2, #88	@ 0x58
 8006136:	d100      	bne.n	800613a <_printf_i+0x2e>
 8006138:	e090      	b.n	800625c <_printf_i+0x150>
 800613a:	0025      	movs	r5, r4
 800613c:	3542      	adds	r5, #66	@ 0x42
 800613e:	702a      	strb	r2, [r5, #0]
 8006140:	e022      	b.n	8006188 <_printf_i+0x7c>
 8006142:	0010      	movs	r0, r2
 8006144:	3863      	subs	r0, #99	@ 0x63
 8006146:	2815      	cmp	r0, #21
 8006148:	d8f7      	bhi.n	800613a <_printf_i+0x2e>
 800614a:	f7f9 ffed 	bl	8000128 <__gnu_thumb1_case_shi>
 800614e:	0016      	.short	0x0016
 8006150:	fff6001f 	.word	0xfff6001f
 8006154:	fff6fff6 	.word	0xfff6fff6
 8006158:	001ffff6 	.word	0x001ffff6
 800615c:	fff6fff6 	.word	0xfff6fff6
 8006160:	fff6fff6 	.word	0xfff6fff6
 8006164:	003600a1 	.word	0x003600a1
 8006168:	fff60080 	.word	0xfff60080
 800616c:	00b2fff6 	.word	0x00b2fff6
 8006170:	0036fff6 	.word	0x0036fff6
 8006174:	fff6fff6 	.word	0xfff6fff6
 8006178:	0084      	.short	0x0084
 800617a:	0025      	movs	r5, r4
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	3542      	adds	r5, #66	@ 0x42
 8006180:	1d11      	adds	r1, r2, #4
 8006182:	6019      	str	r1, [r3, #0]
 8006184:	6813      	ldr	r3, [r2, #0]
 8006186:	702b      	strb	r3, [r5, #0]
 8006188:	2301      	movs	r3, #1
 800618a:	e0a0      	b.n	80062ce <_printf_i+0x1c2>
 800618c:	6818      	ldr	r0, [r3, #0]
 800618e:	6809      	ldr	r1, [r1, #0]
 8006190:	1d02      	adds	r2, r0, #4
 8006192:	060d      	lsls	r5, r1, #24
 8006194:	d50b      	bpl.n	80061ae <_printf_i+0xa2>
 8006196:	6806      	ldr	r6, [r0, #0]
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	2e00      	cmp	r6, #0
 800619c:	da03      	bge.n	80061a6 <_printf_i+0x9a>
 800619e:	232d      	movs	r3, #45	@ 0x2d
 80061a0:	9a03      	ldr	r2, [sp, #12]
 80061a2:	4276      	negs	r6, r6
 80061a4:	7013      	strb	r3, [r2, #0]
 80061a6:	4b5e      	ldr	r3, [pc, #376]	@ (8006320 <_printf_i+0x214>)
 80061a8:	270a      	movs	r7, #10
 80061aa:	9304      	str	r3, [sp, #16]
 80061ac:	e018      	b.n	80061e0 <_printf_i+0xd4>
 80061ae:	6806      	ldr	r6, [r0, #0]
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	0649      	lsls	r1, r1, #25
 80061b4:	d5f1      	bpl.n	800619a <_printf_i+0x8e>
 80061b6:	b236      	sxth	r6, r6
 80061b8:	e7ef      	b.n	800619a <_printf_i+0x8e>
 80061ba:	6808      	ldr	r0, [r1, #0]
 80061bc:	6819      	ldr	r1, [r3, #0]
 80061be:	c940      	ldmia	r1!, {r6}
 80061c0:	0605      	lsls	r5, r0, #24
 80061c2:	d402      	bmi.n	80061ca <_printf_i+0xbe>
 80061c4:	0640      	lsls	r0, r0, #25
 80061c6:	d500      	bpl.n	80061ca <_printf_i+0xbe>
 80061c8:	b2b6      	uxth	r6, r6
 80061ca:	6019      	str	r1, [r3, #0]
 80061cc:	4b54      	ldr	r3, [pc, #336]	@ (8006320 <_printf_i+0x214>)
 80061ce:	270a      	movs	r7, #10
 80061d0:	9304      	str	r3, [sp, #16]
 80061d2:	2a6f      	cmp	r2, #111	@ 0x6f
 80061d4:	d100      	bne.n	80061d8 <_printf_i+0xcc>
 80061d6:	3f02      	subs	r7, #2
 80061d8:	0023      	movs	r3, r4
 80061da:	2200      	movs	r2, #0
 80061dc:	3343      	adds	r3, #67	@ 0x43
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	6863      	ldr	r3, [r4, #4]
 80061e2:	60a3      	str	r3, [r4, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	db03      	blt.n	80061f0 <_printf_i+0xe4>
 80061e8:	2104      	movs	r1, #4
 80061ea:	6822      	ldr	r2, [r4, #0]
 80061ec:	438a      	bics	r2, r1
 80061ee:	6022      	str	r2, [r4, #0]
 80061f0:	2e00      	cmp	r6, #0
 80061f2:	d102      	bne.n	80061fa <_printf_i+0xee>
 80061f4:	9d03      	ldr	r5, [sp, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00c      	beq.n	8006214 <_printf_i+0x108>
 80061fa:	9d03      	ldr	r5, [sp, #12]
 80061fc:	0030      	movs	r0, r6
 80061fe:	0039      	movs	r1, r7
 8006200:	f7fa f822 	bl	8000248 <__aeabi_uidivmod>
 8006204:	9b04      	ldr	r3, [sp, #16]
 8006206:	3d01      	subs	r5, #1
 8006208:	5c5b      	ldrb	r3, [r3, r1]
 800620a:	702b      	strb	r3, [r5, #0]
 800620c:	0033      	movs	r3, r6
 800620e:	0006      	movs	r6, r0
 8006210:	429f      	cmp	r7, r3
 8006212:	d9f3      	bls.n	80061fc <_printf_i+0xf0>
 8006214:	2f08      	cmp	r7, #8
 8006216:	d109      	bne.n	800622c <_printf_i+0x120>
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	07db      	lsls	r3, r3, #31
 800621c:	d506      	bpl.n	800622c <_printf_i+0x120>
 800621e:	6862      	ldr	r2, [r4, #4]
 8006220:	6923      	ldr	r3, [r4, #16]
 8006222:	429a      	cmp	r2, r3
 8006224:	dc02      	bgt.n	800622c <_printf_i+0x120>
 8006226:	2330      	movs	r3, #48	@ 0x30
 8006228:	3d01      	subs	r5, #1
 800622a:	702b      	strb	r3, [r5, #0]
 800622c:	9b03      	ldr	r3, [sp, #12]
 800622e:	1b5b      	subs	r3, r3, r5
 8006230:	6123      	str	r3, [r4, #16]
 8006232:	9b07      	ldr	r3, [sp, #28]
 8006234:	0021      	movs	r1, r4
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	9805      	ldr	r0, [sp, #20]
 800623a:	9b06      	ldr	r3, [sp, #24]
 800623c:	aa09      	add	r2, sp, #36	@ 0x24
 800623e:	f7ff fef5 	bl	800602c <_printf_common>
 8006242:	3001      	adds	r0, #1
 8006244:	d148      	bne.n	80062d8 <_printf_i+0x1cc>
 8006246:	2001      	movs	r0, #1
 8006248:	4240      	negs	r0, r0
 800624a:	b00b      	add	sp, #44	@ 0x2c
 800624c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800624e:	2220      	movs	r2, #32
 8006250:	6809      	ldr	r1, [r1, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	6022      	str	r2, [r4, #0]
 8006256:	2278      	movs	r2, #120	@ 0x78
 8006258:	4932      	ldr	r1, [pc, #200]	@ (8006324 <_printf_i+0x218>)
 800625a:	9104      	str	r1, [sp, #16]
 800625c:	0021      	movs	r1, r4
 800625e:	3145      	adds	r1, #69	@ 0x45
 8006260:	700a      	strb	r2, [r1, #0]
 8006262:	6819      	ldr	r1, [r3, #0]
 8006264:	6822      	ldr	r2, [r4, #0]
 8006266:	c940      	ldmia	r1!, {r6}
 8006268:	0610      	lsls	r0, r2, #24
 800626a:	d402      	bmi.n	8006272 <_printf_i+0x166>
 800626c:	0650      	lsls	r0, r2, #25
 800626e:	d500      	bpl.n	8006272 <_printf_i+0x166>
 8006270:	b2b6      	uxth	r6, r6
 8006272:	6019      	str	r1, [r3, #0]
 8006274:	07d3      	lsls	r3, r2, #31
 8006276:	d502      	bpl.n	800627e <_printf_i+0x172>
 8006278:	2320      	movs	r3, #32
 800627a:	4313      	orrs	r3, r2
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	2e00      	cmp	r6, #0
 8006280:	d001      	beq.n	8006286 <_printf_i+0x17a>
 8006282:	2710      	movs	r7, #16
 8006284:	e7a8      	b.n	80061d8 <_printf_i+0xcc>
 8006286:	2220      	movs	r2, #32
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	4393      	bics	r3, r2
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	e7f8      	b.n	8006282 <_printf_i+0x176>
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	680d      	ldr	r5, [r1, #0]
 8006294:	1d10      	adds	r0, r2, #4
 8006296:	6949      	ldr	r1, [r1, #20]
 8006298:	6018      	str	r0, [r3, #0]
 800629a:	6813      	ldr	r3, [r2, #0]
 800629c:	062e      	lsls	r6, r5, #24
 800629e:	d501      	bpl.n	80062a4 <_printf_i+0x198>
 80062a0:	6019      	str	r1, [r3, #0]
 80062a2:	e002      	b.n	80062aa <_printf_i+0x19e>
 80062a4:	066d      	lsls	r5, r5, #25
 80062a6:	d5fb      	bpl.n	80062a0 <_printf_i+0x194>
 80062a8:	8019      	strh	r1, [r3, #0]
 80062aa:	2300      	movs	r3, #0
 80062ac:	9d03      	ldr	r5, [sp, #12]
 80062ae:	6123      	str	r3, [r4, #16]
 80062b0:	e7bf      	b.n	8006232 <_printf_i+0x126>
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	1d11      	adds	r1, r2, #4
 80062b6:	6019      	str	r1, [r3, #0]
 80062b8:	6815      	ldr	r5, [r2, #0]
 80062ba:	2100      	movs	r1, #0
 80062bc:	0028      	movs	r0, r5
 80062be:	6862      	ldr	r2, [r4, #4]
 80062c0:	f000 f858 	bl	8006374 <memchr>
 80062c4:	2800      	cmp	r0, #0
 80062c6:	d001      	beq.n	80062cc <_printf_i+0x1c0>
 80062c8:	1b40      	subs	r0, r0, r5
 80062ca:	6060      	str	r0, [r4, #4]
 80062cc:	6863      	ldr	r3, [r4, #4]
 80062ce:	6123      	str	r3, [r4, #16]
 80062d0:	2300      	movs	r3, #0
 80062d2:	9a03      	ldr	r2, [sp, #12]
 80062d4:	7013      	strb	r3, [r2, #0]
 80062d6:	e7ac      	b.n	8006232 <_printf_i+0x126>
 80062d8:	002a      	movs	r2, r5
 80062da:	6923      	ldr	r3, [r4, #16]
 80062dc:	9906      	ldr	r1, [sp, #24]
 80062de:	9805      	ldr	r0, [sp, #20]
 80062e0:	9d07      	ldr	r5, [sp, #28]
 80062e2:	47a8      	blx	r5
 80062e4:	3001      	adds	r0, #1
 80062e6:	d0ae      	beq.n	8006246 <_printf_i+0x13a>
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	079b      	lsls	r3, r3, #30
 80062ec:	d415      	bmi.n	800631a <_printf_i+0x20e>
 80062ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062f0:	68e0      	ldr	r0, [r4, #12]
 80062f2:	4298      	cmp	r0, r3
 80062f4:	daa9      	bge.n	800624a <_printf_i+0x13e>
 80062f6:	0018      	movs	r0, r3
 80062f8:	e7a7      	b.n	800624a <_printf_i+0x13e>
 80062fa:	0022      	movs	r2, r4
 80062fc:	2301      	movs	r3, #1
 80062fe:	9906      	ldr	r1, [sp, #24]
 8006300:	9805      	ldr	r0, [sp, #20]
 8006302:	9e07      	ldr	r6, [sp, #28]
 8006304:	3219      	adds	r2, #25
 8006306:	47b0      	blx	r6
 8006308:	3001      	adds	r0, #1
 800630a:	d09c      	beq.n	8006246 <_printf_i+0x13a>
 800630c:	3501      	adds	r5, #1
 800630e:	68e3      	ldr	r3, [r4, #12]
 8006310:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	42ab      	cmp	r3, r5
 8006316:	dcf0      	bgt.n	80062fa <_printf_i+0x1ee>
 8006318:	e7e9      	b.n	80062ee <_printf_i+0x1e2>
 800631a:	2500      	movs	r5, #0
 800631c:	e7f7      	b.n	800630e <_printf_i+0x202>
 800631e:	46c0      	nop			@ (mov r8, r8)
 8006320:	08006575 	.word	0x08006575
 8006324:	08006586 	.word	0x08006586

08006328 <memmove>:
 8006328:	b510      	push	{r4, lr}
 800632a:	4288      	cmp	r0, r1
 800632c:	d806      	bhi.n	800633c <memmove+0x14>
 800632e:	2300      	movs	r3, #0
 8006330:	429a      	cmp	r2, r3
 8006332:	d008      	beq.n	8006346 <memmove+0x1e>
 8006334:	5ccc      	ldrb	r4, [r1, r3]
 8006336:	54c4      	strb	r4, [r0, r3]
 8006338:	3301      	adds	r3, #1
 800633a:	e7f9      	b.n	8006330 <memmove+0x8>
 800633c:	188b      	adds	r3, r1, r2
 800633e:	4298      	cmp	r0, r3
 8006340:	d2f5      	bcs.n	800632e <memmove+0x6>
 8006342:	3a01      	subs	r2, #1
 8006344:	d200      	bcs.n	8006348 <memmove+0x20>
 8006346:	bd10      	pop	{r4, pc}
 8006348:	5c8b      	ldrb	r3, [r1, r2]
 800634a:	5483      	strb	r3, [r0, r2]
 800634c:	e7f9      	b.n	8006342 <memmove+0x1a>
	...

08006350 <_sbrk_r>:
 8006350:	2300      	movs	r3, #0
 8006352:	b570      	push	{r4, r5, r6, lr}
 8006354:	4d06      	ldr	r5, [pc, #24]	@ (8006370 <_sbrk_r+0x20>)
 8006356:	0004      	movs	r4, r0
 8006358:	0008      	movs	r0, r1
 800635a:	602b      	str	r3, [r5, #0]
 800635c:	f7fa ff30 	bl	80011c0 <_sbrk>
 8006360:	1c43      	adds	r3, r0, #1
 8006362:	d103      	bne.n	800636c <_sbrk_r+0x1c>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d000      	beq.n	800636c <_sbrk_r+0x1c>
 800636a:	6023      	str	r3, [r4, #0]
 800636c:	bd70      	pop	{r4, r5, r6, pc}
 800636e:	46c0      	nop			@ (mov r8, r8)
 8006370:	200003f8 	.word	0x200003f8

08006374 <memchr>:
 8006374:	b2c9      	uxtb	r1, r1
 8006376:	1882      	adds	r2, r0, r2
 8006378:	4290      	cmp	r0, r2
 800637a:	d101      	bne.n	8006380 <memchr+0xc>
 800637c:	2000      	movs	r0, #0
 800637e:	4770      	bx	lr
 8006380:	7803      	ldrb	r3, [r0, #0]
 8006382:	428b      	cmp	r3, r1
 8006384:	d0fb      	beq.n	800637e <memchr+0xa>
 8006386:	3001      	adds	r0, #1
 8006388:	e7f6      	b.n	8006378 <memchr+0x4>

0800638a <memcpy>:
 800638a:	2300      	movs	r3, #0
 800638c:	b510      	push	{r4, lr}
 800638e:	429a      	cmp	r2, r3
 8006390:	d100      	bne.n	8006394 <memcpy+0xa>
 8006392:	bd10      	pop	{r4, pc}
 8006394:	5ccc      	ldrb	r4, [r1, r3]
 8006396:	54c4      	strb	r4, [r0, r3]
 8006398:	3301      	adds	r3, #1
 800639a:	e7f8      	b.n	800638e <memcpy+0x4>

0800639c <_realloc_r>:
 800639c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800639e:	0006      	movs	r6, r0
 80063a0:	000c      	movs	r4, r1
 80063a2:	0015      	movs	r5, r2
 80063a4:	2900      	cmp	r1, #0
 80063a6:	d105      	bne.n	80063b4 <_realloc_r+0x18>
 80063a8:	0011      	movs	r1, r2
 80063aa:	f7ff fc51 	bl	8005c50 <_malloc_r>
 80063ae:	0004      	movs	r4, r0
 80063b0:	0020      	movs	r0, r4
 80063b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80063b4:	2a00      	cmp	r2, #0
 80063b6:	d103      	bne.n	80063c0 <_realloc_r+0x24>
 80063b8:	f7ff fbde 	bl	8005b78 <_free_r>
 80063bc:	2400      	movs	r4, #0
 80063be:	e7f7      	b.n	80063b0 <_realloc_r+0x14>
 80063c0:	f000 f81b 	bl	80063fa <_malloc_usable_size_r>
 80063c4:	0007      	movs	r7, r0
 80063c6:	4285      	cmp	r5, r0
 80063c8:	d802      	bhi.n	80063d0 <_realloc_r+0x34>
 80063ca:	0843      	lsrs	r3, r0, #1
 80063cc:	42ab      	cmp	r3, r5
 80063ce:	d3ef      	bcc.n	80063b0 <_realloc_r+0x14>
 80063d0:	0029      	movs	r1, r5
 80063d2:	0030      	movs	r0, r6
 80063d4:	f7ff fc3c 	bl	8005c50 <_malloc_r>
 80063d8:	9001      	str	r0, [sp, #4]
 80063da:	2800      	cmp	r0, #0
 80063dc:	d0ee      	beq.n	80063bc <_realloc_r+0x20>
 80063de:	002a      	movs	r2, r5
 80063e0:	42bd      	cmp	r5, r7
 80063e2:	d900      	bls.n	80063e6 <_realloc_r+0x4a>
 80063e4:	003a      	movs	r2, r7
 80063e6:	0021      	movs	r1, r4
 80063e8:	9801      	ldr	r0, [sp, #4]
 80063ea:	f7ff ffce 	bl	800638a <memcpy>
 80063ee:	0021      	movs	r1, r4
 80063f0:	0030      	movs	r0, r6
 80063f2:	f7ff fbc1 	bl	8005b78 <_free_r>
 80063f6:	9c01      	ldr	r4, [sp, #4]
 80063f8:	e7da      	b.n	80063b0 <_realloc_r+0x14>

080063fa <_malloc_usable_size_r>:
 80063fa:	1f0b      	subs	r3, r1, #4
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	1f18      	subs	r0, r3, #4
 8006400:	2b00      	cmp	r3, #0
 8006402:	da01      	bge.n	8006408 <_malloc_usable_size_r+0xe>
 8006404:	580b      	ldr	r3, [r1, r0]
 8006406:	18c0      	adds	r0, r0, r3
 8006408:	4770      	bx	lr
	...

0800640c <_init>:
 800640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640e:	46c0      	nop			@ (mov r8, r8)
 8006410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006412:	bc08      	pop	{r3}
 8006414:	469e      	mov	lr, r3
 8006416:	4770      	bx	lr

08006418 <_fini>:
 8006418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641a:	46c0      	nop			@ (mov r8, r8)
 800641c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641e:	bc08      	pop	{r3}
 8006420:	469e      	mov	lr, r3
 8006422:	4770      	bx	lr
