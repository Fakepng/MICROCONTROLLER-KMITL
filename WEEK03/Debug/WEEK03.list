
WEEK03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080048ac  080048ac  000058ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004980  08004980  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004980  08004980  00005980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004988  08004988  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004988  08004988  00005988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800498c  0800498c  0000598c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004990  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000005c  080049ec  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  080049ec  000062c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d455  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002006  00000000  00000000  000134d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  000154e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000870  00000000  00000000  00015fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001858a  00000000  00000000  00016850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc8b  00000000  00000000  0002edda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ed15  00000000  00000000  0003ca65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db77a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bac  00000000  00000000  000db7c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000de36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004894 	.word	0x08004894

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08004894 	.word	0x08004894

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b08b      	sub	sp, #44	@ 0x2c
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fb13 	bl	8000c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f85f 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f971 	bl	8000924 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000642:	f000 f921 	bl	8000888 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000646:	f000 f8a1 	bl	800078c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 800064a:	4b28      	ldr	r3, [pc, #160]	@ (80006ec <main+0xbc>)
 800064c:	0018      	movs	r0, r3
 800064e:	f001 fb83 	bl	8001d58 <HAL_ADCEx_Calibration_Start>
  HAL_UART_Transmit(&huart2, (uint8_t *)"Fakepng\r\n", 9, 1000);
 8000652:	23fa      	movs	r3, #250	@ 0xfa
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4926      	ldr	r1, [pc, #152]	@ (80006f0 <main+0xc0>)
 8000658:	4826      	ldr	r0, [pc, #152]	@ (80006f4 <main+0xc4>)
 800065a:	2209      	movs	r2, #9
 800065c:	f002 fdcc 	bl	80031f8 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t adc_value[0] = {0, 0};
	  char adc_value_string[30];
	  int adc_value_string_size = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	@ 0x24

	  HAL_ADC_Start(&hadc1);
 8000664:	4b21      	ldr	r3, [pc, #132]	@ (80006ec <main+0xbc>)
 8000666:	0018      	movs	r0, r3
 8000668:	f000 feb6 	bl	80013d8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 800066c:	23fa      	movs	r3, #250	@ 0xfa
 800066e:	009a      	lsls	r2, r3, #2
 8000670:	4b1e      	ldr	r3, [pc, #120]	@ (80006ec <main+0xbc>)
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f000 ff39 	bl	80014ec <HAL_ADC_PollForConversion>
	  adc_value[0] = HAL_ADC_GetValue(&hadc1);
 800067a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ec <main+0xbc>)
 800067c:	0018      	movs	r0, r3
 800067e:	f000 ffc9 	bl	8001614 <HAL_ADC_GetValue>
 8000682:	0003      	movs	r3, r0
 8000684:	b29a      	uxth	r2, r3
 8000686:	2424      	movs	r4, #36	@ 0x24
 8000688:	193b      	adds	r3, r7, r4
 800068a:	801a      	strh	r2, [r3, #0]

	  HAL_ADC_Start(&hadc1);
 800068c:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <main+0xbc>)
 800068e:	0018      	movs	r0, r3
 8000690:	f000 fea2 	bl	80013d8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000694:	23fa      	movs	r3, #250	@ 0xfa
 8000696:	009a      	lsls	r2, r3, #2
 8000698:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <main+0xbc>)
 800069a:	0011      	movs	r1, r2
 800069c:	0018      	movs	r0, r3
 800069e:	f000 ff25 	bl	80014ec <HAL_ADC_PollForConversion>
	  adc_value[1] = HAL_ADC_GetValue(&hadc1);
 80006a2:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <main+0xbc>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 ffb5 	bl	8001614 <HAL_ADC_GetValue>
 80006aa:	0003      	movs	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	805a      	strh	r2, [r3, #2]

	  HAL_ADC_Stop(&hadc1);
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <main+0xbc>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fedd 	bl	8001474 <HAL_ADC_Stop>

	  adc_value_string_size = sprintf(adc_value_string, "%d, %d\r\n", adc_value[0], adc_value[1]);
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	001a      	movs	r2, r3
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	885b      	ldrh	r3, [r3, #2]
 80006c4:	490c      	ldr	r1, [pc, #48]	@ (80006f8 <main+0xc8>)
 80006c6:	1d38      	adds	r0, r7, #4
 80006c8:	f003 fc46 	bl	8003f58 <siprintf>
 80006cc:	0003      	movs	r3, r0
 80006ce:	627b      	str	r3, [r7, #36]	@ 0x24
	  HAL_UART_Transmit(&huart2, adc_value_string, adc_value_string_size, 1000);
 80006d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	23fa      	movs	r3, #250	@ 0xfa
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	1d39      	adds	r1, r7, #4
 80006da:	4806      	ldr	r0, [pc, #24]	@ (80006f4 <main+0xc4>)
 80006dc:	f002 fd8c 	bl	80031f8 <HAL_UART_Transmit>

	  HAL_Delay(20);
 80006e0:	2014      	movs	r0, #20
 80006e2:	f000 fb43 	bl	8000d6c <HAL_Delay>
  {
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	e7ba      	b.n	8000660 <main+0x30>
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	20000078 	.word	0x20000078
 80006f0:	080048ac 	.word	0x080048ac
 80006f4:	200000dc 	.word	0x200000dc
 80006f8:	080048b8 	.word	0x080048b8

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b093      	sub	sp, #76	@ 0x4c
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	2410      	movs	r4, #16
 8000704:	193b      	adds	r3, r7, r4
 8000706:	0018      	movs	r0, r3
 8000708:	2338      	movs	r3, #56	@ 0x38
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f003 fc43 	bl	8003f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	003b      	movs	r3, r7
 8000714:	0018      	movs	r0, r3
 8000716:	2310      	movs	r3, #16
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f003 fc3c 	bl	8003f98 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	2380      	movs	r3, #128	@ 0x80
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	0018      	movs	r0, r3
 8000726:	f001 fe49 	bl	80023bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2202      	movs	r2, #2
 800072e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000730:	193b      	adds	r3, r7, r4
 8000732:	2280      	movs	r2, #128	@ 0x80
 8000734:	0052      	lsls	r2, r2, #1
 8000736:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2240      	movs	r2, #64	@ 0x40
 8000742:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	193b      	adds	r3, r7, r4
 800074c:	0018      	movs	r0, r3
 800074e:	f001 fe81 	bl	8002454 <HAL_RCC_OscConfig>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000756:	f000 f935 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	003b      	movs	r3, r7
 800075c:	2207      	movs	r2, #7
 800075e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000760:	003b      	movs	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	003b      	movs	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076c:	003b      	movs	r3, r7
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000772:	003b      	movs	r3, r7
 8000774:	2100      	movs	r1, #0
 8000776:	0018      	movs	r0, r3
 8000778:	f002 f986 	bl	8002a88 <HAL_RCC_ClockConfig>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000780:	f000 f920 	bl	80009c4 <Error_Handler>
  }
}
 8000784:	46c0      	nop			@ (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b013      	add	sp, #76	@ 0x4c
 800078a:	bd90      	pop	{r4, r7, pc}

0800078c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	0018      	movs	r0, r3
 8000796:	230c      	movs	r3, #12
 8000798:	001a      	movs	r2, r3
 800079a:	2100      	movs	r1, #0
 800079c:	f003 fbfc 	bl	8003f98 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007a0:	4b36      	ldr	r3, [pc, #216]	@ (800087c <MX_ADC1_Init+0xf0>)
 80007a2:	4a37      	ldr	r2, [pc, #220]	@ (8000880 <MX_ADC1_Init+0xf4>)
 80007a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007a6:	4b35      	ldr	r3, [pc, #212]	@ (800087c <MX_ADC1_Init+0xf0>)
 80007a8:	2280      	movs	r2, #128	@ 0x80
 80007aa:	05d2      	lsls	r2, r2, #23
 80007ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ae:	4b33      	ldr	r3, [pc, #204]	@ (800087c <MX_ADC1_Init+0xf0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b4:	4b31      	ldr	r3, [pc, #196]	@ (800087c <MX_ADC1_Init+0xf0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007ba:	4b30      	ldr	r3, [pc, #192]	@ (800087c <MX_ADC1_Init+0xf0>)
 80007bc:	2280      	movs	r2, #128	@ 0x80
 80007be:	0392      	lsls	r2, r2, #14
 80007c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c2:	4b2e      	ldr	r3, [pc, #184]	@ (800087c <MX_ADC1_Init+0xf0>)
 80007c4:	2204      	movs	r2, #4
 80007c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007c8:	4b2c      	ldr	r3, [pc, #176]	@ (800087c <MX_ADC1_Init+0xf0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80007ce:	4b2b      	ldr	r3, [pc, #172]	@ (800087c <MX_ADC1_Init+0xf0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d4:	4b29      	ldr	r3, [pc, #164]	@ (800087c <MX_ADC1_Init+0xf0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 80007da:	4b28      	ldr	r3, [pc, #160]	@ (800087c <MX_ADC1_Init+0xf0>)
 80007dc:	2202      	movs	r2, #2
 80007de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80007e0:	4b26      	ldr	r3, [pc, #152]	@ (800087c <MX_ADC1_Init+0xf0>)
 80007e2:	2220      	movs	r2, #32
 80007e4:	2101      	movs	r1, #1
 80007e6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e8:	4b24      	ldr	r3, [pc, #144]	@ (800087c <MX_ADC1_Init+0xf0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ee:	4b23      	ldr	r3, [pc, #140]	@ (800087c <MX_ADC1_Init+0xf0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007f4:	4b21      	ldr	r3, [pc, #132]	@ (800087c <MX_ADC1_Init+0xf0>)
 80007f6:	222c      	movs	r2, #44	@ 0x2c
 80007f8:	2100      	movs	r1, #0
 80007fa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	@ (800087c <MX_ADC1_Init+0xf0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000802:	4b1e      	ldr	r3, [pc, #120]	@ (800087c <MX_ADC1_Init+0xf0>)
 8000804:	2200      	movs	r2, #0
 8000806:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000808:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <MX_ADC1_Init+0xf0>)
 800080a:	2200      	movs	r2, #0
 800080c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800080e:	4b1b      	ldr	r3, [pc, #108]	@ (800087c <MX_ADC1_Init+0xf0>)
 8000810:	223c      	movs	r2, #60	@ 0x3c
 8000812:	2100      	movs	r1, #0
 8000814:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000816:	4b19      	ldr	r3, [pc, #100]	@ (800087c <MX_ADC1_Init+0xf0>)
 8000818:	2200      	movs	r2, #0
 800081a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800081c:	4b17      	ldr	r3, [pc, #92]	@ (800087c <MX_ADC1_Init+0xf0>)
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fc32 	bl	8001088 <HAL_ADC_Init>
 8000824:	1e03      	subs	r3, r0, #0
 8000826:	d001      	beq.n	800082c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000828:	f000 f8cc 	bl	80009c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2201      	movs	r2, #1
 8000830:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <MX_ADC1_Init+0xf0>)
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f000 fef1 	bl	800162c <HAL_ADC_ConfigChannel>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800084e:	f000 f8b9 	bl	80009c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4a0b      	ldr	r2, [pc, #44]	@ (8000884 <MX_ADC1_Init+0xf8>)
 8000856:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2204      	movs	r2, #4
 800085c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085e:	1d3a      	adds	r2, r7, #4
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_ADC1_Init+0xf0>)
 8000862:	0011      	movs	r1, r2
 8000864:	0018      	movs	r0, r3
 8000866:	f000 fee1 	bl	800162c <HAL_ADC_ConfigChannel>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800086e:	f000 f8a9 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b004      	add	sp, #16
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	20000078 	.word	0x20000078
 8000880:	40012400 	.word	0x40012400
 8000884:	04000002 	.word	0x04000002

08000888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800088c:	4b23      	ldr	r3, [pc, #140]	@ (800091c <MX_USART2_UART_Init+0x94>)
 800088e:	4a24      	ldr	r2, [pc, #144]	@ (8000920 <MX_USART2_UART_Init+0x98>)
 8000890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000892:	4b22      	ldr	r3, [pc, #136]	@ (800091c <MX_USART2_UART_Init+0x94>)
 8000894:	22e1      	movs	r2, #225	@ 0xe1
 8000896:	0252      	lsls	r2, r2, #9
 8000898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b20      	ldr	r3, [pc, #128]	@ (800091c <MX_USART2_UART_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b1e      	ldr	r3, [pc, #120]	@ (800091c <MX_USART2_UART_Init+0x94>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	@ (800091c <MX_USART2_UART_Init+0x94>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <MX_USART2_UART_Init+0x94>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <MX_USART2_UART_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b18      	ldr	r3, [pc, #96]	@ (800091c <MX_USART2_UART_Init+0x94>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b17      	ldr	r3, [pc, #92]	@ (800091c <MX_USART2_UART_Init+0x94>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c4:	4b15      	ldr	r3, [pc, #84]	@ (800091c <MX_USART2_UART_Init+0x94>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ca:	4b14      	ldr	r3, [pc, #80]	@ (800091c <MX_USART2_UART_Init+0x94>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d0:	4b12      	ldr	r3, [pc, #72]	@ (800091c <MX_USART2_UART_Init+0x94>)
 80008d2:	0018      	movs	r0, r3
 80008d4:	f002 fc3a 	bl	800314c <HAL_UART_Init>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008dc:	f000 f872 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e0:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <MX_USART2_UART_Init+0x94>)
 80008e2:	2100      	movs	r1, #0
 80008e4:	0018      	movs	r0, r3
 80008e6:	f003 fa57 	bl	8003d98 <HAL_UARTEx_SetTxFifoThreshold>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ee:	f000 f869 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f2:	4b0a      	ldr	r3, [pc, #40]	@ (800091c <MX_USART2_UART_Init+0x94>)
 80008f4:	2100      	movs	r1, #0
 80008f6:	0018      	movs	r0, r3
 80008f8:	f003 fa8e 	bl	8003e18 <HAL_UARTEx_SetRxFifoThreshold>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000900:	f000 f860 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000904:	4b05      	ldr	r3, [pc, #20]	@ (800091c <MX_USART2_UART_Init+0x94>)
 8000906:	0018      	movs	r0, r3
 8000908:	f003 fa0c 	bl	8003d24 <HAL_UARTEx_DisableFifoMode>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 f858 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000914:	46c0      	nop			@ (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	200000dc 	.word	0x200000dc
 8000920:	40004400 	.word	0x40004400

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b089      	sub	sp, #36	@ 0x24
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	240c      	movs	r4, #12
 800092c:	193b      	adds	r3, r7, r4
 800092e:	0018      	movs	r0, r3
 8000930:	2314      	movs	r3, #20
 8000932:	001a      	movs	r2, r3
 8000934:	2100      	movs	r1, #0
 8000936:	f003 fb2f 	bl	8003f98 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <MX_GPIO_Init+0x9c>)
 800093c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800093e:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <MX_GPIO_Init+0x9c>)
 8000940:	2104      	movs	r1, #4
 8000942:	430a      	orrs	r2, r1
 8000944:	635a      	str	r2, [r3, #52]	@ 0x34
 8000946:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <MX_GPIO_Init+0x9c>)
 8000948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800094a:	2204      	movs	r2, #4
 800094c:	4013      	ands	r3, r2
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000952:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <MX_GPIO_Init+0x9c>)
 8000954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000956:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <MX_GPIO_Init+0x9c>)
 8000958:	2120      	movs	r1, #32
 800095a:	430a      	orrs	r2, r1
 800095c:	635a      	str	r2, [r3, #52]	@ 0x34
 800095e:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <MX_GPIO_Init+0x9c>)
 8000960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000962:	2220      	movs	r2, #32
 8000964:	4013      	ands	r3, r2
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <MX_GPIO_Init+0x9c>)
 800096c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800096e:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_GPIO_Init+0x9c>)
 8000970:	2101      	movs	r1, #1
 8000972:	430a      	orrs	r2, r1
 8000974:	635a      	str	r2, [r3, #52]	@ 0x34
 8000976:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <MX_GPIO_Init+0x9c>)
 8000978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800097a:	2201      	movs	r2, #1
 800097c:	4013      	ands	r3, r2
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000982:	23a0      	movs	r3, #160	@ 0xa0
 8000984:	05db      	lsls	r3, r3, #23
 8000986:	2200      	movs	r2, #0
 8000988:	2120      	movs	r1, #32
 800098a:	0018      	movs	r0, r3
 800098c:	f001 fcf8 	bl	8002380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000990:	0021      	movs	r1, r4
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2220      	movs	r2, #32
 8000996:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2201      	movs	r2, #1
 800099c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2202      	movs	r2, #2
 80009a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80009aa:	187a      	adds	r2, r7, r1
 80009ac:	23a0      	movs	r3, #160	@ 0xa0
 80009ae:	05db      	lsls	r3, r3, #23
 80009b0:	0011      	movs	r1, r2
 80009b2:	0018      	movs	r0, r3
 80009b4:	f001 fb80 	bl	80020b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b009      	add	sp, #36	@ 0x24
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	40021000 	.word	0x40021000

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	e7fd      	b.n	80009cc <Error_Handler+0x8>

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <HAL_MspInit+0x44>)
 80009d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <HAL_MspInit+0x44>)
 80009dc:	2101      	movs	r1, #1
 80009de:	430a      	orrs	r2, r1
 80009e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80009e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <HAL_MspInit+0x44>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	2201      	movs	r2, #1
 80009e8:	4013      	ands	r3, r2
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <HAL_MspInit+0x44>)
 80009f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009f2:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <HAL_MspInit+0x44>)
 80009f4:	2180      	movs	r1, #128	@ 0x80
 80009f6:	0549      	lsls	r1, r1, #21
 80009f8:	430a      	orrs	r2, r1
 80009fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <HAL_MspInit+0x44>)
 80009fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a00:	2380      	movs	r3, #128	@ 0x80
 8000a02:	055b      	lsls	r3, r3, #21
 8000a04:	4013      	ands	r3, r2
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b002      	add	sp, #8
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	40021000 	.word	0x40021000

08000a18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b08b      	sub	sp, #44	@ 0x2c
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	2414      	movs	r4, #20
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	0018      	movs	r0, r3
 8000a26:	2314      	movs	r3, #20
 8000a28:	001a      	movs	r2, r3
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	f003 fab4 	bl	8003f98 <memset>
  if(hadc->Instance==ADC1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a18      	ldr	r2, [pc, #96]	@ (8000a98 <HAL_ADC_MspInit+0x80>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d129      	bne.n	8000a8e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a3a:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <HAL_ADC_MspInit+0x84>)
 8000a3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a3e:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <HAL_ADC_MspInit+0x84>)
 8000a40:	2180      	movs	r1, #128	@ 0x80
 8000a42:	0349      	lsls	r1, r1, #13
 8000a44:	430a      	orrs	r2, r1
 8000a46:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a48:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <HAL_ADC_MspInit+0x84>)
 8000a4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a4c:	2380      	movs	r3, #128	@ 0x80
 8000a4e:	035b      	lsls	r3, r3, #13
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <HAL_ADC_MspInit+0x84>)
 8000a58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <HAL_ADC_MspInit+0x84>)
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <HAL_ADC_MspInit+0x84>)
 8000a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a66:	2201      	movs	r2, #1
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2203      	movs	r2, #3
 8000a72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2203      	movs	r2, #3
 8000a78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	193a      	adds	r2, r7, r4
 8000a82:	23a0      	movs	r3, #160	@ 0xa0
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	0011      	movs	r1, r2
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f001 fb15 	bl	80020b8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b00b      	add	sp, #44	@ 0x2c
 8000a94:	bd90      	pop	{r4, r7, pc}
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	40012400 	.word	0x40012400
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b097      	sub	sp, #92	@ 0x5c
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	2344      	movs	r3, #68	@ 0x44
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	0018      	movs	r0, r3
 8000aae:	2314      	movs	r3, #20
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f003 fa70 	bl	8003f98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab8:	2410      	movs	r4, #16
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	0018      	movs	r0, r3
 8000abe:	2334      	movs	r3, #52	@ 0x34
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f003 fa68 	bl	8003f98 <memset>
  if(huart->Instance==USART2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a22      	ldr	r2, [pc, #136]	@ (8000b58 <HAL_UART_MspInit+0xb8>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d13e      	bne.n	8000b50 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f002 f97b 	bl	8002ddc <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	1e03      	subs	r3, r0, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000aea:	f7ff ff6b 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aee:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <HAL_UART_MspInit+0xbc>)
 8000af0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000af2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <HAL_UART_MspInit+0xbc>)
 8000af4:	2180      	movs	r1, #128	@ 0x80
 8000af6:	0289      	lsls	r1, r1, #10
 8000af8:	430a      	orrs	r2, r1
 8000afa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000afc:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <HAL_UART_MspInit+0xbc>)
 8000afe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b00:	2380      	movs	r3, #128	@ 0x80
 8000b02:	029b      	lsls	r3, r3, #10
 8000b04:	4013      	ands	r3, r2
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <HAL_UART_MspInit+0xbc>)
 8000b0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <HAL_UART_MspInit+0xbc>)
 8000b10:	2101      	movs	r1, #1
 8000b12:	430a      	orrs	r2, r1
 8000b14:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <HAL_UART_MspInit+0xbc>)
 8000b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b22:	2144      	movs	r1, #68	@ 0x44
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	220c      	movs	r2, #12
 8000b28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2201      	movs	r2, #1
 8000b34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2201      	movs	r2, #1
 8000b40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	187a      	adds	r2, r7, r1
 8000b44:	23a0      	movs	r3, #160	@ 0xa0
 8000b46:	05db      	lsls	r3, r3, #23
 8000b48:	0011      	movs	r1, r2
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f001 fab4 	bl	80020b8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b50:	46c0      	nop			@ (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b017      	add	sp, #92	@ 0x5c
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	40004400 	.word	0x40004400
 8000b5c:	40021000 	.word	0x40021000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b64:	46c0      	nop			@ (mov r8, r8)
 8000b66:	e7fd      	b.n	8000b64 <NMI_Handler+0x4>

08000b68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6c:	46c0      	nop			@ (mov r8, r8)
 8000b6e:	e7fd      	b.n	8000b6c <HardFault_Handler+0x4>

08000b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b74:	46c0      	nop			@ (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b88:	f000 f8d4 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8c:	46c0      	nop			@ (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b9c:	4a14      	ldr	r2, [pc, #80]	@ (8000bf0 <_sbrk+0x5c>)
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <_sbrk+0x60>)
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <_sbrk+0x64>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	@ (8000bfc <_sbrk+0x68>)
 8000bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	18d3      	adds	r3, r2, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d207      	bcs.n	8000bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc4:	f003 f9f0 	bl	8003fa8 <__errno>
 8000bc8:	0003      	movs	r3, r0
 8000bca:	220c      	movs	r2, #12
 8000bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	425b      	negs	r3, r3
 8000bd2:	e009      	b.n	8000be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bda:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	18d2      	adds	r2, r2, r3
 8000be2:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <_sbrk+0x64>)
 8000be4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000be6:	68fb      	ldr	r3, [r7, #12]
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b006      	add	sp, #24
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20009000 	.word	0x20009000
 8000bf4:	00000400 	.word	0x00000400
 8000bf8:	20000170 	.word	0x20000170
 8000bfc:	200002c0 	.word	0x200002c0

08000c00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c04:	46c0      	nop			@ (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c0c:	480d      	ldr	r0, [pc, #52]	@ (8000c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c10:	f7ff fff6 	bl	8000c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c16:	490d      	ldr	r1, [pc, #52]	@ (8000c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c18:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <LoopForever+0xe>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c58 <LoopForever+0x16>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c3a:	f003 f9bb 	bl	8003fb4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c3e:	f7ff fcf7 	bl	8000630 <main>

08000c42 <LoopForever>:

LoopForever:
  b LoopForever
 8000c42:	e7fe      	b.n	8000c42 <LoopForever>
  ldr   r0, =_estack
 8000c44:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c50:	08004990 	.word	0x08004990
  ldr r2, =_sbss
 8000c54:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c58:	200002c0 	.word	0x200002c0

08000c5c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC1_COMP_IRQHandler>
	...

08000c60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <HAL_Init+0x3c>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <HAL_Init+0x3c>)
 8000c72:	2180      	movs	r1, #128	@ 0x80
 8000c74:	0049      	lsls	r1, r1, #1
 8000c76:	430a      	orrs	r2, r1
 8000c78:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 f810 	bl	8000ca0 <HAL_InitTick>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d003      	beq.n	8000c8c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c84:	1dfb      	adds	r3, r7, #7
 8000c86:	2201      	movs	r2, #1
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e001      	b.n	8000c90 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c8c:	f7ff fea0 	bl	80009d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	781b      	ldrb	r3, [r3, #0]
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40022000 	.word	0x40022000

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca8:	230f      	movs	r3, #15
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d28 <HAL_InitTick+0x88>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d02b      	beq.n	8000d10 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <HAL_InitTick+0x8c>)
 8000cba:	681c      	ldr	r4, [r3, #0]
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <HAL_InitTick+0x88>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	23fa      	movs	r3, #250	@ 0xfa
 8000cc4:	0098      	lsls	r0, r3, #2
 8000cc6:	f7ff fa27 	bl	8000118 <__udivsi3>
 8000cca:	0003      	movs	r3, r0
 8000ccc:	0019      	movs	r1, r3
 8000cce:	0020      	movs	r0, r4
 8000cd0:	f7ff fa22 	bl	8000118 <__udivsi3>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f001 f9e1 	bl	800209e <HAL_SYSTICK_Config>
 8000cdc:	1e03      	subs	r3, r0, #0
 8000cde:	d112      	bne.n	8000d06 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d80a      	bhi.n	8000cfc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	2301      	movs	r3, #1
 8000cea:	425b      	negs	r3, r3
 8000cec:	2200      	movs	r2, #0
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f001 f9c0 	bl	8002074 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <HAL_InitTick+0x90>)
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	e00d      	b.n	8000d18 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	2201      	movs	r2, #1
 8000d02:	701a      	strb	r2, [r3, #0]
 8000d04:	e008      	b.n	8000d18 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d06:	230f      	movs	r3, #15
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
 8000d0e:	e003      	b.n	8000d18 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d10:	230f      	movs	r3, #15
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d18:	230f      	movs	r3, #15
 8000d1a:	18fb      	adds	r3, r7, r3
 8000d1c:	781b      	ldrb	r3, [r3, #0]
}
 8000d1e:	0018      	movs	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b005      	add	sp, #20
 8000d24:	bd90      	pop	{r4, r7, pc}
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000004 	.word	0x20000004

08000d34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d38:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <HAL_IncTick+0x1c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <HAL_IncTick+0x20>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	18d2      	adds	r2, r2, r3
 8000d44:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <HAL_IncTick+0x20>)
 8000d46:	601a      	str	r2, [r3, #0]
}
 8000d48:	46c0      	nop			@ (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000174 	.word	0x20000174

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b02      	ldr	r3, [pc, #8]	@ (8000d68 <HAL_GetTick+0x10>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	0018      	movs	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	20000174 	.word	0x20000174

08000d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d74:	f7ff fff0 	bl	8000d58 <HAL_GetTick>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	3301      	adds	r3, #1
 8000d84:	d005      	beq.n	8000d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d86:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <HAL_Delay+0x44>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	001a      	movs	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d92:	46c0      	nop			@ (mov r8, r8)
 8000d94:	f7ff ffe0 	bl	8000d58 <HAL_GetTick>
 8000d98:	0002      	movs	r2, r0
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d8f7      	bhi.n	8000d94 <HAL_Delay+0x28>
  {
  }
}
 8000da4:	46c0      	nop			@ (mov r8, r8)
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b004      	add	sp, #16
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	20000008 	.word	0x20000008

08000db4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	601a      	str	r2, [r3, #0]
}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b002      	add	sp, #8
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			@ (mov r8, r8)
 8000dd8:	fe3fffff 	.word	0xfe3fffff

08000ddc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	23e0      	movs	r3, #224	@ 0xe0
 8000dea:	045b      	lsls	r3, r3, #17
 8000dec:	4013      	ands	r3, r2
}
 8000dee:	0018      	movs	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b002      	add	sp, #8
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b084      	sub	sp, #16
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	60f8      	str	r0, [r7, #12]
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	2104      	movs	r1, #4
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	2107      	movs	r1, #7
 8000e0e:	4091      	lsls	r1, r2
 8000e10:	000a      	movs	r2, r1
 8000e12:	43d2      	mvns	r2, r2
 8000e14:	401a      	ands	r2, r3
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	2104      	movs	r1, #4
 8000e1a:	400b      	ands	r3, r1
 8000e1c:	6879      	ldr	r1, [r7, #4]
 8000e1e:	4099      	lsls	r1, r3
 8000e20:	000b      	movs	r3, r1
 8000e22:	431a      	orrs	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000e28:	46c0      	nop			@ (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b004      	add	sp, #16
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	2104      	movs	r1, #4
 8000e42:	400a      	ands	r2, r1
 8000e44:	2107      	movs	r1, #7
 8000e46:	4091      	lsls	r1, r2
 8000e48:	000a      	movs	r2, r1
 8000e4a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2104      	movs	r1, #4
 8000e50:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e52:	40da      	lsrs	r2, r3
 8000e54:	0013      	movs	r3, r2
}
 8000e56:	0018      	movs	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b002      	add	sp, #8
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	23c0      	movs	r3, #192	@ 0xc0
 8000e6c:	011b      	lsls	r3, r3, #4
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d101      	bne.n	8000e76 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b002      	add	sp, #8
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e90:	68ba      	ldr	r2, [r7, #8]
 8000e92:	211f      	movs	r1, #31
 8000e94:	400a      	ands	r2, r1
 8000e96:	210f      	movs	r1, #15
 8000e98:	4091      	lsls	r1, r2
 8000e9a:	000a      	movs	r2, r1
 8000e9c:	43d2      	mvns	r2, r2
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	0e9b      	lsrs	r3, r3, #26
 8000ea4:	210f      	movs	r1, #15
 8000ea6:	4019      	ands	r1, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	201f      	movs	r0, #31
 8000eac:	4003      	ands	r3, r0
 8000eae:	4099      	lsls	r1, r3
 8000eb0:	000b      	movs	r3, r1
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000eb8:	46c0      	nop			@ (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b004      	add	sp, #16
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	035b      	lsls	r3, r3, #13
 8000ed2:	0b5b      	lsrs	r3, r3, #13
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b002      	add	sp, #8
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	0352      	lsls	r2, r2, #13
 8000ef4:	0b52      	lsrs	r2, r2, #13
 8000ef6:	43d2      	mvns	r2, r2
 8000ef8:	401a      	ands	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b002      	add	sp, #8
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	0212      	lsls	r2, r2, #8
 8000f1c:	43d2      	mvns	r2, r2
 8000f1e:	401a      	ands	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	400b      	ands	r3, r1
 8000f28:	4904      	ldr	r1, [pc, #16]	@ (8000f3c <LL_ADC_SetChannelSamplingTime+0x34>)
 8000f2a:	400b      	ands	r3, r1
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000f32:	46c0      	nop			@ (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b004      	add	sp, #16
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	07ffff00 	.word	0x07ffff00

08000f40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	4a05      	ldr	r2, [pc, #20]	@ (8000f64 <LL_ADC_EnableInternalRegulator+0x24>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	2280      	movs	r2, #128	@ 0x80
 8000f52:	0552      	lsls	r2, r2, #21
 8000f54:	431a      	orrs	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b002      	add	sp, #8
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			@ (mov r8, r8)
 8000f64:	6fffffe8 	.word	0x6fffffe8

08000f68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	2380      	movs	r3, #128	@ 0x80
 8000f76:	055b      	lsls	r3, r3, #21
 8000f78:	401a      	ands	r2, r3
 8000f7a:	2380      	movs	r3, #128	@ 0x80
 8000f7c:	055b      	lsls	r3, r3, #21
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d101      	bne.n	8000f86 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b002      	add	sp, #8
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <LL_ADC_Enable+0x20>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fa8:	46c0      	nop			@ (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b002      	add	sp, #8
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	7fffffe8 	.word	0x7fffffe8

08000fb4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	4a04      	ldr	r2, [pc, #16]	@ (8000fd4 <LL_ADC_Disable+0x20>)
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000fcc:	46c0      	nop			@ (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b002      	add	sp, #8
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	7fffffe8 	.word	0x7fffffe8

08000fd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d101      	bne.n	8000ff0 <LL_ADC_IsEnabled+0x18>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <LL_ADC_IsEnabled+0x1a>
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b002      	add	sp, #8
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	2202      	movs	r2, #2
 8001008:	4013      	ands	r3, r2
 800100a:	2b02      	cmp	r3, #2
 800100c:	d101      	bne.n	8001012 <LL_ADC_IsDisableOngoing+0x18>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <LL_ADC_IsDisableOngoing+0x1a>
 8001012:	2300      	movs	r3, #0
}
 8001014:	0018      	movs	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	b002      	add	sp, #8
 800101a:	bd80      	pop	{r7, pc}

0800101c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	4a04      	ldr	r2, [pc, #16]	@ (800103c <LL_ADC_REG_StartConversion+0x20>)
 800102a:	4013      	ands	r3, r2
 800102c:	2204      	movs	r2, #4
 800102e:	431a      	orrs	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001034:	46c0      	nop			@ (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b002      	add	sp, #8
 800103a:	bd80      	pop	{r7, pc}
 800103c:	7fffffe8 	.word	0x7fffffe8

08001040 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <LL_ADC_REG_StopConversion+0x20>)
 800104e:	4013      	ands	r3, r2
 8001050:	2210      	movs	r2, #16
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001058:	46c0      	nop			@ (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b002      	add	sp, #8
 800105e:	bd80      	pop	{r7, pc}
 8001060:	7fffffe8 	.word	0x7fffffe8

08001064 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	2204      	movs	r2, #4
 8001072:	4013      	ands	r3, r2
 8001074:	2b04      	cmp	r3, #4
 8001076:	d101      	bne.n	800107c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800107c:	2300      	movs	r3, #0
}
 800107e:	0018      	movs	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	b002      	add	sp, #8
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001090:	231f      	movs	r3, #31
 8001092:	18fb      	adds	r3, r7, r3
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e17f      	b.n	80013ae <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10a      	bne.n	80010cc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	0018      	movs	r0, r3
 80010ba:	f7ff fcad 	bl	8000a18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2254      	movs	r2, #84	@ 0x54
 80010c8:	2100      	movs	r1, #0
 80010ca:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff ff49 	bl	8000f68 <LL_ADC_IsInternalRegulatorEnabled>
 80010d6:	1e03      	subs	r3, r0, #0
 80010d8:	d115      	bne.n	8001106 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	0018      	movs	r0, r3
 80010e0:	f7ff ff2e 	bl	8000f40 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010e4:	4bb4      	ldr	r3, [pc, #720]	@ (80013b8 <HAL_ADC_Init+0x330>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	49b4      	ldr	r1, [pc, #720]	@ (80013bc <HAL_ADC_Init+0x334>)
 80010ea:	0018      	movs	r0, r3
 80010ec:	f7ff f814 	bl	8000118 <__udivsi3>
 80010f0:	0003      	movs	r3, r0
 80010f2:	3301      	adds	r3, #1
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010f8:	e002      	b.n	8001100 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f9      	bne.n	80010fa <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	0018      	movs	r0, r3
 800110c:	f7ff ff2c 	bl	8000f68 <LL_ADC_IsInternalRegulatorEnabled>
 8001110:	1e03      	subs	r3, r0, #0
 8001112:	d10f      	bne.n	8001134 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001118:	2210      	movs	r2, #16
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001124:	2201      	movs	r2, #1
 8001126:	431a      	orrs	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800112c:	231f      	movs	r3, #31
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	0018      	movs	r0, r3
 800113a:	f7ff ff93 	bl	8001064 <LL_ADC_REG_IsConversionOngoing>
 800113e:	0003      	movs	r3, r0
 8001140:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001146:	2210      	movs	r2, #16
 8001148:	4013      	ands	r3, r2
 800114a:	d000      	beq.n	800114e <HAL_ADC_Init+0xc6>
 800114c:	e122      	b.n	8001394 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d000      	beq.n	8001156 <HAL_ADC_Init+0xce>
 8001154:	e11e      	b.n	8001394 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115a:	4a99      	ldr	r2, [pc, #612]	@ (80013c0 <HAL_ADC_Init+0x338>)
 800115c:	4013      	ands	r3, r2
 800115e:	2202      	movs	r2, #2
 8001160:	431a      	orrs	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	0018      	movs	r0, r3
 800116c:	f7ff ff34 	bl	8000fd8 <LL_ADC_IsEnabled>
 8001170:	1e03      	subs	r3, r0, #0
 8001172:	d000      	beq.n	8001176 <HAL_ADC_Init+0xee>
 8001174:	e0ad      	b.n	80012d2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	7e1b      	ldrb	r3, [r3, #24]
 800117e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001180:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7e5b      	ldrb	r3, [r3, #25]
 8001186:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001188:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7e9b      	ldrb	r3, [r3, #26]
 800118e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001190:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <HAL_ADC_Init+0x118>
 800119a:	2380      	movs	r3, #128	@ 0x80
 800119c:	015b      	lsls	r3, r3, #5
 800119e:	e000      	b.n	80011a2 <HAL_ADC_Init+0x11a>
 80011a0:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011a2:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011a8:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	da04      	bge.n	80011bc <HAL_ADC_Init+0x134>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	085b      	lsrs	r3, r3, #1
 80011ba:	e001      	b.n	80011c0 <HAL_ADC_Init+0x138>
 80011bc:	2380      	movs	r3, #128	@ 0x80
 80011be:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80011c0:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	212c      	movs	r1, #44	@ 0x2c
 80011c6:	5c5b      	ldrb	r3, [r3, r1]
 80011c8:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011ca:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2220      	movs	r2, #32
 80011d6:	5c9b      	ldrb	r3, [r3, r2]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d115      	bne.n	8001208 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7e9b      	ldrb	r3, [r3, #26]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d105      	bne.n	80011f0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	2280      	movs	r2, #128	@ 0x80
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	e00b      	b.n	8001208 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f4:	2220      	movs	r2, #32
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001200:	2201      	movs	r2, #1
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00a      	beq.n	8001226 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001214:	23e0      	movs	r3, #224	@ 0xe0
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800121e:	4313      	orrs	r3, r2
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	4a65      	ldr	r2, [pc, #404]	@ (80013c4 <HAL_ADC_Init+0x33c>)
 800122e:	4013      	ands	r3, r2
 8001230:	0019      	movs	r1, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	430a      	orrs	r2, r1
 800123a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	0f9b      	lsrs	r3, r3, #30
 8001242:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001248:	4313      	orrs	r3, r2
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	4313      	orrs	r3, r2
 800124e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	223c      	movs	r2, #60	@ 0x3c
 8001254:	5c9b      	ldrb	r3, [r3, r2]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d111      	bne.n	800127e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	0f9b      	lsrs	r3, r3, #30
 8001260:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001266:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800126c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001272:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	4313      	orrs	r3, r2
 8001278:	2201      	movs	r2, #1
 800127a:	4313      	orrs	r3, r2
 800127c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	4a50      	ldr	r2, [pc, #320]	@ (80013c8 <HAL_ADC_Init+0x340>)
 8001286:	4013      	ands	r3, r2
 8001288:	0019      	movs	r1, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	430a      	orrs	r2, r1
 8001292:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	23c0      	movs	r3, #192	@ 0xc0
 800129a:	061b      	lsls	r3, r3, #24
 800129c:	429a      	cmp	r2, r3
 800129e:	d018      	beq.n	80012d2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012a4:	2380      	movs	r3, #128	@ 0x80
 80012a6:	05db      	lsls	r3, r3, #23
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d012      	beq.n	80012d2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012b0:	2380      	movs	r3, #128	@ 0x80
 80012b2:	061b      	lsls	r3, r3, #24
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d00c      	beq.n	80012d2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80012b8:	4b44      	ldr	r3, [pc, #272]	@ (80013cc <HAL_ADC_Init+0x344>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a44      	ldr	r2, [pc, #272]	@ (80013d0 <HAL_ADC_Init+0x348>)
 80012be:	4013      	ands	r3, r2
 80012c0:	0019      	movs	r1, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	23f0      	movs	r3, #240	@ 0xf0
 80012c8:	039b      	lsls	r3, r3, #14
 80012ca:	401a      	ands	r2, r3
 80012cc:	4b3f      	ldr	r3, [pc, #252]	@ (80013cc <HAL_ADC_Init+0x344>)
 80012ce:	430a      	orrs	r2, r1
 80012d0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012da:	001a      	movs	r2, r3
 80012dc:	2100      	movs	r1, #0
 80012de:	f7ff fd8a 	bl	8000df6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ea:	493a      	ldr	r1, [pc, #232]	@ (80013d4 <HAL_ADC_Init+0x34c>)
 80012ec:	001a      	movs	r2, r3
 80012ee:	f7ff fd82 	bl	8000df6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2110      	movs	r1, #16
 8001306:	4249      	negs	r1, r1
 8001308:	430a      	orrs	r2, r1
 800130a:	629a      	str	r2, [r3, #40]	@ 0x28
 800130c:	e018      	b.n	8001340 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691a      	ldr	r2, [r3, #16]
 8001312:	2380      	movs	r3, #128	@ 0x80
 8001314:	039b      	lsls	r3, r3, #14
 8001316:	429a      	cmp	r2, r3
 8001318:	d112      	bne.n	8001340 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	3b01      	subs	r3, #1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	221c      	movs	r2, #28
 800132a:	4013      	ands	r3, r2
 800132c:	2210      	movs	r2, #16
 800132e:	4252      	negs	r2, r2
 8001330:	409a      	lsls	r2, r3
 8001332:	0011      	movs	r1, r2
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2100      	movs	r1, #0
 8001346:	0018      	movs	r0, r3
 8001348:	f7ff fd72 	bl	8000e30 <LL_ADC_GetSamplingTimeCommonChannels>
 800134c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001352:	429a      	cmp	r2, r3
 8001354:	d10b      	bne.n	800136e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001360:	2203      	movs	r2, #3
 8001362:	4393      	bics	r3, r2
 8001364:	2201      	movs	r2, #1
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800136c:	e01c      	b.n	80013a8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001372:	2212      	movs	r2, #18
 8001374:	4393      	bics	r3, r2
 8001376:	2210      	movs	r2, #16
 8001378:	431a      	orrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001382:	2201      	movs	r2, #1
 8001384:	431a      	orrs	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800138a:	231f      	movs	r3, #31
 800138c:	18fb      	adds	r3, r7, r3
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001392:	e009      	b.n	80013a8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001398:	2210      	movs	r2, #16
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80013a0:	231f      	movs	r3, #31
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80013a8:	231f      	movs	r3, #31
 80013aa:	18fb      	adds	r3, r7, r3
 80013ac:	781b      	ldrb	r3, [r3, #0]
}
 80013ae:	0018      	movs	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b008      	add	sp, #32
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			@ (mov r8, r8)
 80013b8:	20000000 	.word	0x20000000
 80013bc:	00030d40 	.word	0x00030d40
 80013c0:	fffffefd 	.word	0xfffffefd
 80013c4:	ffde0201 	.word	0xffde0201
 80013c8:	1ffffc02 	.word	0x1ffffc02
 80013cc:	40012708 	.word	0x40012708
 80013d0:	ffc3ffff 	.word	0xffc3ffff
 80013d4:	07ffff04 	.word	0x07ffff04

080013d8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80013d8:	b5b0      	push	{r4, r5, r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff fe3d 	bl	8001064 <LL_ADC_REG_IsConversionOngoing>
 80013ea:	1e03      	subs	r3, r0, #0
 80013ec:	d135      	bne.n	800145a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2254      	movs	r2, #84	@ 0x54
 80013f2:	5c9b      	ldrb	r3, [r3, r2]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d101      	bne.n	80013fc <HAL_ADC_Start+0x24>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e035      	b.n	8001468 <HAL_ADC_Start+0x90>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2254      	movs	r2, #84	@ 0x54
 8001400:	2101      	movs	r1, #1
 8001402:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001404:	250f      	movs	r5, #15
 8001406:	197c      	adds	r4, r7, r5
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	0018      	movs	r0, r3
 800140c:	f000 fb28 	bl	8001a60 <ADC_Enable>
 8001410:	0003      	movs	r3, r0
 8001412:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001414:	197b      	adds	r3, r7, r5
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d119      	bne.n	8001450 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001420:	4a13      	ldr	r2, [pc, #76]	@ (8001470 <HAL_ADC_Start+0x98>)
 8001422:	4013      	ands	r3, r2
 8001424:	2280      	movs	r2, #128	@ 0x80
 8001426:	0052      	lsls	r2, r2, #1
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	221c      	movs	r2, #28
 800143a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2254      	movs	r2, #84	@ 0x54
 8001440:	2100      	movs	r1, #0
 8001442:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff fde7 	bl	800101c <LL_ADC_REG_StartConversion>
 800144e:	e008      	b.n	8001462 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2254      	movs	r2, #84	@ 0x54
 8001454:	2100      	movs	r1, #0
 8001456:	5499      	strb	r1, [r3, r2]
 8001458:	e003      	b.n	8001462 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800145a:	230f      	movs	r3, #15
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	2202      	movs	r2, #2
 8001460:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001462:	230f      	movs	r3, #15
 8001464:	18fb      	adds	r3, r7, r3
 8001466:	781b      	ldrb	r3, [r3, #0]
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b004      	add	sp, #16
 800146e:	bdb0      	pop	{r4, r5, r7, pc}
 8001470:	fffff0fe 	.word	0xfffff0fe

08001474 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001474:	b5b0      	push	{r4, r5, r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2254      	movs	r2, #84	@ 0x54
 8001480:	5c9b      	ldrb	r3, [r3, r2]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d101      	bne.n	800148a <HAL_ADC_Stop+0x16>
 8001486:	2302      	movs	r3, #2
 8001488:	e029      	b.n	80014de <HAL_ADC_Stop+0x6a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2254      	movs	r2, #84	@ 0x54
 800148e:	2101      	movs	r1, #1
 8001490:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001492:	250f      	movs	r5, #15
 8001494:	197c      	adds	r4, r7, r5
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	0018      	movs	r0, r3
 800149a:	f000 fa9f 	bl	80019dc <ADC_ConversionStop>
 800149e:	0003      	movs	r3, r0
 80014a0:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80014a2:	197b      	adds	r3, r7, r5
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d112      	bne.n	80014d0 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80014aa:	197c      	adds	r4, r7, r5
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	0018      	movs	r0, r3
 80014b0:	f000 fb5c 	bl	8001b6c <ADC_Disable>
 80014b4:	0003      	movs	r3, r0
 80014b6:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80014b8:	197b      	adds	r3, r7, r5
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d107      	bne.n	80014d0 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c4:	4a08      	ldr	r2, [pc, #32]	@ (80014e8 <HAL_ADC_Stop+0x74>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	2201      	movs	r2, #1
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2254      	movs	r2, #84	@ 0x54
 80014d4:	2100      	movs	r1, #0
 80014d6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80014d8:	230f      	movs	r3, #15
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	781b      	ldrb	r3, [r3, #0]
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b004      	add	sp, #16
 80014e4:	bdb0      	pop	{r4, r5, r7, pc}
 80014e6:	46c0      	nop			@ (mov r8, r8)
 80014e8:	fffffefe 	.word	0xfffffefe

080014ec <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d102      	bne.n	8001504 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80014fe:	2308      	movs	r3, #8
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	e00f      	b.n	8001524 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2201      	movs	r2, #1
 800150c:	4013      	ands	r3, r2
 800150e:	d007      	beq.n	8001520 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001514:	2220      	movs	r2, #32
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e072      	b.n	8001606 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001520:	2304      	movs	r3, #4
 8001522:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001524:	f7ff fc18 	bl	8000d58 <HAL_GetTick>
 8001528:	0003      	movs	r3, r0
 800152a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800152c:	e01f      	b.n	800156e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	d01c      	beq.n	800156e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001534:	f7ff fc10 	bl	8000d58 <HAL_GetTick>
 8001538:	0002      	movs	r2, r0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d302      	bcc.n	800154a <HAL_ADC_PollForConversion+0x5e>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d111      	bne.n	800156e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	4013      	ands	r3, r2
 8001554:	d10b      	bne.n	800156e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155a:	2204      	movs	r2, #4
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2254      	movs	r2, #84	@ 0x54
 8001566:	2100      	movs	r1, #0
 8001568:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e04b      	b.n	8001606 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	4013      	ands	r3, r2
 8001578:	d0d9      	beq.n	800152e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157e:	2280      	movs	r2, #128	@ 0x80
 8001580:	0092      	lsls	r2, r2, #2
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	0018      	movs	r0, r3
 800158e:	f7ff fc66 	bl	8000e5e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001592:	1e03      	subs	r3, r0, #0
 8001594:	d02e      	beq.n	80015f4 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7e9b      	ldrb	r3, [r3, #26]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d12a      	bne.n	80015f4 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2208      	movs	r2, #8
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d123      	bne.n	80015f4 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	0018      	movs	r0, r3
 80015b2:	f7ff fd57 	bl	8001064 <LL_ADC_REG_IsConversionOngoing>
 80015b6:	1e03      	subs	r3, r0, #0
 80015b8:	d110      	bne.n	80015dc <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	210c      	movs	r1, #12
 80015c6:	438a      	bics	r2, r1
 80015c8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ce:	4a10      	ldr	r2, [pc, #64]	@ (8001610 <HAL_ADC_PollForConversion+0x124>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	2201      	movs	r2, #1
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80015da:	e00b      	b.n	80015f4 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e0:	2220      	movs	r2, #32
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ec:	2201      	movs	r2, #1
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7e1b      	ldrb	r3, [r3, #24]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d103      	bne.n	8001604 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	220c      	movs	r2, #12
 8001602:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	0018      	movs	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	b004      	add	sp, #16
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	fffffefe 	.word	0xfffffefe

08001614 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001622:	0018      	movs	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	b002      	add	sp, #8
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001636:	2317      	movs	r3, #23
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2254      	movs	r2, #84	@ 0x54
 8001646:	5c9b      	ldrb	r3, [r3, r2]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x24>
 800164c:	2302      	movs	r3, #2
 800164e:	e1c0      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x3a6>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2254      	movs	r2, #84	@ 0x54
 8001654:	2101      	movs	r1, #1
 8001656:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	0018      	movs	r0, r3
 800165e:	f7ff fd01 	bl	8001064 <LL_ADC_REG_IsConversionOngoing>
 8001662:	1e03      	subs	r3, r0, #0
 8001664:	d000      	beq.n	8001668 <HAL_ADC_ConfigChannel+0x3c>
 8001666:	e1a3      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d100      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x46>
 8001670:	e143      	b.n	80018fa <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691a      	ldr	r2, [r3, #16]
 8001676:	2380      	movs	r3, #128	@ 0x80
 8001678:	061b      	lsls	r3, r3, #24
 800167a:	429a      	cmp	r2, r3
 800167c:	d004      	beq.n	8001688 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001682:	4ac1      	ldr	r2, [pc, #772]	@ (8001988 <HAL_ADC_ConfigChannel+0x35c>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d108      	bne.n	800169a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	0019      	movs	r1, r3
 8001692:	0010      	movs	r0, r2
 8001694:	f7ff fc14 	bl	8000ec0 <LL_ADC_REG_SetSequencerChAdd>
 8001698:	e0c9      	b.n	800182e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	211f      	movs	r1, #31
 80016a4:	400b      	ands	r3, r1
 80016a6:	210f      	movs	r1, #15
 80016a8:	4099      	lsls	r1, r3
 80016aa:	000b      	movs	r3, r1
 80016ac:	43db      	mvns	r3, r3
 80016ae:	4013      	ands	r3, r2
 80016b0:	0019      	movs	r1, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	035b      	lsls	r3, r3, #13
 80016b8:	0b5b      	lsrs	r3, r3, #13
 80016ba:	d105      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x9c>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0e9b      	lsrs	r3, r3, #26
 80016c2:	221f      	movs	r2, #31
 80016c4:	4013      	ands	r3, r2
 80016c6:	e098      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2201      	movs	r2, #1
 80016ce:	4013      	ands	r3, r2
 80016d0:	d000      	beq.n	80016d4 <HAL_ADC_ConfigChannel+0xa8>
 80016d2:	e091      	b.n	80017f8 <HAL_ADC_ConfigChannel+0x1cc>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2202      	movs	r2, #2
 80016da:	4013      	ands	r3, r2
 80016dc:	d000      	beq.n	80016e0 <HAL_ADC_ConfigChannel+0xb4>
 80016de:	e089      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x1c8>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2204      	movs	r2, #4
 80016e6:	4013      	ands	r3, r2
 80016e8:	d000      	beq.n	80016ec <HAL_ADC_ConfigChannel+0xc0>
 80016ea:	e081      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x1c4>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2208      	movs	r2, #8
 80016f2:	4013      	ands	r3, r2
 80016f4:	d000      	beq.n	80016f8 <HAL_ADC_ConfigChannel+0xcc>
 80016f6:	e079      	b.n	80017ec <HAL_ADC_ConfigChannel+0x1c0>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2210      	movs	r2, #16
 80016fe:	4013      	ands	r3, r2
 8001700:	d000      	beq.n	8001704 <HAL_ADC_ConfigChannel+0xd8>
 8001702:	e071      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x1bc>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2220      	movs	r2, #32
 800170a:	4013      	ands	r3, r2
 800170c:	d000      	beq.n	8001710 <HAL_ADC_ConfigChannel+0xe4>
 800170e:	e069      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x1b8>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2240      	movs	r2, #64	@ 0x40
 8001716:	4013      	ands	r3, r2
 8001718:	d000      	beq.n	800171c <HAL_ADC_ConfigChannel+0xf0>
 800171a:	e061      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x1b4>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2280      	movs	r2, #128	@ 0x80
 8001722:	4013      	ands	r3, r2
 8001724:	d000      	beq.n	8001728 <HAL_ADC_ConfigChannel+0xfc>
 8001726:	e059      	b.n	80017dc <HAL_ADC_ConfigChannel+0x1b0>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	@ 0x80
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4013      	ands	r3, r2
 8001732:	d151      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x1ac>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2380      	movs	r3, #128	@ 0x80
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4013      	ands	r3, r2
 800173e:	d149      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x1a8>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2380      	movs	r3, #128	@ 0x80
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4013      	ands	r3, r2
 800174a:	d141      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x1a4>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2380      	movs	r3, #128	@ 0x80
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	4013      	ands	r3, r2
 8001756:	d139      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x1a0>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2380      	movs	r3, #128	@ 0x80
 800175e:	015b      	lsls	r3, r3, #5
 8001760:	4013      	ands	r3, r2
 8001762:	d131      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x19c>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2380      	movs	r3, #128	@ 0x80
 800176a:	019b      	lsls	r3, r3, #6
 800176c:	4013      	ands	r3, r2
 800176e:	d129      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x198>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	@ 0x80
 8001776:	01db      	lsls	r3, r3, #7
 8001778:	4013      	ands	r3, r2
 800177a:	d121      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x194>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	2380      	movs	r3, #128	@ 0x80
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	4013      	ands	r3, r2
 8001786:	d119      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x190>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	2380      	movs	r3, #128	@ 0x80
 800178e:	025b      	lsls	r3, r3, #9
 8001790:	4013      	ands	r3, r2
 8001792:	d111      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x18c>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	@ 0x80
 800179a:	029b      	lsls	r3, r3, #10
 800179c:	4013      	ands	r3, r2
 800179e:	d109      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x188>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2380      	movs	r3, #128	@ 0x80
 80017a6:	02db      	lsls	r3, r3, #11
 80017a8:	4013      	ands	r3, r2
 80017aa:	d001      	beq.n	80017b0 <HAL_ADC_ConfigChannel+0x184>
 80017ac:	2312      	movs	r3, #18
 80017ae:	e024      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017b0:	2300      	movs	r3, #0
 80017b2:	e022      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017b4:	2311      	movs	r3, #17
 80017b6:	e020      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017b8:	2310      	movs	r3, #16
 80017ba:	e01e      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017bc:	230f      	movs	r3, #15
 80017be:	e01c      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017c0:	230e      	movs	r3, #14
 80017c2:	e01a      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017c4:	230d      	movs	r3, #13
 80017c6:	e018      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017c8:	230c      	movs	r3, #12
 80017ca:	e016      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017cc:	230b      	movs	r3, #11
 80017ce:	e014      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017d0:	230a      	movs	r3, #10
 80017d2:	e012      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017d4:	2309      	movs	r3, #9
 80017d6:	e010      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017d8:	2308      	movs	r3, #8
 80017da:	e00e      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017dc:	2307      	movs	r3, #7
 80017de:	e00c      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017e0:	2306      	movs	r3, #6
 80017e2:	e00a      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017e4:	2305      	movs	r3, #5
 80017e6:	e008      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017e8:	2304      	movs	r3, #4
 80017ea:	e006      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017ec:	2303      	movs	r3, #3
 80017ee:	e004      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017f0:	2302      	movs	r3, #2
 80017f2:	e002      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1ce>
 80017f8:	2300      	movs	r3, #0
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	6852      	ldr	r2, [r2, #4]
 80017fe:	201f      	movs	r0, #31
 8001800:	4002      	ands	r2, r0
 8001802:	4093      	lsls	r3, r2
 8001804:	000a      	movs	r2, r1
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	429a      	cmp	r2, r3
 800181a:	d808      	bhi.n	800182e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	001a      	movs	r2, r3
 800182a:	f7ff fb29 	bl	8000e80 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	6819      	ldr	r1, [r3, #0]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	001a      	movs	r2, r3
 800183c:	f7ff fb64 	bl	8000f08 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db00      	blt.n	800184a <HAL_ADC_ConfigChannel+0x21e>
 8001848:	e0bc      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800184a:	4b50      	ldr	r3, [pc, #320]	@ (800198c <HAL_ADC_ConfigChannel+0x360>)
 800184c:	0018      	movs	r0, r3
 800184e:	f7ff fac5 	bl	8000ddc <LL_ADC_GetCommonPathInternalCh>
 8001852:	0003      	movs	r3, r0
 8001854:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a4d      	ldr	r2, [pc, #308]	@ (8001990 <HAL_ADC_ConfigChannel+0x364>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d122      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	2380      	movs	r3, #128	@ 0x80
 8001864:	041b      	lsls	r3, r3, #16
 8001866:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001868:	d11d      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	2280      	movs	r2, #128	@ 0x80
 800186e:	0412      	lsls	r2, r2, #16
 8001870:	4313      	orrs	r3, r2
 8001872:	4a46      	ldr	r2, [pc, #280]	@ (800198c <HAL_ADC_ConfigChannel+0x360>)
 8001874:	0019      	movs	r1, r3
 8001876:	0010      	movs	r0, r2
 8001878:	f7ff fa9c 	bl	8000db4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800187c:	4b45      	ldr	r3, [pc, #276]	@ (8001994 <HAL_ADC_ConfigChannel+0x368>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4945      	ldr	r1, [pc, #276]	@ (8001998 <HAL_ADC_ConfigChannel+0x36c>)
 8001882:	0018      	movs	r0, r3
 8001884:	f7fe fc48 	bl	8000118 <__udivsi3>
 8001888:	0003      	movs	r3, r0
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	0013      	movs	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	189b      	adds	r3, r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001896:	e002      	b.n	800189e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3b01      	subs	r3, #1
 800189c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f9      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80018a4:	e08e      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a3c      	ldr	r2, [pc, #240]	@ (800199c <HAL_ADC_ConfigChannel+0x370>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d10e      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	2380      	movs	r3, #128	@ 0x80
 80018b4:	045b      	lsls	r3, r3, #17
 80018b6:	4013      	ands	r3, r2
 80018b8:	d109      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	2280      	movs	r2, #128	@ 0x80
 80018be:	0452      	lsls	r2, r2, #17
 80018c0:	4313      	orrs	r3, r2
 80018c2:	4a32      	ldr	r2, [pc, #200]	@ (800198c <HAL_ADC_ConfigChannel+0x360>)
 80018c4:	0019      	movs	r1, r3
 80018c6:	0010      	movs	r0, r2
 80018c8:	f7ff fa74 	bl	8000db4 <LL_ADC_SetCommonPathInternalCh>
 80018cc:	e07a      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a33      	ldr	r2, [pc, #204]	@ (80019a0 <HAL_ADC_ConfigChannel+0x374>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d000      	beq.n	80018da <HAL_ADC_ConfigChannel+0x2ae>
 80018d8:	e074      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	2380      	movs	r3, #128	@ 0x80
 80018de:	03db      	lsls	r3, r3, #15
 80018e0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80018e2:	d000      	beq.n	80018e6 <HAL_ADC_ConfigChannel+0x2ba>
 80018e4:	e06e      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	2280      	movs	r2, #128	@ 0x80
 80018ea:	03d2      	lsls	r2, r2, #15
 80018ec:	4313      	orrs	r3, r2
 80018ee:	4a27      	ldr	r2, [pc, #156]	@ (800198c <HAL_ADC_ConfigChannel+0x360>)
 80018f0:	0019      	movs	r1, r3
 80018f2:	0010      	movs	r0, r2
 80018f4:	f7ff fa5e 	bl	8000db4 <LL_ADC_SetCommonPathInternalCh>
 80018f8:	e064      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691a      	ldr	r2, [r3, #16]
 80018fe:	2380      	movs	r3, #128	@ 0x80
 8001900:	061b      	lsls	r3, r3, #24
 8001902:	429a      	cmp	r2, r3
 8001904:	d004      	beq.n	8001910 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800190a:	4a1f      	ldr	r2, [pc, #124]	@ (8001988 <HAL_ADC_ConfigChannel+0x35c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d107      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	0019      	movs	r1, r3
 800191a:	0010      	movs	r0, r2
 800191c:	f7ff fae1 	bl	8000ee2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	da4d      	bge.n	80019c4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001928:	4b18      	ldr	r3, [pc, #96]	@ (800198c <HAL_ADC_ConfigChannel+0x360>)
 800192a:	0018      	movs	r0, r3
 800192c:	f7ff fa56 	bl	8000ddc <LL_ADC_GetCommonPathInternalCh>
 8001930:	0003      	movs	r3, r0
 8001932:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a15      	ldr	r2, [pc, #84]	@ (8001990 <HAL_ADC_ConfigChannel+0x364>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d108      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4a18      	ldr	r2, [pc, #96]	@ (80019a4 <HAL_ADC_ConfigChannel+0x378>)
 8001942:	4013      	ands	r3, r2
 8001944:	4a11      	ldr	r2, [pc, #68]	@ (800198c <HAL_ADC_ConfigChannel+0x360>)
 8001946:	0019      	movs	r1, r3
 8001948:	0010      	movs	r0, r2
 800194a:	f7ff fa33 	bl	8000db4 <LL_ADC_SetCommonPathInternalCh>
 800194e:	e039      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a11      	ldr	r2, [pc, #68]	@ (800199c <HAL_ADC_ConfigChannel+0x370>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d108      	bne.n	800196c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <HAL_ADC_ConfigChannel+0x37c>)
 800195e:	4013      	ands	r3, r2
 8001960:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <HAL_ADC_ConfigChannel+0x360>)
 8001962:	0019      	movs	r1, r3
 8001964:	0010      	movs	r0, r2
 8001966:	f7ff fa25 	bl	8000db4 <LL_ADC_SetCommonPathInternalCh>
 800196a:	e02b      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0b      	ldr	r2, [pc, #44]	@ (80019a0 <HAL_ADC_ConfigChannel+0x374>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d126      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4a0c      	ldr	r2, [pc, #48]	@ (80019ac <HAL_ADC_ConfigChannel+0x380>)
 800197a:	4013      	ands	r3, r2
 800197c:	4a03      	ldr	r2, [pc, #12]	@ (800198c <HAL_ADC_ConfigChannel+0x360>)
 800197e:	0019      	movs	r1, r3
 8001980:	0010      	movs	r0, r2
 8001982:	f7ff fa17 	bl	8000db4 <LL_ADC_SetCommonPathInternalCh>
 8001986:	e01d      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x398>
 8001988:	80000004 	.word	0x80000004
 800198c:	40012708 	.word	0x40012708
 8001990:	b0001000 	.word	0xb0001000
 8001994:	20000000 	.word	0x20000000
 8001998:	00030d40 	.word	0x00030d40
 800199c:	b8004000 	.word	0xb8004000
 80019a0:	b4002000 	.word	0xb4002000
 80019a4:	ff7fffff 	.word	0xff7fffff
 80019a8:	feffffff 	.word	0xfeffffff
 80019ac:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b4:	2220      	movs	r2, #32
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019bc:	2317      	movs	r3, #23
 80019be:	18fb      	adds	r3, r7, r3
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2254      	movs	r2, #84	@ 0x54
 80019c8:	2100      	movs	r1, #0
 80019ca:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80019cc:	2317      	movs	r3, #23
 80019ce:	18fb      	adds	r3, r7, r3
 80019d0:	781b      	ldrb	r3, [r3, #0]
}
 80019d2:	0018      	movs	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b006      	add	sp, #24
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			@ (mov r8, r8)

080019dc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7ff fb3b 	bl	8001064 <LL_ADC_REG_IsConversionOngoing>
 80019ee:	1e03      	subs	r3, r0, #0
 80019f0:	d031      	beq.n	8001a56 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	0018      	movs	r0, r3
 80019f8:	f7ff faff 	bl	8000ffa <LL_ADC_IsDisableOngoing>
 80019fc:	1e03      	subs	r3, r0, #0
 80019fe:	d104      	bne.n	8001a0a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7ff fb1b 	bl	8001040 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a0a:	f7ff f9a5 	bl	8000d58 <HAL_GetTick>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001a12:	e01a      	b.n	8001a4a <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001a14:	f7ff f9a0 	bl	8000d58 <HAL_GetTick>
 8001a18:	0002      	movs	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d913      	bls.n	8001a4a <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2204      	movs	r2, #4
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d00d      	beq.n	8001a4a <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a32:	2210      	movs	r2, #16
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3e:	2201      	movs	r2, #1
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e006      	b.n	8001a58 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2204      	movs	r2, #4
 8001a52:	4013      	ands	r3, r2
 8001a54:	d1de      	bne.n	8001a14 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	0018      	movs	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b004      	add	sp, #16
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	0018      	movs	r0, r3
 8001a72:	f7ff fab1 	bl	8000fd8 <LL_ADC_IsEnabled>
 8001a76:	1e03      	subs	r3, r0, #0
 8001a78:	d000      	beq.n	8001a7c <ADC_Enable+0x1c>
 8001a7a:	e069      	b.n	8001b50 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	4a36      	ldr	r2, [pc, #216]	@ (8001b5c <ADC_Enable+0xfc>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	d00d      	beq.n	8001aa4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a98:	2201      	movs	r2, #1
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e056      	b.n	8001b52 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f7ff fa71 	bl	8000f90 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001aae:	4b2c      	ldr	r3, [pc, #176]	@ (8001b60 <ADC_Enable+0x100>)
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f7ff f993 	bl	8000ddc <LL_ADC_GetCommonPathInternalCh>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	2380      	movs	r3, #128	@ 0x80
 8001aba:	041b      	lsls	r3, r3, #16
 8001abc:	4013      	ands	r3, r2
 8001abe:	d00f      	beq.n	8001ae0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ac0:	4b28      	ldr	r3, [pc, #160]	@ (8001b64 <ADC_Enable+0x104>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4928      	ldr	r1, [pc, #160]	@ (8001b68 <ADC_Enable+0x108>)
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f7fe fb26 	bl	8000118 <__udivsi3>
 8001acc:	0003      	movs	r3, r0
 8001ace:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001ad0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ad2:	e002      	b.n	8001ada <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f9      	bne.n	8001ad4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7e5b      	ldrb	r3, [r3, #25]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d033      	beq.n	8001b50 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001ae8:	f7ff f936 	bl	8000d58 <HAL_GetTick>
 8001aec:	0003      	movs	r3, r0
 8001aee:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001af0:	e027      	b.n	8001b42 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	0018      	movs	r0, r3
 8001af8:	f7ff fa6e 	bl	8000fd8 <LL_ADC_IsEnabled>
 8001afc:	1e03      	subs	r3, r0, #0
 8001afe:	d104      	bne.n	8001b0a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	0018      	movs	r0, r3
 8001b06:	f7ff fa43 	bl	8000f90 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b0a:	f7ff f925 	bl	8000d58 <HAL_GetTick>
 8001b0e:	0002      	movs	r2, r0
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d914      	bls.n	8001b42 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d00d      	beq.n	8001b42 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2a:	2210      	movs	r2, #16
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b36:	2201      	movs	r2, #1
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e007      	b.n	8001b52 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d1d0      	bne.n	8001af2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b004      	add	sp, #16
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	80000017 	.word	0x80000017
 8001b60:	40012708 	.word	0x40012708
 8001b64:	20000000 	.word	0x20000000
 8001b68:	00030d40 	.word	0x00030d40

08001b6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7ff fa3e 	bl	8000ffa <LL_ADC_IsDisableOngoing>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	0018      	movs	r0, r3
 8001b88:	f7ff fa26 	bl	8000fd8 <LL_ADC_IsEnabled>
 8001b8c:	1e03      	subs	r3, r0, #0
 8001b8e:	d046      	beq.n	8001c1e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d143      	bne.n	8001c1e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2205      	movs	r2, #5
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d10d      	bne.n	8001bc0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7ff fa03 	bl	8000fb4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bb6:	f7ff f8cf 	bl	8000d58 <HAL_GetTick>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001bbe:	e028      	b.n	8001c12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc4:	2210      	movs	r2, #16
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e021      	b.n	8001c20 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bdc:	f7ff f8bc 	bl	8000d58 <HAL_GetTick>
 8001be0:	0002      	movs	r2, r0
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d913      	bls.n	8001c12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d00d      	beq.n	8001c12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfa:	2210      	movs	r2, #16
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c06:	2201      	movs	r2, #1
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e006      	b.n	8001c20 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d1de      	bne.n	8001bdc <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b004      	add	sp, #16
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <LL_ADC_GetCommonClock>:
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	23f0      	movs	r3, #240	@ 0xf0
 8001c36:	039b      	lsls	r3, r3, #14
 8001c38:	4013      	ands	r3, r2
}
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b002      	add	sp, #8
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <LL_ADC_GetClock>:
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	0f9b      	lsrs	r3, r3, #30
 8001c50:	079b      	lsls	r3, r3, #30
}
 8001c52:	0018      	movs	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b002      	add	sp, #8
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <LL_ADC_SetCalibrationFactor>:
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	22b4      	movs	r2, #180	@ 0xb4
 8001c68:	589b      	ldr	r3, [r3, r2]
 8001c6a:	227f      	movs	r2, #127	@ 0x7f
 8001c6c:	4393      	bics	r3, r2
 8001c6e:	001a      	movs	r2, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	21b4      	movs	r1, #180	@ 0xb4
 8001c78:	505a      	str	r2, [r3, r1]
}
 8001c7a:	46c0      	nop			@ (mov r8, r8)
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b002      	add	sp, #8
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <LL_ADC_GetCalibrationFactor>:
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	22b4      	movs	r2, #180	@ 0xb4
 8001c8e:	589b      	ldr	r3, [r3, r2]
 8001c90:	227f      	movs	r2, #127	@ 0x7f
 8001c92:	4013      	ands	r3, r2
}
 8001c94:	0018      	movs	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b002      	add	sp, #8
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <LL_ADC_Enable>:
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	4a04      	ldr	r2, [pc, #16]	@ (8001cbc <LL_ADC_Enable+0x20>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	2201      	movs	r2, #1
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
}
 8001cb4:	46c0      	nop			@ (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b002      	add	sp, #8
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	7fffffe8 	.word	0x7fffffe8

08001cc0 <LL_ADC_Disable>:
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4a04      	ldr	r2, [pc, #16]	@ (8001ce0 <LL_ADC_Disable+0x20>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
}
 8001cd8:	46c0      	nop			@ (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b002      	add	sp, #8
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	7fffffe8 	.word	0x7fffffe8

08001ce4 <LL_ADC_IsEnabled>:
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <LL_ADC_IsEnabled+0x18>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <LL_ADC_IsEnabled+0x1a>
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b002      	add	sp, #8
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <LL_ADC_StartCalibration>:
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4a05      	ldr	r2, [pc, #20]	@ (8001d2c <LL_ADC_StartCalibration+0x24>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	2280      	movs	r2, #128	@ 0x80
 8001d1a:	0612      	lsls	r2, r2, #24
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	609a      	str	r2, [r3, #8]
}
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b002      	add	sp, #8
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	7fffffe8 	.word	0x7fffffe8

08001d30 <LL_ADC_IsCalibrationOnGoing>:
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	0fdb      	lsrs	r3, r3, #31
 8001d3e:	07da      	lsls	r2, r3, #31
 8001d40:	2380      	movs	r3, #128	@ 0x80
 8001d42:	061b      	lsls	r3, r3, #24
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d101      	bne.n	8001d4c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	0018      	movs	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b002      	add	sp, #8
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b08b      	sub	sp, #44	@ 0x2c
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2254      	movs	r2, #84	@ 0x54
 8001d6c:	5c9b      	ldrb	r3, [r3, r2]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_ADCEx_Calibration_Start+0x1e>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e0dd      	b.n	8001f32 <HAL_ADCEx_Calibration_Start+0x1da>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2254      	movs	r2, #84	@ 0x54
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001d7e:	231f      	movs	r3, #31
 8001d80:	18fc      	adds	r4, r7, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	0018      	movs	r0, r3
 8001d86:	f7ff fef1 	bl	8001b6c <ADC_Disable>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	0018      	movs	r0, r3
 8001d94:	f7ff ffa6 	bl	8001ce4 <LL_ADC_IsEnabled>
 8001d98:	1e03      	subs	r3, r0, #0
 8001d9a:	d000      	beq.n	8001d9e <HAL_ADCEx_Calibration_Start+0x46>
 8001d9c:	e0bc      	b.n	8001f18 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da2:	4a66      	ldr	r2, [pc, #408]	@ (8001f3c <HAL_ADCEx_Calibration_Start+0x1e4>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	2202      	movs	r2, #2
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4a62      	ldr	r2, [pc, #392]	@ (8001f40 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	495f      	ldr	r1, [pc, #380]	@ (8001f44 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dce:	e02d      	b.n	8001e2c <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f7ff ff97 	bl	8001d08 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001dda:	e014      	b.n	8001e06 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3301      	adds	r3, #1
 8001de0:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4a58      	ldr	r2, [pc, #352]	@ (8001f48 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d90d      	bls.n	8001e06 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dee:	2212      	movs	r2, #18
 8001df0:	4393      	bics	r3, r2
 8001df2:	2210      	movs	r2, #16
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2254      	movs	r2, #84	@ 0x54
 8001dfe:	2100      	movs	r1, #0
 8001e00:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e095      	b.n	8001f32 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f7ff ff90 	bl	8001d30 <LL_ADC_IsCalibrationOnGoing>
 8001e10:	1e03      	subs	r3, r0, #0
 8001e12:	d1e3      	bne.n	8001ddc <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f7ff ff32 	bl	8001c82 <LL_ADC_GetCalibrationFactor>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	189b      	adds	r3, r3, r2
 8001e24:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	3301      	adds	r3, #1
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2e:	2b07      	cmp	r3, #7
 8001e30:	d9ce      	bls.n	8001dd0 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8001e32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e34:	6a38      	ldr	r0, [r7, #32]
 8001e36:	f7fe f96f 	bl	8000118 <__udivsi3>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	0018      	movs	r0, r3
 8001e44:	f7ff ff2a 	bl	8001c9c <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f7ff fef8 	bl	8001c42 <LL_ADC_GetClock>
 8001e52:	1e03      	subs	r3, r0, #0
 8001e54:	d11b      	bne.n	8001e8e <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e56:	4b3d      	ldr	r3, [pc, #244]	@ (8001f4c <HAL_ADCEx_Calibration_Start+0x1f4>)
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f7ff fee5 	bl	8001c28 <LL_ADC_GetCommonClock>
 8001e5e:	0003      	movs	r3, r0
 8001e60:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	23e0      	movs	r3, #224	@ 0xe0
 8001e66:	035b      	lsls	r3, r3, #13
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d310      	bcc.n	8001e8e <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	0c9b      	lsrs	r3, r3, #18
 8001e70:	3b03      	subs	r3, #3
 8001e72:	2201      	movs	r2, #1
 8001e74:	409a      	lsls	r2, r3
 8001e76:	0013      	movs	r3, r2
 8001e78:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	085b      	lsrs	r3, r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8001e80:	e002      	b.n	8001e88 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f9      	bne.n	8001e82 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6a3a      	ldr	r2, [r7, #32]
 8001e94:	0011      	movs	r1, r2
 8001e96:	0018      	movs	r0, r3
 8001e98:	f7ff fedf 	bl	8001c5a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f7ff ff0d 	bl	8001cc0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ea6:	f7fe ff57 	bl	8000d58 <HAL_GetTick>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001eae:	e01b      	b.n	8001ee8 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001eb0:	f7fe ff52 	bl	8000d58 <HAL_GetTick>
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d914      	bls.n	8001ee8 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f7ff ff0e 	bl	8001ce4 <LL_ADC_IsEnabled>
 8001ec8:	1e03      	subs	r3, r0, #0
 8001eca:	d00d      	beq.n	8001ee8 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001edc:	2201      	movs	r2, #1
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e024      	b.n	8001f32 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f7ff fef9 	bl	8001ce4 <LL_ADC_IsEnabled>
 8001ef2:	1e03      	subs	r3, r0, #0
 8001ef4:	d1dc      	bne.n	8001eb0 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68d9      	ldr	r1, [r3, #12]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	4393      	bics	r3, r2
 8001f0e:	2201      	movs	r2, #1
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f16:	e005      	b.n	8001f24 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2254      	movs	r2, #84	@ 0x54
 8001f28:	2100      	movs	r1, #0
 8001f2a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001f2c:	231f      	movs	r3, #31
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	781b      	ldrb	r3, [r3, #0]
}
 8001f32:	0018      	movs	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b00b      	add	sp, #44	@ 0x2c
 8001f38:	bd90      	pop	{r4, r7, pc}
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	fffffefd 	.word	0xfffffefd
 8001f40:	00008003 	.word	0x00008003
 8001f44:	ffff7ffc 	.word	0xffff7ffc
 8001f48:	0002f1ff 	.word	0x0002f1ff
 8001f4c:	40012708 	.word	0x40012708

08001f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	0002      	movs	r2, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	1dfb      	adds	r3, r7, #7
 8001f5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f5e:	1dfb      	adds	r3, r7, #7
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f64:	d828      	bhi.n	8001fb8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f66:	4a2f      	ldr	r2, [pc, #188]	@ (8002024 <__NVIC_SetPriority+0xd4>)
 8001f68:	1dfb      	adds	r3, r7, #7
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	b25b      	sxtb	r3, r3
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	33c0      	adds	r3, #192	@ 0xc0
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	589b      	ldr	r3, [r3, r2]
 8001f76:	1dfa      	adds	r2, r7, #7
 8001f78:	7812      	ldrb	r2, [r2, #0]
 8001f7a:	0011      	movs	r1, r2
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	400a      	ands	r2, r1
 8001f80:	00d2      	lsls	r2, r2, #3
 8001f82:	21ff      	movs	r1, #255	@ 0xff
 8001f84:	4091      	lsls	r1, r2
 8001f86:	000a      	movs	r2, r1
 8001f88:	43d2      	mvns	r2, r2
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	019b      	lsls	r3, r3, #6
 8001f92:	22ff      	movs	r2, #255	@ 0xff
 8001f94:	401a      	ands	r2, r3
 8001f96:	1dfb      	adds	r3, r7, #7
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	4003      	ands	r3, r0
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa4:	481f      	ldr	r0, [pc, #124]	@ (8002024 <__NVIC_SetPriority+0xd4>)
 8001fa6:	1dfb      	adds	r3, r7, #7
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	b25b      	sxtb	r3, r3
 8001fac:	089b      	lsrs	r3, r3, #2
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	33c0      	adds	r3, #192	@ 0xc0
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fb6:	e031      	b.n	800201c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8002028 <__NVIC_SetPriority+0xd8>)
 8001fba:	1dfb      	adds	r3, r7, #7
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	230f      	movs	r3, #15
 8001fc2:	400b      	ands	r3, r1
 8001fc4:	3b08      	subs	r3, #8
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3306      	adds	r3, #6
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	18d3      	adds	r3, r2, r3
 8001fce:	3304      	adds	r3, #4
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	1dfa      	adds	r2, r7, #7
 8001fd4:	7812      	ldrb	r2, [r2, #0]
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	2203      	movs	r2, #3
 8001fda:	400a      	ands	r2, r1
 8001fdc:	00d2      	lsls	r2, r2, #3
 8001fde:	21ff      	movs	r1, #255	@ 0xff
 8001fe0:	4091      	lsls	r1, r2
 8001fe2:	000a      	movs	r2, r1
 8001fe4:	43d2      	mvns	r2, r2
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	019b      	lsls	r3, r3, #6
 8001fee:	22ff      	movs	r2, #255	@ 0xff
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	1dfb      	adds	r3, r7, #7
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	4003      	ands	r3, r0
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002000:	4809      	ldr	r0, [pc, #36]	@ (8002028 <__NVIC_SetPriority+0xd8>)
 8002002:	1dfb      	adds	r3, r7, #7
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	001c      	movs	r4, r3
 8002008:	230f      	movs	r3, #15
 800200a:	4023      	ands	r3, r4
 800200c:	3b08      	subs	r3, #8
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	430a      	orrs	r2, r1
 8002012:	3306      	adds	r3, #6
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	18c3      	adds	r3, r0, r3
 8002018:	3304      	adds	r3, #4
 800201a:	601a      	str	r2, [r3, #0]
}
 800201c:	46c0      	nop			@ (mov r8, r8)
 800201e:	46bd      	mov	sp, r7
 8002020:	b003      	add	sp, #12
 8002022:	bd90      	pop	{r4, r7, pc}
 8002024:	e000e100 	.word	0xe000e100
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	1e5a      	subs	r2, r3, #1
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	045b      	lsls	r3, r3, #17
 800203c:	429a      	cmp	r2, r3
 800203e:	d301      	bcc.n	8002044 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002040:	2301      	movs	r3, #1
 8002042:	e010      	b.n	8002066 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002044:	4b0a      	ldr	r3, [pc, #40]	@ (8002070 <SysTick_Config+0x44>)
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	3a01      	subs	r2, #1
 800204a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800204c:	2301      	movs	r3, #1
 800204e:	425b      	negs	r3, r3
 8002050:	2103      	movs	r1, #3
 8002052:	0018      	movs	r0, r3
 8002054:	f7ff ff7c 	bl	8001f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002058:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <SysTick_Config+0x44>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205e:	4b04      	ldr	r3, [pc, #16]	@ (8002070 <SysTick_Config+0x44>)
 8002060:	2207      	movs	r2, #7
 8002062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002064:	2300      	movs	r3, #0
}
 8002066:	0018      	movs	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	b002      	add	sp, #8
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			@ (mov r8, r8)
 8002070:	e000e010 	.word	0xe000e010

08002074 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	210f      	movs	r1, #15
 8002080:	187b      	adds	r3, r7, r1
 8002082:	1c02      	adds	r2, r0, #0
 8002084:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	187b      	adds	r3, r7, r1
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	b25b      	sxtb	r3, r3
 800208e:	0011      	movs	r1, r2
 8002090:	0018      	movs	r0, r3
 8002092:	f7ff ff5d 	bl	8001f50 <__NVIC_SetPriority>
}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b004      	add	sp, #16
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	0018      	movs	r0, r3
 80020aa:	f7ff ffbf 	bl	800202c <SysTick_Config>
 80020ae:	0003      	movs	r3, r0
}
 80020b0:	0018      	movs	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b002      	add	sp, #8
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c6:	e147      	b.n	8002358 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2101      	movs	r1, #1
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4091      	lsls	r1, r2
 80020d2:	000a      	movs	r2, r1
 80020d4:	4013      	ands	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d100      	bne.n	80020e0 <HAL_GPIO_Init+0x28>
 80020de:	e138      	b.n	8002352 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2203      	movs	r2, #3
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d005      	beq.n	80020f8 <HAL_GPIO_Init+0x40>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2203      	movs	r2, #3
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d130      	bne.n	800215a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	409a      	lsls	r2, r3
 8002106:	0013      	movs	r3, r2
 8002108:	43da      	mvns	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	409a      	lsls	r2, r3
 800211a:	0013      	movs	r3, r2
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800212e:	2201      	movs	r2, #1
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	409a      	lsls	r2, r3
 8002134:	0013      	movs	r3, r2
 8002136:	43da      	mvns	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	2201      	movs	r2, #1
 8002146:	401a      	ands	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	409a      	lsls	r2, r3
 800214c:	0013      	movs	r3, r2
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2203      	movs	r2, #3
 8002160:	4013      	ands	r3, r2
 8002162:	2b03      	cmp	r3, #3
 8002164:	d017      	beq.n	8002196 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	2203      	movs	r2, #3
 8002172:	409a      	lsls	r2, r3
 8002174:	0013      	movs	r3, r2
 8002176:	43da      	mvns	r2, r3
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	409a      	lsls	r2, r3
 8002188:	0013      	movs	r3, r2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2203      	movs	r2, #3
 800219c:	4013      	ands	r3, r2
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d123      	bne.n	80021ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	08da      	lsrs	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3208      	adds	r2, #8
 80021aa:	0092      	lsls	r2, r2, #2
 80021ac:	58d3      	ldr	r3, [r2, r3]
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2207      	movs	r2, #7
 80021b4:	4013      	ands	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	220f      	movs	r2, #15
 80021ba:	409a      	lsls	r2, r3
 80021bc:	0013      	movs	r3, r2
 80021be:	43da      	mvns	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2107      	movs	r1, #7
 80021ce:	400b      	ands	r3, r1
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	409a      	lsls	r2, r3
 80021d4:	0013      	movs	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	08da      	lsrs	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3208      	adds	r2, #8
 80021e4:	0092      	lsls	r2, r2, #2
 80021e6:	6939      	ldr	r1, [r7, #16]
 80021e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	2203      	movs	r2, #3
 80021f6:	409a      	lsls	r2, r3
 80021f8:	0013      	movs	r3, r2
 80021fa:	43da      	mvns	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2203      	movs	r2, #3
 8002208:	401a      	ands	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	409a      	lsls	r2, r3
 8002210:	0013      	movs	r3, r2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	23c0      	movs	r3, #192	@ 0xc0
 8002224:	029b      	lsls	r3, r3, #10
 8002226:	4013      	ands	r3, r2
 8002228:	d100      	bne.n	800222c <HAL_GPIO_Init+0x174>
 800222a:	e092      	b.n	8002352 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800222c:	4a50      	ldr	r2, [pc, #320]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	3318      	adds	r3, #24
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	589b      	ldr	r3, [r3, r2]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2203      	movs	r2, #3
 800223e:	4013      	ands	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	220f      	movs	r2, #15
 8002244:	409a      	lsls	r2, r3
 8002246:	0013      	movs	r3, r2
 8002248:	43da      	mvns	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	23a0      	movs	r3, #160	@ 0xa0
 8002254:	05db      	lsls	r3, r3, #23
 8002256:	429a      	cmp	r2, r3
 8002258:	d013      	beq.n	8002282 <HAL_GPIO_Init+0x1ca>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a45      	ldr	r2, [pc, #276]	@ (8002374 <HAL_GPIO_Init+0x2bc>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00d      	beq.n	800227e <HAL_GPIO_Init+0x1c6>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a44      	ldr	r2, [pc, #272]	@ (8002378 <HAL_GPIO_Init+0x2c0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d007      	beq.n	800227a <HAL_GPIO_Init+0x1c2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a43      	ldr	r2, [pc, #268]	@ (800237c <HAL_GPIO_Init+0x2c4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <HAL_GPIO_Init+0x1be>
 8002272:	2303      	movs	r3, #3
 8002274:	e006      	b.n	8002284 <HAL_GPIO_Init+0x1cc>
 8002276:	2305      	movs	r3, #5
 8002278:	e004      	b.n	8002284 <HAL_GPIO_Init+0x1cc>
 800227a:	2302      	movs	r3, #2
 800227c:	e002      	b.n	8002284 <HAL_GPIO_Init+0x1cc>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_GPIO_Init+0x1cc>
 8002282:	2300      	movs	r3, #0
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	2103      	movs	r1, #3
 8002288:	400a      	ands	r2, r1
 800228a:	00d2      	lsls	r2, r2, #3
 800228c:	4093      	lsls	r3, r2
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002294:	4936      	ldr	r1, [pc, #216]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	089b      	lsrs	r3, r3, #2
 800229a:	3318      	adds	r3, #24
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022a2:	4b33      	ldr	r3, [pc, #204]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	43da      	mvns	r2, r3
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	2380      	movs	r3, #128	@ 0x80
 80022b8:	035b      	lsls	r3, r3, #13
 80022ba:	4013      	ands	r3, r2
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80022cc:	4b28      	ldr	r3, [pc, #160]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	43da      	mvns	r2, r3
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	2380      	movs	r3, #128	@ 0x80
 80022e2:	039b      	lsls	r3, r3, #14
 80022e4:	4013      	ands	r3, r2
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 80022f8:	2384      	movs	r3, #132	@ 0x84
 80022fa:	58d3      	ldr	r3, [r2, r3]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	43da      	mvns	r2, r3
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	2380      	movs	r3, #128	@ 0x80
 800230e:	029b      	lsls	r3, r3, #10
 8002310:	4013      	ands	r3, r2
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800231c:	4914      	ldr	r1, [pc, #80]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 800231e:	2284      	movs	r2, #132	@ 0x84
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002324:	4a12      	ldr	r2, [pc, #72]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 8002326:	2380      	movs	r3, #128	@ 0x80
 8002328:	58d3      	ldr	r3, [r2, r3]
 800232a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	43da      	mvns	r2, r3
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	2380      	movs	r3, #128	@ 0x80
 800233c:	025b      	lsls	r3, r3, #9
 800233e:	4013      	ands	r3, r2
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800234a:	4909      	ldr	r1, [pc, #36]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 800234c:	2280      	movs	r2, #128	@ 0x80
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	3301      	adds	r3, #1
 8002356:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	40da      	lsrs	r2, r3
 8002360:	1e13      	subs	r3, r2, #0
 8002362:	d000      	beq.n	8002366 <HAL_GPIO_Init+0x2ae>
 8002364:	e6b0      	b.n	80020c8 <HAL_GPIO_Init+0x10>
  }
}
 8002366:	46c0      	nop			@ (mov r8, r8)
 8002368:	46c0      	nop			@ (mov r8, r8)
 800236a:	46bd      	mov	sp, r7
 800236c:	b006      	add	sp, #24
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021800 	.word	0x40021800
 8002374:	50000400 	.word	0x50000400
 8002378:	50000800 	.word	0x50000800
 800237c:	50000c00 	.word	0x50000c00

08002380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	0008      	movs	r0, r1
 800238a:	0011      	movs	r1, r2
 800238c:	1cbb      	adds	r3, r7, #2
 800238e:	1c02      	adds	r2, r0, #0
 8002390:	801a      	strh	r2, [r3, #0]
 8002392:	1c7b      	adds	r3, r7, #1
 8002394:	1c0a      	adds	r2, r1, #0
 8002396:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002398:	1c7b      	adds	r3, r7, #1
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d004      	beq.n	80023aa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023a0:	1cbb      	adds	r3, r7, #2
 80023a2:	881a      	ldrh	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023a8:	e003      	b.n	80023b2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023aa:	1cbb      	adds	r3, r7, #2
 80023ac:	881a      	ldrh	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b002      	add	sp, #8
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80023c4:	4b19      	ldr	r3, [pc, #100]	@ (800242c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a19      	ldr	r2, [pc, #100]	@ (8002430 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	0019      	movs	r1, r3
 80023ce:	4b17      	ldr	r3, [pc, #92]	@ (800242c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	2380      	movs	r3, #128	@ 0x80
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	429a      	cmp	r2, r3
 80023de:	d11f      	bne.n	8002420 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80023e0:	4b14      	ldr	r3, [pc, #80]	@ (8002434 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	0013      	movs	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	189b      	adds	r3, r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4912      	ldr	r1, [pc, #72]	@ (8002438 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80023ee:	0018      	movs	r0, r3
 80023f0:	f7fd fe92 	bl	8000118 <__udivsi3>
 80023f4:	0003      	movs	r3, r0
 80023f6:	3301      	adds	r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023fa:	e008      	b.n	800240e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	3b01      	subs	r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	e001      	b.n	800240e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e009      	b.n	8002422 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800240e:	4b07      	ldr	r3, [pc, #28]	@ (800242c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	2380      	movs	r3, #128	@ 0x80
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	401a      	ands	r2, r3
 8002418:	2380      	movs	r3, #128	@ 0x80
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	429a      	cmp	r2, r3
 800241e:	d0ed      	beq.n	80023fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	0018      	movs	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	b004      	add	sp, #16
 8002428:	bd80      	pop	{r7, pc}
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	40007000 	.word	0x40007000
 8002430:	fffff9ff 	.word	0xfffff9ff
 8002434:	20000000 	.word	0x20000000
 8002438:	000f4240 	.word	0x000f4240

0800243c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002440:	4b03      	ldr	r3, [pc, #12]	@ (8002450 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	23e0      	movs	r3, #224	@ 0xe0
 8002446:	01db      	lsls	r3, r3, #7
 8002448:	4013      	ands	r3, r2
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000

08002454 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e2fe      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2201      	movs	r2, #1
 800246c:	4013      	ands	r3, r2
 800246e:	d100      	bne.n	8002472 <HAL_RCC_OscConfig+0x1e>
 8002470:	e07c      	b.n	800256c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002472:	4bc3      	ldr	r3, [pc, #780]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2238      	movs	r2, #56	@ 0x38
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800247c:	4bc0      	ldr	r3, [pc, #768]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2203      	movs	r2, #3
 8002482:	4013      	ands	r3, r2
 8002484:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b10      	cmp	r3, #16
 800248a:	d102      	bne.n	8002492 <HAL_RCC_OscConfig+0x3e>
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2b03      	cmp	r3, #3
 8002490:	d002      	beq.n	8002498 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2b08      	cmp	r3, #8
 8002496:	d10b      	bne.n	80024b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	4bb9      	ldr	r3, [pc, #740]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	@ 0x80
 800249e:	029b      	lsls	r3, r3, #10
 80024a0:	4013      	ands	r3, r2
 80024a2:	d062      	beq.n	800256a <HAL_RCC_OscConfig+0x116>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d15e      	bne.n	800256a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e2d9      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	2380      	movs	r3, #128	@ 0x80
 80024b6:	025b      	lsls	r3, r3, #9
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d107      	bne.n	80024cc <HAL_RCC_OscConfig+0x78>
 80024bc:	4bb0      	ldr	r3, [pc, #704]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4baf      	ldr	r3, [pc, #700]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 80024c2:	2180      	movs	r1, #128	@ 0x80
 80024c4:	0249      	lsls	r1, r1, #9
 80024c6:	430a      	orrs	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e020      	b.n	800250e <HAL_RCC_OscConfig+0xba>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	23a0      	movs	r3, #160	@ 0xa0
 80024d2:	02db      	lsls	r3, r3, #11
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d10e      	bne.n	80024f6 <HAL_RCC_OscConfig+0xa2>
 80024d8:	4ba9      	ldr	r3, [pc, #676]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4ba8      	ldr	r3, [pc, #672]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 80024de:	2180      	movs	r1, #128	@ 0x80
 80024e0:	02c9      	lsls	r1, r1, #11
 80024e2:	430a      	orrs	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	4ba6      	ldr	r3, [pc, #664]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4ba5      	ldr	r3, [pc, #660]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 80024ec:	2180      	movs	r1, #128	@ 0x80
 80024ee:	0249      	lsls	r1, r1, #9
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e00b      	b.n	800250e <HAL_RCC_OscConfig+0xba>
 80024f6:	4ba2      	ldr	r3, [pc, #648]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4ba1      	ldr	r3, [pc, #644]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 80024fc:	49a1      	ldr	r1, [pc, #644]	@ (8002784 <HAL_RCC_OscConfig+0x330>)
 80024fe:	400a      	ands	r2, r1
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	4b9f      	ldr	r3, [pc, #636]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b9e      	ldr	r3, [pc, #632]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 8002508:	499f      	ldr	r1, [pc, #636]	@ (8002788 <HAL_RCC_OscConfig+0x334>)
 800250a:	400a      	ands	r2, r1
 800250c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d014      	beq.n	8002540 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002516:	f7fe fc1f 	bl	8000d58 <HAL_GetTick>
 800251a:	0003      	movs	r3, r0
 800251c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002520:	f7fe fc1a 	bl	8000d58 <HAL_GetTick>
 8002524:	0002      	movs	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	@ 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e298      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002532:	4b93      	ldr	r3, [pc, #588]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	2380      	movs	r3, #128	@ 0x80
 8002538:	029b      	lsls	r3, r3, #10
 800253a:	4013      	ands	r3, r2
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0xcc>
 800253e:	e015      	b.n	800256c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7fe fc0a 	bl	8000d58 <HAL_GetTick>
 8002544:	0003      	movs	r3, r0
 8002546:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800254a:	f7fe fc05 	bl	8000d58 <HAL_GetTick>
 800254e:	0002      	movs	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b64      	cmp	r3, #100	@ 0x64
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e283      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800255c:	4b88      	ldr	r3, [pc, #544]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2380      	movs	r3, #128	@ 0x80
 8002562:	029b      	lsls	r3, r3, #10
 8002564:	4013      	ands	r3, r2
 8002566:	d1f0      	bne.n	800254a <HAL_RCC_OscConfig+0xf6>
 8002568:	e000      	b.n	800256c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2202      	movs	r2, #2
 8002572:	4013      	ands	r3, r2
 8002574:	d100      	bne.n	8002578 <HAL_RCC_OscConfig+0x124>
 8002576:	e099      	b.n	80026ac <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002578:	4b81      	ldr	r3, [pc, #516]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2238      	movs	r2, #56	@ 0x38
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002582:	4b7f      	ldr	r3, [pc, #508]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2203      	movs	r2, #3
 8002588:	4013      	ands	r3, r2
 800258a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	2b10      	cmp	r3, #16
 8002590:	d102      	bne.n	8002598 <HAL_RCC_OscConfig+0x144>
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d002      	beq.n	800259e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d135      	bne.n	800260a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800259e:	4b78      	ldr	r3, [pc, #480]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	2380      	movs	r3, #128	@ 0x80
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4013      	ands	r3, r2
 80025a8:	d005      	beq.n	80025b6 <HAL_RCC_OscConfig+0x162>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e256      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b6:	4b72      	ldr	r3, [pc, #456]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4a74      	ldr	r2, [pc, #464]	@ (800278c <HAL_RCC_OscConfig+0x338>)
 80025bc:	4013      	ands	r3, r2
 80025be:	0019      	movs	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	021a      	lsls	r2, r3, #8
 80025c6:	4b6e      	ldr	r3, [pc, #440]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 80025c8:	430a      	orrs	r2, r1
 80025ca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d112      	bne.n	80025f8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025d2:	4b6b      	ldr	r3, [pc, #428]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a6e      	ldr	r2, [pc, #440]	@ (8002790 <HAL_RCC_OscConfig+0x33c>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	4b67      	ldr	r3, [pc, #412]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80025e6:	4b66      	ldr	r3, [pc, #408]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	0adb      	lsrs	r3, r3, #11
 80025ec:	2207      	movs	r2, #7
 80025ee:	4013      	ands	r3, r2
 80025f0:	4a68      	ldr	r2, [pc, #416]	@ (8002794 <HAL_RCC_OscConfig+0x340>)
 80025f2:	40da      	lsrs	r2, r3
 80025f4:	4b68      	ldr	r3, [pc, #416]	@ (8002798 <HAL_RCC_OscConfig+0x344>)
 80025f6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025f8:	4b68      	ldr	r3, [pc, #416]	@ (800279c <HAL_RCC_OscConfig+0x348>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f7fe fb4f 	bl	8000ca0 <HAL_InitTick>
 8002602:	1e03      	subs	r3, r0, #0
 8002604:	d051      	beq.n	80026aa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e22c      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d030      	beq.n	8002674 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002612:	4b5b      	ldr	r3, [pc, #364]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a5e      	ldr	r2, [pc, #376]	@ (8002790 <HAL_RCC_OscConfig+0x33c>)
 8002618:	4013      	ands	r3, r2
 800261a:	0019      	movs	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	4b57      	ldr	r3, [pc, #348]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 8002622:	430a      	orrs	r2, r1
 8002624:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002626:	4b56      	ldr	r3, [pc, #344]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4b55      	ldr	r3, [pc, #340]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 800262c:	2180      	movs	r1, #128	@ 0x80
 800262e:	0049      	lsls	r1, r1, #1
 8002630:	430a      	orrs	r2, r1
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fe fb90 	bl	8000d58 <HAL_GetTick>
 8002638:	0003      	movs	r3, r0
 800263a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263e:	f7fe fb8b 	bl	8000d58 <HAL_GetTick>
 8002642:	0002      	movs	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e209      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002650:	4b4b      	ldr	r3, [pc, #300]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	@ 0x80
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4013      	ands	r3, r2
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265c:	4b48      	ldr	r3, [pc, #288]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a4a      	ldr	r2, [pc, #296]	@ (800278c <HAL_RCC_OscConfig+0x338>)
 8002662:	4013      	ands	r3, r2
 8002664:	0019      	movs	r1, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	021a      	lsls	r2, r3, #8
 800266c:	4b44      	ldr	r3, [pc, #272]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	e01b      	b.n	80026ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002674:	4b42      	ldr	r3, [pc, #264]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b41      	ldr	r3, [pc, #260]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 800267a:	4949      	ldr	r1, [pc, #292]	@ (80027a0 <HAL_RCC_OscConfig+0x34c>)
 800267c:	400a      	ands	r2, r1
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fb6a 	bl	8000d58 <HAL_GetTick>
 8002684:	0003      	movs	r3, r0
 8002686:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268a:	f7fe fb65 	bl	8000d58 <HAL_GetTick>
 800268e:	0002      	movs	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e1e3      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800269c:	4b38      	ldr	r3, [pc, #224]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	2380      	movs	r3, #128	@ 0x80
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4013      	ands	r3, r2
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x236>
 80026a8:	e000      	b.n	80026ac <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026aa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2208      	movs	r2, #8
 80026b2:	4013      	ands	r3, r2
 80026b4:	d047      	beq.n	8002746 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80026b6:	4b32      	ldr	r3, [pc, #200]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2238      	movs	r2, #56	@ 0x38
 80026bc:	4013      	ands	r3, r2
 80026be:	2b18      	cmp	r3, #24
 80026c0:	d10a      	bne.n	80026d8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80026c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 80026c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c6:	2202      	movs	r2, #2
 80026c8:	4013      	ands	r3, r2
 80026ca:	d03c      	beq.n	8002746 <HAL_RCC_OscConfig+0x2f2>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d138      	bne.n	8002746 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e1c5      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d019      	beq.n	8002714 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80026e0:	4b27      	ldr	r3, [pc, #156]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 80026e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026e4:	4b26      	ldr	r3, [pc, #152]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 80026e6:	2101      	movs	r1, #1
 80026e8:	430a      	orrs	r2, r1
 80026ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ec:	f7fe fb34 	bl	8000d58 <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f6:	f7fe fb2f 	bl	8000d58 <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e1ad      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002708:	4b1d      	ldr	r3, [pc, #116]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 800270a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d0f1      	beq.n	80026f6 <HAL_RCC_OscConfig+0x2a2>
 8002712:	e018      	b.n	8002746 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002714:	4b1a      	ldr	r3, [pc, #104]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 8002716:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002718:	4b19      	ldr	r3, [pc, #100]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 800271a:	2101      	movs	r1, #1
 800271c:	438a      	bics	r2, r1
 800271e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe fb1a 	bl	8000d58 <HAL_GetTick>
 8002724:	0003      	movs	r3, r0
 8002726:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272a:	f7fe fb15 	bl	8000d58 <HAL_GetTick>
 800272e:	0002      	movs	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e193      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800273c:	4b10      	ldr	r3, [pc, #64]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 800273e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002740:	2202      	movs	r2, #2
 8002742:	4013      	ands	r3, r2
 8002744:	d1f1      	bne.n	800272a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2204      	movs	r2, #4
 800274c:	4013      	ands	r3, r2
 800274e:	d100      	bne.n	8002752 <HAL_RCC_OscConfig+0x2fe>
 8002750:	e0c6      	b.n	80028e0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002752:	231f      	movs	r3, #31
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800275a:	4b09      	ldr	r3, [pc, #36]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2238      	movs	r2, #56	@ 0x38
 8002760:	4013      	ands	r3, r2
 8002762:	2b20      	cmp	r3, #32
 8002764:	d11e      	bne.n	80027a4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002766:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <HAL_RCC_OscConfig+0x32c>)
 8002768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276a:	2202      	movs	r2, #2
 800276c:	4013      	ands	r3, r2
 800276e:	d100      	bne.n	8002772 <HAL_RCC_OscConfig+0x31e>
 8002770:	e0b6      	b.n	80028e0 <HAL_RCC_OscConfig+0x48c>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d000      	beq.n	800277c <HAL_RCC_OscConfig+0x328>
 800277a:	e0b1      	b.n	80028e0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e171      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
 8002780:	40021000 	.word	0x40021000
 8002784:	fffeffff 	.word	0xfffeffff
 8002788:	fffbffff 	.word	0xfffbffff
 800278c:	ffff80ff 	.word	0xffff80ff
 8002790:	ffffc7ff 	.word	0xffffc7ff
 8002794:	00f42400 	.word	0x00f42400
 8002798:	20000000 	.word	0x20000000
 800279c:	20000004 	.word	0x20000004
 80027a0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027a4:	4bb1      	ldr	r3, [pc, #708]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80027a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027a8:	2380      	movs	r3, #128	@ 0x80
 80027aa:	055b      	lsls	r3, r3, #21
 80027ac:	4013      	ands	r3, r2
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_OscConfig+0x360>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x362>
 80027b4:	2300      	movs	r3, #0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d011      	beq.n	80027de <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80027ba:	4bac      	ldr	r3, [pc, #688]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80027bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027be:	4bab      	ldr	r3, [pc, #684]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80027c0:	2180      	movs	r1, #128	@ 0x80
 80027c2:	0549      	lsls	r1, r1, #21
 80027c4:	430a      	orrs	r2, r1
 80027c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027c8:	4ba8      	ldr	r3, [pc, #672]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80027ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027cc:	2380      	movs	r3, #128	@ 0x80
 80027ce:	055b      	lsls	r3, r3, #21
 80027d0:	4013      	ands	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80027d6:	231f      	movs	r3, #31
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027de:	4ba4      	ldr	r3, [pc, #656]	@ (8002a70 <HAL_RCC_OscConfig+0x61c>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	2380      	movs	r3, #128	@ 0x80
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4013      	ands	r3, r2
 80027e8:	d11a      	bne.n	8002820 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ea:	4ba1      	ldr	r3, [pc, #644]	@ (8002a70 <HAL_RCC_OscConfig+0x61c>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4ba0      	ldr	r3, [pc, #640]	@ (8002a70 <HAL_RCC_OscConfig+0x61c>)
 80027f0:	2180      	movs	r1, #128	@ 0x80
 80027f2:	0049      	lsls	r1, r1, #1
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80027f8:	f7fe faae 	bl	8000d58 <HAL_GetTick>
 80027fc:	0003      	movs	r3, r0
 80027fe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002802:	f7fe faa9 	bl	8000d58 <HAL_GetTick>
 8002806:	0002      	movs	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e127      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002814:	4b96      	ldr	r3, [pc, #600]	@ (8002a70 <HAL_RCC_OscConfig+0x61c>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	2380      	movs	r3, #128	@ 0x80
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4013      	ands	r3, r2
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x3e2>
 8002828:	4b90      	ldr	r3, [pc, #576]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 800282a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800282c:	4b8f      	ldr	r3, [pc, #572]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 800282e:	2101      	movs	r1, #1
 8002830:	430a      	orrs	r2, r1
 8002832:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002834:	e01c      	b.n	8002870 <HAL_RCC_OscConfig+0x41c>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b05      	cmp	r3, #5
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x404>
 800283e:	4b8b      	ldr	r3, [pc, #556]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002840:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002842:	4b8a      	ldr	r3, [pc, #552]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002844:	2104      	movs	r1, #4
 8002846:	430a      	orrs	r2, r1
 8002848:	65da      	str	r2, [r3, #92]	@ 0x5c
 800284a:	4b88      	ldr	r3, [pc, #544]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 800284c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800284e:	4b87      	ldr	r3, [pc, #540]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002850:	2101      	movs	r1, #1
 8002852:	430a      	orrs	r2, r1
 8002854:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0x41c>
 8002858:	4b84      	ldr	r3, [pc, #528]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 800285a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800285c:	4b83      	ldr	r3, [pc, #524]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 800285e:	2101      	movs	r1, #1
 8002860:	438a      	bics	r2, r1
 8002862:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002864:	4b81      	ldr	r3, [pc, #516]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002866:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002868:	4b80      	ldr	r3, [pc, #512]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 800286a:	2104      	movs	r1, #4
 800286c:	438a      	bics	r2, r1
 800286e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d014      	beq.n	80028a2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe fa6e 	bl	8000d58 <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002880:	e009      	b.n	8002896 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7fe fa69 	bl	8000d58 <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	4a79      	ldr	r2, [pc, #484]	@ (8002a74 <HAL_RCC_OscConfig+0x620>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e0e6      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002896:	4b75      	ldr	r3, [pc, #468]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289a:	2202      	movs	r2, #2
 800289c:	4013      	ands	r3, r2
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x42e>
 80028a0:	e013      	b.n	80028ca <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7fe fa59 	bl	8000d58 <HAL_GetTick>
 80028a6:	0003      	movs	r3, r0
 80028a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028aa:	e009      	b.n	80028c0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7fe fa54 	bl	8000d58 <HAL_GetTick>
 80028b0:	0002      	movs	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	4a6f      	ldr	r2, [pc, #444]	@ (8002a74 <HAL_RCC_OscConfig+0x620>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e0d1      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028c0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80028c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c4:	2202      	movs	r2, #2
 80028c6:	4013      	ands	r3, r2
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80028ca:	231f      	movs	r3, #31
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d105      	bne.n	80028e0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80028d4:	4b65      	ldr	r3, [pc, #404]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80028d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028d8:	4b64      	ldr	r3, [pc, #400]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80028da:	4967      	ldr	r1, [pc, #412]	@ (8002a78 <HAL_RCC_OscConfig+0x624>)
 80028dc:	400a      	ands	r2, r1
 80028de:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d100      	bne.n	80028ea <HAL_RCC_OscConfig+0x496>
 80028e8:	e0bb      	b.n	8002a62 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ea:	4b60      	ldr	r3, [pc, #384]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2238      	movs	r2, #56	@ 0x38
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b10      	cmp	r3, #16
 80028f4:	d100      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4a4>
 80028f6:	e07b      	b.n	80029f0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d156      	bne.n	80029ae <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002900:	4b5a      	ldr	r3, [pc, #360]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b59      	ldr	r3, [pc, #356]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002906:	495d      	ldr	r1, [pc, #372]	@ (8002a7c <HAL_RCC_OscConfig+0x628>)
 8002908:	400a      	ands	r2, r1
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe fa24 	bl	8000d58 <HAL_GetTick>
 8002910:	0003      	movs	r3, r0
 8002912:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002916:	f7fe fa1f 	bl	8000d58 <HAL_GetTick>
 800291a:	0002      	movs	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e09d      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002928:	4b50      	ldr	r3, [pc, #320]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2380      	movs	r3, #128	@ 0x80
 800292e:	049b      	lsls	r3, r3, #18
 8002930:	4013      	ands	r3, r2
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002934:	4b4d      	ldr	r3, [pc, #308]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a51      	ldr	r2, [pc, #324]	@ (8002a80 <HAL_RCC_OscConfig+0x62c>)
 800293a:	4013      	ands	r3, r2
 800293c:	0019      	movs	r1, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1a      	ldr	r2, [r3, #32]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002960:	431a      	orrs	r2, r3
 8002962:	4b42      	ldr	r3, [pc, #264]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002964:	430a      	orrs	r2, r1
 8002966:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002968:	4b40      	ldr	r3, [pc, #256]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 800296e:	2180      	movs	r1, #128	@ 0x80
 8002970:	0449      	lsls	r1, r1, #17
 8002972:	430a      	orrs	r2, r1
 8002974:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002976:	4b3d      	ldr	r3, [pc, #244]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 800297c:	2180      	movs	r1, #128	@ 0x80
 800297e:	0549      	lsls	r1, r1, #21
 8002980:	430a      	orrs	r2, r1
 8002982:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe f9e8 	bl	8000d58 <HAL_GetTick>
 8002988:	0003      	movs	r3, r0
 800298a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298e:	f7fe f9e3 	bl	8000d58 <HAL_GetTick>
 8002992:	0002      	movs	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e061      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a0:	4b32      	ldr	r3, [pc, #200]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	2380      	movs	r3, #128	@ 0x80
 80029a6:	049b      	lsls	r3, r3, #18
 80029a8:	4013      	ands	r3, r2
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x53a>
 80029ac:	e059      	b.n	8002a62 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ae:	4b2f      	ldr	r3, [pc, #188]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029b4:	4931      	ldr	r1, [pc, #196]	@ (8002a7c <HAL_RCC_OscConfig+0x628>)
 80029b6:	400a      	ands	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ba:	f7fe f9cd 	bl	8000d58 <HAL_GetTick>
 80029be:	0003      	movs	r3, r0
 80029c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe f9c8 	bl	8000d58 <HAL_GetTick>
 80029c8:	0002      	movs	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e046      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d6:	4b25      	ldr	r3, [pc, #148]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	2380      	movs	r3, #128	@ 0x80
 80029dc:	049b      	lsls	r3, r3, #18
 80029de:	4013      	ands	r3, r2
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80029e2:	4b22      	ldr	r3, [pc, #136]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	4b21      	ldr	r3, [pc, #132]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029e8:	4926      	ldr	r1, [pc, #152]	@ (8002a84 <HAL_RCC_OscConfig+0x630>)
 80029ea:	400a      	ands	r2, r1
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	e038      	b.n	8002a62 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e033      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2203      	movs	r2, #3
 8002a06:	401a      	ands	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d126      	bne.n	8002a5e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2270      	movs	r2, #112	@ 0x70
 8002a14:	401a      	ands	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d11f      	bne.n	8002a5e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	23fe      	movs	r3, #254	@ 0xfe
 8002a22:	01db      	lsls	r3, r3, #7
 8002a24:	401a      	ands	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d116      	bne.n	8002a5e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	23f8      	movs	r3, #248	@ 0xf8
 8002a34:	039b      	lsls	r3, r3, #14
 8002a36:	401a      	ands	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d10e      	bne.n	8002a5e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	23e0      	movs	r3, #224	@ 0xe0
 8002a44:	051b      	lsls	r3, r3, #20
 8002a46:	401a      	ands	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d106      	bne.n	8002a5e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	0f5b      	lsrs	r3, r3, #29
 8002a54:	075a      	lsls	r2, r3, #29
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	0018      	movs	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b008      	add	sp, #32
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40007000 	.word	0x40007000
 8002a74:	00001388 	.word	0x00001388
 8002a78:	efffffff 	.word	0xefffffff
 8002a7c:	feffffff 	.word	0xfeffffff
 8002a80:	11c1808c 	.word	0x11c1808c
 8002a84:	eefefffc 	.word	0xeefefffc

08002a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0e9      	b.n	8002c70 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b76      	ldr	r3, [pc, #472]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2207      	movs	r2, #7
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d91e      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b73      	ldr	r3, [pc, #460]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2207      	movs	r2, #7
 8002ab0:	4393      	bics	r3, r2
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	4b70      	ldr	r3, [pc, #448]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002abc:	f7fe f94c 	bl	8000d58 <HAL_GetTick>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ac4:	e009      	b.n	8002ada <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac6:	f7fe f947 	bl	8000d58 <HAL_GetTick>
 8002aca:	0002      	movs	r2, r0
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c7c <HAL_RCC_ClockConfig+0x1f4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e0ca      	b.n	8002c70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ada:	4b67      	ldr	r3, [pc, #412]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2207      	movs	r2, #7
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d1ee      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2202      	movs	r2, #2
 8002aee:	4013      	ands	r3, r2
 8002af0:	d015      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2204      	movs	r2, #4
 8002af8:	4013      	ands	r3, r2
 8002afa:	d006      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002afc:	4b60      	ldr	r3, [pc, #384]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	4b5f      	ldr	r3, [pc, #380]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b02:	21e0      	movs	r1, #224	@ 0xe0
 8002b04:	01c9      	lsls	r1, r1, #7
 8002b06:	430a      	orrs	r2, r1
 8002b08:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	4a5d      	ldr	r2, [pc, #372]	@ (8002c84 <HAL_RCC_ClockConfig+0x1fc>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	0019      	movs	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	4b59      	ldr	r3, [pc, #356]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2201      	movs	r2, #1
 8002b24:	4013      	ands	r3, r2
 8002b26:	d057      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d107      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b30:	4b53      	ldr	r3, [pc, #332]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	2380      	movs	r3, #128	@ 0x80
 8002b36:	029b      	lsls	r3, r3, #10
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d12b      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e097      	b.n	8002c70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b48:	4b4d      	ldr	r3, [pc, #308]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2380      	movs	r3, #128	@ 0x80
 8002b4e:	049b      	lsls	r3, r3, #18
 8002b50:	4013      	ands	r3, r2
 8002b52:	d11f      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e08b      	b.n	8002c70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d107      	bne.n	8002b70 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b60:	4b47      	ldr	r3, [pc, #284]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	2380      	movs	r3, #128	@ 0x80
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d113      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e07f      	b.n	8002c70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d106      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b78:	4b41      	ldr	r3, [pc, #260]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d108      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e074      	b.n	8002c70 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b86:	4b3e      	ldr	r3, [pc, #248]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e06d      	b.n	8002c70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b94:	4b3a      	ldr	r3, [pc, #232]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2207      	movs	r2, #7
 8002b9a:	4393      	bics	r3, r2
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	4b37      	ldr	r3, [pc, #220]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba8:	f7fe f8d6 	bl	8000d58 <HAL_GetTick>
 8002bac:	0003      	movs	r3, r0
 8002bae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb0:	e009      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb2:	f7fe f8d1 	bl	8000d58 <HAL_GetTick>
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	4a2f      	ldr	r2, [pc, #188]	@ (8002c7c <HAL_RCC_ClockConfig+0x1f4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e054      	b.n	8002c70 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2238      	movs	r2, #56	@ 0x38
 8002bcc:	401a      	ands	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d1ec      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b27      	ldr	r3, [pc, #156]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2207      	movs	r2, #7
 8002bde:	4013      	ands	r3, r2
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d21e      	bcs.n	8002c24 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b24      	ldr	r3, [pc, #144]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2207      	movs	r2, #7
 8002bec:	4393      	bics	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	4b21      	ldr	r3, [pc, #132]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bf8:	f7fe f8ae 	bl	8000d58 <HAL_GetTick>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c00:	e009      	b.n	8002c16 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c02:	f7fe f8a9 	bl	8000d58 <HAL_GetTick>
 8002c06:	0002      	movs	r2, r0
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002c7c <HAL_RCC_ClockConfig+0x1f4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e02c      	b.n	8002c70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c16:	4b18      	ldr	r3, [pc, #96]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2207      	movs	r2, #7
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d1ee      	bne.n	8002c02 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2204      	movs	r2, #4
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d009      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c2e:	4b14      	ldr	r3, [pc, #80]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	4a15      	ldr	r2, [pc, #84]	@ (8002c88 <HAL_RCC_ClockConfig+0x200>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	4b10      	ldr	r3, [pc, #64]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002c42:	f000 f829 	bl	8002c98 <HAL_RCC_GetSysClockFreq>
 8002c46:	0001      	movs	r1, r0
 8002c48:	4b0d      	ldr	r3, [pc, #52]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	0a1b      	lsrs	r3, r3, #8
 8002c4e:	220f      	movs	r2, #15
 8002c50:	401a      	ands	r2, r3
 8002c52:	4b0e      	ldr	r3, [pc, #56]	@ (8002c8c <HAL_RCC_ClockConfig+0x204>)
 8002c54:	0092      	lsls	r2, r2, #2
 8002c56:	58d3      	ldr	r3, [r2, r3]
 8002c58:	221f      	movs	r2, #31
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	000a      	movs	r2, r1
 8002c5e:	40da      	lsrs	r2, r3
 8002c60:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <HAL_RCC_ClockConfig+0x208>)
 8002c62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c64:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <HAL_RCC_ClockConfig+0x20c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f7fe f819 	bl	8000ca0 <HAL_InitTick>
 8002c6e:	0003      	movs	r3, r0
}
 8002c70:	0018      	movs	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b004      	add	sp, #16
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40022000 	.word	0x40022000
 8002c7c:	00001388 	.word	0x00001388
 8002c80:	40021000 	.word	0x40021000
 8002c84:	fffff0ff 	.word	0xfffff0ff
 8002c88:	ffff8fff 	.word	0xffff8fff
 8002c8c:	080048c4 	.word	0x080048c4
 8002c90:	20000000 	.word	0x20000000
 8002c94:	20000004 	.word	0x20000004

08002c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2238      	movs	r2, #56	@ 0x38
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d10f      	bne.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ca8:	4b39      	ldr	r3, [pc, #228]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	0adb      	lsrs	r3, r3, #11
 8002cae:	2207      	movs	r2, #7
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	0013      	movs	r3, r2
 8002cb8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002cba:	6839      	ldr	r1, [r7, #0]
 8002cbc:	4835      	ldr	r0, [pc, #212]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cbe:	f7fd fa2b 	bl	8000118 <__udivsi3>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	e05d      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc8:	4b31      	ldr	r3, [pc, #196]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2238      	movs	r2, #56	@ 0x38
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d102      	bne.n	8002cda <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cd4:	4b30      	ldr	r3, [pc, #192]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x100>)
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	e054      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cda:	4b2d      	ldr	r3, [pc, #180]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2238      	movs	r2, #56	@ 0x38
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b10      	cmp	r3, #16
 8002ce4:	d138      	bne.n	8002d58 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2203      	movs	r2, #3
 8002cec:	4013      	ands	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cf0:	4b27      	ldr	r3, [pc, #156]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	2207      	movs	r2, #7
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d10d      	bne.n	8002d20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	4824      	ldr	r0, [pc, #144]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x100>)
 8002d08:	f7fd fa06 	bl	8000118 <__udivsi3>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	0019      	movs	r1, r3
 8002d10:	4b1f      	ldr	r3, [pc, #124]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	227f      	movs	r2, #127	@ 0x7f
 8002d18:	4013      	ands	r3, r2
 8002d1a:	434b      	muls	r3, r1
 8002d1c:	617b      	str	r3, [r7, #20]
        break;
 8002d1e:	e00d      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	481c      	ldr	r0, [pc, #112]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d24:	f7fd f9f8 	bl	8000118 <__udivsi3>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	4b18      	ldr	r3, [pc, #96]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	0a1b      	lsrs	r3, r3, #8
 8002d32:	227f      	movs	r2, #127	@ 0x7f
 8002d34:	4013      	ands	r3, r2
 8002d36:	434b      	muls	r3, r1
 8002d38:	617b      	str	r3, [r7, #20]
        break;
 8002d3a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002d3c:	4b14      	ldr	r3, [pc, #80]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	0f5b      	lsrs	r3, r3, #29
 8002d42:	2207      	movs	r2, #7
 8002d44:	4013      	ands	r3, r2
 8002d46:	3301      	adds	r3, #1
 8002d48:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	6978      	ldr	r0, [r7, #20]
 8002d4e:	f7fd f9e3 	bl	8000118 <__udivsi3>
 8002d52:	0003      	movs	r3, r0
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	e015      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d58:	4b0d      	ldr	r3, [pc, #52]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2238      	movs	r2, #56	@ 0x38
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b20      	cmp	r3, #32
 8002d62:	d103      	bne.n	8002d6c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d64:	2380      	movs	r3, #128	@ 0x80
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	e00b      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d6c:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2238      	movs	r2, #56	@ 0x38
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b18      	cmp	r3, #24
 8002d76:	d103      	bne.n	8002d80 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d78:	23fa      	movs	r3, #250	@ 0xfa
 8002d7a:	01db      	lsls	r3, r3, #7
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	e001      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d84:	693b      	ldr	r3, [r7, #16]
}
 8002d86:	0018      	movs	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b006      	add	sp, #24
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	40021000 	.word	0x40021000
 8002d94:	00f42400 	.word	0x00f42400
 8002d98:	007a1200 	.word	0x007a1200

08002d9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da0:	4b02      	ldr	r3, [pc, #8]	@ (8002dac <HAL_RCC_GetHCLKFreq+0x10>)
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			@ (mov r8, r8)
 8002dac:	20000000 	.word	0x20000000

08002db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db0:	b5b0      	push	{r4, r5, r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002db4:	f7ff fff2 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002db8:	0004      	movs	r4, r0
 8002dba:	f7ff fb3f 	bl	800243c <LL_RCC_GetAPB1Prescaler>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	0b1a      	lsrs	r2, r3, #12
 8002dc2:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dc4:	0092      	lsls	r2, r2, #2
 8002dc6:	58d3      	ldr	r3, [r2, r3]
 8002dc8:	221f      	movs	r2, #31
 8002dca:	4013      	ands	r3, r2
 8002dcc:	40dc      	lsrs	r4, r3
 8002dce:	0023      	movs	r3, r4
}
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd6:	46c0      	nop			@ (mov r8, r8)
 8002dd8:	08004904 	.word	0x08004904

08002ddc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002de4:	2313      	movs	r3, #19
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dec:	2312      	movs	r3, #18
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	2380      	movs	r3, #128	@ 0x80
 8002dfa:	029b      	lsls	r3, r3, #10
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d100      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002e00:	e0a3      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e02:	2011      	movs	r0, #17
 8002e04:	183b      	adds	r3, r7, r0
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0a:	4bc3      	ldr	r3, [pc, #780]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e0e:	2380      	movs	r3, #128	@ 0x80
 8002e10:	055b      	lsls	r3, r3, #21
 8002e12:	4013      	ands	r3, r2
 8002e14:	d110      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e16:	4bc0      	ldr	r3, [pc, #768]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e1a:	4bbf      	ldr	r3, [pc, #764]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e1c:	2180      	movs	r1, #128	@ 0x80
 8002e1e:	0549      	lsls	r1, r1, #21
 8002e20:	430a      	orrs	r2, r1
 8002e22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e24:	4bbc      	ldr	r3, [pc, #752]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e28:	2380      	movs	r3, #128	@ 0x80
 8002e2a:	055b      	lsls	r3, r3, #21
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e32:	183b      	adds	r3, r7, r0
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e38:	4bb8      	ldr	r3, [pc, #736]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4bb7      	ldr	r3, [pc, #732]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002e3e:	2180      	movs	r1, #128	@ 0x80
 8002e40:	0049      	lsls	r1, r1, #1
 8002e42:	430a      	orrs	r2, r1
 8002e44:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e46:	f7fd ff87 	bl	8000d58 <HAL_GetTick>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e50:	f7fd ff82 	bl	8000d58 <HAL_GetTick>
 8002e54:	0002      	movs	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d904      	bls.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002e5e:	2313      	movs	r3, #19
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	2203      	movs	r2, #3
 8002e64:	701a      	strb	r2, [r3, #0]
        break;
 8002e66:	e005      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e68:	4bac      	ldr	r3, [pc, #688]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	2380      	movs	r3, #128	@ 0x80
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4013      	ands	r3, r2
 8002e72:	d0ed      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002e74:	2313      	movs	r3, #19
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d154      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e7e:	4ba6      	ldr	r3, [pc, #664]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e82:	23c0      	movs	r3, #192	@ 0xc0
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4013      	ands	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d019      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d014      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e9a:	4b9f      	ldr	r3, [pc, #636]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9e:	4aa0      	ldr	r2, [pc, #640]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ea4:	4b9c      	ldr	r3, [pc, #624]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ea6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ea8:	4b9b      	ldr	r3, [pc, #620]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eaa:	2180      	movs	r1, #128	@ 0x80
 8002eac:	0249      	lsls	r1, r1, #9
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002eb2:	4b99      	ldr	r3, [pc, #612]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002eb6:	4b98      	ldr	r3, [pc, #608]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb8:	499a      	ldr	r1, [pc, #616]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002eba:	400a      	ands	r2, r1
 8002ebc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ebe:	4b96      	ldr	r3, [pc, #600]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d016      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fd ff44 	bl	8000d58 <HAL_GetTick>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed4:	e00c      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed6:	f7fd ff3f 	bl	8000d58 <HAL_GetTick>
 8002eda:	0002      	movs	r2, r0
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	4a91      	ldr	r2, [pc, #580]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d904      	bls.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002ee6:	2313      	movs	r3, #19
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	2203      	movs	r2, #3
 8002eec:	701a      	strb	r2, [r3, #0]
            break;
 8002eee:	e004      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef0:	4b89      	ldr	r3, [pc, #548]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d0ed      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002efa:	2313      	movs	r3, #19
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f04:	4b84      	ldr	r3, [pc, #528]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f08:	4a85      	ldr	r2, [pc, #532]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f12:	4b81      	ldr	r3, [pc, #516]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f14:	430a      	orrs	r2, r1
 8002f16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f18:	e00c      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f1a:	2312      	movs	r3, #18
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	2213      	movs	r2, #19
 8002f20:	18ba      	adds	r2, r7, r2
 8002f22:	7812      	ldrb	r2, [r2, #0]
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	e005      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f28:	2312      	movs	r3, #18
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	2213      	movs	r2, #19
 8002f2e:	18ba      	adds	r2, r7, r2
 8002f30:	7812      	ldrb	r2, [r2, #0]
 8002f32:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f34:	2311      	movs	r3, #17
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d105      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3e:	4b76      	ldr	r3, [pc, #472]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f42:	4b75      	ldr	r3, [pc, #468]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f44:	4979      	ldr	r1, [pc, #484]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002f46:	400a      	ands	r2, r1
 8002f48:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	4013      	ands	r3, r2
 8002f52:	d009      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f54:	4b70      	ldr	r3, [pc, #448]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f58:	2203      	movs	r2, #3
 8002f5a:	4393      	bics	r3, r2
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	4b6d      	ldr	r3, [pc, #436]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f64:	430a      	orrs	r2, r1
 8002f66:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d009      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f72:	4b69      	ldr	r3, [pc, #420]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f76:	220c      	movs	r2, #12
 8002f78:	4393      	bics	r3, r2
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	4b65      	ldr	r3, [pc, #404]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f82:	430a      	orrs	r2, r1
 8002f84:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2210      	movs	r2, #16
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d009      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f90:	4b61      	ldr	r3, [pc, #388]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f94:	4a66      	ldr	r2, [pc, #408]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	4b5e      	ldr	r3, [pc, #376]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	2380      	movs	r3, #128	@ 0x80
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4013      	ands	r3, r2
 8002fae:	d009      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fb0:	4b59      	ldr	r3, [pc, #356]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb4:	4a5f      	ldr	r2, [pc, #380]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	0019      	movs	r1, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	4b56      	ldr	r3, [pc, #344]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	2380      	movs	r3, #128	@ 0x80
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d009      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fd0:	4b51      	ldr	r3, [pc, #324]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd4:	4a58      	ldr	r2, [pc, #352]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	0019      	movs	r1, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	4b4e      	ldr	r3, [pc, #312]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	4013      	ands	r3, r2
 8002fec:	d009      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fee:	4b4a      	ldr	r3, [pc, #296]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff2:	4a52      	ldr	r2, [pc, #328]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	0019      	movs	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	4b46      	ldr	r3, [pc, #280]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ffe:	430a      	orrs	r2, r1
 8003000:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	2380      	movs	r3, #128	@ 0x80
 8003008:	01db      	lsls	r3, r3, #7
 800300a:	4013      	ands	r3, r2
 800300c:	d015      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800300e:	4b42      	ldr	r3, [pc, #264]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	0899      	lsrs	r1, r3, #2
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1a      	ldr	r2, [r3, #32]
 800301a:	4b3f      	ldr	r3, [pc, #252]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800301c:	430a      	orrs	r2, r1
 800301e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1a      	ldr	r2, [r3, #32]
 8003024:	2380      	movs	r3, #128	@ 0x80
 8003026:	05db      	lsls	r3, r3, #23
 8003028:	429a      	cmp	r2, r3
 800302a:	d106      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800302c:	4b3a      	ldr	r3, [pc, #232]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	4b39      	ldr	r3, [pc, #228]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003032:	2180      	movs	r1, #128	@ 0x80
 8003034:	0249      	lsls	r1, r1, #9
 8003036:	430a      	orrs	r2, r1
 8003038:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	2380      	movs	r3, #128	@ 0x80
 8003040:	031b      	lsls	r3, r3, #12
 8003042:	4013      	ands	r3, r2
 8003044:	d009      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003046:	4b34      	ldr	r3, [pc, #208]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304a:	2240      	movs	r2, #64	@ 0x40
 800304c:	4393      	bics	r3, r2
 800304e:	0019      	movs	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003054:	4b30      	ldr	r3, [pc, #192]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003056:	430a      	orrs	r2, r1
 8003058:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	2380      	movs	r3, #128	@ 0x80
 8003060:	039b      	lsls	r3, r3, #14
 8003062:	4013      	ands	r3, r2
 8003064:	d016      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003066:	4b2c      	ldr	r3, [pc, #176]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306a:	4a35      	ldr	r2, [pc, #212]	@ (8003140 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800306c:	4013      	ands	r3, r2
 800306e:	0019      	movs	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003074:	4b28      	ldr	r3, [pc, #160]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003076:	430a      	orrs	r2, r1
 8003078:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800307e:	2380      	movs	r3, #128	@ 0x80
 8003080:	03db      	lsls	r3, r3, #15
 8003082:	429a      	cmp	r2, r3
 8003084:	d106      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003086:	4b24      	ldr	r3, [pc, #144]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	4b23      	ldr	r3, [pc, #140]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800308c:	2180      	movs	r1, #128	@ 0x80
 800308e:	0449      	lsls	r1, r1, #17
 8003090:	430a      	orrs	r2, r1
 8003092:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	2380      	movs	r3, #128	@ 0x80
 800309a:	03db      	lsls	r3, r3, #15
 800309c:	4013      	ands	r3, r2
 800309e:	d016      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80030a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a4:	4a27      	ldr	r2, [pc, #156]	@ (8003144 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	0019      	movs	r1, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030b0:	430a      	orrs	r2, r1
 80030b2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030b8:	2380      	movs	r3, #128	@ 0x80
 80030ba:	045b      	lsls	r3, r3, #17
 80030bc:	429a      	cmp	r2, r3
 80030be:	d106      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80030c0:	4b15      	ldr	r3, [pc, #84]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	4b14      	ldr	r3, [pc, #80]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030c6:	2180      	movs	r1, #128	@ 0x80
 80030c8:	0449      	lsls	r1, r1, #17
 80030ca:	430a      	orrs	r2, r1
 80030cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	2380      	movs	r3, #128	@ 0x80
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	4013      	ands	r3, r2
 80030d8:	d016      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80030da:	4b0f      	ldr	r3, [pc, #60]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030de:	4a1a      	ldr	r2, [pc, #104]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	0019      	movs	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030ea:	430a      	orrs	r2, r1
 80030ec:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	2380      	movs	r3, #128	@ 0x80
 80030f4:	01db      	lsls	r3, r3, #7
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d106      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80030fa:	4b07      	ldr	r3, [pc, #28]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	4b06      	ldr	r3, [pc, #24]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003100:	2180      	movs	r1, #128	@ 0x80
 8003102:	0249      	lsls	r1, r1, #9
 8003104:	430a      	orrs	r2, r1
 8003106:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003108:	2312      	movs	r3, #18
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	781b      	ldrb	r3, [r3, #0]
}
 800310e:	0018      	movs	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	b006      	add	sp, #24
 8003114:	bd80      	pop	{r7, pc}
 8003116:	46c0      	nop			@ (mov r8, r8)
 8003118:	40021000 	.word	0x40021000
 800311c:	40007000 	.word	0x40007000
 8003120:	fffffcff 	.word	0xfffffcff
 8003124:	fffeffff 	.word	0xfffeffff
 8003128:	00001388 	.word	0x00001388
 800312c:	efffffff 	.word	0xefffffff
 8003130:	fffff3ff 	.word	0xfffff3ff
 8003134:	fff3ffff 	.word	0xfff3ffff
 8003138:	ffcfffff 	.word	0xffcfffff
 800313c:	ffffcfff 	.word	0xffffcfff
 8003140:	ffbfffff 	.word	0xffbfffff
 8003144:	feffffff 	.word	0xfeffffff
 8003148:	ffff3fff 	.word	0xffff3fff

0800314c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e046      	b.n	80031ec <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2288      	movs	r2, #136	@ 0x88
 8003162:	589b      	ldr	r3, [r3, r2]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d107      	bne.n	8003178 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2284      	movs	r2, #132	@ 0x84
 800316c:	2100      	movs	r1, #0
 800316e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	0018      	movs	r0, r3
 8003174:	f7fd fc94 	bl	8000aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2288      	movs	r2, #136	@ 0x88
 800317c:	2124      	movs	r1, #36	@ 0x24
 800317e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2101      	movs	r1, #1
 800318c:	438a      	bics	r2, r1
 800318e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	0018      	movs	r0, r3
 800319c:	f000 fb8e 	bl	80038bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	0018      	movs	r0, r3
 80031a4:	f000 f8cc 	bl	8003340 <UART_SetConfig>
 80031a8:	0003      	movs	r3, r0
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e01c      	b.n	80031ec <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	490d      	ldr	r1, [pc, #52]	@ (80031f4 <HAL_UART_Init+0xa8>)
 80031be:	400a      	ands	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	212a      	movs	r1, #42	@ 0x2a
 80031ce:	438a      	bics	r2, r1
 80031d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2101      	movs	r1, #1
 80031de:	430a      	orrs	r2, r1
 80031e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	0018      	movs	r0, r3
 80031e6:	f000 fc1d 	bl	8003a24 <UART_CheckIdleState>
 80031ea:	0003      	movs	r3, r0
}
 80031ec:	0018      	movs	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b002      	add	sp, #8
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	ffffb7ff 	.word	0xffffb7ff

080031f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	@ 0x28
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	1dbb      	adds	r3, r7, #6
 8003206:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2288      	movs	r2, #136	@ 0x88
 800320c:	589b      	ldr	r3, [r3, r2]
 800320e:	2b20      	cmp	r3, #32
 8003210:	d000      	beq.n	8003214 <HAL_UART_Transmit+0x1c>
 8003212:	e090      	b.n	8003336 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_UART_Transmit+0x2a>
 800321a:	1dbb      	adds	r3, r7, #6
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e088      	b.n	8003338 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	2380      	movs	r3, #128	@ 0x80
 800322c:	015b      	lsls	r3, r3, #5
 800322e:	429a      	cmp	r2, r3
 8003230:	d109      	bne.n	8003246 <HAL_UART_Transmit+0x4e>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d105      	bne.n	8003246 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2201      	movs	r2, #1
 800323e:	4013      	ands	r3, r2
 8003240:	d001      	beq.n	8003246 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e078      	b.n	8003338 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2290      	movs	r2, #144	@ 0x90
 800324a:	2100      	movs	r1, #0
 800324c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2288      	movs	r2, #136	@ 0x88
 8003252:	2121      	movs	r1, #33	@ 0x21
 8003254:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003256:	f7fd fd7f 	bl	8000d58 <HAL_GetTick>
 800325a:	0003      	movs	r3, r0
 800325c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1dba      	adds	r2, r7, #6
 8003262:	2154      	movs	r1, #84	@ 0x54
 8003264:	8812      	ldrh	r2, [r2, #0]
 8003266:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1dba      	adds	r2, r7, #6
 800326c:	2156      	movs	r1, #86	@ 0x56
 800326e:	8812      	ldrh	r2, [r2, #0]
 8003270:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	2380      	movs	r3, #128	@ 0x80
 8003278:	015b      	lsls	r3, r3, #5
 800327a:	429a      	cmp	r2, r3
 800327c:	d108      	bne.n	8003290 <HAL_UART_Transmit+0x98>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d104      	bne.n	8003290 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	e003      	b.n	8003298 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003294:	2300      	movs	r3, #0
 8003296:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003298:	e030      	b.n	80032fc <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	0013      	movs	r3, r2
 80032a4:	2200      	movs	r2, #0
 80032a6:	2180      	movs	r1, #128	@ 0x80
 80032a8:	f000 fc66 	bl	8003b78 <UART_WaitOnFlagUntilTimeout>
 80032ac:	1e03      	subs	r3, r0, #0
 80032ae:	d005      	beq.n	80032bc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2288      	movs	r2, #136	@ 0x88
 80032b4:	2120      	movs	r1, #32
 80032b6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e03d      	b.n	8003338 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	001a      	movs	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	05d2      	lsls	r2, r2, #23
 80032ce:	0dd2      	lsrs	r2, r2, #23
 80032d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	3302      	adds	r3, #2
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	e007      	b.n	80032ea <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	781a      	ldrb	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	3301      	adds	r3, #1
 80032e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2256      	movs	r2, #86	@ 0x56
 80032ee:	5a9b      	ldrh	r3, [r3, r2]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b299      	uxth	r1, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2256      	movs	r2, #86	@ 0x56
 80032fa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2256      	movs	r2, #86	@ 0x56
 8003300:	5a9b      	ldrh	r3, [r3, r2]
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1c8      	bne.n	800329a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	0013      	movs	r3, r2
 8003312:	2200      	movs	r2, #0
 8003314:	2140      	movs	r1, #64	@ 0x40
 8003316:	f000 fc2f 	bl	8003b78 <UART_WaitOnFlagUntilTimeout>
 800331a:	1e03      	subs	r3, r0, #0
 800331c:	d005      	beq.n	800332a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2288      	movs	r2, #136	@ 0x88
 8003322:	2120      	movs	r1, #32
 8003324:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e006      	b.n	8003338 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2288      	movs	r2, #136	@ 0x88
 800332e:	2120      	movs	r1, #32
 8003330:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e000      	b.n	8003338 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003336:	2302      	movs	r3, #2
  }
}
 8003338:	0018      	movs	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	b008      	add	sp, #32
 800333e:	bd80      	pop	{r7, pc}

08003340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003340:	b5b0      	push	{r4, r5, r7, lr}
 8003342:	b090      	sub	sp, #64	@ 0x40
 8003344:	af00      	add	r7, sp, #0
 8003346:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003348:	231a      	movs	r3, #26
 800334a:	2220      	movs	r2, #32
 800334c:	189b      	adds	r3, r3, r2
 800334e:	19db      	adds	r3, r3, r7
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	431a      	orrs	r2, r3
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	431a      	orrs	r2, r3
 8003364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	4313      	orrs	r3, r2
 800336a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4aaf      	ldr	r2, [pc, #700]	@ (8003630 <UART_SetConfig+0x2f0>)
 8003374:	4013      	ands	r3, r2
 8003376:	0019      	movs	r1, r3
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800337e:	430b      	orrs	r3, r1
 8003380:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4aaa      	ldr	r2, [pc, #680]	@ (8003634 <UART_SetConfig+0x2f4>)
 800338a:	4013      	ands	r3, r2
 800338c:	0018      	movs	r0, r3
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	68d9      	ldr	r1, [r3, #12]
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	0003      	movs	r3, r0
 8003398:	430b      	orrs	r3, r1
 800339a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4aa4      	ldr	r2, [pc, #656]	@ (8003638 <UART_SetConfig+0x2f8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d004      	beq.n	80033b6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033b2:	4313      	orrs	r3, r2
 80033b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	4a9f      	ldr	r2, [pc, #636]	@ (800363c <UART_SetConfig+0x2fc>)
 80033be:	4013      	ands	r3, r2
 80033c0:	0019      	movs	r1, r3
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033c8:	430b      	orrs	r3, r1
 80033ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d2:	220f      	movs	r2, #15
 80033d4:	4393      	bics	r3, r2
 80033d6:	0018      	movs	r0, r3
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033da:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	0003      	movs	r3, r0
 80033e2:	430b      	orrs	r3, r1
 80033e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a95      	ldr	r2, [pc, #596]	@ (8003640 <UART_SetConfig+0x300>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d131      	bne.n	8003454 <UART_SetConfig+0x114>
 80033f0:	4b94      	ldr	r3, [pc, #592]	@ (8003644 <UART_SetConfig+0x304>)
 80033f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f4:	2203      	movs	r2, #3
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d01d      	beq.n	8003438 <UART_SetConfig+0xf8>
 80033fc:	d823      	bhi.n	8003446 <UART_SetConfig+0x106>
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d00c      	beq.n	800341c <UART_SetConfig+0xdc>
 8003402:	d820      	bhi.n	8003446 <UART_SetConfig+0x106>
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <UART_SetConfig+0xce>
 8003408:	2b01      	cmp	r3, #1
 800340a:	d00e      	beq.n	800342a <UART_SetConfig+0xea>
 800340c:	e01b      	b.n	8003446 <UART_SetConfig+0x106>
 800340e:	231b      	movs	r3, #27
 8003410:	2220      	movs	r2, #32
 8003412:	189b      	adds	r3, r3, r2
 8003414:	19db      	adds	r3, r3, r7
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
 800341a:	e0b4      	b.n	8003586 <UART_SetConfig+0x246>
 800341c:	231b      	movs	r3, #27
 800341e:	2220      	movs	r2, #32
 8003420:	189b      	adds	r3, r3, r2
 8003422:	19db      	adds	r3, r3, r7
 8003424:	2202      	movs	r2, #2
 8003426:	701a      	strb	r2, [r3, #0]
 8003428:	e0ad      	b.n	8003586 <UART_SetConfig+0x246>
 800342a:	231b      	movs	r3, #27
 800342c:	2220      	movs	r2, #32
 800342e:	189b      	adds	r3, r3, r2
 8003430:	19db      	adds	r3, r3, r7
 8003432:	2204      	movs	r2, #4
 8003434:	701a      	strb	r2, [r3, #0]
 8003436:	e0a6      	b.n	8003586 <UART_SetConfig+0x246>
 8003438:	231b      	movs	r3, #27
 800343a:	2220      	movs	r2, #32
 800343c:	189b      	adds	r3, r3, r2
 800343e:	19db      	adds	r3, r3, r7
 8003440:	2208      	movs	r2, #8
 8003442:	701a      	strb	r2, [r3, #0]
 8003444:	e09f      	b.n	8003586 <UART_SetConfig+0x246>
 8003446:	231b      	movs	r3, #27
 8003448:	2220      	movs	r2, #32
 800344a:	189b      	adds	r3, r3, r2
 800344c:	19db      	adds	r3, r3, r7
 800344e:	2210      	movs	r2, #16
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	e098      	b.n	8003586 <UART_SetConfig+0x246>
 8003454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a7b      	ldr	r2, [pc, #492]	@ (8003648 <UART_SetConfig+0x308>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d131      	bne.n	80034c2 <UART_SetConfig+0x182>
 800345e:	4b79      	ldr	r3, [pc, #484]	@ (8003644 <UART_SetConfig+0x304>)
 8003460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003462:	220c      	movs	r2, #12
 8003464:	4013      	ands	r3, r2
 8003466:	2b0c      	cmp	r3, #12
 8003468:	d01d      	beq.n	80034a6 <UART_SetConfig+0x166>
 800346a:	d823      	bhi.n	80034b4 <UART_SetConfig+0x174>
 800346c:	2b08      	cmp	r3, #8
 800346e:	d00c      	beq.n	800348a <UART_SetConfig+0x14a>
 8003470:	d820      	bhi.n	80034b4 <UART_SetConfig+0x174>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <UART_SetConfig+0x13c>
 8003476:	2b04      	cmp	r3, #4
 8003478:	d00e      	beq.n	8003498 <UART_SetConfig+0x158>
 800347a:	e01b      	b.n	80034b4 <UART_SetConfig+0x174>
 800347c:	231b      	movs	r3, #27
 800347e:	2220      	movs	r2, #32
 8003480:	189b      	adds	r3, r3, r2
 8003482:	19db      	adds	r3, r3, r7
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
 8003488:	e07d      	b.n	8003586 <UART_SetConfig+0x246>
 800348a:	231b      	movs	r3, #27
 800348c:	2220      	movs	r2, #32
 800348e:	189b      	adds	r3, r3, r2
 8003490:	19db      	adds	r3, r3, r7
 8003492:	2202      	movs	r2, #2
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	e076      	b.n	8003586 <UART_SetConfig+0x246>
 8003498:	231b      	movs	r3, #27
 800349a:	2220      	movs	r2, #32
 800349c:	189b      	adds	r3, r3, r2
 800349e:	19db      	adds	r3, r3, r7
 80034a0:	2204      	movs	r2, #4
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	e06f      	b.n	8003586 <UART_SetConfig+0x246>
 80034a6:	231b      	movs	r3, #27
 80034a8:	2220      	movs	r2, #32
 80034aa:	189b      	adds	r3, r3, r2
 80034ac:	19db      	adds	r3, r3, r7
 80034ae:	2208      	movs	r2, #8
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	e068      	b.n	8003586 <UART_SetConfig+0x246>
 80034b4:	231b      	movs	r3, #27
 80034b6:	2220      	movs	r2, #32
 80034b8:	189b      	adds	r3, r3, r2
 80034ba:	19db      	adds	r3, r3, r7
 80034bc:	2210      	movs	r2, #16
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	e061      	b.n	8003586 <UART_SetConfig+0x246>
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a61      	ldr	r2, [pc, #388]	@ (800364c <UART_SetConfig+0x30c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d106      	bne.n	80034da <UART_SetConfig+0x19a>
 80034cc:	231b      	movs	r3, #27
 80034ce:	2220      	movs	r2, #32
 80034d0:	189b      	adds	r3, r3, r2
 80034d2:	19db      	adds	r3, r3, r7
 80034d4:	2200      	movs	r2, #0
 80034d6:	701a      	strb	r2, [r3, #0]
 80034d8:	e055      	b.n	8003586 <UART_SetConfig+0x246>
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a5c      	ldr	r2, [pc, #368]	@ (8003650 <UART_SetConfig+0x310>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d106      	bne.n	80034f2 <UART_SetConfig+0x1b2>
 80034e4:	231b      	movs	r3, #27
 80034e6:	2220      	movs	r2, #32
 80034e8:	189b      	adds	r3, r3, r2
 80034ea:	19db      	adds	r3, r3, r7
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
 80034f0:	e049      	b.n	8003586 <UART_SetConfig+0x246>
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a50      	ldr	r2, [pc, #320]	@ (8003638 <UART_SetConfig+0x2f8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d13e      	bne.n	800357a <UART_SetConfig+0x23a>
 80034fc:	4b51      	ldr	r3, [pc, #324]	@ (8003644 <UART_SetConfig+0x304>)
 80034fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003500:	23c0      	movs	r3, #192	@ 0xc0
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	4013      	ands	r3, r2
 8003506:	22c0      	movs	r2, #192	@ 0xc0
 8003508:	0112      	lsls	r2, r2, #4
 800350a:	4293      	cmp	r3, r2
 800350c:	d027      	beq.n	800355e <UART_SetConfig+0x21e>
 800350e:	22c0      	movs	r2, #192	@ 0xc0
 8003510:	0112      	lsls	r2, r2, #4
 8003512:	4293      	cmp	r3, r2
 8003514:	d82a      	bhi.n	800356c <UART_SetConfig+0x22c>
 8003516:	2280      	movs	r2, #128	@ 0x80
 8003518:	0112      	lsls	r2, r2, #4
 800351a:	4293      	cmp	r3, r2
 800351c:	d011      	beq.n	8003542 <UART_SetConfig+0x202>
 800351e:	2280      	movs	r2, #128	@ 0x80
 8003520:	0112      	lsls	r2, r2, #4
 8003522:	4293      	cmp	r3, r2
 8003524:	d822      	bhi.n	800356c <UART_SetConfig+0x22c>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d004      	beq.n	8003534 <UART_SetConfig+0x1f4>
 800352a:	2280      	movs	r2, #128	@ 0x80
 800352c:	00d2      	lsls	r2, r2, #3
 800352e:	4293      	cmp	r3, r2
 8003530:	d00e      	beq.n	8003550 <UART_SetConfig+0x210>
 8003532:	e01b      	b.n	800356c <UART_SetConfig+0x22c>
 8003534:	231b      	movs	r3, #27
 8003536:	2220      	movs	r2, #32
 8003538:	189b      	adds	r3, r3, r2
 800353a:	19db      	adds	r3, r3, r7
 800353c:	2200      	movs	r2, #0
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e021      	b.n	8003586 <UART_SetConfig+0x246>
 8003542:	231b      	movs	r3, #27
 8003544:	2220      	movs	r2, #32
 8003546:	189b      	adds	r3, r3, r2
 8003548:	19db      	adds	r3, r3, r7
 800354a:	2202      	movs	r2, #2
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	e01a      	b.n	8003586 <UART_SetConfig+0x246>
 8003550:	231b      	movs	r3, #27
 8003552:	2220      	movs	r2, #32
 8003554:	189b      	adds	r3, r3, r2
 8003556:	19db      	adds	r3, r3, r7
 8003558:	2204      	movs	r2, #4
 800355a:	701a      	strb	r2, [r3, #0]
 800355c:	e013      	b.n	8003586 <UART_SetConfig+0x246>
 800355e:	231b      	movs	r3, #27
 8003560:	2220      	movs	r2, #32
 8003562:	189b      	adds	r3, r3, r2
 8003564:	19db      	adds	r3, r3, r7
 8003566:	2208      	movs	r2, #8
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	e00c      	b.n	8003586 <UART_SetConfig+0x246>
 800356c:	231b      	movs	r3, #27
 800356e:	2220      	movs	r2, #32
 8003570:	189b      	adds	r3, r3, r2
 8003572:	19db      	adds	r3, r3, r7
 8003574:	2210      	movs	r2, #16
 8003576:	701a      	strb	r2, [r3, #0]
 8003578:	e005      	b.n	8003586 <UART_SetConfig+0x246>
 800357a:	231b      	movs	r3, #27
 800357c:	2220      	movs	r2, #32
 800357e:	189b      	adds	r3, r3, r2
 8003580:	19db      	adds	r3, r3, r7
 8003582:	2210      	movs	r2, #16
 8003584:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a2b      	ldr	r2, [pc, #172]	@ (8003638 <UART_SetConfig+0x2f8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d000      	beq.n	8003592 <UART_SetConfig+0x252>
 8003590:	e0a9      	b.n	80036e6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003592:	231b      	movs	r3, #27
 8003594:	2220      	movs	r2, #32
 8003596:	189b      	adds	r3, r3, r2
 8003598:	19db      	adds	r3, r3, r7
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b08      	cmp	r3, #8
 800359e:	d015      	beq.n	80035cc <UART_SetConfig+0x28c>
 80035a0:	dc18      	bgt.n	80035d4 <UART_SetConfig+0x294>
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d00d      	beq.n	80035c2 <UART_SetConfig+0x282>
 80035a6:	dc15      	bgt.n	80035d4 <UART_SetConfig+0x294>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <UART_SetConfig+0x272>
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d005      	beq.n	80035bc <UART_SetConfig+0x27c>
 80035b0:	e010      	b.n	80035d4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b2:	f7ff fbfd 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 80035b6:	0003      	movs	r3, r0
 80035b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035ba:	e014      	b.n	80035e6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035bc:	4b25      	ldr	r3, [pc, #148]	@ (8003654 <UART_SetConfig+0x314>)
 80035be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035c0:	e011      	b.n	80035e6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c2:	f7ff fb69 	bl	8002c98 <HAL_RCC_GetSysClockFreq>
 80035c6:	0003      	movs	r3, r0
 80035c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035ca:	e00c      	b.n	80035e6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035cc:	2380      	movs	r3, #128	@ 0x80
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035d2:	e008      	b.n	80035e6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80035d8:	231a      	movs	r3, #26
 80035da:	2220      	movs	r2, #32
 80035dc:	189b      	adds	r3, r3, r2
 80035de:	19db      	adds	r3, r3, r7
 80035e0:	2201      	movs	r2, #1
 80035e2:	701a      	strb	r2, [r3, #0]
        break;
 80035e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d100      	bne.n	80035ee <UART_SetConfig+0x2ae>
 80035ec:	e14b      	b.n	8003886 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035f2:	4b19      	ldr	r3, [pc, #100]	@ (8003658 <UART_SetConfig+0x318>)
 80035f4:	0052      	lsls	r2, r2, #1
 80035f6:	5ad3      	ldrh	r3, [r2, r3]
 80035f8:	0019      	movs	r1, r3
 80035fa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80035fc:	f7fc fd8c 	bl	8000118 <__udivsi3>
 8003600:	0003      	movs	r3, r0
 8003602:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	0013      	movs	r3, r2
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	189b      	adds	r3, r3, r2
 800360e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003610:	429a      	cmp	r2, r3
 8003612:	d305      	bcc.n	8003620 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800361a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800361c:	429a      	cmp	r2, r3
 800361e:	d91d      	bls.n	800365c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003620:	231a      	movs	r3, #26
 8003622:	2220      	movs	r2, #32
 8003624:	189b      	adds	r3, r3, r2
 8003626:	19db      	adds	r3, r3, r7
 8003628:	2201      	movs	r2, #1
 800362a:	701a      	strb	r2, [r3, #0]
 800362c:	e12b      	b.n	8003886 <UART_SetConfig+0x546>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	cfff69f3 	.word	0xcfff69f3
 8003634:	ffffcfff 	.word	0xffffcfff
 8003638:	40008000 	.word	0x40008000
 800363c:	11fff4ff 	.word	0x11fff4ff
 8003640:	40013800 	.word	0x40013800
 8003644:	40021000 	.word	0x40021000
 8003648:	40004400 	.word	0x40004400
 800364c:	40004800 	.word	0x40004800
 8003650:	40004c00 	.word	0x40004c00
 8003654:	00f42400 	.word	0x00f42400
 8003658:	08004924 	.word	0x08004924
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800365c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	2300      	movs	r3, #0
 8003662:	61fb      	str	r3, [r7, #28]
 8003664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003666:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003668:	4b92      	ldr	r3, [pc, #584]	@ (80038b4 <UART_SetConfig+0x574>)
 800366a:	0052      	lsls	r2, r2, #1
 800366c:	5ad3      	ldrh	r3, [r2, r3]
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	69b8      	ldr	r0, [r7, #24]
 800367a:	69f9      	ldr	r1, [r7, #28]
 800367c:	f7fc fec2 	bl	8000404 <__aeabi_uldivmod>
 8003680:	0002      	movs	r2, r0
 8003682:	000b      	movs	r3, r1
 8003684:	0e11      	lsrs	r1, r2, #24
 8003686:	021d      	lsls	r5, r3, #8
 8003688:	430d      	orrs	r5, r1
 800368a:	0214      	lsls	r4, r2, #8
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68b8      	ldr	r0, [r7, #8]
 800369a:	68f9      	ldr	r1, [r7, #12]
 800369c:	1900      	adds	r0, r0, r4
 800369e:	4169      	adcs	r1, r5
 80036a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	603b      	str	r3, [r7, #0]
 80036a6:	2300      	movs	r3, #0
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f7fc fea9 	bl	8000404 <__aeabi_uldivmod>
 80036b2:	0002      	movs	r2, r0
 80036b4:	000b      	movs	r3, r1
 80036b6:	0013      	movs	r3, r2
 80036b8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036bc:	23c0      	movs	r3, #192	@ 0xc0
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d309      	bcc.n	80036d8 <UART_SetConfig+0x398>
 80036c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036c6:	2380      	movs	r3, #128	@ 0x80
 80036c8:	035b      	lsls	r3, r3, #13
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d204      	bcs.n	80036d8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80036ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	e0d6      	b.n	8003886 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80036d8:	231a      	movs	r3, #26
 80036da:	2220      	movs	r2, #32
 80036dc:	189b      	adds	r3, r3, r2
 80036de:	19db      	adds	r3, r3, r7
 80036e0:	2201      	movs	r2, #1
 80036e2:	701a      	strb	r2, [r3, #0]
 80036e4:	e0cf      	b.n	8003886 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	69da      	ldr	r2, [r3, #28]
 80036ea:	2380      	movs	r3, #128	@ 0x80
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d000      	beq.n	80036f4 <UART_SetConfig+0x3b4>
 80036f2:	e070      	b.n	80037d6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80036f4:	231b      	movs	r3, #27
 80036f6:	2220      	movs	r2, #32
 80036f8:	189b      	adds	r3, r3, r2
 80036fa:	19db      	adds	r3, r3, r7
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d015      	beq.n	800372e <UART_SetConfig+0x3ee>
 8003702:	dc18      	bgt.n	8003736 <UART_SetConfig+0x3f6>
 8003704:	2b04      	cmp	r3, #4
 8003706:	d00d      	beq.n	8003724 <UART_SetConfig+0x3e4>
 8003708:	dc15      	bgt.n	8003736 <UART_SetConfig+0x3f6>
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <UART_SetConfig+0x3d4>
 800370e:	2b02      	cmp	r3, #2
 8003710:	d005      	beq.n	800371e <UART_SetConfig+0x3de>
 8003712:	e010      	b.n	8003736 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003714:	f7ff fb4c 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8003718:	0003      	movs	r3, r0
 800371a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800371c:	e014      	b.n	8003748 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800371e:	4b66      	ldr	r3, [pc, #408]	@ (80038b8 <UART_SetConfig+0x578>)
 8003720:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003722:	e011      	b.n	8003748 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003724:	f7ff fab8 	bl	8002c98 <HAL_RCC_GetSysClockFreq>
 8003728:	0003      	movs	r3, r0
 800372a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800372c:	e00c      	b.n	8003748 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800372e:	2380      	movs	r3, #128	@ 0x80
 8003730:	021b      	lsls	r3, r3, #8
 8003732:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003734:	e008      	b.n	8003748 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800373a:	231a      	movs	r3, #26
 800373c:	2220      	movs	r2, #32
 800373e:	189b      	adds	r3, r3, r2
 8003740:	19db      	adds	r3, r3, r7
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
        break;
 8003746:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374a:	2b00      	cmp	r3, #0
 800374c:	d100      	bne.n	8003750 <UART_SetConfig+0x410>
 800374e:	e09a      	b.n	8003886 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003752:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003754:	4b57      	ldr	r3, [pc, #348]	@ (80038b4 <UART_SetConfig+0x574>)
 8003756:	0052      	lsls	r2, r2, #1
 8003758:	5ad3      	ldrh	r3, [r2, r3]
 800375a:	0019      	movs	r1, r3
 800375c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800375e:	f7fc fcdb 	bl	8000118 <__udivsi3>
 8003762:	0003      	movs	r3, r0
 8003764:	005a      	lsls	r2, r3, #1
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	085b      	lsrs	r3, r3, #1
 800376c:	18d2      	adds	r2, r2, r3
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	0019      	movs	r1, r3
 8003774:	0010      	movs	r0, r2
 8003776:	f7fc fccf 	bl	8000118 <__udivsi3>
 800377a:	0003      	movs	r3, r0
 800377c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800377e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003780:	2b0f      	cmp	r3, #15
 8003782:	d921      	bls.n	80037c8 <UART_SetConfig+0x488>
 8003784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003786:	2380      	movs	r3, #128	@ 0x80
 8003788:	025b      	lsls	r3, r3, #9
 800378a:	429a      	cmp	r2, r3
 800378c:	d21c      	bcs.n	80037c8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800378e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003790:	b29a      	uxth	r2, r3
 8003792:	200e      	movs	r0, #14
 8003794:	2420      	movs	r4, #32
 8003796:	1903      	adds	r3, r0, r4
 8003798:	19db      	adds	r3, r3, r7
 800379a:	210f      	movs	r1, #15
 800379c:	438a      	bics	r2, r1
 800379e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a2:	085b      	lsrs	r3, r3, #1
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2207      	movs	r2, #7
 80037a8:	4013      	ands	r3, r2
 80037aa:	b299      	uxth	r1, r3
 80037ac:	1903      	adds	r3, r0, r4
 80037ae:	19db      	adds	r3, r3, r7
 80037b0:	1902      	adds	r2, r0, r4
 80037b2:	19d2      	adds	r2, r2, r7
 80037b4:	8812      	ldrh	r2, [r2, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	1902      	adds	r2, r0, r4
 80037c0:	19d2      	adds	r2, r2, r7
 80037c2:	8812      	ldrh	r2, [r2, #0]
 80037c4:	60da      	str	r2, [r3, #12]
 80037c6:	e05e      	b.n	8003886 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80037c8:	231a      	movs	r3, #26
 80037ca:	2220      	movs	r2, #32
 80037cc:	189b      	adds	r3, r3, r2
 80037ce:	19db      	adds	r3, r3, r7
 80037d0:	2201      	movs	r2, #1
 80037d2:	701a      	strb	r2, [r3, #0]
 80037d4:	e057      	b.n	8003886 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037d6:	231b      	movs	r3, #27
 80037d8:	2220      	movs	r2, #32
 80037da:	189b      	adds	r3, r3, r2
 80037dc:	19db      	adds	r3, r3, r7
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d015      	beq.n	8003810 <UART_SetConfig+0x4d0>
 80037e4:	dc18      	bgt.n	8003818 <UART_SetConfig+0x4d8>
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d00d      	beq.n	8003806 <UART_SetConfig+0x4c6>
 80037ea:	dc15      	bgt.n	8003818 <UART_SetConfig+0x4d8>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <UART_SetConfig+0x4b6>
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d005      	beq.n	8003800 <UART_SetConfig+0x4c0>
 80037f4:	e010      	b.n	8003818 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f6:	f7ff fadb 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 80037fa:	0003      	movs	r3, r0
 80037fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80037fe:	e014      	b.n	800382a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003800:	4b2d      	ldr	r3, [pc, #180]	@ (80038b8 <UART_SetConfig+0x578>)
 8003802:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003804:	e011      	b.n	800382a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003806:	f7ff fa47 	bl	8002c98 <HAL_RCC_GetSysClockFreq>
 800380a:	0003      	movs	r3, r0
 800380c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800380e:	e00c      	b.n	800382a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003810:	2380      	movs	r3, #128	@ 0x80
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003816:	e008      	b.n	800382a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800381c:	231a      	movs	r3, #26
 800381e:	2220      	movs	r2, #32
 8003820:	189b      	adds	r3, r3, r2
 8003822:	19db      	adds	r3, r3, r7
 8003824:	2201      	movs	r2, #1
 8003826:	701a      	strb	r2, [r3, #0]
        break;
 8003828:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800382a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800382c:	2b00      	cmp	r3, #0
 800382e:	d02a      	beq.n	8003886 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003832:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003834:	4b1f      	ldr	r3, [pc, #124]	@ (80038b4 <UART_SetConfig+0x574>)
 8003836:	0052      	lsls	r2, r2, #1
 8003838:	5ad3      	ldrh	r3, [r2, r3]
 800383a:	0019      	movs	r1, r3
 800383c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800383e:	f7fc fc6b 	bl	8000118 <__udivsi3>
 8003842:	0003      	movs	r3, r0
 8003844:	001a      	movs	r2, r3
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	18d2      	adds	r2, r2, r3
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	0019      	movs	r1, r3
 8003854:	0010      	movs	r0, r2
 8003856:	f7fc fc5f 	bl	8000118 <__udivsi3>
 800385a:	0003      	movs	r3, r0
 800385c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800385e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003860:	2b0f      	cmp	r3, #15
 8003862:	d90a      	bls.n	800387a <UART_SetConfig+0x53a>
 8003864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003866:	2380      	movs	r3, #128	@ 0x80
 8003868:	025b      	lsls	r3, r3, #9
 800386a:	429a      	cmp	r2, r3
 800386c:	d205      	bcs.n	800387a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800386e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003870:	b29a      	uxth	r2, r3
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60da      	str	r2, [r3, #12]
 8003878:	e005      	b.n	8003886 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800387a:	231a      	movs	r3, #26
 800387c:	2220      	movs	r2, #32
 800387e:	189b      	adds	r3, r3, r2
 8003880:	19db      	adds	r3, r3, r7
 8003882:	2201      	movs	r2, #1
 8003884:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003888:	226a      	movs	r2, #106	@ 0x6a
 800388a:	2101      	movs	r1, #1
 800388c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	2268      	movs	r2, #104	@ 0x68
 8003892:	2101      	movs	r1, #1
 8003894:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	2200      	movs	r2, #0
 800389a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	2200      	movs	r2, #0
 80038a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80038a2:	231a      	movs	r3, #26
 80038a4:	2220      	movs	r2, #32
 80038a6:	189b      	adds	r3, r3, r2
 80038a8:	19db      	adds	r3, r3, r7
 80038aa:	781b      	ldrb	r3, [r3, #0]
}
 80038ac:	0018      	movs	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b010      	add	sp, #64	@ 0x40
 80038b2:	bdb0      	pop	{r4, r5, r7, pc}
 80038b4:	08004924 	.word	0x08004924
 80038b8:	00f42400 	.word	0x00f42400

080038bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c8:	2208      	movs	r2, #8
 80038ca:	4013      	ands	r3, r2
 80038cc:	d00b      	beq.n	80038e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	4a4a      	ldr	r2, [pc, #296]	@ (8003a00 <UART_AdvFeatureConfig+0x144>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	0019      	movs	r1, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ea:	2201      	movs	r2, #1
 80038ec:	4013      	ands	r3, r2
 80038ee:	d00b      	beq.n	8003908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	4a43      	ldr	r2, [pc, #268]	@ (8003a04 <UART_AdvFeatureConfig+0x148>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	0019      	movs	r1, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390c:	2202      	movs	r2, #2
 800390e:	4013      	ands	r3, r2
 8003910:	d00b      	beq.n	800392a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4a3b      	ldr	r2, [pc, #236]	@ (8003a08 <UART_AdvFeatureConfig+0x14c>)
 800391a:	4013      	ands	r3, r2
 800391c:	0019      	movs	r1, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392e:	2204      	movs	r2, #4
 8003930:	4013      	ands	r3, r2
 8003932:	d00b      	beq.n	800394c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4a34      	ldr	r2, [pc, #208]	@ (8003a0c <UART_AdvFeatureConfig+0x150>)
 800393c:	4013      	ands	r3, r2
 800393e:	0019      	movs	r1, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003950:	2210      	movs	r2, #16
 8003952:	4013      	ands	r3, r2
 8003954:	d00b      	beq.n	800396e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a2c      	ldr	r2, [pc, #176]	@ (8003a10 <UART_AdvFeatureConfig+0x154>)
 800395e:	4013      	ands	r3, r2
 8003960:	0019      	movs	r1, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003972:	2220      	movs	r2, #32
 8003974:	4013      	ands	r3, r2
 8003976:	d00b      	beq.n	8003990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	4a25      	ldr	r2, [pc, #148]	@ (8003a14 <UART_AdvFeatureConfig+0x158>)
 8003980:	4013      	ands	r3, r2
 8003982:	0019      	movs	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003994:	2240      	movs	r2, #64	@ 0x40
 8003996:	4013      	ands	r3, r2
 8003998:	d01d      	beq.n	80039d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a18 <UART_AdvFeatureConfig+0x15c>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	0019      	movs	r1, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039b6:	2380      	movs	r3, #128	@ 0x80
 80039b8:	035b      	lsls	r3, r3, #13
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d10b      	bne.n	80039d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4a15      	ldr	r2, [pc, #84]	@ (8003a1c <UART_AdvFeatureConfig+0x160>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039da:	2280      	movs	r2, #128	@ 0x80
 80039dc:	4013      	ands	r3, r2
 80039de:	d00b      	beq.n	80039f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003a20 <UART_AdvFeatureConfig+0x164>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	0019      	movs	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]
  }
}
 80039f8:	46c0      	nop			@ (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b002      	add	sp, #8
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	ffff7fff 	.word	0xffff7fff
 8003a04:	fffdffff 	.word	0xfffdffff
 8003a08:	fffeffff 	.word	0xfffeffff
 8003a0c:	fffbffff 	.word	0xfffbffff
 8003a10:	ffffefff 	.word	0xffffefff
 8003a14:	ffffdfff 	.word	0xffffdfff
 8003a18:	ffefffff 	.word	0xffefffff
 8003a1c:	ff9fffff 	.word	0xff9fffff
 8003a20:	fff7ffff 	.word	0xfff7ffff

08003a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b092      	sub	sp, #72	@ 0x48
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2290      	movs	r2, #144	@ 0x90
 8003a30:	2100      	movs	r1, #0
 8003a32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a34:	f7fd f990 	bl	8000d58 <HAL_GetTick>
 8003a38:	0003      	movs	r3, r0
 8003a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2208      	movs	r2, #8
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d12d      	bne.n	8003aa6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a4c:	2280      	movs	r2, #128	@ 0x80
 8003a4e:	0391      	lsls	r1, r2, #14
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4a47      	ldr	r2, [pc, #284]	@ (8003b70 <UART_CheckIdleState+0x14c>)
 8003a54:	9200      	str	r2, [sp, #0]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f000 f88e 	bl	8003b78 <UART_WaitOnFlagUntilTimeout>
 8003a5c:	1e03      	subs	r3, r0, #0
 8003a5e:	d022      	beq.n	8003aa6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a60:	f3ef 8310 	mrs	r3, PRIMASK
 8003a64:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003a68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a70:	f383 8810 	msr	PRIMASK, r3
}
 8003a74:	46c0      	nop			@ (mov r8, r8)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2180      	movs	r1, #128	@ 0x80
 8003a82:	438a      	bics	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a8c:	f383 8810 	msr	PRIMASK, r3
}
 8003a90:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2288      	movs	r2, #136	@ 0x88
 8003a96:	2120      	movs	r1, #32
 8003a98:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2284      	movs	r2, #132	@ 0x84
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e060      	b.n	8003b68 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2204      	movs	r2, #4
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d146      	bne.n	8003b42 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab6:	2280      	movs	r2, #128	@ 0x80
 8003ab8:	03d1      	lsls	r1, r2, #15
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	4a2c      	ldr	r2, [pc, #176]	@ (8003b70 <UART_CheckIdleState+0x14c>)
 8003abe:	9200      	str	r2, [sp, #0]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f000 f859 	bl	8003b78 <UART_WaitOnFlagUntilTimeout>
 8003ac6:	1e03      	subs	r3, r0, #0
 8003ac8:	d03b      	beq.n	8003b42 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aca:	f3ef 8310 	mrs	r3, PRIMASK
 8003ace:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f383 8810 	msr	PRIMASK, r3
}
 8003ade:	46c0      	nop			@ (mov r8, r8)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4922      	ldr	r1, [pc, #136]	@ (8003b74 <UART_CheckIdleState+0x150>)
 8003aec:	400a      	ands	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f383 8810 	msr	PRIMASK, r3
}
 8003afa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003afc:	f3ef 8310 	mrs	r3, PRIMASK
 8003b00:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b02:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b06:	2301      	movs	r3, #1
 8003b08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	f383 8810 	msr	PRIMASK, r3
}
 8003b10:	46c0      	nop			@ (mov r8, r8)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	438a      	bics	r2, r1
 8003b20:	609a      	str	r2, [r3, #8]
 8003b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	f383 8810 	msr	PRIMASK, r3
}
 8003b2c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	228c      	movs	r2, #140	@ 0x8c
 8003b32:	2120      	movs	r1, #32
 8003b34:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2284      	movs	r2, #132	@ 0x84
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e012      	b.n	8003b68 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2288      	movs	r2, #136	@ 0x88
 8003b46:	2120      	movs	r1, #32
 8003b48:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	228c      	movs	r2, #140	@ 0x8c
 8003b4e:	2120      	movs	r1, #32
 8003b50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2284      	movs	r2, #132	@ 0x84
 8003b62:	2100      	movs	r1, #0
 8003b64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	0018      	movs	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b010      	add	sp, #64	@ 0x40
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	01ffffff 	.word	0x01ffffff
 8003b74:	fffffedf 	.word	0xfffffedf

08003b78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	1dfb      	adds	r3, r7, #7
 8003b86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b88:	e051      	b.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	d04e      	beq.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b90:	f7fd f8e2 	bl	8000d58 <HAL_GetTick>
 8003b94:	0002      	movs	r2, r0
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d302      	bcc.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e051      	b.n	8003c4e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d03b      	beq.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b80      	cmp	r3, #128	@ 0x80
 8003bba:	d038      	beq.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b40      	cmp	r3, #64	@ 0x40
 8003bc0:	d035      	beq.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	2208      	movs	r2, #8
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d111      	bne.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f000 f83c 	bl	8003c58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2290      	movs	r2, #144	@ 0x90
 8003be4:	2108      	movs	r1, #8
 8003be6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2284      	movs	r2, #132	@ 0x84
 8003bec:	2100      	movs	r1, #0
 8003bee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e02c      	b.n	8003c4e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69da      	ldr	r2, [r3, #28]
 8003bfa:	2380      	movs	r3, #128	@ 0x80
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	401a      	ands	r2, r3
 8003c00:	2380      	movs	r3, #128	@ 0x80
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d112      	bne.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2280      	movs	r2, #128	@ 0x80
 8003c0e:	0112      	lsls	r2, r2, #4
 8003c10:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	0018      	movs	r0, r3
 8003c16:	f000 f81f 	bl	8003c58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2290      	movs	r2, #144	@ 0x90
 8003c1e:	2120      	movs	r1, #32
 8003c20:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2284      	movs	r2, #132	@ 0x84
 8003c26:	2100      	movs	r1, #0
 8003c28:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e00f      	b.n	8003c4e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	4013      	ands	r3, r2
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	425a      	negs	r2, r3
 8003c3e:	4153      	adcs	r3, r2
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	001a      	movs	r2, r3
 8003c44:	1dfb      	adds	r3, r7, #7
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d09e      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	0018      	movs	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b004      	add	sp, #16
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08e      	sub	sp, #56	@ 0x38
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c60:	f3ef 8310 	mrs	r3, PRIMASK
 8003c64:	617b      	str	r3, [r7, #20]
  return(result);
 8003c66:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f383 8810 	msr	PRIMASK, r3
}
 8003c74:	46c0      	nop			@ (mov r8, r8)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4926      	ldr	r1, [pc, #152]	@ (8003d1c <UART_EndRxTransfer+0xc4>)
 8003c82:	400a      	ands	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f383 8810 	msr	PRIMASK, r3
}
 8003c90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c92:	f3ef 8310 	mrs	r3, PRIMASK
 8003c96:	623b      	str	r3, [r7, #32]
  return(result);
 8003c98:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca2:	f383 8810 	msr	PRIMASK, r3
}
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	491b      	ldr	r1, [pc, #108]	@ (8003d20 <UART_EndRxTransfer+0xc8>)
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	609a      	str	r2, [r3, #8]
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbe:	f383 8810 	msr	PRIMASK, r3
}
 8003cc2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d118      	bne.n	8003cfe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cd2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f383 8810 	msr	PRIMASK, r3
}
 8003ce0:	46c0      	nop			@ (mov r8, r8)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2110      	movs	r1, #16
 8003cee:	438a      	bics	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f383 8810 	msr	PRIMASK, r3
}
 8003cfc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	228c      	movs	r2, #140	@ 0x8c
 8003d02:	2120      	movs	r1, #32
 8003d04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003d12:	46c0      	nop			@ (mov r8, r8)
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b00e      	add	sp, #56	@ 0x38
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	fffffedf 	.word	0xfffffedf
 8003d20:	effffffe 	.word	0xeffffffe

08003d24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2284      	movs	r2, #132	@ 0x84
 8003d30:	5c9b      	ldrb	r3, [r3, r2]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_UARTEx_DisableFifoMode+0x16>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e027      	b.n	8003d8a <HAL_UARTEx_DisableFifoMode+0x66>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2284      	movs	r2, #132	@ 0x84
 8003d3e:	2101      	movs	r1, #1
 8003d40:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2288      	movs	r2, #136	@ 0x88
 8003d46:	2124      	movs	r1, #36	@ 0x24
 8003d48:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	438a      	bics	r2, r1
 8003d60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4a0b      	ldr	r2, [pc, #44]	@ (8003d94 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2288      	movs	r2, #136	@ 0x88
 8003d7c:	2120      	movs	r1, #32
 8003d7e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2284      	movs	r2, #132	@ 0x84
 8003d84:	2100      	movs	r1, #0
 8003d86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b004      	add	sp, #16
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	dfffffff 	.word	0xdfffffff

08003d98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2284      	movs	r2, #132	@ 0x84
 8003da6:	5c9b      	ldrb	r3, [r3, r2]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e02e      	b.n	8003e0e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2284      	movs	r2, #132	@ 0x84
 8003db4:	2101      	movs	r1, #1
 8003db6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2288      	movs	r2, #136	@ 0x88
 8003dbc:	2124      	movs	r1, #36	@ 0x24
 8003dbe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	438a      	bics	r2, r1
 8003dd6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	08d9      	lsrs	r1, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	0018      	movs	r0, r3
 8003df0:	f000 f854 	bl	8003e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2288      	movs	r2, #136	@ 0x88
 8003e00:	2120      	movs	r1, #32
 8003e02:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2284      	movs	r2, #132	@ 0x84
 8003e08:	2100      	movs	r1, #0
 8003e0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	0018      	movs	r0, r3
 8003e10:	46bd      	mov	sp, r7
 8003e12:	b004      	add	sp, #16
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2284      	movs	r2, #132	@ 0x84
 8003e26:	5c9b      	ldrb	r3, [r3, r2]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e02f      	b.n	8003e90 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2284      	movs	r2, #132	@ 0x84
 8003e34:	2101      	movs	r1, #1
 8003e36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2288      	movs	r2, #136	@ 0x88
 8003e3c:	2124      	movs	r1, #36	@ 0x24
 8003e3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2101      	movs	r1, #1
 8003e54:	438a      	bics	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8003e98 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	0019      	movs	r1, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	0018      	movs	r0, r3
 8003e72:	f000 f813 	bl	8003e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2288      	movs	r2, #136	@ 0x88
 8003e82:	2120      	movs	r1, #32
 8003e84:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2284      	movs	r2, #132	@ 0x84
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	0018      	movs	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b004      	add	sp, #16
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	f1ffffff 	.word	0xf1ffffff

08003e9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d108      	bne.n	8003ebe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	226a      	movs	r2, #106	@ 0x6a
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2268      	movs	r2, #104	@ 0x68
 8003eb8:	2101      	movs	r1, #1
 8003eba:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ebc:	e043      	b.n	8003f46 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ebe:	260f      	movs	r6, #15
 8003ec0:	19bb      	adds	r3, r7, r6
 8003ec2:	2208      	movs	r2, #8
 8003ec4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003ec6:	200e      	movs	r0, #14
 8003ec8:	183b      	adds	r3, r7, r0
 8003eca:	2208      	movs	r2, #8
 8003ecc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	0e5b      	lsrs	r3, r3, #25
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	240d      	movs	r4, #13
 8003eda:	193b      	adds	r3, r7, r4
 8003edc:	2107      	movs	r1, #7
 8003ede:	400a      	ands	r2, r1
 8003ee0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	0f5b      	lsrs	r3, r3, #29
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	250c      	movs	r5, #12
 8003eee:	197b      	adds	r3, r7, r5
 8003ef0:	2107      	movs	r1, #7
 8003ef2:	400a      	ands	r2, r1
 8003ef4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ef6:	183b      	adds	r3, r7, r0
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	197a      	adds	r2, r7, r5
 8003efc:	7812      	ldrb	r2, [r2, #0]
 8003efe:	4914      	ldr	r1, [pc, #80]	@ (8003f50 <UARTEx_SetNbDataToProcess+0xb4>)
 8003f00:	5c8a      	ldrb	r2, [r1, r2]
 8003f02:	435a      	muls	r2, r3
 8003f04:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f06:	197b      	adds	r3, r7, r5
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	4a12      	ldr	r2, [pc, #72]	@ (8003f54 <UARTEx_SetNbDataToProcess+0xb8>)
 8003f0c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f0e:	0019      	movs	r1, r3
 8003f10:	f7fc f98c 	bl	800022c <__divsi3>
 8003f14:	0003      	movs	r3, r0
 8003f16:	b299      	uxth	r1, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	226a      	movs	r2, #106	@ 0x6a
 8003f1c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f1e:	19bb      	adds	r3, r7, r6
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	193a      	adds	r2, r7, r4
 8003f24:	7812      	ldrb	r2, [r2, #0]
 8003f26:	490a      	ldr	r1, [pc, #40]	@ (8003f50 <UARTEx_SetNbDataToProcess+0xb4>)
 8003f28:	5c8a      	ldrb	r2, [r1, r2]
 8003f2a:	435a      	muls	r2, r3
 8003f2c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f2e:	193b      	adds	r3, r7, r4
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	4a08      	ldr	r2, [pc, #32]	@ (8003f54 <UARTEx_SetNbDataToProcess+0xb8>)
 8003f34:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f36:	0019      	movs	r1, r3
 8003f38:	f7fc f978 	bl	800022c <__divsi3>
 8003f3c:	0003      	movs	r3, r0
 8003f3e:	b299      	uxth	r1, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2268      	movs	r2, #104	@ 0x68
 8003f44:	5299      	strh	r1, [r3, r2]
}
 8003f46:	46c0      	nop			@ (mov r8, r8)
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	b005      	add	sp, #20
 8003f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f4e:	46c0      	nop			@ (mov r8, r8)
 8003f50:	0800493c 	.word	0x0800493c
 8003f54:	08004944 	.word	0x08004944

08003f58 <siprintf>:
 8003f58:	b40e      	push	{r1, r2, r3}
 8003f5a:	b500      	push	{lr}
 8003f5c:	490b      	ldr	r1, [pc, #44]	@ (8003f8c <siprintf+0x34>)
 8003f5e:	b09c      	sub	sp, #112	@ 0x70
 8003f60:	ab1d      	add	r3, sp, #116	@ 0x74
 8003f62:	9002      	str	r0, [sp, #8]
 8003f64:	9006      	str	r0, [sp, #24]
 8003f66:	9107      	str	r1, [sp, #28]
 8003f68:	9104      	str	r1, [sp, #16]
 8003f6a:	4809      	ldr	r0, [pc, #36]	@ (8003f90 <siprintf+0x38>)
 8003f6c:	4909      	ldr	r1, [pc, #36]	@ (8003f94 <siprintf+0x3c>)
 8003f6e:	cb04      	ldmia	r3!, {r2}
 8003f70:	9105      	str	r1, [sp, #20]
 8003f72:	6800      	ldr	r0, [r0, #0]
 8003f74:	a902      	add	r1, sp, #8
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	f000 f99e 	bl	80042b8 <_svfiprintf_r>
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	9b02      	ldr	r3, [sp, #8]
 8003f80:	701a      	strb	r2, [r3, #0]
 8003f82:	b01c      	add	sp, #112	@ 0x70
 8003f84:	bc08      	pop	{r3}
 8003f86:	b003      	add	sp, #12
 8003f88:	4718      	bx	r3
 8003f8a:	46c0      	nop			@ (mov r8, r8)
 8003f8c:	7fffffff 	.word	0x7fffffff
 8003f90:	2000000c 	.word	0x2000000c
 8003f94:	ffff0208 	.word	0xffff0208

08003f98 <memset>:
 8003f98:	0003      	movs	r3, r0
 8003f9a:	1882      	adds	r2, r0, r2
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d100      	bne.n	8003fa2 <memset+0xa>
 8003fa0:	4770      	bx	lr
 8003fa2:	7019      	strb	r1, [r3, #0]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	e7f9      	b.n	8003f9c <memset+0x4>

08003fa8 <__errno>:
 8003fa8:	4b01      	ldr	r3, [pc, #4]	@ (8003fb0 <__errno+0x8>)
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	4770      	bx	lr
 8003fae:	46c0      	nop			@ (mov r8, r8)
 8003fb0:	2000000c 	.word	0x2000000c

08003fb4 <__libc_init_array>:
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	2600      	movs	r6, #0
 8003fb8:	4c0c      	ldr	r4, [pc, #48]	@ (8003fec <__libc_init_array+0x38>)
 8003fba:	4d0d      	ldr	r5, [pc, #52]	@ (8003ff0 <__libc_init_array+0x3c>)
 8003fbc:	1b64      	subs	r4, r4, r5
 8003fbe:	10a4      	asrs	r4, r4, #2
 8003fc0:	42a6      	cmp	r6, r4
 8003fc2:	d109      	bne.n	8003fd8 <__libc_init_array+0x24>
 8003fc4:	2600      	movs	r6, #0
 8003fc6:	f000 fc65 	bl	8004894 <_init>
 8003fca:	4c0a      	ldr	r4, [pc, #40]	@ (8003ff4 <__libc_init_array+0x40>)
 8003fcc:	4d0a      	ldr	r5, [pc, #40]	@ (8003ff8 <__libc_init_array+0x44>)
 8003fce:	1b64      	subs	r4, r4, r5
 8003fd0:	10a4      	asrs	r4, r4, #2
 8003fd2:	42a6      	cmp	r6, r4
 8003fd4:	d105      	bne.n	8003fe2 <__libc_init_array+0x2e>
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}
 8003fd8:	00b3      	lsls	r3, r6, #2
 8003fda:	58eb      	ldr	r3, [r5, r3]
 8003fdc:	4798      	blx	r3
 8003fde:	3601      	adds	r6, #1
 8003fe0:	e7ee      	b.n	8003fc0 <__libc_init_array+0xc>
 8003fe2:	00b3      	lsls	r3, r6, #2
 8003fe4:	58eb      	ldr	r3, [r5, r3]
 8003fe6:	4798      	blx	r3
 8003fe8:	3601      	adds	r6, #1
 8003fea:	e7f2      	b.n	8003fd2 <__libc_init_array+0x1e>
 8003fec:	08004988 	.word	0x08004988
 8003ff0:	08004988 	.word	0x08004988
 8003ff4:	0800498c 	.word	0x0800498c
 8003ff8:	08004988 	.word	0x08004988

08003ffc <__retarget_lock_acquire_recursive>:
 8003ffc:	4770      	bx	lr

08003ffe <__retarget_lock_release_recursive>:
 8003ffe:	4770      	bx	lr

08004000 <_free_r>:
 8004000:	b570      	push	{r4, r5, r6, lr}
 8004002:	0005      	movs	r5, r0
 8004004:	1e0c      	subs	r4, r1, #0
 8004006:	d010      	beq.n	800402a <_free_r+0x2a>
 8004008:	3c04      	subs	r4, #4
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	da00      	bge.n	8004012 <_free_r+0x12>
 8004010:	18e4      	adds	r4, r4, r3
 8004012:	0028      	movs	r0, r5
 8004014:	f000 f8e0 	bl	80041d8 <__malloc_lock>
 8004018:	4a1d      	ldr	r2, [pc, #116]	@ (8004090 <_free_r+0x90>)
 800401a:	6813      	ldr	r3, [r2, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d105      	bne.n	800402c <_free_r+0x2c>
 8004020:	6063      	str	r3, [r4, #4]
 8004022:	6014      	str	r4, [r2, #0]
 8004024:	0028      	movs	r0, r5
 8004026:	f000 f8df 	bl	80041e8 <__malloc_unlock>
 800402a:	bd70      	pop	{r4, r5, r6, pc}
 800402c:	42a3      	cmp	r3, r4
 800402e:	d908      	bls.n	8004042 <_free_r+0x42>
 8004030:	6820      	ldr	r0, [r4, #0]
 8004032:	1821      	adds	r1, r4, r0
 8004034:	428b      	cmp	r3, r1
 8004036:	d1f3      	bne.n	8004020 <_free_r+0x20>
 8004038:	6819      	ldr	r1, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	1809      	adds	r1, r1, r0
 800403e:	6021      	str	r1, [r4, #0]
 8004040:	e7ee      	b.n	8004020 <_free_r+0x20>
 8004042:	001a      	movs	r2, r3
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <_free_r+0x4e>
 800404a:	42a3      	cmp	r3, r4
 800404c:	d9f9      	bls.n	8004042 <_free_r+0x42>
 800404e:	6811      	ldr	r1, [r2, #0]
 8004050:	1850      	adds	r0, r2, r1
 8004052:	42a0      	cmp	r0, r4
 8004054:	d10b      	bne.n	800406e <_free_r+0x6e>
 8004056:	6820      	ldr	r0, [r4, #0]
 8004058:	1809      	adds	r1, r1, r0
 800405a:	1850      	adds	r0, r2, r1
 800405c:	6011      	str	r1, [r2, #0]
 800405e:	4283      	cmp	r3, r0
 8004060:	d1e0      	bne.n	8004024 <_free_r+0x24>
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	1841      	adds	r1, r0, r1
 8004068:	6011      	str	r1, [r2, #0]
 800406a:	6053      	str	r3, [r2, #4]
 800406c:	e7da      	b.n	8004024 <_free_r+0x24>
 800406e:	42a0      	cmp	r0, r4
 8004070:	d902      	bls.n	8004078 <_free_r+0x78>
 8004072:	230c      	movs	r3, #12
 8004074:	602b      	str	r3, [r5, #0]
 8004076:	e7d5      	b.n	8004024 <_free_r+0x24>
 8004078:	6820      	ldr	r0, [r4, #0]
 800407a:	1821      	adds	r1, r4, r0
 800407c:	428b      	cmp	r3, r1
 800407e:	d103      	bne.n	8004088 <_free_r+0x88>
 8004080:	6819      	ldr	r1, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	1809      	adds	r1, r1, r0
 8004086:	6021      	str	r1, [r4, #0]
 8004088:	6063      	str	r3, [r4, #4]
 800408a:	6054      	str	r4, [r2, #4]
 800408c:	e7ca      	b.n	8004024 <_free_r+0x24>
 800408e:	46c0      	nop			@ (mov r8, r8)
 8004090:	200002bc 	.word	0x200002bc

08004094 <sbrk_aligned>:
 8004094:	b570      	push	{r4, r5, r6, lr}
 8004096:	4e0f      	ldr	r6, [pc, #60]	@ (80040d4 <sbrk_aligned+0x40>)
 8004098:	000d      	movs	r5, r1
 800409a:	6831      	ldr	r1, [r6, #0]
 800409c:	0004      	movs	r4, r0
 800409e:	2900      	cmp	r1, #0
 80040a0:	d102      	bne.n	80040a8 <sbrk_aligned+0x14>
 80040a2:	f000 fb99 	bl	80047d8 <_sbrk_r>
 80040a6:	6030      	str	r0, [r6, #0]
 80040a8:	0029      	movs	r1, r5
 80040aa:	0020      	movs	r0, r4
 80040ac:	f000 fb94 	bl	80047d8 <_sbrk_r>
 80040b0:	1c43      	adds	r3, r0, #1
 80040b2:	d103      	bne.n	80040bc <sbrk_aligned+0x28>
 80040b4:	2501      	movs	r5, #1
 80040b6:	426d      	negs	r5, r5
 80040b8:	0028      	movs	r0, r5
 80040ba:	bd70      	pop	{r4, r5, r6, pc}
 80040bc:	2303      	movs	r3, #3
 80040be:	1cc5      	adds	r5, r0, #3
 80040c0:	439d      	bics	r5, r3
 80040c2:	42a8      	cmp	r0, r5
 80040c4:	d0f8      	beq.n	80040b8 <sbrk_aligned+0x24>
 80040c6:	1a29      	subs	r1, r5, r0
 80040c8:	0020      	movs	r0, r4
 80040ca:	f000 fb85 	bl	80047d8 <_sbrk_r>
 80040ce:	3001      	adds	r0, #1
 80040d0:	d1f2      	bne.n	80040b8 <sbrk_aligned+0x24>
 80040d2:	e7ef      	b.n	80040b4 <sbrk_aligned+0x20>
 80040d4:	200002b8 	.word	0x200002b8

080040d8 <_malloc_r>:
 80040d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040da:	2203      	movs	r2, #3
 80040dc:	1ccb      	adds	r3, r1, #3
 80040de:	4393      	bics	r3, r2
 80040e0:	3308      	adds	r3, #8
 80040e2:	0005      	movs	r5, r0
 80040e4:	001f      	movs	r7, r3
 80040e6:	2b0c      	cmp	r3, #12
 80040e8:	d234      	bcs.n	8004154 <_malloc_r+0x7c>
 80040ea:	270c      	movs	r7, #12
 80040ec:	42b9      	cmp	r1, r7
 80040ee:	d833      	bhi.n	8004158 <_malloc_r+0x80>
 80040f0:	0028      	movs	r0, r5
 80040f2:	f000 f871 	bl	80041d8 <__malloc_lock>
 80040f6:	4e37      	ldr	r6, [pc, #220]	@ (80041d4 <_malloc_r+0xfc>)
 80040f8:	6833      	ldr	r3, [r6, #0]
 80040fa:	001c      	movs	r4, r3
 80040fc:	2c00      	cmp	r4, #0
 80040fe:	d12f      	bne.n	8004160 <_malloc_r+0x88>
 8004100:	0039      	movs	r1, r7
 8004102:	0028      	movs	r0, r5
 8004104:	f7ff ffc6 	bl	8004094 <sbrk_aligned>
 8004108:	0004      	movs	r4, r0
 800410a:	1c43      	adds	r3, r0, #1
 800410c:	d15f      	bne.n	80041ce <_malloc_r+0xf6>
 800410e:	6834      	ldr	r4, [r6, #0]
 8004110:	9400      	str	r4, [sp, #0]
 8004112:	9b00      	ldr	r3, [sp, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d14a      	bne.n	80041ae <_malloc_r+0xd6>
 8004118:	2c00      	cmp	r4, #0
 800411a:	d052      	beq.n	80041c2 <_malloc_r+0xea>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	0028      	movs	r0, r5
 8004120:	18e3      	adds	r3, r4, r3
 8004122:	9900      	ldr	r1, [sp, #0]
 8004124:	9301      	str	r3, [sp, #4]
 8004126:	f000 fb57 	bl	80047d8 <_sbrk_r>
 800412a:	9b01      	ldr	r3, [sp, #4]
 800412c:	4283      	cmp	r3, r0
 800412e:	d148      	bne.n	80041c2 <_malloc_r+0xea>
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	0028      	movs	r0, r5
 8004134:	1aff      	subs	r7, r7, r3
 8004136:	0039      	movs	r1, r7
 8004138:	f7ff ffac 	bl	8004094 <sbrk_aligned>
 800413c:	3001      	adds	r0, #1
 800413e:	d040      	beq.n	80041c2 <_malloc_r+0xea>
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	19db      	adds	r3, r3, r7
 8004144:	6023      	str	r3, [r4, #0]
 8004146:	6833      	ldr	r3, [r6, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	2a00      	cmp	r2, #0
 800414c:	d133      	bne.n	80041b6 <_malloc_r+0xde>
 800414e:	9b00      	ldr	r3, [sp, #0]
 8004150:	6033      	str	r3, [r6, #0]
 8004152:	e019      	b.n	8004188 <_malloc_r+0xb0>
 8004154:	2b00      	cmp	r3, #0
 8004156:	dac9      	bge.n	80040ec <_malloc_r+0x14>
 8004158:	230c      	movs	r3, #12
 800415a:	602b      	str	r3, [r5, #0]
 800415c:	2000      	movs	r0, #0
 800415e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004160:	6821      	ldr	r1, [r4, #0]
 8004162:	1bc9      	subs	r1, r1, r7
 8004164:	d420      	bmi.n	80041a8 <_malloc_r+0xd0>
 8004166:	290b      	cmp	r1, #11
 8004168:	d90a      	bls.n	8004180 <_malloc_r+0xa8>
 800416a:	19e2      	adds	r2, r4, r7
 800416c:	6027      	str	r7, [r4, #0]
 800416e:	42a3      	cmp	r3, r4
 8004170:	d104      	bne.n	800417c <_malloc_r+0xa4>
 8004172:	6032      	str	r2, [r6, #0]
 8004174:	6863      	ldr	r3, [r4, #4]
 8004176:	6011      	str	r1, [r2, #0]
 8004178:	6053      	str	r3, [r2, #4]
 800417a:	e005      	b.n	8004188 <_malloc_r+0xb0>
 800417c:	605a      	str	r2, [r3, #4]
 800417e:	e7f9      	b.n	8004174 <_malloc_r+0x9c>
 8004180:	6862      	ldr	r2, [r4, #4]
 8004182:	42a3      	cmp	r3, r4
 8004184:	d10e      	bne.n	80041a4 <_malloc_r+0xcc>
 8004186:	6032      	str	r2, [r6, #0]
 8004188:	0028      	movs	r0, r5
 800418a:	f000 f82d 	bl	80041e8 <__malloc_unlock>
 800418e:	0020      	movs	r0, r4
 8004190:	2207      	movs	r2, #7
 8004192:	300b      	adds	r0, #11
 8004194:	1d23      	adds	r3, r4, #4
 8004196:	4390      	bics	r0, r2
 8004198:	1ac2      	subs	r2, r0, r3
 800419a:	4298      	cmp	r0, r3
 800419c:	d0df      	beq.n	800415e <_malloc_r+0x86>
 800419e:	1a1b      	subs	r3, r3, r0
 80041a0:	50a3      	str	r3, [r4, r2]
 80041a2:	e7dc      	b.n	800415e <_malloc_r+0x86>
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	e7ef      	b.n	8004188 <_malloc_r+0xb0>
 80041a8:	0023      	movs	r3, r4
 80041aa:	6864      	ldr	r4, [r4, #4]
 80041ac:	e7a6      	b.n	80040fc <_malloc_r+0x24>
 80041ae:	9c00      	ldr	r4, [sp, #0]
 80041b0:	6863      	ldr	r3, [r4, #4]
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	e7ad      	b.n	8004112 <_malloc_r+0x3a>
 80041b6:	001a      	movs	r2, r3
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	42a3      	cmp	r3, r4
 80041bc:	d1fb      	bne.n	80041b6 <_malloc_r+0xde>
 80041be:	2300      	movs	r3, #0
 80041c0:	e7da      	b.n	8004178 <_malloc_r+0xa0>
 80041c2:	230c      	movs	r3, #12
 80041c4:	0028      	movs	r0, r5
 80041c6:	602b      	str	r3, [r5, #0]
 80041c8:	f000 f80e 	bl	80041e8 <__malloc_unlock>
 80041cc:	e7c6      	b.n	800415c <_malloc_r+0x84>
 80041ce:	6007      	str	r7, [r0, #0]
 80041d0:	e7da      	b.n	8004188 <_malloc_r+0xb0>
 80041d2:	46c0      	nop			@ (mov r8, r8)
 80041d4:	200002bc 	.word	0x200002bc

080041d8 <__malloc_lock>:
 80041d8:	b510      	push	{r4, lr}
 80041da:	4802      	ldr	r0, [pc, #8]	@ (80041e4 <__malloc_lock+0xc>)
 80041dc:	f7ff ff0e 	bl	8003ffc <__retarget_lock_acquire_recursive>
 80041e0:	bd10      	pop	{r4, pc}
 80041e2:	46c0      	nop			@ (mov r8, r8)
 80041e4:	200002b4 	.word	0x200002b4

080041e8 <__malloc_unlock>:
 80041e8:	b510      	push	{r4, lr}
 80041ea:	4802      	ldr	r0, [pc, #8]	@ (80041f4 <__malloc_unlock+0xc>)
 80041ec:	f7ff ff07 	bl	8003ffe <__retarget_lock_release_recursive>
 80041f0:	bd10      	pop	{r4, pc}
 80041f2:	46c0      	nop			@ (mov r8, r8)
 80041f4:	200002b4 	.word	0x200002b4

080041f8 <__ssputs_r>:
 80041f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041fa:	688e      	ldr	r6, [r1, #8]
 80041fc:	b085      	sub	sp, #20
 80041fe:	001f      	movs	r7, r3
 8004200:	000c      	movs	r4, r1
 8004202:	680b      	ldr	r3, [r1, #0]
 8004204:	9002      	str	r0, [sp, #8]
 8004206:	9203      	str	r2, [sp, #12]
 8004208:	42be      	cmp	r6, r7
 800420a:	d830      	bhi.n	800426e <__ssputs_r+0x76>
 800420c:	210c      	movs	r1, #12
 800420e:	5e62      	ldrsh	r2, [r4, r1]
 8004210:	2190      	movs	r1, #144	@ 0x90
 8004212:	00c9      	lsls	r1, r1, #3
 8004214:	420a      	tst	r2, r1
 8004216:	d028      	beq.n	800426a <__ssputs_r+0x72>
 8004218:	2003      	movs	r0, #3
 800421a:	6921      	ldr	r1, [r4, #16]
 800421c:	1a5b      	subs	r3, r3, r1
 800421e:	9301      	str	r3, [sp, #4]
 8004220:	6963      	ldr	r3, [r4, #20]
 8004222:	4343      	muls	r3, r0
 8004224:	9801      	ldr	r0, [sp, #4]
 8004226:	0fdd      	lsrs	r5, r3, #31
 8004228:	18ed      	adds	r5, r5, r3
 800422a:	1c7b      	adds	r3, r7, #1
 800422c:	181b      	adds	r3, r3, r0
 800422e:	106d      	asrs	r5, r5, #1
 8004230:	42ab      	cmp	r3, r5
 8004232:	d900      	bls.n	8004236 <__ssputs_r+0x3e>
 8004234:	001d      	movs	r5, r3
 8004236:	0552      	lsls	r2, r2, #21
 8004238:	d528      	bpl.n	800428c <__ssputs_r+0x94>
 800423a:	0029      	movs	r1, r5
 800423c:	9802      	ldr	r0, [sp, #8]
 800423e:	f7ff ff4b 	bl	80040d8 <_malloc_r>
 8004242:	1e06      	subs	r6, r0, #0
 8004244:	d02c      	beq.n	80042a0 <__ssputs_r+0xa8>
 8004246:	9a01      	ldr	r2, [sp, #4]
 8004248:	6921      	ldr	r1, [r4, #16]
 800424a:	f000 fae2 	bl	8004812 <memcpy>
 800424e:	89a2      	ldrh	r2, [r4, #12]
 8004250:	4b18      	ldr	r3, [pc, #96]	@ (80042b4 <__ssputs_r+0xbc>)
 8004252:	401a      	ands	r2, r3
 8004254:	2380      	movs	r3, #128	@ 0x80
 8004256:	4313      	orrs	r3, r2
 8004258:	81a3      	strh	r3, [r4, #12]
 800425a:	9b01      	ldr	r3, [sp, #4]
 800425c:	6126      	str	r6, [r4, #16]
 800425e:	18f6      	adds	r6, r6, r3
 8004260:	6026      	str	r6, [r4, #0]
 8004262:	003e      	movs	r6, r7
 8004264:	6165      	str	r5, [r4, #20]
 8004266:	1aed      	subs	r5, r5, r3
 8004268:	60a5      	str	r5, [r4, #8]
 800426a:	42be      	cmp	r6, r7
 800426c:	d900      	bls.n	8004270 <__ssputs_r+0x78>
 800426e:	003e      	movs	r6, r7
 8004270:	0032      	movs	r2, r6
 8004272:	9903      	ldr	r1, [sp, #12]
 8004274:	6820      	ldr	r0, [r4, #0]
 8004276:	f000 fa9b 	bl	80047b0 <memmove>
 800427a:	2000      	movs	r0, #0
 800427c:	68a3      	ldr	r3, [r4, #8]
 800427e:	1b9b      	subs	r3, r3, r6
 8004280:	60a3      	str	r3, [r4, #8]
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	199b      	adds	r3, r3, r6
 8004286:	6023      	str	r3, [r4, #0]
 8004288:	b005      	add	sp, #20
 800428a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800428c:	002a      	movs	r2, r5
 800428e:	9802      	ldr	r0, [sp, #8]
 8004290:	f000 fac8 	bl	8004824 <_realloc_r>
 8004294:	1e06      	subs	r6, r0, #0
 8004296:	d1e0      	bne.n	800425a <__ssputs_r+0x62>
 8004298:	6921      	ldr	r1, [r4, #16]
 800429a:	9802      	ldr	r0, [sp, #8]
 800429c:	f7ff feb0 	bl	8004000 <_free_r>
 80042a0:	230c      	movs	r3, #12
 80042a2:	2001      	movs	r0, #1
 80042a4:	9a02      	ldr	r2, [sp, #8]
 80042a6:	4240      	negs	r0, r0
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	89a2      	ldrh	r2, [r4, #12]
 80042ac:	3334      	adds	r3, #52	@ 0x34
 80042ae:	4313      	orrs	r3, r2
 80042b0:	81a3      	strh	r3, [r4, #12]
 80042b2:	e7e9      	b.n	8004288 <__ssputs_r+0x90>
 80042b4:	fffffb7f 	.word	0xfffffb7f

080042b8 <_svfiprintf_r>:
 80042b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ba:	b0a1      	sub	sp, #132	@ 0x84
 80042bc:	9003      	str	r0, [sp, #12]
 80042be:	001d      	movs	r5, r3
 80042c0:	898b      	ldrh	r3, [r1, #12]
 80042c2:	000f      	movs	r7, r1
 80042c4:	0016      	movs	r6, r2
 80042c6:	061b      	lsls	r3, r3, #24
 80042c8:	d511      	bpl.n	80042ee <_svfiprintf_r+0x36>
 80042ca:	690b      	ldr	r3, [r1, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10e      	bne.n	80042ee <_svfiprintf_r+0x36>
 80042d0:	2140      	movs	r1, #64	@ 0x40
 80042d2:	f7ff ff01 	bl	80040d8 <_malloc_r>
 80042d6:	6038      	str	r0, [r7, #0]
 80042d8:	6138      	str	r0, [r7, #16]
 80042da:	2800      	cmp	r0, #0
 80042dc:	d105      	bne.n	80042ea <_svfiprintf_r+0x32>
 80042de:	230c      	movs	r3, #12
 80042e0:	9a03      	ldr	r2, [sp, #12]
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	2001      	movs	r0, #1
 80042e6:	4240      	negs	r0, r0
 80042e8:	e0cf      	b.n	800448a <_svfiprintf_r+0x1d2>
 80042ea:	2340      	movs	r3, #64	@ 0x40
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	2300      	movs	r3, #0
 80042f0:	ac08      	add	r4, sp, #32
 80042f2:	6163      	str	r3, [r4, #20]
 80042f4:	3320      	adds	r3, #32
 80042f6:	7663      	strb	r3, [r4, #25]
 80042f8:	3310      	adds	r3, #16
 80042fa:	76a3      	strb	r3, [r4, #26]
 80042fc:	9507      	str	r5, [sp, #28]
 80042fe:	0035      	movs	r5, r6
 8004300:	782b      	ldrb	r3, [r5, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <_svfiprintf_r+0x52>
 8004306:	2b25      	cmp	r3, #37	@ 0x25
 8004308:	d148      	bne.n	800439c <_svfiprintf_r+0xe4>
 800430a:	1bab      	subs	r3, r5, r6
 800430c:	9305      	str	r3, [sp, #20]
 800430e:	42b5      	cmp	r5, r6
 8004310:	d00b      	beq.n	800432a <_svfiprintf_r+0x72>
 8004312:	0032      	movs	r2, r6
 8004314:	0039      	movs	r1, r7
 8004316:	9803      	ldr	r0, [sp, #12]
 8004318:	f7ff ff6e 	bl	80041f8 <__ssputs_r>
 800431c:	3001      	adds	r0, #1
 800431e:	d100      	bne.n	8004322 <_svfiprintf_r+0x6a>
 8004320:	e0ae      	b.n	8004480 <_svfiprintf_r+0x1c8>
 8004322:	6963      	ldr	r3, [r4, #20]
 8004324:	9a05      	ldr	r2, [sp, #20]
 8004326:	189b      	adds	r3, r3, r2
 8004328:	6163      	str	r3, [r4, #20]
 800432a:	782b      	ldrb	r3, [r5, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d100      	bne.n	8004332 <_svfiprintf_r+0x7a>
 8004330:	e0a6      	b.n	8004480 <_svfiprintf_r+0x1c8>
 8004332:	2201      	movs	r2, #1
 8004334:	2300      	movs	r3, #0
 8004336:	4252      	negs	r2, r2
 8004338:	6062      	str	r2, [r4, #4]
 800433a:	a904      	add	r1, sp, #16
 800433c:	3254      	adds	r2, #84	@ 0x54
 800433e:	1852      	adds	r2, r2, r1
 8004340:	1c6e      	adds	r6, r5, #1
 8004342:	6023      	str	r3, [r4, #0]
 8004344:	60e3      	str	r3, [r4, #12]
 8004346:	60a3      	str	r3, [r4, #8]
 8004348:	7013      	strb	r3, [r2, #0]
 800434a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800434c:	4b54      	ldr	r3, [pc, #336]	@ (80044a0 <_svfiprintf_r+0x1e8>)
 800434e:	2205      	movs	r2, #5
 8004350:	0018      	movs	r0, r3
 8004352:	7831      	ldrb	r1, [r6, #0]
 8004354:	9305      	str	r3, [sp, #20]
 8004356:	f000 fa51 	bl	80047fc <memchr>
 800435a:	1c75      	adds	r5, r6, #1
 800435c:	2800      	cmp	r0, #0
 800435e:	d11f      	bne.n	80043a0 <_svfiprintf_r+0xe8>
 8004360:	6822      	ldr	r2, [r4, #0]
 8004362:	06d3      	lsls	r3, r2, #27
 8004364:	d504      	bpl.n	8004370 <_svfiprintf_r+0xb8>
 8004366:	2353      	movs	r3, #83	@ 0x53
 8004368:	a904      	add	r1, sp, #16
 800436a:	185b      	adds	r3, r3, r1
 800436c:	2120      	movs	r1, #32
 800436e:	7019      	strb	r1, [r3, #0]
 8004370:	0713      	lsls	r3, r2, #28
 8004372:	d504      	bpl.n	800437e <_svfiprintf_r+0xc6>
 8004374:	2353      	movs	r3, #83	@ 0x53
 8004376:	a904      	add	r1, sp, #16
 8004378:	185b      	adds	r3, r3, r1
 800437a:	212b      	movs	r1, #43	@ 0x2b
 800437c:	7019      	strb	r1, [r3, #0]
 800437e:	7833      	ldrb	r3, [r6, #0]
 8004380:	2b2a      	cmp	r3, #42	@ 0x2a
 8004382:	d016      	beq.n	80043b2 <_svfiprintf_r+0xfa>
 8004384:	0035      	movs	r5, r6
 8004386:	2100      	movs	r1, #0
 8004388:	200a      	movs	r0, #10
 800438a:	68e3      	ldr	r3, [r4, #12]
 800438c:	782a      	ldrb	r2, [r5, #0]
 800438e:	1c6e      	adds	r6, r5, #1
 8004390:	3a30      	subs	r2, #48	@ 0x30
 8004392:	2a09      	cmp	r2, #9
 8004394:	d950      	bls.n	8004438 <_svfiprintf_r+0x180>
 8004396:	2900      	cmp	r1, #0
 8004398:	d111      	bne.n	80043be <_svfiprintf_r+0x106>
 800439a:	e017      	b.n	80043cc <_svfiprintf_r+0x114>
 800439c:	3501      	adds	r5, #1
 800439e:	e7af      	b.n	8004300 <_svfiprintf_r+0x48>
 80043a0:	9b05      	ldr	r3, [sp, #20]
 80043a2:	6822      	ldr	r2, [r4, #0]
 80043a4:	1ac0      	subs	r0, r0, r3
 80043a6:	2301      	movs	r3, #1
 80043a8:	4083      	lsls	r3, r0
 80043aa:	4313      	orrs	r3, r2
 80043ac:	002e      	movs	r6, r5
 80043ae:	6023      	str	r3, [r4, #0]
 80043b0:	e7cc      	b.n	800434c <_svfiprintf_r+0x94>
 80043b2:	9b07      	ldr	r3, [sp, #28]
 80043b4:	1d19      	adds	r1, r3, #4
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	9107      	str	r1, [sp, #28]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	db01      	blt.n	80043c2 <_svfiprintf_r+0x10a>
 80043be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043c0:	e004      	b.n	80043cc <_svfiprintf_r+0x114>
 80043c2:	425b      	negs	r3, r3
 80043c4:	60e3      	str	r3, [r4, #12]
 80043c6:	2302      	movs	r3, #2
 80043c8:	4313      	orrs	r3, r2
 80043ca:	6023      	str	r3, [r4, #0]
 80043cc:	782b      	ldrb	r3, [r5, #0]
 80043ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80043d0:	d10c      	bne.n	80043ec <_svfiprintf_r+0x134>
 80043d2:	786b      	ldrb	r3, [r5, #1]
 80043d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80043d6:	d134      	bne.n	8004442 <_svfiprintf_r+0x18a>
 80043d8:	9b07      	ldr	r3, [sp, #28]
 80043da:	3502      	adds	r5, #2
 80043dc:	1d1a      	adds	r2, r3, #4
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	9207      	str	r2, [sp, #28]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	da01      	bge.n	80043ea <_svfiprintf_r+0x132>
 80043e6:	2301      	movs	r3, #1
 80043e8:	425b      	negs	r3, r3
 80043ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80043ec:	4e2d      	ldr	r6, [pc, #180]	@ (80044a4 <_svfiprintf_r+0x1ec>)
 80043ee:	2203      	movs	r2, #3
 80043f0:	0030      	movs	r0, r6
 80043f2:	7829      	ldrb	r1, [r5, #0]
 80043f4:	f000 fa02 	bl	80047fc <memchr>
 80043f8:	2800      	cmp	r0, #0
 80043fa:	d006      	beq.n	800440a <_svfiprintf_r+0x152>
 80043fc:	2340      	movs	r3, #64	@ 0x40
 80043fe:	1b80      	subs	r0, r0, r6
 8004400:	4083      	lsls	r3, r0
 8004402:	6822      	ldr	r2, [r4, #0]
 8004404:	3501      	adds	r5, #1
 8004406:	4313      	orrs	r3, r2
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	7829      	ldrb	r1, [r5, #0]
 800440c:	2206      	movs	r2, #6
 800440e:	4826      	ldr	r0, [pc, #152]	@ (80044a8 <_svfiprintf_r+0x1f0>)
 8004410:	1c6e      	adds	r6, r5, #1
 8004412:	7621      	strb	r1, [r4, #24]
 8004414:	f000 f9f2 	bl	80047fc <memchr>
 8004418:	2800      	cmp	r0, #0
 800441a:	d038      	beq.n	800448e <_svfiprintf_r+0x1d6>
 800441c:	4b23      	ldr	r3, [pc, #140]	@ (80044ac <_svfiprintf_r+0x1f4>)
 800441e:	2b00      	cmp	r3, #0
 8004420:	d122      	bne.n	8004468 <_svfiprintf_r+0x1b0>
 8004422:	2207      	movs	r2, #7
 8004424:	9b07      	ldr	r3, [sp, #28]
 8004426:	3307      	adds	r3, #7
 8004428:	4393      	bics	r3, r2
 800442a:	3308      	adds	r3, #8
 800442c:	9307      	str	r3, [sp, #28]
 800442e:	6963      	ldr	r3, [r4, #20]
 8004430:	9a04      	ldr	r2, [sp, #16]
 8004432:	189b      	adds	r3, r3, r2
 8004434:	6163      	str	r3, [r4, #20]
 8004436:	e762      	b.n	80042fe <_svfiprintf_r+0x46>
 8004438:	4343      	muls	r3, r0
 800443a:	0035      	movs	r5, r6
 800443c:	2101      	movs	r1, #1
 800443e:	189b      	adds	r3, r3, r2
 8004440:	e7a4      	b.n	800438c <_svfiprintf_r+0xd4>
 8004442:	2300      	movs	r3, #0
 8004444:	200a      	movs	r0, #10
 8004446:	0019      	movs	r1, r3
 8004448:	3501      	adds	r5, #1
 800444a:	6063      	str	r3, [r4, #4]
 800444c:	782a      	ldrb	r2, [r5, #0]
 800444e:	1c6e      	adds	r6, r5, #1
 8004450:	3a30      	subs	r2, #48	@ 0x30
 8004452:	2a09      	cmp	r2, #9
 8004454:	d903      	bls.n	800445e <_svfiprintf_r+0x1a6>
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0c8      	beq.n	80043ec <_svfiprintf_r+0x134>
 800445a:	9109      	str	r1, [sp, #36]	@ 0x24
 800445c:	e7c6      	b.n	80043ec <_svfiprintf_r+0x134>
 800445e:	4341      	muls	r1, r0
 8004460:	0035      	movs	r5, r6
 8004462:	2301      	movs	r3, #1
 8004464:	1889      	adds	r1, r1, r2
 8004466:	e7f1      	b.n	800444c <_svfiprintf_r+0x194>
 8004468:	aa07      	add	r2, sp, #28
 800446a:	9200      	str	r2, [sp, #0]
 800446c:	0021      	movs	r1, r4
 800446e:	003a      	movs	r2, r7
 8004470:	4b0f      	ldr	r3, [pc, #60]	@ (80044b0 <_svfiprintf_r+0x1f8>)
 8004472:	9803      	ldr	r0, [sp, #12]
 8004474:	e000      	b.n	8004478 <_svfiprintf_r+0x1c0>
 8004476:	bf00      	nop
 8004478:	9004      	str	r0, [sp, #16]
 800447a:	9b04      	ldr	r3, [sp, #16]
 800447c:	3301      	adds	r3, #1
 800447e:	d1d6      	bne.n	800442e <_svfiprintf_r+0x176>
 8004480:	89bb      	ldrh	r3, [r7, #12]
 8004482:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004484:	065b      	lsls	r3, r3, #25
 8004486:	d500      	bpl.n	800448a <_svfiprintf_r+0x1d2>
 8004488:	e72c      	b.n	80042e4 <_svfiprintf_r+0x2c>
 800448a:	b021      	add	sp, #132	@ 0x84
 800448c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800448e:	aa07      	add	r2, sp, #28
 8004490:	9200      	str	r2, [sp, #0]
 8004492:	0021      	movs	r1, r4
 8004494:	003a      	movs	r2, r7
 8004496:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <_svfiprintf_r+0x1f8>)
 8004498:	9803      	ldr	r0, [sp, #12]
 800449a:	f000 f87b 	bl	8004594 <_printf_i>
 800449e:	e7eb      	b.n	8004478 <_svfiprintf_r+0x1c0>
 80044a0:	0800494c 	.word	0x0800494c
 80044a4:	08004952 	.word	0x08004952
 80044a8:	08004956 	.word	0x08004956
 80044ac:	00000000 	.word	0x00000000
 80044b0:	080041f9 	.word	0x080041f9

080044b4 <_printf_common>:
 80044b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044b6:	0016      	movs	r6, r2
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	688a      	ldr	r2, [r1, #8]
 80044bc:	690b      	ldr	r3, [r1, #16]
 80044be:	000c      	movs	r4, r1
 80044c0:	9000      	str	r0, [sp, #0]
 80044c2:	4293      	cmp	r3, r2
 80044c4:	da00      	bge.n	80044c8 <_printf_common+0x14>
 80044c6:	0013      	movs	r3, r2
 80044c8:	0022      	movs	r2, r4
 80044ca:	6033      	str	r3, [r6, #0]
 80044cc:	3243      	adds	r2, #67	@ 0x43
 80044ce:	7812      	ldrb	r2, [r2, #0]
 80044d0:	2a00      	cmp	r2, #0
 80044d2:	d001      	beq.n	80044d8 <_printf_common+0x24>
 80044d4:	3301      	adds	r3, #1
 80044d6:	6033      	str	r3, [r6, #0]
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	069b      	lsls	r3, r3, #26
 80044dc:	d502      	bpl.n	80044e4 <_printf_common+0x30>
 80044de:	6833      	ldr	r3, [r6, #0]
 80044e0:	3302      	adds	r3, #2
 80044e2:	6033      	str	r3, [r6, #0]
 80044e4:	6822      	ldr	r2, [r4, #0]
 80044e6:	2306      	movs	r3, #6
 80044e8:	0015      	movs	r5, r2
 80044ea:	401d      	ands	r5, r3
 80044ec:	421a      	tst	r2, r3
 80044ee:	d027      	beq.n	8004540 <_printf_common+0x8c>
 80044f0:	0023      	movs	r3, r4
 80044f2:	3343      	adds	r3, #67	@ 0x43
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	1e5a      	subs	r2, r3, #1
 80044f8:	4193      	sbcs	r3, r2
 80044fa:	6822      	ldr	r2, [r4, #0]
 80044fc:	0692      	lsls	r2, r2, #26
 80044fe:	d430      	bmi.n	8004562 <_printf_common+0xae>
 8004500:	0022      	movs	r2, r4
 8004502:	9901      	ldr	r1, [sp, #4]
 8004504:	9800      	ldr	r0, [sp, #0]
 8004506:	9d08      	ldr	r5, [sp, #32]
 8004508:	3243      	adds	r2, #67	@ 0x43
 800450a:	47a8      	blx	r5
 800450c:	3001      	adds	r0, #1
 800450e:	d025      	beq.n	800455c <_printf_common+0xa8>
 8004510:	2206      	movs	r2, #6
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	2500      	movs	r5, #0
 8004516:	4013      	ands	r3, r2
 8004518:	2b04      	cmp	r3, #4
 800451a:	d105      	bne.n	8004528 <_printf_common+0x74>
 800451c:	6833      	ldr	r3, [r6, #0]
 800451e:	68e5      	ldr	r5, [r4, #12]
 8004520:	1aed      	subs	r5, r5, r3
 8004522:	43eb      	mvns	r3, r5
 8004524:	17db      	asrs	r3, r3, #31
 8004526:	401d      	ands	r5, r3
 8004528:	68a3      	ldr	r3, [r4, #8]
 800452a:	6922      	ldr	r2, [r4, #16]
 800452c:	4293      	cmp	r3, r2
 800452e:	dd01      	ble.n	8004534 <_printf_common+0x80>
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	18ed      	adds	r5, r5, r3
 8004534:	2600      	movs	r6, #0
 8004536:	42b5      	cmp	r5, r6
 8004538:	d120      	bne.n	800457c <_printf_common+0xc8>
 800453a:	2000      	movs	r0, #0
 800453c:	e010      	b.n	8004560 <_printf_common+0xac>
 800453e:	3501      	adds	r5, #1
 8004540:	68e3      	ldr	r3, [r4, #12]
 8004542:	6832      	ldr	r2, [r6, #0]
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	42ab      	cmp	r3, r5
 8004548:	ddd2      	ble.n	80044f0 <_printf_common+0x3c>
 800454a:	0022      	movs	r2, r4
 800454c:	2301      	movs	r3, #1
 800454e:	9901      	ldr	r1, [sp, #4]
 8004550:	9800      	ldr	r0, [sp, #0]
 8004552:	9f08      	ldr	r7, [sp, #32]
 8004554:	3219      	adds	r2, #25
 8004556:	47b8      	blx	r7
 8004558:	3001      	adds	r0, #1
 800455a:	d1f0      	bne.n	800453e <_printf_common+0x8a>
 800455c:	2001      	movs	r0, #1
 800455e:	4240      	negs	r0, r0
 8004560:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004562:	2030      	movs	r0, #48	@ 0x30
 8004564:	18e1      	adds	r1, r4, r3
 8004566:	3143      	adds	r1, #67	@ 0x43
 8004568:	7008      	strb	r0, [r1, #0]
 800456a:	0021      	movs	r1, r4
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	3145      	adds	r1, #69	@ 0x45
 8004570:	7809      	ldrb	r1, [r1, #0]
 8004572:	18a2      	adds	r2, r4, r2
 8004574:	3243      	adds	r2, #67	@ 0x43
 8004576:	3302      	adds	r3, #2
 8004578:	7011      	strb	r1, [r2, #0]
 800457a:	e7c1      	b.n	8004500 <_printf_common+0x4c>
 800457c:	0022      	movs	r2, r4
 800457e:	2301      	movs	r3, #1
 8004580:	9901      	ldr	r1, [sp, #4]
 8004582:	9800      	ldr	r0, [sp, #0]
 8004584:	9f08      	ldr	r7, [sp, #32]
 8004586:	321a      	adds	r2, #26
 8004588:	47b8      	blx	r7
 800458a:	3001      	adds	r0, #1
 800458c:	d0e6      	beq.n	800455c <_printf_common+0xa8>
 800458e:	3601      	adds	r6, #1
 8004590:	e7d1      	b.n	8004536 <_printf_common+0x82>
	...

08004594 <_printf_i>:
 8004594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004596:	b08b      	sub	sp, #44	@ 0x2c
 8004598:	9206      	str	r2, [sp, #24]
 800459a:	000a      	movs	r2, r1
 800459c:	3243      	adds	r2, #67	@ 0x43
 800459e:	9307      	str	r3, [sp, #28]
 80045a0:	9005      	str	r0, [sp, #20]
 80045a2:	9203      	str	r2, [sp, #12]
 80045a4:	7e0a      	ldrb	r2, [r1, #24]
 80045a6:	000c      	movs	r4, r1
 80045a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80045aa:	2a78      	cmp	r2, #120	@ 0x78
 80045ac:	d809      	bhi.n	80045c2 <_printf_i+0x2e>
 80045ae:	2a62      	cmp	r2, #98	@ 0x62
 80045b0:	d80b      	bhi.n	80045ca <_printf_i+0x36>
 80045b2:	2a00      	cmp	r2, #0
 80045b4:	d100      	bne.n	80045b8 <_printf_i+0x24>
 80045b6:	e0bc      	b.n	8004732 <_printf_i+0x19e>
 80045b8:	497b      	ldr	r1, [pc, #492]	@ (80047a8 <_printf_i+0x214>)
 80045ba:	9104      	str	r1, [sp, #16]
 80045bc:	2a58      	cmp	r2, #88	@ 0x58
 80045be:	d100      	bne.n	80045c2 <_printf_i+0x2e>
 80045c0:	e090      	b.n	80046e4 <_printf_i+0x150>
 80045c2:	0025      	movs	r5, r4
 80045c4:	3542      	adds	r5, #66	@ 0x42
 80045c6:	702a      	strb	r2, [r5, #0]
 80045c8:	e022      	b.n	8004610 <_printf_i+0x7c>
 80045ca:	0010      	movs	r0, r2
 80045cc:	3863      	subs	r0, #99	@ 0x63
 80045ce:	2815      	cmp	r0, #21
 80045d0:	d8f7      	bhi.n	80045c2 <_printf_i+0x2e>
 80045d2:	f7fb fd97 	bl	8000104 <__gnu_thumb1_case_shi>
 80045d6:	0016      	.short	0x0016
 80045d8:	fff6001f 	.word	0xfff6001f
 80045dc:	fff6fff6 	.word	0xfff6fff6
 80045e0:	001ffff6 	.word	0x001ffff6
 80045e4:	fff6fff6 	.word	0xfff6fff6
 80045e8:	fff6fff6 	.word	0xfff6fff6
 80045ec:	003600a1 	.word	0x003600a1
 80045f0:	fff60080 	.word	0xfff60080
 80045f4:	00b2fff6 	.word	0x00b2fff6
 80045f8:	0036fff6 	.word	0x0036fff6
 80045fc:	fff6fff6 	.word	0xfff6fff6
 8004600:	0084      	.short	0x0084
 8004602:	0025      	movs	r5, r4
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	3542      	adds	r5, #66	@ 0x42
 8004608:	1d11      	adds	r1, r2, #4
 800460a:	6019      	str	r1, [r3, #0]
 800460c:	6813      	ldr	r3, [r2, #0]
 800460e:	702b      	strb	r3, [r5, #0]
 8004610:	2301      	movs	r3, #1
 8004612:	e0a0      	b.n	8004756 <_printf_i+0x1c2>
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	6809      	ldr	r1, [r1, #0]
 8004618:	1d02      	adds	r2, r0, #4
 800461a:	060d      	lsls	r5, r1, #24
 800461c:	d50b      	bpl.n	8004636 <_printf_i+0xa2>
 800461e:	6806      	ldr	r6, [r0, #0]
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	2e00      	cmp	r6, #0
 8004624:	da03      	bge.n	800462e <_printf_i+0x9a>
 8004626:	232d      	movs	r3, #45	@ 0x2d
 8004628:	9a03      	ldr	r2, [sp, #12]
 800462a:	4276      	negs	r6, r6
 800462c:	7013      	strb	r3, [r2, #0]
 800462e:	4b5e      	ldr	r3, [pc, #376]	@ (80047a8 <_printf_i+0x214>)
 8004630:	270a      	movs	r7, #10
 8004632:	9304      	str	r3, [sp, #16]
 8004634:	e018      	b.n	8004668 <_printf_i+0xd4>
 8004636:	6806      	ldr	r6, [r0, #0]
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	0649      	lsls	r1, r1, #25
 800463c:	d5f1      	bpl.n	8004622 <_printf_i+0x8e>
 800463e:	b236      	sxth	r6, r6
 8004640:	e7ef      	b.n	8004622 <_printf_i+0x8e>
 8004642:	6808      	ldr	r0, [r1, #0]
 8004644:	6819      	ldr	r1, [r3, #0]
 8004646:	c940      	ldmia	r1!, {r6}
 8004648:	0605      	lsls	r5, r0, #24
 800464a:	d402      	bmi.n	8004652 <_printf_i+0xbe>
 800464c:	0640      	lsls	r0, r0, #25
 800464e:	d500      	bpl.n	8004652 <_printf_i+0xbe>
 8004650:	b2b6      	uxth	r6, r6
 8004652:	6019      	str	r1, [r3, #0]
 8004654:	4b54      	ldr	r3, [pc, #336]	@ (80047a8 <_printf_i+0x214>)
 8004656:	270a      	movs	r7, #10
 8004658:	9304      	str	r3, [sp, #16]
 800465a:	2a6f      	cmp	r2, #111	@ 0x6f
 800465c:	d100      	bne.n	8004660 <_printf_i+0xcc>
 800465e:	3f02      	subs	r7, #2
 8004660:	0023      	movs	r3, r4
 8004662:	2200      	movs	r2, #0
 8004664:	3343      	adds	r3, #67	@ 0x43
 8004666:	701a      	strb	r2, [r3, #0]
 8004668:	6863      	ldr	r3, [r4, #4]
 800466a:	60a3      	str	r3, [r4, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	db03      	blt.n	8004678 <_printf_i+0xe4>
 8004670:	2104      	movs	r1, #4
 8004672:	6822      	ldr	r2, [r4, #0]
 8004674:	438a      	bics	r2, r1
 8004676:	6022      	str	r2, [r4, #0]
 8004678:	2e00      	cmp	r6, #0
 800467a:	d102      	bne.n	8004682 <_printf_i+0xee>
 800467c:	9d03      	ldr	r5, [sp, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <_printf_i+0x108>
 8004682:	9d03      	ldr	r5, [sp, #12]
 8004684:	0030      	movs	r0, r6
 8004686:	0039      	movs	r1, r7
 8004688:	f7fb fdcc 	bl	8000224 <__aeabi_uidivmod>
 800468c:	9b04      	ldr	r3, [sp, #16]
 800468e:	3d01      	subs	r5, #1
 8004690:	5c5b      	ldrb	r3, [r3, r1]
 8004692:	702b      	strb	r3, [r5, #0]
 8004694:	0033      	movs	r3, r6
 8004696:	0006      	movs	r6, r0
 8004698:	429f      	cmp	r7, r3
 800469a:	d9f3      	bls.n	8004684 <_printf_i+0xf0>
 800469c:	2f08      	cmp	r7, #8
 800469e:	d109      	bne.n	80046b4 <_printf_i+0x120>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	07db      	lsls	r3, r3, #31
 80046a4:	d506      	bpl.n	80046b4 <_printf_i+0x120>
 80046a6:	6862      	ldr	r2, [r4, #4]
 80046a8:	6923      	ldr	r3, [r4, #16]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	dc02      	bgt.n	80046b4 <_printf_i+0x120>
 80046ae:	2330      	movs	r3, #48	@ 0x30
 80046b0:	3d01      	subs	r5, #1
 80046b2:	702b      	strb	r3, [r5, #0]
 80046b4:	9b03      	ldr	r3, [sp, #12]
 80046b6:	1b5b      	subs	r3, r3, r5
 80046b8:	6123      	str	r3, [r4, #16]
 80046ba:	9b07      	ldr	r3, [sp, #28]
 80046bc:	0021      	movs	r1, r4
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	9805      	ldr	r0, [sp, #20]
 80046c2:	9b06      	ldr	r3, [sp, #24]
 80046c4:	aa09      	add	r2, sp, #36	@ 0x24
 80046c6:	f7ff fef5 	bl	80044b4 <_printf_common>
 80046ca:	3001      	adds	r0, #1
 80046cc:	d148      	bne.n	8004760 <_printf_i+0x1cc>
 80046ce:	2001      	movs	r0, #1
 80046d0:	4240      	negs	r0, r0
 80046d2:	b00b      	add	sp, #44	@ 0x2c
 80046d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046d6:	2220      	movs	r2, #32
 80046d8:	6809      	ldr	r1, [r1, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	6022      	str	r2, [r4, #0]
 80046de:	2278      	movs	r2, #120	@ 0x78
 80046e0:	4932      	ldr	r1, [pc, #200]	@ (80047ac <_printf_i+0x218>)
 80046e2:	9104      	str	r1, [sp, #16]
 80046e4:	0021      	movs	r1, r4
 80046e6:	3145      	adds	r1, #69	@ 0x45
 80046e8:	700a      	strb	r2, [r1, #0]
 80046ea:	6819      	ldr	r1, [r3, #0]
 80046ec:	6822      	ldr	r2, [r4, #0]
 80046ee:	c940      	ldmia	r1!, {r6}
 80046f0:	0610      	lsls	r0, r2, #24
 80046f2:	d402      	bmi.n	80046fa <_printf_i+0x166>
 80046f4:	0650      	lsls	r0, r2, #25
 80046f6:	d500      	bpl.n	80046fa <_printf_i+0x166>
 80046f8:	b2b6      	uxth	r6, r6
 80046fa:	6019      	str	r1, [r3, #0]
 80046fc:	07d3      	lsls	r3, r2, #31
 80046fe:	d502      	bpl.n	8004706 <_printf_i+0x172>
 8004700:	2320      	movs	r3, #32
 8004702:	4313      	orrs	r3, r2
 8004704:	6023      	str	r3, [r4, #0]
 8004706:	2e00      	cmp	r6, #0
 8004708:	d001      	beq.n	800470e <_printf_i+0x17a>
 800470a:	2710      	movs	r7, #16
 800470c:	e7a8      	b.n	8004660 <_printf_i+0xcc>
 800470e:	2220      	movs	r2, #32
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	4393      	bics	r3, r2
 8004714:	6023      	str	r3, [r4, #0]
 8004716:	e7f8      	b.n	800470a <_printf_i+0x176>
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	680d      	ldr	r5, [r1, #0]
 800471c:	1d10      	adds	r0, r2, #4
 800471e:	6949      	ldr	r1, [r1, #20]
 8004720:	6018      	str	r0, [r3, #0]
 8004722:	6813      	ldr	r3, [r2, #0]
 8004724:	062e      	lsls	r6, r5, #24
 8004726:	d501      	bpl.n	800472c <_printf_i+0x198>
 8004728:	6019      	str	r1, [r3, #0]
 800472a:	e002      	b.n	8004732 <_printf_i+0x19e>
 800472c:	066d      	lsls	r5, r5, #25
 800472e:	d5fb      	bpl.n	8004728 <_printf_i+0x194>
 8004730:	8019      	strh	r1, [r3, #0]
 8004732:	2300      	movs	r3, #0
 8004734:	9d03      	ldr	r5, [sp, #12]
 8004736:	6123      	str	r3, [r4, #16]
 8004738:	e7bf      	b.n	80046ba <_printf_i+0x126>
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	1d11      	adds	r1, r2, #4
 800473e:	6019      	str	r1, [r3, #0]
 8004740:	6815      	ldr	r5, [r2, #0]
 8004742:	2100      	movs	r1, #0
 8004744:	0028      	movs	r0, r5
 8004746:	6862      	ldr	r2, [r4, #4]
 8004748:	f000 f858 	bl	80047fc <memchr>
 800474c:	2800      	cmp	r0, #0
 800474e:	d001      	beq.n	8004754 <_printf_i+0x1c0>
 8004750:	1b40      	subs	r0, r0, r5
 8004752:	6060      	str	r0, [r4, #4]
 8004754:	6863      	ldr	r3, [r4, #4]
 8004756:	6123      	str	r3, [r4, #16]
 8004758:	2300      	movs	r3, #0
 800475a:	9a03      	ldr	r2, [sp, #12]
 800475c:	7013      	strb	r3, [r2, #0]
 800475e:	e7ac      	b.n	80046ba <_printf_i+0x126>
 8004760:	002a      	movs	r2, r5
 8004762:	6923      	ldr	r3, [r4, #16]
 8004764:	9906      	ldr	r1, [sp, #24]
 8004766:	9805      	ldr	r0, [sp, #20]
 8004768:	9d07      	ldr	r5, [sp, #28]
 800476a:	47a8      	blx	r5
 800476c:	3001      	adds	r0, #1
 800476e:	d0ae      	beq.n	80046ce <_printf_i+0x13a>
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	079b      	lsls	r3, r3, #30
 8004774:	d415      	bmi.n	80047a2 <_printf_i+0x20e>
 8004776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004778:	68e0      	ldr	r0, [r4, #12]
 800477a:	4298      	cmp	r0, r3
 800477c:	daa9      	bge.n	80046d2 <_printf_i+0x13e>
 800477e:	0018      	movs	r0, r3
 8004780:	e7a7      	b.n	80046d2 <_printf_i+0x13e>
 8004782:	0022      	movs	r2, r4
 8004784:	2301      	movs	r3, #1
 8004786:	9906      	ldr	r1, [sp, #24]
 8004788:	9805      	ldr	r0, [sp, #20]
 800478a:	9e07      	ldr	r6, [sp, #28]
 800478c:	3219      	adds	r2, #25
 800478e:	47b0      	blx	r6
 8004790:	3001      	adds	r0, #1
 8004792:	d09c      	beq.n	80046ce <_printf_i+0x13a>
 8004794:	3501      	adds	r5, #1
 8004796:	68e3      	ldr	r3, [r4, #12]
 8004798:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800479a:	1a9b      	subs	r3, r3, r2
 800479c:	42ab      	cmp	r3, r5
 800479e:	dcf0      	bgt.n	8004782 <_printf_i+0x1ee>
 80047a0:	e7e9      	b.n	8004776 <_printf_i+0x1e2>
 80047a2:	2500      	movs	r5, #0
 80047a4:	e7f7      	b.n	8004796 <_printf_i+0x202>
 80047a6:	46c0      	nop			@ (mov r8, r8)
 80047a8:	0800495d 	.word	0x0800495d
 80047ac:	0800496e 	.word	0x0800496e

080047b0 <memmove>:
 80047b0:	b510      	push	{r4, lr}
 80047b2:	4288      	cmp	r0, r1
 80047b4:	d806      	bhi.n	80047c4 <memmove+0x14>
 80047b6:	2300      	movs	r3, #0
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d008      	beq.n	80047ce <memmove+0x1e>
 80047bc:	5ccc      	ldrb	r4, [r1, r3]
 80047be:	54c4      	strb	r4, [r0, r3]
 80047c0:	3301      	adds	r3, #1
 80047c2:	e7f9      	b.n	80047b8 <memmove+0x8>
 80047c4:	188b      	adds	r3, r1, r2
 80047c6:	4298      	cmp	r0, r3
 80047c8:	d2f5      	bcs.n	80047b6 <memmove+0x6>
 80047ca:	3a01      	subs	r2, #1
 80047cc:	d200      	bcs.n	80047d0 <memmove+0x20>
 80047ce:	bd10      	pop	{r4, pc}
 80047d0:	5c8b      	ldrb	r3, [r1, r2]
 80047d2:	5483      	strb	r3, [r0, r2]
 80047d4:	e7f9      	b.n	80047ca <memmove+0x1a>
	...

080047d8 <_sbrk_r>:
 80047d8:	2300      	movs	r3, #0
 80047da:	b570      	push	{r4, r5, r6, lr}
 80047dc:	4d06      	ldr	r5, [pc, #24]	@ (80047f8 <_sbrk_r+0x20>)
 80047de:	0004      	movs	r4, r0
 80047e0:	0008      	movs	r0, r1
 80047e2:	602b      	str	r3, [r5, #0]
 80047e4:	f7fc f9d6 	bl	8000b94 <_sbrk>
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	d103      	bne.n	80047f4 <_sbrk_r+0x1c>
 80047ec:	682b      	ldr	r3, [r5, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d000      	beq.n	80047f4 <_sbrk_r+0x1c>
 80047f2:	6023      	str	r3, [r4, #0]
 80047f4:	bd70      	pop	{r4, r5, r6, pc}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	200002b0 	.word	0x200002b0

080047fc <memchr>:
 80047fc:	b2c9      	uxtb	r1, r1
 80047fe:	1882      	adds	r2, r0, r2
 8004800:	4290      	cmp	r0, r2
 8004802:	d101      	bne.n	8004808 <memchr+0xc>
 8004804:	2000      	movs	r0, #0
 8004806:	4770      	bx	lr
 8004808:	7803      	ldrb	r3, [r0, #0]
 800480a:	428b      	cmp	r3, r1
 800480c:	d0fb      	beq.n	8004806 <memchr+0xa>
 800480e:	3001      	adds	r0, #1
 8004810:	e7f6      	b.n	8004800 <memchr+0x4>

08004812 <memcpy>:
 8004812:	2300      	movs	r3, #0
 8004814:	b510      	push	{r4, lr}
 8004816:	429a      	cmp	r2, r3
 8004818:	d100      	bne.n	800481c <memcpy+0xa>
 800481a:	bd10      	pop	{r4, pc}
 800481c:	5ccc      	ldrb	r4, [r1, r3]
 800481e:	54c4      	strb	r4, [r0, r3]
 8004820:	3301      	adds	r3, #1
 8004822:	e7f8      	b.n	8004816 <memcpy+0x4>

08004824 <_realloc_r>:
 8004824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004826:	0006      	movs	r6, r0
 8004828:	000c      	movs	r4, r1
 800482a:	0015      	movs	r5, r2
 800482c:	2900      	cmp	r1, #0
 800482e:	d105      	bne.n	800483c <_realloc_r+0x18>
 8004830:	0011      	movs	r1, r2
 8004832:	f7ff fc51 	bl	80040d8 <_malloc_r>
 8004836:	0004      	movs	r4, r0
 8004838:	0020      	movs	r0, r4
 800483a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800483c:	2a00      	cmp	r2, #0
 800483e:	d103      	bne.n	8004848 <_realloc_r+0x24>
 8004840:	f7ff fbde 	bl	8004000 <_free_r>
 8004844:	2400      	movs	r4, #0
 8004846:	e7f7      	b.n	8004838 <_realloc_r+0x14>
 8004848:	f000 f81b 	bl	8004882 <_malloc_usable_size_r>
 800484c:	0007      	movs	r7, r0
 800484e:	4285      	cmp	r5, r0
 8004850:	d802      	bhi.n	8004858 <_realloc_r+0x34>
 8004852:	0843      	lsrs	r3, r0, #1
 8004854:	42ab      	cmp	r3, r5
 8004856:	d3ef      	bcc.n	8004838 <_realloc_r+0x14>
 8004858:	0029      	movs	r1, r5
 800485a:	0030      	movs	r0, r6
 800485c:	f7ff fc3c 	bl	80040d8 <_malloc_r>
 8004860:	9001      	str	r0, [sp, #4]
 8004862:	2800      	cmp	r0, #0
 8004864:	d0ee      	beq.n	8004844 <_realloc_r+0x20>
 8004866:	002a      	movs	r2, r5
 8004868:	42bd      	cmp	r5, r7
 800486a:	d900      	bls.n	800486e <_realloc_r+0x4a>
 800486c:	003a      	movs	r2, r7
 800486e:	0021      	movs	r1, r4
 8004870:	9801      	ldr	r0, [sp, #4]
 8004872:	f7ff ffce 	bl	8004812 <memcpy>
 8004876:	0021      	movs	r1, r4
 8004878:	0030      	movs	r0, r6
 800487a:	f7ff fbc1 	bl	8004000 <_free_r>
 800487e:	9c01      	ldr	r4, [sp, #4]
 8004880:	e7da      	b.n	8004838 <_realloc_r+0x14>

08004882 <_malloc_usable_size_r>:
 8004882:	1f0b      	subs	r3, r1, #4
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	1f18      	subs	r0, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	da01      	bge.n	8004890 <_malloc_usable_size_r+0xe>
 800488c:	580b      	ldr	r3, [r1, r0]
 800488e:	18c0      	adds	r0, r0, r3
 8004890:	4770      	bx	lr
	...

08004894 <_init>:
 8004894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004896:	46c0      	nop			@ (mov r8, r8)
 8004898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489a:	bc08      	pop	{r3}
 800489c:	469e      	mov	lr, r3
 800489e:	4770      	bx	lr

080048a0 <_fini>:
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a2:	46c0      	nop			@ (mov r8, r8)
 80048a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a6:	bc08      	pop	{r3}
 80048a8:	469e      	mov	lr, r3
 80048aa:	4770      	bx	lr
