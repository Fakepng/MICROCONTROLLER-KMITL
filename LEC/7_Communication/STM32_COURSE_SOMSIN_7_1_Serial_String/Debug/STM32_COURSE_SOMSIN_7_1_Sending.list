
STM32_COURSE_SOMSIN_7_1_Sending.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003c84  08003c84  00004c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d1c  08003d1c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d1c  08003d1c  00004d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d24  08003d24  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d24  08003d24  00004d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d28  08003d28  00004d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d2c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08003d38  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003d38  00005120  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df0a  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002250  00000000  00000000  00012f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  00015190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000086e  00000000  00000000  00015c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017890  00000000  00000000  000164de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecd3  00000000  00000000  0002dd6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009677e  00000000  00000000  0003ca41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d31bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002620  00000000  00000000  000d3204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000d5824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003c6c 	.word	0x08003c6c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003c6c 	.word	0x08003c6c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fae5 	bl	8000bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f837 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f919 	bl	8000860 <MX_GPIO_Init>
  MX_USART2_Init();
 800062e:	f000 f8c9 	bl	80007c4 <MX_USART2_Init>
  MX_USART1_UART_Init();
 8000632:	f000 f879 	bl	8000728 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  unsigned char data[10] = "A"; // = 65 DEC , 0X41 , 0b01000001
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2241      	movs	r2, #65	@ 0x41
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	3304      	adds	r3, #4
 800063e:	2206      	movs	r2, #6
 8000640:	2100      	movs	r1, #0
 8000642:	0018      	movs	r0, r3
 8000644:	f003 fae6 	bl	8003c14 <memset>
	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 8000648:	e010      	b.n	800066c <main+0x50>
		  HAL_UART_Transmit(&huart1, data, 1, 1000);
 800064a:	23fa      	movs	r3, #250	@ 0xfa
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	1d39      	adds	r1, r7, #4
 8000650:	480e      	ldr	r0, [pc, #56]	@ (800068c <main+0x70>)
 8000652:	2201      	movs	r2, #1
 8000654:	f001 fd90 	bl	8002178 <HAL_UART_Transmit>
		  data[0]++;
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(3000);
 8000664:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <main+0x74>)
 8000666:	0018      	movs	r0, r3
 8000668:	f000 fb48 	bl	8000cfc <HAL_Delay>
	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 800066c:	2380      	movs	r3, #128	@ 0x80
 800066e:	019b      	lsls	r3, r3, #6
 8000670:	4a08      	ldr	r2, [pc, #32]	@ (8000694 <main+0x78>)
 8000672:	0019      	movs	r1, r3
 8000674:	0010      	movs	r0, r2
 8000676:	f000 fe27 	bl	80012c8 <HAL_GPIO_ReadPin>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d0e5      	beq.n	800064a <main+0x2e>
	  }
	  HAL_Delay(1000);
 800067e:	23fa      	movs	r3, #250	@ 0xfa
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fb3a 	bl	8000cfc <HAL_Delay>
  {
 8000688:	e7d5      	b.n	8000636 <main+0x1a>
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	20000028 	.word	0x20000028
 8000690:	00000bb8 	.word	0x00000bb8
 8000694:	50000800 	.word	0x50000800

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b093      	sub	sp, #76	@ 0x4c
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	2410      	movs	r4, #16
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	0018      	movs	r0, r3
 80006a4:	2338      	movs	r3, #56	@ 0x38
 80006a6:	001a      	movs	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	f003 fab3 	bl	8003c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ae:	003b      	movs	r3, r7
 80006b0:	0018      	movs	r0, r3
 80006b2:	2310      	movs	r3, #16
 80006b4:	001a      	movs	r2, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	f003 faac 	bl	8003c14 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2380      	movs	r3, #128	@ 0x80
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 fe3b 	bl	800133c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2202      	movs	r2, #2
 80006ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2280      	movs	r2, #128	@ 0x80
 80006d0:	0052      	lsls	r2, r2, #1
 80006d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2240      	movs	r2, #64	@ 0x40
 80006de:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 fe73 	bl	80013d4 <HAL_RCC_OscConfig>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006f2:	f000 f917 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	003b      	movs	r3, r7
 80006f8:	2207      	movs	r2, #7
 80006fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006fc:	003b      	movs	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	003b      	movs	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	003b      	movs	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070e:	003b      	movs	r3, r7
 8000710:	2100      	movs	r1, #0
 8000712:	0018      	movs	r0, r3
 8000714:	f001 f978 	bl	8001a08 <HAL_RCC_ClockConfig>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800071c:	f000 f902 	bl	8000924 <Error_Handler>
  }
}
 8000720:	46c0      	nop			@ (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b013      	add	sp, #76	@ 0x4c
 8000726:	bd90      	pop	{r4, r7, pc}

08000728 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800072c:	4b22      	ldr	r3, [pc, #136]	@ (80007b8 <MX_USART1_UART_Init+0x90>)
 800072e:	4a23      	ldr	r2, [pc, #140]	@ (80007bc <MX_USART1_UART_Init+0x94>)
 8000730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 10000;
 8000732:	4b21      	ldr	r3, [pc, #132]	@ (80007b8 <MX_USART1_UART_Init+0x90>)
 8000734:	4a22      	ldr	r2, [pc, #136]	@ (80007c0 <MX_USART1_UART_Init+0x98>)
 8000736:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000738:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <MX_USART1_UART_Init+0x90>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800073e:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <MX_USART1_UART_Init+0x90>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000744:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <MX_USART1_UART_Init+0x90>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800074a:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <MX_USART1_UART_Init+0x90>)
 800074c:	220c      	movs	r2, #12
 800074e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000750:	4b19      	ldr	r3, [pc, #100]	@ (80007b8 <MX_USART1_UART_Init+0x90>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000756:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <MX_USART1_UART_Init+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075c:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <MX_USART1_UART_Init+0x90>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000762:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <MX_USART1_UART_Init+0x90>)
 8000764:	2200      	movs	r2, #0
 8000766:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <MX_USART1_UART_Init+0x90>)
 800076a:	2200      	movs	r2, #0
 800076c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076e:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <MX_USART1_UART_Init+0x90>)
 8000770:	0018      	movs	r0, r3
 8000772:	f001 fcab 	bl	80020cc <HAL_UART_Init>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800077a:	f000 f8d3 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_USART1_UART_Init+0x90>)
 8000780:	2100      	movs	r1, #0
 8000782:	0018      	movs	r0, r3
 8000784:	f002 fac8 	bl	8002d18 <HAL_UARTEx_SetTxFifoThreshold>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 800078c:	f000 f8ca 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000790:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_USART1_UART_Init+0x90>)
 8000792:	2100      	movs	r1, #0
 8000794:	0018      	movs	r0, r3
 8000796:	f002 faff 	bl	8002d98 <HAL_UARTEx_SetRxFifoThreshold>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800079e:	f000 f8c1 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007a2:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <MX_USART1_UART_Init+0x90>)
 80007a4:	0018      	movs	r0, r3
 80007a6:	f002 fa7d 	bl	8002ca4 <HAL_UARTEx_DisableFifoMode>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80007ae:	f000 f8b9 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000028 	.word	0x20000028
 80007bc:	40013800 	.word	0x40013800
 80007c0:	00002710 	.word	0x00002710

080007c4 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80007c8:	4b23      	ldr	r3, [pc, #140]	@ (8000858 <MX_USART2_Init+0x94>)
 80007ca:	4a24      	ldr	r2, [pc, #144]	@ (800085c <MX_USART2_Init+0x98>)
 80007cc:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80007ce:	4b22      	ldr	r3, [pc, #136]	@ (8000858 <MX_USART2_Init+0x94>)
 80007d0:	22e1      	movs	r2, #225	@ 0xe1
 80007d2:	0252      	lsls	r2, r2, #9
 80007d4:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80007d6:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <MX_USART2_Init+0x94>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80007dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000858 <MX_USART2_Init+0x94>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80007e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <MX_USART2_Init+0x94>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <MX_USART2_Init+0x94>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <MX_USART2_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80007f4:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <MX_USART2_Init+0x94>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80007fa:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <MX_USART2_Init+0x94>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  husart2.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000800:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <MX_USART2_Init+0x94>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24
  husart2.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000806:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_USART2_Init+0x94>)
 8000808:	2200      	movs	r2, #0
 800080a:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart2) != HAL_OK)
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_USART2_Init+0x94>)
 800080e:	0018      	movs	r0, r3
 8000810:	f002 fb62 	bl	8002ed8 <HAL_USART_Init>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d001      	beq.n	800081c <MX_USART2_Init+0x58>
  {
    Error_Handler();
 8000818:	f000 f884 	bl	8000924 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart2, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081c:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_USART2_Init+0x94>)
 800081e:	2100      	movs	r1, #0
 8000820:	0018      	movs	r0, r3
 8000822:	f003 f91b 	bl	8003a5c <HAL_USARTEx_SetTxFifoThreshold>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_Init+0x6a>
  {
    Error_Handler();
 800082a:	f000 f87b 	bl	8000924 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart2, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800082e:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <MX_USART2_Init+0x94>)
 8000830:	2100      	movs	r1, #0
 8000832:	0018      	movs	r0, r3
 8000834:	f003 f952 	bl	8003adc <HAL_USARTEx_SetRxFifoThreshold>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d001      	beq.n	8000840 <MX_USART2_Init+0x7c>
  {
    Error_Handler();
 800083c:	f000 f872 	bl	8000924 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart2) != HAL_OK)
 8000840:	4b05      	ldr	r3, [pc, #20]	@ (8000858 <MX_USART2_Init+0x94>)
 8000842:	0018      	movs	r0, r3
 8000844:	f003 f8d0 	bl	80039e8 <HAL_USARTEx_DisableFifoMode>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <MX_USART2_Init+0x8c>
  {
    Error_Handler();
 800084c:	f000 f86a 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	200000bc 	.word	0x200000bc
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b089      	sub	sp, #36	@ 0x24
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	240c      	movs	r4, #12
 8000868:	193b      	adds	r3, r7, r4
 800086a:	0018      	movs	r0, r3
 800086c:	2314      	movs	r3, #20
 800086e:	001a      	movs	r2, r3
 8000870:	2100      	movs	r1, #0
 8000872:	f003 f9cf 	bl	8003c14 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	4b29      	ldr	r3, [pc, #164]	@ (800091c <MX_GPIO_Init+0xbc>)
 8000878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800087a:	4b28      	ldr	r3, [pc, #160]	@ (800091c <MX_GPIO_Init+0xbc>)
 800087c:	2104      	movs	r1, #4
 800087e:	430a      	orrs	r2, r1
 8000880:	635a      	str	r2, [r3, #52]	@ 0x34
 8000882:	4b26      	ldr	r3, [pc, #152]	@ (800091c <MX_GPIO_Init+0xbc>)
 8000884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000886:	2204      	movs	r2, #4
 8000888:	4013      	ands	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800088e:	4b23      	ldr	r3, [pc, #140]	@ (800091c <MX_GPIO_Init+0xbc>)
 8000890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000892:	4b22      	ldr	r3, [pc, #136]	@ (800091c <MX_GPIO_Init+0xbc>)
 8000894:	2120      	movs	r1, #32
 8000896:	430a      	orrs	r2, r1
 8000898:	635a      	str	r2, [r3, #52]	@ 0x34
 800089a:	4b20      	ldr	r3, [pc, #128]	@ (800091c <MX_GPIO_Init+0xbc>)
 800089c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800089e:	2220      	movs	r2, #32
 80008a0:	4013      	ands	r3, r2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b1d      	ldr	r3, [pc, #116]	@ (800091c <MX_GPIO_Init+0xbc>)
 80008a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008aa:	4b1c      	ldr	r3, [pc, #112]	@ (800091c <MX_GPIO_Init+0xbc>)
 80008ac:	2101      	movs	r1, #1
 80008ae:	430a      	orrs	r2, r1
 80008b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <MX_GPIO_Init+0xbc>)
 80008b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008b6:	2201      	movs	r2, #1
 80008b8:	4013      	ands	r3, r2
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008be:	23a0      	movs	r3, #160	@ 0xa0
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	2200      	movs	r2, #0
 80008c4:	2120      	movs	r1, #32
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fd1b 	bl	8001302 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2280      	movs	r2, #128	@ 0x80
 80008d0:	0192      	lsls	r2, r2, #6
 80008d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000920 <MX_GPIO_Init+0xc0>)
 80008e4:	0019      	movs	r1, r3
 80008e6:	0010      	movs	r0, r2
 80008e8:	f000 fb8a 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008ec:	0021      	movs	r1, r4
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2220      	movs	r2, #32
 80008f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2201      	movs	r2, #1
 80008f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2202      	movs	r2, #2
 8000904:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000906:	187a      	adds	r2, r7, r1
 8000908:	23a0      	movs	r3, #160	@ 0xa0
 800090a:	05db      	lsls	r3, r3, #23
 800090c:	0011      	movs	r1, r2
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fb76 	bl	8001000 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000914:	46c0      	nop			@ (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b009      	add	sp, #36	@ 0x24
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	40021000 	.word	0x40021000
 8000920:	50000800 	.word	0x50000800

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	46c0      	nop			@ (mov r8, r8)
 800092e:	e7fd      	b.n	800092c <Error_Handler+0x8>

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b11      	ldr	r3, [pc, #68]	@ (800097c <HAL_MspInit+0x4c>)
 8000938:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <HAL_MspInit+0x4c>)
 800093c:	2101      	movs	r1, #1
 800093e:	430a      	orrs	r2, r1
 8000940:	641a      	str	r2, [r3, #64]	@ 0x40
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	2201      	movs	r2, #1
 8000948:	4013      	ands	r3, r2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <HAL_MspInit+0x4c>)
 8000950:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000952:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <HAL_MspInit+0x4c>)
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	0549      	lsls	r1, r1, #21
 8000958:	430a      	orrs	r2, r1
 800095a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800095c:	4b07      	ldr	r3, [pc, #28]	@ (800097c <HAL_MspInit+0x4c>)
 800095e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000960:	2380      	movs	r3, #128	@ 0x80
 8000962:	055b      	lsls	r3, r3, #21
 8000964:	4013      	ands	r3, r2
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800096a:	23c0      	movs	r3, #192	@ 0xc0
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	0018      	movs	r0, r3
 8000970:	f000 f9e8 	bl	8000d44 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000974:	46c0      	nop			@ (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b002      	add	sp, #8
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40021000 	.word	0x40021000

08000980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b097      	sub	sp, #92	@ 0x5c
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	2344      	movs	r3, #68	@ 0x44
 800098a:	18fb      	adds	r3, r7, r3
 800098c:	0018      	movs	r0, r3
 800098e:	2314      	movs	r3, #20
 8000990:	001a      	movs	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	f003 f93e 	bl	8003c14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000998:	2410      	movs	r4, #16
 800099a:	193b      	adds	r3, r7, r4
 800099c:	0018      	movs	r0, r3
 800099e:	2334      	movs	r3, #52	@ 0x34
 80009a0:	001a      	movs	r2, r3
 80009a2:	2100      	movs	r1, #0
 80009a4:	f003 f936 	bl	8003c14 <memset>
  if(huart->Instance==USART1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a22      	ldr	r2, [pc, #136]	@ (8000a38 <HAL_UART_MspInit+0xb8>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d13d      	bne.n	8000a2e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2201      	movs	r2, #1
 80009b6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	2200      	movs	r2, #0
 80009bc:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	0018      	movs	r0, r3
 80009c2:	f001 f9cb 	bl	8001d5c <HAL_RCCEx_PeriphCLKConfig>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009ca:	f7ff ffab 	bl	8000924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ce:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <HAL_UART_MspInit+0xbc>)
 80009d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009d2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a3c <HAL_UART_MspInit+0xbc>)
 80009d4:	2180      	movs	r1, #128	@ 0x80
 80009d6:	01c9      	lsls	r1, r1, #7
 80009d8:	430a      	orrs	r2, r1
 80009da:	641a      	str	r2, [r3, #64]	@ 0x40
 80009dc:	4b17      	ldr	r3, [pc, #92]	@ (8000a3c <HAL_UART_MspInit+0xbc>)
 80009de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009e0:	2380      	movs	r3, #128	@ 0x80
 80009e2:	01db      	lsls	r3, r3, #7
 80009e4:	4013      	ands	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	4b14      	ldr	r3, [pc, #80]	@ (8000a3c <HAL_UART_MspInit+0xbc>)
 80009ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ee:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <HAL_UART_MspInit+0xbc>)
 80009f0:	2104      	movs	r1, #4
 80009f2:	430a      	orrs	r2, r1
 80009f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80009f6:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <HAL_UART_MspInit+0xbc>)
 80009f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009fa:	2204      	movs	r2, #4
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a02:	2144      	movs	r1, #68	@ 0x44
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2230      	movs	r2, #48	@ 0x30
 8000a08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2201      	movs	r2, #1
 8000a20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	4a06      	ldr	r2, [pc, #24]	@ (8000a40 <HAL_UART_MspInit+0xc0>)
 8000a26:	0019      	movs	r1, r3
 8000a28:	0010      	movs	r0, r2
 8000a2a:	f000 fae9 	bl	8001000 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b017      	add	sp, #92	@ 0x5c
 8000a34:	bd90      	pop	{r4, r7, pc}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	40013800 	.word	0x40013800
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	50000800 	.word	0x50000800

08000a44 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b097      	sub	sp, #92	@ 0x5c
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	2344      	movs	r3, #68	@ 0x44
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	0018      	movs	r0, r3
 8000a52:	2314      	movs	r3, #20
 8000a54:	001a      	movs	r2, r3
 8000a56:	2100      	movs	r1, #0
 8000a58:	f003 f8dc 	bl	8003c14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a5c:	2410      	movs	r4, #16
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	0018      	movs	r0, r3
 8000a62:	2334      	movs	r3, #52	@ 0x34
 8000a64:	001a      	movs	r2, r3
 8000a66:	2100      	movs	r1, #0
 8000a68:	f003 f8d4 	bl	8003c14 <memset>
  if(husart->Instance==USART2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a32      	ldr	r2, [pc, #200]	@ (8000b3c <HAL_USART_MspInit+0xf8>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d15d      	bne.n	8000b32 <HAL_USART_MspInit+0xee>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	2202      	movs	r2, #2
 8000a7a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	0018      	movs	r0, r3
 8000a86:	f001 f969 	bl	8001d5c <HAL_RCCEx_PeriphCLKConfig>
 8000a8a:	1e03      	subs	r3, r0, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 8000a8e:	f7ff ff49 	bl	8000924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a92:	4b2b      	ldr	r3, [pc, #172]	@ (8000b40 <HAL_USART_MspInit+0xfc>)
 8000a94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a96:	4b2a      	ldr	r3, [pc, #168]	@ (8000b40 <HAL_USART_MspInit+0xfc>)
 8000a98:	2180      	movs	r1, #128	@ 0x80
 8000a9a:	0289      	lsls	r1, r1, #10
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000aa0:	4b27      	ldr	r3, [pc, #156]	@ (8000b40 <HAL_USART_MspInit+0xfc>)
 8000aa2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000aa4:	2380      	movs	r3, #128	@ 0x80
 8000aa6:	029b      	lsls	r3, r3, #10
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b24      	ldr	r3, [pc, #144]	@ (8000b40 <HAL_USART_MspInit+0xfc>)
 8000ab0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ab2:	4b23      	ldr	r3, [pc, #140]	@ (8000b40 <HAL_USART_MspInit+0xfc>)
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aba:	4b21      	ldr	r3, [pc, #132]	@ (8000b40 <HAL_USART_MspInit+0xfc>)
 8000abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_CK
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ac6:	2444      	movs	r4, #68	@ 0x44
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2202      	movs	r2, #2
 8000acc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	193a      	adds	r2, r7, r4
 8000ae8:	23a0      	movs	r3, #160	@ 0xa0
 8000aea:	05db      	lsls	r3, r3, #23
 8000aec:	0011      	movs	r1, r2
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 fa86 	bl	8001000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000af4:	0021      	movs	r1, r4
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	220c      	movs	r2, #12
 8000afa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2202      	movs	r2, #2
 8000b00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2201      	movs	r2, #1
 8000b06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2201      	movs	r2, #1
 8000b12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	187a      	adds	r2, r7, r1
 8000b16:	23a0      	movs	r3, #160	@ 0xa0
 8000b18:	05db      	lsls	r3, r3, #23
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f000 fa6f 	bl	8001000 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	201c      	movs	r0, #28
 8000b28:	f000 f9ce 	bl	8000ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b2c:	201c      	movs	r0, #28
 8000b2e:	f000 f9e0 	bl	8000ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b017      	add	sp, #92	@ 0x5c
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	40004400 	.word	0x40004400
 8000b40:	40021000 	.word	0x40021000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	e7fd      	b.n	8000b48 <NMI_Handler+0x4>

08000b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b50:	46c0      	nop			@ (mov r8, r8)
 8000b52:	e7fd      	b.n	8000b50 <HardFault_Handler+0x4>

08000b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b58:	46c0      	nop			@ (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 f8aa 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 8000b7c:	4b03      	ldr	r3, [pc, #12]	@ (8000b8c <USART2_IRQHandler+0x14>)
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f002 f9fa 	bl	8002f78 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b84:	46c0      	nop			@ (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	200000bc 	.word	0x200000bc

08000b90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b9c:	480d      	ldr	r0, [pc, #52]	@ (8000bd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ba0:	f7ff fff6 	bl	8000b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ba6:	490d      	ldr	r1, [pc, #52]	@ (8000bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8000be0 <LoopForever+0xe>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000be8 <LoopForever+0x16>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bca:	f003 f82b 	bl	8003c24 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bce:	f7ff fd25 	bl	800061c <main>

08000bd2 <LoopForever>:

LoopForever:
  b LoopForever
 8000bd2:	e7fe      	b.n	8000bd2 <LoopForever>
  ldr   r0, =_estack
 8000bd4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000be0:	08003d2c 	.word	0x08003d2c
  ldr r2, =_sbss
 8000be4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000be8:	20000120 	.word	0x20000120

08000bec <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC1_COMP_IRQHandler>
	...

08000bf0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <HAL_Init+0x3c>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <HAL_Init+0x3c>)
 8000c02:	2180      	movs	r1, #128	@ 0x80
 8000c04:	0049      	lsls	r1, r1, #1
 8000c06:	430a      	orrs	r2, r1
 8000c08:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f000 f810 	bl	8000c30 <HAL_InitTick>
 8000c10:	1e03      	subs	r3, r0, #0
 8000c12:	d003      	beq.n	8000c1c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	e001      	b.n	8000c20 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c1c:	f7ff fe88 	bl	8000930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	781b      	ldrb	r3, [r3, #0]
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b002      	add	sp, #8
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40022000 	.word	0x40022000

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c38:	230f      	movs	r3, #15
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c40:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <HAL_InitTick+0x88>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d02b      	beq.n	8000ca0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c48:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <HAL_InitTick+0x8c>)
 8000c4a:	681c      	ldr	r4, [r3, #0]
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <HAL_InitTick+0x88>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	0019      	movs	r1, r3
 8000c52:	23fa      	movs	r3, #250	@ 0xfa
 8000c54:	0098      	lsls	r0, r3, #2
 8000c56:	f7ff fa55 	bl	8000104 <__udivsi3>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	0020      	movs	r0, r4
 8000c60:	f7ff fa50 	bl	8000104 <__udivsi3>
 8000c64:	0003      	movs	r3, r0
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 f953 	bl	8000f12 <HAL_SYSTICK_Config>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d112      	bne.n	8000c96 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d80a      	bhi.n	8000c8c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	2301      	movs	r3, #1
 8000c7a:	425b      	negs	r3, r3
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 f922 	bl	8000ec8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c84:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <HAL_InitTick+0x90>)
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	e00d      	b.n	8000ca8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	e008      	b.n	8000ca8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c96:	230f      	movs	r3, #15
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
 8000c9e:	e003      	b.n	8000ca8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ca8:	230f      	movs	r3, #15
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	781b      	ldrb	r3, [r3, #0]
}
 8000cae:	0018      	movs	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b005      	add	sp, #20
 8000cb4:	bd90      	pop	{r4, r7, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <HAL_IncTick+0x1c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	001a      	movs	r2, r3
 8000cce:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <HAL_IncTick+0x20>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	18d2      	adds	r2, r2, r3
 8000cd4:	4b03      	ldr	r3, [pc, #12]	@ (8000ce4 <HAL_IncTick+0x20>)
 8000cd6:	601a      	str	r2, [r3, #0]
}
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	2000011c 	.word	0x2000011c

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b02      	ldr	r3, [pc, #8]	@ (8000cf8 <HAL_GetTick+0x10>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	2000011c 	.word	0x2000011c

08000cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d04:	f7ff fff0 	bl	8000ce8 <HAL_GetTick>
 8000d08:	0003      	movs	r3, r0
 8000d0a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3301      	adds	r3, #1
 8000d14:	d005      	beq.n	8000d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d16:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <HAL_Delay+0x44>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	001a      	movs	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	189b      	adds	r3, r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	f7ff ffe0 	bl	8000ce8 <HAL_GetTick>
 8000d28:	0002      	movs	r2, r0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d8f7      	bhi.n	8000d24 <HAL_Delay+0x28>
  {
  }
}
 8000d34:	46c0      	nop			@ (mov r8, r8)
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b004      	add	sp, #16
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	20000008 	.word	0x20000008

08000d44 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a06      	ldr	r2, [pc, #24]	@ (8000d6c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000d52:	4013      	ands	r3, r2
 8000d54:	0019      	movs	r1, r3
 8000d56:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	601a      	str	r2, [r3, #0]
}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b002      	add	sp, #8
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	fffff9ff 	.word	0xfffff9ff

08000d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	0002      	movs	r2, r0
 8000d78:	1dfb      	adds	r3, r7, #7
 8000d7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	1dfb      	adds	r3, r7, #7
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d82:	d809      	bhi.n	8000d98 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	001a      	movs	r2, r3
 8000d8a:	231f      	movs	r3, #31
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <__NVIC_EnableIRQ+0x30>)
 8000d90:	2101      	movs	r1, #1
 8000d92:	4091      	lsls	r1, r2
 8000d94:	000a      	movs	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d98:	46c0      	nop			@ (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b002      	add	sp, #8
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	e000e100 	.word	0xe000e100

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	0002      	movs	r2, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000db8:	d828      	bhi.n	8000e0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dba:	4a2f      	ldr	r2, [pc, #188]	@ (8000e78 <__NVIC_SetPriority+0xd4>)
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	33c0      	adds	r3, #192	@ 0xc0
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	589b      	ldr	r3, [r3, r2]
 8000dca:	1dfa      	adds	r2, r7, #7
 8000dcc:	7812      	ldrb	r2, [r2, #0]
 8000dce:	0011      	movs	r1, r2
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	400a      	ands	r2, r1
 8000dd4:	00d2      	lsls	r2, r2, #3
 8000dd6:	21ff      	movs	r1, #255	@ 0xff
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	000a      	movs	r2, r1
 8000ddc:	43d2      	mvns	r2, r2
 8000dde:	401a      	ands	r2, r3
 8000de0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	019b      	lsls	r3, r3, #6
 8000de6:	22ff      	movs	r2, #255	@ 0xff
 8000de8:	401a      	ands	r2, r3
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	0018      	movs	r0, r3
 8000df0:	2303      	movs	r3, #3
 8000df2:	4003      	ands	r3, r0
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df8:	481f      	ldr	r0, [pc, #124]	@ (8000e78 <__NVIC_SetPriority+0xd4>)
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	b25b      	sxtb	r3, r3
 8000e00:	089b      	lsrs	r3, r3, #2
 8000e02:	430a      	orrs	r2, r1
 8000e04:	33c0      	adds	r3, #192	@ 0xc0
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e0a:	e031      	b.n	8000e70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e7c <__NVIC_SetPriority+0xd8>)
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	0019      	movs	r1, r3
 8000e14:	230f      	movs	r3, #15
 8000e16:	400b      	ands	r3, r1
 8000e18:	3b08      	subs	r3, #8
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	3306      	adds	r3, #6
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	18d3      	adds	r3, r2, r3
 8000e22:	3304      	adds	r3, #4
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	1dfa      	adds	r2, r7, #7
 8000e28:	7812      	ldrb	r2, [r2, #0]
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	400a      	ands	r2, r1
 8000e30:	00d2      	lsls	r2, r2, #3
 8000e32:	21ff      	movs	r1, #255	@ 0xff
 8000e34:	4091      	lsls	r1, r2
 8000e36:	000a      	movs	r2, r1
 8000e38:	43d2      	mvns	r2, r2
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	019b      	lsls	r3, r3, #6
 8000e42:	22ff      	movs	r2, #255	@ 0xff
 8000e44:	401a      	ands	r2, r3
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	4003      	ands	r3, r0
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e54:	4809      	ldr	r0, [pc, #36]	@ (8000e7c <__NVIC_SetPriority+0xd8>)
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	001c      	movs	r4, r3
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	4023      	ands	r3, r4
 8000e60:	3b08      	subs	r3, #8
 8000e62:	089b      	lsrs	r3, r3, #2
 8000e64:	430a      	orrs	r2, r1
 8000e66:	3306      	adds	r3, #6
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	18c3      	adds	r3, r0, r3
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b003      	add	sp, #12
 8000e76:	bd90      	pop	{r4, r7, pc}
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	1e5a      	subs	r2, r3, #1
 8000e8c:	2380      	movs	r3, #128	@ 0x80
 8000e8e:	045b      	lsls	r3, r3, #17
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d301      	bcc.n	8000e98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e94:	2301      	movs	r3, #1
 8000e96:	e010      	b.n	8000eba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <SysTick_Config+0x44>)
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	3a01      	subs	r2, #1
 8000e9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	425b      	negs	r3, r3
 8000ea4:	2103      	movs	r1, #3
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff ff7c 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eac:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <SysTick_Config+0x44>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb2:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <SysTick_Config+0x44>)
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	0018      	movs	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	e000e010 	.word	0xe000e010

08000ec8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	1c02      	adds	r2, r0, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff ff5d 	bl	8000da4 <__NVIC_SetPriority>
}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b004      	add	sp, #16
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	0002      	movs	r2, r0
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	0018      	movs	r0, r3
 8000f06:	f7ff ff33 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff ffaf 	bl	8000e80 <SysTick_Config>
 8000f22:	0003      	movs	r3, r0
}
 8000f24:	0018      	movs	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b002      	add	sp, #8
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f34:	210f      	movs	r1, #15
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2225      	movs	r2, #37	@ 0x25
 8000f40:	5c9b      	ldrb	r3, [r3, r2]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d006      	beq.n	8000f56 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
 8000f54:	e049      	b.n	8000fea <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	210e      	movs	r1, #14
 8000f62:	438a      	bics	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2101      	movs	r1, #1
 8000f72:	438a      	bics	r2, r1
 8000f74:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f80:	491d      	ldr	r1, [pc, #116]	@ (8000ff8 <HAL_DMA_Abort_IT+0xcc>)
 8000f82:	400a      	ands	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000f86:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <HAL_DMA_Abort_IT+0xd0>)
 8000f88:	6859      	ldr	r1, [r3, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	221c      	movs	r2, #28
 8000f90:	4013      	ands	r3, r2
 8000f92:	2201      	movs	r2, #1
 8000f94:	409a      	lsls	r2, r3
 8000f96:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_DMA_Abort_IT+0xd0>)
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000fa4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00c      	beq.n	8000fc8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fb8:	490f      	ldr	r1, [pc, #60]	@ (8000ff8 <HAL_DMA_Abort_IT+0xcc>)
 8000fba:	400a      	ands	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000fc6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2225      	movs	r2, #37	@ 0x25
 8000fcc:	2101      	movs	r1, #1
 8000fce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2224      	movs	r2, #36	@ 0x24
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d004      	beq.n	8000fea <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	0010      	movs	r0, r2
 8000fe8:	4798      	blx	r3
    }
  }
  return status;
 8000fea:	230f      	movs	r3, #15
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	781b      	ldrb	r3, [r3, #0]
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b004      	add	sp, #16
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	fffffeff 	.word	0xfffffeff
 8000ffc:	40020000 	.word	0x40020000

08001000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100e:	e147      	b.n	80012a0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2101      	movs	r1, #1
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4091      	lsls	r1, r2
 800101a:	000a      	movs	r2, r1
 800101c:	4013      	ands	r3, r2
 800101e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d100      	bne.n	8001028 <HAL_GPIO_Init+0x28>
 8001026:	e138      	b.n	800129a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2203      	movs	r2, #3
 800102e:	4013      	ands	r3, r2
 8001030:	2b01      	cmp	r3, #1
 8001032:	d005      	beq.n	8001040 <HAL_GPIO_Init+0x40>
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2203      	movs	r2, #3
 800103a:	4013      	ands	r3, r2
 800103c:	2b02      	cmp	r3, #2
 800103e:	d130      	bne.n	80010a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	409a      	lsls	r2, r3
 800104e:	0013      	movs	r3, r2
 8001050:	43da      	mvns	r2, r3
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	409a      	lsls	r2, r3
 8001062:	0013      	movs	r3, r2
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001076:	2201      	movs	r2, #1
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	43da      	mvns	r2, r3
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	091b      	lsrs	r3, r3, #4
 800108c:	2201      	movs	r2, #1
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
 8001094:	0013      	movs	r3, r2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2203      	movs	r2, #3
 80010a8:	4013      	ands	r3, r2
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d017      	beq.n	80010de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	409a      	lsls	r2, r3
 80010bc:	0013      	movs	r3, r2
 80010be:	43da      	mvns	r2, r3
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2203      	movs	r2, #3
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d123      	bne.n	8001132 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	08da      	lsrs	r2, r3, #3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3208      	adds	r2, #8
 80010f2:	0092      	lsls	r2, r2, #2
 80010f4:	58d3      	ldr	r3, [r2, r3]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	2207      	movs	r2, #7
 80010fc:	4013      	ands	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	220f      	movs	r2, #15
 8001102:	409a      	lsls	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	43da      	mvns	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	691a      	ldr	r2, [r3, #16]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2107      	movs	r1, #7
 8001116:	400b      	ands	r3, r1
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	409a      	lsls	r2, r3
 800111c:	0013      	movs	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	08da      	lsrs	r2, r3, #3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3208      	adds	r2, #8
 800112c:	0092      	lsls	r2, r2, #2
 800112e:	6939      	ldr	r1, [r7, #16]
 8001130:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2203      	movs	r2, #3
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	43da      	mvns	r2, r3
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2203      	movs	r2, #3
 8001150:	401a      	ands	r2, r3
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	409a      	lsls	r2, r3
 8001158:	0013      	movs	r3, r2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	23c0      	movs	r3, #192	@ 0xc0
 800116c:	029b      	lsls	r3, r3, #10
 800116e:	4013      	ands	r3, r2
 8001170:	d100      	bne.n	8001174 <HAL_GPIO_Init+0x174>
 8001172:	e092      	b.n	800129a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001174:	4a50      	ldr	r2, [pc, #320]	@ (80012b8 <HAL_GPIO_Init+0x2b8>)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	089b      	lsrs	r3, r3, #2
 800117a:	3318      	adds	r3, #24
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	589b      	ldr	r3, [r3, r2]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2203      	movs	r2, #3
 8001186:	4013      	ands	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	220f      	movs	r2, #15
 800118c:	409a      	lsls	r2, r3
 800118e:	0013      	movs	r3, r2
 8001190:	43da      	mvns	r2, r3
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	23a0      	movs	r3, #160	@ 0xa0
 800119c:	05db      	lsls	r3, r3, #23
 800119e:	429a      	cmp	r2, r3
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0x1ca>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a45      	ldr	r2, [pc, #276]	@ (80012bc <HAL_GPIO_Init+0x2bc>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d00d      	beq.n	80011c6 <HAL_GPIO_Init+0x1c6>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a44      	ldr	r2, [pc, #272]	@ (80012c0 <HAL_GPIO_Init+0x2c0>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d007      	beq.n	80011c2 <HAL_GPIO_Init+0x1c2>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a43      	ldr	r2, [pc, #268]	@ (80012c4 <HAL_GPIO_Init+0x2c4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_GPIO_Init+0x1be>
 80011ba:	2303      	movs	r3, #3
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x1cc>
 80011be:	2305      	movs	r3, #5
 80011c0:	e004      	b.n	80011cc <HAL_GPIO_Init+0x1cc>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e002      	b.n	80011cc <HAL_GPIO_Init+0x1cc>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <HAL_GPIO_Init+0x1cc>
 80011ca:	2300      	movs	r3, #0
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	2103      	movs	r1, #3
 80011d0:	400a      	ands	r2, r1
 80011d2:	00d2      	lsls	r2, r2, #3
 80011d4:	4093      	lsls	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80011dc:	4936      	ldr	r1, [pc, #216]	@ (80012b8 <HAL_GPIO_Init+0x2b8>)
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	3318      	adds	r3, #24
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ea:	4b33      	ldr	r3, [pc, #204]	@ (80012b8 <HAL_GPIO_Init+0x2b8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43da      	mvns	r2, r3
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	2380      	movs	r3, #128	@ 0x80
 8001200:	035b      	lsls	r3, r3, #13
 8001202:	4013      	ands	r3, r2
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800120e:	4b2a      	ldr	r3, [pc, #168]	@ (80012b8 <HAL_GPIO_Init+0x2b8>)
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001214:	4b28      	ldr	r3, [pc, #160]	@ (80012b8 <HAL_GPIO_Init+0x2b8>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	43da      	mvns	r2, r3
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	2380      	movs	r3, #128	@ 0x80
 800122a:	039b      	lsls	r3, r3, #14
 800122c:	4013      	ands	r3, r2
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001238:	4b1f      	ldr	r3, [pc, #124]	@ (80012b8 <HAL_GPIO_Init+0x2b8>)
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800123e:	4a1e      	ldr	r2, [pc, #120]	@ (80012b8 <HAL_GPIO_Init+0x2b8>)
 8001240:	2384      	movs	r3, #132	@ 0x84
 8001242:	58d3      	ldr	r3, [r2, r3]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	43da      	mvns	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	029b      	lsls	r3, r3, #10
 8001258:	4013      	ands	r3, r2
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001264:	4914      	ldr	r1, [pc, #80]	@ (80012b8 <HAL_GPIO_Init+0x2b8>)
 8001266:	2284      	movs	r2, #132	@ 0x84
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800126c:	4a12      	ldr	r2, [pc, #72]	@ (80012b8 <HAL_GPIO_Init+0x2b8>)
 800126e:	2380      	movs	r3, #128	@ 0x80
 8001270:	58d3      	ldr	r3, [r2, r3]
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	43da      	mvns	r2, r3
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	2380      	movs	r3, #128	@ 0x80
 8001284:	025b      	lsls	r3, r3, #9
 8001286:	4013      	ands	r3, r2
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001292:	4909      	ldr	r1, [pc, #36]	@ (80012b8 <HAL_GPIO_Init+0x2b8>)
 8001294:	2280      	movs	r2, #128	@ 0x80
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3301      	adds	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	40da      	lsrs	r2, r3
 80012a8:	1e13      	subs	r3, r2, #0
 80012aa:	d000      	beq.n	80012ae <HAL_GPIO_Init+0x2ae>
 80012ac:	e6b0      	b.n	8001010 <HAL_GPIO_Init+0x10>
  }
}
 80012ae:	46c0      	nop			@ (mov r8, r8)
 80012b0:	46c0      	nop			@ (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b006      	add	sp, #24
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021800 	.word	0x40021800
 80012bc:	50000400 	.word	0x50000400
 80012c0:	50000800 	.word	0x50000800
 80012c4:	50000c00 	.word	0x50000c00

080012c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	000a      	movs	r2, r1
 80012d2:	1cbb      	adds	r3, r7, #2
 80012d4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	1cba      	adds	r2, r7, #2
 80012dc:	8812      	ldrh	r2, [r2, #0]
 80012de:	4013      	ands	r3, r2
 80012e0:	d004      	beq.n	80012ec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80012e2:	230f      	movs	r3, #15
 80012e4:	18fb      	adds	r3, r7, r3
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
 80012ea:	e003      	b.n	80012f4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ec:	230f      	movs	r3, #15
 80012ee:	18fb      	adds	r3, r7, r3
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80012f4:	230f      	movs	r3, #15
 80012f6:	18fb      	adds	r3, r7, r3
 80012f8:	781b      	ldrb	r3, [r3, #0]
}
 80012fa:	0018      	movs	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b004      	add	sp, #16
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	0008      	movs	r0, r1
 800130c:	0011      	movs	r1, r2
 800130e:	1cbb      	adds	r3, r7, #2
 8001310:	1c02      	adds	r2, r0, #0
 8001312:	801a      	strh	r2, [r3, #0]
 8001314:	1c7b      	adds	r3, r7, #1
 8001316:	1c0a      	adds	r2, r1, #0
 8001318:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800131a:	1c7b      	adds	r3, r7, #1
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d004      	beq.n	800132c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001322:	1cbb      	adds	r3, r7, #2
 8001324:	881a      	ldrh	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800132a:	e003      	b.n	8001334 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800132c:	1cbb      	adds	r3, r7, #2
 800132e:	881a      	ldrh	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001334:	46c0      	nop			@ (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b002      	add	sp, #8
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001344:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a19      	ldr	r2, [pc, #100]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800134a:	4013      	ands	r3, r2
 800134c:	0019      	movs	r1, r3
 800134e:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	430a      	orrs	r2, r1
 8001354:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	2380      	movs	r3, #128	@ 0x80
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	429a      	cmp	r2, r3
 800135e:	d11f      	bne.n	80013a0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001360:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	0013      	movs	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	189b      	adds	r3, r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4912      	ldr	r1, [pc, #72]	@ (80013b8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800136e:	0018      	movs	r0, r3
 8001370:	f7fe fec8 	bl	8000104 <__udivsi3>
 8001374:	0003      	movs	r3, r0
 8001376:	3301      	adds	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800137a:	e008      	b.n	800138e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	3b01      	subs	r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	e001      	b.n	800138e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e009      	b.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800138e:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001390:	695a      	ldr	r2, [r3, #20]
 8001392:	2380      	movs	r3, #128	@ 0x80
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	401a      	ands	r2, r3
 8001398:	2380      	movs	r3, #128	@ 0x80
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	429a      	cmp	r2, r3
 800139e:	d0ed      	beq.n	800137c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	0018      	movs	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b004      	add	sp, #16
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	40007000 	.word	0x40007000
 80013b0:	fffff9ff 	.word	0xfffff9ff
 80013b4:	20000000 	.word	0x20000000
 80013b8:	000f4240 	.word	0x000f4240

080013bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80013c0:	4b03      	ldr	r3, [pc, #12]	@ (80013d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	23e0      	movs	r3, #224	@ 0xe0
 80013c6:	01db      	lsls	r3, r3, #7
 80013c8:	4013      	ands	r3, r2
}
 80013ca:	0018      	movs	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000

080013d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e2fe      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2201      	movs	r2, #1
 80013ec:	4013      	ands	r3, r2
 80013ee:	d100      	bne.n	80013f2 <HAL_RCC_OscConfig+0x1e>
 80013f0:	e07c      	b.n	80014ec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f2:	4bc3      	ldr	r3, [pc, #780]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2238      	movs	r2, #56	@ 0x38
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013fc:	4bc0      	ldr	r3, [pc, #768]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2203      	movs	r2, #3
 8001402:	4013      	ands	r3, r2
 8001404:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	2b10      	cmp	r3, #16
 800140a:	d102      	bne.n	8001412 <HAL_RCC_OscConfig+0x3e>
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2b03      	cmp	r3, #3
 8001410:	d002      	beq.n	8001418 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b08      	cmp	r3, #8
 8001416:	d10b      	bne.n	8001430 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001418:	4bb9      	ldr	r3, [pc, #740]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2380      	movs	r3, #128	@ 0x80
 800141e:	029b      	lsls	r3, r3, #10
 8001420:	4013      	ands	r3, r2
 8001422:	d062      	beq.n	80014ea <HAL_RCC_OscConfig+0x116>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d15e      	bne.n	80014ea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e2d9      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	025b      	lsls	r3, r3, #9
 8001438:	429a      	cmp	r2, r3
 800143a:	d107      	bne.n	800144c <HAL_RCC_OscConfig+0x78>
 800143c:	4bb0      	ldr	r3, [pc, #704]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4baf      	ldr	r3, [pc, #700]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 8001442:	2180      	movs	r1, #128	@ 0x80
 8001444:	0249      	lsls	r1, r1, #9
 8001446:	430a      	orrs	r2, r1
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	e020      	b.n	800148e <HAL_RCC_OscConfig+0xba>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	23a0      	movs	r3, #160	@ 0xa0
 8001452:	02db      	lsls	r3, r3, #11
 8001454:	429a      	cmp	r2, r3
 8001456:	d10e      	bne.n	8001476 <HAL_RCC_OscConfig+0xa2>
 8001458:	4ba9      	ldr	r3, [pc, #676]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4ba8      	ldr	r3, [pc, #672]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 800145e:	2180      	movs	r1, #128	@ 0x80
 8001460:	02c9      	lsls	r1, r1, #11
 8001462:	430a      	orrs	r2, r1
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	4ba6      	ldr	r3, [pc, #664]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4ba5      	ldr	r3, [pc, #660]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 800146c:	2180      	movs	r1, #128	@ 0x80
 800146e:	0249      	lsls	r1, r1, #9
 8001470:	430a      	orrs	r2, r1
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	e00b      	b.n	800148e <HAL_RCC_OscConfig+0xba>
 8001476:	4ba2      	ldr	r3, [pc, #648]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4ba1      	ldr	r3, [pc, #644]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 800147c:	49a1      	ldr	r1, [pc, #644]	@ (8001704 <HAL_RCC_OscConfig+0x330>)
 800147e:	400a      	ands	r2, r1
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	4b9f      	ldr	r3, [pc, #636]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4b9e      	ldr	r3, [pc, #632]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 8001488:	499f      	ldr	r1, [pc, #636]	@ (8001708 <HAL_RCC_OscConfig+0x334>)
 800148a:	400a      	ands	r2, r1
 800148c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d014      	beq.n	80014c0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001496:	f7ff fc27 	bl	8000ce8 <HAL_GetTick>
 800149a:	0003      	movs	r3, r0
 800149c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fc22 	bl	8000ce8 <HAL_GetTick>
 80014a4:	0002      	movs	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	@ 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e298      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b2:	4b93      	ldr	r3, [pc, #588]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	2380      	movs	r3, #128	@ 0x80
 80014b8:	029b      	lsls	r3, r3, #10
 80014ba:	4013      	ands	r3, r2
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0xcc>
 80014be:	e015      	b.n	80014ec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fc12 	bl	8000ce8 <HAL_GetTick>
 80014c4:	0003      	movs	r3, r0
 80014c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ca:	f7ff fc0d 	bl	8000ce8 <HAL_GetTick>
 80014ce:	0002      	movs	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b64      	cmp	r3, #100	@ 0x64
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e283      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014dc:	4b88      	ldr	r3, [pc, #544]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	2380      	movs	r3, #128	@ 0x80
 80014e2:	029b      	lsls	r3, r3, #10
 80014e4:	4013      	ands	r3, r2
 80014e6:	d1f0      	bne.n	80014ca <HAL_RCC_OscConfig+0xf6>
 80014e8:	e000      	b.n	80014ec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ea:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2202      	movs	r2, #2
 80014f2:	4013      	ands	r3, r2
 80014f4:	d100      	bne.n	80014f8 <HAL_RCC_OscConfig+0x124>
 80014f6:	e099      	b.n	800162c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f8:	4b81      	ldr	r3, [pc, #516]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2238      	movs	r2, #56	@ 0x38
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001502:	4b7f      	ldr	r3, [pc, #508]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2203      	movs	r2, #3
 8001508:	4013      	ands	r3, r2
 800150a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2b10      	cmp	r3, #16
 8001510:	d102      	bne.n	8001518 <HAL_RCC_OscConfig+0x144>
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d002      	beq.n	800151e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d135      	bne.n	800158a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800151e:	4b78      	ldr	r3, [pc, #480]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	2380      	movs	r3, #128	@ 0x80
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4013      	ands	r3, r2
 8001528:	d005      	beq.n	8001536 <HAL_RCC_OscConfig+0x162>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e256      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001536:	4b72      	ldr	r3, [pc, #456]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4a74      	ldr	r2, [pc, #464]	@ (800170c <HAL_RCC_OscConfig+0x338>)
 800153c:	4013      	ands	r3, r2
 800153e:	0019      	movs	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	021a      	lsls	r2, r3, #8
 8001546:	4b6e      	ldr	r3, [pc, #440]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 8001548:	430a      	orrs	r2, r1
 800154a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d112      	bne.n	8001578 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001552:	4b6b      	ldr	r3, [pc, #428]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a6e      	ldr	r2, [pc, #440]	@ (8001710 <HAL_RCC_OscConfig+0x33c>)
 8001558:	4013      	ands	r3, r2
 800155a:	0019      	movs	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691a      	ldr	r2, [r3, #16]
 8001560:	4b67      	ldr	r3, [pc, #412]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 8001562:	430a      	orrs	r2, r1
 8001564:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001566:	4b66      	ldr	r3, [pc, #408]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	0adb      	lsrs	r3, r3, #11
 800156c:	2207      	movs	r2, #7
 800156e:	4013      	ands	r3, r2
 8001570:	4a68      	ldr	r2, [pc, #416]	@ (8001714 <HAL_RCC_OscConfig+0x340>)
 8001572:	40da      	lsrs	r2, r3
 8001574:	4b68      	ldr	r3, [pc, #416]	@ (8001718 <HAL_RCC_OscConfig+0x344>)
 8001576:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001578:	4b68      	ldr	r3, [pc, #416]	@ (800171c <HAL_RCC_OscConfig+0x348>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff fb57 	bl	8000c30 <HAL_InitTick>
 8001582:	1e03      	subs	r3, r0, #0
 8001584:	d051      	beq.n	800162a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e22c      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d030      	beq.n	80015f4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001592:	4b5b      	ldr	r3, [pc, #364]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a5e      	ldr	r2, [pc, #376]	@ (8001710 <HAL_RCC_OscConfig+0x33c>)
 8001598:	4013      	ands	r3, r2
 800159a:	0019      	movs	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	4b57      	ldr	r3, [pc, #348]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 80015a2:	430a      	orrs	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80015a6:	4b56      	ldr	r3, [pc, #344]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4b55      	ldr	r3, [pc, #340]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 80015ac:	2180      	movs	r1, #128	@ 0x80
 80015ae:	0049      	lsls	r1, r1, #1
 80015b0:	430a      	orrs	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fb98 	bl	8000ce8 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015be:	f7ff fb93 	bl	8000ce8 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e209      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4013      	ands	r3, r2
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015dc:	4b48      	ldr	r3, [pc, #288]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4a4a      	ldr	r2, [pc, #296]	@ (800170c <HAL_RCC_OscConfig+0x338>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	0019      	movs	r1, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	021a      	lsls	r2, r3, #8
 80015ec:	4b44      	ldr	r3, [pc, #272]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	430a      	orrs	r2, r1
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	e01b      	b.n	800162c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80015f4:	4b42      	ldr	r3, [pc, #264]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b41      	ldr	r3, [pc, #260]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 80015fa:	4949      	ldr	r1, [pc, #292]	@ (8001720 <HAL_RCC_OscConfig+0x34c>)
 80015fc:	400a      	ands	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001600:	f7ff fb72 	bl	8000ce8 <HAL_GetTick>
 8001604:	0003      	movs	r3, r0
 8001606:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160a:	f7ff fb6d 	bl	8000ce8 <HAL_GetTick>
 800160e:	0002      	movs	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e1e3      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800161c:	4b38      	ldr	r3, [pc, #224]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	2380      	movs	r3, #128	@ 0x80
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4013      	ands	r3, r2
 8001626:	d1f0      	bne.n	800160a <HAL_RCC_OscConfig+0x236>
 8001628:	e000      	b.n	800162c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800162a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2208      	movs	r2, #8
 8001632:	4013      	ands	r3, r2
 8001634:	d047      	beq.n	80016c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001636:	4b32      	ldr	r3, [pc, #200]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2238      	movs	r2, #56	@ 0x38
 800163c:	4013      	ands	r3, r2
 800163e:	2b18      	cmp	r3, #24
 8001640:	d10a      	bne.n	8001658 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001642:	4b2f      	ldr	r3, [pc, #188]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 8001644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d03c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x2f2>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d138      	bne.n	80016c6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e1c5      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d019      	beq.n	8001694 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001660:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 8001662:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001664:	4b26      	ldr	r3, [pc, #152]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 8001666:	2101      	movs	r1, #1
 8001668:	430a      	orrs	r2, r1
 800166a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff fb3c 	bl	8000ce8 <HAL_GetTick>
 8001670:	0003      	movs	r3, r0
 8001672:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001676:	f7ff fb37 	bl	8000ce8 <HAL_GetTick>
 800167a:	0002      	movs	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e1ad      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001688:	4b1d      	ldr	r3, [pc, #116]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 800168a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800168c:	2202      	movs	r2, #2
 800168e:	4013      	ands	r3, r2
 8001690:	d0f1      	beq.n	8001676 <HAL_RCC_OscConfig+0x2a2>
 8001692:	e018      	b.n	80016c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001694:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 8001696:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001698:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 800169a:	2101      	movs	r1, #1
 800169c:	438a      	bics	r2, r1
 800169e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff fb22 	bl	8000ce8 <HAL_GetTick>
 80016a4:	0003      	movs	r3, r0
 80016a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016aa:	f7ff fb1d 	bl	8000ce8 <HAL_GetTick>
 80016ae:	0002      	movs	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e193      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016bc:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 80016be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c0:	2202      	movs	r2, #2
 80016c2:	4013      	ands	r3, r2
 80016c4:	d1f1      	bne.n	80016aa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2204      	movs	r2, #4
 80016cc:	4013      	ands	r3, r2
 80016ce:	d100      	bne.n	80016d2 <HAL_RCC_OscConfig+0x2fe>
 80016d0:	e0c6      	b.n	8001860 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d2:	231f      	movs	r3, #31
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2238      	movs	r2, #56	@ 0x38
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b20      	cmp	r3, #32
 80016e4:	d11e      	bne.n	8001724 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_RCC_OscConfig+0x32c>)
 80016e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ea:	2202      	movs	r2, #2
 80016ec:	4013      	ands	r3, r2
 80016ee:	d100      	bne.n	80016f2 <HAL_RCC_OscConfig+0x31e>
 80016f0:	e0b6      	b.n	8001860 <HAL_RCC_OscConfig+0x48c>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d000      	beq.n	80016fc <HAL_RCC_OscConfig+0x328>
 80016fa:	e0b1      	b.n	8001860 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e171      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
 8001700:	40021000 	.word	0x40021000
 8001704:	fffeffff 	.word	0xfffeffff
 8001708:	fffbffff 	.word	0xfffbffff
 800170c:	ffff80ff 	.word	0xffff80ff
 8001710:	ffffc7ff 	.word	0xffffc7ff
 8001714:	00f42400 	.word	0x00f42400
 8001718:	20000000 	.word	0x20000000
 800171c:	20000004 	.word	0x20000004
 8001720:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001724:	4bb1      	ldr	r3, [pc, #708]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 8001726:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001728:	2380      	movs	r3, #128	@ 0x80
 800172a:	055b      	lsls	r3, r3, #21
 800172c:	4013      	ands	r3, r2
 800172e:	d101      	bne.n	8001734 <HAL_RCC_OscConfig+0x360>
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_RCC_OscConfig+0x362>
 8001734:	2300      	movs	r3, #0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d011      	beq.n	800175e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	4bac      	ldr	r3, [pc, #688]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 800173c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800173e:	4bab      	ldr	r3, [pc, #684]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 8001740:	2180      	movs	r1, #128	@ 0x80
 8001742:	0549      	lsls	r1, r1, #21
 8001744:	430a      	orrs	r2, r1
 8001746:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001748:	4ba8      	ldr	r3, [pc, #672]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 800174a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800174c:	2380      	movs	r3, #128	@ 0x80
 800174e:	055b      	lsls	r3, r3, #21
 8001750:	4013      	ands	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001756:	231f      	movs	r3, #31
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	2201      	movs	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800175e:	4ba4      	ldr	r3, [pc, #656]	@ (80019f0 <HAL_RCC_OscConfig+0x61c>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	2380      	movs	r3, #128	@ 0x80
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4013      	ands	r3, r2
 8001768:	d11a      	bne.n	80017a0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800176a:	4ba1      	ldr	r3, [pc, #644]	@ (80019f0 <HAL_RCC_OscConfig+0x61c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4ba0      	ldr	r3, [pc, #640]	@ (80019f0 <HAL_RCC_OscConfig+0x61c>)
 8001770:	2180      	movs	r1, #128	@ 0x80
 8001772:	0049      	lsls	r1, r1, #1
 8001774:	430a      	orrs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001778:	f7ff fab6 	bl	8000ce8 <HAL_GetTick>
 800177c:	0003      	movs	r3, r0
 800177e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001782:	f7ff fab1 	bl	8000ce8 <HAL_GetTick>
 8001786:	0002      	movs	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e127      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001794:	4b96      	ldr	r3, [pc, #600]	@ (80019f0 <HAL_RCC_OscConfig+0x61c>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	@ 0x80
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4013      	ands	r3, r2
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x3e2>
 80017a8:	4b90      	ldr	r3, [pc, #576]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 80017aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017ac:	4b8f      	ldr	r3, [pc, #572]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 80017ae:	2101      	movs	r1, #1
 80017b0:	430a      	orrs	r2, r1
 80017b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017b4:	e01c      	b.n	80017f0 <HAL_RCC_OscConfig+0x41c>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b05      	cmp	r3, #5
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x404>
 80017be:	4b8b      	ldr	r3, [pc, #556]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 80017c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017c2:	4b8a      	ldr	r3, [pc, #552]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 80017c4:	2104      	movs	r1, #4
 80017c6:	430a      	orrs	r2, r1
 80017c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017ca:	4b88      	ldr	r3, [pc, #544]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 80017cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017ce:	4b87      	ldr	r3, [pc, #540]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 80017d0:	2101      	movs	r1, #1
 80017d2:	430a      	orrs	r2, r1
 80017d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017d6:	e00b      	b.n	80017f0 <HAL_RCC_OscConfig+0x41c>
 80017d8:	4b84      	ldr	r3, [pc, #528]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 80017da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017dc:	4b83      	ldr	r3, [pc, #524]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 80017de:	2101      	movs	r1, #1
 80017e0:	438a      	bics	r2, r1
 80017e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017e4:	4b81      	ldr	r3, [pc, #516]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 80017e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017e8:	4b80      	ldr	r3, [pc, #512]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 80017ea:	2104      	movs	r1, #4
 80017ec:	438a      	bics	r2, r1
 80017ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d014      	beq.n	8001822 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fa76 	bl	8000ce8 <HAL_GetTick>
 80017fc:	0003      	movs	r3, r0
 80017fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001800:	e009      	b.n	8001816 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001802:	f7ff fa71 	bl	8000ce8 <HAL_GetTick>
 8001806:	0002      	movs	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	4a79      	ldr	r2, [pc, #484]	@ (80019f4 <HAL_RCC_OscConfig+0x620>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e0e6      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001816:	4b75      	ldr	r3, [pc, #468]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 8001818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800181a:	2202      	movs	r2, #2
 800181c:	4013      	ands	r3, r2
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x42e>
 8001820:	e013      	b.n	800184a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001822:	f7ff fa61 	bl	8000ce8 <HAL_GetTick>
 8001826:	0003      	movs	r3, r0
 8001828:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800182a:	e009      	b.n	8001840 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff fa5c 	bl	8000ce8 <HAL_GetTick>
 8001830:	0002      	movs	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	4a6f      	ldr	r2, [pc, #444]	@ (80019f4 <HAL_RCC_OscConfig+0x620>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e0d1      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001840:	4b6a      	ldr	r3, [pc, #424]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 8001842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001844:	2202      	movs	r2, #2
 8001846:	4013      	ands	r3, r2
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800184a:	231f      	movs	r3, #31
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001854:	4b65      	ldr	r3, [pc, #404]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 8001856:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001858:	4b64      	ldr	r3, [pc, #400]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 800185a:	4967      	ldr	r1, [pc, #412]	@ (80019f8 <HAL_RCC_OscConfig+0x624>)
 800185c:	400a      	ands	r2, r1
 800185e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d100      	bne.n	800186a <HAL_RCC_OscConfig+0x496>
 8001868:	e0bb      	b.n	80019e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800186a:	4b60      	ldr	r3, [pc, #384]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2238      	movs	r2, #56	@ 0x38
 8001870:	4013      	ands	r3, r2
 8001872:	2b10      	cmp	r3, #16
 8001874:	d100      	bne.n	8001878 <HAL_RCC_OscConfig+0x4a4>
 8001876:	e07b      	b.n	8001970 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d156      	bne.n	800192e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001880:	4b5a      	ldr	r3, [pc, #360]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b59      	ldr	r3, [pc, #356]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 8001886:	495d      	ldr	r1, [pc, #372]	@ (80019fc <HAL_RCC_OscConfig+0x628>)
 8001888:	400a      	ands	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fa2c 	bl	8000ce8 <HAL_GetTick>
 8001890:	0003      	movs	r3, r0
 8001892:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001896:	f7ff fa27 	bl	8000ce8 <HAL_GetTick>
 800189a:	0002      	movs	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e09d      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a8:	4b50      	ldr	r3, [pc, #320]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2380      	movs	r3, #128	@ 0x80
 80018ae:	049b      	lsls	r3, r3, #18
 80018b0:	4013      	ands	r3, r2
 80018b2:	d1f0      	bne.n	8001896 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b4:	4b4d      	ldr	r3, [pc, #308]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4a51      	ldr	r2, [pc, #324]	@ (8001a00 <HAL_RCC_OscConfig+0x62c>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1a      	ldr	r2, [r3, #32]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018e0:	431a      	orrs	r2, r3
 80018e2:	4b42      	ldr	r3, [pc, #264]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 80018e4:	430a      	orrs	r2, r1
 80018e6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e8:	4b40      	ldr	r3, [pc, #256]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b3f      	ldr	r3, [pc, #252]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 80018ee:	2180      	movs	r1, #128	@ 0x80
 80018f0:	0449      	lsls	r1, r1, #17
 80018f2:	430a      	orrs	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80018f6:	4b3d      	ldr	r3, [pc, #244]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	4b3c      	ldr	r3, [pc, #240]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 80018fc:	2180      	movs	r1, #128	@ 0x80
 80018fe:	0549      	lsls	r1, r1, #21
 8001900:	430a      	orrs	r2, r1
 8001902:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff f9f0 	bl	8000ce8 <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff f9eb 	bl	8000ce8 <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e061      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001920:	4b32      	ldr	r3, [pc, #200]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2380      	movs	r3, #128	@ 0x80
 8001926:	049b      	lsls	r3, r3, #18
 8001928:	4013      	ands	r3, r2
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x53a>
 800192c:	e059      	b.n	80019e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192e:	4b2f      	ldr	r3, [pc, #188]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4b2e      	ldr	r3, [pc, #184]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 8001934:	4931      	ldr	r1, [pc, #196]	@ (80019fc <HAL_RCC_OscConfig+0x628>)
 8001936:	400a      	ands	r2, r1
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	f7ff f9d5 	bl	8000ce8 <HAL_GetTick>
 800193e:	0003      	movs	r3, r0
 8001940:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff f9d0 	bl	8000ce8 <HAL_GetTick>
 8001948:	0002      	movs	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e046      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001956:	4b25      	ldr	r3, [pc, #148]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	2380      	movs	r3, #128	@ 0x80
 800195c:	049b      	lsls	r3, r3, #18
 800195e:	4013      	ands	r3, r2
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001962:	4b22      	ldr	r3, [pc, #136]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	4b21      	ldr	r3, [pc, #132]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 8001968:	4926      	ldr	r1, [pc, #152]	@ (8001a04 <HAL_RCC_OscConfig+0x630>)
 800196a:	400a      	ands	r2, r1
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	e038      	b.n	80019e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e033      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800197c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <HAL_RCC_OscConfig+0x618>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2203      	movs	r2, #3
 8001986:	401a      	ands	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	429a      	cmp	r2, r3
 800198e:	d126      	bne.n	80019de <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2270      	movs	r2, #112	@ 0x70
 8001994:	401a      	ands	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d11f      	bne.n	80019de <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	23fe      	movs	r3, #254	@ 0xfe
 80019a2:	01db      	lsls	r3, r3, #7
 80019a4:	401a      	ands	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019aa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d116      	bne.n	80019de <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	23f8      	movs	r3, #248	@ 0xf8
 80019b4:	039b      	lsls	r3, r3, #14
 80019b6:	401a      	ands	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019bc:	429a      	cmp	r2, r3
 80019be:	d10e      	bne.n	80019de <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	23e0      	movs	r3, #224	@ 0xe0
 80019c4:	051b      	lsls	r3, r3, #20
 80019c6:	401a      	ands	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d106      	bne.n	80019de <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	0f5b      	lsrs	r3, r3, #29
 80019d4:	075a      	lsls	r2, r3, #29
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d001      	beq.n	80019e2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b008      	add	sp, #32
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40007000 	.word	0x40007000
 80019f4:	00001388 	.word	0x00001388
 80019f8:	efffffff 	.word	0xefffffff
 80019fc:	feffffff 	.word	0xfeffffff
 8001a00:	11c1808c 	.word	0x11c1808c
 8001a04:	eefefffc 	.word	0xeefefffc

08001a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0e9      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b76      	ldr	r3, [pc, #472]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2207      	movs	r2, #7
 8001a22:	4013      	ands	r3, r2
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d91e      	bls.n	8001a68 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b73      	ldr	r3, [pc, #460]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2207      	movs	r2, #7
 8001a30:	4393      	bics	r3, r2
 8001a32:	0019      	movs	r1, r3
 8001a34:	4b70      	ldr	r3, [pc, #448]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a3c:	f7ff f954 	bl	8000ce8 <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a44:	e009      	b.n	8001a5a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a46:	f7ff f94f 	bl	8000ce8 <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	4a6a      	ldr	r2, [pc, #424]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e0ca      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a5a:	4b67      	ldr	r3, [pc, #412]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2207      	movs	r2, #7
 8001a60:	4013      	ands	r3, r2
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d1ee      	bne.n	8001a46 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d015      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2204      	movs	r2, #4
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d006      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a7c:	4b60      	ldr	r3, [pc, #384]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	4b5f      	ldr	r3, [pc, #380]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001a82:	21e0      	movs	r1, #224	@ 0xe0
 8001a84:	01c9      	lsls	r1, r1, #7
 8001a86:	430a      	orrs	r2, r1
 8001a88:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	4a5d      	ldr	r2, [pc, #372]	@ (8001c04 <HAL_RCC_ClockConfig+0x1fc>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	0019      	movs	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	4b59      	ldr	r3, [pc, #356]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d057      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d107      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab0:	4b53      	ldr	r3, [pc, #332]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2380      	movs	r3, #128	@ 0x80
 8001ab6:	029b      	lsls	r3, r3, #10
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d12b      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e097      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d107      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2380      	movs	r3, #128	@ 0x80
 8001ace:	049b      	lsls	r3, r3, #18
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d11f      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e08b      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae0:	4b47      	ldr	r3, [pc, #284]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	2380      	movs	r3, #128	@ 0x80
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d113      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e07f      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001af8:	4b41      	ldr	r3, [pc, #260]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001afc:	2202      	movs	r2, #2
 8001afe:	4013      	ands	r3, r2
 8001b00:	d108      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e074      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b06:	4b3e      	ldr	r3, [pc, #248]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e06d      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b14:	4b3a      	ldr	r3, [pc, #232]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2207      	movs	r2, #7
 8001b1a:	4393      	bics	r3, r2
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	4b37      	ldr	r3, [pc, #220]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001b24:	430a      	orrs	r2, r1
 8001b26:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b28:	f7ff f8de 	bl	8000ce8 <HAL_GetTick>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b30:	e009      	b.n	8001b46 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b32:	f7ff f8d9 	bl	8000ce8 <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	4a2f      	ldr	r2, [pc, #188]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e054      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	4b2e      	ldr	r3, [pc, #184]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2238      	movs	r2, #56	@ 0x38
 8001b4c:	401a      	ands	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d1ec      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b58:	4b27      	ldr	r3, [pc, #156]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	4013      	ands	r3, r2
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d21e      	bcs.n	8001ba4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b24      	ldr	r3, [pc, #144]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	4393      	bics	r3, r2
 8001b6e:	0019      	movs	r1, r3
 8001b70:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b78:	f7ff f8b6 	bl	8000ce8 <HAL_GetTick>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b80:	e009      	b.n	8001b96 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b82:	f7ff f8b1 	bl	8000ce8 <HAL_GetTick>
 8001b86:	0002      	movs	r2, r0
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bfc <HAL_RCC_ClockConfig+0x1f4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e02c      	b.n	8001bf0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b96:	4b18      	ldr	r3, [pc, #96]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d1ee      	bne.n	8001b82 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2204      	movs	r2, #4
 8001baa:	4013      	ands	r3, r2
 8001bac:	d009      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bae:	4b14      	ldr	r3, [pc, #80]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	4a15      	ldr	r2, [pc, #84]	@ (8001c08 <HAL_RCC_ClockConfig+0x200>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001bc2:	f000 f829 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001bc6:	0001      	movs	r1, r0
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f8>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	220f      	movs	r2, #15
 8001bd0:	401a      	ands	r2, r3
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c0c <HAL_RCC_ClockConfig+0x204>)
 8001bd4:	0092      	lsls	r2, r2, #2
 8001bd6:	58d3      	ldr	r3, [r2, r3]
 8001bd8:	221f      	movs	r2, #31
 8001bda:	4013      	ands	r3, r2
 8001bdc:	000a      	movs	r2, r1
 8001bde:	40da      	lsrs	r2, r3
 8001be0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <HAL_RCC_ClockConfig+0x208>)
 8001be2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <HAL_RCC_ClockConfig+0x20c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0018      	movs	r0, r3
 8001bea:	f7ff f821 	bl	8000c30 <HAL_InitTick>
 8001bee:	0003      	movs	r3, r0
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b004      	add	sp, #16
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40022000 	.word	0x40022000
 8001bfc:	00001388 	.word	0x00001388
 8001c00:	40021000 	.word	0x40021000
 8001c04:	fffff0ff 	.word	0xfffff0ff
 8001c08:	ffff8fff 	.word	0xffff8fff
 8001c0c:	08003c84 	.word	0x08003c84
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000004 	.word	0x20000004

08001c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c1e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2238      	movs	r2, #56	@ 0x38
 8001c24:	4013      	ands	r3, r2
 8001c26:	d10f      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c28:	4b39      	ldr	r3, [pc, #228]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0adb      	lsrs	r3, r3, #11
 8001c2e:	2207      	movs	r2, #7
 8001c30:	4013      	ands	r3, r2
 8001c32:	2201      	movs	r2, #1
 8001c34:	409a      	lsls	r2, r3
 8001c36:	0013      	movs	r3, r2
 8001c38:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c3a:	6839      	ldr	r1, [r7, #0]
 8001c3c:	4835      	ldr	r0, [pc, #212]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c3e:	f7fe fa61 	bl	8000104 <__udivsi3>
 8001c42:	0003      	movs	r3, r0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	e05d      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c48:	4b31      	ldr	r3, [pc, #196]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2238      	movs	r2, #56	@ 0x38
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d102      	bne.n	8001c5a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c54:	4b30      	ldr	r3, [pc, #192]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	e054      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2238      	movs	r2, #56	@ 0x38
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b10      	cmp	r3, #16
 8001c64:	d138      	bne.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c66:	4b2a      	ldr	r3, [pc, #168]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c70:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	2207      	movs	r2, #7
 8001c78:	4013      	ands	r3, r2
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d10d      	bne.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	4824      	ldr	r0, [pc, #144]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c88:	f7fe fa3c 	bl	8000104 <__udivsi3>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	0019      	movs	r1, r3
 8001c90:	4b1f      	ldr	r3, [pc, #124]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	227f      	movs	r2, #127	@ 0x7f
 8001c98:	4013      	ands	r3, r2
 8001c9a:	434b      	muls	r3, r1
 8001c9c:	617b      	str	r3, [r7, #20]
        break;
 8001c9e:	e00d      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	481c      	ldr	r0, [pc, #112]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ca4:	f7fe fa2e 	bl	8000104 <__udivsi3>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	0019      	movs	r1, r3
 8001cac:	4b18      	ldr	r3, [pc, #96]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	227f      	movs	r2, #127	@ 0x7f
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	434b      	muls	r3, r1
 8001cb8:	617b      	str	r3, [r7, #20]
        break;
 8001cba:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001cbc:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	0f5b      	lsrs	r3, r3, #29
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	6978      	ldr	r0, [r7, #20]
 8001cce:	f7fe fa19 	bl	8000104 <__udivsi3>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	e015      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2238      	movs	r2, #56	@ 0x38
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b20      	cmp	r3, #32
 8001ce2:	d103      	bne.n	8001cec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ce4:	2380      	movs	r3, #128	@ 0x80
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	e00b      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001cec:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2238      	movs	r2, #56	@ 0x38
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b18      	cmp	r3, #24
 8001cf6:	d103      	bne.n	8001d00 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001cf8:	23fa      	movs	r3, #250	@ 0xfa
 8001cfa:	01db      	lsls	r3, r3, #7
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	e001      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d04:	693b      	ldr	r3, [r7, #16]
}
 8001d06:	0018      	movs	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b006      	add	sp, #24
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	40021000 	.word	0x40021000
 8001d14:	00f42400 	.word	0x00f42400
 8001d18:	007a1200 	.word	0x007a1200

08001d1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d20:	4b02      	ldr	r3, [pc, #8]	@ (8001d2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	0018      	movs	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	20000000 	.word	0x20000000

08001d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d30:	b5b0      	push	{r4, r5, r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d34:	f7ff fff2 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d38:	0004      	movs	r4, r0
 8001d3a:	f7ff fb3f 	bl	80013bc <LL_RCC_GetAPB1Prescaler>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	0b1a      	lsrs	r2, r3, #12
 8001d42:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d44:	0092      	lsls	r2, r2, #2
 8001d46:	58d3      	ldr	r3, [r2, r3]
 8001d48:	221f      	movs	r2, #31
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	40dc      	lsrs	r4, r3
 8001d4e:	0023      	movs	r3, r4
}
 8001d50:	0018      	movs	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bdb0      	pop	{r4, r5, r7, pc}
 8001d56:	46c0      	nop			@ (mov r8, r8)
 8001d58:	08003cc4 	.word	0x08003cc4

08001d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d64:	2313      	movs	r3, #19
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d6c:	2312      	movs	r3, #18
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2380      	movs	r3, #128	@ 0x80
 8001d7a:	029b      	lsls	r3, r3, #10
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d100      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d80:	e0a3      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d82:	2011      	movs	r0, #17
 8001d84:	183b      	adds	r3, r7, r0
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8a:	4bc3      	ldr	r3, [pc, #780]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d8e:	2380      	movs	r3, #128	@ 0x80
 8001d90:	055b      	lsls	r3, r3, #21
 8001d92:	4013      	ands	r3, r2
 8001d94:	d110      	bne.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	4bc0      	ldr	r3, [pc, #768]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d9a:	4bbf      	ldr	r3, [pc, #764]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d9c:	2180      	movs	r1, #128	@ 0x80
 8001d9e:	0549      	lsls	r1, r1, #21
 8001da0:	430a      	orrs	r2, r1
 8001da2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001da4:	4bbc      	ldr	r3, [pc, #752]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001da6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001da8:	2380      	movs	r3, #128	@ 0x80
 8001daa:	055b      	lsls	r3, r3, #21
 8001dac:	4013      	ands	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db2:	183b      	adds	r3, r7, r0
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001db8:	4bb8      	ldr	r3, [pc, #736]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4bb7      	ldr	r3, [pc, #732]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001dbe:	2180      	movs	r1, #128	@ 0x80
 8001dc0:	0049      	lsls	r1, r1, #1
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dc6:	f7fe ff8f 	bl	8000ce8 <HAL_GetTick>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dce:	e00b      	b.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd0:	f7fe ff8a 	bl	8000ce8 <HAL_GetTick>
 8001dd4:	0002      	movs	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d904      	bls.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001dde:	2313      	movs	r3, #19
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	2203      	movs	r2, #3
 8001de4:	701a      	strb	r2, [r3, #0]
        break;
 8001de6:	e005      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001de8:	4bac      	ldr	r3, [pc, #688]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	@ 0x80
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4013      	ands	r3, r2
 8001df2:	d0ed      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001df4:	2313      	movs	r3, #19
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d154      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dfe:	4ba6      	ldr	r3, [pc, #664]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e02:	23c0      	movs	r3, #192	@ 0xc0
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4013      	ands	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d019      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d014      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e1a:	4b9f      	ldr	r3, [pc, #636]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1e:	4aa0      	ldr	r2, [pc, #640]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e24:	4b9c      	ldr	r3, [pc, #624]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e28:	4b9b      	ldr	r3, [pc, #620]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e2a:	2180      	movs	r1, #128	@ 0x80
 8001e2c:	0249      	lsls	r1, r1, #9
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e32:	4b99      	ldr	r3, [pc, #612]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e36:	4b98      	ldr	r3, [pc, #608]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e38:	499a      	ldr	r1, [pc, #616]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001e3a:	400a      	ands	r2, r1
 8001e3c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e3e:	4b96      	ldr	r3, [pc, #600]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2201      	movs	r2, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d016      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7fe ff4c 	bl	8000ce8 <HAL_GetTick>
 8001e50:	0003      	movs	r3, r0
 8001e52:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e54:	e00c      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe ff47 	bl	8000ce8 <HAL_GetTick>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	4a91      	ldr	r2, [pc, #580]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d904      	bls.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001e66:	2313      	movs	r3, #19
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	701a      	strb	r2, [r3, #0]
            break;
 8001e6e:	e004      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e70:	4b89      	ldr	r3, [pc, #548]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e74:	2202      	movs	r2, #2
 8001e76:	4013      	ands	r3, r2
 8001e78:	d0ed      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e7a:	2313      	movs	r3, #19
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10a      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e84:	4b84      	ldr	r3, [pc, #528]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e88:	4a85      	ldr	r2, [pc, #532]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e92:	4b81      	ldr	r3, [pc, #516]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e94:	430a      	orrs	r2, r1
 8001e96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e98:	e00c      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e9a:	2312      	movs	r3, #18
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	2213      	movs	r2, #19
 8001ea0:	18ba      	adds	r2, r7, r2
 8001ea2:	7812      	ldrb	r2, [r2, #0]
 8001ea4:	701a      	strb	r2, [r3, #0]
 8001ea6:	e005      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ea8:	2312      	movs	r3, #18
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	2213      	movs	r2, #19
 8001eae:	18ba      	adds	r2, r7, r2
 8001eb0:	7812      	ldrb	r2, [r2, #0]
 8001eb2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eb4:	2311      	movs	r3, #17
 8001eb6:	18fb      	adds	r3, r7, r3
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d105      	bne.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ebe:	4b76      	ldr	r3, [pc, #472]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ec2:	4b75      	ldr	r3, [pc, #468]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec4:	4979      	ldr	r1, [pc, #484]	@ (80020ac <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d009      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ed4:	4b70      	ldr	r3, [pc, #448]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed8:	2203      	movs	r2, #3
 8001eda:	4393      	bics	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	4b6d      	ldr	r3, [pc, #436]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2202      	movs	r2, #2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d009      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ef2:	4b69      	ldr	r3, [pc, #420]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	4393      	bics	r3, r2
 8001efa:	0019      	movs	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	4b65      	ldr	r3, [pc, #404]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f02:	430a      	orrs	r2, r1
 8001f04:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2210      	movs	r2, #16
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d009      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f10:	4b61      	ldr	r3, [pc, #388]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f14:	4a66      	ldr	r2, [pc, #408]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	4b5e      	ldr	r3, [pc, #376]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f20:	430a      	orrs	r2, r1
 8001f22:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	2380      	movs	r3, #128	@ 0x80
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d009      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f30:	4b59      	ldr	r3, [pc, #356]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f34:	4a5f      	ldr	r2, [pc, #380]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	4b56      	ldr	r3, [pc, #344]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f40:	430a      	orrs	r2, r1
 8001f42:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d009      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f50:	4b51      	ldr	r3, [pc, #324]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f54:	4a58      	ldr	r2, [pc, #352]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	0019      	movs	r1, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69da      	ldr	r2, [r3, #28]
 8001f5e:	4b4e      	ldr	r3, [pc, #312]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f60:	430a      	orrs	r2, r1
 8001f62:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d009      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f72:	4a52      	ldr	r2, [pc, #328]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	4b46      	ldr	r3, [pc, #280]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	2380      	movs	r3, #128	@ 0x80
 8001f88:	01db      	lsls	r3, r3, #7
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d015      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f8e:	4b42      	ldr	r3, [pc, #264]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	0899      	lsrs	r1, r3, #2
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1a      	ldr	r2, [r3, #32]
 8001f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1a      	ldr	r2, [r3, #32]
 8001fa4:	2380      	movs	r3, #128	@ 0x80
 8001fa6:	05db      	lsls	r3, r3, #23
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d106      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fac:	4b3a      	ldr	r3, [pc, #232]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	4b39      	ldr	r3, [pc, #228]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fb2:	2180      	movs	r1, #128	@ 0x80
 8001fb4:	0249      	lsls	r1, r1, #9
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	2380      	movs	r3, #128	@ 0x80
 8001fc0:	031b      	lsls	r3, r3, #12
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d009      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fc6:	4b34      	ldr	r3, [pc, #208]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fca:	2240      	movs	r2, #64	@ 0x40
 8001fcc:	4393      	bics	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fd4:	4b30      	ldr	r3, [pc, #192]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	2380      	movs	r3, #128	@ 0x80
 8001fe0:	039b      	lsls	r3, r3, #14
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d016      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001fe6:	4b2c      	ldr	r3, [pc, #176]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fea:	4a35      	ldr	r2, [pc, #212]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ff4:	4b28      	ldr	r3, [pc, #160]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ffe:	2380      	movs	r3, #128	@ 0x80
 8002000:	03db      	lsls	r3, r3, #15
 8002002:	429a      	cmp	r2, r3
 8002004:	d106      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002006:	4b24      	ldr	r3, [pc, #144]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	4b23      	ldr	r3, [pc, #140]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800200c:	2180      	movs	r1, #128	@ 0x80
 800200e:	0449      	lsls	r1, r1, #17
 8002010:	430a      	orrs	r2, r1
 8002012:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	2380      	movs	r3, #128	@ 0x80
 800201a:	03db      	lsls	r3, r3, #15
 800201c:	4013      	ands	r3, r2
 800201e:	d016      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002020:	4b1d      	ldr	r3, [pc, #116]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002024:	4a27      	ldr	r2, [pc, #156]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002026:	4013      	ands	r3, r2
 8002028:	0019      	movs	r1, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800202e:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002030:	430a      	orrs	r2, r1
 8002032:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	045b      	lsls	r3, r3, #17
 800203c:	429a      	cmp	r2, r3
 800203e:	d106      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002040:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	4b14      	ldr	r3, [pc, #80]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002046:	2180      	movs	r1, #128	@ 0x80
 8002048:	0449      	lsls	r1, r1, #17
 800204a:	430a      	orrs	r2, r1
 800204c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	2380      	movs	r3, #128	@ 0x80
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	4013      	ands	r3, r2
 8002058:	d016      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800205a:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800205c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205e:	4a1a      	ldr	r2, [pc, #104]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002060:	4013      	ands	r3, r2
 8002062:	0019      	movs	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695a      	ldr	r2, [r3, #20]
 8002068:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800206a:	430a      	orrs	r2, r1
 800206c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	2380      	movs	r3, #128	@ 0x80
 8002074:	01db      	lsls	r3, r3, #7
 8002076:	429a      	cmp	r2, r3
 8002078:	d106      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800207a:	4b07      	ldr	r3, [pc, #28]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002080:	2180      	movs	r1, #128	@ 0x80
 8002082:	0249      	lsls	r1, r1, #9
 8002084:	430a      	orrs	r2, r1
 8002086:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002088:	2312      	movs	r3, #18
 800208a:	18fb      	adds	r3, r7, r3
 800208c:	781b      	ldrb	r3, [r3, #0]
}
 800208e:	0018      	movs	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	b006      	add	sp, #24
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	40021000 	.word	0x40021000
 800209c:	40007000 	.word	0x40007000
 80020a0:	fffffcff 	.word	0xfffffcff
 80020a4:	fffeffff 	.word	0xfffeffff
 80020a8:	00001388 	.word	0x00001388
 80020ac:	efffffff 	.word	0xefffffff
 80020b0:	fffff3ff 	.word	0xfffff3ff
 80020b4:	fff3ffff 	.word	0xfff3ffff
 80020b8:	ffcfffff 	.word	0xffcfffff
 80020bc:	ffffcfff 	.word	0xffffcfff
 80020c0:	ffbfffff 	.word	0xffbfffff
 80020c4:	feffffff 	.word	0xfeffffff
 80020c8:	ffff3fff 	.word	0xffff3fff

080020cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e046      	b.n	800216c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2288      	movs	r2, #136	@ 0x88
 80020e2:	589b      	ldr	r3, [r3, r2]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d107      	bne.n	80020f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2284      	movs	r2, #132	@ 0x84
 80020ec:	2100      	movs	r1, #0
 80020ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	0018      	movs	r0, r3
 80020f4:	f7fe fc44 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2288      	movs	r2, #136	@ 0x88
 80020fc:	2124      	movs	r1, #36	@ 0x24
 80020fe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2101      	movs	r1, #1
 800210c:	438a      	bics	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	0018      	movs	r0, r3
 800211c:	f000 fb8e 	bl	800283c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	0018      	movs	r0, r3
 8002124:	f000 f8cc 	bl	80022c0 <UART_SetConfig>
 8002128:	0003      	movs	r3, r0
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e01c      	b.n	800216c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	490d      	ldr	r1, [pc, #52]	@ (8002174 <HAL_UART_Init+0xa8>)
 800213e:	400a      	ands	r2, r1
 8002140:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	212a      	movs	r1, #42	@ 0x2a
 800214e:	438a      	bics	r2, r1
 8002150:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2101      	movs	r1, #1
 800215e:	430a      	orrs	r2, r1
 8002160:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	0018      	movs	r0, r3
 8002166:	f000 fc1d 	bl	80029a4 <UART_CheckIdleState>
 800216a:	0003      	movs	r3, r0
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b002      	add	sp, #8
 8002172:	bd80      	pop	{r7, pc}
 8002174:	ffffb7ff 	.word	0xffffb7ff

08002178 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08a      	sub	sp, #40	@ 0x28
 800217c:	af02      	add	r7, sp, #8
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	1dbb      	adds	r3, r7, #6
 8002186:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2288      	movs	r2, #136	@ 0x88
 800218c:	589b      	ldr	r3, [r3, r2]
 800218e:	2b20      	cmp	r3, #32
 8002190:	d000      	beq.n	8002194 <HAL_UART_Transmit+0x1c>
 8002192:	e090      	b.n	80022b6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_UART_Transmit+0x2a>
 800219a:	1dbb      	adds	r3, r7, #6
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e088      	b.n	80022b8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	2380      	movs	r3, #128	@ 0x80
 80021ac:	015b      	lsls	r3, r3, #5
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d109      	bne.n	80021c6 <HAL_UART_Transmit+0x4e>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d105      	bne.n	80021c6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2201      	movs	r2, #1
 80021be:	4013      	ands	r3, r2
 80021c0:	d001      	beq.n	80021c6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e078      	b.n	80022b8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2290      	movs	r2, #144	@ 0x90
 80021ca:	2100      	movs	r1, #0
 80021cc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2288      	movs	r2, #136	@ 0x88
 80021d2:	2121      	movs	r1, #33	@ 0x21
 80021d4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021d6:	f7fe fd87 	bl	8000ce8 <HAL_GetTick>
 80021da:	0003      	movs	r3, r0
 80021dc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1dba      	adds	r2, r7, #6
 80021e2:	2154      	movs	r1, #84	@ 0x54
 80021e4:	8812      	ldrh	r2, [r2, #0]
 80021e6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1dba      	adds	r2, r7, #6
 80021ec:	2156      	movs	r1, #86	@ 0x56
 80021ee:	8812      	ldrh	r2, [r2, #0]
 80021f0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	2380      	movs	r3, #128	@ 0x80
 80021f8:	015b      	lsls	r3, r3, #5
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d108      	bne.n	8002210 <HAL_UART_Transmit+0x98>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d104      	bne.n	8002210 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	e003      	b.n	8002218 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002214:	2300      	movs	r3, #0
 8002216:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002218:	e030      	b.n	800227c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	0013      	movs	r3, r2
 8002224:	2200      	movs	r2, #0
 8002226:	2180      	movs	r1, #128	@ 0x80
 8002228:	f000 fc66 	bl	8002af8 <UART_WaitOnFlagUntilTimeout>
 800222c:	1e03      	subs	r3, r0, #0
 800222e:	d005      	beq.n	800223c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2288      	movs	r2, #136	@ 0x88
 8002234:	2120      	movs	r1, #32
 8002236:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e03d      	b.n	80022b8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10b      	bne.n	800225a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	001a      	movs	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	05d2      	lsls	r2, r2, #23
 800224e:	0dd2      	lsrs	r2, r2, #23
 8002250:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	3302      	adds	r3, #2
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	e007      	b.n	800226a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	781a      	ldrb	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	3301      	adds	r3, #1
 8002268:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2256      	movs	r2, #86	@ 0x56
 800226e:	5a9b      	ldrh	r3, [r3, r2]
 8002270:	b29b      	uxth	r3, r3
 8002272:	3b01      	subs	r3, #1
 8002274:	b299      	uxth	r1, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2256      	movs	r2, #86	@ 0x56
 800227a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2256      	movs	r2, #86	@ 0x56
 8002280:	5a9b      	ldrh	r3, [r3, r2]
 8002282:	b29b      	uxth	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1c8      	bne.n	800221a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	0013      	movs	r3, r2
 8002292:	2200      	movs	r2, #0
 8002294:	2140      	movs	r1, #64	@ 0x40
 8002296:	f000 fc2f 	bl	8002af8 <UART_WaitOnFlagUntilTimeout>
 800229a:	1e03      	subs	r3, r0, #0
 800229c:	d005      	beq.n	80022aa <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2288      	movs	r2, #136	@ 0x88
 80022a2:	2120      	movs	r1, #32
 80022a4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e006      	b.n	80022b8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2288      	movs	r2, #136	@ 0x88
 80022ae:	2120      	movs	r1, #32
 80022b0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80022b6:	2302      	movs	r3, #2
  }
}
 80022b8:	0018      	movs	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b008      	add	sp, #32
 80022be:	bd80      	pop	{r7, pc}

080022c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	b090      	sub	sp, #64	@ 0x40
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80022c8:	231a      	movs	r3, #26
 80022ca:	2220      	movs	r2, #32
 80022cc:	189b      	adds	r3, r3, r2
 80022ce:	19db      	adds	r3, r3, r7
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	431a      	orrs	r2, r3
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4aaf      	ldr	r2, [pc, #700]	@ (80025b0 <UART_SetConfig+0x2f0>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	0019      	movs	r1, r3
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022fe:	430b      	orrs	r3, r1
 8002300:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4aaa      	ldr	r2, [pc, #680]	@ (80025b4 <UART_SetConfig+0x2f4>)
 800230a:	4013      	ands	r3, r2
 800230c:	0018      	movs	r0, r3
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	68d9      	ldr	r1, [r3, #12]
 8002312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	0003      	movs	r3, r0
 8002318:	430b      	orrs	r3, r1
 800231a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4aa4      	ldr	r2, [pc, #656]	@ (80025b8 <UART_SetConfig+0x2f8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d004      	beq.n	8002336 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002332:	4313      	orrs	r3, r2
 8002334:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4a9f      	ldr	r2, [pc, #636]	@ (80025bc <UART_SetConfig+0x2fc>)
 800233e:	4013      	ands	r3, r2
 8002340:	0019      	movs	r1, r3
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002348:	430b      	orrs	r3, r1
 800234a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002352:	220f      	movs	r2, #15
 8002354:	4393      	bics	r3, r2
 8002356:	0018      	movs	r0, r3
 8002358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800235c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	0003      	movs	r3, r0
 8002362:	430b      	orrs	r3, r1
 8002364:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a95      	ldr	r2, [pc, #596]	@ (80025c0 <UART_SetConfig+0x300>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d131      	bne.n	80023d4 <UART_SetConfig+0x114>
 8002370:	4b94      	ldr	r3, [pc, #592]	@ (80025c4 <UART_SetConfig+0x304>)
 8002372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002374:	2203      	movs	r2, #3
 8002376:	4013      	ands	r3, r2
 8002378:	2b03      	cmp	r3, #3
 800237a:	d01d      	beq.n	80023b8 <UART_SetConfig+0xf8>
 800237c:	d823      	bhi.n	80023c6 <UART_SetConfig+0x106>
 800237e:	2b02      	cmp	r3, #2
 8002380:	d00c      	beq.n	800239c <UART_SetConfig+0xdc>
 8002382:	d820      	bhi.n	80023c6 <UART_SetConfig+0x106>
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <UART_SetConfig+0xce>
 8002388:	2b01      	cmp	r3, #1
 800238a:	d00e      	beq.n	80023aa <UART_SetConfig+0xea>
 800238c:	e01b      	b.n	80023c6 <UART_SetConfig+0x106>
 800238e:	231b      	movs	r3, #27
 8002390:	2220      	movs	r2, #32
 8002392:	189b      	adds	r3, r3, r2
 8002394:	19db      	adds	r3, r3, r7
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	e0b4      	b.n	8002506 <UART_SetConfig+0x246>
 800239c:	231b      	movs	r3, #27
 800239e:	2220      	movs	r2, #32
 80023a0:	189b      	adds	r3, r3, r2
 80023a2:	19db      	adds	r3, r3, r7
 80023a4:	2202      	movs	r2, #2
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	e0ad      	b.n	8002506 <UART_SetConfig+0x246>
 80023aa:	231b      	movs	r3, #27
 80023ac:	2220      	movs	r2, #32
 80023ae:	189b      	adds	r3, r3, r2
 80023b0:	19db      	adds	r3, r3, r7
 80023b2:	2204      	movs	r2, #4
 80023b4:	701a      	strb	r2, [r3, #0]
 80023b6:	e0a6      	b.n	8002506 <UART_SetConfig+0x246>
 80023b8:	231b      	movs	r3, #27
 80023ba:	2220      	movs	r2, #32
 80023bc:	189b      	adds	r3, r3, r2
 80023be:	19db      	adds	r3, r3, r7
 80023c0:	2208      	movs	r2, #8
 80023c2:	701a      	strb	r2, [r3, #0]
 80023c4:	e09f      	b.n	8002506 <UART_SetConfig+0x246>
 80023c6:	231b      	movs	r3, #27
 80023c8:	2220      	movs	r2, #32
 80023ca:	189b      	adds	r3, r3, r2
 80023cc:	19db      	adds	r3, r3, r7
 80023ce:	2210      	movs	r2, #16
 80023d0:	701a      	strb	r2, [r3, #0]
 80023d2:	e098      	b.n	8002506 <UART_SetConfig+0x246>
 80023d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a7b      	ldr	r2, [pc, #492]	@ (80025c8 <UART_SetConfig+0x308>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d131      	bne.n	8002442 <UART_SetConfig+0x182>
 80023de:	4b79      	ldr	r3, [pc, #484]	@ (80025c4 <UART_SetConfig+0x304>)
 80023e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e2:	220c      	movs	r2, #12
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b0c      	cmp	r3, #12
 80023e8:	d01d      	beq.n	8002426 <UART_SetConfig+0x166>
 80023ea:	d823      	bhi.n	8002434 <UART_SetConfig+0x174>
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d00c      	beq.n	800240a <UART_SetConfig+0x14a>
 80023f0:	d820      	bhi.n	8002434 <UART_SetConfig+0x174>
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <UART_SetConfig+0x13c>
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d00e      	beq.n	8002418 <UART_SetConfig+0x158>
 80023fa:	e01b      	b.n	8002434 <UART_SetConfig+0x174>
 80023fc:	231b      	movs	r3, #27
 80023fe:	2220      	movs	r2, #32
 8002400:	189b      	adds	r3, r3, r2
 8002402:	19db      	adds	r3, r3, r7
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e07d      	b.n	8002506 <UART_SetConfig+0x246>
 800240a:	231b      	movs	r3, #27
 800240c:	2220      	movs	r2, #32
 800240e:	189b      	adds	r3, r3, r2
 8002410:	19db      	adds	r3, r3, r7
 8002412:	2202      	movs	r2, #2
 8002414:	701a      	strb	r2, [r3, #0]
 8002416:	e076      	b.n	8002506 <UART_SetConfig+0x246>
 8002418:	231b      	movs	r3, #27
 800241a:	2220      	movs	r2, #32
 800241c:	189b      	adds	r3, r3, r2
 800241e:	19db      	adds	r3, r3, r7
 8002420:	2204      	movs	r2, #4
 8002422:	701a      	strb	r2, [r3, #0]
 8002424:	e06f      	b.n	8002506 <UART_SetConfig+0x246>
 8002426:	231b      	movs	r3, #27
 8002428:	2220      	movs	r2, #32
 800242a:	189b      	adds	r3, r3, r2
 800242c:	19db      	adds	r3, r3, r7
 800242e:	2208      	movs	r2, #8
 8002430:	701a      	strb	r2, [r3, #0]
 8002432:	e068      	b.n	8002506 <UART_SetConfig+0x246>
 8002434:	231b      	movs	r3, #27
 8002436:	2220      	movs	r2, #32
 8002438:	189b      	adds	r3, r3, r2
 800243a:	19db      	adds	r3, r3, r7
 800243c:	2210      	movs	r2, #16
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	e061      	b.n	8002506 <UART_SetConfig+0x246>
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a61      	ldr	r2, [pc, #388]	@ (80025cc <UART_SetConfig+0x30c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d106      	bne.n	800245a <UART_SetConfig+0x19a>
 800244c:	231b      	movs	r3, #27
 800244e:	2220      	movs	r2, #32
 8002450:	189b      	adds	r3, r3, r2
 8002452:	19db      	adds	r3, r3, r7
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	e055      	b.n	8002506 <UART_SetConfig+0x246>
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a5c      	ldr	r2, [pc, #368]	@ (80025d0 <UART_SetConfig+0x310>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d106      	bne.n	8002472 <UART_SetConfig+0x1b2>
 8002464:	231b      	movs	r3, #27
 8002466:	2220      	movs	r2, #32
 8002468:	189b      	adds	r3, r3, r2
 800246a:	19db      	adds	r3, r3, r7
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
 8002470:	e049      	b.n	8002506 <UART_SetConfig+0x246>
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a50      	ldr	r2, [pc, #320]	@ (80025b8 <UART_SetConfig+0x2f8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d13e      	bne.n	80024fa <UART_SetConfig+0x23a>
 800247c:	4b51      	ldr	r3, [pc, #324]	@ (80025c4 <UART_SetConfig+0x304>)
 800247e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002480:	23c0      	movs	r3, #192	@ 0xc0
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	4013      	ands	r3, r2
 8002486:	22c0      	movs	r2, #192	@ 0xc0
 8002488:	0112      	lsls	r2, r2, #4
 800248a:	4293      	cmp	r3, r2
 800248c:	d027      	beq.n	80024de <UART_SetConfig+0x21e>
 800248e:	22c0      	movs	r2, #192	@ 0xc0
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	4293      	cmp	r3, r2
 8002494:	d82a      	bhi.n	80024ec <UART_SetConfig+0x22c>
 8002496:	2280      	movs	r2, #128	@ 0x80
 8002498:	0112      	lsls	r2, r2, #4
 800249a:	4293      	cmp	r3, r2
 800249c:	d011      	beq.n	80024c2 <UART_SetConfig+0x202>
 800249e:	2280      	movs	r2, #128	@ 0x80
 80024a0:	0112      	lsls	r2, r2, #4
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d822      	bhi.n	80024ec <UART_SetConfig+0x22c>
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d004      	beq.n	80024b4 <UART_SetConfig+0x1f4>
 80024aa:	2280      	movs	r2, #128	@ 0x80
 80024ac:	00d2      	lsls	r2, r2, #3
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00e      	beq.n	80024d0 <UART_SetConfig+0x210>
 80024b2:	e01b      	b.n	80024ec <UART_SetConfig+0x22c>
 80024b4:	231b      	movs	r3, #27
 80024b6:	2220      	movs	r2, #32
 80024b8:	189b      	adds	r3, r3, r2
 80024ba:	19db      	adds	r3, r3, r7
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e021      	b.n	8002506 <UART_SetConfig+0x246>
 80024c2:	231b      	movs	r3, #27
 80024c4:	2220      	movs	r2, #32
 80024c6:	189b      	adds	r3, r3, r2
 80024c8:	19db      	adds	r3, r3, r7
 80024ca:	2202      	movs	r2, #2
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e01a      	b.n	8002506 <UART_SetConfig+0x246>
 80024d0:	231b      	movs	r3, #27
 80024d2:	2220      	movs	r2, #32
 80024d4:	189b      	adds	r3, r3, r2
 80024d6:	19db      	adds	r3, r3, r7
 80024d8:	2204      	movs	r2, #4
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	e013      	b.n	8002506 <UART_SetConfig+0x246>
 80024de:	231b      	movs	r3, #27
 80024e0:	2220      	movs	r2, #32
 80024e2:	189b      	adds	r3, r3, r2
 80024e4:	19db      	adds	r3, r3, r7
 80024e6:	2208      	movs	r2, #8
 80024e8:	701a      	strb	r2, [r3, #0]
 80024ea:	e00c      	b.n	8002506 <UART_SetConfig+0x246>
 80024ec:	231b      	movs	r3, #27
 80024ee:	2220      	movs	r2, #32
 80024f0:	189b      	adds	r3, r3, r2
 80024f2:	19db      	adds	r3, r3, r7
 80024f4:	2210      	movs	r2, #16
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	e005      	b.n	8002506 <UART_SetConfig+0x246>
 80024fa:	231b      	movs	r3, #27
 80024fc:	2220      	movs	r2, #32
 80024fe:	189b      	adds	r3, r3, r2
 8002500:	19db      	adds	r3, r3, r7
 8002502:	2210      	movs	r2, #16
 8002504:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2b      	ldr	r2, [pc, #172]	@ (80025b8 <UART_SetConfig+0x2f8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d000      	beq.n	8002512 <UART_SetConfig+0x252>
 8002510:	e0a9      	b.n	8002666 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002512:	231b      	movs	r3, #27
 8002514:	2220      	movs	r2, #32
 8002516:	189b      	adds	r3, r3, r2
 8002518:	19db      	adds	r3, r3, r7
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b08      	cmp	r3, #8
 800251e:	d015      	beq.n	800254c <UART_SetConfig+0x28c>
 8002520:	dc18      	bgt.n	8002554 <UART_SetConfig+0x294>
 8002522:	2b04      	cmp	r3, #4
 8002524:	d00d      	beq.n	8002542 <UART_SetConfig+0x282>
 8002526:	dc15      	bgt.n	8002554 <UART_SetConfig+0x294>
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <UART_SetConfig+0x272>
 800252c:	2b02      	cmp	r3, #2
 800252e:	d005      	beq.n	800253c <UART_SetConfig+0x27c>
 8002530:	e010      	b.n	8002554 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002532:	f7ff fbfd 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 8002536:	0003      	movs	r3, r0
 8002538:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800253a:	e014      	b.n	8002566 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800253c:	4b25      	ldr	r3, [pc, #148]	@ (80025d4 <UART_SetConfig+0x314>)
 800253e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002540:	e011      	b.n	8002566 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002542:	f7ff fb69 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8002546:	0003      	movs	r3, r0
 8002548:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800254a:	e00c      	b.n	8002566 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800254c:	2380      	movs	r3, #128	@ 0x80
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002552:	e008      	b.n	8002566 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002558:	231a      	movs	r3, #26
 800255a:	2220      	movs	r2, #32
 800255c:	189b      	adds	r3, r3, r2
 800255e:	19db      	adds	r3, r3, r7
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
        break;
 8002564:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002568:	2b00      	cmp	r3, #0
 800256a:	d100      	bne.n	800256e <UART_SetConfig+0x2ae>
 800256c:	e14b      	b.n	8002806 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002572:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <UART_SetConfig+0x318>)
 8002574:	0052      	lsls	r2, r2, #1
 8002576:	5ad3      	ldrh	r3, [r2, r3]
 8002578:	0019      	movs	r1, r3
 800257a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800257c:	f7fd fdc2 	bl	8000104 <__udivsi3>
 8002580:	0003      	movs	r3, r0
 8002582:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	0013      	movs	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	189b      	adds	r3, r3, r2
 800258e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002590:	429a      	cmp	r2, r3
 8002592:	d305      	bcc.n	80025a0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800259a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800259c:	429a      	cmp	r2, r3
 800259e:	d91d      	bls.n	80025dc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80025a0:	231a      	movs	r3, #26
 80025a2:	2220      	movs	r2, #32
 80025a4:	189b      	adds	r3, r3, r2
 80025a6:	19db      	adds	r3, r3, r7
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	e12b      	b.n	8002806 <UART_SetConfig+0x546>
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	cfff69f3 	.word	0xcfff69f3
 80025b4:	ffffcfff 	.word	0xffffcfff
 80025b8:	40008000 	.word	0x40008000
 80025bc:	11fff4ff 	.word	0x11fff4ff
 80025c0:	40013800 	.word	0x40013800
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40004400 	.word	0x40004400
 80025cc:	40004800 	.word	0x40004800
 80025d0:	40004c00 	.word	0x40004c00
 80025d4:	00f42400 	.word	0x00f42400
 80025d8:	08003ce4 	.word	0x08003ce4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025de:	61bb      	str	r3, [r7, #24]
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025e8:	4b92      	ldr	r3, [pc, #584]	@ (8002834 <UART_SetConfig+0x574>)
 80025ea:	0052      	lsls	r2, r2, #1
 80025ec:	5ad3      	ldrh	r3, [r2, r3]
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	69b8      	ldr	r0, [r7, #24]
 80025fa:	69f9      	ldr	r1, [r7, #28]
 80025fc:	f7fd fef8 	bl	80003f0 <__aeabi_uldivmod>
 8002600:	0002      	movs	r2, r0
 8002602:	000b      	movs	r3, r1
 8002604:	0e11      	lsrs	r1, r2, #24
 8002606:	021d      	lsls	r5, r3, #8
 8002608:	430d      	orrs	r5, r1
 800260a:	0214      	lsls	r4, r2, #8
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68b8      	ldr	r0, [r7, #8]
 800261a:	68f9      	ldr	r1, [r7, #12]
 800261c:	1900      	adds	r0, r0, r4
 800261e:	4169      	adcs	r1, r5
 8002620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	603b      	str	r3, [r7, #0]
 8002626:	2300      	movs	r3, #0
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f7fd fedf 	bl	80003f0 <__aeabi_uldivmod>
 8002632:	0002      	movs	r2, r0
 8002634:	000b      	movs	r3, r1
 8002636:	0013      	movs	r3, r2
 8002638:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800263a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800263c:	23c0      	movs	r3, #192	@ 0xc0
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	429a      	cmp	r2, r3
 8002642:	d309      	bcc.n	8002658 <UART_SetConfig+0x398>
 8002644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	035b      	lsls	r3, r3, #13
 800264a:	429a      	cmp	r2, r3
 800264c:	d204      	bcs.n	8002658 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	e0d6      	b.n	8002806 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002658:	231a      	movs	r3, #26
 800265a:	2220      	movs	r2, #32
 800265c:	189b      	adds	r3, r3, r2
 800265e:	19db      	adds	r3, r3, r7
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
 8002664:	e0cf      	b.n	8002806 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002668:	69da      	ldr	r2, [r3, #28]
 800266a:	2380      	movs	r3, #128	@ 0x80
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	429a      	cmp	r2, r3
 8002670:	d000      	beq.n	8002674 <UART_SetConfig+0x3b4>
 8002672:	e070      	b.n	8002756 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002674:	231b      	movs	r3, #27
 8002676:	2220      	movs	r2, #32
 8002678:	189b      	adds	r3, r3, r2
 800267a:	19db      	adds	r3, r3, r7
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b08      	cmp	r3, #8
 8002680:	d015      	beq.n	80026ae <UART_SetConfig+0x3ee>
 8002682:	dc18      	bgt.n	80026b6 <UART_SetConfig+0x3f6>
 8002684:	2b04      	cmp	r3, #4
 8002686:	d00d      	beq.n	80026a4 <UART_SetConfig+0x3e4>
 8002688:	dc15      	bgt.n	80026b6 <UART_SetConfig+0x3f6>
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <UART_SetConfig+0x3d4>
 800268e:	2b02      	cmp	r3, #2
 8002690:	d005      	beq.n	800269e <UART_SetConfig+0x3de>
 8002692:	e010      	b.n	80026b6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002694:	f7ff fb4c 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 8002698:	0003      	movs	r3, r0
 800269a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800269c:	e014      	b.n	80026c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800269e:	4b66      	ldr	r3, [pc, #408]	@ (8002838 <UART_SetConfig+0x578>)
 80026a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80026a2:	e011      	b.n	80026c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026a4:	f7ff fab8 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 80026a8:	0003      	movs	r3, r0
 80026aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80026ac:	e00c      	b.n	80026c8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026ae:	2380      	movs	r3, #128	@ 0x80
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80026b4:	e008      	b.n	80026c8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80026ba:	231a      	movs	r3, #26
 80026bc:	2220      	movs	r2, #32
 80026be:	189b      	adds	r3, r3, r2
 80026c0:	19db      	adds	r3, r3, r7
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
        break;
 80026c6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d100      	bne.n	80026d0 <UART_SetConfig+0x410>
 80026ce:	e09a      	b.n	8002806 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026d4:	4b57      	ldr	r3, [pc, #348]	@ (8002834 <UART_SetConfig+0x574>)
 80026d6:	0052      	lsls	r2, r2, #1
 80026d8:	5ad3      	ldrh	r3, [r2, r3]
 80026da:	0019      	movs	r1, r3
 80026dc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80026de:	f7fd fd11 	bl	8000104 <__udivsi3>
 80026e2:	0003      	movs	r3, r0
 80026e4:	005a      	lsls	r2, r3, #1
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	085b      	lsrs	r3, r3, #1
 80026ec:	18d2      	adds	r2, r2, r3
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	0019      	movs	r1, r3
 80026f4:	0010      	movs	r0, r2
 80026f6:	f7fd fd05 	bl	8000104 <__udivsi3>
 80026fa:	0003      	movs	r3, r0
 80026fc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002700:	2b0f      	cmp	r3, #15
 8002702:	d921      	bls.n	8002748 <UART_SetConfig+0x488>
 8002704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002706:	2380      	movs	r3, #128	@ 0x80
 8002708:	025b      	lsls	r3, r3, #9
 800270a:	429a      	cmp	r2, r3
 800270c:	d21c      	bcs.n	8002748 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800270e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002710:	b29a      	uxth	r2, r3
 8002712:	200e      	movs	r0, #14
 8002714:	2420      	movs	r4, #32
 8002716:	1903      	adds	r3, r0, r4
 8002718:	19db      	adds	r3, r3, r7
 800271a:	210f      	movs	r1, #15
 800271c:	438a      	bics	r2, r1
 800271e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002722:	085b      	lsrs	r3, r3, #1
 8002724:	b29b      	uxth	r3, r3
 8002726:	2207      	movs	r2, #7
 8002728:	4013      	ands	r3, r2
 800272a:	b299      	uxth	r1, r3
 800272c:	1903      	adds	r3, r0, r4
 800272e:	19db      	adds	r3, r3, r7
 8002730:	1902      	adds	r2, r0, r4
 8002732:	19d2      	adds	r2, r2, r7
 8002734:	8812      	ldrh	r2, [r2, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	1902      	adds	r2, r0, r4
 8002740:	19d2      	adds	r2, r2, r7
 8002742:	8812      	ldrh	r2, [r2, #0]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	e05e      	b.n	8002806 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002748:	231a      	movs	r3, #26
 800274a:	2220      	movs	r2, #32
 800274c:	189b      	adds	r3, r3, r2
 800274e:	19db      	adds	r3, r3, r7
 8002750:	2201      	movs	r2, #1
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	e057      	b.n	8002806 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002756:	231b      	movs	r3, #27
 8002758:	2220      	movs	r2, #32
 800275a:	189b      	adds	r3, r3, r2
 800275c:	19db      	adds	r3, r3, r7
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b08      	cmp	r3, #8
 8002762:	d015      	beq.n	8002790 <UART_SetConfig+0x4d0>
 8002764:	dc18      	bgt.n	8002798 <UART_SetConfig+0x4d8>
 8002766:	2b04      	cmp	r3, #4
 8002768:	d00d      	beq.n	8002786 <UART_SetConfig+0x4c6>
 800276a:	dc15      	bgt.n	8002798 <UART_SetConfig+0x4d8>
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <UART_SetConfig+0x4b6>
 8002770:	2b02      	cmp	r3, #2
 8002772:	d005      	beq.n	8002780 <UART_SetConfig+0x4c0>
 8002774:	e010      	b.n	8002798 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002776:	f7ff fadb 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 800277a:	0003      	movs	r3, r0
 800277c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800277e:	e014      	b.n	80027aa <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002780:	4b2d      	ldr	r3, [pc, #180]	@ (8002838 <UART_SetConfig+0x578>)
 8002782:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002784:	e011      	b.n	80027aa <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002786:	f7ff fa47 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 800278a:	0003      	movs	r3, r0
 800278c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800278e:	e00c      	b.n	80027aa <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002790:	2380      	movs	r3, #128	@ 0x80
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002796:	e008      	b.n	80027aa <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800279c:	231a      	movs	r3, #26
 800279e:	2220      	movs	r2, #32
 80027a0:	189b      	adds	r3, r3, r2
 80027a2:	19db      	adds	r3, r3, r7
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
        break;
 80027a8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80027aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d02a      	beq.n	8002806 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002834 <UART_SetConfig+0x574>)
 80027b6:	0052      	lsls	r2, r2, #1
 80027b8:	5ad3      	ldrh	r3, [r2, r3]
 80027ba:	0019      	movs	r1, r3
 80027bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80027be:	f7fd fca1 	bl	8000104 <__udivsi3>
 80027c2:	0003      	movs	r3, r0
 80027c4:	001a      	movs	r2, r3
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	085b      	lsrs	r3, r3, #1
 80027cc:	18d2      	adds	r2, r2, r3
 80027ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	0019      	movs	r1, r3
 80027d4:	0010      	movs	r0, r2
 80027d6:	f7fd fc95 	bl	8000104 <__udivsi3>
 80027da:	0003      	movs	r3, r0
 80027dc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e0:	2b0f      	cmp	r3, #15
 80027e2:	d90a      	bls.n	80027fa <UART_SetConfig+0x53a>
 80027e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027e6:	2380      	movs	r3, #128	@ 0x80
 80027e8:	025b      	lsls	r3, r3, #9
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d205      	bcs.n	80027fa <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80027ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60da      	str	r2, [r3, #12]
 80027f8:	e005      	b.n	8002806 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80027fa:	231a      	movs	r3, #26
 80027fc:	2220      	movs	r2, #32
 80027fe:	189b      	adds	r3, r3, r2
 8002800:	19db      	adds	r3, r3, r7
 8002802:	2201      	movs	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	226a      	movs	r2, #106	@ 0x6a
 800280a:	2101      	movs	r1, #1
 800280c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	2268      	movs	r2, #104	@ 0x68
 8002812:	2101      	movs	r1, #1
 8002814:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	2200      	movs	r2, #0
 800281a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281e:	2200      	movs	r2, #0
 8002820:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002822:	231a      	movs	r3, #26
 8002824:	2220      	movs	r2, #32
 8002826:	189b      	adds	r3, r3, r2
 8002828:	19db      	adds	r3, r3, r7
 800282a:	781b      	ldrb	r3, [r3, #0]
}
 800282c:	0018      	movs	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	b010      	add	sp, #64	@ 0x40
 8002832:	bdb0      	pop	{r4, r5, r7, pc}
 8002834:	08003ce4 	.word	0x08003ce4
 8002838:	00f42400 	.word	0x00f42400

0800283c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002848:	2208      	movs	r2, #8
 800284a:	4013      	ands	r3, r2
 800284c:	d00b      	beq.n	8002866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a4a      	ldr	r2, [pc, #296]	@ (8002980 <UART_AdvFeatureConfig+0x144>)
 8002856:	4013      	ands	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286a:	2201      	movs	r2, #1
 800286c:	4013      	ands	r3, r2
 800286e:	d00b      	beq.n	8002888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a43      	ldr	r2, [pc, #268]	@ (8002984 <UART_AdvFeatureConfig+0x148>)
 8002878:	4013      	ands	r3, r2
 800287a:	0019      	movs	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288c:	2202      	movs	r2, #2
 800288e:	4013      	ands	r3, r2
 8002890:	d00b      	beq.n	80028aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4a3b      	ldr	r2, [pc, #236]	@ (8002988 <UART_AdvFeatureConfig+0x14c>)
 800289a:	4013      	ands	r3, r2
 800289c:	0019      	movs	r1, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ae:	2204      	movs	r2, #4
 80028b0:	4013      	ands	r3, r2
 80028b2:	d00b      	beq.n	80028cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4a34      	ldr	r2, [pc, #208]	@ (800298c <UART_AdvFeatureConfig+0x150>)
 80028bc:	4013      	ands	r3, r2
 80028be:	0019      	movs	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d0:	2210      	movs	r2, #16
 80028d2:	4013      	ands	r3, r2
 80028d4:	d00b      	beq.n	80028ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002990 <UART_AdvFeatureConfig+0x154>)
 80028de:	4013      	ands	r3, r2
 80028e0:	0019      	movs	r1, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f2:	2220      	movs	r2, #32
 80028f4:	4013      	ands	r3, r2
 80028f6:	d00b      	beq.n	8002910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	4a25      	ldr	r2, [pc, #148]	@ (8002994 <UART_AdvFeatureConfig+0x158>)
 8002900:	4013      	ands	r3, r2
 8002902:	0019      	movs	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002914:	2240      	movs	r2, #64	@ 0x40
 8002916:	4013      	ands	r3, r2
 8002918:	d01d      	beq.n	8002956 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a1d      	ldr	r2, [pc, #116]	@ (8002998 <UART_AdvFeatureConfig+0x15c>)
 8002922:	4013      	ands	r3, r2
 8002924:	0019      	movs	r1, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002936:	2380      	movs	r3, #128	@ 0x80
 8002938:	035b      	lsls	r3, r3, #13
 800293a:	429a      	cmp	r2, r3
 800293c:	d10b      	bne.n	8002956 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a15      	ldr	r2, [pc, #84]	@ (800299c <UART_AdvFeatureConfig+0x160>)
 8002946:	4013      	ands	r3, r2
 8002948:	0019      	movs	r1, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295a:	2280      	movs	r2, #128	@ 0x80
 800295c:	4013      	ands	r3, r2
 800295e:	d00b      	beq.n	8002978 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4a0e      	ldr	r2, [pc, #56]	@ (80029a0 <UART_AdvFeatureConfig+0x164>)
 8002968:	4013      	ands	r3, r2
 800296a:	0019      	movs	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	605a      	str	r2, [r3, #4]
  }
}
 8002978:	46c0      	nop			@ (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b002      	add	sp, #8
 800297e:	bd80      	pop	{r7, pc}
 8002980:	ffff7fff 	.word	0xffff7fff
 8002984:	fffdffff 	.word	0xfffdffff
 8002988:	fffeffff 	.word	0xfffeffff
 800298c:	fffbffff 	.word	0xfffbffff
 8002990:	ffffefff 	.word	0xffffefff
 8002994:	ffffdfff 	.word	0xffffdfff
 8002998:	ffefffff 	.word	0xffefffff
 800299c:	ff9fffff 	.word	0xff9fffff
 80029a0:	fff7ffff 	.word	0xfff7ffff

080029a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b092      	sub	sp, #72	@ 0x48
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2290      	movs	r2, #144	@ 0x90
 80029b0:	2100      	movs	r1, #0
 80029b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029b4:	f7fe f998 	bl	8000ce8 <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2208      	movs	r2, #8
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d12d      	bne.n	8002a26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029cc:	2280      	movs	r2, #128	@ 0x80
 80029ce:	0391      	lsls	r1, r2, #14
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4a47      	ldr	r2, [pc, #284]	@ (8002af0 <UART_CheckIdleState+0x14c>)
 80029d4:	9200      	str	r2, [sp, #0]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f000 f88e 	bl	8002af8 <UART_WaitOnFlagUntilTimeout>
 80029dc:	1e03      	subs	r3, r0, #0
 80029de:	d022      	beq.n	8002a26 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e0:	f3ef 8310 	mrs	r3, PRIMASK
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80029e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029ea:	2301      	movs	r3, #1
 80029ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f0:	f383 8810 	msr	PRIMASK, r3
}
 80029f4:	46c0      	nop			@ (mov r8, r8)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2180      	movs	r1, #128	@ 0x80
 8002a02:	438a      	bics	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a0c:	f383 8810 	msr	PRIMASK, r3
}
 8002a10:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2288      	movs	r2, #136	@ 0x88
 8002a16:	2120      	movs	r1, #32
 8002a18:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2284      	movs	r2, #132	@ 0x84
 8002a1e:	2100      	movs	r1, #0
 8002a20:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e060      	b.n	8002ae8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d146      	bne.n	8002ac2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a36:	2280      	movs	r2, #128	@ 0x80
 8002a38:	03d1      	lsls	r1, r2, #15
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8002af0 <UART_CheckIdleState+0x14c>)
 8002a3e:	9200      	str	r2, [sp, #0]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f000 f859 	bl	8002af8 <UART_WaitOnFlagUntilTimeout>
 8002a46:	1e03      	subs	r3, r0, #0
 8002a48:	d03b      	beq.n	8002ac2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a50:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a54:	2301      	movs	r3, #1
 8002a56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f383 8810 	msr	PRIMASK, r3
}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4922      	ldr	r1, [pc, #136]	@ (8002af4 <UART_CheckIdleState+0x150>)
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f383 8810 	msr	PRIMASK, r3
}
 8002a7a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a80:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a82:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a84:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a86:	2301      	movs	r3, #1
 8002a88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f383 8810 	msr	PRIMASK, r3
}
 8002a90:	46c0      	nop			@ (mov r8, r8)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	438a      	bics	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	f383 8810 	msr	PRIMASK, r3
}
 8002aac:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	228c      	movs	r2, #140	@ 0x8c
 8002ab2:	2120      	movs	r1, #32
 8002ab4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2284      	movs	r2, #132	@ 0x84
 8002aba:	2100      	movs	r1, #0
 8002abc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e012      	b.n	8002ae8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2288      	movs	r2, #136	@ 0x88
 8002ac6:	2120      	movs	r1, #32
 8002ac8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	228c      	movs	r2, #140	@ 0x8c
 8002ace:	2120      	movs	r1, #32
 8002ad0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2284      	movs	r2, #132	@ 0x84
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b010      	add	sp, #64	@ 0x40
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	01ffffff 	.word	0x01ffffff
 8002af4:	fffffedf 	.word	0xfffffedf

08002af8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	1dfb      	adds	r3, r7, #7
 8002b06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b08:	e051      	b.n	8002bae <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	d04e      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b10:	f7fe f8ea 	bl	8000ce8 <HAL_GetTick>
 8002b14:	0002      	movs	r2, r0
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d302      	bcc.n	8002b26 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e051      	b.n	8002bce <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2204      	movs	r2, #4
 8002b32:	4013      	ands	r3, r2
 8002b34:	d03b      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b80      	cmp	r3, #128	@ 0x80
 8002b3a:	d038      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b40      	cmp	r3, #64	@ 0x40
 8002b40:	d035      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	2208      	movs	r2, #8
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d111      	bne.n	8002b74 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2208      	movs	r2, #8
 8002b56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f000 f83c 	bl	8002bd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2290      	movs	r2, #144	@ 0x90
 8002b64:	2108      	movs	r1, #8
 8002b66:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2284      	movs	r2, #132	@ 0x84
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e02c      	b.n	8002bce <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	2380      	movs	r3, #128	@ 0x80
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	401a      	ands	r2, r3
 8002b80:	2380      	movs	r3, #128	@ 0x80
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d112      	bne.n	8002bae <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2280      	movs	r2, #128	@ 0x80
 8002b8e:	0112      	lsls	r2, r2, #4
 8002b90:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	0018      	movs	r0, r3
 8002b96:	f000 f81f 	bl	8002bd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2290      	movs	r2, #144	@ 0x90
 8002b9e:	2120      	movs	r1, #32
 8002ba0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2284      	movs	r2, #132	@ 0x84
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e00f      	b.n	8002bce <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	425a      	negs	r2, r3
 8002bbe:	4153      	adcs	r3, r2
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	001a      	movs	r2, r3
 8002bc4:	1dfb      	adds	r3, r7, #7
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d09e      	beq.n	8002b0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b004      	add	sp, #16
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08e      	sub	sp, #56	@ 0x38
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be0:	f3ef 8310 	mrs	r3, PRIMASK
 8002be4:	617b      	str	r3, [r7, #20]
  return(result);
 8002be6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bea:	2301      	movs	r3, #1
 8002bec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f383 8810 	msr	PRIMASK, r3
}
 8002bf4:	46c0      	nop			@ (mov r8, r8)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4926      	ldr	r1, [pc, #152]	@ (8002c9c <UART_EndRxTransfer+0xc4>)
 8002c02:	400a      	ands	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f383 8810 	msr	PRIMASK, r3
}
 8002c10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c12:	f3ef 8310 	mrs	r3, PRIMASK
 8002c16:	623b      	str	r3, [r7, #32]
  return(result);
 8002c18:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c22:	f383 8810 	msr	PRIMASK, r3
}
 8002c26:	46c0      	nop			@ (mov r8, r8)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	491b      	ldr	r1, [pc, #108]	@ (8002ca0 <UART_EndRxTransfer+0xc8>)
 8002c34:	400a      	ands	r2, r1
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c3e:	f383 8810 	msr	PRIMASK, r3
}
 8002c42:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d118      	bne.n	8002c7e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c50:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c52:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c56:	2301      	movs	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f383 8810 	msr	PRIMASK, r3
}
 8002c60:	46c0      	nop			@ (mov r8, r8)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2110      	movs	r1, #16
 8002c6e:	438a      	bics	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f383 8810 	msr	PRIMASK, r3
}
 8002c7c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	228c      	movs	r2, #140	@ 0x8c
 8002c82:	2120      	movs	r1, #32
 8002c84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002c92:	46c0      	nop			@ (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b00e      	add	sp, #56	@ 0x38
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	fffffedf 	.word	0xfffffedf
 8002ca0:	effffffe 	.word	0xeffffffe

08002ca4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2284      	movs	r2, #132	@ 0x84
 8002cb0:	5c9b      	ldrb	r3, [r3, r2]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_UARTEx_DisableFifoMode+0x16>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e027      	b.n	8002d0a <HAL_UARTEx_DisableFifoMode+0x66>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2284      	movs	r2, #132	@ 0x84
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2288      	movs	r2, #136	@ 0x88
 8002cc6:	2124      	movs	r1, #36	@ 0x24
 8002cc8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2101      	movs	r1, #1
 8002cde:	438a      	bics	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a0b      	ldr	r2, [pc, #44]	@ (8002d14 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2288      	movs	r2, #136	@ 0x88
 8002cfc:	2120      	movs	r1, #32
 8002cfe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2284      	movs	r2, #132	@ 0x84
 8002d04:	2100      	movs	r1, #0
 8002d06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b004      	add	sp, #16
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	dfffffff 	.word	0xdfffffff

08002d18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2284      	movs	r2, #132	@ 0x84
 8002d26:	5c9b      	ldrb	r3, [r3, r2]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e02e      	b.n	8002d8e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2284      	movs	r2, #132	@ 0x84
 8002d34:	2101      	movs	r1, #1
 8002d36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2288      	movs	r2, #136	@ 0x88
 8002d3c:	2124      	movs	r1, #36	@ 0x24
 8002d3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2101      	movs	r1, #1
 8002d54:	438a      	bics	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	08d9      	lsrs	r1, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f000 f854 	bl	8002e1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2288      	movs	r2, #136	@ 0x88
 8002d80:	2120      	movs	r1, #32
 8002d82:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2284      	movs	r2, #132	@ 0x84
 8002d88:	2100      	movs	r1, #0
 8002d8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b004      	add	sp, #16
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2284      	movs	r2, #132	@ 0x84
 8002da6:	5c9b      	ldrb	r3, [r3, r2]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e02f      	b.n	8002e10 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2284      	movs	r2, #132	@ 0x84
 8002db4:	2101      	movs	r1, #1
 8002db6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2288      	movs	r2, #136	@ 0x88
 8002dbc:	2124      	movs	r1, #36	@ 0x24
 8002dbe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	438a      	bics	r2, r1
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	4a0e      	ldr	r2, [pc, #56]	@ (8002e18 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	0019      	movs	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	0018      	movs	r0, r3
 8002df2:	f000 f813 	bl	8002e1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2288      	movs	r2, #136	@ 0x88
 8002e02:	2120      	movs	r1, #32
 8002e04:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2284      	movs	r2, #132	@ 0x84
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	0018      	movs	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b004      	add	sp, #16
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	f1ffffff 	.word	0xf1ffffff

08002e1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d108      	bne.n	8002e3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	226a      	movs	r2, #106	@ 0x6a
 8002e30:	2101      	movs	r1, #1
 8002e32:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2268      	movs	r2, #104	@ 0x68
 8002e38:	2101      	movs	r1, #1
 8002e3a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002e3c:	e043      	b.n	8002ec6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002e3e:	260f      	movs	r6, #15
 8002e40:	19bb      	adds	r3, r7, r6
 8002e42:	2208      	movs	r2, #8
 8002e44:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002e46:	200e      	movs	r0, #14
 8002e48:	183b      	adds	r3, r7, r0
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	0e5b      	lsrs	r3, r3, #25
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	240d      	movs	r4, #13
 8002e5a:	193b      	adds	r3, r7, r4
 8002e5c:	2107      	movs	r1, #7
 8002e5e:	400a      	ands	r2, r1
 8002e60:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	0f5b      	lsrs	r3, r3, #29
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	250c      	movs	r5, #12
 8002e6e:	197b      	adds	r3, r7, r5
 8002e70:	2107      	movs	r1, #7
 8002e72:	400a      	ands	r2, r1
 8002e74:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e76:	183b      	adds	r3, r7, r0
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	197a      	adds	r2, r7, r5
 8002e7c:	7812      	ldrb	r2, [r2, #0]
 8002e7e:	4914      	ldr	r1, [pc, #80]	@ (8002ed0 <UARTEx_SetNbDataToProcess+0xb4>)
 8002e80:	5c8a      	ldrb	r2, [r1, r2]
 8002e82:	435a      	muls	r2, r3
 8002e84:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002e86:	197b      	adds	r3, r7, r5
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	4a12      	ldr	r2, [pc, #72]	@ (8002ed4 <UARTEx_SetNbDataToProcess+0xb8>)
 8002e8c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e8e:	0019      	movs	r1, r3
 8002e90:	f7fd f9c2 	bl	8000218 <__divsi3>
 8002e94:	0003      	movs	r3, r0
 8002e96:	b299      	uxth	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	226a      	movs	r2, #106	@ 0x6a
 8002e9c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002e9e:	19bb      	adds	r3, r7, r6
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	193a      	adds	r2, r7, r4
 8002ea4:	7812      	ldrb	r2, [r2, #0]
 8002ea6:	490a      	ldr	r1, [pc, #40]	@ (8002ed0 <UARTEx_SetNbDataToProcess+0xb4>)
 8002ea8:	5c8a      	ldrb	r2, [r1, r2]
 8002eaa:	435a      	muls	r2, r3
 8002eac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002eae:	193b      	adds	r3, r7, r4
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	4a08      	ldr	r2, [pc, #32]	@ (8002ed4 <UARTEx_SetNbDataToProcess+0xb8>)
 8002eb4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	f7fd f9ae 	bl	8000218 <__divsi3>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	b299      	uxth	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2268      	movs	r2, #104	@ 0x68
 8002ec4:	5299      	strh	r1, [r3, r2]
}
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	b005      	add	sp, #20
 8002ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ece:	46c0      	nop			@ (mov r8, r8)
 8002ed0:	08003cfc 	.word	0x08003cfc
 8002ed4:	08003d04 	.word	0x08003d04

08002ed8 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e03f      	b.n	8002f6a <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2259      	movs	r2, #89	@ 0x59
 8002eee:	5c9b      	ldrb	r3, [r3, r2]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d107      	bne.n	8002f06 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2258      	movs	r2, #88	@ 0x58
 8002efa:	2100      	movs	r1, #0
 8002efc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f7fd fd9f 	bl	8000a44 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2259      	movs	r2, #89	@ 0x59
 8002f0a:	2102      	movs	r1, #2
 8002f0c:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2101      	movs	r1, #1
 8002f1a:	438a      	bics	r2, r1
 8002f1c:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f000 fa2d 	bl	8003380 <USART_SetConfig>
 8002f26:	0003      	movs	r3, r0
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e01c      	b.n	8002f6a <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	490e      	ldr	r1, [pc, #56]	@ (8002f74 <HAL_USART_Init+0x9c>)
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	212a      	movs	r1, #42	@ 0x2a
 8002f4c:	438a      	bics	r2, r1
 8002f4e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	0018      	movs	r0, r3
 8002f64:	f000 fca8 	bl	80038b8 <USART_CheckIdleState>
 8002f68:	0003      	movs	r3, r0
}
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b002      	add	sp, #8
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	46c0      	nop			@ (mov r8, r8)
 8002f74:	ffffbfff 	.word	0xffffbfff

08002f78 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	4ab3      	ldr	r2, [pc, #716]	@ (8003268 <HAL_USART_IRQHandler+0x2f0>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d117      	bne.n	8002fd6 <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	4013      	ands	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d104      	bne.n	8002fc0 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	2380      	movs	r3, #128	@ 0x80
 8002fba:	055b      	lsls	r3, r3, #21
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d100      	bne.n	8002fca <HAL_USART_IRQHandler+0x52>
 8002fc8:	e14a      	b.n	8003260 <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	0010      	movs	r0, r2
 8002fd2:	4798      	blx	r3
      }
      return;
 8002fd4:	e144      	b.n	8003260 <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d100      	bne.n	8002fde <HAL_USART_IRQHandler+0x66>
 8002fdc:	e100      	b.n	80031e0 <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	4aa2      	ldr	r2, [pc, #648]	@ (800326c <HAL_USART_IRQHandler+0x2f4>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d105      	bne.n	8002ff2 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	2390      	movs	r3, #144	@ 0x90
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4013      	ands	r3, r2
 8002fee:	d100      	bne.n	8002ff2 <HAL_USART_IRQHandler+0x7a>
 8002ff0:	e0f6      	b.n	80031e0 <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d00e      	beq.n	8003018 <HAL_USART_IRQHandler+0xa0>
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	2380      	movs	r3, #128	@ 0x80
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4013      	ands	r3, r2
 8003002:	d009      	beq.n	8003018 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2201      	movs	r2, #1
 800300a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003010:	2201      	movs	r2, #1
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	2202      	movs	r2, #2
 800301c:	4013      	ands	r3, r2
 800301e:	d00d      	beq.n	800303c <HAL_USART_IRQHandler+0xc4>
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2201      	movs	r2, #1
 8003024:	4013      	ands	r3, r2
 8003026:	d009      	beq.n	800303c <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2202      	movs	r2, #2
 800302e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003034:	2204      	movs	r2, #4
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	2204      	movs	r2, #4
 8003040:	4013      	ands	r3, r2
 8003042:	d00d      	beq.n	8003060 <HAL_USART_IRQHandler+0xe8>
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2201      	movs	r2, #1
 8003048:	4013      	ands	r3, r2
 800304a:	d009      	beq.n	8003060 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2204      	movs	r2, #4
 8003052:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003058:	2202      	movs	r2, #2
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2208      	movs	r2, #8
 8003064:	4013      	ands	r3, r2
 8003066:	d011      	beq.n	800308c <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2220      	movs	r2, #32
 800306c:	4013      	ands	r3, r2
 800306e:	d103      	bne.n	8003078 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	4a7e      	ldr	r2, [pc, #504]	@ (800326c <HAL_USART_IRQHandler+0x2f4>)
 8003074:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003076:	d009      	beq.n	800308c <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2208      	movs	r2, #8
 800307e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003084:	2208      	movs	r2, #8
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	2380      	movs	r3, #128	@ 0x80
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	4013      	ands	r3, r2
 8003094:	d00f      	beq.n	80030b6 <HAL_USART_IRQHandler+0x13e>
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	2380      	movs	r3, #128	@ 0x80
 800309a:	04db      	lsls	r3, r3, #19
 800309c:	4013      	ands	r3, r2
 800309e:	d00a      	beq.n	80030b6 <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2280      	movs	r2, #128	@ 0x80
 80030a6:	0112      	lsls	r2, r2, #4
 80030a8:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ae:	2280      	movs	r2, #128	@ 0x80
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	2380      	movs	r3, #128	@ 0x80
 80030ba:	019b      	lsls	r3, r3, #6
 80030bc:	4013      	ands	r3, r2
 80030be:	d01a      	beq.n	80030f6 <HAL_USART_IRQHandler+0x17e>
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2201      	movs	r2, #1
 80030c4:	4013      	ands	r3, r2
 80030c6:	d016      	beq.n	80030f6 <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2259      	movs	r2, #89	@ 0x59
 80030cc:	5c9b      	ldrb	r3, [r3, r2]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b22      	cmp	r3, #34	@ 0x22
 80030d2:	d105      	bne.n	80030e0 <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2280      	movs	r2, #128	@ 0x80
 80030da:	0192      	lsls	r2, r2, #6
 80030dc:	621a      	str	r2, [r3, #32]
        return;
 80030de:	e0ca      	b.n	8003276 <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2280      	movs	r2, #128	@ 0x80
 80030e6:	0192      	lsls	r2, r2, #6
 80030e8:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ee:	2220      	movs	r2, #32
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d100      	bne.n	8003100 <HAL_USART_IRQHandler+0x188>
 80030fe:	e0b1      	b.n	8003264 <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	2220      	movs	r2, #32
 8003104:	4013      	ands	r3, r2
 8003106:	d011      	beq.n	800312c <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2220      	movs	r2, #32
 800310c:	4013      	ands	r3, r2
 800310e:	d104      	bne.n	800311a <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	2380      	movs	r3, #128	@ 0x80
 8003114:	055b      	lsls	r3, r3, #21
 8003116:	4013      	ands	r3, r2
 8003118:	d008      	beq.n	800312c <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800311e:	2b00      	cmp	r3, #0
 8003120:	d004      	beq.n	800312c <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	0010      	movs	r0, r2
 800312a:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003130:	2208      	movs	r2, #8
 8003132:	4013      	ands	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2240      	movs	r2, #64	@ 0x40
 800313e:	4013      	ands	r3, r2
 8003140:	2b40      	cmp	r3, #64	@ 0x40
 8003142:	d002      	beq.n	800314a <HAL_USART_IRQHandler+0x1d2>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d040      	beq.n	80031cc <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	0018      	movs	r0, r3
 800314e:	f000 f8ad 	bl	80032ac <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2240      	movs	r2, #64	@ 0x40
 800315a:	4013      	ands	r3, r2
 800315c:	2b40      	cmp	r3, #64	@ 0x40
 800315e:	d130      	bne.n	80031c2 <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2140      	movs	r1, #64	@ 0x40
 800316c:	438a      	bics	r2, r1
 800316e:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800317c:	2200      	movs	r2, #0
 800317e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003184:	0018      	movs	r0, r3
 8003186:	f7fd fed1 	bl	8000f2c <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318e:	2b00      	cmp	r3, #0
 8003190:	d012      	beq.n	80031b8 <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003196:	4a36      	ldr	r2, [pc, #216]	@ (8003270 <HAL_USART_IRQHandler+0x2f8>)
 8003198:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800319e:	0018      	movs	r0, r3
 80031a0:	f7fd fec4 	bl	8000f2c <HAL_DMA_Abort_IT>
 80031a4:	1e03      	subs	r3, r0, #0
 80031a6:	d019      	beq.n	80031dc <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b2:	0018      	movs	r0, r3
 80031b4:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80031b6:	e011      	b.n	80031dc <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	0018      	movs	r0, r3
 80031bc:	f000 f86e 	bl	800329c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80031c0:	e00c      	b.n	80031dc <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f000 f869 	bl	800329c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80031ca:	e007      	b.n	80031dc <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	0018      	movs	r0, r3
 80031d0:	f000 f864 	bl	800329c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }
    return;
 80031da:	e043      	b.n	8003264 <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80031dc:	46c0      	nop			@ (mov r8, r8)
    return;
 80031de:	e041      	b.n	8003264 <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	2280      	movs	r2, #128	@ 0x80
 80031e4:	4013      	ands	r3, r2
 80031e6:	d012      	beq.n	800320e <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2280      	movs	r2, #128	@ 0x80
 80031ec:	4013      	ands	r3, r2
 80031ee:	d104      	bne.n	80031fa <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	2380      	movs	r3, #128	@ 0x80
 80031f4:	041b      	lsls	r3, r3, #16
 80031f6:	4013      	ands	r3, r2
 80031f8:	d009      	beq.n	800320e <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d038      	beq.n	8003274 <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	0010      	movs	r0, r2
 800320a:	4798      	blx	r3
    }
    return;
 800320c:	e032      	b.n	8003274 <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	2240      	movs	r2, #64	@ 0x40
 8003212:	4013      	ands	r3, r2
 8003214:	d008      	beq.n	8003228 <HAL_USART_IRQHandler+0x2b0>
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2240      	movs	r2, #64	@ 0x40
 800321a:	4013      	ands	r3, r2
 800321c:	d004      	beq.n	8003228 <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	0018      	movs	r0, r3
 8003222:	f000 fb8d 	bl	8003940 <USART_EndTransmit_IT>
    return;
 8003226:	e026      	b.n	8003276 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	2380      	movs	r3, #128	@ 0x80
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	4013      	ands	r3, r2
 8003230:	d009      	beq.n	8003246 <HAL_USART_IRQHandler+0x2ce>
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	2380      	movs	r3, #128	@ 0x80
 8003236:	05db      	lsls	r3, r3, #23
 8003238:	4013      	ands	r3, r2
 800323a:	d004      	beq.n	8003246 <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	0018      	movs	r0, r3
 8003240:	f000 fbc9 	bl	80039d6 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8003244:	e017      	b.n	8003276 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	2380      	movs	r3, #128	@ 0x80
 800324a:	045b      	lsls	r3, r3, #17
 800324c:	4013      	ands	r3, r2
 800324e:	d012      	beq.n	8003276 <HAL_USART_IRQHandler+0x2fe>
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	da0f      	bge.n	8003276 <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	0018      	movs	r0, r3
 800325a:	f000 fbb4 	bl	80039c6 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800325e:	e00a      	b.n	8003276 <HAL_USART_IRQHandler+0x2fe>
      return;
 8003260:	46c0      	nop			@ (mov r8, r8)
 8003262:	e008      	b.n	8003276 <HAL_USART_IRQHandler+0x2fe>
    return;
 8003264:	46c0      	nop			@ (mov r8, r8)
 8003266:	e006      	b.n	8003276 <HAL_USART_IRQHandler+0x2fe>
 8003268:	0000280f 	.word	0x0000280f
 800326c:	10000001 	.word	0x10000001
 8003270:	080032ed 	.word	0x080032ed
    return;
 8003274:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003276:	46bd      	mov	sp, r7
 8003278:	b008      	add	sp, #32
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8003284:	46c0      	nop			@ (mov r8, r8)
 8003286:	46bd      	mov	sp, r7
 8003288:	b002      	add	sp, #8
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8003294:	46c0      	nop			@ (mov r8, r8)
 8003296:	46bd      	mov	sp, r7
 8003298:	b002      	add	sp, #8
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 80032a4:	46c0      	nop			@ (mov r8, r8)
 80032a6:	46bd      	mov	sp, r7
 80032a8:	b002      	add	sp, #8
 80032aa:	bd80      	pop	{r7, pc}

080032ac <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4909      	ldr	r1, [pc, #36]	@ (80032e4 <USART_EndTransfer+0x38>)
 80032c0:	400a      	ands	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4906      	ldr	r1, [pc, #24]	@ (80032e8 <USART_EndTransfer+0x3c>)
 80032d0:	400a      	ands	r2, r1
 80032d2:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2259      	movs	r2, #89	@ 0x59
 80032d8:	2101      	movs	r1, #1
 80032da:	5499      	strb	r1, [r3, r2]
}
 80032dc:	46c0      	nop			@ (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	b002      	add	sp, #8
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	fffffe1f 	.word	0xfffffe1f
 80032e8:	ef7ffffe 	.word	0xef7ffffe

080032ec <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f8:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	86da      	strh	r2, [r3, #54]	@ 0x36
  husart->TxXferCount = 0U;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	0018      	movs	r0, r3
 800330a:	f7ff ffc7 	bl	800329c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800330e:	46c0      	nop			@ (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b004      	add	sp, #16
 8003314:	bd80      	pop	{r7, pc}

08003316 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	60f8      	str	r0, [r7, #12]
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	603b      	str	r3, [r7, #0]
 8003322:	1dfb      	adds	r3, r7, #7
 8003324:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003326:	e017      	b.n	8003358 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	3301      	adds	r3, #1
 800332c:	d014      	beq.n	8003358 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7fd fcdb 	bl	8000ce8 <HAL_GetTick>
 8003332:	0002      	movs	r2, r0
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <USART_WaitOnFlagUntilTimeout+0x2e>
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d109      	bne.n	8003358 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2259      	movs	r2, #89	@ 0x59
 8003348:	2101      	movs	r1, #1
 800334a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2258      	movs	r2, #88	@ 0x58
 8003350:	2100      	movs	r1, #0
 8003352:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e00f      	b.n	8003378 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	4013      	ands	r3, r2
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	425a      	negs	r2, r3
 8003368:	4153      	adcs	r3, r2
 800336a:	b2db      	uxtb	r3, r3
 800336c:	001a      	movs	r2, r3
 800336e:	1dfb      	adds	r3, r7, #7
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d0d8      	beq.n	8003328 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	0018      	movs	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	b004      	add	sp, #16
 800337e:	bd80      	pop	{r7, pc}

08003380 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8003388:	231e      	movs	r3, #30
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8003390:	2300      	movs	r3, #0
 8003392:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	2280      	movs	r2, #128	@ 0x80
 80033a6:	0212      	lsls	r2, r2, #8
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4ab1      	ldr	r2, [pc, #708]	@ (8003678 <USART_SetConfig+0x2f8>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	0019      	movs	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	430a      	orrs	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80033c2:	2380      	movs	r3, #128	@ 0x80
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	4313      	orrs	r3, r2
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	4aa2      	ldr	r2, [pc, #648]	@ (800367c <USART_SetConfig+0x2fc>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	0019      	movs	r1, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003408:	220f      	movs	r2, #15
 800340a:	4393      	bics	r3, r2
 800340c:	0019      	movs	r1, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a98      	ldr	r2, [pc, #608]	@ (8003680 <USART_SetConfig+0x300>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d127      	bne.n	8003474 <USART_SetConfig+0xf4>
 8003424:	4b97      	ldr	r3, [pc, #604]	@ (8003684 <USART_SetConfig+0x304>)
 8003426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003428:	2203      	movs	r2, #3
 800342a:	4013      	ands	r3, r2
 800342c:	2b03      	cmp	r3, #3
 800342e:	d017      	beq.n	8003460 <USART_SetConfig+0xe0>
 8003430:	d81b      	bhi.n	800346a <USART_SetConfig+0xea>
 8003432:	2b02      	cmp	r3, #2
 8003434:	d00a      	beq.n	800344c <USART_SetConfig+0xcc>
 8003436:	d818      	bhi.n	800346a <USART_SetConfig+0xea>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <USART_SetConfig+0xc2>
 800343c:	2b01      	cmp	r3, #1
 800343e:	d00a      	beq.n	8003456 <USART_SetConfig+0xd6>
 8003440:	e013      	b.n	800346a <USART_SetConfig+0xea>
 8003442:	231f      	movs	r3, #31
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	2200      	movs	r2, #0
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	e058      	b.n	80034fe <USART_SetConfig+0x17e>
 800344c:	231f      	movs	r3, #31
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	2202      	movs	r2, #2
 8003452:	701a      	strb	r2, [r3, #0]
 8003454:	e053      	b.n	80034fe <USART_SetConfig+0x17e>
 8003456:	231f      	movs	r3, #31
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	2204      	movs	r2, #4
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	e04e      	b.n	80034fe <USART_SetConfig+0x17e>
 8003460:	231f      	movs	r3, #31
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	2208      	movs	r2, #8
 8003466:	701a      	strb	r2, [r3, #0]
 8003468:	e049      	b.n	80034fe <USART_SetConfig+0x17e>
 800346a:	231f      	movs	r3, #31
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	2210      	movs	r2, #16
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	e044      	b.n	80034fe <USART_SetConfig+0x17e>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a83      	ldr	r2, [pc, #524]	@ (8003688 <USART_SetConfig+0x308>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d127      	bne.n	80034ce <USART_SetConfig+0x14e>
 800347e:	4b81      	ldr	r3, [pc, #516]	@ (8003684 <USART_SetConfig+0x304>)
 8003480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003482:	220c      	movs	r2, #12
 8003484:	4013      	ands	r3, r2
 8003486:	2b0c      	cmp	r3, #12
 8003488:	d017      	beq.n	80034ba <USART_SetConfig+0x13a>
 800348a:	d81b      	bhi.n	80034c4 <USART_SetConfig+0x144>
 800348c:	2b08      	cmp	r3, #8
 800348e:	d00a      	beq.n	80034a6 <USART_SetConfig+0x126>
 8003490:	d818      	bhi.n	80034c4 <USART_SetConfig+0x144>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <USART_SetConfig+0x11c>
 8003496:	2b04      	cmp	r3, #4
 8003498:	d00a      	beq.n	80034b0 <USART_SetConfig+0x130>
 800349a:	e013      	b.n	80034c4 <USART_SetConfig+0x144>
 800349c:	231f      	movs	r3, #31
 800349e:	18fb      	adds	r3, r7, r3
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	e02b      	b.n	80034fe <USART_SetConfig+0x17e>
 80034a6:	231f      	movs	r3, #31
 80034a8:	18fb      	adds	r3, r7, r3
 80034aa:	2202      	movs	r2, #2
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	e026      	b.n	80034fe <USART_SetConfig+0x17e>
 80034b0:	231f      	movs	r3, #31
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	2204      	movs	r2, #4
 80034b6:	701a      	strb	r2, [r3, #0]
 80034b8:	e021      	b.n	80034fe <USART_SetConfig+0x17e>
 80034ba:	231f      	movs	r3, #31
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	2208      	movs	r2, #8
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e01c      	b.n	80034fe <USART_SetConfig+0x17e>
 80034c4:	231f      	movs	r3, #31
 80034c6:	18fb      	adds	r3, r7, r3
 80034c8:	2210      	movs	r2, #16
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	e017      	b.n	80034fe <USART_SetConfig+0x17e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a6e      	ldr	r2, [pc, #440]	@ (800368c <USART_SetConfig+0x30c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d104      	bne.n	80034e2 <USART_SetConfig+0x162>
 80034d8:	231f      	movs	r3, #31
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]
 80034e0:	e00d      	b.n	80034fe <USART_SetConfig+0x17e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a6a      	ldr	r2, [pc, #424]	@ (8003690 <USART_SetConfig+0x310>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d104      	bne.n	80034f6 <USART_SetConfig+0x176>
 80034ec:	231f      	movs	r3, #31
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
 80034f4:	e003      	b.n	80034fe <USART_SetConfig+0x17e>
 80034f6:	231f      	movs	r3, #31
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	2210      	movs	r2, #16
 80034fc:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 80034fe:	231f      	movs	r3, #31
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b08      	cmp	r3, #8
 8003506:	d100      	bne.n	800350a <USART_SetConfig+0x18a>
 8003508:	e139      	b.n	800377e <USART_SetConfig+0x3fe>
 800350a:	dd00      	ble.n	800350e <USART_SetConfig+0x18e>
 800350c:	e195      	b.n	800383a <USART_SetConfig+0x4ba>
 800350e:	2b04      	cmp	r3, #4
 8003510:	d100      	bne.n	8003514 <USART_SetConfig+0x194>
 8003512:	e0d3      	b.n	80036bc <USART_SetConfig+0x33c>
 8003514:	dd00      	ble.n	8003518 <USART_SetConfig+0x198>
 8003516:	e190      	b.n	800383a <USART_SetConfig+0x4ba>
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <USART_SetConfig+0x1a4>
 800351c:	2b02      	cmp	r3, #2
 800351e:	d100      	bne.n	8003522 <USART_SetConfig+0x1a2>
 8003520:	e061      	b.n	80035e6 <USART_SetConfig+0x266>
 8003522:	e18a      	b.n	800383a <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8003524:	f7fe fc04 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 8003528:	0003      	movs	r3, r0
 800352a:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	2b00      	cmp	r3, #0
 8003532:	d044      	beq.n	80035be <USART_SetConfig+0x23e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	2b01      	cmp	r3, #1
 800353a:	d03e      	beq.n	80035ba <USART_SetConfig+0x23a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003540:	2b02      	cmp	r3, #2
 8003542:	d038      	beq.n	80035b6 <USART_SetConfig+0x236>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	2b03      	cmp	r3, #3
 800354a:	d032      	beq.n	80035b2 <USART_SetConfig+0x232>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	2b04      	cmp	r3, #4
 8003552:	d02c      	beq.n	80035ae <USART_SetConfig+0x22e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003558:	2b05      	cmp	r3, #5
 800355a:	d026      	beq.n	80035aa <USART_SetConfig+0x22a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	2b06      	cmp	r3, #6
 8003562:	d020      	beq.n	80035a6 <USART_SetConfig+0x226>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003568:	2b07      	cmp	r3, #7
 800356a:	d01a      	beq.n	80035a2 <USART_SetConfig+0x222>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003570:	2b08      	cmp	r3, #8
 8003572:	d014      	beq.n	800359e <USART_SetConfig+0x21e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003578:	2b09      	cmp	r3, #9
 800357a:	d00e      	beq.n	800359a <USART_SetConfig+0x21a>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	2b0a      	cmp	r3, #10
 8003582:	d008      	beq.n	8003596 <USART_SetConfig+0x216>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003588:	2b0b      	cmp	r3, #11
 800358a:	d102      	bne.n	8003592 <USART_SetConfig+0x212>
 800358c:	2380      	movs	r3, #128	@ 0x80
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	e016      	b.n	80035c0 <USART_SetConfig+0x240>
 8003592:	2301      	movs	r3, #1
 8003594:	e014      	b.n	80035c0 <USART_SetConfig+0x240>
 8003596:	2380      	movs	r3, #128	@ 0x80
 8003598:	e012      	b.n	80035c0 <USART_SetConfig+0x240>
 800359a:	2340      	movs	r3, #64	@ 0x40
 800359c:	e010      	b.n	80035c0 <USART_SetConfig+0x240>
 800359e:	2320      	movs	r3, #32
 80035a0:	e00e      	b.n	80035c0 <USART_SetConfig+0x240>
 80035a2:	2310      	movs	r3, #16
 80035a4:	e00c      	b.n	80035c0 <USART_SetConfig+0x240>
 80035a6:	230c      	movs	r3, #12
 80035a8:	e00a      	b.n	80035c0 <USART_SetConfig+0x240>
 80035aa:	230a      	movs	r3, #10
 80035ac:	e008      	b.n	80035c0 <USART_SetConfig+0x240>
 80035ae:	2308      	movs	r3, #8
 80035b0:	e006      	b.n	80035c0 <USART_SetConfig+0x240>
 80035b2:	2306      	movs	r3, #6
 80035b4:	e004      	b.n	80035c0 <USART_SetConfig+0x240>
 80035b6:	2304      	movs	r3, #4
 80035b8:	e002      	b.n	80035c0 <USART_SetConfig+0x240>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e000      	b.n	80035c0 <USART_SetConfig+0x240>
 80035be:	2301      	movs	r3, #1
 80035c0:	0019      	movs	r1, r3
 80035c2:	6938      	ldr	r0, [r7, #16]
 80035c4:	f7fc fd9e 	bl	8000104 <__udivsi3>
 80035c8:	0003      	movs	r3, r0
 80035ca:	005a      	lsls	r2, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	085b      	lsrs	r3, r3, #1
 80035d2:	18d2      	adds	r2, r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	0019      	movs	r1, r3
 80035da:	0010      	movs	r0, r2
 80035dc:	f7fc fd92 	bl	8000104 <__udivsi3>
 80035e0:	0003      	movs	r3, r0
 80035e2:	61bb      	str	r3, [r7, #24]
      break;
 80035e4:	e12e      	b.n	8003844 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d052      	beq.n	8003694 <USART_SetConfig+0x314>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d03e      	beq.n	8003674 <USART_SetConfig+0x2f4>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d038      	beq.n	8003670 <USART_SetConfig+0x2f0>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003602:	2b03      	cmp	r3, #3
 8003604:	d032      	beq.n	800366c <USART_SetConfig+0x2ec>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	2b04      	cmp	r3, #4
 800360c:	d02c      	beq.n	8003668 <USART_SetConfig+0x2e8>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003612:	2b05      	cmp	r3, #5
 8003614:	d026      	beq.n	8003664 <USART_SetConfig+0x2e4>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	2b06      	cmp	r3, #6
 800361c:	d020      	beq.n	8003660 <USART_SetConfig+0x2e0>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	2b07      	cmp	r3, #7
 8003624:	d01a      	beq.n	800365c <USART_SetConfig+0x2dc>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362a:	2b08      	cmp	r3, #8
 800362c:	d014      	beq.n	8003658 <USART_SetConfig+0x2d8>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	2b09      	cmp	r3, #9
 8003634:	d00e      	beq.n	8003654 <USART_SetConfig+0x2d4>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	2b0a      	cmp	r3, #10
 800363c:	d008      	beq.n	8003650 <USART_SetConfig+0x2d0>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	2b0b      	cmp	r3, #11
 8003644:	d102      	bne.n	800364c <USART_SetConfig+0x2cc>
 8003646:	2380      	movs	r3, #128	@ 0x80
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	e024      	b.n	8003696 <USART_SetConfig+0x316>
 800364c:	2301      	movs	r3, #1
 800364e:	e022      	b.n	8003696 <USART_SetConfig+0x316>
 8003650:	2380      	movs	r3, #128	@ 0x80
 8003652:	e020      	b.n	8003696 <USART_SetConfig+0x316>
 8003654:	2340      	movs	r3, #64	@ 0x40
 8003656:	e01e      	b.n	8003696 <USART_SetConfig+0x316>
 8003658:	2320      	movs	r3, #32
 800365a:	e01c      	b.n	8003696 <USART_SetConfig+0x316>
 800365c:	2310      	movs	r3, #16
 800365e:	e01a      	b.n	8003696 <USART_SetConfig+0x316>
 8003660:	230c      	movs	r3, #12
 8003662:	e018      	b.n	8003696 <USART_SetConfig+0x316>
 8003664:	230a      	movs	r3, #10
 8003666:	e016      	b.n	8003696 <USART_SetConfig+0x316>
 8003668:	2308      	movs	r3, #8
 800366a:	e014      	b.n	8003696 <USART_SetConfig+0x316>
 800366c:	2306      	movs	r3, #6
 800366e:	e012      	b.n	8003696 <USART_SetConfig+0x316>
 8003670:	2304      	movs	r3, #4
 8003672:	e010      	b.n	8003696 <USART_SetConfig+0x316>
 8003674:	2302      	movs	r3, #2
 8003676:	e00e      	b.n	8003696 <USART_SetConfig+0x316>
 8003678:	cfff69f3 	.word	0xcfff69f3
 800367c:	ffffc0f6 	.word	0xffffc0f6
 8003680:	40013800 	.word	0x40013800
 8003684:	40021000 	.word	0x40021000
 8003688:	40004400 	.word	0x40004400
 800368c:	40004800 	.word	0x40004800
 8003690:	40004c00 	.word	0x40004c00
 8003694:	2301      	movs	r3, #1
 8003696:	0019      	movs	r1, r3
 8003698:	4886      	ldr	r0, [pc, #536]	@ (80038b4 <USART_SetConfig+0x534>)
 800369a:	f7fc fd33 	bl	8000104 <__udivsi3>
 800369e:	0003      	movs	r3, r0
 80036a0:	005a      	lsls	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	085b      	lsrs	r3, r3, #1
 80036a8:	18d2      	adds	r2, r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	0019      	movs	r1, r3
 80036b0:	0010      	movs	r0, r2
 80036b2:	f7fc fd27 	bl	8000104 <__udivsi3>
 80036b6:	0003      	movs	r3, r0
 80036b8:	61bb      	str	r3, [r7, #24]
      break;
 80036ba:	e0c3      	b.n	8003844 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80036bc:	f7fe faac 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 80036c0:	0003      	movs	r3, r0
 80036c2:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d044      	beq.n	8003756 <USART_SetConfig+0x3d6>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d03e      	beq.n	8003752 <USART_SetConfig+0x3d2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d038      	beq.n	800374e <USART_SetConfig+0x3ce>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d032      	beq.n	800374a <USART_SetConfig+0x3ca>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d02c      	beq.n	8003746 <USART_SetConfig+0x3c6>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	2b05      	cmp	r3, #5
 80036f2:	d026      	beq.n	8003742 <USART_SetConfig+0x3c2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f8:	2b06      	cmp	r3, #6
 80036fa:	d020      	beq.n	800373e <USART_SetConfig+0x3be>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003700:	2b07      	cmp	r3, #7
 8003702:	d01a      	beq.n	800373a <USART_SetConfig+0x3ba>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	2b08      	cmp	r3, #8
 800370a:	d014      	beq.n	8003736 <USART_SetConfig+0x3b6>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	2b09      	cmp	r3, #9
 8003712:	d00e      	beq.n	8003732 <USART_SetConfig+0x3b2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003718:	2b0a      	cmp	r3, #10
 800371a:	d008      	beq.n	800372e <USART_SetConfig+0x3ae>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	2b0b      	cmp	r3, #11
 8003722:	d102      	bne.n	800372a <USART_SetConfig+0x3aa>
 8003724:	2380      	movs	r3, #128	@ 0x80
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	e016      	b.n	8003758 <USART_SetConfig+0x3d8>
 800372a:	2301      	movs	r3, #1
 800372c:	e014      	b.n	8003758 <USART_SetConfig+0x3d8>
 800372e:	2380      	movs	r3, #128	@ 0x80
 8003730:	e012      	b.n	8003758 <USART_SetConfig+0x3d8>
 8003732:	2340      	movs	r3, #64	@ 0x40
 8003734:	e010      	b.n	8003758 <USART_SetConfig+0x3d8>
 8003736:	2320      	movs	r3, #32
 8003738:	e00e      	b.n	8003758 <USART_SetConfig+0x3d8>
 800373a:	2310      	movs	r3, #16
 800373c:	e00c      	b.n	8003758 <USART_SetConfig+0x3d8>
 800373e:	230c      	movs	r3, #12
 8003740:	e00a      	b.n	8003758 <USART_SetConfig+0x3d8>
 8003742:	230a      	movs	r3, #10
 8003744:	e008      	b.n	8003758 <USART_SetConfig+0x3d8>
 8003746:	2308      	movs	r3, #8
 8003748:	e006      	b.n	8003758 <USART_SetConfig+0x3d8>
 800374a:	2306      	movs	r3, #6
 800374c:	e004      	b.n	8003758 <USART_SetConfig+0x3d8>
 800374e:	2304      	movs	r3, #4
 8003750:	e002      	b.n	8003758 <USART_SetConfig+0x3d8>
 8003752:	2302      	movs	r3, #2
 8003754:	e000      	b.n	8003758 <USART_SetConfig+0x3d8>
 8003756:	2301      	movs	r3, #1
 8003758:	0019      	movs	r1, r3
 800375a:	6938      	ldr	r0, [r7, #16]
 800375c:	f7fc fcd2 	bl	8000104 <__udivsi3>
 8003760:	0003      	movs	r3, r0
 8003762:	005a      	lsls	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	085b      	lsrs	r3, r3, #1
 800376a:	18d2      	adds	r2, r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	0019      	movs	r1, r3
 8003772:	0010      	movs	r0, r2
 8003774:	f7fc fcc6 	bl	8000104 <__udivsi3>
 8003778:	0003      	movs	r3, r0
 800377a:	61bb      	str	r3, [r7, #24]
      break;
 800377c:	e062      	b.n	8003844 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	2b00      	cmp	r3, #0
 8003784:	d044      	beq.n	8003810 <USART_SetConfig+0x490>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378a:	2b01      	cmp	r3, #1
 800378c:	d03e      	beq.n	800380c <USART_SetConfig+0x48c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	2b02      	cmp	r3, #2
 8003794:	d038      	beq.n	8003808 <USART_SetConfig+0x488>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	2b03      	cmp	r3, #3
 800379c:	d032      	beq.n	8003804 <USART_SetConfig+0x484>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d02c      	beq.n	8003800 <USART_SetConfig+0x480>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037aa:	2b05      	cmp	r3, #5
 80037ac:	d026      	beq.n	80037fc <USART_SetConfig+0x47c>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	2b06      	cmp	r3, #6
 80037b4:	d020      	beq.n	80037f8 <USART_SetConfig+0x478>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	2b07      	cmp	r3, #7
 80037bc:	d01a      	beq.n	80037f4 <USART_SetConfig+0x474>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d014      	beq.n	80037f0 <USART_SetConfig+0x470>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ca:	2b09      	cmp	r3, #9
 80037cc:	d00e      	beq.n	80037ec <USART_SetConfig+0x46c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d2:	2b0a      	cmp	r3, #10
 80037d4:	d008      	beq.n	80037e8 <USART_SetConfig+0x468>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	2b0b      	cmp	r3, #11
 80037dc:	d102      	bne.n	80037e4 <USART_SetConfig+0x464>
 80037de:	2380      	movs	r3, #128	@ 0x80
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	e016      	b.n	8003812 <USART_SetConfig+0x492>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e014      	b.n	8003812 <USART_SetConfig+0x492>
 80037e8:	2380      	movs	r3, #128	@ 0x80
 80037ea:	e012      	b.n	8003812 <USART_SetConfig+0x492>
 80037ec:	2340      	movs	r3, #64	@ 0x40
 80037ee:	e010      	b.n	8003812 <USART_SetConfig+0x492>
 80037f0:	2320      	movs	r3, #32
 80037f2:	e00e      	b.n	8003812 <USART_SetConfig+0x492>
 80037f4:	2310      	movs	r3, #16
 80037f6:	e00c      	b.n	8003812 <USART_SetConfig+0x492>
 80037f8:	230c      	movs	r3, #12
 80037fa:	e00a      	b.n	8003812 <USART_SetConfig+0x492>
 80037fc:	230a      	movs	r3, #10
 80037fe:	e008      	b.n	8003812 <USART_SetConfig+0x492>
 8003800:	2308      	movs	r3, #8
 8003802:	e006      	b.n	8003812 <USART_SetConfig+0x492>
 8003804:	2306      	movs	r3, #6
 8003806:	e004      	b.n	8003812 <USART_SetConfig+0x492>
 8003808:	2304      	movs	r3, #4
 800380a:	e002      	b.n	8003812 <USART_SetConfig+0x492>
 800380c:	2302      	movs	r3, #2
 800380e:	e000      	b.n	8003812 <USART_SetConfig+0x492>
 8003810:	2301      	movs	r3, #1
 8003812:	0019      	movs	r1, r3
 8003814:	2380      	movs	r3, #128	@ 0x80
 8003816:	0218      	lsls	r0, r3, #8
 8003818:	f7fc fc74 	bl	8000104 <__udivsi3>
 800381c:	0003      	movs	r3, r0
 800381e:	005a      	lsls	r2, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	085b      	lsrs	r3, r3, #1
 8003826:	18d2      	adds	r2, r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	0019      	movs	r1, r3
 800382e:	0010      	movs	r0, r2
 8003830:	f7fc fc68 	bl	8000104 <__udivsi3>
 8003834:	0003      	movs	r3, r0
 8003836:	61bb      	str	r3, [r7, #24]
      break;
 8003838:	e004      	b.n	8003844 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800383a:	231e      	movs	r3, #30
 800383c:	18fb      	adds	r3, r7, r3
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
      break;
 8003842:	46c0      	nop			@ (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2b0f      	cmp	r3, #15
 8003848:	d91c      	bls.n	8003884 <USART_SetConfig+0x504>
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	2380      	movs	r3, #128	@ 0x80
 800384e:	025b      	lsls	r3, r3, #9
 8003850:	429a      	cmp	r2, r3
 8003852:	d217      	bcs.n	8003884 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	b29a      	uxth	r2, r3
 8003858:	200e      	movs	r0, #14
 800385a:	183b      	adds	r3, r7, r0
 800385c:	210f      	movs	r1, #15
 800385e:	438a      	bics	r2, r1
 8003860:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	b29b      	uxth	r3, r3
 8003868:	2207      	movs	r2, #7
 800386a:	4013      	ands	r3, r2
 800386c:	b299      	uxth	r1, r3
 800386e:	183b      	adds	r3, r7, r0
 8003870:	183a      	adds	r2, r7, r0
 8003872:	8812      	ldrh	r2, [r2, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	183a      	adds	r2, r7, r0
 800387e:	8812      	ldrh	r2, [r2, #0]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	e003      	b.n	800388c <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 8003884:	231e      	movs	r3, #30
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	2201      	movs	r2, #1
 800388a:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 80038a4:	231e      	movs	r3, #30
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	781b      	ldrb	r3, [r3, #0]
}
 80038aa:	0018      	movs	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b008      	add	sp, #32
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	46c0      	nop			@ (mov r8, r8)
 80038b4:	00f42400 	.word	0x00f42400

080038b8 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af02      	add	r7, sp, #8
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038c6:	f7fd fa0f 	bl	8000ce8 <HAL_GetTick>
 80038ca:	0003      	movs	r3, r0
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2208      	movs	r2, #8
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d10e      	bne.n	80038fa <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	2380      	movs	r3, #128	@ 0x80
 80038e0:	0399      	lsls	r1, r3, #14
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	23fa      	movs	r3, #250	@ 0xfa
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	0013      	movs	r3, r2
 80038ec:	2200      	movs	r2, #0
 80038ee:	f7ff fd12 	bl	8003316 <USART_WaitOnFlagUntilTimeout>
 80038f2:	1e03      	subs	r3, r0, #0
 80038f4:	d001      	beq.n	80038fa <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e01e      	b.n	8003938 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2204      	movs	r2, #4
 8003902:	4013      	ands	r3, r2
 8003904:	2b04      	cmp	r3, #4
 8003906:	d10e      	bne.n	8003926 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	2380      	movs	r3, #128	@ 0x80
 800390c:	03d9      	lsls	r1, r3, #15
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	23fa      	movs	r3, #250	@ 0xfa
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	0013      	movs	r3, r2
 8003918:	2200      	movs	r2, #0
 800391a:	f7ff fcfc 	bl	8003316 <USART_WaitOnFlagUntilTimeout>
 800391e:	1e03      	subs	r3, r0, #0
 8003920:	d001      	beq.n	8003926 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e008      	b.n	8003938 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2259      	movs	r2, #89	@ 0x59
 800392a:	2101      	movs	r1, #1
 800392c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2258      	movs	r2, #88	@ 0x58
 8003932:	2100      	movs	r1, #0
 8003934:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	0018      	movs	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	b004      	add	sp, #16
 800393e:	bd80      	pop	{r7, pc}

08003940 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2140      	movs	r1, #64	@ 0x40
 8003954:	438a      	bics	r2, r1
 8003956:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2101      	movs	r1, #1
 8003964:	438a      	bics	r2, r1
 8003966:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	64da      	str	r2, [r3, #76]	@ 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2259      	movs	r2, #89	@ 0x59
 8003972:	5c9b      	ldrb	r3, [r3, r2]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b12      	cmp	r3, #18
 8003978:	d114      	bne.n	80039a4 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2208      	movs	r2, #8
 8003980:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699a      	ldr	r2, [r3, #24]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2108      	movs	r1, #8
 800398e:	430a      	orrs	r2, r1
 8003990:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2259      	movs	r2, #89	@ 0x59
 8003996:	2101      	movs	r1, #1
 8003998:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	0018      	movs	r0, r3
 800399e:	f7ff fc6d 	bl	800327c <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80039a2:	e00c      	b.n	80039be <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d107      	bne.n	80039be <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2259      	movs	r2, #89	@ 0x59
 80039b2:	2101      	movs	r1, #1
 80039b4:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	0018      	movs	r0, r3
 80039ba:	f7ff fc67 	bl	800328c <HAL_USART_TxRxCpltCallback>
}
 80039be:	46c0      	nop			@ (mov r8, r8)
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b002      	add	sp, #8
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b082      	sub	sp, #8
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b002      	add	sp, #8
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80039de:	46c0      	nop			@ (mov r8, r8)
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b002      	add	sp, #8
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2258      	movs	r2, #88	@ 0x58
 80039f4:	5c9b      	ldrb	r3, [r3, r2]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_USARTEx_DisableFifoMode+0x16>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e027      	b.n	8003a4e <HAL_USARTEx_DisableFifoMode+0x66>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2258      	movs	r2, #88	@ 0x58
 8003a02:	2101      	movs	r1, #1
 8003a04:	5499      	strb	r1, [r3, r2]

  husart->State = HAL_USART_STATE_BUSY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2259      	movs	r2, #89	@ 0x59
 8003a0a:	2102      	movs	r1, #2
 8003a0c:	5499      	strb	r1, [r3, r2]

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2101      	movs	r1, #1
 8003a22:	438a      	bics	r2, r1
 8003a24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4a0b      	ldr	r2, [pc, #44]	@ (8003a58 <HAL_USARTEx_DisableFifoMode+0x70>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2259      	movs	r2, #89	@ 0x59
 8003a40:	2101      	movs	r1, #1
 8003a42:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2258      	movs	r2, #88	@ 0x58
 8003a48:	2100      	movs	r1, #0
 8003a4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	0018      	movs	r0, r3
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b004      	add	sp, #16
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	dfffffff 	.word	0xdfffffff

08003a5c <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2258      	movs	r2, #88	@ 0x58
 8003a6a:	5c9b      	ldrb	r3, [r3, r2]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e02e      	b.n	8003ad2 <HAL_USARTEx_SetTxFifoThreshold+0x76>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2258      	movs	r2, #88	@ 0x58
 8003a78:	2101      	movs	r1, #1
 8003a7a:	5499      	strb	r1, [r3, r2]

  husart->State = HAL_USART_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2259      	movs	r2, #89	@ 0x59
 8003a80:	2102      	movs	r1, #2
 8003a82:	5499      	strb	r1, [r3, r2]

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2101      	movs	r1, #1
 8003a98:	438a      	bics	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	08d9      	lsrs	r1, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f000 f854 	bl	8003b60 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2259      	movs	r2, #89	@ 0x59
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2258      	movs	r2, #88	@ 0x58
 8003acc:	2100      	movs	r1, #0
 8003ace:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b004      	add	sp, #16
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2258      	movs	r2, #88	@ 0x58
 8003aea:	5c9b      	ldrb	r3, [r3, r2]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e02f      	b.n	8003b54 <HAL_USARTEx_SetRxFifoThreshold+0x78>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2258      	movs	r2, #88	@ 0x58
 8003af8:	2101      	movs	r1, #1
 8003afa:	5499      	strb	r1, [r3, r2]

  husart->State = HAL_USART_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2259      	movs	r2, #89	@ 0x59
 8003b00:	2102      	movs	r1, #2
 8003b02:	5499      	strb	r1, [r3, r2]

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2101      	movs	r1, #1
 8003b18:	438a      	bics	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	4a0e      	ldr	r2, [pc, #56]	@ (8003b5c <HAL_USARTEx_SetRxFifoThreshold+0x80>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	0019      	movs	r1, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	0018      	movs	r0, r3
 8003b36:	f000 f813 	bl	8003b60 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2259      	movs	r2, #89	@ 0x59
 8003b46:	2101      	movs	r1, #1
 8003b48:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2258      	movs	r2, #88	@ 0x58
 8003b4e:	2100      	movs	r1, #0
 8003b50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	0018      	movs	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b004      	add	sp, #16
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	f1ffffff 	.word	0xf1ffffff

08003b60 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8003b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d106      	bne.n	8003b7e <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b7c:	e041      	b.n	8003c02 <USARTEx_SetNbDataToProcess+0xa2>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b7e:	260f      	movs	r6, #15
 8003b80:	19bb      	adds	r3, r7, r6
 8003b82:	2208      	movs	r2, #8
 8003b84:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b86:	200e      	movs	r0, #14
 8003b88:	183b      	adds	r3, r7, r0
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8003b94:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	240d      	movs	r4, #13
 8003b9a:	193b      	adds	r3, r7, r4
 8003b9c:	2107      	movs	r1, #7
 8003b9e:	400a      	ands	r2, r1
 8003ba0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8003ba8:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	250c      	movs	r5, #12
 8003bae:	197b      	adds	r3, r7, r5
 8003bb0:	2107      	movs	r1, #7
 8003bb2:	400a      	ands	r2, r1
 8003bb4:	701a      	strb	r2, [r3, #0]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003bb6:	183b      	adds	r3, r7, r0
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	197a      	adds	r2, r7, r5
 8003bbc:	7812      	ldrb	r2, [r2, #0]
 8003bbe:	4913      	ldr	r1, [pc, #76]	@ (8003c0c <USARTEx_SetNbDataToProcess+0xac>)
 8003bc0:	5c8a      	ldrb	r2, [r1, r2]
 8003bc2:	435a      	muls	r2, r3
 8003bc4:	0010      	movs	r0, r2
                                (uint16_t)denominator[tx_fifo_threshold];
 8003bc6:	197b      	adds	r3, r7, r5
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	4a11      	ldr	r2, [pc, #68]	@ (8003c10 <USARTEx_SetNbDataToProcess+0xb0>)
 8003bcc:	5cd3      	ldrb	r3, [r2, r3]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003bce:	0019      	movs	r1, r3
 8003bd0:	f7fc fb22 	bl	8000218 <__divsi3>
 8003bd4:	0003      	movs	r3, r0
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bdc:	19bb      	adds	r3, r7, r6
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	193a      	adds	r2, r7, r4
 8003be2:	7812      	ldrb	r2, [r2, #0]
 8003be4:	4909      	ldr	r1, [pc, #36]	@ (8003c0c <USARTEx_SetNbDataToProcess+0xac>)
 8003be6:	5c8a      	ldrb	r2, [r1, r2]
 8003be8:	435a      	muls	r2, r3
 8003bea:	0010      	movs	r0, r2
                                (uint16_t)denominator[rx_fifo_threshold];
 8003bec:	193b      	adds	r3, r7, r4
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	4a07      	ldr	r2, [pc, #28]	@ (8003c10 <USARTEx_SetNbDataToProcess+0xb0>)
 8003bf2:	5cd3      	ldrb	r3, [r2, r3]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	f7fc fb0f 	bl	8000218 <__divsi3>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b005      	add	sp, #20
 8003c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c0a:	46c0      	nop			@ (mov r8, r8)
 8003c0c:	08003d0c 	.word	0x08003d0c
 8003c10:	08003d14 	.word	0x08003d14

08003c14 <memset>:
 8003c14:	0003      	movs	r3, r0
 8003c16:	1882      	adds	r2, r0, r2
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d100      	bne.n	8003c1e <memset+0xa>
 8003c1c:	4770      	bx	lr
 8003c1e:	7019      	strb	r1, [r3, #0]
 8003c20:	3301      	adds	r3, #1
 8003c22:	e7f9      	b.n	8003c18 <memset+0x4>

08003c24 <__libc_init_array>:
 8003c24:	b570      	push	{r4, r5, r6, lr}
 8003c26:	2600      	movs	r6, #0
 8003c28:	4c0c      	ldr	r4, [pc, #48]	@ (8003c5c <__libc_init_array+0x38>)
 8003c2a:	4d0d      	ldr	r5, [pc, #52]	@ (8003c60 <__libc_init_array+0x3c>)
 8003c2c:	1b64      	subs	r4, r4, r5
 8003c2e:	10a4      	asrs	r4, r4, #2
 8003c30:	42a6      	cmp	r6, r4
 8003c32:	d109      	bne.n	8003c48 <__libc_init_array+0x24>
 8003c34:	2600      	movs	r6, #0
 8003c36:	f000 f819 	bl	8003c6c <_init>
 8003c3a:	4c0a      	ldr	r4, [pc, #40]	@ (8003c64 <__libc_init_array+0x40>)
 8003c3c:	4d0a      	ldr	r5, [pc, #40]	@ (8003c68 <__libc_init_array+0x44>)
 8003c3e:	1b64      	subs	r4, r4, r5
 8003c40:	10a4      	asrs	r4, r4, #2
 8003c42:	42a6      	cmp	r6, r4
 8003c44:	d105      	bne.n	8003c52 <__libc_init_array+0x2e>
 8003c46:	bd70      	pop	{r4, r5, r6, pc}
 8003c48:	00b3      	lsls	r3, r6, #2
 8003c4a:	58eb      	ldr	r3, [r5, r3]
 8003c4c:	4798      	blx	r3
 8003c4e:	3601      	adds	r6, #1
 8003c50:	e7ee      	b.n	8003c30 <__libc_init_array+0xc>
 8003c52:	00b3      	lsls	r3, r6, #2
 8003c54:	58eb      	ldr	r3, [r5, r3]
 8003c56:	4798      	blx	r3
 8003c58:	3601      	adds	r6, #1
 8003c5a:	e7f2      	b.n	8003c42 <__libc_init_array+0x1e>
 8003c5c:	08003d24 	.word	0x08003d24
 8003c60:	08003d24 	.word	0x08003d24
 8003c64:	08003d28 	.word	0x08003d28
 8003c68:	08003d24 	.word	0x08003d24

08003c6c <_init>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c72:	bc08      	pop	{r3}
 8003c74:	469e      	mov	lr, r3
 8003c76:	4770      	bx	lr

08003c78 <_fini>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	46c0      	nop			@ (mov r8, r8)
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr
