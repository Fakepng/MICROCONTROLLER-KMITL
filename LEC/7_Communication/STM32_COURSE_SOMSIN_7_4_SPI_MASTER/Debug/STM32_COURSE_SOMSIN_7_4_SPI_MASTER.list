
STM32_COURSE_SOMSIN_7_4_SPI_MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003754  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003810  08003810  00004810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a8  080038a8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080038a8  080038a8  000048a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038b0  080038b0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038b0  080038b0  000048b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038b4  080038b4  000048b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080038b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  080038c4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080038c4  00005120  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf8b  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0c  00000000  00000000  00011fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00013ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f7  00000000  00000000  00014918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176b1  00000000  00000000  0001510f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000def0  00000000  00000000  0002c7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000964f0  00000000  00000000  0003a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0ba0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002414  00000000  00000000  000d0be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000d2ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080037f8 	.word	0x080037f8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080037f8 	.word	0x080037f8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fb47 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f879 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f95d 	bl	80008e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062e:	f000 f90d 	bl	800084c <MX_USART2_UART_Init>
  MX_USART1_Init();
 8000632:	f000 f8bb 	bl	80007ac <MX_USART1_Init>
  /* USER CODE BEGIN 2 */
  unsigned char data[10] = "A";
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2241      	movs	r2, #65	@ 0x41
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	3304      	adds	r3, #4
 800063e:	2206      	movs	r2, #6
 8000640:	2100      	movs	r1, #0
 8000642:	0018      	movs	r0, r3
 8000644:	f003 f8ac 	bl	80037a0 <memset>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000648:	2380      	movs	r3, #128	@ 0x80
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	4830      	ldr	r0, [pc, #192]	@ (8000710 <main+0xf4>)
 800064e:	2200      	movs	r2, #0
 8000650:	0019      	movs	r1, r3
 8000652:	f000 fe24 	bl	800129e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000656:	2380      	movs	r3, #128	@ 0x80
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	482d      	ldr	r0, [pc, #180]	@ (8000710 <main+0xf4>)
 800065c:	2200      	movs	r2, #0
 800065e:	0019      	movs	r1, r3
 8000660:	f000 fe1d 	bl	800129e <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 8000664:	2380      	movs	r3, #128	@ 0x80
 8000666:	019b      	lsls	r3, r3, #6
 8000668:	4a2a      	ldr	r2, [pc, #168]	@ (8000714 <main+0xf8>)
 800066a:	0019      	movs	r1, r3
 800066c:	0010      	movs	r0, r2
 800066e:	f000 fdf9 	bl	8001264 <HAL_GPIO_ReadPin>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d11c      	bne.n	80006b0 <main+0x94>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8000676:	23a0      	movs	r3, #160	@ 0xa0
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	2200      	movs	r2, #0
 800067c:	2120      	movs	r1, #32
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fe0d 	bl	800129e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000684:	2380      	movs	r3, #128	@ 0x80
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	4821      	ldr	r0, [pc, #132]	@ (8000710 <main+0xf4>)
 800068a:	2201      	movs	r2, #1
 800068c:	0019      	movs	r1, r3
 800068e:	f000 fe06 	bl	800129e <HAL_GPIO_WritePin>
		  HAL_USART_Transmit(&husart1, data, 1, 1000);
 8000692:	23fa      	movs	r3, #250	@ 0xfa
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	1d39      	adds	r1, r7, #4
 8000698:	481f      	ldr	r0, [pc, #124]	@ (8000718 <main+0xfc>)
 800069a:	2201      	movs	r2, #1
 800069c:	f002 fb96 	bl	8002dcc <HAL_USART_Transmit>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 80006a0:	2380      	movs	r3, #128	@ 0x80
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	481a      	ldr	r0, [pc, #104]	@ (8000710 <main+0xf4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	0019      	movs	r1, r3
 80006aa:	f000 fdf8 	bl	800129e <HAL_GPIO_WritePin>
 80006ae:	e01b      	b.n	80006e8 <main+0xcc>
	  }
	  else{
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 80006b0:	23a0      	movs	r3, #160	@ 0xa0
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	2201      	movs	r2, #1
 80006b6:	2120      	movs	r1, #32
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fdf0 	bl	800129e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 80006be:	2380      	movs	r3, #128	@ 0x80
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	4813      	ldr	r0, [pc, #76]	@ (8000710 <main+0xf4>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	0019      	movs	r1, r3
 80006c8:	f000 fde9 	bl	800129e <HAL_GPIO_WritePin>
		  HAL_USART_Transmit(&husart1, data, 1, 1000);
 80006cc:	23fa      	movs	r3, #250	@ 0xfa
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	1d39      	adds	r1, r7, #4
 80006d2:	4811      	ldr	r0, [pc, #68]	@ (8000718 <main+0xfc>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	f002 fb79 	bl	8002dcc <HAL_USART_Transmit>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006da:	2380      	movs	r3, #128	@ 0x80
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	480c      	ldr	r0, [pc, #48]	@ (8000710 <main+0xf4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	0019      	movs	r1, r3
 80006e4:	f000 fddb 	bl	800129e <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(500);
 80006e8:	23fa      	movs	r3, #250	@ 0xfa
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 fb67 	bl	8000dc0 <HAL_Delay>
	  data[0]++;
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	3301      	adds	r3, #1
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	701a      	strb	r2, [r3, #0]
	  if(data[0] > 'Z'){
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b5a      	cmp	r3, #90	@ 0x5a
 8000704:	d9ae      	bls.n	8000664 <main+0x48>
		  data[0] = 'A';
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2241      	movs	r2, #65	@ 0x41
 800070a:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 800070c:	e7aa      	b.n	8000664 <main+0x48>
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	50000c00 	.word	0x50000c00
 8000714:	50000800 	.word	0x50000800
 8000718:	20000028 	.word	0x20000028

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b093      	sub	sp, #76	@ 0x4c
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	2410      	movs	r4, #16
 8000724:	193b      	adds	r3, r7, r4
 8000726:	0018      	movs	r0, r3
 8000728:	2338      	movs	r3, #56	@ 0x38
 800072a:	001a      	movs	r2, r3
 800072c:	2100      	movs	r1, #0
 800072e:	f003 f837 	bl	80037a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000732:	003b      	movs	r3, r7
 8000734:	0018      	movs	r0, r3
 8000736:	2310      	movs	r3, #16
 8000738:	001a      	movs	r2, r3
 800073a:	2100      	movs	r1, #0
 800073c:	f003 f830 	bl	80037a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2380      	movs	r3, #128	@ 0x80
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	0018      	movs	r0, r3
 8000746:	f000 fdc7 	bl	80012d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2202      	movs	r2, #2
 800074e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2280      	movs	r2, #128	@ 0x80
 8000754:	0052      	lsls	r2, r2, #1
 8000756:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000758:	193b      	adds	r3, r7, r4
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2240      	movs	r2, #64	@ 0x40
 8000762:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000764:	193b      	adds	r3, r7, r4
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076a:	193b      	adds	r3, r7, r4
 800076c:	0018      	movs	r0, r3
 800076e:	f000 fdff 	bl	8001370 <HAL_RCC_OscConfig>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000776:	f000 f941 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	003b      	movs	r3, r7
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000780:	003b      	movs	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	003b      	movs	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078c:	003b      	movs	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000792:	003b      	movs	r3, r7
 8000794:	2100      	movs	r1, #0
 8000796:	0018      	movs	r0, r3
 8000798:	f001 f904 	bl	80019a4 <HAL_RCC_ClockConfig>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007a0:	f000 f92c 	bl	80009fc <Error_Handler>
  }
}
 80007a4:	46c0      	nop			@ (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b013      	add	sp, #76	@ 0x4c
 80007aa:	bd90      	pop	{r4, r7, pc}

080007ac <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80007b0:	4b23      	ldr	r3, [pc, #140]	@ (8000840 <MX_USART1_Init+0x94>)
 80007b2:	4a24      	ldr	r2, [pc, #144]	@ (8000844 <MX_USART1_Init+0x98>)
 80007b4:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 10000;
 80007b6:	4b22      	ldr	r3, [pc, #136]	@ (8000840 <MX_USART1_Init+0x94>)
 80007b8:	4a23      	ldr	r2, [pc, #140]	@ (8000848 <MX_USART1_Init+0x9c>)
 80007ba:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80007bc:	4b20      	ldr	r3, [pc, #128]	@ (8000840 <MX_USART1_Init+0x94>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80007c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000840 <MX_USART1_Init+0x94>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80007c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000840 <MX_USART1_Init+0x94>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80007ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <MX_USART1_Init+0x94>)
 80007d0:	220c      	movs	r2, #12
 80007d2:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000840 <MX_USART1_Init+0x94>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80007da:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <MX_USART1_Init+0x94>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 80007e0:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <MX_USART1_Init+0x94>)
 80007e2:	2280      	movs	r2, #128	@ 0x80
 80007e4:	0052      	lsls	r2, r2, #1
 80007e6:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80007e8:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <MX_USART1_Init+0x94>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	@ 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 80007ee:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_USART1_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <MX_USART1_Init+0x94>)
 80007f6:	0018      	movs	r0, r3
 80007f8:	f002 fa98 	bl	8002d2c <HAL_USART_Init>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8000800:	f000 f8fc 	bl	80009fc <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000804:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_USART1_Init+0x94>)
 8000806:	2100      	movs	r1, #0
 8000808:	0018      	movs	r0, r3
 800080a:	f002 feed 	bl	80035e8 <HAL_USARTEx_SetTxFifoThreshold>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8000812:	f000 f8f3 	bl	80009fc <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000816:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <MX_USART1_Init+0x94>)
 8000818:	2100      	movs	r1, #0
 800081a:	0018      	movs	r0, r3
 800081c:	f002 ff24 	bl	8003668 <HAL_USARTEx_SetRxFifoThreshold>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8000824:	f000 f8ea 	bl	80009fc <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8000828:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <MX_USART1_Init+0x94>)
 800082a:	0018      	movs	r0, r3
 800082c:	f002 fea2 	bl	8003574 <HAL_USARTEx_DisableFifoMode>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 8000834:	f000 f8e2 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	20000028 	.word	0x20000028
 8000844:	40013800 	.word	0x40013800
 8000848:	00002710 	.word	0x00002710

0800084c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000850:	4b23      	ldr	r3, [pc, #140]	@ (80008e0 <MX_USART2_UART_Init+0x94>)
 8000852:	4a24      	ldr	r2, [pc, #144]	@ (80008e4 <MX_USART2_UART_Init+0x98>)
 8000854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000856:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <MX_USART2_UART_Init+0x94>)
 8000858:	22e1      	movs	r2, #225	@ 0xe1
 800085a:	0252      	lsls	r2, r2, #9
 800085c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b20      	ldr	r3, [pc, #128]	@ (80008e0 <MX_USART2_UART_Init+0x94>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <MX_USART2_UART_Init+0x94>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086a:	4b1d      	ldr	r3, [pc, #116]	@ (80008e0 <MX_USART2_UART_Init+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <MX_USART2_UART_Init+0x94>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <MX_USART2_UART_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <MX_USART2_UART_Init+0x94>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <MX_USART2_UART_Init+0x94>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000888:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <MX_USART2_UART_Init+0x94>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088e:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_USART2_UART_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_USART2_UART_Init+0x94>)
 8000896:	0018      	movs	r0, r3
 8000898:	f001 fbe6 	bl	8002068 <HAL_UART_Init>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d001      	beq.n	80008a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008a0:	f000 f8ac 	bl	80009fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a4:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_USART2_UART_Init+0x94>)
 80008a6:	2100      	movs	r1, #0
 80008a8:	0018      	movs	r0, r3
 80008aa:	f002 f95f 	bl	8002b6c <HAL_UARTEx_SetTxFifoThreshold>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008b2:	f000 f8a3 	bl	80009fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b6:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <MX_USART2_UART_Init+0x94>)
 80008b8:	2100      	movs	r1, #0
 80008ba:	0018      	movs	r0, r3
 80008bc:	f002 f996 	bl	8002bec <HAL_UARTEx_SetRxFifoThreshold>
 80008c0:	1e03      	subs	r3, r0, #0
 80008c2:	d001      	beq.n	80008c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008c4:	f000 f89a 	bl	80009fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008c8:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <MX_USART2_UART_Init+0x94>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f002 f914 	bl	8002af8 <HAL_UARTEx_DisableFifoMode>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008d4:	f000 f892 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d8:	46c0      	nop			@ (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	20000088 	.word	0x20000088
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b08b      	sub	sp, #44	@ 0x2c
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	2414      	movs	r4, #20
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	0018      	movs	r0, r3
 80008f4:	2314      	movs	r3, #20
 80008f6:	001a      	movs	r2, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	f002 ff51 	bl	80037a0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b3c      	ldr	r3, [pc, #240]	@ (80009f0 <MX_GPIO_Init+0x108>)
 8000900:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000902:	4b3b      	ldr	r3, [pc, #236]	@ (80009f0 <MX_GPIO_Init+0x108>)
 8000904:	2104      	movs	r1, #4
 8000906:	430a      	orrs	r2, r1
 8000908:	635a      	str	r2, [r3, #52]	@ 0x34
 800090a:	4b39      	ldr	r3, [pc, #228]	@ (80009f0 <MX_GPIO_Init+0x108>)
 800090c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800090e:	2204      	movs	r2, #4
 8000910:	4013      	ands	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000916:	4b36      	ldr	r3, [pc, #216]	@ (80009f0 <MX_GPIO_Init+0x108>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800091a:	4b35      	ldr	r3, [pc, #212]	@ (80009f0 <MX_GPIO_Init+0x108>)
 800091c:	2120      	movs	r1, #32
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	@ 0x34
 8000922:	4b33      	ldr	r3, [pc, #204]	@ (80009f0 <MX_GPIO_Init+0x108>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000926:	2220      	movs	r2, #32
 8000928:	4013      	ands	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b30      	ldr	r3, [pc, #192]	@ (80009f0 <MX_GPIO_Init+0x108>)
 8000930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000932:	4b2f      	ldr	r3, [pc, #188]	@ (80009f0 <MX_GPIO_Init+0x108>)
 8000934:	2101      	movs	r1, #1
 8000936:	430a      	orrs	r2, r1
 8000938:	635a      	str	r2, [r3, #52]	@ 0x34
 800093a:	4b2d      	ldr	r3, [pc, #180]	@ (80009f0 <MX_GPIO_Init+0x108>)
 800093c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800093e:	2201      	movs	r2, #1
 8000940:	4013      	ands	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	4b2a      	ldr	r3, [pc, #168]	@ (80009f0 <MX_GPIO_Init+0x108>)
 8000948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800094a:	4b29      	ldr	r3, [pc, #164]	@ (80009f0 <MX_GPIO_Init+0x108>)
 800094c:	2108      	movs	r1, #8
 800094e:	430a      	orrs	r2, r1
 8000950:	635a      	str	r2, [r3, #52]	@ 0x34
 8000952:	4b27      	ldr	r3, [pc, #156]	@ (80009f0 <MX_GPIO_Init+0x108>)
 8000954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000956:	2208      	movs	r2, #8
 8000958:	4013      	ands	r3, r2
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800095e:	23a0      	movs	r3, #160	@ 0xa0
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	2200      	movs	r2, #0
 8000964:	2120      	movs	r1, #32
 8000966:	0018      	movs	r0, r3
 8000968:	f000 fc99 	bl	800129e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800096c:	23c0      	movs	r3, #192	@ 0xc0
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	4820      	ldr	r0, [pc, #128]	@ (80009f4 <MX_GPIO_Init+0x10c>)
 8000972:	2200      	movs	r2, #0
 8000974:	0019      	movs	r1, r3
 8000976:	f000 fc92 	bl	800129e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800097a:	193b      	adds	r3, r7, r4
 800097c:	2280      	movs	r2, #128	@ 0x80
 800097e:	0192      	lsls	r2, r2, #6
 8000980:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098e:	193b      	adds	r3, r7, r4
 8000990:	4a19      	ldr	r2, [pc, #100]	@ (80009f8 <MX_GPIO_Init+0x110>)
 8000992:	0019      	movs	r1, r3
 8000994:	0010      	movs	r0, r2
 8000996:	f000 fb01 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800099a:	193b      	adds	r3, r7, r4
 800099c:	2220      	movs	r2, #32
 800099e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	2201      	movs	r2, #1
 80009a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	2202      	movs	r2, #2
 80009b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80009b2:	193a      	adds	r2, r7, r4
 80009b4:	23a0      	movs	r3, #160	@ 0xa0
 80009b6:	05db      	lsls	r3, r3, #23
 80009b8:	0011      	movs	r1, r2
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 faee 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009c0:	0021      	movs	r1, r4
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	22c0      	movs	r2, #192	@ 0xc0
 80009c6:	0092      	lsls	r2, r2, #2
 80009c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2201      	movs	r2, #1
 80009ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	4a05      	ldr	r2, [pc, #20]	@ (80009f4 <MX_GPIO_Init+0x10c>)
 80009e0:	0019      	movs	r1, r3
 80009e2:	0010      	movs	r0, r2
 80009e4:	f000 fada 	bl	8000f9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e8:	46c0      	nop			@ (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b00b      	add	sp, #44	@ 0x2c
 80009ee:	bd90      	pop	{r4, r7, pc}
 80009f0:	40021000 	.word	0x40021000
 80009f4:	50000c00 	.word	0x50000c00
 80009f8:	50000800 	.word	0x50000800

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	46c0      	nop			@ (mov r8, r8)
 8000a06:	e7fd      	b.n	8000a04 <Error_Handler+0x8>

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a14:	2101      	movs	r1, #1
 8000a16:	430a      	orrs	r2, r1
 8000a18:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4013      	ands	r3, r2
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	0549      	lsls	r1, r1, #21
 8000a30:	430a      	orrs	r2, r1
 8000a32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a34:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a38:	2380      	movs	r3, #128	@ 0x80
 8000a3a:	055b      	lsls	r3, r3, #21
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000a42:	23c0      	movs	r3, #192	@ 0xc0
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	0018      	movs	r0, r3
 8000a48:	f000 f9de 	bl	8000e08 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4c:	46c0      	nop			@ (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b002      	add	sp, #8
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b099      	sub	sp, #100	@ 0x64
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	234c      	movs	r3, #76	@ 0x4c
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	0018      	movs	r0, r3
 8000a66:	2314      	movs	r3, #20
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f002 fe98 	bl	80037a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a70:	2418      	movs	r4, #24
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	0018      	movs	r0, r3
 8000a76:	2334      	movs	r3, #52	@ 0x34
 8000a78:	001a      	movs	r2, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f002 fe90 	bl	80037a0 <memset>
  if(husart->Instance==USART1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a34      	ldr	r2, [pc, #208]	@ (8000b58 <HAL_USART_MspInit+0x100>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d161      	bne.n	8000b4e <HAL_USART_MspInit+0xf6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f001 f92d 	bl	8001cf8 <HAL_RCCEx_PeriphCLKConfig>
 8000a9e:	1e03      	subs	r3, r0, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 8000aa2:	f7ff ffab 	bl	80009fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b5c <HAL_USART_MspInit+0x104>)
 8000aa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8000b5c <HAL_USART_MspInit+0x104>)
 8000aac:	2180      	movs	r1, #128	@ 0x80
 8000aae:	01c9      	lsls	r1, r1, #7
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ab4:	4b29      	ldr	r3, [pc, #164]	@ (8000b5c <HAL_USART_MspInit+0x104>)
 8000ab6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ab8:	2380      	movs	r3, #128	@ 0x80
 8000aba:	01db      	lsls	r3, r3, #7
 8000abc:	4013      	ands	r3, r2
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	4b26      	ldr	r3, [pc, #152]	@ (8000b5c <HAL_USART_MspInit+0x104>)
 8000ac4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ac6:	4b25      	ldr	r3, [pc, #148]	@ (8000b5c <HAL_USART_MspInit+0x104>)
 8000ac8:	2104      	movs	r1, #4
 8000aca:	430a      	orrs	r2, r1
 8000acc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ace:	4b23      	ldr	r3, [pc, #140]	@ (8000b5c <HAL_USART_MspInit+0x104>)
 8000ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <HAL_USART_MspInit+0x104>)
 8000adc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ade:	4b1f      	ldr	r3, [pc, #124]	@ (8000b5c <HAL_USART_MspInit+0x104>)
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <HAL_USART_MspInit+0x104>)
 8000ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aea:	2201      	movs	r2, #1
 8000aec:	4013      	ands	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    PA12 [PA10]     ------> USART1_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000af2:	244c      	movs	r4, #76	@ 0x4c
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2230      	movs	r2, #48	@ 0x30
 8000af8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	2202      	movs	r2, #2
 8000afe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	2201      	movs	r2, #1
 8000b10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	4a12      	ldr	r2, [pc, #72]	@ (8000b60 <HAL_USART_MspInit+0x108>)
 8000b16:	0019      	movs	r1, r3
 8000b18:	0010      	movs	r0, r2
 8000b1a:	f000 fa3f 	bl	8000f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b1e:	0021      	movs	r1, r4
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2280      	movs	r2, #128	@ 0x80
 8000b24:	0152      	lsls	r2, r2, #5
 8000b26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	187a      	adds	r2, r7, r1
 8000b42:	23a0      	movs	r3, #160	@ 0xa0
 8000b44:	05db      	lsls	r3, r3, #23
 8000b46:	0011      	movs	r1, r2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 fa27 	bl	8000f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b019      	add	sp, #100	@ 0x64
 8000b54:	bd90      	pop	{r4, r7, pc}
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	40013800 	.word	0x40013800
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	50000800 	.word	0x50000800

08000b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b097      	sub	sp, #92	@ 0x5c
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	2344      	movs	r3, #68	@ 0x44
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	0018      	movs	r0, r3
 8000b72:	2314      	movs	r3, #20
 8000b74:	001a      	movs	r2, r3
 8000b76:	2100      	movs	r1, #0
 8000b78:	f002 fe12 	bl	80037a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b7c:	2410      	movs	r4, #16
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	0018      	movs	r0, r3
 8000b82:	2334      	movs	r3, #52	@ 0x34
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f002 fe0a 	bl	80037a0 <memset>
  if(huart->Instance==USART2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a22      	ldr	r2, [pc, #136]	@ (8000c1c <HAL_UART_MspInit+0xb8>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d13e      	bne.n	8000c14 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	2202      	movs	r2, #2
 8000b9a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f001 f8a7 	bl	8001cf8 <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	1e03      	subs	r3, r0, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bae:	f7ff ff25 	bl	80009fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c20 <HAL_UART_MspInit+0xbc>)
 8000bb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <HAL_UART_MspInit+0xbc>)
 8000bb8:	2180      	movs	r1, #128	@ 0x80
 8000bba:	0289      	lsls	r1, r1, #10
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bc0:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <HAL_UART_MspInit+0xbc>)
 8000bc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bc4:	2380      	movs	r3, #128	@ 0x80
 8000bc6:	029b      	lsls	r3, r3, #10
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <HAL_UART_MspInit+0xbc>)
 8000bd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bd2:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <HAL_UART_MspInit+0xbc>)
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bda:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <HAL_UART_MspInit+0xbc>)
 8000bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bde:	2201      	movs	r2, #1
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000be6:	2144      	movs	r1, #68	@ 0x44
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	220c      	movs	r2, #12
 8000bec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2201      	movs	r2, #1
 8000c04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	187a      	adds	r2, r7, r1
 8000c08:	23a0      	movs	r3, #160	@ 0xa0
 8000c0a:	05db      	lsls	r3, r3, #23
 8000c0c:	0011      	movs	r1, r2
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 f9c4 	bl	8000f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c14:	46c0      	nop			@ (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b017      	add	sp, #92	@ 0x5c
 8000c1a:	bd90      	pop	{r4, r7, pc}
 8000c1c:	40004400 	.word	0x40004400
 8000c20:	40021000 	.word	0x40021000

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c28:	46c0      	nop			@ (mov r8, r8)
 8000c2a:	e7fd      	b.n	8000c28 <NMI_Handler+0x4>

08000c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	46c0      	nop			@ (mov r8, r8)
 8000c32:	e7fd      	b.n	8000c30 <HardFault_Handler+0x4>

08000c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4c:	f000 f89c 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c60:	480d      	ldr	r0, [pc, #52]	@ (8000c98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c64:	f7ff fff7 	bl	8000c56 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6a:	490d      	ldr	r1, [pc, #52]	@ (8000ca0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca4 <LoopForever+0xe>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c80:	4c0a      	ldr	r4, [pc, #40]	@ (8000cac <LoopForever+0x16>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c8e:	f002 fd8f 	bl	80037b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c92:	f7ff fcc3 	bl	800061c <main>

08000c96 <LoopForever>:

LoopForever:
  b LoopForever
 8000c96:	e7fe      	b.n	8000c96 <LoopForever>
  ldr   r0, =_estack
 8000c98:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ca4:	080038b8 	.word	0x080038b8
  ldr r2, =_sbss
 8000ca8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cac:	20000120 	.word	0x20000120

08000cb0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_COMP_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <HAL_Init+0x3c>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <HAL_Init+0x3c>)
 8000cc6:	2180      	movs	r1, #128	@ 0x80
 8000cc8:	0049      	lsls	r1, r1, #1
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f810 	bl	8000cf4 <HAL_InitTick>
 8000cd4:	1e03      	subs	r3, r0, #0
 8000cd6:	d003      	beq.n	8000ce0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
 8000cde:	e001      	b.n	8000ce4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff fe92 	bl	8000a08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce4:	1dfb      	adds	r3, r7, #7
 8000ce6:	781b      	ldrb	r3, [r3, #0]
}
 8000ce8:	0018      	movs	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40022000 	.word	0x40022000

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d04:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <HAL_InitTick+0x88>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d02b      	beq.n	8000d64 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <HAL_InitTick+0x8c>)
 8000d0e:	681c      	ldr	r4, [r3, #0]
 8000d10:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <HAL_InitTick+0x88>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	0019      	movs	r1, r3
 8000d16:	23fa      	movs	r3, #250	@ 0xfa
 8000d18:	0098      	lsls	r0, r3, #2
 8000d1a:	f7ff f9f3 	bl	8000104 <__udivsi3>
 8000d1e:	0003      	movs	r3, r0
 8000d20:	0019      	movs	r1, r3
 8000d22:	0020      	movs	r0, r4
 8000d24:	f7ff f9ee 	bl	8000104 <__udivsi3>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 f929 	bl	8000f82 <HAL_SYSTICK_Config>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d112      	bne.n	8000d5a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d80a      	bhi.n	8000d50 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	425b      	negs	r3, r3
 8000d40:	2200      	movs	r2, #0
 8000d42:	0018      	movs	r0, r3
 8000d44:	f000 f908 	bl	8000f58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <HAL_InitTick+0x90>)
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	e00d      	b.n	8000d6c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d50:	230f      	movs	r3, #15
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	2201      	movs	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	e008      	b.n	8000d6c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	e003      	b.n	8000d6c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d64:	230f      	movs	r3, #15
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	2201      	movs	r2, #1
 8000d6a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	18fb      	adds	r3, r7, r3
 8000d70:	781b      	ldrb	r3, [r3, #0]
}
 8000d72:	0018      	movs	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b005      	add	sp, #20
 8000d78:	bd90      	pop	{r4, r7, pc}
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000000 	.word	0x20000000
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <HAL_IncTick+0x1c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	001a      	movs	r2, r3
 8000d92:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <HAL_IncTick+0x20>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	18d2      	adds	r2, r2, r3
 8000d98:	4b03      	ldr	r3, [pc, #12]	@ (8000da8 <HAL_IncTick+0x20>)
 8000d9a:	601a      	str	r2, [r3, #0]
}
 8000d9c:	46c0      	nop			@ (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	20000008 	.word	0x20000008
 8000da8:	2000011c 	.word	0x2000011c

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b02      	ldr	r3, [pc, #8]	@ (8000dbc <HAL_GetTick+0x10>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	0018      	movs	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	2000011c 	.word	0x2000011c

08000dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff fff0 	bl	8000dac <HAL_GetTick>
 8000dcc:	0003      	movs	r3, r0
 8000dce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	d005      	beq.n	8000de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <HAL_Delay+0x44>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	001a      	movs	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	189b      	adds	r3, r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	f7ff ffe0 	bl	8000dac <HAL_GetTick>
 8000dec:	0002      	movs	r2, r0
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d8f7      	bhi.n	8000de8 <HAL_Delay+0x28>
  {
  }
}
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b004      	add	sp, #16
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			@ (mov r8, r8)
 8000e04:	20000008 	.word	0x20000008

08000e08 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a06      	ldr	r2, [pc, #24]	@ (8000e30 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000e16:	4013      	ands	r3, r2
 8000e18:	0019      	movs	r1, r3
 8000e1a:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]
}
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b002      	add	sp, #8
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	40010000 	.word	0x40010000
 8000e30:	fffff9ff 	.word	0xfffff9ff

08000e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e48:	d828      	bhi.n	8000e9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e4a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f08 <__NVIC_SetPriority+0xd4>)
 8000e4c:	1dfb      	adds	r3, r7, #7
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b25b      	sxtb	r3, r3
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	33c0      	adds	r3, #192	@ 0xc0
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	589b      	ldr	r3, [r3, r2]
 8000e5a:	1dfa      	adds	r2, r7, #7
 8000e5c:	7812      	ldrb	r2, [r2, #0]
 8000e5e:	0011      	movs	r1, r2
 8000e60:	2203      	movs	r2, #3
 8000e62:	400a      	ands	r2, r1
 8000e64:	00d2      	lsls	r2, r2, #3
 8000e66:	21ff      	movs	r1, #255	@ 0xff
 8000e68:	4091      	lsls	r1, r2
 8000e6a:	000a      	movs	r2, r1
 8000e6c:	43d2      	mvns	r2, r2
 8000e6e:	401a      	ands	r2, r3
 8000e70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	019b      	lsls	r3, r3, #6
 8000e76:	22ff      	movs	r2, #255	@ 0xff
 8000e78:	401a      	ands	r2, r3
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	0018      	movs	r0, r3
 8000e80:	2303      	movs	r3, #3
 8000e82:	4003      	ands	r3, r0
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e88:	481f      	ldr	r0, [pc, #124]	@ (8000f08 <__NVIC_SetPriority+0xd4>)
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	430a      	orrs	r2, r1
 8000e94:	33c0      	adds	r3, #192	@ 0xc0
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e9a:	e031      	b.n	8000f00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f0c <__NVIC_SetPriority+0xd8>)
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	0019      	movs	r1, r3
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	400b      	ands	r3, r1
 8000ea8:	3b08      	subs	r3, #8
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3306      	adds	r3, #6
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	18d3      	adds	r3, r2, r3
 8000eb2:	3304      	adds	r3, #4
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	1dfa      	adds	r2, r7, #7
 8000eb8:	7812      	ldrb	r2, [r2, #0]
 8000eba:	0011      	movs	r1, r2
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	00d2      	lsls	r2, r2, #3
 8000ec2:	21ff      	movs	r1, #255	@ 0xff
 8000ec4:	4091      	lsls	r1, r2
 8000ec6:	000a      	movs	r2, r1
 8000ec8:	43d2      	mvns	r2, r2
 8000eca:	401a      	ands	r2, r3
 8000ecc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	019b      	lsls	r3, r3, #6
 8000ed2:	22ff      	movs	r2, #255	@ 0xff
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	0018      	movs	r0, r3
 8000edc:	2303      	movs	r3, #3
 8000ede:	4003      	ands	r3, r0
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee4:	4809      	ldr	r0, [pc, #36]	@ (8000f0c <__NVIC_SetPriority+0xd8>)
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	001c      	movs	r4, r3
 8000eec:	230f      	movs	r3, #15
 8000eee:	4023      	ands	r3, r4
 8000ef0:	3b08      	subs	r3, #8
 8000ef2:	089b      	lsrs	r3, r3, #2
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	3306      	adds	r3, #6
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	18c3      	adds	r3, r0, r3
 8000efc:	3304      	adds	r3, #4
 8000efe:	601a      	str	r2, [r3, #0]
}
 8000f00:	46c0      	nop			@ (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b003      	add	sp, #12
 8000f06:	bd90      	pop	{r4, r7, pc}
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	1e5a      	subs	r2, r3, #1
 8000f1c:	2380      	movs	r3, #128	@ 0x80
 8000f1e:	045b      	lsls	r3, r3, #17
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d301      	bcc.n	8000f28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f24:	2301      	movs	r3, #1
 8000f26:	e010      	b.n	8000f4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f28:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <SysTick_Config+0x44>)
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	3a01      	subs	r2, #1
 8000f2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f30:	2301      	movs	r3, #1
 8000f32:	425b      	negs	r3, r3
 8000f34:	2103      	movs	r1, #3
 8000f36:	0018      	movs	r0, r3
 8000f38:	f7ff ff7c 	bl	8000e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <SysTick_Config+0x44>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <SysTick_Config+0x44>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b002      	add	sp, #8
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	210f      	movs	r1, #15
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	1c02      	adds	r2, r0, #0
 8000f68:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	0011      	movs	r1, r2
 8000f74:	0018      	movs	r0, r3
 8000f76:	f7ff ff5d 	bl	8000e34 <__NVIC_SetPriority>
}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b004      	add	sp, #16
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff ffbf 	bl	8000f10 <SysTick_Config>
 8000f92:	0003      	movs	r3, r0
}
 8000f94:	0018      	movs	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b002      	add	sp, #8
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000faa:	e147      	b.n	800123c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	4091      	lsls	r1, r2
 8000fb6:	000a      	movs	r2, r1
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d100      	bne.n	8000fc4 <HAL_GPIO_Init+0x28>
 8000fc2:	e138      	b.n	8001236 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2203      	movs	r2, #3
 8000fca:	4013      	ands	r3, r2
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d005      	beq.n	8000fdc <HAL_GPIO_Init+0x40>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d130      	bne.n	800103e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	409a      	lsls	r2, r3
 8000fea:	0013      	movs	r3, r2
 8000fec:	43da      	mvns	r2, r3
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	0013      	movs	r3, r2
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001012:	2201      	movs	r2, #1
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
 8001018:	0013      	movs	r3, r2
 800101a:	43da      	mvns	r2, r3
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	091b      	lsrs	r3, r3, #4
 8001028:	2201      	movs	r2, #1
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
 8001030:	0013      	movs	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2203      	movs	r2, #3
 8001044:	4013      	ands	r3, r2
 8001046:	2b03      	cmp	r3, #3
 8001048:	d017      	beq.n	800107a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	43da      	mvns	r2, r3
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	409a      	lsls	r2, r3
 800106c:	0013      	movs	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2203      	movs	r2, #3
 8001080:	4013      	ands	r3, r2
 8001082:	2b02      	cmp	r3, #2
 8001084:	d123      	bne.n	80010ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	58d3      	ldr	r3, [r2, r3]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2207      	movs	r2, #7
 8001098:	4013      	ands	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	409a      	lsls	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	43da      	mvns	r2, r3
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	691a      	ldr	r2, [r3, #16]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2107      	movs	r1, #7
 80010b2:	400b      	ands	r3, r1
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	409a      	lsls	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	6939      	ldr	r1, [r7, #16]
 80010cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	43da      	mvns	r2, r3
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2203      	movs	r2, #3
 80010ec:	401a      	ands	r2, r3
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	23c0      	movs	r3, #192	@ 0xc0
 8001108:	029b      	lsls	r3, r3, #10
 800110a:	4013      	ands	r3, r2
 800110c:	d100      	bne.n	8001110 <HAL_GPIO_Init+0x174>
 800110e:	e092      	b.n	8001236 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001110:	4a50      	ldr	r2, [pc, #320]	@ (8001254 <HAL_GPIO_Init+0x2b8>)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3318      	adds	r3, #24
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	589b      	ldr	r3, [r3, r2]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	2203      	movs	r2, #3
 8001122:	4013      	ands	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	220f      	movs	r2, #15
 8001128:	409a      	lsls	r2, r3
 800112a:	0013      	movs	r3, r2
 800112c:	43da      	mvns	r2, r3
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	23a0      	movs	r3, #160	@ 0xa0
 8001138:	05db      	lsls	r3, r3, #23
 800113a:	429a      	cmp	r2, r3
 800113c:	d013      	beq.n	8001166 <HAL_GPIO_Init+0x1ca>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a45      	ldr	r2, [pc, #276]	@ (8001258 <HAL_GPIO_Init+0x2bc>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00d      	beq.n	8001162 <HAL_GPIO_Init+0x1c6>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a44      	ldr	r2, [pc, #272]	@ (800125c <HAL_GPIO_Init+0x2c0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x1c2>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a43      	ldr	r2, [pc, #268]	@ (8001260 <HAL_GPIO_Init+0x2c4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_GPIO_Init+0x1be>
 8001156:	2303      	movs	r3, #3
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x1cc>
 800115a:	2305      	movs	r3, #5
 800115c:	e004      	b.n	8001168 <HAL_GPIO_Init+0x1cc>
 800115e:	2302      	movs	r3, #2
 8001160:	e002      	b.n	8001168 <HAL_GPIO_Init+0x1cc>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x1cc>
 8001166:	2300      	movs	r3, #0
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	2103      	movs	r1, #3
 800116c:	400a      	ands	r2, r1
 800116e:	00d2      	lsls	r2, r2, #3
 8001170:	4093      	lsls	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001178:	4936      	ldr	r1, [pc, #216]	@ (8001254 <HAL_GPIO_Init+0x2b8>)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3318      	adds	r3, #24
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001186:	4b33      	ldr	r3, [pc, #204]	@ (8001254 <HAL_GPIO_Init+0x2b8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43da      	mvns	r2, r3
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	2380      	movs	r3, #128	@ 0x80
 800119c:	035b      	lsls	r3, r3, #13
 800119e:	4013      	ands	r3, r2
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001254 <HAL_GPIO_Init+0x2b8>)
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80011b0:	4b28      	ldr	r3, [pc, #160]	@ (8001254 <HAL_GPIO_Init+0x2b8>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43da      	mvns	r2, r3
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	2380      	movs	r3, #128	@ 0x80
 80011c6:	039b      	lsls	r3, r3, #14
 80011c8:	4013      	ands	r3, r2
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001254 <HAL_GPIO_Init+0x2b8>)
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011da:	4a1e      	ldr	r2, [pc, #120]	@ (8001254 <HAL_GPIO_Init+0x2b8>)
 80011dc:	2384      	movs	r3, #132	@ 0x84
 80011de:	58d3      	ldr	r3, [r2, r3]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43da      	mvns	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	2380      	movs	r3, #128	@ 0x80
 80011f2:	029b      	lsls	r3, r3, #10
 80011f4:	4013      	ands	r3, r2
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001200:	4914      	ldr	r1, [pc, #80]	@ (8001254 <HAL_GPIO_Init+0x2b8>)
 8001202:	2284      	movs	r2, #132	@ 0x84
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001208:	4a12      	ldr	r2, [pc, #72]	@ (8001254 <HAL_GPIO_Init+0x2b8>)
 800120a:	2380      	movs	r3, #128	@ 0x80
 800120c:	58d3      	ldr	r3, [r2, r3]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43da      	mvns	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	2380      	movs	r3, #128	@ 0x80
 8001220:	025b      	lsls	r3, r3, #9
 8001222:	4013      	ands	r3, r2
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800122e:	4909      	ldr	r1, [pc, #36]	@ (8001254 <HAL_GPIO_Init+0x2b8>)
 8001230:	2280      	movs	r2, #128	@ 0x80
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3301      	adds	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	40da      	lsrs	r2, r3
 8001244:	1e13      	subs	r3, r2, #0
 8001246:	d000      	beq.n	800124a <HAL_GPIO_Init+0x2ae>
 8001248:	e6b0      	b.n	8000fac <HAL_GPIO_Init+0x10>
  }
}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	46c0      	nop			@ (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	b006      	add	sp, #24
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40021800 	.word	0x40021800
 8001258:	50000400 	.word	0x50000400
 800125c:	50000800 	.word	0x50000800
 8001260:	50000c00 	.word	0x50000c00

08001264 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	000a      	movs	r2, r1
 800126e:	1cbb      	adds	r3, r7, #2
 8001270:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	1cba      	adds	r2, r7, #2
 8001278:	8812      	ldrh	r2, [r2, #0]
 800127a:	4013      	ands	r3, r2
 800127c:	d004      	beq.n	8001288 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800127e:	230f      	movs	r3, #15
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	2201      	movs	r2, #1
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e003      	b.n	8001290 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001288:	230f      	movs	r3, #15
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001290:	230f      	movs	r3, #15
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	781b      	ldrb	r3, [r3, #0]
}
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b004      	add	sp, #16
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	0008      	movs	r0, r1
 80012a8:	0011      	movs	r1, r2
 80012aa:	1cbb      	adds	r3, r7, #2
 80012ac:	1c02      	adds	r2, r0, #0
 80012ae:	801a      	strh	r2, [r3, #0]
 80012b0:	1c7b      	adds	r3, r7, #1
 80012b2:	1c0a      	adds	r2, r1, #0
 80012b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b6:	1c7b      	adds	r3, r7, #1
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d004      	beq.n	80012c8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012be:	1cbb      	adds	r3, r7, #2
 80012c0:	881a      	ldrh	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c6:	e003      	b.n	80012d0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012c8:	1cbb      	adds	r3, r7, #2
 80012ca:	881a      	ldrh	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012d0:	46c0      	nop			@ (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b002      	add	sp, #8
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80012e0:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a19      	ldr	r2, [pc, #100]	@ (800134c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	0019      	movs	r1, r3
 80012ea:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	2380      	movs	r3, #128	@ 0x80
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d11f      	bne.n	800133c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80012fc:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	0013      	movs	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	189b      	adds	r3, r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4912      	ldr	r1, [pc, #72]	@ (8001354 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800130a:	0018      	movs	r0, r3
 800130c:	f7fe fefa 	bl	8000104 <__udivsi3>
 8001310:	0003      	movs	r3, r0
 8001312:	3301      	adds	r3, #1
 8001314:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001316:	e008      	b.n	800132a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3b01      	subs	r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	e001      	b.n	800132a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e009      	b.n	800133e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800132a:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800132c:	695a      	ldr	r2, [r3, #20]
 800132e:	2380      	movs	r3, #128	@ 0x80
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	401a      	ands	r2, r3
 8001334:	2380      	movs	r3, #128	@ 0x80
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	429a      	cmp	r2, r3
 800133a:	d0ed      	beq.n	8001318 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	0018      	movs	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	b004      	add	sp, #16
 8001344:	bd80      	pop	{r7, pc}
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	40007000 	.word	0x40007000
 800134c:	fffff9ff 	.word	0xfffff9ff
 8001350:	20000000 	.word	0x20000000
 8001354:	000f4240 	.word	0x000f4240

08001358 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800135c:	4b03      	ldr	r3, [pc, #12]	@ (800136c <LL_RCC_GetAPB1Prescaler+0x14>)
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	23e0      	movs	r3, #224	@ 0xe0
 8001362:	01db      	lsls	r3, r3, #7
 8001364:	4013      	ands	r3, r2
}
 8001366:	0018      	movs	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000

08001370 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e2fe      	b.n	8001980 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2201      	movs	r2, #1
 8001388:	4013      	ands	r3, r2
 800138a:	d100      	bne.n	800138e <HAL_RCC_OscConfig+0x1e>
 800138c:	e07c      	b.n	8001488 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800138e:	4bc3      	ldr	r3, [pc, #780]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2238      	movs	r2, #56	@ 0x38
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001398:	4bc0      	ldr	r3, [pc, #768]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2203      	movs	r2, #3
 800139e:	4013      	ands	r3, r2
 80013a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2b10      	cmp	r3, #16
 80013a6:	d102      	bne.n	80013ae <HAL_RCC_OscConfig+0x3e>
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d002      	beq.n	80013b4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	d10b      	bne.n	80013cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b4:	4bb9      	ldr	r3, [pc, #740]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2380      	movs	r3, #128	@ 0x80
 80013ba:	029b      	lsls	r3, r3, #10
 80013bc:	4013      	ands	r3, r2
 80013be:	d062      	beq.n	8001486 <HAL_RCC_OscConfig+0x116>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d15e      	bne.n	8001486 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e2d9      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	2380      	movs	r3, #128	@ 0x80
 80013d2:	025b      	lsls	r3, r3, #9
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d107      	bne.n	80013e8 <HAL_RCC_OscConfig+0x78>
 80013d8:	4bb0      	ldr	r3, [pc, #704]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4baf      	ldr	r3, [pc, #700]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 80013de:	2180      	movs	r1, #128	@ 0x80
 80013e0:	0249      	lsls	r1, r1, #9
 80013e2:	430a      	orrs	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	e020      	b.n	800142a <HAL_RCC_OscConfig+0xba>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	23a0      	movs	r3, #160	@ 0xa0
 80013ee:	02db      	lsls	r3, r3, #11
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d10e      	bne.n	8001412 <HAL_RCC_OscConfig+0xa2>
 80013f4:	4ba9      	ldr	r3, [pc, #676]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4ba8      	ldr	r3, [pc, #672]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 80013fa:	2180      	movs	r1, #128	@ 0x80
 80013fc:	02c9      	lsls	r1, r1, #11
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	4ba6      	ldr	r3, [pc, #664]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4ba5      	ldr	r3, [pc, #660]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001408:	2180      	movs	r1, #128	@ 0x80
 800140a:	0249      	lsls	r1, r1, #9
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e00b      	b.n	800142a <HAL_RCC_OscConfig+0xba>
 8001412:	4ba2      	ldr	r3, [pc, #648]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4ba1      	ldr	r3, [pc, #644]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001418:	49a1      	ldr	r1, [pc, #644]	@ (80016a0 <HAL_RCC_OscConfig+0x330>)
 800141a:	400a      	ands	r2, r1
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	4b9f      	ldr	r3, [pc, #636]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b9e      	ldr	r3, [pc, #632]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001424:	499f      	ldr	r1, [pc, #636]	@ (80016a4 <HAL_RCC_OscConfig+0x334>)
 8001426:	400a      	ands	r2, r1
 8001428:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d014      	beq.n	800145c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001432:	f7ff fcbb 	bl	8000dac <HAL_GetTick>
 8001436:	0003      	movs	r3, r0
 8001438:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fcb6 	bl	8000dac <HAL_GetTick>
 8001440:	0002      	movs	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	@ 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e298      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800144e:	4b93      	ldr	r3, [pc, #588]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	2380      	movs	r3, #128	@ 0x80
 8001454:	029b      	lsls	r3, r3, #10
 8001456:	4013      	ands	r3, r2
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0xcc>
 800145a:	e015      	b.n	8001488 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fca6 	bl	8000dac <HAL_GetTick>
 8001460:	0003      	movs	r3, r0
 8001462:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001466:	f7ff fca1 	bl	8000dac <HAL_GetTick>
 800146a:	0002      	movs	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b64      	cmp	r3, #100	@ 0x64
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e283      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001478:	4b88      	ldr	r3, [pc, #544]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2380      	movs	r3, #128	@ 0x80
 800147e:	029b      	lsls	r3, r3, #10
 8001480:	4013      	ands	r3, r2
 8001482:	d1f0      	bne.n	8001466 <HAL_RCC_OscConfig+0xf6>
 8001484:	e000      	b.n	8001488 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001486:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2202      	movs	r2, #2
 800148e:	4013      	ands	r3, r2
 8001490:	d100      	bne.n	8001494 <HAL_RCC_OscConfig+0x124>
 8001492:	e099      	b.n	80015c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001494:	4b81      	ldr	r3, [pc, #516]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2238      	movs	r2, #56	@ 0x38
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800149e:	4b7f      	ldr	r3, [pc, #508]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2203      	movs	r2, #3
 80014a4:	4013      	ands	r3, r2
 80014a6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	2b10      	cmp	r3, #16
 80014ac:	d102      	bne.n	80014b4 <HAL_RCC_OscConfig+0x144>
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d002      	beq.n	80014ba <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d135      	bne.n	8001526 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ba:	4b78      	ldr	r3, [pc, #480]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	2380      	movs	r3, #128	@ 0x80
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4013      	ands	r3, r2
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x162>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e256      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b72      	ldr	r3, [pc, #456]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4a74      	ldr	r2, [pc, #464]	@ (80016a8 <HAL_RCC_OscConfig+0x338>)
 80014d8:	4013      	ands	r3, r2
 80014da:	0019      	movs	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	021a      	lsls	r2, r3, #8
 80014e2:	4b6e      	ldr	r3, [pc, #440]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 80014e4:	430a      	orrs	r2, r1
 80014e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d112      	bne.n	8001514 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014ee:	4b6b      	ldr	r3, [pc, #428]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a6e      	ldr	r2, [pc, #440]	@ (80016ac <HAL_RCC_OscConfig+0x33c>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	0019      	movs	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	4b67      	ldr	r3, [pc, #412]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 80014fe:	430a      	orrs	r2, r1
 8001500:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001502:	4b66      	ldr	r3, [pc, #408]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	0adb      	lsrs	r3, r3, #11
 8001508:	2207      	movs	r2, #7
 800150a:	4013      	ands	r3, r2
 800150c:	4a68      	ldr	r2, [pc, #416]	@ (80016b0 <HAL_RCC_OscConfig+0x340>)
 800150e:	40da      	lsrs	r2, r3
 8001510:	4b68      	ldr	r3, [pc, #416]	@ (80016b4 <HAL_RCC_OscConfig+0x344>)
 8001512:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001514:	4b68      	ldr	r3, [pc, #416]	@ (80016b8 <HAL_RCC_OscConfig+0x348>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	0018      	movs	r0, r3
 800151a:	f7ff fbeb 	bl	8000cf4 <HAL_InitTick>
 800151e:	1e03      	subs	r3, r0, #0
 8001520:	d051      	beq.n	80015c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e22c      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d030      	beq.n	8001590 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800152e:	4b5b      	ldr	r3, [pc, #364]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a5e      	ldr	r2, [pc, #376]	@ (80016ac <HAL_RCC_OscConfig+0x33c>)
 8001534:	4013      	ands	r3, r2
 8001536:	0019      	movs	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	4b57      	ldr	r3, [pc, #348]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 800153e:	430a      	orrs	r2, r1
 8001540:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001542:	4b56      	ldr	r3, [pc, #344]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b55      	ldr	r3, [pc, #340]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001548:	2180      	movs	r1, #128	@ 0x80
 800154a:	0049      	lsls	r1, r1, #1
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff fc2c 	bl	8000dac <HAL_GetTick>
 8001554:	0003      	movs	r3, r0
 8001556:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155a:	f7ff fc27 	bl	8000dac <HAL_GetTick>
 800155e:	0002      	movs	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e209      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800156c:	4b4b      	ldr	r3, [pc, #300]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	2380      	movs	r3, #128	@ 0x80
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4013      	ands	r3, r2
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	4b48      	ldr	r3, [pc, #288]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	4a4a      	ldr	r2, [pc, #296]	@ (80016a8 <HAL_RCC_OscConfig+0x338>)
 800157e:	4013      	ands	r3, r2
 8001580:	0019      	movs	r1, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	021a      	lsls	r2, r3, #8
 8001588:	4b44      	ldr	r3, [pc, #272]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 800158a:	430a      	orrs	r2, r1
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	e01b      	b.n	80015c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001590:	4b42      	ldr	r3, [pc, #264]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b41      	ldr	r3, [pc, #260]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001596:	4949      	ldr	r1, [pc, #292]	@ (80016bc <HAL_RCC_OscConfig+0x34c>)
 8001598:	400a      	ands	r2, r1
 800159a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159c:	f7ff fc06 	bl	8000dac <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a6:	f7ff fc01 	bl	8000dac <HAL_GetTick>
 80015aa:	0002      	movs	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e1e3      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b8:	4b38      	ldr	r3, [pc, #224]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2380      	movs	r3, #128	@ 0x80
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4013      	ands	r3, r2
 80015c2:	d1f0      	bne.n	80015a6 <HAL_RCC_OscConfig+0x236>
 80015c4:	e000      	b.n	80015c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2208      	movs	r2, #8
 80015ce:	4013      	ands	r3, r2
 80015d0:	d047      	beq.n	8001662 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80015d2:	4b32      	ldr	r3, [pc, #200]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2238      	movs	r2, #56	@ 0x38
 80015d8:	4013      	ands	r3, r2
 80015da:	2b18      	cmp	r3, #24
 80015dc:	d10a      	bne.n	80015f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80015de:	4b2f      	ldr	r3, [pc, #188]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 80015e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015e2:	2202      	movs	r2, #2
 80015e4:	4013      	ands	r3, r2
 80015e6:	d03c      	beq.n	8001662 <HAL_RCC_OscConfig+0x2f2>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d138      	bne.n	8001662 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e1c5      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d019      	beq.n	8001630 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80015fc:	4b27      	ldr	r3, [pc, #156]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 80015fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001600:	4b26      	ldr	r3, [pc, #152]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001602:	2101      	movs	r1, #1
 8001604:	430a      	orrs	r2, r1
 8001606:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff fbd0 	bl	8000dac <HAL_GetTick>
 800160c:	0003      	movs	r3, r0
 800160e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001612:	f7ff fbcb 	bl	8000dac <HAL_GetTick>
 8001616:	0002      	movs	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e1ad      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001624:	4b1d      	ldr	r3, [pc, #116]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001628:	2202      	movs	r2, #2
 800162a:	4013      	ands	r3, r2
 800162c:	d0f1      	beq.n	8001612 <HAL_RCC_OscConfig+0x2a2>
 800162e:	e018      	b.n	8001662 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001630:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001632:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001634:	4b19      	ldr	r3, [pc, #100]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001636:	2101      	movs	r1, #1
 8001638:	438a      	bics	r2, r1
 800163a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fbb6 	bl	8000dac <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001646:	f7ff fbb1 	bl	8000dac <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e193      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001658:	4b10      	ldr	r3, [pc, #64]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 800165a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800165c:	2202      	movs	r2, #2
 800165e:	4013      	ands	r3, r2
 8001660:	d1f1      	bne.n	8001646 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2204      	movs	r2, #4
 8001668:	4013      	ands	r3, r2
 800166a:	d100      	bne.n	800166e <HAL_RCC_OscConfig+0x2fe>
 800166c:	e0c6      	b.n	80017fc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166e:	231f      	movs	r3, #31
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2238      	movs	r2, #56	@ 0x38
 800167c:	4013      	ands	r3, r2
 800167e:	2b20      	cmp	r3, #32
 8001680:	d11e      	bne.n	80016c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001682:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_RCC_OscConfig+0x32c>)
 8001684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001686:	2202      	movs	r2, #2
 8001688:	4013      	ands	r3, r2
 800168a:	d100      	bne.n	800168e <HAL_RCC_OscConfig+0x31e>
 800168c:	e0b6      	b.n	80017fc <HAL_RCC_OscConfig+0x48c>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d000      	beq.n	8001698 <HAL_RCC_OscConfig+0x328>
 8001696:	e0b1      	b.n	80017fc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e171      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
 800169c:	40021000 	.word	0x40021000
 80016a0:	fffeffff 	.word	0xfffeffff
 80016a4:	fffbffff 	.word	0xfffbffff
 80016a8:	ffff80ff 	.word	0xffff80ff
 80016ac:	ffffc7ff 	.word	0xffffc7ff
 80016b0:	00f42400 	.word	0x00f42400
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000004 	.word	0x20000004
 80016bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016c0:	4bb1      	ldr	r3, [pc, #708]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 80016c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	055b      	lsls	r3, r3, #21
 80016c8:	4013      	ands	r3, r2
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_OscConfig+0x360>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x362>
 80016d0:	2300      	movs	r3, #0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d011      	beq.n	80016fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4bac      	ldr	r3, [pc, #688]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 80016d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016da:	4bab      	ldr	r3, [pc, #684]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 80016dc:	2180      	movs	r1, #128	@ 0x80
 80016de:	0549      	lsls	r1, r1, #21
 80016e0:	430a      	orrs	r2, r1
 80016e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016e4:	4ba8      	ldr	r3, [pc, #672]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 80016e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016e8:	2380      	movs	r3, #128	@ 0x80
 80016ea:	055b      	lsls	r3, r3, #21
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80016f2:	231f      	movs	r3, #31
 80016f4:	18fb      	adds	r3, r7, r3
 80016f6:	2201      	movs	r2, #1
 80016f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fa:	4ba4      	ldr	r3, [pc, #656]	@ (800198c <HAL_RCC_OscConfig+0x61c>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	2380      	movs	r3, #128	@ 0x80
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4013      	ands	r3, r2
 8001704:	d11a      	bne.n	800173c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001706:	4ba1      	ldr	r3, [pc, #644]	@ (800198c <HAL_RCC_OscConfig+0x61c>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4ba0      	ldr	r3, [pc, #640]	@ (800198c <HAL_RCC_OscConfig+0x61c>)
 800170c:	2180      	movs	r1, #128	@ 0x80
 800170e:	0049      	lsls	r1, r1, #1
 8001710:	430a      	orrs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001714:	f7ff fb4a 	bl	8000dac <HAL_GetTick>
 8001718:	0003      	movs	r3, r0
 800171a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171e:	f7ff fb45 	bl	8000dac <HAL_GetTick>
 8001722:	0002      	movs	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e127      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001730:	4b96      	ldr	r3, [pc, #600]	@ (800198c <HAL_RCC_OscConfig+0x61c>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2380      	movs	r3, #128	@ 0x80
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4013      	ands	r3, r2
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d106      	bne.n	8001752 <HAL_RCC_OscConfig+0x3e2>
 8001744:	4b90      	ldr	r3, [pc, #576]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 8001746:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001748:	4b8f      	ldr	r3, [pc, #572]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 800174a:	2101      	movs	r1, #1
 800174c:	430a      	orrs	r2, r1
 800174e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001750:	e01c      	b.n	800178c <HAL_RCC_OscConfig+0x41c>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b05      	cmp	r3, #5
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0x404>
 800175a:	4b8b      	ldr	r3, [pc, #556]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 800175c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800175e:	4b8a      	ldr	r3, [pc, #552]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 8001760:	2104      	movs	r1, #4
 8001762:	430a      	orrs	r2, r1
 8001764:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001766:	4b88      	ldr	r3, [pc, #544]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 8001768:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800176a:	4b87      	ldr	r3, [pc, #540]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 800176c:	2101      	movs	r1, #1
 800176e:	430a      	orrs	r2, r1
 8001770:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001772:	e00b      	b.n	800178c <HAL_RCC_OscConfig+0x41c>
 8001774:	4b84      	ldr	r3, [pc, #528]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 8001776:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001778:	4b83      	ldr	r3, [pc, #524]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 800177a:	2101      	movs	r1, #1
 800177c:	438a      	bics	r2, r1
 800177e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001780:	4b81      	ldr	r3, [pc, #516]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 8001782:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001784:	4b80      	ldr	r3, [pc, #512]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 8001786:	2104      	movs	r1, #4
 8001788:	438a      	bics	r2, r1
 800178a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d014      	beq.n	80017be <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fb0a 	bl	8000dac <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800179c:	e009      	b.n	80017b2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7ff fb05 	bl	8000dac <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	4a79      	ldr	r2, [pc, #484]	@ (8001990 <HAL_RCC_OscConfig+0x620>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e0e6      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b2:	4b75      	ldr	r3, [pc, #468]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 80017b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b6:	2202      	movs	r2, #2
 80017b8:	4013      	ands	r3, r2
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x42e>
 80017bc:	e013      	b.n	80017e6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017be:	f7ff faf5 	bl	8000dac <HAL_GetTick>
 80017c2:	0003      	movs	r3, r0
 80017c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c6:	e009      	b.n	80017dc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c8:	f7ff faf0 	bl	8000dac <HAL_GetTick>
 80017cc:	0002      	movs	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	4a6f      	ldr	r2, [pc, #444]	@ (8001990 <HAL_RCC_OscConfig+0x620>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e0d1      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 80017de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e0:	2202      	movs	r2, #2
 80017e2:	4013      	ands	r3, r2
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80017e6:	231f      	movs	r3, #31
 80017e8:	18fb      	adds	r3, r7, r3
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80017f0:	4b65      	ldr	r3, [pc, #404]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 80017f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017f4:	4b64      	ldr	r3, [pc, #400]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 80017f6:	4967      	ldr	r1, [pc, #412]	@ (8001994 <HAL_RCC_OscConfig+0x624>)
 80017f8:	400a      	ands	r2, r1
 80017fa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d100      	bne.n	8001806 <HAL_RCC_OscConfig+0x496>
 8001804:	e0bb      	b.n	800197e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001806:	4b60      	ldr	r3, [pc, #384]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2238      	movs	r2, #56	@ 0x38
 800180c:	4013      	ands	r3, r2
 800180e:	2b10      	cmp	r3, #16
 8001810:	d100      	bne.n	8001814 <HAL_RCC_OscConfig+0x4a4>
 8001812:	e07b      	b.n	800190c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d156      	bne.n	80018ca <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181c:	4b5a      	ldr	r3, [pc, #360]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b59      	ldr	r3, [pc, #356]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 8001822:	495d      	ldr	r1, [pc, #372]	@ (8001998 <HAL_RCC_OscConfig+0x628>)
 8001824:	400a      	ands	r2, r1
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fac0 	bl	8000dac <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff fabb 	bl	8000dac <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e09d      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001844:	4b50      	ldr	r3, [pc, #320]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	2380      	movs	r3, #128	@ 0x80
 800184a:	049b      	lsls	r3, r3, #18
 800184c:	4013      	ands	r3, r2
 800184e:	d1f0      	bne.n	8001832 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001850:	4b4d      	ldr	r3, [pc, #308]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4a51      	ldr	r2, [pc, #324]	@ (800199c <HAL_RCC_OscConfig+0x62c>)
 8001856:	4013      	ands	r3, r2
 8001858:	0019      	movs	r1, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1a      	ldr	r2, [r3, #32]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800187c:	431a      	orrs	r2, r3
 800187e:	4b42      	ldr	r3, [pc, #264]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 8001880:	430a      	orrs	r2, r1
 8001882:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001884:	4b40      	ldr	r3, [pc, #256]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b3f      	ldr	r3, [pc, #252]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 800188a:	2180      	movs	r1, #128	@ 0x80
 800188c:	0449      	lsls	r1, r1, #17
 800188e:	430a      	orrs	r2, r1
 8001890:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001892:	4b3d      	ldr	r3, [pc, #244]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	4b3c      	ldr	r3, [pc, #240]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 8001898:	2180      	movs	r1, #128	@ 0x80
 800189a:	0549      	lsls	r1, r1, #21
 800189c:	430a      	orrs	r2, r1
 800189e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff fa84 	bl	8000dac <HAL_GetTick>
 80018a4:	0003      	movs	r3, r0
 80018a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018aa:	f7ff fa7f 	bl	8000dac <HAL_GetTick>
 80018ae:	0002      	movs	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e061      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018bc:	4b32      	ldr	r3, [pc, #200]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	049b      	lsls	r3, r3, #18
 80018c4:	4013      	ands	r3, r2
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x53a>
 80018c8:	e059      	b.n	800197e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 80018d0:	4931      	ldr	r1, [pc, #196]	@ (8001998 <HAL_RCC_OscConfig+0x628>)
 80018d2:	400a      	ands	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d6:	f7ff fa69 	bl	8000dac <HAL_GetTick>
 80018da:	0003      	movs	r3, r0
 80018dc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e0:	f7ff fa64 	bl	8000dac <HAL_GetTick>
 80018e4:	0002      	movs	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e046      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f2:	4b25      	ldr	r3, [pc, #148]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	2380      	movs	r3, #128	@ 0x80
 80018f8:	049b      	lsls	r3, r3, #18
 80018fa:	4013      	ands	r3, r2
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80018fe:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 8001904:	4926      	ldr	r1, [pc, #152]	@ (80019a0 <HAL_RCC_OscConfig+0x630>)
 8001906:	400a      	ands	r2, r1
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	e038      	b.n	800197e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e033      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001918:	4b1b      	ldr	r3, [pc, #108]	@ (8001988 <HAL_RCC_OscConfig+0x618>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2203      	movs	r2, #3
 8001922:	401a      	ands	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	429a      	cmp	r2, r3
 800192a:	d126      	bne.n	800197a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2270      	movs	r2, #112	@ 0x70
 8001930:	401a      	ands	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d11f      	bne.n	800197a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	23fe      	movs	r3, #254	@ 0xfe
 800193e:	01db      	lsls	r3, r3, #7
 8001940:	401a      	ands	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001946:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d116      	bne.n	800197a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	23f8      	movs	r3, #248	@ 0xf8
 8001950:	039b      	lsls	r3, r3, #14
 8001952:	401a      	ands	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d10e      	bne.n	800197a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	23e0      	movs	r3, #224	@ 0xe0
 8001960:	051b      	lsls	r3, r3, #20
 8001962:	401a      	ands	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	0f5b      	lsrs	r3, r3, #29
 8001970:	075a      	lsls	r2, r3, #29
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d001      	beq.n	800197e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	b008      	add	sp, #32
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40021000 	.word	0x40021000
 800198c:	40007000 	.word	0x40007000
 8001990:	00001388 	.word	0x00001388
 8001994:	efffffff 	.word	0xefffffff
 8001998:	feffffff 	.word	0xfeffffff
 800199c:	11c1808c 	.word	0x11c1808c
 80019a0:	eefefffc 	.word	0xeefefffc

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0e9      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b76      	ldr	r3, [pc, #472]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2207      	movs	r2, #7
 80019be:	4013      	ands	r3, r2
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d91e      	bls.n	8001a04 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b73      	ldr	r3, [pc, #460]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2207      	movs	r2, #7
 80019cc:	4393      	bics	r3, r2
 80019ce:	0019      	movs	r1, r3
 80019d0:	4b70      	ldr	r3, [pc, #448]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019d8:	f7ff f9e8 	bl	8000dac <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019e0:	e009      	b.n	80019f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e2:	f7ff f9e3 	bl	8000dac <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	4a6a      	ldr	r2, [pc, #424]	@ (8001b98 <HAL_RCC_ClockConfig+0x1f4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e0ca      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019f6:	4b67      	ldr	r3, [pc, #412]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2207      	movs	r2, #7
 80019fc:	4013      	ands	r3, r2
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d1ee      	bne.n	80019e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2202      	movs	r2, #2
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d015      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2204      	movs	r2, #4
 8001a14:	4013      	ands	r3, r2
 8001a16:	d006      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a18:	4b60      	ldr	r3, [pc, #384]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	4b5f      	ldr	r3, [pc, #380]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001a1e:	21e0      	movs	r1, #224	@ 0xe0
 8001a20:	01c9      	lsls	r1, r1, #7
 8001a22:	430a      	orrs	r2, r1
 8001a24:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a26:	4b5d      	ldr	r3, [pc, #372]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1fc>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	0019      	movs	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	4b59      	ldr	r3, [pc, #356]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001a36:	430a      	orrs	r2, r1
 8001a38:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4013      	ands	r3, r2
 8001a42:	d057      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d107      	bne.n	8001a5c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a4c:	4b53      	ldr	r3, [pc, #332]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	@ 0x80
 8001a52:	029b      	lsls	r3, r3, #10
 8001a54:	4013      	ands	r3, r2
 8001a56:	d12b      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e097      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d107      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a64:	4b4d      	ldr	r3, [pc, #308]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	@ 0x80
 8001a6a:	049b      	lsls	r3, r3, #18
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d11f      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e08b      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a7c:	4b47      	ldr	r3, [pc, #284]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2380      	movs	r3, #128	@ 0x80
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4013      	ands	r3, r2
 8001a86:	d113      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e07f      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a94:	4b41      	ldr	r3, [pc, #260]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a98:	2202      	movs	r2, #2
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d108      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e074      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e06d      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ab0:	4b3a      	ldr	r3, [pc, #232]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	4393      	bics	r3, r2
 8001ab8:	0019      	movs	r1, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	4b37      	ldr	r3, [pc, #220]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ac4:	f7ff f972 	bl	8000dac <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001acc:	e009      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ace:	f7ff f96d 	bl	8000dac <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	4a2f      	ldr	r2, [pc, #188]	@ (8001b98 <HAL_RCC_ClockConfig+0x1f4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e054      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2238      	movs	r2, #56	@ 0x38
 8001ae8:	401a      	ands	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d1ec      	bne.n	8001ace <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af4:	4b27      	ldr	r3, [pc, #156]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2207      	movs	r2, #7
 8001afa:	4013      	ands	r3, r2
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d21e      	bcs.n	8001b40 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2207      	movs	r2, #7
 8001b08:	4393      	bics	r3, r2
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	4b21      	ldr	r3, [pc, #132]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b14:	f7ff f94a 	bl	8000dac <HAL_GetTick>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b1c:	e009      	b.n	8001b32 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1e:	f7ff f945 	bl	8000dac <HAL_GetTick>
 8001b22:	0002      	movs	r2, r0
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	4a1b      	ldr	r2, [pc, #108]	@ (8001b98 <HAL_RCC_ClockConfig+0x1f4>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e02c      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b32:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2207      	movs	r2, #7
 8001b38:	4013      	ands	r3, r2
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d1ee      	bne.n	8001b1e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2204      	movs	r2, #4
 8001b46:	4013      	ands	r3, r2
 8001b48:	d009      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b4a:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	4a15      	ldr	r2, [pc, #84]	@ (8001ba4 <HAL_RCC_ClockConfig+0x200>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	0019      	movs	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b5e:	f000 f829 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 8001b62:	0001      	movs	r1, r0
 8001b64:	4b0d      	ldr	r3, [pc, #52]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <HAL_RCC_ClockConfig+0x204>)
 8001b70:	0092      	lsls	r2, r2, #2
 8001b72:	58d3      	ldr	r3, [r2, r3]
 8001b74:	221f      	movs	r2, #31
 8001b76:	4013      	ands	r3, r2
 8001b78:	000a      	movs	r2, r1
 8001b7a:	40da      	lsrs	r2, r3
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <HAL_RCC_ClockConfig+0x208>)
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b80:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb0 <HAL_RCC_ClockConfig+0x20c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0018      	movs	r0, r3
 8001b86:	f7ff f8b5 	bl	8000cf4 <HAL_InitTick>
 8001b8a:	0003      	movs	r3, r0
}
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b004      	add	sp, #16
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40022000 	.word	0x40022000
 8001b98:	00001388 	.word	0x00001388
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	fffff0ff 	.word	0xfffff0ff
 8001ba4:	ffff8fff 	.word	0xffff8fff
 8001ba8:	08003810 	.word	0x08003810
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000004 	.word	0x20000004

08001bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bba:	4b3c      	ldr	r3, [pc, #240]	@ (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2238      	movs	r2, #56	@ 0x38
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d10f      	bne.n	8001be4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001bc4:	4b39      	ldr	r3, [pc, #228]	@ (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	0adb      	lsrs	r3, r3, #11
 8001bca:	2207      	movs	r2, #7
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2201      	movs	r2, #1
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	0013      	movs	r3, r2
 8001bd4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001bd6:	6839      	ldr	r1, [r7, #0]
 8001bd8:	4835      	ldr	r0, [pc, #212]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bda:	f7fe fa93 	bl	8000104 <__udivsi3>
 8001bde:	0003      	movs	r3, r0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	e05d      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be4:	4b31      	ldr	r3, [pc, #196]	@ (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2238      	movs	r2, #56	@ 0x38
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d102      	bne.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bf0:	4b30      	ldr	r3, [pc, #192]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	e054      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2238      	movs	r2, #56	@ 0x38
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b10      	cmp	r3, #16
 8001c00:	d138      	bne.n	8001c74 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c02:	4b2a      	ldr	r3, [pc, #168]	@ (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2203      	movs	r2, #3
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c0c:	4b27      	ldr	r3, [pc, #156]	@ (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	2207      	movs	r2, #7
 8001c14:	4013      	ands	r3, r2
 8001c16:	3301      	adds	r3, #1
 8001c18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d10d      	bne.n	8001c3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	4824      	ldr	r0, [pc, #144]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c24:	f7fe fa6e 	bl	8000104 <__udivsi3>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	0019      	movs	r1, r3
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	227f      	movs	r2, #127	@ 0x7f
 8001c34:	4013      	ands	r3, r2
 8001c36:	434b      	muls	r3, r1
 8001c38:	617b      	str	r3, [r7, #20]
        break;
 8001c3a:	e00d      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	481c      	ldr	r0, [pc, #112]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c40:	f7fe fa60 	bl	8000104 <__udivsi3>
 8001c44:	0003      	movs	r3, r0
 8001c46:	0019      	movs	r1, r3
 8001c48:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	227f      	movs	r2, #127	@ 0x7f
 8001c50:	4013      	ands	r3, r2
 8001c52:	434b      	muls	r3, r1
 8001c54:	617b      	str	r3, [r7, #20]
        break;
 8001c56:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c58:	4b14      	ldr	r3, [pc, #80]	@ (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0f5b      	lsrs	r3, r3, #29
 8001c5e:	2207      	movs	r2, #7
 8001c60:	4013      	ands	r3, r2
 8001c62:	3301      	adds	r3, #1
 8001c64:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	6978      	ldr	r0, [r7, #20]
 8001c6a:	f7fe fa4b 	bl	8000104 <__udivsi3>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	e015      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c74:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2238      	movs	r2, #56	@ 0x38
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	d103      	bne.n	8001c88 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c80:	2380      	movs	r3, #128	@ 0x80
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c88:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2238      	movs	r2, #56	@ 0x38
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b18      	cmp	r3, #24
 8001c92:	d103      	bne.n	8001c9c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c94:	23fa      	movs	r3, #250	@ 0xfa
 8001c96:	01db      	lsls	r3, r3, #7
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	e001      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ca0:	693b      	ldr	r3, [r7, #16]
}
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b006      	add	sp, #24
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			@ (mov r8, r8)
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	00f42400 	.word	0x00f42400
 8001cb4:	007a1200 	.word	0x007a1200

08001cb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cbc:	4b02      	ldr	r3, [pc, #8]	@ (8001cc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			@ (mov r8, r8)
 8001cc8:	20000000 	.word	0x20000000

08001ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ccc:	b5b0      	push	{r4, r5, r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001cd0:	f7ff fff2 	bl	8001cb8 <HAL_RCC_GetHCLKFreq>
 8001cd4:	0004      	movs	r4, r0
 8001cd6:	f7ff fb3f 	bl	8001358 <LL_RCC_GetAPB1Prescaler>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	0b1a      	lsrs	r2, r3, #12
 8001cde:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ce0:	0092      	lsls	r2, r2, #2
 8001ce2:	58d3      	ldr	r3, [r2, r3]
 8001ce4:	221f      	movs	r2, #31
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	40dc      	lsrs	r4, r3
 8001cea:	0023      	movs	r3, r4
}
 8001cec:	0018      	movs	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf2:	46c0      	nop			@ (mov r8, r8)
 8001cf4:	08003850 	.word	0x08003850

08001cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d00:	2313      	movs	r3, #19
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d08:	2312      	movs	r3, #18
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	@ 0x80
 8001d16:	029b      	lsls	r3, r3, #10
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d100      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d1c:	e0a3      	b.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d1e:	2011      	movs	r0, #17
 8001d20:	183b      	adds	r3, r7, r0
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d26:	4bc3      	ldr	r3, [pc, #780]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d2a:	2380      	movs	r3, #128	@ 0x80
 8001d2c:	055b      	lsls	r3, r3, #21
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d110      	bne.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	4bc0      	ldr	r3, [pc, #768]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d36:	4bbf      	ldr	r3, [pc, #764]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d38:	2180      	movs	r1, #128	@ 0x80
 8001d3a:	0549      	lsls	r1, r1, #21
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d40:	4bbc      	ldr	r3, [pc, #752]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d44:	2380      	movs	r3, #128	@ 0x80
 8001d46:	055b      	lsls	r3, r3, #21
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4e:	183b      	adds	r3, r7, r0
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d54:	4bb8      	ldr	r3, [pc, #736]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4bb7      	ldr	r3, [pc, #732]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d5a:	2180      	movs	r1, #128	@ 0x80
 8001d5c:	0049      	lsls	r1, r1, #1
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d62:	f7ff f823 	bl	8000dac <HAL_GetTick>
 8001d66:	0003      	movs	r3, r0
 8001d68:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d6a:	e00b      	b.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6c:	f7ff f81e 	bl	8000dac <HAL_GetTick>
 8001d70:	0002      	movs	r2, r0
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d904      	bls.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d7a:	2313      	movs	r3, #19
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	2203      	movs	r2, #3
 8001d80:	701a      	strb	r2, [r3, #0]
        break;
 8001d82:	e005      	b.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d84:	4bac      	ldr	r3, [pc, #688]	@ (8002038 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	2380      	movs	r3, #128	@ 0x80
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d0ed      	beq.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d90:	2313      	movs	r3, #19
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d154      	bne.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d9a:	4ba6      	ldr	r3, [pc, #664]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d9e:	23c0      	movs	r3, #192	@ 0xc0
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4013      	ands	r3, r2
 8001da4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d019      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d014      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001db6:	4b9f      	ldr	r3, [pc, #636]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dba:	4aa0      	ldr	r2, [pc, #640]	@ (800203c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001dc0:	4b9c      	ldr	r3, [pc, #624]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dc2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001dc4:	4b9b      	ldr	r3, [pc, #620]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dc6:	2180      	movs	r1, #128	@ 0x80
 8001dc8:	0249      	lsls	r1, r1, #9
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001dce:	4b99      	ldr	r3, [pc, #612]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001dd2:	4b98      	ldr	r3, [pc, #608]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dd4:	499a      	ldr	r1, [pc, #616]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dda:	4b96      	ldr	r3, [pc, #600]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2201      	movs	r2, #1
 8001de4:	4013      	ands	r3, r2
 8001de6:	d016      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7fe ffe0 	bl	8000dac <HAL_GetTick>
 8001dec:	0003      	movs	r3, r0
 8001dee:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001df0:	e00c      	b.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df2:	f7fe ffdb 	bl	8000dac <HAL_GetTick>
 8001df6:	0002      	movs	r2, r0
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	4a91      	ldr	r2, [pc, #580]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d904      	bls.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001e02:	2313      	movs	r3, #19
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	2203      	movs	r2, #3
 8001e08:	701a      	strb	r2, [r3, #0]
            break;
 8001e0a:	e004      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e0c:	4b89      	ldr	r3, [pc, #548]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e10:	2202      	movs	r2, #2
 8001e12:	4013      	ands	r3, r2
 8001e14:	d0ed      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e16:	2313      	movs	r3, #19
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10a      	bne.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e20:	4b84      	ldr	r3, [pc, #528]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e24:	4a85      	ldr	r2, [pc, #532]	@ (800203c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	0019      	movs	r1, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e2e:	4b81      	ldr	r3, [pc, #516]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e30:	430a      	orrs	r2, r1
 8001e32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e34:	e00c      	b.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e36:	2312      	movs	r3, #18
 8001e38:	18fb      	adds	r3, r7, r3
 8001e3a:	2213      	movs	r2, #19
 8001e3c:	18ba      	adds	r2, r7, r2
 8001e3e:	7812      	ldrb	r2, [r2, #0]
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	e005      	b.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e44:	2312      	movs	r3, #18
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	2213      	movs	r2, #19
 8001e4a:	18ba      	adds	r2, r7, r2
 8001e4c:	7812      	ldrb	r2, [r2, #0]
 8001e4e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e50:	2311      	movs	r3, #17
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d105      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5a:	4b76      	ldr	r3, [pc, #472]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e5e:	4b75      	ldr	r3, [pc, #468]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e60:	4979      	ldr	r1, [pc, #484]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001e62:	400a      	ands	r2, r1
 8001e64:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d009      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e70:	4b70      	ldr	r3, [pc, #448]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e74:	2203      	movs	r2, #3
 8001e76:	4393      	bics	r3, r2
 8001e78:	0019      	movs	r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e80:	430a      	orrs	r2, r1
 8001e82:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d009      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e8e:	4b69      	ldr	r3, [pc, #420]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e92:	220c      	movs	r2, #12
 8001e94:	4393      	bics	r3, r2
 8001e96:	0019      	movs	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	4b65      	ldr	r3, [pc, #404]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d009      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001eac:	4b61      	ldr	r3, [pc, #388]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb0:	4a66      	ldr	r2, [pc, #408]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	4b5e      	ldr	r3, [pc, #376]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	@ 0x80
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d009      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ecc:	4b59      	ldr	r3, [pc, #356]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed0:	4a5f      	ldr	r2, [pc, #380]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	4b56      	ldr	r3, [pc, #344]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001edc:	430a      	orrs	r2, r1
 8001ede:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d009      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001eec:	4b51      	ldr	r3, [pc, #324]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef0:	4a58      	ldr	r2, [pc, #352]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69da      	ldr	r2, [r3, #28]
 8001efa:	4b4e      	ldr	r3, [pc, #312]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001efc:	430a      	orrs	r2, r1
 8001efe:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2220      	movs	r2, #32
 8001f06:	4013      	ands	r3, r2
 8001f08:	d009      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0e:	4a52      	ldr	r2, [pc, #328]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	0019      	movs	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	4b46      	ldr	r3, [pc, #280]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	2380      	movs	r3, #128	@ 0x80
 8001f24:	01db      	lsls	r3, r3, #7
 8001f26:	4013      	ands	r3, r2
 8001f28:	d015      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f2a:	4b42      	ldr	r3, [pc, #264]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	0899      	lsrs	r1, r3, #2
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1a      	ldr	r2, [r3, #32]
 8001f36:	4b3f      	ldr	r3, [pc, #252]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1a      	ldr	r2, [r3, #32]
 8001f40:	2380      	movs	r3, #128	@ 0x80
 8001f42:	05db      	lsls	r3, r3, #23
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d106      	bne.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f48:	4b3a      	ldr	r3, [pc, #232]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	4b39      	ldr	r3, [pc, #228]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f4e:	2180      	movs	r1, #128	@ 0x80
 8001f50:	0249      	lsls	r1, r1, #9
 8001f52:	430a      	orrs	r2, r1
 8001f54:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	@ 0x80
 8001f5c:	031b      	lsls	r3, r3, #12
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d009      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f62:	4b34      	ldr	r3, [pc, #208]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f66:	2240      	movs	r2, #64	@ 0x40
 8001f68:	4393      	bics	r3, r2
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f70:	4b30      	ldr	r3, [pc, #192]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f72:	430a      	orrs	r2, r1
 8001f74:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	2380      	movs	r3, #128	@ 0x80
 8001f7c:	039b      	lsls	r3, r3, #14
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d016      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f82:	4b2c      	ldr	r3, [pc, #176]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f86:	4a35      	ldr	r2, [pc, #212]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f90:	4b28      	ldr	r3, [pc, #160]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f92:	430a      	orrs	r2, r1
 8001f94:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f9a:	2380      	movs	r3, #128	@ 0x80
 8001f9c:	03db      	lsls	r3, r3, #15
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d106      	bne.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001fa2:	4b24      	ldr	r3, [pc, #144]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	4b23      	ldr	r3, [pc, #140]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fa8:	2180      	movs	r1, #128	@ 0x80
 8001faa:	0449      	lsls	r1, r1, #17
 8001fac:	430a      	orrs	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	@ 0x80
 8001fb6:	03db      	lsls	r3, r3, #15
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d016      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc0:	4a27      	ldr	r2, [pc, #156]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fca:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fd4:	2380      	movs	r3, #128	@ 0x80
 8001fd6:	045b      	lsls	r3, r3, #17
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d106      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001fdc:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe2:	2180      	movs	r1, #128	@ 0x80
 8001fe4:	0449      	lsls	r1, r1, #17
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	2380      	movs	r3, #128	@ 0x80
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d016      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffa:	4a1a      	ldr	r2, [pc, #104]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	0019      	movs	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695a      	ldr	r2, [r3, #20]
 8002004:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002006:	430a      	orrs	r2, r1
 8002008:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	2380      	movs	r3, #128	@ 0x80
 8002010:	01db      	lsls	r3, r3, #7
 8002012:	429a      	cmp	r2, r3
 8002014:	d106      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002016:	4b07      	ldr	r3, [pc, #28]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800201c:	2180      	movs	r1, #128	@ 0x80
 800201e:	0249      	lsls	r1, r1, #9
 8002020:	430a      	orrs	r2, r1
 8002022:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002024:	2312      	movs	r3, #18
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	781b      	ldrb	r3, [r3, #0]
}
 800202a:	0018      	movs	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	b006      	add	sp, #24
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			@ (mov r8, r8)
 8002034:	40021000 	.word	0x40021000
 8002038:	40007000 	.word	0x40007000
 800203c:	fffffcff 	.word	0xfffffcff
 8002040:	fffeffff 	.word	0xfffeffff
 8002044:	00001388 	.word	0x00001388
 8002048:	efffffff 	.word	0xefffffff
 800204c:	fffff3ff 	.word	0xfffff3ff
 8002050:	fff3ffff 	.word	0xfff3ffff
 8002054:	ffcfffff 	.word	0xffcfffff
 8002058:	ffffcfff 	.word	0xffffcfff
 800205c:	ffbfffff 	.word	0xffbfffff
 8002060:	feffffff 	.word	0xfeffffff
 8002064:	ffff3fff 	.word	0xffff3fff

08002068 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e046      	b.n	8002108 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2288      	movs	r2, #136	@ 0x88
 800207e:	589b      	ldr	r3, [r3, r2]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d107      	bne.n	8002094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2284      	movs	r2, #132	@ 0x84
 8002088:	2100      	movs	r1, #0
 800208a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	0018      	movs	r0, r3
 8002090:	f7fe fd68 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2288      	movs	r2, #136	@ 0x88
 8002098:	2124      	movs	r1, #36	@ 0x24
 800209a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2101      	movs	r1, #1
 80020a8:	438a      	bics	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	0018      	movs	r0, r3
 80020b8:	f000 faea 	bl	8002690 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	0018      	movs	r0, r3
 80020c0:	f000 f828 	bl	8002114 <UART_SetConfig>
 80020c4:	0003      	movs	r3, r0
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e01c      	b.n	8002108 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	490d      	ldr	r1, [pc, #52]	@ (8002110 <HAL_UART_Init+0xa8>)
 80020da:	400a      	ands	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	212a      	movs	r1, #42	@ 0x2a
 80020ea:	438a      	bics	r2, r1
 80020ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2101      	movs	r1, #1
 80020fa:	430a      	orrs	r2, r1
 80020fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	0018      	movs	r0, r3
 8002102:	f000 fb79 	bl	80027f8 <UART_CheckIdleState>
 8002106:	0003      	movs	r3, r0
}
 8002108:	0018      	movs	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	b002      	add	sp, #8
 800210e:	bd80      	pop	{r7, pc}
 8002110:	ffffb7ff 	.word	0xffffb7ff

08002114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	b090      	sub	sp, #64	@ 0x40
 8002118:	af00      	add	r7, sp, #0
 800211a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800211c:	231a      	movs	r3, #26
 800211e:	2220      	movs	r2, #32
 8002120:	189b      	adds	r3, r3, r2
 8002122:	19db      	adds	r3, r3, r7
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	431a      	orrs	r2, r3
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	431a      	orrs	r2, r3
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	4313      	orrs	r3, r2
 800213e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4aaf      	ldr	r2, [pc, #700]	@ (8002404 <UART_SetConfig+0x2f0>)
 8002148:	4013      	ands	r3, r2
 800214a:	0019      	movs	r1, r3
 800214c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002152:	430b      	orrs	r3, r1
 8002154:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4aaa      	ldr	r2, [pc, #680]	@ (8002408 <UART_SetConfig+0x2f4>)
 800215e:	4013      	ands	r3, r2
 8002160:	0018      	movs	r0, r3
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	68d9      	ldr	r1, [r3, #12]
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	0003      	movs	r3, r0
 800216c:	430b      	orrs	r3, r1
 800216e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4aa4      	ldr	r2, [pc, #656]	@ (800240c <UART_SetConfig+0x2f8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d004      	beq.n	800218a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002186:	4313      	orrs	r3, r2
 8002188:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a9f      	ldr	r2, [pc, #636]	@ (8002410 <UART_SetConfig+0x2fc>)
 8002192:	4013      	ands	r3, r2
 8002194:	0019      	movs	r1, r3
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800219c:	430b      	orrs	r3, r1
 800219e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a6:	220f      	movs	r2, #15
 80021a8:	4393      	bics	r3, r2
 80021aa:	0018      	movs	r0, r3
 80021ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	0003      	movs	r3, r0
 80021b6:	430b      	orrs	r3, r1
 80021b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a95      	ldr	r2, [pc, #596]	@ (8002414 <UART_SetConfig+0x300>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d131      	bne.n	8002228 <UART_SetConfig+0x114>
 80021c4:	4b94      	ldr	r3, [pc, #592]	@ (8002418 <UART_SetConfig+0x304>)
 80021c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c8:	2203      	movs	r2, #3
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d01d      	beq.n	800220c <UART_SetConfig+0xf8>
 80021d0:	d823      	bhi.n	800221a <UART_SetConfig+0x106>
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d00c      	beq.n	80021f0 <UART_SetConfig+0xdc>
 80021d6:	d820      	bhi.n	800221a <UART_SetConfig+0x106>
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <UART_SetConfig+0xce>
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d00e      	beq.n	80021fe <UART_SetConfig+0xea>
 80021e0:	e01b      	b.n	800221a <UART_SetConfig+0x106>
 80021e2:	231b      	movs	r3, #27
 80021e4:	2220      	movs	r2, #32
 80021e6:	189b      	adds	r3, r3, r2
 80021e8:	19db      	adds	r3, r3, r7
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	e0b4      	b.n	800235a <UART_SetConfig+0x246>
 80021f0:	231b      	movs	r3, #27
 80021f2:	2220      	movs	r2, #32
 80021f4:	189b      	adds	r3, r3, r2
 80021f6:	19db      	adds	r3, r3, r7
 80021f8:	2202      	movs	r2, #2
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	e0ad      	b.n	800235a <UART_SetConfig+0x246>
 80021fe:	231b      	movs	r3, #27
 8002200:	2220      	movs	r2, #32
 8002202:	189b      	adds	r3, r3, r2
 8002204:	19db      	adds	r3, r3, r7
 8002206:	2204      	movs	r2, #4
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	e0a6      	b.n	800235a <UART_SetConfig+0x246>
 800220c:	231b      	movs	r3, #27
 800220e:	2220      	movs	r2, #32
 8002210:	189b      	adds	r3, r3, r2
 8002212:	19db      	adds	r3, r3, r7
 8002214:	2208      	movs	r2, #8
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	e09f      	b.n	800235a <UART_SetConfig+0x246>
 800221a:	231b      	movs	r3, #27
 800221c:	2220      	movs	r2, #32
 800221e:	189b      	adds	r3, r3, r2
 8002220:	19db      	adds	r3, r3, r7
 8002222:	2210      	movs	r2, #16
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e098      	b.n	800235a <UART_SetConfig+0x246>
 8002228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a7b      	ldr	r2, [pc, #492]	@ (800241c <UART_SetConfig+0x308>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d131      	bne.n	8002296 <UART_SetConfig+0x182>
 8002232:	4b79      	ldr	r3, [pc, #484]	@ (8002418 <UART_SetConfig+0x304>)
 8002234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002236:	220c      	movs	r2, #12
 8002238:	4013      	ands	r3, r2
 800223a:	2b0c      	cmp	r3, #12
 800223c:	d01d      	beq.n	800227a <UART_SetConfig+0x166>
 800223e:	d823      	bhi.n	8002288 <UART_SetConfig+0x174>
 8002240:	2b08      	cmp	r3, #8
 8002242:	d00c      	beq.n	800225e <UART_SetConfig+0x14a>
 8002244:	d820      	bhi.n	8002288 <UART_SetConfig+0x174>
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <UART_SetConfig+0x13c>
 800224a:	2b04      	cmp	r3, #4
 800224c:	d00e      	beq.n	800226c <UART_SetConfig+0x158>
 800224e:	e01b      	b.n	8002288 <UART_SetConfig+0x174>
 8002250:	231b      	movs	r3, #27
 8002252:	2220      	movs	r2, #32
 8002254:	189b      	adds	r3, r3, r2
 8002256:	19db      	adds	r3, r3, r7
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
 800225c:	e07d      	b.n	800235a <UART_SetConfig+0x246>
 800225e:	231b      	movs	r3, #27
 8002260:	2220      	movs	r2, #32
 8002262:	189b      	adds	r3, r3, r2
 8002264:	19db      	adds	r3, r3, r7
 8002266:	2202      	movs	r2, #2
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e076      	b.n	800235a <UART_SetConfig+0x246>
 800226c:	231b      	movs	r3, #27
 800226e:	2220      	movs	r2, #32
 8002270:	189b      	adds	r3, r3, r2
 8002272:	19db      	adds	r3, r3, r7
 8002274:	2204      	movs	r2, #4
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	e06f      	b.n	800235a <UART_SetConfig+0x246>
 800227a:	231b      	movs	r3, #27
 800227c:	2220      	movs	r2, #32
 800227e:	189b      	adds	r3, r3, r2
 8002280:	19db      	adds	r3, r3, r7
 8002282:	2208      	movs	r2, #8
 8002284:	701a      	strb	r2, [r3, #0]
 8002286:	e068      	b.n	800235a <UART_SetConfig+0x246>
 8002288:	231b      	movs	r3, #27
 800228a:	2220      	movs	r2, #32
 800228c:	189b      	adds	r3, r3, r2
 800228e:	19db      	adds	r3, r3, r7
 8002290:	2210      	movs	r2, #16
 8002292:	701a      	strb	r2, [r3, #0]
 8002294:	e061      	b.n	800235a <UART_SetConfig+0x246>
 8002296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a61      	ldr	r2, [pc, #388]	@ (8002420 <UART_SetConfig+0x30c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d106      	bne.n	80022ae <UART_SetConfig+0x19a>
 80022a0:	231b      	movs	r3, #27
 80022a2:	2220      	movs	r2, #32
 80022a4:	189b      	adds	r3, r3, r2
 80022a6:	19db      	adds	r3, r3, r7
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e055      	b.n	800235a <UART_SetConfig+0x246>
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a5c      	ldr	r2, [pc, #368]	@ (8002424 <UART_SetConfig+0x310>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d106      	bne.n	80022c6 <UART_SetConfig+0x1b2>
 80022b8:	231b      	movs	r3, #27
 80022ba:	2220      	movs	r2, #32
 80022bc:	189b      	adds	r3, r3, r2
 80022be:	19db      	adds	r3, r3, r7
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	e049      	b.n	800235a <UART_SetConfig+0x246>
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a50      	ldr	r2, [pc, #320]	@ (800240c <UART_SetConfig+0x2f8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d13e      	bne.n	800234e <UART_SetConfig+0x23a>
 80022d0:	4b51      	ldr	r3, [pc, #324]	@ (8002418 <UART_SetConfig+0x304>)
 80022d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80022d4:	23c0      	movs	r3, #192	@ 0xc0
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	4013      	ands	r3, r2
 80022da:	22c0      	movs	r2, #192	@ 0xc0
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	4293      	cmp	r3, r2
 80022e0:	d027      	beq.n	8002332 <UART_SetConfig+0x21e>
 80022e2:	22c0      	movs	r2, #192	@ 0xc0
 80022e4:	0112      	lsls	r2, r2, #4
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d82a      	bhi.n	8002340 <UART_SetConfig+0x22c>
 80022ea:	2280      	movs	r2, #128	@ 0x80
 80022ec:	0112      	lsls	r2, r2, #4
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d011      	beq.n	8002316 <UART_SetConfig+0x202>
 80022f2:	2280      	movs	r2, #128	@ 0x80
 80022f4:	0112      	lsls	r2, r2, #4
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d822      	bhi.n	8002340 <UART_SetConfig+0x22c>
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d004      	beq.n	8002308 <UART_SetConfig+0x1f4>
 80022fe:	2280      	movs	r2, #128	@ 0x80
 8002300:	00d2      	lsls	r2, r2, #3
 8002302:	4293      	cmp	r3, r2
 8002304:	d00e      	beq.n	8002324 <UART_SetConfig+0x210>
 8002306:	e01b      	b.n	8002340 <UART_SetConfig+0x22c>
 8002308:	231b      	movs	r3, #27
 800230a:	2220      	movs	r2, #32
 800230c:	189b      	adds	r3, r3, r2
 800230e:	19db      	adds	r3, r3, r7
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	e021      	b.n	800235a <UART_SetConfig+0x246>
 8002316:	231b      	movs	r3, #27
 8002318:	2220      	movs	r2, #32
 800231a:	189b      	adds	r3, r3, r2
 800231c:	19db      	adds	r3, r3, r7
 800231e:	2202      	movs	r2, #2
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	e01a      	b.n	800235a <UART_SetConfig+0x246>
 8002324:	231b      	movs	r3, #27
 8002326:	2220      	movs	r2, #32
 8002328:	189b      	adds	r3, r3, r2
 800232a:	19db      	adds	r3, r3, r7
 800232c:	2204      	movs	r2, #4
 800232e:	701a      	strb	r2, [r3, #0]
 8002330:	e013      	b.n	800235a <UART_SetConfig+0x246>
 8002332:	231b      	movs	r3, #27
 8002334:	2220      	movs	r2, #32
 8002336:	189b      	adds	r3, r3, r2
 8002338:	19db      	adds	r3, r3, r7
 800233a:	2208      	movs	r2, #8
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e00c      	b.n	800235a <UART_SetConfig+0x246>
 8002340:	231b      	movs	r3, #27
 8002342:	2220      	movs	r2, #32
 8002344:	189b      	adds	r3, r3, r2
 8002346:	19db      	adds	r3, r3, r7
 8002348:	2210      	movs	r2, #16
 800234a:	701a      	strb	r2, [r3, #0]
 800234c:	e005      	b.n	800235a <UART_SetConfig+0x246>
 800234e:	231b      	movs	r3, #27
 8002350:	2220      	movs	r2, #32
 8002352:	189b      	adds	r3, r3, r2
 8002354:	19db      	adds	r3, r3, r7
 8002356:	2210      	movs	r2, #16
 8002358:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a2b      	ldr	r2, [pc, #172]	@ (800240c <UART_SetConfig+0x2f8>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d000      	beq.n	8002366 <UART_SetConfig+0x252>
 8002364:	e0a9      	b.n	80024ba <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002366:	231b      	movs	r3, #27
 8002368:	2220      	movs	r2, #32
 800236a:	189b      	adds	r3, r3, r2
 800236c:	19db      	adds	r3, r3, r7
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b08      	cmp	r3, #8
 8002372:	d015      	beq.n	80023a0 <UART_SetConfig+0x28c>
 8002374:	dc18      	bgt.n	80023a8 <UART_SetConfig+0x294>
 8002376:	2b04      	cmp	r3, #4
 8002378:	d00d      	beq.n	8002396 <UART_SetConfig+0x282>
 800237a:	dc15      	bgt.n	80023a8 <UART_SetConfig+0x294>
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <UART_SetConfig+0x272>
 8002380:	2b02      	cmp	r3, #2
 8002382:	d005      	beq.n	8002390 <UART_SetConfig+0x27c>
 8002384:	e010      	b.n	80023a8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002386:	f7ff fca1 	bl	8001ccc <HAL_RCC_GetPCLK1Freq>
 800238a:	0003      	movs	r3, r0
 800238c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800238e:	e014      	b.n	80023ba <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002390:	4b25      	ldr	r3, [pc, #148]	@ (8002428 <UART_SetConfig+0x314>)
 8002392:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002394:	e011      	b.n	80023ba <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002396:	f7ff fc0d 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 800239a:	0003      	movs	r3, r0
 800239c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800239e:	e00c      	b.n	80023ba <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023a0:	2380      	movs	r3, #128	@ 0x80
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80023a6:	e008      	b.n	80023ba <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80023ac:	231a      	movs	r3, #26
 80023ae:	2220      	movs	r2, #32
 80023b0:	189b      	adds	r3, r3, r2
 80023b2:	19db      	adds	r3, r3, r7
 80023b4:	2201      	movs	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]
        break;
 80023b8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80023ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d100      	bne.n	80023c2 <UART_SetConfig+0x2ae>
 80023c0:	e14b      	b.n	800265a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023c6:	4b19      	ldr	r3, [pc, #100]	@ (800242c <UART_SetConfig+0x318>)
 80023c8:	0052      	lsls	r2, r2, #1
 80023ca:	5ad3      	ldrh	r3, [r2, r3]
 80023cc:	0019      	movs	r1, r3
 80023ce:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80023d0:	f7fd fe98 	bl	8000104 <__udivsi3>
 80023d4:	0003      	movs	r3, r0
 80023d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80023d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	0013      	movs	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	189b      	adds	r3, r3, r2
 80023e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d305      	bcc.n	80023f4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80023ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d91d      	bls.n	8002430 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80023f4:	231a      	movs	r3, #26
 80023f6:	2220      	movs	r2, #32
 80023f8:	189b      	adds	r3, r3, r2
 80023fa:	19db      	adds	r3, r3, r7
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
 8002400:	e12b      	b.n	800265a <UART_SetConfig+0x546>
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	cfff69f3 	.word	0xcfff69f3
 8002408:	ffffcfff 	.word	0xffffcfff
 800240c:	40008000 	.word	0x40008000
 8002410:	11fff4ff 	.word	0x11fff4ff
 8002414:	40013800 	.word	0x40013800
 8002418:	40021000 	.word	0x40021000
 800241c:	40004400 	.word	0x40004400
 8002420:	40004800 	.word	0x40004800
 8002424:	40004c00 	.word	0x40004c00
 8002428:	00f42400 	.word	0x00f42400
 800242c:	08003870 	.word	0x08003870
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800243c:	4b92      	ldr	r3, [pc, #584]	@ (8002688 <UART_SetConfig+0x574>)
 800243e:	0052      	lsls	r2, r2, #1
 8002440:	5ad3      	ldrh	r3, [r2, r3]
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	69b8      	ldr	r0, [r7, #24]
 800244e:	69f9      	ldr	r1, [r7, #28]
 8002450:	f7fd ffce 	bl	80003f0 <__aeabi_uldivmod>
 8002454:	0002      	movs	r2, r0
 8002456:	000b      	movs	r3, r1
 8002458:	0e11      	lsrs	r1, r2, #24
 800245a:	021d      	lsls	r5, r3, #8
 800245c:	430d      	orrs	r5, r1
 800245e:	0214      	lsls	r4, r2, #8
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	085b      	lsrs	r3, r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68b8      	ldr	r0, [r7, #8]
 800246e:	68f9      	ldr	r1, [r7, #12]
 8002470:	1900      	adds	r0, r0, r4
 8002472:	4169      	adcs	r1, r5
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f7fd ffb5 	bl	80003f0 <__aeabi_uldivmod>
 8002486:	0002      	movs	r2, r0
 8002488:	000b      	movs	r3, r1
 800248a:	0013      	movs	r3, r2
 800248c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800248e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002490:	23c0      	movs	r3, #192	@ 0xc0
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	429a      	cmp	r2, r3
 8002496:	d309      	bcc.n	80024ac <UART_SetConfig+0x398>
 8002498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800249a:	2380      	movs	r3, #128	@ 0x80
 800249c:	035b      	lsls	r3, r3, #13
 800249e:	429a      	cmp	r2, r3
 80024a0:	d204      	bcs.n	80024ac <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	e0d6      	b.n	800265a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80024ac:	231a      	movs	r3, #26
 80024ae:	2220      	movs	r2, #32
 80024b0:	189b      	adds	r3, r3, r2
 80024b2:	19db      	adds	r3, r3, r7
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
 80024b8:	e0cf      	b.n	800265a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	2380      	movs	r3, #128	@ 0x80
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d000      	beq.n	80024c8 <UART_SetConfig+0x3b4>
 80024c6:	e070      	b.n	80025aa <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80024c8:	231b      	movs	r3, #27
 80024ca:	2220      	movs	r2, #32
 80024cc:	189b      	adds	r3, r3, r2
 80024ce:	19db      	adds	r3, r3, r7
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d015      	beq.n	8002502 <UART_SetConfig+0x3ee>
 80024d6:	dc18      	bgt.n	800250a <UART_SetConfig+0x3f6>
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d00d      	beq.n	80024f8 <UART_SetConfig+0x3e4>
 80024dc:	dc15      	bgt.n	800250a <UART_SetConfig+0x3f6>
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <UART_SetConfig+0x3d4>
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d005      	beq.n	80024f2 <UART_SetConfig+0x3de>
 80024e6:	e010      	b.n	800250a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024e8:	f7ff fbf0 	bl	8001ccc <HAL_RCC_GetPCLK1Freq>
 80024ec:	0003      	movs	r3, r0
 80024ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80024f0:	e014      	b.n	800251c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024f2:	4b66      	ldr	r3, [pc, #408]	@ (800268c <UART_SetConfig+0x578>)
 80024f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80024f6:	e011      	b.n	800251c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024f8:	f7ff fb5c 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 80024fc:	0003      	movs	r3, r0
 80024fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002500:	e00c      	b.n	800251c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002502:	2380      	movs	r3, #128	@ 0x80
 8002504:	021b      	lsls	r3, r3, #8
 8002506:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002508:	e008      	b.n	800251c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800250e:	231a      	movs	r3, #26
 8002510:	2220      	movs	r2, #32
 8002512:	189b      	adds	r3, r3, r2
 8002514:	19db      	adds	r3, r3, r7
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
        break;
 800251a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800251c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800251e:	2b00      	cmp	r3, #0
 8002520:	d100      	bne.n	8002524 <UART_SetConfig+0x410>
 8002522:	e09a      	b.n	800265a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002528:	4b57      	ldr	r3, [pc, #348]	@ (8002688 <UART_SetConfig+0x574>)
 800252a:	0052      	lsls	r2, r2, #1
 800252c:	5ad3      	ldrh	r3, [r2, r3]
 800252e:	0019      	movs	r1, r3
 8002530:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002532:	f7fd fde7 	bl	8000104 <__udivsi3>
 8002536:	0003      	movs	r3, r0
 8002538:	005a      	lsls	r2, r3, #1
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	085b      	lsrs	r3, r3, #1
 8002540:	18d2      	adds	r2, r2, r3
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	0019      	movs	r1, r3
 8002548:	0010      	movs	r0, r2
 800254a:	f7fd fddb 	bl	8000104 <__udivsi3>
 800254e:	0003      	movs	r3, r0
 8002550:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002554:	2b0f      	cmp	r3, #15
 8002556:	d921      	bls.n	800259c <UART_SetConfig+0x488>
 8002558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	025b      	lsls	r3, r3, #9
 800255e:	429a      	cmp	r2, r3
 8002560:	d21c      	bcs.n	800259c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002564:	b29a      	uxth	r2, r3
 8002566:	200e      	movs	r0, #14
 8002568:	2420      	movs	r4, #32
 800256a:	1903      	adds	r3, r0, r4
 800256c:	19db      	adds	r3, r3, r7
 800256e:	210f      	movs	r1, #15
 8002570:	438a      	bics	r2, r1
 8002572:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	b29b      	uxth	r3, r3
 800257a:	2207      	movs	r2, #7
 800257c:	4013      	ands	r3, r2
 800257e:	b299      	uxth	r1, r3
 8002580:	1903      	adds	r3, r0, r4
 8002582:	19db      	adds	r3, r3, r7
 8002584:	1902      	adds	r2, r0, r4
 8002586:	19d2      	adds	r2, r2, r7
 8002588:	8812      	ldrh	r2, [r2, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	1902      	adds	r2, r0, r4
 8002594:	19d2      	adds	r2, r2, r7
 8002596:	8812      	ldrh	r2, [r2, #0]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	e05e      	b.n	800265a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800259c:	231a      	movs	r3, #26
 800259e:	2220      	movs	r2, #32
 80025a0:	189b      	adds	r3, r3, r2
 80025a2:	19db      	adds	r3, r3, r7
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
 80025a8:	e057      	b.n	800265a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80025aa:	231b      	movs	r3, #27
 80025ac:	2220      	movs	r2, #32
 80025ae:	189b      	adds	r3, r3, r2
 80025b0:	19db      	adds	r3, r3, r7
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d015      	beq.n	80025e4 <UART_SetConfig+0x4d0>
 80025b8:	dc18      	bgt.n	80025ec <UART_SetConfig+0x4d8>
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d00d      	beq.n	80025da <UART_SetConfig+0x4c6>
 80025be:	dc15      	bgt.n	80025ec <UART_SetConfig+0x4d8>
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <UART_SetConfig+0x4b6>
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d005      	beq.n	80025d4 <UART_SetConfig+0x4c0>
 80025c8:	e010      	b.n	80025ec <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025ca:	f7ff fb7f 	bl	8001ccc <HAL_RCC_GetPCLK1Freq>
 80025ce:	0003      	movs	r3, r0
 80025d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80025d2:	e014      	b.n	80025fe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025d4:	4b2d      	ldr	r3, [pc, #180]	@ (800268c <UART_SetConfig+0x578>)
 80025d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80025d8:	e011      	b.n	80025fe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025da:	f7ff faeb 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 80025de:	0003      	movs	r3, r0
 80025e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80025e2:	e00c      	b.n	80025fe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025e4:	2380      	movs	r3, #128	@ 0x80
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80025ea:	e008      	b.n	80025fe <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80025f0:	231a      	movs	r3, #26
 80025f2:	2220      	movs	r2, #32
 80025f4:	189b      	adds	r3, r3, r2
 80025f6:	19db      	adds	r3, r3, r7
 80025f8:	2201      	movs	r2, #1
 80025fa:	701a      	strb	r2, [r3, #0]
        break;
 80025fc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80025fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002600:	2b00      	cmp	r3, #0
 8002602:	d02a      	beq.n	800265a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002606:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002608:	4b1f      	ldr	r3, [pc, #124]	@ (8002688 <UART_SetConfig+0x574>)
 800260a:	0052      	lsls	r2, r2, #1
 800260c:	5ad3      	ldrh	r3, [r2, r3]
 800260e:	0019      	movs	r1, r3
 8002610:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002612:	f7fd fd77 	bl	8000104 <__udivsi3>
 8002616:	0003      	movs	r3, r0
 8002618:	001a      	movs	r2, r3
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	085b      	lsrs	r3, r3, #1
 8002620:	18d2      	adds	r2, r2, r3
 8002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	0019      	movs	r1, r3
 8002628:	0010      	movs	r0, r2
 800262a:	f7fd fd6b 	bl	8000104 <__udivsi3>
 800262e:	0003      	movs	r3, r0
 8002630:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002634:	2b0f      	cmp	r3, #15
 8002636:	d90a      	bls.n	800264e <UART_SetConfig+0x53a>
 8002638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800263a:	2380      	movs	r3, #128	@ 0x80
 800263c:	025b      	lsls	r3, r3, #9
 800263e:	429a      	cmp	r2, r3
 8002640:	d205      	bcs.n	800264e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002644:	b29a      	uxth	r2, r3
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60da      	str	r2, [r3, #12]
 800264c:	e005      	b.n	800265a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800264e:	231a      	movs	r3, #26
 8002650:	2220      	movs	r2, #32
 8002652:	189b      	adds	r3, r3, r2
 8002654:	19db      	adds	r3, r3, r7
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265c:	226a      	movs	r2, #106	@ 0x6a
 800265e:	2101      	movs	r1, #1
 8002660:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002664:	2268      	movs	r2, #104	@ 0x68
 8002666:	2101      	movs	r1, #1
 8002668:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	2200      	movs	r2, #0
 800266e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	2200      	movs	r2, #0
 8002674:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002676:	231a      	movs	r3, #26
 8002678:	2220      	movs	r2, #32
 800267a:	189b      	adds	r3, r3, r2
 800267c:	19db      	adds	r3, r3, r7
 800267e:	781b      	ldrb	r3, [r3, #0]
}
 8002680:	0018      	movs	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	b010      	add	sp, #64	@ 0x40
 8002686:	bdb0      	pop	{r4, r5, r7, pc}
 8002688:	08003870 	.word	0x08003870
 800268c:	00f42400 	.word	0x00f42400

08002690 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	2208      	movs	r2, #8
 800269e:	4013      	ands	r3, r2
 80026a0:	d00b      	beq.n	80026ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a4a      	ldr	r2, [pc, #296]	@ (80027d4 <UART_AdvFeatureConfig+0x144>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	0019      	movs	r1, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026be:	2201      	movs	r2, #1
 80026c0:	4013      	ands	r3, r2
 80026c2:	d00b      	beq.n	80026dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4a43      	ldr	r2, [pc, #268]	@ (80027d8 <UART_AdvFeatureConfig+0x148>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	0019      	movs	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e0:	2202      	movs	r2, #2
 80026e2:	4013      	ands	r3, r2
 80026e4:	d00b      	beq.n	80026fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4a3b      	ldr	r2, [pc, #236]	@ (80027dc <UART_AdvFeatureConfig+0x14c>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002702:	2204      	movs	r2, #4
 8002704:	4013      	ands	r3, r2
 8002706:	d00b      	beq.n	8002720 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4a34      	ldr	r2, [pc, #208]	@ (80027e0 <UART_AdvFeatureConfig+0x150>)
 8002710:	4013      	ands	r3, r2
 8002712:	0019      	movs	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002724:	2210      	movs	r2, #16
 8002726:	4013      	ands	r3, r2
 8002728:	d00b      	beq.n	8002742 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	4a2c      	ldr	r2, [pc, #176]	@ (80027e4 <UART_AdvFeatureConfig+0x154>)
 8002732:	4013      	ands	r3, r2
 8002734:	0019      	movs	r1, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002746:	2220      	movs	r2, #32
 8002748:	4013      	ands	r3, r2
 800274a:	d00b      	beq.n	8002764 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	4a25      	ldr	r2, [pc, #148]	@ (80027e8 <UART_AdvFeatureConfig+0x158>)
 8002754:	4013      	ands	r3, r2
 8002756:	0019      	movs	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002768:	2240      	movs	r2, #64	@ 0x40
 800276a:	4013      	ands	r3, r2
 800276c:	d01d      	beq.n	80027aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a1d      	ldr	r2, [pc, #116]	@ (80027ec <UART_AdvFeatureConfig+0x15c>)
 8002776:	4013      	ands	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800278a:	2380      	movs	r3, #128	@ 0x80
 800278c:	035b      	lsls	r3, r3, #13
 800278e:	429a      	cmp	r2, r3
 8002790:	d10b      	bne.n	80027aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a15      	ldr	r2, [pc, #84]	@ (80027f0 <UART_AdvFeatureConfig+0x160>)
 800279a:	4013      	ands	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ae:	2280      	movs	r2, #128	@ 0x80
 80027b0:	4013      	ands	r3, r2
 80027b2:	d00b      	beq.n	80027cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4a0e      	ldr	r2, [pc, #56]	@ (80027f4 <UART_AdvFeatureConfig+0x164>)
 80027bc:	4013      	ands	r3, r2
 80027be:	0019      	movs	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	605a      	str	r2, [r3, #4]
  }
}
 80027cc:	46c0      	nop			@ (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b002      	add	sp, #8
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	ffff7fff 	.word	0xffff7fff
 80027d8:	fffdffff 	.word	0xfffdffff
 80027dc:	fffeffff 	.word	0xfffeffff
 80027e0:	fffbffff 	.word	0xfffbffff
 80027e4:	ffffefff 	.word	0xffffefff
 80027e8:	ffffdfff 	.word	0xffffdfff
 80027ec:	ffefffff 	.word	0xffefffff
 80027f0:	ff9fffff 	.word	0xff9fffff
 80027f4:	fff7ffff 	.word	0xfff7ffff

080027f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b092      	sub	sp, #72	@ 0x48
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2290      	movs	r2, #144	@ 0x90
 8002804:	2100      	movs	r1, #0
 8002806:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002808:	f7fe fad0 	bl	8000dac <HAL_GetTick>
 800280c:	0003      	movs	r3, r0
 800280e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2208      	movs	r2, #8
 8002818:	4013      	ands	r3, r2
 800281a:	2b08      	cmp	r3, #8
 800281c:	d12d      	bne.n	800287a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800281e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002820:	2280      	movs	r2, #128	@ 0x80
 8002822:	0391      	lsls	r1, r2, #14
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	4a47      	ldr	r2, [pc, #284]	@ (8002944 <UART_CheckIdleState+0x14c>)
 8002828:	9200      	str	r2, [sp, #0]
 800282a:	2200      	movs	r2, #0
 800282c:	f000 f88e 	bl	800294c <UART_WaitOnFlagUntilTimeout>
 8002830:	1e03      	subs	r3, r0, #0
 8002832:	d022      	beq.n	800287a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002834:	f3ef 8310 	mrs	r3, PRIMASK
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800283c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800283e:	2301      	movs	r3, #1
 8002840:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002844:	f383 8810 	msr	PRIMASK, r3
}
 8002848:	46c0      	nop			@ (mov r8, r8)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2180      	movs	r1, #128	@ 0x80
 8002856:	438a      	bics	r2, r1
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800285c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002860:	f383 8810 	msr	PRIMASK, r3
}
 8002864:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2288      	movs	r2, #136	@ 0x88
 800286a:	2120      	movs	r1, #32
 800286c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2284      	movs	r2, #132	@ 0x84
 8002872:	2100      	movs	r1, #0
 8002874:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e060      	b.n	800293c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2204      	movs	r2, #4
 8002882:	4013      	ands	r3, r2
 8002884:	2b04      	cmp	r3, #4
 8002886:	d146      	bne.n	8002916 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800288a:	2280      	movs	r2, #128	@ 0x80
 800288c:	03d1      	lsls	r1, r2, #15
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	4a2c      	ldr	r2, [pc, #176]	@ (8002944 <UART_CheckIdleState+0x14c>)
 8002892:	9200      	str	r2, [sp, #0]
 8002894:	2200      	movs	r2, #0
 8002896:	f000 f859 	bl	800294c <UART_WaitOnFlagUntilTimeout>
 800289a:	1e03      	subs	r3, r0, #0
 800289c:	d03b      	beq.n	8002916 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800289e:	f3ef 8310 	mrs	r3, PRIMASK
 80028a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80028a4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80028a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80028a8:	2301      	movs	r3, #1
 80028aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f383 8810 	msr	PRIMASK, r3
}
 80028b2:	46c0      	nop			@ (mov r8, r8)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4922      	ldr	r1, [pc, #136]	@ (8002948 <UART_CheckIdleState+0x150>)
 80028c0:	400a      	ands	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f383 8810 	msr	PRIMASK, r3
}
 80028ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d0:	f3ef 8310 	mrs	r3, PRIMASK
 80028d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80028d6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80028da:	2301      	movs	r3, #1
 80028dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	f383 8810 	msr	PRIMASK, r3
}
 80028e4:	46c0      	nop			@ (mov r8, r8)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2101      	movs	r1, #1
 80028f2:	438a      	bics	r2, r1
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	f383 8810 	msr	PRIMASK, r3
}
 8002900:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	228c      	movs	r2, #140	@ 0x8c
 8002906:	2120      	movs	r1, #32
 8002908:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2284      	movs	r2, #132	@ 0x84
 800290e:	2100      	movs	r1, #0
 8002910:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e012      	b.n	800293c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2288      	movs	r2, #136	@ 0x88
 800291a:	2120      	movs	r1, #32
 800291c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	228c      	movs	r2, #140	@ 0x8c
 8002922:	2120      	movs	r1, #32
 8002924:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2284      	movs	r2, #132	@ 0x84
 8002936:	2100      	movs	r1, #0
 8002938:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	0018      	movs	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	b010      	add	sp, #64	@ 0x40
 8002942:	bd80      	pop	{r7, pc}
 8002944:	01ffffff 	.word	0x01ffffff
 8002948:	fffffedf 	.word	0xfffffedf

0800294c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	1dfb      	adds	r3, r7, #7
 800295a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800295c:	e051      	b.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	3301      	adds	r3, #1
 8002962:	d04e      	beq.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002964:	f7fe fa22 	bl	8000dac <HAL_GetTick>
 8002968:	0002      	movs	r2, r0
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	429a      	cmp	r2, r3
 8002972:	d302      	bcc.n	800297a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e051      	b.n	8002a22 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2204      	movs	r2, #4
 8002986:	4013      	ands	r3, r2
 8002988:	d03b      	beq.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb6>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b80      	cmp	r3, #128	@ 0x80
 800298e:	d038      	beq.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b40      	cmp	r3, #64	@ 0x40
 8002994:	d035      	beq.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	2208      	movs	r2, #8
 800299e:	4013      	ands	r3, r2
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d111      	bne.n	80029c8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2208      	movs	r2, #8
 80029aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	0018      	movs	r0, r3
 80029b0:	f000 f83c 	bl	8002a2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2290      	movs	r2, #144	@ 0x90
 80029b8:	2108      	movs	r1, #8
 80029ba:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2284      	movs	r2, #132	@ 0x84
 80029c0:	2100      	movs	r1, #0
 80029c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e02c      	b.n	8002a22 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	69da      	ldr	r2, [r3, #28]
 80029ce:	2380      	movs	r3, #128	@ 0x80
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	401a      	ands	r2, r3
 80029d4:	2380      	movs	r3, #128	@ 0x80
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	429a      	cmp	r2, r3
 80029da:	d112      	bne.n	8002a02 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2280      	movs	r2, #128	@ 0x80
 80029e2:	0112      	lsls	r2, r2, #4
 80029e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f000 f81f 	bl	8002a2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2290      	movs	r2, #144	@ 0x90
 80029f2:	2120      	movs	r1, #32
 80029f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2284      	movs	r2, #132	@ 0x84
 80029fa:	2100      	movs	r1, #0
 80029fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e00f      	b.n	8002a22 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	425a      	negs	r2, r3
 8002a12:	4153      	adcs	r3, r2
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	001a      	movs	r2, r3
 8002a18:	1dfb      	adds	r3, r7, #7
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d09e      	beq.n	800295e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	0018      	movs	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b004      	add	sp, #16
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08e      	sub	sp, #56	@ 0x38
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a34:	f3ef 8310 	mrs	r3, PRIMASK
 8002a38:	617b      	str	r3, [r7, #20]
  return(result);
 8002a3a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a3e:	2301      	movs	r3, #1
 8002a40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f383 8810 	msr	PRIMASK, r3
}
 8002a48:	46c0      	nop			@ (mov r8, r8)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4926      	ldr	r1, [pc, #152]	@ (8002af0 <UART_EndRxTransfer+0xc4>)
 8002a56:	400a      	ands	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f383 8810 	msr	PRIMASK, r3
}
 8002a64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a66:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6a:	623b      	str	r3, [r7, #32]
  return(result);
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002a6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a70:	2301      	movs	r3, #1
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	f383 8810 	msr	PRIMASK, r3
}
 8002a7a:	46c0      	nop			@ (mov r8, r8)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	491b      	ldr	r1, [pc, #108]	@ (8002af4 <UART_EndRxTransfer+0xc8>)
 8002a88:	400a      	ands	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a92:	f383 8810 	msr	PRIMASK, r3
}
 8002a96:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d118      	bne.n	8002ad2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8002aa4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002aa6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aaa:	2301      	movs	r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f383 8810 	msr	PRIMASK, r3
}
 8002ab4:	46c0      	nop			@ (mov r8, r8)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2110      	movs	r1, #16
 8002ac2:	438a      	bics	r2, r1
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f383 8810 	msr	PRIMASK, r3
}
 8002ad0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	228c      	movs	r2, #140	@ 0x8c
 8002ad6:	2120      	movs	r1, #32
 8002ad8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002ae6:	46c0      	nop			@ (mov r8, r8)
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b00e      	add	sp, #56	@ 0x38
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			@ (mov r8, r8)
 8002af0:	fffffedf 	.word	0xfffffedf
 8002af4:	effffffe 	.word	0xeffffffe

08002af8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2284      	movs	r2, #132	@ 0x84
 8002b04:	5c9b      	ldrb	r3, [r3, r2]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_UARTEx_DisableFifoMode+0x16>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e027      	b.n	8002b5e <HAL_UARTEx_DisableFifoMode+0x66>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2284      	movs	r2, #132	@ 0x84
 8002b12:	2101      	movs	r1, #1
 8002b14:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2288      	movs	r2, #136	@ 0x88
 8002b1a:	2124      	movs	r1, #36	@ 0x24
 8002b1c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2101      	movs	r1, #1
 8002b32:	438a      	bics	r2, r1
 8002b34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a0b      	ldr	r2, [pc, #44]	@ (8002b68 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2288      	movs	r2, #136	@ 0x88
 8002b50:	2120      	movs	r1, #32
 8002b52:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2284      	movs	r2, #132	@ 0x84
 8002b58:	2100      	movs	r1, #0
 8002b5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	0018      	movs	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b004      	add	sp, #16
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			@ (mov r8, r8)
 8002b68:	dfffffff 	.word	0xdfffffff

08002b6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2284      	movs	r2, #132	@ 0x84
 8002b7a:	5c9b      	ldrb	r3, [r3, r2]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e02e      	b.n	8002be2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2284      	movs	r2, #132	@ 0x84
 8002b88:	2101      	movs	r1, #1
 8002b8a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2288      	movs	r2, #136	@ 0x88
 8002b90:	2124      	movs	r1, #36	@ 0x24
 8002b92:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	438a      	bics	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	08d9      	lsrs	r1, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 f854 	bl	8002c70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2288      	movs	r2, #136	@ 0x88
 8002bd4:	2120      	movs	r1, #32
 8002bd6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2284      	movs	r2, #132	@ 0x84
 8002bdc:	2100      	movs	r1, #0
 8002bde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	0018      	movs	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b004      	add	sp, #16
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2284      	movs	r2, #132	@ 0x84
 8002bfa:	5c9b      	ldrb	r3, [r3, r2]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e02f      	b.n	8002c64 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2284      	movs	r2, #132	@ 0x84
 8002c08:	2101      	movs	r1, #1
 8002c0a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2288      	movs	r2, #136	@ 0x88
 8002c10:	2124      	movs	r1, #36	@ 0x24
 8002c12:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2101      	movs	r1, #1
 8002c28:	438a      	bics	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	4a0e      	ldr	r2, [pc, #56]	@ (8002c6c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	0018      	movs	r0, r3
 8002c46:	f000 f813 	bl	8002c70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2288      	movs	r2, #136	@ 0x88
 8002c56:	2120      	movs	r1, #32
 8002c58:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2284      	movs	r2, #132	@ 0x84
 8002c5e:	2100      	movs	r1, #0
 8002c60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	0018      	movs	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b004      	add	sp, #16
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	f1ffffff 	.word	0xf1ffffff

08002c70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d108      	bne.n	8002c92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	226a      	movs	r2, #106	@ 0x6a
 8002c84:	2101      	movs	r1, #1
 8002c86:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2268      	movs	r2, #104	@ 0x68
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002c90:	e043      	b.n	8002d1a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002c92:	260f      	movs	r6, #15
 8002c94:	19bb      	adds	r3, r7, r6
 8002c96:	2208      	movs	r2, #8
 8002c98:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002c9a:	200e      	movs	r0, #14
 8002c9c:	183b      	adds	r3, r7, r0
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	0e5b      	lsrs	r3, r3, #25
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	240d      	movs	r4, #13
 8002cae:	193b      	adds	r3, r7, r4
 8002cb0:	2107      	movs	r1, #7
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	0f5b      	lsrs	r3, r3, #29
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	250c      	movs	r5, #12
 8002cc2:	197b      	adds	r3, r7, r5
 8002cc4:	2107      	movs	r1, #7
 8002cc6:	400a      	ands	r2, r1
 8002cc8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002cca:	183b      	adds	r3, r7, r0
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	197a      	adds	r2, r7, r5
 8002cd0:	7812      	ldrb	r2, [r2, #0]
 8002cd2:	4914      	ldr	r1, [pc, #80]	@ (8002d24 <UARTEx_SetNbDataToProcess+0xb4>)
 8002cd4:	5c8a      	ldrb	r2, [r1, r2]
 8002cd6:	435a      	muls	r2, r3
 8002cd8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002cda:	197b      	adds	r3, r7, r5
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	4a12      	ldr	r2, [pc, #72]	@ (8002d28 <UARTEx_SetNbDataToProcess+0xb8>)
 8002ce0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	f7fd fa98 	bl	8000218 <__divsi3>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	b299      	uxth	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	226a      	movs	r2, #106	@ 0x6a
 8002cf0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002cf2:	19bb      	adds	r3, r7, r6
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	193a      	adds	r2, r7, r4
 8002cf8:	7812      	ldrb	r2, [r2, #0]
 8002cfa:	490a      	ldr	r1, [pc, #40]	@ (8002d24 <UARTEx_SetNbDataToProcess+0xb4>)
 8002cfc:	5c8a      	ldrb	r2, [r1, r2]
 8002cfe:	435a      	muls	r2, r3
 8002d00:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002d02:	193b      	adds	r3, r7, r4
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	4a08      	ldr	r2, [pc, #32]	@ (8002d28 <UARTEx_SetNbDataToProcess+0xb8>)
 8002d08:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	f7fd fa84 	bl	8000218 <__divsi3>
 8002d10:	0003      	movs	r3, r0
 8002d12:	b299      	uxth	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2268      	movs	r2, #104	@ 0x68
 8002d18:	5299      	strh	r1, [r3, r2]
}
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b005      	add	sp, #20
 8002d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	08003888 	.word	0x08003888
 8002d28:	08003890 	.word	0x08003890

08002d2c <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e03f      	b.n	8002dbe <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2259      	movs	r2, #89	@ 0x59
 8002d42:	5c9b      	ldrb	r3, [r3, r2]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d107      	bne.n	8002d5a <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2258      	movs	r2, #88	@ 0x58
 8002d4e:	2100      	movs	r1, #0
 8002d50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7fd fe7f 	bl	8000a58 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2259      	movs	r2, #89	@ 0x59
 8002d5e:	2102      	movs	r1, #2
 8002d60:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	438a      	bics	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	0018      	movs	r0, r3
 8002d76:	f000 f91d 	bl	8002fb4 <USART_SetConfig>
 8002d7a:	0003      	movs	r3, r0
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e01c      	b.n	8002dbe <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	490e      	ldr	r1, [pc, #56]	@ (8002dc8 <HAL_USART_Init+0x9c>)
 8002d90:	400a      	ands	r2, r1
 8002d92:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	212a      	movs	r1, #42	@ 0x2a
 8002da0:	438a      	bics	r2, r1
 8002da2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2101      	movs	r1, #1
 8002db0:	430a      	orrs	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	0018      	movs	r0, r3
 8002db8:	f000 fb98 	bl	80034ec <USART_CheckIdleState>
 8002dbc:	0003      	movs	r3, r0
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b002      	add	sp, #8
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
 8002dc8:	ffffbfff 	.word	0xffffbfff

08002dcc <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	@ 0x28
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	1dbb      	adds	r3, r7, #6
 8002dda:	801a      	strh	r2, [r3, #0]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2259      	movs	r2, #89	@ 0x59
 8002de0:	5c9b      	ldrb	r3, [r3, r2]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d000      	beq.n	8002dea <HAL_USART_Transmit+0x1e>
 8002de8:	e0a9      	b.n	8002f3e <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_USART_Transmit+0x2c>
 8002df0:	1dbb      	adds	r3, r7, #6
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0a1      	b.n	8002f40 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	015b      	lsls	r3, r3, #5
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d109      	bne.n	8002e1c <HAL_USART_Transmit+0x50>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d105      	bne.n	8002e1c <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2201      	movs	r2, #1
 8002e14:	4013      	ands	r3, r2
 8002e16:	d001      	beq.n	8002e1c <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e091      	b.n	8002f40 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2258      	movs	r2, #88	@ 0x58
 8002e20:	5c9b      	ldrb	r3, [r3, r2]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_USART_Transmit+0x5e>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e08a      	b.n	8002f40 <HAL_USART_Transmit+0x174>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2258      	movs	r2, #88	@ 0x58
 8002e2e:	2101      	movs	r1, #1
 8002e30:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	65da      	str	r2, [r3, #92]	@ 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2259      	movs	r2, #89	@ 0x59
 8002e3c:	2112      	movs	r1, #18
 8002e3e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e40:	f7fd ffb4 	bl	8000dac <HAL_GetTick>
 8002e44:	0003      	movs	r3, r0
 8002e46:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1dba      	adds	r2, r7, #6
 8002e4c:	8812      	ldrh	r2, [r2, #0]
 8002e4e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    husart->TxXferCount = Size;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1dba      	adds	r2, r7, #6
 8002e54:	8812      	ldrh	r2, [r2, #0]
 8002e56:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	2380      	movs	r3, #128	@ 0x80
 8002e5e:	015b      	lsls	r3, r3, #5
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d108      	bne.n	8002e76 <HAL_USART_Transmit+0xaa>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d104      	bne.n	8002e76 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	e003      	b.n	8002e7e <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8002e7e:	e02a      	b.n	8002ed6 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	0013      	movs	r3, r2
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2180      	movs	r1, #128	@ 0x80
 8002e8e:	f000 f85b 	bl	8002f48 <USART_WaitOnFlagUntilTimeout>
 8002e92:	1e03      	subs	r3, r0, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e052      	b.n	8002f40 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10b      	bne.n	8002eb8 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	001a      	movs	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	05d2      	lsls	r2, r2, #23
 8002eac:	0dd2      	lsrs	r2, r2, #23
 8002eae:	629a      	str	r2, [r3, #40]	@ 0x28
        ptxdata16bits++;
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	3302      	adds	r3, #2
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	e007      	b.n	8002ec8 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	781a      	ldrb	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	629a      	str	r2, [r3, #40]	@ 0x28
        ptxdata8bits++;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (husart->TxXferCount > 0U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1cf      	bne.n	8002e80 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	0013      	movs	r3, r2
 8002eea:	2200      	movs	r2, #0
 8002eec:	2140      	movs	r1, #64	@ 0x40
 8002eee:	f000 f82b 	bl	8002f48 <USART_WaitOnFlagUntilTimeout>
 8002ef2:	1e03      	subs	r3, r0, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e022      	b.n	8002f40 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2240      	movs	r2, #64	@ 0x40
 8002f00:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2208      	movs	r2, #8
 8002f08:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699a      	ldr	r2, [r3, #24]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2108      	movs	r1, #8
 8002f16:	430a      	orrs	r2, r1
 8002f18:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2110      	movs	r1, #16
 8002f26:	430a      	orrs	r2, r1
 8002f28:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2259      	movs	r2, #89	@ 0x59
 8002f2e:	2101      	movs	r1, #1
 8002f30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2258      	movs	r2, #88	@ 0x58
 8002f36:	2100      	movs	r1, #0
 8002f38:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e000      	b.n	8002f40 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
  }
}
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b008      	add	sp, #32
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	1dfb      	adds	r3, r7, #7
 8002f56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002f58:	e017      	b.n	8002f8a <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	d014      	beq.n	8002f8a <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f60:	f7fd ff24 	bl	8000dac <HAL_GetTick>
 8002f64:	0002      	movs	r2, r0
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d302      	bcc.n	8002f76 <USART_WaitOnFlagUntilTimeout+0x2e>
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2259      	movs	r2, #89	@ 0x59
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2258      	movs	r2, #88	@ 0x58
 8002f82:	2100      	movs	r1, #0
 8002f84:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e00f      	b.n	8002faa <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	4013      	ands	r3, r2
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	425a      	negs	r2, r3
 8002f9a:	4153      	adcs	r3, r2
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	001a      	movs	r2, r3
 8002fa0:	1dfb      	adds	r3, r7, #7
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d0d8      	beq.n	8002f5a <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b004      	add	sp, #16
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8002fbc:	231e      	movs	r3, #30
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	2280      	movs	r2, #128	@ 0x80
 8002fda:	0212      	lsls	r2, r2, #8
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4ab1      	ldr	r2, [pc, #708]	@ (80032ac <USART_SetConfig+0x2f8>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	0019      	movs	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8002ff6:	2380      	movs	r3, #128	@ 0x80
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	4313      	orrs	r3, r2
 8003004:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	4313      	orrs	r3, r2
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4aa2      	ldr	r2, [pc, #648]	@ (80032b0 <USART_SetConfig+0x2fc>)
 8003028:	4013      	ands	r3, r2
 800302a:	0019      	movs	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303c:	220f      	movs	r2, #15
 800303e:	4393      	bics	r3, r2
 8003040:	0019      	movs	r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a98      	ldr	r2, [pc, #608]	@ (80032b4 <USART_SetConfig+0x300>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d127      	bne.n	80030a8 <USART_SetConfig+0xf4>
 8003058:	4b97      	ldr	r3, [pc, #604]	@ (80032b8 <USART_SetConfig+0x304>)
 800305a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305c:	2203      	movs	r2, #3
 800305e:	4013      	ands	r3, r2
 8003060:	2b03      	cmp	r3, #3
 8003062:	d017      	beq.n	8003094 <USART_SetConfig+0xe0>
 8003064:	d81b      	bhi.n	800309e <USART_SetConfig+0xea>
 8003066:	2b02      	cmp	r3, #2
 8003068:	d00a      	beq.n	8003080 <USART_SetConfig+0xcc>
 800306a:	d818      	bhi.n	800309e <USART_SetConfig+0xea>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <USART_SetConfig+0xc2>
 8003070:	2b01      	cmp	r3, #1
 8003072:	d00a      	beq.n	800308a <USART_SetConfig+0xd6>
 8003074:	e013      	b.n	800309e <USART_SetConfig+0xea>
 8003076:	231f      	movs	r3, #31
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	e058      	b.n	8003132 <USART_SetConfig+0x17e>
 8003080:	231f      	movs	r3, #31
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	2202      	movs	r2, #2
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e053      	b.n	8003132 <USART_SetConfig+0x17e>
 800308a:	231f      	movs	r3, #31
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	2204      	movs	r2, #4
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	e04e      	b.n	8003132 <USART_SetConfig+0x17e>
 8003094:	231f      	movs	r3, #31
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	2208      	movs	r2, #8
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	e049      	b.n	8003132 <USART_SetConfig+0x17e>
 800309e:	231f      	movs	r3, #31
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	2210      	movs	r2, #16
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	e044      	b.n	8003132 <USART_SetConfig+0x17e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a83      	ldr	r2, [pc, #524]	@ (80032bc <USART_SetConfig+0x308>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d127      	bne.n	8003102 <USART_SetConfig+0x14e>
 80030b2:	4b81      	ldr	r3, [pc, #516]	@ (80032b8 <USART_SetConfig+0x304>)
 80030b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b6:	220c      	movs	r2, #12
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b0c      	cmp	r3, #12
 80030bc:	d017      	beq.n	80030ee <USART_SetConfig+0x13a>
 80030be:	d81b      	bhi.n	80030f8 <USART_SetConfig+0x144>
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d00a      	beq.n	80030da <USART_SetConfig+0x126>
 80030c4:	d818      	bhi.n	80030f8 <USART_SetConfig+0x144>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <USART_SetConfig+0x11c>
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d00a      	beq.n	80030e4 <USART_SetConfig+0x130>
 80030ce:	e013      	b.n	80030f8 <USART_SetConfig+0x144>
 80030d0:	231f      	movs	r3, #31
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
 80030d8:	e02b      	b.n	8003132 <USART_SetConfig+0x17e>
 80030da:	231f      	movs	r3, #31
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	2202      	movs	r2, #2
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	e026      	b.n	8003132 <USART_SetConfig+0x17e>
 80030e4:	231f      	movs	r3, #31
 80030e6:	18fb      	adds	r3, r7, r3
 80030e8:	2204      	movs	r2, #4
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	e021      	b.n	8003132 <USART_SetConfig+0x17e>
 80030ee:	231f      	movs	r3, #31
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	2208      	movs	r2, #8
 80030f4:	701a      	strb	r2, [r3, #0]
 80030f6:	e01c      	b.n	8003132 <USART_SetConfig+0x17e>
 80030f8:	231f      	movs	r3, #31
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	2210      	movs	r2, #16
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	e017      	b.n	8003132 <USART_SetConfig+0x17e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a6e      	ldr	r2, [pc, #440]	@ (80032c0 <USART_SetConfig+0x30c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d104      	bne.n	8003116 <USART_SetConfig+0x162>
 800310c:	231f      	movs	r3, #31
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	e00d      	b.n	8003132 <USART_SetConfig+0x17e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a6a      	ldr	r2, [pc, #424]	@ (80032c4 <USART_SetConfig+0x310>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d104      	bne.n	800312a <USART_SetConfig+0x176>
 8003120:	231f      	movs	r3, #31
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e003      	b.n	8003132 <USART_SetConfig+0x17e>
 800312a:	231f      	movs	r3, #31
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	2210      	movs	r2, #16
 8003130:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8003132:	231f      	movs	r3, #31
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d100      	bne.n	800313e <USART_SetConfig+0x18a>
 800313c:	e139      	b.n	80033b2 <USART_SetConfig+0x3fe>
 800313e:	dd00      	ble.n	8003142 <USART_SetConfig+0x18e>
 8003140:	e195      	b.n	800346e <USART_SetConfig+0x4ba>
 8003142:	2b04      	cmp	r3, #4
 8003144:	d100      	bne.n	8003148 <USART_SetConfig+0x194>
 8003146:	e0d3      	b.n	80032f0 <USART_SetConfig+0x33c>
 8003148:	dd00      	ble.n	800314c <USART_SetConfig+0x198>
 800314a:	e190      	b.n	800346e <USART_SetConfig+0x4ba>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <USART_SetConfig+0x1a4>
 8003150:	2b02      	cmp	r3, #2
 8003152:	d100      	bne.n	8003156 <USART_SetConfig+0x1a2>
 8003154:	e061      	b.n	800321a <USART_SetConfig+0x266>
 8003156:	e18a      	b.n	800346e <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8003158:	f7fe fdb8 	bl	8001ccc <HAL_RCC_GetPCLK1Freq>
 800315c:	0003      	movs	r3, r0
 800315e:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	2b00      	cmp	r3, #0
 8003166:	d044      	beq.n	80031f2 <USART_SetConfig+0x23e>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	2b01      	cmp	r3, #1
 800316e:	d03e      	beq.n	80031ee <USART_SetConfig+0x23a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	2b02      	cmp	r3, #2
 8003176:	d038      	beq.n	80031ea <USART_SetConfig+0x236>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	2b03      	cmp	r3, #3
 800317e:	d032      	beq.n	80031e6 <USART_SetConfig+0x232>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003184:	2b04      	cmp	r3, #4
 8003186:	d02c      	beq.n	80031e2 <USART_SetConfig+0x22e>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318c:	2b05      	cmp	r3, #5
 800318e:	d026      	beq.n	80031de <USART_SetConfig+0x22a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	2b06      	cmp	r3, #6
 8003196:	d020      	beq.n	80031da <USART_SetConfig+0x226>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	2b07      	cmp	r3, #7
 800319e:	d01a      	beq.n	80031d6 <USART_SetConfig+0x222>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d014      	beq.n	80031d2 <USART_SetConfig+0x21e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	2b09      	cmp	r3, #9
 80031ae:	d00e      	beq.n	80031ce <USART_SetConfig+0x21a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	2b0a      	cmp	r3, #10
 80031b6:	d008      	beq.n	80031ca <USART_SetConfig+0x216>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031bc:	2b0b      	cmp	r3, #11
 80031be:	d102      	bne.n	80031c6 <USART_SetConfig+0x212>
 80031c0:	2380      	movs	r3, #128	@ 0x80
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	e016      	b.n	80031f4 <USART_SetConfig+0x240>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e014      	b.n	80031f4 <USART_SetConfig+0x240>
 80031ca:	2380      	movs	r3, #128	@ 0x80
 80031cc:	e012      	b.n	80031f4 <USART_SetConfig+0x240>
 80031ce:	2340      	movs	r3, #64	@ 0x40
 80031d0:	e010      	b.n	80031f4 <USART_SetConfig+0x240>
 80031d2:	2320      	movs	r3, #32
 80031d4:	e00e      	b.n	80031f4 <USART_SetConfig+0x240>
 80031d6:	2310      	movs	r3, #16
 80031d8:	e00c      	b.n	80031f4 <USART_SetConfig+0x240>
 80031da:	230c      	movs	r3, #12
 80031dc:	e00a      	b.n	80031f4 <USART_SetConfig+0x240>
 80031de:	230a      	movs	r3, #10
 80031e0:	e008      	b.n	80031f4 <USART_SetConfig+0x240>
 80031e2:	2308      	movs	r3, #8
 80031e4:	e006      	b.n	80031f4 <USART_SetConfig+0x240>
 80031e6:	2306      	movs	r3, #6
 80031e8:	e004      	b.n	80031f4 <USART_SetConfig+0x240>
 80031ea:	2304      	movs	r3, #4
 80031ec:	e002      	b.n	80031f4 <USART_SetConfig+0x240>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e000      	b.n	80031f4 <USART_SetConfig+0x240>
 80031f2:	2301      	movs	r3, #1
 80031f4:	0019      	movs	r1, r3
 80031f6:	6938      	ldr	r0, [r7, #16]
 80031f8:	f7fc ff84 	bl	8000104 <__udivsi3>
 80031fc:	0003      	movs	r3, r0
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	18d2      	adds	r2, r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	0019      	movs	r1, r3
 800320e:	0010      	movs	r0, r2
 8003210:	f7fc ff78 	bl	8000104 <__udivsi3>
 8003214:	0003      	movs	r3, r0
 8003216:	61bb      	str	r3, [r7, #24]
      break;
 8003218:	e12e      	b.n	8003478 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321e:	2b00      	cmp	r3, #0
 8003220:	d052      	beq.n	80032c8 <USART_SetConfig+0x314>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	2b01      	cmp	r3, #1
 8003228:	d03e      	beq.n	80032a8 <USART_SetConfig+0x2f4>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	2b02      	cmp	r3, #2
 8003230:	d038      	beq.n	80032a4 <USART_SetConfig+0x2f0>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003236:	2b03      	cmp	r3, #3
 8003238:	d032      	beq.n	80032a0 <USART_SetConfig+0x2ec>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323e:	2b04      	cmp	r3, #4
 8003240:	d02c      	beq.n	800329c <USART_SetConfig+0x2e8>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003246:	2b05      	cmp	r3, #5
 8003248:	d026      	beq.n	8003298 <USART_SetConfig+0x2e4>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	2b06      	cmp	r3, #6
 8003250:	d020      	beq.n	8003294 <USART_SetConfig+0x2e0>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	2b07      	cmp	r3, #7
 8003258:	d01a      	beq.n	8003290 <USART_SetConfig+0x2dc>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	2b08      	cmp	r3, #8
 8003260:	d014      	beq.n	800328c <USART_SetConfig+0x2d8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	2b09      	cmp	r3, #9
 8003268:	d00e      	beq.n	8003288 <USART_SetConfig+0x2d4>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326e:	2b0a      	cmp	r3, #10
 8003270:	d008      	beq.n	8003284 <USART_SetConfig+0x2d0>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	2b0b      	cmp	r3, #11
 8003278:	d102      	bne.n	8003280 <USART_SetConfig+0x2cc>
 800327a:	2380      	movs	r3, #128	@ 0x80
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	e024      	b.n	80032ca <USART_SetConfig+0x316>
 8003280:	2301      	movs	r3, #1
 8003282:	e022      	b.n	80032ca <USART_SetConfig+0x316>
 8003284:	2380      	movs	r3, #128	@ 0x80
 8003286:	e020      	b.n	80032ca <USART_SetConfig+0x316>
 8003288:	2340      	movs	r3, #64	@ 0x40
 800328a:	e01e      	b.n	80032ca <USART_SetConfig+0x316>
 800328c:	2320      	movs	r3, #32
 800328e:	e01c      	b.n	80032ca <USART_SetConfig+0x316>
 8003290:	2310      	movs	r3, #16
 8003292:	e01a      	b.n	80032ca <USART_SetConfig+0x316>
 8003294:	230c      	movs	r3, #12
 8003296:	e018      	b.n	80032ca <USART_SetConfig+0x316>
 8003298:	230a      	movs	r3, #10
 800329a:	e016      	b.n	80032ca <USART_SetConfig+0x316>
 800329c:	2308      	movs	r3, #8
 800329e:	e014      	b.n	80032ca <USART_SetConfig+0x316>
 80032a0:	2306      	movs	r3, #6
 80032a2:	e012      	b.n	80032ca <USART_SetConfig+0x316>
 80032a4:	2304      	movs	r3, #4
 80032a6:	e010      	b.n	80032ca <USART_SetConfig+0x316>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e00e      	b.n	80032ca <USART_SetConfig+0x316>
 80032ac:	cfff69f3 	.word	0xcfff69f3
 80032b0:	ffffc0f6 	.word	0xffffc0f6
 80032b4:	40013800 	.word	0x40013800
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40004400 	.word	0x40004400
 80032c0:	40004800 	.word	0x40004800
 80032c4:	40004c00 	.word	0x40004c00
 80032c8:	2301      	movs	r3, #1
 80032ca:	0019      	movs	r1, r3
 80032cc:	4886      	ldr	r0, [pc, #536]	@ (80034e8 <USART_SetConfig+0x534>)
 80032ce:	f7fc ff19 	bl	8000104 <__udivsi3>
 80032d2:	0003      	movs	r3, r0
 80032d4:	005a      	lsls	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	18d2      	adds	r2, r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	0019      	movs	r1, r3
 80032e4:	0010      	movs	r0, r2
 80032e6:	f7fc ff0d 	bl	8000104 <__udivsi3>
 80032ea:	0003      	movs	r3, r0
 80032ec:	61bb      	str	r3, [r7, #24]
      break;
 80032ee:	e0c3      	b.n	8003478 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 80032f0:	f7fe fc60 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 80032f4:	0003      	movs	r3, r0
 80032f6:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d044      	beq.n	800338a <USART_SetConfig+0x3d6>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	2b01      	cmp	r3, #1
 8003306:	d03e      	beq.n	8003386 <USART_SetConfig+0x3d2>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330c:	2b02      	cmp	r3, #2
 800330e:	d038      	beq.n	8003382 <USART_SetConfig+0x3ce>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	2b03      	cmp	r3, #3
 8003316:	d032      	beq.n	800337e <USART_SetConfig+0x3ca>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	2b04      	cmp	r3, #4
 800331e:	d02c      	beq.n	800337a <USART_SetConfig+0x3c6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003324:	2b05      	cmp	r3, #5
 8003326:	d026      	beq.n	8003376 <USART_SetConfig+0x3c2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	2b06      	cmp	r3, #6
 800332e:	d020      	beq.n	8003372 <USART_SetConfig+0x3be>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	2b07      	cmp	r3, #7
 8003336:	d01a      	beq.n	800336e <USART_SetConfig+0x3ba>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	2b08      	cmp	r3, #8
 800333e:	d014      	beq.n	800336a <USART_SetConfig+0x3b6>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003344:	2b09      	cmp	r3, #9
 8003346:	d00e      	beq.n	8003366 <USART_SetConfig+0x3b2>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	2b0a      	cmp	r3, #10
 800334e:	d008      	beq.n	8003362 <USART_SetConfig+0x3ae>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	2b0b      	cmp	r3, #11
 8003356:	d102      	bne.n	800335e <USART_SetConfig+0x3aa>
 8003358:	2380      	movs	r3, #128	@ 0x80
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	e016      	b.n	800338c <USART_SetConfig+0x3d8>
 800335e:	2301      	movs	r3, #1
 8003360:	e014      	b.n	800338c <USART_SetConfig+0x3d8>
 8003362:	2380      	movs	r3, #128	@ 0x80
 8003364:	e012      	b.n	800338c <USART_SetConfig+0x3d8>
 8003366:	2340      	movs	r3, #64	@ 0x40
 8003368:	e010      	b.n	800338c <USART_SetConfig+0x3d8>
 800336a:	2320      	movs	r3, #32
 800336c:	e00e      	b.n	800338c <USART_SetConfig+0x3d8>
 800336e:	2310      	movs	r3, #16
 8003370:	e00c      	b.n	800338c <USART_SetConfig+0x3d8>
 8003372:	230c      	movs	r3, #12
 8003374:	e00a      	b.n	800338c <USART_SetConfig+0x3d8>
 8003376:	230a      	movs	r3, #10
 8003378:	e008      	b.n	800338c <USART_SetConfig+0x3d8>
 800337a:	2308      	movs	r3, #8
 800337c:	e006      	b.n	800338c <USART_SetConfig+0x3d8>
 800337e:	2306      	movs	r3, #6
 8003380:	e004      	b.n	800338c <USART_SetConfig+0x3d8>
 8003382:	2304      	movs	r3, #4
 8003384:	e002      	b.n	800338c <USART_SetConfig+0x3d8>
 8003386:	2302      	movs	r3, #2
 8003388:	e000      	b.n	800338c <USART_SetConfig+0x3d8>
 800338a:	2301      	movs	r3, #1
 800338c:	0019      	movs	r1, r3
 800338e:	6938      	ldr	r0, [r7, #16]
 8003390:	f7fc feb8 	bl	8000104 <__udivsi3>
 8003394:	0003      	movs	r3, r0
 8003396:	005a      	lsls	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	18d2      	adds	r2, r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	0019      	movs	r1, r3
 80033a6:	0010      	movs	r0, r2
 80033a8:	f7fc feac 	bl	8000104 <__udivsi3>
 80033ac:	0003      	movs	r3, r0
 80033ae:	61bb      	str	r3, [r7, #24]
      break;
 80033b0:	e062      	b.n	8003478 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d044      	beq.n	8003444 <USART_SetConfig+0x490>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d03e      	beq.n	8003440 <USART_SetConfig+0x48c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d038      	beq.n	800343c <USART_SetConfig+0x488>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d032      	beq.n	8003438 <USART_SetConfig+0x484>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d02c      	beq.n	8003434 <USART_SetConfig+0x480>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	2b05      	cmp	r3, #5
 80033e0:	d026      	beq.n	8003430 <USART_SetConfig+0x47c>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d020      	beq.n	800342c <USART_SetConfig+0x478>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ee:	2b07      	cmp	r3, #7
 80033f0:	d01a      	beq.n	8003428 <USART_SetConfig+0x474>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d014      	beq.n	8003424 <USART_SetConfig+0x470>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	2b09      	cmp	r3, #9
 8003400:	d00e      	beq.n	8003420 <USART_SetConfig+0x46c>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003406:	2b0a      	cmp	r3, #10
 8003408:	d008      	beq.n	800341c <USART_SetConfig+0x468>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	2b0b      	cmp	r3, #11
 8003410:	d102      	bne.n	8003418 <USART_SetConfig+0x464>
 8003412:	2380      	movs	r3, #128	@ 0x80
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	e016      	b.n	8003446 <USART_SetConfig+0x492>
 8003418:	2301      	movs	r3, #1
 800341a:	e014      	b.n	8003446 <USART_SetConfig+0x492>
 800341c:	2380      	movs	r3, #128	@ 0x80
 800341e:	e012      	b.n	8003446 <USART_SetConfig+0x492>
 8003420:	2340      	movs	r3, #64	@ 0x40
 8003422:	e010      	b.n	8003446 <USART_SetConfig+0x492>
 8003424:	2320      	movs	r3, #32
 8003426:	e00e      	b.n	8003446 <USART_SetConfig+0x492>
 8003428:	2310      	movs	r3, #16
 800342a:	e00c      	b.n	8003446 <USART_SetConfig+0x492>
 800342c:	230c      	movs	r3, #12
 800342e:	e00a      	b.n	8003446 <USART_SetConfig+0x492>
 8003430:	230a      	movs	r3, #10
 8003432:	e008      	b.n	8003446 <USART_SetConfig+0x492>
 8003434:	2308      	movs	r3, #8
 8003436:	e006      	b.n	8003446 <USART_SetConfig+0x492>
 8003438:	2306      	movs	r3, #6
 800343a:	e004      	b.n	8003446 <USART_SetConfig+0x492>
 800343c:	2304      	movs	r3, #4
 800343e:	e002      	b.n	8003446 <USART_SetConfig+0x492>
 8003440:	2302      	movs	r3, #2
 8003442:	e000      	b.n	8003446 <USART_SetConfig+0x492>
 8003444:	2301      	movs	r3, #1
 8003446:	0019      	movs	r1, r3
 8003448:	2380      	movs	r3, #128	@ 0x80
 800344a:	0218      	lsls	r0, r3, #8
 800344c:	f7fc fe5a 	bl	8000104 <__udivsi3>
 8003450:	0003      	movs	r3, r0
 8003452:	005a      	lsls	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	18d2      	adds	r2, r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	0019      	movs	r1, r3
 8003462:	0010      	movs	r0, r2
 8003464:	f7fc fe4e 	bl	8000104 <__udivsi3>
 8003468:	0003      	movs	r3, r0
 800346a:	61bb      	str	r3, [r7, #24]
      break;
 800346c:	e004      	b.n	8003478 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800346e:	231e      	movs	r3, #30
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	2201      	movs	r2, #1
 8003474:	701a      	strb	r2, [r3, #0]
      break;
 8003476:	46c0      	nop			@ (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b0f      	cmp	r3, #15
 800347c:	d91c      	bls.n	80034b8 <USART_SetConfig+0x504>
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	2380      	movs	r3, #128	@ 0x80
 8003482:	025b      	lsls	r3, r3, #9
 8003484:	429a      	cmp	r2, r3
 8003486:	d217      	bcs.n	80034b8 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	b29a      	uxth	r2, r3
 800348c:	200e      	movs	r0, #14
 800348e:	183b      	adds	r3, r7, r0
 8003490:	210f      	movs	r1, #15
 8003492:	438a      	bics	r2, r1
 8003494:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	b29b      	uxth	r3, r3
 800349c:	2207      	movs	r2, #7
 800349e:	4013      	ands	r3, r2
 80034a0:	b299      	uxth	r1, r3
 80034a2:	183b      	adds	r3, r7, r0
 80034a4:	183a      	adds	r2, r7, r0
 80034a6:	8812      	ldrh	r2, [r2, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	183a      	adds	r2, r7, r0
 80034b2:	8812      	ldrh	r2, [r2, #0]
 80034b4:	60da      	str	r2, [r3, #12]
 80034b6:	e003      	b.n	80034c0 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 80034b8:	231e      	movs	r3, #30
 80034ba:	18fb      	adds	r3, r7, r3
 80034bc:	2201      	movs	r2, #1
 80034be:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 80034d8:	231e      	movs	r3, #30
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	781b      	ldrb	r3, [r3, #0]
}
 80034de:	0018      	movs	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b008      	add	sp, #32
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	00f42400 	.word	0x00f42400

080034ec <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034fa:	f7fd fc57 	bl	8000dac <HAL_GetTick>
 80034fe:	0003      	movs	r3, r0
 8003500:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2208      	movs	r2, #8
 800350a:	4013      	ands	r3, r2
 800350c:	2b08      	cmp	r3, #8
 800350e:	d10e      	bne.n	800352e <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	2380      	movs	r3, #128	@ 0x80
 8003514:	0399      	lsls	r1, r3, #14
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	23fa      	movs	r3, #250	@ 0xfa
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	0013      	movs	r3, r2
 8003520:	2200      	movs	r2, #0
 8003522:	f7ff fd11 	bl	8002f48 <USART_WaitOnFlagUntilTimeout>
 8003526:	1e03      	subs	r3, r0, #0
 8003528:	d001      	beq.n	800352e <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e01e      	b.n	800356c <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2204      	movs	r2, #4
 8003536:	4013      	ands	r3, r2
 8003538:	2b04      	cmp	r3, #4
 800353a:	d10e      	bne.n	800355a <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	2380      	movs	r3, #128	@ 0x80
 8003540:	03d9      	lsls	r1, r3, #15
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	23fa      	movs	r3, #250	@ 0xfa
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	0013      	movs	r3, r2
 800354c:	2200      	movs	r2, #0
 800354e:	f7ff fcfb 	bl	8002f48 <USART_WaitOnFlagUntilTimeout>
 8003552:	1e03      	subs	r3, r0, #0
 8003554:	d001      	beq.n	800355a <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e008      	b.n	800356c <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2259      	movs	r2, #89	@ 0x59
 800355e:	2101      	movs	r1, #1
 8003560:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2258      	movs	r2, #88	@ 0x58
 8003566:	2100      	movs	r1, #0
 8003568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	0018      	movs	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	b004      	add	sp, #16
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2258      	movs	r2, #88	@ 0x58
 8003580:	5c9b      	ldrb	r3, [r3, r2]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_USARTEx_DisableFifoMode+0x16>
 8003586:	2302      	movs	r3, #2
 8003588:	e027      	b.n	80035da <HAL_USARTEx_DisableFifoMode+0x66>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2258      	movs	r2, #88	@ 0x58
 800358e:	2101      	movs	r1, #1
 8003590:	5499      	strb	r1, [r3, r2]

  husart->State = HAL_USART_STATE_BUSY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2259      	movs	r2, #89	@ 0x59
 8003596:	2102      	movs	r1, #2
 8003598:	5499      	strb	r1, [r3, r2]

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2101      	movs	r1, #1
 80035ae:	438a      	bics	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4a0b      	ldr	r2, [pc, #44]	@ (80035e4 <HAL_USARTEx_DisableFifoMode+0x70>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2259      	movs	r2, #89	@ 0x59
 80035cc:	2101      	movs	r1, #1
 80035ce:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2258      	movs	r2, #88	@ 0x58
 80035d4:	2100      	movs	r1, #0
 80035d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	0018      	movs	r0, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	b004      	add	sp, #16
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			@ (mov r8, r8)
 80035e4:	dfffffff 	.word	0xdfffffff

080035e8 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2258      	movs	r2, #88	@ 0x58
 80035f6:	5c9b      	ldrb	r3, [r3, r2]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e02e      	b.n	800365e <HAL_USARTEx_SetTxFifoThreshold+0x76>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2258      	movs	r2, #88	@ 0x58
 8003604:	2101      	movs	r1, #1
 8003606:	5499      	strb	r1, [r3, r2]

  husart->State = HAL_USART_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2259      	movs	r2, #89	@ 0x59
 800360c:	2102      	movs	r1, #2
 800360e:	5499      	strb	r1, [r3, r2]

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2101      	movs	r1, #1
 8003624:	438a      	bics	r2, r1
 8003626:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	08d9      	lsrs	r1, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	0018      	movs	r0, r3
 8003640:	f000 f854 	bl	80036ec <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2259      	movs	r2, #89	@ 0x59
 8003650:	2101      	movs	r1, #1
 8003652:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2258      	movs	r2, #88	@ 0x58
 8003658:	2100      	movs	r1, #0
 800365a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	0018      	movs	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	b004      	add	sp, #16
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2258      	movs	r2, #88	@ 0x58
 8003676:	5c9b      	ldrb	r3, [r3, r2]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 800367c:	2302      	movs	r3, #2
 800367e:	e02f      	b.n	80036e0 <HAL_USARTEx_SetRxFifoThreshold+0x78>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2258      	movs	r2, #88	@ 0x58
 8003684:	2101      	movs	r1, #1
 8003686:	5499      	strb	r1, [r3, r2]

  husart->State = HAL_USART_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2259      	movs	r2, #89	@ 0x59
 800368c:	2102      	movs	r1, #2
 800368e:	5499      	strb	r1, [r3, r2]

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2101      	movs	r1, #1
 80036a4:	438a      	bics	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	4a0e      	ldr	r2, [pc, #56]	@ (80036e8 <HAL_USARTEx_SetRxFifoThreshold+0x80>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	0019      	movs	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	0018      	movs	r0, r3
 80036c2:	f000 f813 	bl	80036ec <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2259      	movs	r2, #89	@ 0x59
 80036d2:	2101      	movs	r1, #1
 80036d4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2258      	movs	r2, #88	@ 0x58
 80036da:	2100      	movs	r1, #0
 80036dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	0018      	movs	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b004      	add	sp, #16
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	f1ffffff 	.word	0xf1ffffff

080036ec <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 80036ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d106      	bne.n	800370a <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003708:	e041      	b.n	800378e <USARTEx_SetNbDataToProcess+0xa2>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800370a:	260f      	movs	r6, #15
 800370c:	19bb      	adds	r3, r7, r6
 800370e:	2208      	movs	r2, #8
 8003710:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003712:	200e      	movs	r0, #14
 8003714:	183b      	adds	r3, r7, r0
 8003716:	2208      	movs	r2, #8
 8003718:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8003720:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8003722:	b2da      	uxtb	r2, r3
 8003724:	240d      	movs	r4, #13
 8003726:	193b      	adds	r3, r7, r4
 8003728:	2107      	movs	r1, #7
 800372a:	400a      	ands	r2, r1
 800372c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8003734:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8003736:	b2da      	uxtb	r2, r3
 8003738:	250c      	movs	r5, #12
 800373a:	197b      	adds	r3, r7, r5
 800373c:	2107      	movs	r1, #7
 800373e:	400a      	ands	r2, r1
 8003740:	701a      	strb	r2, [r3, #0]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003742:	183b      	adds	r3, r7, r0
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	197a      	adds	r2, r7, r5
 8003748:	7812      	ldrb	r2, [r2, #0]
 800374a:	4913      	ldr	r1, [pc, #76]	@ (8003798 <USARTEx_SetNbDataToProcess+0xac>)
 800374c:	5c8a      	ldrb	r2, [r1, r2]
 800374e:	435a      	muls	r2, r3
 8003750:	0010      	movs	r0, r2
                                (uint16_t)denominator[tx_fifo_threshold];
 8003752:	197b      	adds	r3, r7, r5
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	4a11      	ldr	r2, [pc, #68]	@ (800379c <USARTEx_SetNbDataToProcess+0xb0>)
 8003758:	5cd3      	ldrb	r3, [r2, r3]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800375a:	0019      	movs	r1, r3
 800375c:	f7fc fd5c 	bl	8000218 <__divsi3>
 8003760:	0003      	movs	r3, r0
 8003762:	b29a      	uxth	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003768:	19bb      	adds	r3, r7, r6
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	193a      	adds	r2, r7, r4
 800376e:	7812      	ldrb	r2, [r2, #0]
 8003770:	4909      	ldr	r1, [pc, #36]	@ (8003798 <USARTEx_SetNbDataToProcess+0xac>)
 8003772:	5c8a      	ldrb	r2, [r1, r2]
 8003774:	435a      	muls	r2, r3
 8003776:	0010      	movs	r0, r2
                                (uint16_t)denominator[rx_fifo_threshold];
 8003778:	193b      	adds	r3, r7, r4
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	4a07      	ldr	r2, [pc, #28]	@ (800379c <USARTEx_SetNbDataToProcess+0xb0>)
 800377e:	5cd3      	ldrb	r3, [r2, r3]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003780:	0019      	movs	r1, r3
 8003782:	f7fc fd49 	bl	8000218 <__divsi3>
 8003786:	0003      	movs	r3, r0
 8003788:	b29a      	uxth	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 800378e:	46c0      	nop			@ (mov r8, r8)
 8003790:	46bd      	mov	sp, r7
 8003792:	b005      	add	sp, #20
 8003794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	08003898 	.word	0x08003898
 800379c:	080038a0 	.word	0x080038a0

080037a0 <memset>:
 80037a0:	0003      	movs	r3, r0
 80037a2:	1882      	adds	r2, r0, r2
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d100      	bne.n	80037aa <memset+0xa>
 80037a8:	4770      	bx	lr
 80037aa:	7019      	strb	r1, [r3, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	e7f9      	b.n	80037a4 <memset+0x4>

080037b0 <__libc_init_array>:
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	2600      	movs	r6, #0
 80037b4:	4c0c      	ldr	r4, [pc, #48]	@ (80037e8 <__libc_init_array+0x38>)
 80037b6:	4d0d      	ldr	r5, [pc, #52]	@ (80037ec <__libc_init_array+0x3c>)
 80037b8:	1b64      	subs	r4, r4, r5
 80037ba:	10a4      	asrs	r4, r4, #2
 80037bc:	42a6      	cmp	r6, r4
 80037be:	d109      	bne.n	80037d4 <__libc_init_array+0x24>
 80037c0:	2600      	movs	r6, #0
 80037c2:	f000 f819 	bl	80037f8 <_init>
 80037c6:	4c0a      	ldr	r4, [pc, #40]	@ (80037f0 <__libc_init_array+0x40>)
 80037c8:	4d0a      	ldr	r5, [pc, #40]	@ (80037f4 <__libc_init_array+0x44>)
 80037ca:	1b64      	subs	r4, r4, r5
 80037cc:	10a4      	asrs	r4, r4, #2
 80037ce:	42a6      	cmp	r6, r4
 80037d0:	d105      	bne.n	80037de <__libc_init_array+0x2e>
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
 80037d4:	00b3      	lsls	r3, r6, #2
 80037d6:	58eb      	ldr	r3, [r5, r3]
 80037d8:	4798      	blx	r3
 80037da:	3601      	adds	r6, #1
 80037dc:	e7ee      	b.n	80037bc <__libc_init_array+0xc>
 80037de:	00b3      	lsls	r3, r6, #2
 80037e0:	58eb      	ldr	r3, [r5, r3]
 80037e2:	4798      	blx	r3
 80037e4:	3601      	adds	r6, #1
 80037e6:	e7f2      	b.n	80037ce <__libc_init_array+0x1e>
 80037e8:	080038b0 	.word	0x080038b0
 80037ec:	080038b0 	.word	0x080038b0
 80037f0:	080038b4 	.word	0x080038b4
 80037f4:	080038b0 	.word	0x080038b0

080037f8 <_init>:
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	46c0      	nop			@ (mov r8, r8)
 80037fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fe:	bc08      	pop	{r3}
 8003800:	469e      	mov	lr, r3
 8003802:	4770      	bx	lr

08003804 <_fini>:
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380a:	bc08      	pop	{r3}
 800380c:	469e      	mov	lr, r3
 800380e:	4770      	bx	lr
