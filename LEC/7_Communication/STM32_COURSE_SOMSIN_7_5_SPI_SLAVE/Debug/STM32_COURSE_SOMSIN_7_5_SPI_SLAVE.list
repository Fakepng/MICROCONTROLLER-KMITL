
STM32_COURSE_SOMSIN_7_5_SPI_SLAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046cc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004788  08004788  00005788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004810  08004810  00006018  2**0
                  CONTENTS
  4 .ARM          00000008  08004810  08004810  00005810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004818  08004818  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004818  08004818  00005818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800481c  0800481c  0000581c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08004820  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000018  08004838  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08004838  00006130  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da37  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002048  00000000  00000000  00013a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  00015ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000859  00000000  00000000  00016580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017575  00000000  00000000  00016dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de82  00000000  00000000  0002e34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009512d  00000000  00000000  0003c1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d12fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025e0  00000000  00000000  000d1340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000d3920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000018 	.word	0x20000018
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004770 	.word	0x08004770

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000001c 	.word	0x2000001c
 8000100:	08004770 	.word	0x08004770

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fa9c 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f812 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f8e0 	bl	80007ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f890 	bl	8000750 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000630:	f000 f854 	bl	80006dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Receive_IT(&hspi1, data, 1);
 8000634:	4903      	ldr	r1, [pc, #12]	@ (8000644 <main+0x28>)
 8000636:	4b04      	ldr	r3, [pc, #16]	@ (8000648 <main+0x2c>)
 8000638:	2201      	movs	r2, #1
 800063a:	0018      	movs	r0, r3
 800063c:	f001 fdd6 	bl	80021ec <HAL_SPI_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	46c0      	nop			@ (mov r8, r8)
 8000642:	e7fd      	b.n	8000640 <main+0x24>
 8000644:	20000000 	.word	0x20000000
 8000648:	20000034 	.word	0x20000034

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b093      	sub	sp, #76	@ 0x4c
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	2410      	movs	r4, #16
 8000654:	193b      	adds	r3, r7, r4
 8000656:	0018      	movs	r0, r3
 8000658:	2338      	movs	r3, #56	@ 0x38
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f004 f85b 	bl	8004718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000662:	003b      	movs	r3, r7
 8000664:	0018      	movs	r0, r3
 8000666:	2310      	movs	r3, #16
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f004 f854 	bl	8004718 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2380      	movs	r3, #128	@ 0x80
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fe39 	bl	80012ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067a:	193b      	adds	r3, r7, r4
 800067c:	2202      	movs	r2, #2
 800067e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	193b      	adds	r3, r7, r4
 8000682:	2280      	movs	r2, #128	@ 0x80
 8000684:	0052      	lsls	r2, r2, #1
 8000686:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000688:	193b      	adds	r3, r7, r4
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2240      	movs	r2, #64	@ 0x40
 8000692:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	193b      	adds	r3, r7, r4
 800069c:	0018      	movs	r0, r3
 800069e:	f000 fe71 	bl	8001384 <HAL_RCC_OscConfig>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006a6:	f000 f90f 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	003b      	movs	r3, r7
 80006ac:	2207      	movs	r2, #7
 80006ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b0:	003b      	movs	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	003b      	movs	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006bc:	003b      	movs	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c2:	003b      	movs	r3, r7
 80006c4:	2100      	movs	r1, #0
 80006c6:	0018      	movs	r0, r3
 80006c8:	f001 f976 	bl	80019b8 <HAL_RCC_ClockConfig>
 80006cc:	1e03      	subs	r3, r0, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006d0:	f000 f8fa 	bl	80008c8 <Error_Handler>
  }
}
 80006d4:	46c0      	nop			@ (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b013      	add	sp, #76	@ 0x4c
 80006da:	bd90      	pop	{r4, r7, pc}

080006dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006e0:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <MX_SPI1_Init+0x6c>)
 80006e2:	4a1a      	ldr	r2, [pc, #104]	@ (800074c <MX_SPI1_Init+0x70>)
 80006e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <MX_SPI1_Init+0x6c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ec:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <MX_SPI1_Init+0x6c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <MX_SPI1_Init+0x6c>)
 80006f4:	22e0      	movs	r2, #224	@ 0xe0
 80006f6:	00d2      	lsls	r2, r2, #3
 80006f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006fa:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <MX_SPI1_Init+0x6c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000700:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_SPI1_Init+0x6c>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <MX_SPI1_Init+0x6c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800070c:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_SPI1_Init+0x6c>)
 800070e:	2280      	movs	r2, #128	@ 0x80
 8000710:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <MX_SPI1_Init+0x6c>)
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000718:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <MX_SPI1_Init+0x6c>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800071e:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <MX_SPI1_Init+0x6c>)
 8000720:	2207      	movs	r2, #7
 8000722:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000724:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <MX_SPI1_Init+0x6c>)
 8000726:	2200      	movs	r2, #0
 8000728:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800072a:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <MX_SPI1_Init+0x6c>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000730:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <MX_SPI1_Init+0x6c>)
 8000732:	0018      	movs	r0, r3
 8000734:	f001 fca2 	bl	800207c <HAL_SPI_Init>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 800073c:	f000 f8c4 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			@ (mov r8, r8)
 8000748:	20000034 	.word	0x20000034
 800074c:	40013000 	.word	0x40013000

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b23      	ldr	r3, [pc, #140]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 8000756:	4a24      	ldr	r2, [pc, #144]	@ (80007e8 <MX_USART2_UART_Init+0x98>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075a:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 800075c:	22e1      	movs	r2, #225	@ 0xe1
 800075e:	0252      	lsls	r2, r2, #9
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b20      	ldr	r3, [pc, #128]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b1e      	ldr	r3, [pc, #120]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b1d      	ldr	r3, [pc, #116]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800078c:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000792:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 8000794:	2200      	movs	r2, #0
 8000796:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 800079a:	0018      	movs	r0, r3
 800079c:	f002 fb6c 	bl	8002e78 <HAL_UART_Init>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007a4:	f000 f890 	bl	80008c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a8:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 80007aa:	2100      	movs	r1, #0
 80007ac:	0018      	movs	r0, r3
 80007ae:	f003 fed3 	bl	8004558 <HAL_UARTEx_SetTxFifoThreshold>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007b6:	f000 f887 	bl	80008c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 80007bc:	2100      	movs	r1, #0
 80007be:	0018      	movs	r0, r3
 80007c0:	f003 ff0a 	bl	80045d8 <HAL_UARTEx_SetRxFifoThreshold>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007c8:	f000 f87e 	bl	80008c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f003 fe88 	bl	80044e4 <HAL_UARTEx_DisableFifoMode>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007d8:	f000 f876 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007dc:	46c0      	nop			@ (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	20000098 	.word	0x20000098
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b089      	sub	sp, #36	@ 0x24
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	240c      	movs	r4, #12
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	0018      	movs	r0, r3
 80007f8:	2314      	movs	r3, #20
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f003 ff8b 	bl	8004718 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <MX_GPIO_Init+0x9c>)
 8000804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000806:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <MX_GPIO_Init+0x9c>)
 8000808:	2104      	movs	r1, #4
 800080a:	430a      	orrs	r2, r1
 800080c:	635a      	str	r2, [r3, #52]	@ 0x34
 800080e:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_GPIO_Init+0x9c>)
 8000810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000812:	2204      	movs	r2, #4
 8000814:	4013      	ands	r3, r2
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800081a:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_GPIO_Init+0x9c>)
 800081c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800081e:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_GPIO_Init+0x9c>)
 8000820:	2120      	movs	r1, #32
 8000822:	430a      	orrs	r2, r1
 8000824:	635a      	str	r2, [r3, #52]	@ 0x34
 8000826:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <MX_GPIO_Init+0x9c>)
 8000828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800082a:	2220      	movs	r2, #32
 800082c:	4013      	ands	r3, r2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <MX_GPIO_Init+0x9c>)
 8000834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_GPIO_Init+0x9c>)
 8000838:	2101      	movs	r1, #1
 800083a:	430a      	orrs	r2, r1
 800083c:	635a      	str	r2, [r3, #52]	@ 0x34
 800083e:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_GPIO_Init+0x9c>)
 8000840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000842:	2201      	movs	r2, #1
 8000844:	4013      	ands	r3, r2
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800084a:	23a0      	movs	r3, #160	@ 0xa0
 800084c:	05db      	lsls	r3, r3, #23
 800084e:	2200      	movs	r2, #0
 8000850:	2120      	movs	r1, #32
 8000852:	0018      	movs	r0, r3
 8000854:	f000 fd2c 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000858:	0021      	movs	r1, r4
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2220      	movs	r2, #32
 800085e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2201      	movs	r2, #1
 8000864:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2202      	movs	r2, #2
 8000870:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000872:	187a      	adds	r2, r7, r1
 8000874:	23a0      	movs	r3, #160	@ 0xa0
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	0011      	movs	r1, r2
 800087a:	0018      	movs	r0, r3
 800087c:	f000 fbb4 	bl	8000fe8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	b009      	add	sp, #36	@ 0x24
 8000886:	bd90      	pop	{r4, r7, pc}
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	if(hspi == &hspi1){
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <HAL_SPI_RxCpltCallback+0x30>)
 8000898:	429a      	cmp	r2, r3
 800089a:	d10b      	bne.n	80008b4 <HAL_SPI_RxCpltCallback+0x28>
		HAL_UART_Transmit_IT(&huart2, data, 3);
 800089c:	4908      	ldr	r1, [pc, #32]	@ (80008c0 <HAL_SPI_RxCpltCallback+0x34>)
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <HAL_SPI_RxCpltCallback+0x38>)
 80008a0:	2203      	movs	r2, #3
 80008a2:	0018      	movs	r0, r3
 80008a4:	f002 fb3e 	bl	8002f24 <HAL_UART_Transmit_IT>
		HAL_SPI_Receive_IT(&hspi1, data, 1);
 80008a8:	4905      	ldr	r1, [pc, #20]	@ (80008c0 <HAL_SPI_RxCpltCallback+0x34>)
 80008aa:	4b04      	ldr	r3, [pc, #16]	@ (80008bc <HAL_SPI_RxCpltCallback+0x30>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	0018      	movs	r0, r3
 80008b0:	f001 fc9c 	bl	80021ec <HAL_SPI_Receive_IT>
	}
}
 80008b4:	46c0      	nop			@ (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b002      	add	sp, #8
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000034 	.word	0x20000034
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000098 	.word	0x20000098

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	46c0      	nop			@ (mov r8, r8)
 80008d2:	e7fd      	b.n	80008d0 <Error_Handler+0x8>

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <HAL_MspInit+0x4c>)
 80008dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008de:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <HAL_MspInit+0x4c>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	430a      	orrs	r2, r1
 80008e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <HAL_MspInit+0x4c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ea:	2201      	movs	r2, #1
 80008ec:	4013      	ands	r3, r2
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <HAL_MspInit+0x4c>)
 80008f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <HAL_MspInit+0x4c>)
 80008f8:	2180      	movs	r1, #128	@ 0x80
 80008fa:	0549      	lsls	r1, r1, #21
 80008fc:	430a      	orrs	r2, r1
 80008fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <HAL_MspInit+0x4c>)
 8000902:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000904:	2380      	movs	r3, #128	@ 0x80
 8000906:	055b      	lsls	r3, r3, #21
 8000908:	4013      	ands	r3, r2
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800090e:	23c0      	movs	r3, #192	@ 0xc0
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	0018      	movs	r0, r3
 8000914:	f000 f9a8 	bl	8000c68 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000918:	46c0      	nop			@ (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	b002      	add	sp, #8
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b08b      	sub	sp, #44	@ 0x2c
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	2414      	movs	r4, #20
 800092e:	193b      	adds	r3, r7, r4
 8000930:	0018      	movs	r0, r3
 8000932:	2314      	movs	r3, #20
 8000934:	001a      	movs	r2, r3
 8000936:	2100      	movs	r1, #0
 8000938:	f003 feee 	bl	8004718 <memset>
  if(hspi->Instance==SPI1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a1f      	ldr	r2, [pc, #124]	@ (80009c0 <HAL_SPI_MspInit+0x9c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d138      	bne.n	80009b8 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000946:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <HAL_SPI_MspInit+0xa0>)
 8000948:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800094a:	4b1e      	ldr	r3, [pc, #120]	@ (80009c4 <HAL_SPI_MspInit+0xa0>)
 800094c:	2180      	movs	r1, #128	@ 0x80
 800094e:	0149      	lsls	r1, r1, #5
 8000950:	430a      	orrs	r2, r1
 8000952:	641a      	str	r2, [r3, #64]	@ 0x40
 8000954:	4b1b      	ldr	r3, [pc, #108]	@ (80009c4 <HAL_SPI_MspInit+0xa0>)
 8000956:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000958:	2380      	movs	r3, #128	@ 0x80
 800095a:	015b      	lsls	r3, r3, #5
 800095c:	4013      	ands	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <HAL_SPI_MspInit+0xa0>)
 8000964:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000966:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <HAL_SPI_MspInit+0xa0>)
 8000968:	2101      	movs	r1, #1
 800096a:	430a      	orrs	r2, r1
 800096c:	635a      	str	r2, [r3, #52]	@ 0x34
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <HAL_SPI_MspInit+0xa0>)
 8000970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000972:	2201      	movs	r2, #1
 8000974:	4013      	ands	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800097a:	0021      	movs	r1, r4
 800097c:	187b      	adds	r3, r7, r1
 800097e:	22d2      	movs	r2, #210	@ 0xd2
 8000980:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2202      	movs	r2, #2
 8000986:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	187a      	adds	r2, r7, r1
 800099c:	23a0      	movs	r3, #160	@ 0xa0
 800099e:	05db      	lsls	r3, r3, #23
 80009a0:	0011      	movs	r1, r2
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 fb20 	bl	8000fe8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	2019      	movs	r0, #25
 80009ae:	f000 fa1d 	bl	8000dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80009b2:	2019      	movs	r0, #25
 80009b4:	f000 fa2f 	bl	8000e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b00b      	add	sp, #44	@ 0x2c
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	40013000 	.word	0x40013000
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b097      	sub	sp, #92	@ 0x5c
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	2344      	movs	r3, #68	@ 0x44
 80009d2:	18fb      	adds	r3, r7, r3
 80009d4:	0018      	movs	r0, r3
 80009d6:	2314      	movs	r3, #20
 80009d8:	001a      	movs	r2, r3
 80009da:	2100      	movs	r1, #0
 80009dc:	f003 fe9c 	bl	8004718 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e0:	2410      	movs	r4, #16
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	0018      	movs	r0, r3
 80009e6:	2334      	movs	r3, #52	@ 0x34
 80009e8:	001a      	movs	r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	f003 fe94 	bl	8004718 <memset>
  if(huart->Instance==USART2)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a26      	ldr	r2, [pc, #152]	@ (8000a90 <HAL_UART_MspInit+0xc8>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d146      	bne.n	8000a88 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	2202      	movs	r2, #2
 80009fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a06:	193b      	adds	r3, r7, r4
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f001 f97f 	bl	8001d0c <HAL_RCCEx_PeriphCLKConfig>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a12:	f7ff ff59 	bl	80008c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a16:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <HAL_UART_MspInit+0xcc>)
 8000a18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a94 <HAL_UART_MspInit+0xcc>)
 8000a1c:	2180      	movs	r1, #128	@ 0x80
 8000a1e:	0289      	lsls	r1, r1, #10
 8000a20:	430a      	orrs	r2, r1
 8000a22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a24:	4b1b      	ldr	r3, [pc, #108]	@ (8000a94 <HAL_UART_MspInit+0xcc>)
 8000a26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a28:	2380      	movs	r3, #128	@ 0x80
 8000a2a:	029b      	lsls	r3, r3, #10
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <HAL_UART_MspInit+0xcc>)
 8000a34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a36:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <HAL_UART_MspInit+0xcc>)
 8000a38:	2101      	movs	r1, #1
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a3e:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <HAL_UART_MspInit+0xcc>)
 8000a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a42:	2201      	movs	r2, #1
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000a4a:	2144      	movs	r1, #68	@ 0x44
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	220c      	movs	r2, #12
 8000a50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2202      	movs	r2, #2
 8000a56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2201      	movs	r2, #1
 8000a68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	187a      	adds	r2, r7, r1
 8000a6c:	23a0      	movs	r3, #160	@ 0xa0
 8000a6e:	05db      	lsls	r3, r3, #23
 8000a70:	0011      	movs	r1, r2
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 fab8 	bl	8000fe8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	201c      	movs	r0, #28
 8000a7e:	f000 f9b5 	bl	8000dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a82:	201c      	movs	r0, #28
 8000a84:	f000 f9c7 	bl	8000e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a88:	46c0      	nop			@ (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b017      	add	sp, #92	@ 0x5c
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40021000 	.word	0x40021000

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a9c:	46c0      	nop			@ (mov r8, r8)
 8000a9e:	e7fd      	b.n	8000a9c <NMI_Handler+0x4>

08000aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	e7fd      	b.n	8000aa4 <HardFault_Handler+0x4>

08000aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000aac:	46c0      	nop			@ (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 f8b6 	bl	8000c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	46c0      	nop			@ (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ad0:	4b03      	ldr	r3, [pc, #12]	@ (8000ae0 <SPI1_IRQHandler+0x14>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f001 fd14 	bl	8002500 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000ad8:	46c0      	nop			@ (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	20000034 	.word	0x20000034

08000ae4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ae8:	4b03      	ldr	r3, [pc, #12]	@ (8000af8 <USART2_IRQHandler+0x14>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f002 fac2 	bl	8003074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000af0:	46c0      	nop			@ (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	20000098 	.word	0x20000098

08000afc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b08:	480d      	ldr	r0, [pc, #52]	@ (8000b40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b0c:	f7ff fff6 	bl	8000afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480c      	ldr	r0, [pc, #48]	@ (8000b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b12:	490d      	ldr	r1, [pc, #52]	@ (8000b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b14:	4a0d      	ldr	r2, [pc, #52]	@ (8000b4c <LoopForever+0xe>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b28:	4c0a      	ldr	r4, [pc, #40]	@ (8000b54 <LoopForever+0x16>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b36:	f003 fdf7 	bl	8004728 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b3a:	f7ff fd6f 	bl	800061c <main>

08000b3e <LoopForever>:

LoopForever:
  b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   r0, =_estack
 8000b40:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000b4c:	08004820 	.word	0x08004820
  ldr r2, =_sbss
 8000b50:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000b54:	20000130 	.word	0x20000130

08000b58 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_COMP_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <HAL_Init+0x3c>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <HAL_Init+0x3c>)
 8000b6e:	2180      	movs	r1, #128	@ 0x80
 8000b70:	0049      	lsls	r1, r1, #1
 8000b72:	430a      	orrs	r2, r1
 8000b74:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 f810 	bl	8000b9c <HAL_InitTick>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d003      	beq.n	8000b88 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b80:	1dfb      	adds	r3, r7, #7
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e001      	b.n	8000b8c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b88:	f7ff fea4 	bl	80008d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	781b      	ldrb	r3, [r3, #0]
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b002      	add	sp, #8
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40022000 	.word	0x40022000

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bac:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <HAL_InitTick+0x88>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d02b      	beq.n	8000c0c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <HAL_InitTick+0x8c>)
 8000bb6:	681c      	ldr	r4, [r3, #0]
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <HAL_InitTick+0x88>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	23fa      	movs	r3, #250	@ 0xfa
 8000bc0:	0098      	lsls	r0, r3, #2
 8000bc2:	f7ff fa9f 	bl	8000104 <__udivsi3>
 8000bc6:	0003      	movs	r3, r0
 8000bc8:	0019      	movs	r1, r3
 8000bca:	0020      	movs	r0, r4
 8000bcc:	f7ff fa9a 	bl	8000104 <__udivsi3>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 f92f 	bl	8000e36 <HAL_SYSTICK_Config>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d112      	bne.n	8000c02 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d80a      	bhi.n	8000bf8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	2301      	movs	r3, #1
 8000be6:	425b      	negs	r3, r3
 8000be8:	2200      	movs	r2, #0
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 f8fe 	bl	8000dec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <HAL_InitTick+0x90>)
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	e00d      	b.n	8000c14 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	e008      	b.n	8000c14 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c02:	230f      	movs	r3, #15
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	e003      	b.n	8000c14 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c14:	230f      	movs	r3, #15
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	781b      	ldrb	r3, [r3, #0]
}
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b005      	add	sp, #20
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	20000014 	.word	0x20000014
 8000c28:	2000000c 	.word	0x2000000c
 8000c2c:	20000010 	.word	0x20000010

08000c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <HAL_IncTick+0x1c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	001a      	movs	r2, r3
 8000c3a:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <HAL_IncTick+0x20>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	18d2      	adds	r2, r2, r3
 8000c40:	4b03      	ldr	r3, [pc, #12]	@ (8000c50 <HAL_IncTick+0x20>)
 8000c42:	601a      	str	r2, [r3, #0]
}
 8000c44:	46c0      	nop			@ (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	20000014 	.word	0x20000014
 8000c50:	2000012c 	.word	0x2000012c

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b02      	ldr	r3, [pc, #8]	@ (8000c64 <HAL_GetTick+0x10>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	2000012c 	.word	0x2000012c

08000c68 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a06      	ldr	r2, [pc, #24]	@ (8000c90 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000c76:	4013      	ands	r3, r2
 8000c78:	0019      	movs	r1, r3
 8000c7a:	4b04      	ldr	r3, [pc, #16]	@ (8000c8c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	601a      	str	r2, [r3, #0]
}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b002      	add	sp, #8
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	40010000 	.word	0x40010000
 8000c90:	fffff9ff 	.word	0xfffff9ff

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ca6:	d809      	bhi.n	8000cbc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca8:	1dfb      	adds	r3, r7, #7
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	001a      	movs	r2, r3
 8000cae:	231f      	movs	r3, #31
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <__NVIC_EnableIRQ+0x30>)
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	000a      	movs	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000cbc:	46c0      	nop			@ (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	0002      	movs	r2, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cdc:	d828      	bhi.n	8000d30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cde:	4a2f      	ldr	r2, [pc, #188]	@ (8000d9c <__NVIC_SetPriority+0xd4>)
 8000ce0:	1dfb      	adds	r3, r7, #7
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	33c0      	adds	r3, #192	@ 0xc0
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	589b      	ldr	r3, [r3, r2]
 8000cee:	1dfa      	adds	r2, r7, #7
 8000cf0:	7812      	ldrb	r2, [r2, #0]
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	00d2      	lsls	r2, r2, #3
 8000cfa:	21ff      	movs	r1, #255	@ 0xff
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	000a      	movs	r2, r1
 8000d00:	43d2      	mvns	r2, r2
 8000d02:	401a      	ands	r2, r3
 8000d04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	019b      	lsls	r3, r3, #6
 8000d0a:	22ff      	movs	r2, #255	@ 0xff
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	0018      	movs	r0, r3
 8000d14:	2303      	movs	r3, #3
 8000d16:	4003      	ands	r3, r0
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d1c:	481f      	ldr	r0, [pc, #124]	@ (8000d9c <__NVIC_SetPriority+0xd4>)
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	089b      	lsrs	r3, r3, #2
 8000d26:	430a      	orrs	r2, r1
 8000d28:	33c0      	adds	r3, #192	@ 0xc0
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d2e:	e031      	b.n	8000d94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d30:	4a1b      	ldr	r2, [pc, #108]	@ (8000da0 <__NVIC_SetPriority+0xd8>)
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	0019      	movs	r1, r3
 8000d38:	230f      	movs	r3, #15
 8000d3a:	400b      	ands	r3, r1
 8000d3c:	3b08      	subs	r3, #8
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	3306      	adds	r3, #6
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	18d3      	adds	r3, r2, r3
 8000d46:	3304      	adds	r3, #4
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	1dfa      	adds	r2, r7, #7
 8000d4c:	7812      	ldrb	r2, [r2, #0]
 8000d4e:	0011      	movs	r1, r2
 8000d50:	2203      	movs	r2, #3
 8000d52:	400a      	ands	r2, r1
 8000d54:	00d2      	lsls	r2, r2, #3
 8000d56:	21ff      	movs	r1, #255	@ 0xff
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	000a      	movs	r2, r1
 8000d5c:	43d2      	mvns	r2, r2
 8000d5e:	401a      	ands	r2, r3
 8000d60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	019b      	lsls	r3, r3, #6
 8000d66:	22ff      	movs	r2, #255	@ 0xff
 8000d68:	401a      	ands	r2, r3
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	0018      	movs	r0, r3
 8000d70:	2303      	movs	r3, #3
 8000d72:	4003      	ands	r3, r0
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d78:	4809      	ldr	r0, [pc, #36]	@ (8000da0 <__NVIC_SetPriority+0xd8>)
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	001c      	movs	r4, r3
 8000d80:	230f      	movs	r3, #15
 8000d82:	4023      	ands	r3, r4
 8000d84:	3b08      	subs	r3, #8
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	3306      	adds	r3, #6
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	18c3      	adds	r3, r0, r3
 8000d90:	3304      	adds	r3, #4
 8000d92:	601a      	str	r2, [r3, #0]
}
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b003      	add	sp, #12
 8000d9a:	bd90      	pop	{r4, r7, pc}
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	1e5a      	subs	r2, r3, #1
 8000db0:	2380      	movs	r3, #128	@ 0x80
 8000db2:	045b      	lsls	r3, r3, #17
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d301      	bcc.n	8000dbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db8:	2301      	movs	r3, #1
 8000dba:	e010      	b.n	8000dde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <SysTick_Config+0x44>)
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	2103      	movs	r1, #3
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff ff7c 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd0:	4b05      	ldr	r3, [pc, #20]	@ (8000de8 <SysTick_Config+0x44>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd6:	4b04      	ldr	r3, [pc, #16]	@ (8000de8 <SysTick_Config+0x44>)
 8000dd8:	2207      	movs	r2, #7
 8000dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	0018      	movs	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b002      	add	sp, #8
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	e000e010 	.word	0xe000e010

08000dec <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	210f      	movs	r1, #15
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	1c02      	adds	r2, r0, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	0011      	movs	r1, r2
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b004      	add	sp, #16
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	0002      	movs	r2, r0
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f7ff ff33 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b002      	add	sp, #8
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff ffaf 	bl	8000da4 <SysTick_Config>
 8000e46:	0003      	movs	r3, r0
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e050      	b.n	8000f04 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2225      	movs	r2, #37	@ 0x25
 8000e66:	5c9b      	ldrb	r3, [r3, r2]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d008      	beq.n	8000e80 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2204      	movs	r2, #4
 8000e72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2224      	movs	r2, #36	@ 0x24
 8000e78:	2100      	movs	r1, #0
 8000e7a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e041      	b.n	8000f04 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	210e      	movs	r1, #14
 8000e8c:	438a      	bics	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	491c      	ldr	r1, [pc, #112]	@ (8000f0c <HAL_DMA_Abort+0xbc>)
 8000e9c:	400a      	ands	r2, r1
 8000e9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2101      	movs	r1, #1
 8000eac:	438a      	bics	r2, r1
 8000eae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000eb0:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <HAL_DMA_Abort+0xc0>)
 8000eb2:	6859      	ldr	r1, [r3, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb8:	221c      	movs	r2, #28
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <HAL_DMA_Abort+0xc0>)
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000ece:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00c      	beq.n	8000ef2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ee2:	490a      	ldr	r1, [pc, #40]	@ (8000f0c <HAL_DMA_Abort+0xbc>)
 8000ee4:	400a      	ands	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000ef0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2225      	movs	r2, #37	@ 0x25
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2224      	movs	r2, #36	@ 0x24
 8000efe:	2100      	movs	r1, #0
 8000f00:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b002      	add	sp, #8
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	fffffeff 	.word	0xfffffeff
 8000f10:	40020000 	.word	0x40020000

08000f14 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f1c:	210f      	movs	r1, #15
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2225      	movs	r2, #37	@ 0x25
 8000f28:	5c9b      	ldrb	r3, [r3, r2]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d006      	beq.n	8000f3e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2204      	movs	r2, #4
 8000f34:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
 8000f3c:	e049      	b.n	8000fd2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	210e      	movs	r1, #14
 8000f4a:	438a      	bics	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	438a      	bics	r2, r1
 8000f5c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f68:	491d      	ldr	r1, [pc, #116]	@ (8000fe0 <HAL_DMA_Abort_IT+0xcc>)
 8000f6a:	400a      	ands	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <HAL_DMA_Abort_IT+0xd0>)
 8000f70:	6859      	ldr	r1, [r3, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	221c      	movs	r2, #28
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <HAL_DMA_Abort_IT+0xd0>)
 8000f80:	430a      	orrs	r2, r1
 8000f82:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000f8c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00c      	beq.n	8000fb0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fa0:	490f      	ldr	r1, [pc, #60]	@ (8000fe0 <HAL_DMA_Abort_IT+0xcc>)
 8000fa2:	400a      	ands	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000fae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2225      	movs	r2, #37	@ 0x25
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2224      	movs	r2, #36	@ 0x24
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d004      	beq.n	8000fd2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	0010      	movs	r0, r2
 8000fd0:	4798      	blx	r3
    }
  }
  return status;
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	18fb      	adds	r3, r7, r3
 8000fd6:	781b      	ldrb	r3, [r3, #0]
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b004      	add	sp, #16
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	fffffeff 	.word	0xfffffeff
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff6:	e147      	b.n	8001288 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4091      	lsls	r1, r2
 8001002:	000a      	movs	r2, r1
 8001004:	4013      	ands	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d100      	bne.n	8001010 <HAL_GPIO_Init+0x28>
 800100e:	e138      	b.n	8001282 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2203      	movs	r2, #3
 8001016:	4013      	ands	r3, r2
 8001018:	2b01      	cmp	r3, #1
 800101a:	d005      	beq.n	8001028 <HAL_GPIO_Init+0x40>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2203      	movs	r2, #3
 8001022:	4013      	ands	r3, r2
 8001024:	2b02      	cmp	r3, #2
 8001026:	d130      	bne.n	800108a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	409a      	lsls	r2, r3
 8001036:	0013      	movs	r3, r2
 8001038:	43da      	mvns	r2, r3
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68da      	ldr	r2, [r3, #12]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	409a      	lsls	r2, r3
 800104a:	0013      	movs	r3, r2
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800105e:	2201      	movs	r2, #1
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
 8001064:	0013      	movs	r3, r2
 8001066:	43da      	mvns	r2, r3
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	2201      	movs	r2, #1
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2203      	movs	r2, #3
 8001090:	4013      	ands	r3, r2
 8001092:	2b03      	cmp	r3, #3
 8001094:	d017      	beq.n	80010c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	409a      	lsls	r2, r3
 80010a4:	0013      	movs	r3, r2
 80010a6:	43da      	mvns	r2, r3
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	409a      	lsls	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2203      	movs	r2, #3
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d123      	bne.n	800111a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	08da      	lsrs	r2, r3, #3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3208      	adds	r2, #8
 80010da:	0092      	lsls	r2, r2, #2
 80010dc:	58d3      	ldr	r3, [r2, r3]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	2207      	movs	r2, #7
 80010e4:	4013      	ands	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	409a      	lsls	r2, r3
 80010ec:	0013      	movs	r3, r2
 80010ee:	43da      	mvns	r2, r3
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	691a      	ldr	r2, [r3, #16]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	2107      	movs	r1, #7
 80010fe:	400b      	ands	r3, r1
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	409a      	lsls	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	08da      	lsrs	r2, r3, #3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3208      	adds	r2, #8
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	6939      	ldr	r1, [r7, #16]
 8001118:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	43da      	mvns	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2203      	movs	r2, #3
 8001138:	401a      	ands	r2, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	23c0      	movs	r3, #192	@ 0xc0
 8001154:	029b      	lsls	r3, r3, #10
 8001156:	4013      	ands	r3, r2
 8001158:	d100      	bne.n	800115c <HAL_GPIO_Init+0x174>
 800115a:	e092      	b.n	8001282 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800115c:	4a50      	ldr	r2, [pc, #320]	@ (80012a0 <HAL_GPIO_Init+0x2b8>)
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	3318      	adds	r3, #24
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	589b      	ldr	r3, [r3, r2]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	2203      	movs	r2, #3
 800116e:	4013      	ands	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	220f      	movs	r2, #15
 8001174:	409a      	lsls	r2, r3
 8001176:	0013      	movs	r3, r2
 8001178:	43da      	mvns	r2, r3
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	23a0      	movs	r3, #160	@ 0xa0
 8001184:	05db      	lsls	r3, r3, #23
 8001186:	429a      	cmp	r2, r3
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0x1ca>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a45      	ldr	r2, [pc, #276]	@ (80012a4 <HAL_GPIO_Init+0x2bc>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00d      	beq.n	80011ae <HAL_GPIO_Init+0x1c6>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a44      	ldr	r2, [pc, #272]	@ (80012a8 <HAL_GPIO_Init+0x2c0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d007      	beq.n	80011aa <HAL_GPIO_Init+0x1c2>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a43      	ldr	r2, [pc, #268]	@ (80012ac <HAL_GPIO_Init+0x2c4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_GPIO_Init+0x1be>
 80011a2:	2303      	movs	r3, #3
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x1cc>
 80011a6:	2305      	movs	r3, #5
 80011a8:	e004      	b.n	80011b4 <HAL_GPIO_Init+0x1cc>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e002      	b.n	80011b4 <HAL_GPIO_Init+0x1cc>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <HAL_GPIO_Init+0x1cc>
 80011b2:	2300      	movs	r3, #0
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	2103      	movs	r1, #3
 80011b8:	400a      	ands	r2, r1
 80011ba:	00d2      	lsls	r2, r2, #3
 80011bc:	4093      	lsls	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80011c4:	4936      	ldr	r1, [pc, #216]	@ (80012a0 <HAL_GPIO_Init+0x2b8>)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3318      	adds	r3, #24
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011d2:	4b33      	ldr	r3, [pc, #204]	@ (80012a0 <HAL_GPIO_Init+0x2b8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	43da      	mvns	r2, r3
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	2380      	movs	r3, #128	@ 0x80
 80011e8:	035b      	lsls	r3, r3, #13
 80011ea:	4013      	ands	r3, r2
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011f6:	4b2a      	ldr	r3, [pc, #168]	@ (80012a0 <HAL_GPIO_Init+0x2b8>)
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80011fc:	4b28      	ldr	r3, [pc, #160]	@ (80012a0 <HAL_GPIO_Init+0x2b8>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	43da      	mvns	r2, r3
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	2380      	movs	r3, #128	@ 0x80
 8001212:	039b      	lsls	r3, r3, #14
 8001214:	4013      	ands	r3, r2
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001220:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <HAL_GPIO_Init+0x2b8>)
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001226:	4a1e      	ldr	r2, [pc, #120]	@ (80012a0 <HAL_GPIO_Init+0x2b8>)
 8001228:	2384      	movs	r3, #132	@ 0x84
 800122a:	58d3      	ldr	r3, [r2, r3]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	43da      	mvns	r2, r3
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	2380      	movs	r3, #128	@ 0x80
 800123e:	029b      	lsls	r3, r3, #10
 8001240:	4013      	ands	r3, r2
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800124c:	4914      	ldr	r1, [pc, #80]	@ (80012a0 <HAL_GPIO_Init+0x2b8>)
 800124e:	2284      	movs	r2, #132	@ 0x84
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001254:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <HAL_GPIO_Init+0x2b8>)
 8001256:	2380      	movs	r3, #128	@ 0x80
 8001258:	58d3      	ldr	r3, [r2, r3]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43da      	mvns	r2, r3
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	2380      	movs	r3, #128	@ 0x80
 800126c:	025b      	lsls	r3, r3, #9
 800126e:	4013      	ands	r3, r2
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800127a:	4909      	ldr	r1, [pc, #36]	@ (80012a0 <HAL_GPIO_Init+0x2b8>)
 800127c:	2280      	movs	r2, #128	@ 0x80
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3301      	adds	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	40da      	lsrs	r2, r3
 8001290:	1e13      	subs	r3, r2, #0
 8001292:	d000      	beq.n	8001296 <HAL_GPIO_Init+0x2ae>
 8001294:	e6b0      	b.n	8000ff8 <HAL_GPIO_Init+0x10>
  }
}
 8001296:	46c0      	nop			@ (mov r8, r8)
 8001298:	46c0      	nop			@ (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b006      	add	sp, #24
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40021800 	.word	0x40021800
 80012a4:	50000400 	.word	0x50000400
 80012a8:	50000800 	.word	0x50000800
 80012ac:	50000c00 	.word	0x50000c00

080012b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	0008      	movs	r0, r1
 80012ba:	0011      	movs	r1, r2
 80012bc:	1cbb      	adds	r3, r7, #2
 80012be:	1c02      	adds	r2, r0, #0
 80012c0:	801a      	strh	r2, [r3, #0]
 80012c2:	1c7b      	adds	r3, r7, #1
 80012c4:	1c0a      	adds	r2, r1, #0
 80012c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c8:	1c7b      	adds	r3, r7, #1
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d004      	beq.n	80012da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012d0:	1cbb      	adds	r3, r7, #2
 80012d2:	881a      	ldrh	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d8:	e003      	b.n	80012e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012da:	1cbb      	adds	r3, r7, #2
 80012dc:	881a      	ldrh	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b002      	add	sp, #8
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80012f4:	4b19      	ldr	r3, [pc, #100]	@ (800135c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a19      	ldr	r2, [pc, #100]	@ (8001360 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80012fa:	4013      	ands	r3, r2
 80012fc:	0019      	movs	r1, r3
 80012fe:	4b17      	ldr	r3, [pc, #92]	@ (800135c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	430a      	orrs	r2, r1
 8001304:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	2380      	movs	r3, #128	@ 0x80
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	429a      	cmp	r2, r3
 800130e:	d11f      	bne.n	8001350 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001310:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	0013      	movs	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	189b      	adds	r3, r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4912      	ldr	r1, [pc, #72]	@ (8001368 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800131e:	0018      	movs	r0, r3
 8001320:	f7fe fef0 	bl	8000104 <__udivsi3>
 8001324:	0003      	movs	r3, r0
 8001326:	3301      	adds	r3, #1
 8001328:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800132a:	e008      	b.n	800133e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3b01      	subs	r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	e001      	b.n	800133e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e009      	b.n	8001352 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800133e:	4b07      	ldr	r3, [pc, #28]	@ (800135c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001340:	695a      	ldr	r2, [r3, #20]
 8001342:	2380      	movs	r3, #128	@ 0x80
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	401a      	ands	r2, r3
 8001348:	2380      	movs	r3, #128	@ 0x80
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	429a      	cmp	r2, r3
 800134e:	d0ed      	beq.n	800132c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	0018      	movs	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	b004      	add	sp, #16
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	40007000 	.word	0x40007000
 8001360:	fffff9ff 	.word	0xfffff9ff
 8001364:	2000000c 	.word	0x2000000c
 8001368:	000f4240 	.word	0x000f4240

0800136c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001370:	4b03      	ldr	r3, [pc, #12]	@ (8001380 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	23e0      	movs	r3, #224	@ 0xe0
 8001376:	01db      	lsls	r3, r3, #7
 8001378:	4013      	ands	r3, r2
}
 800137a:	0018      	movs	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021000 	.word	0x40021000

08001384 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e2fe      	b.n	8001994 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2201      	movs	r2, #1
 800139c:	4013      	ands	r3, r2
 800139e:	d100      	bne.n	80013a2 <HAL_RCC_OscConfig+0x1e>
 80013a0:	e07c      	b.n	800149c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a2:	4bc3      	ldr	r3, [pc, #780]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2238      	movs	r2, #56	@ 0x38
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ac:	4bc0      	ldr	r3, [pc, #768]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2203      	movs	r2, #3
 80013b2:	4013      	ands	r3, r2
 80013b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	2b10      	cmp	r3, #16
 80013ba:	d102      	bne.n	80013c2 <HAL_RCC_OscConfig+0x3e>
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d002      	beq.n	80013c8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	d10b      	bne.n	80013e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	4bb9      	ldr	r3, [pc, #740]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	2380      	movs	r3, #128	@ 0x80
 80013ce:	029b      	lsls	r3, r3, #10
 80013d0:	4013      	ands	r3, r2
 80013d2:	d062      	beq.n	800149a <HAL_RCC_OscConfig+0x116>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d15e      	bne.n	800149a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e2d9      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	025b      	lsls	r3, r3, #9
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d107      	bne.n	80013fc <HAL_RCC_OscConfig+0x78>
 80013ec:	4bb0      	ldr	r3, [pc, #704]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4baf      	ldr	r3, [pc, #700]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 80013f2:	2180      	movs	r1, #128	@ 0x80
 80013f4:	0249      	lsls	r1, r1, #9
 80013f6:	430a      	orrs	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	e020      	b.n	800143e <HAL_RCC_OscConfig+0xba>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	23a0      	movs	r3, #160	@ 0xa0
 8001402:	02db      	lsls	r3, r3, #11
 8001404:	429a      	cmp	r2, r3
 8001406:	d10e      	bne.n	8001426 <HAL_RCC_OscConfig+0xa2>
 8001408:	4ba9      	ldr	r3, [pc, #676]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4ba8      	ldr	r3, [pc, #672]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 800140e:	2180      	movs	r1, #128	@ 0x80
 8001410:	02c9      	lsls	r1, r1, #11
 8001412:	430a      	orrs	r2, r1
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	4ba6      	ldr	r3, [pc, #664]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	4ba5      	ldr	r3, [pc, #660]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 800141c:	2180      	movs	r1, #128	@ 0x80
 800141e:	0249      	lsls	r1, r1, #9
 8001420:	430a      	orrs	r2, r1
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	e00b      	b.n	800143e <HAL_RCC_OscConfig+0xba>
 8001426:	4ba2      	ldr	r3, [pc, #648]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4ba1      	ldr	r3, [pc, #644]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 800142c:	49a1      	ldr	r1, [pc, #644]	@ (80016b4 <HAL_RCC_OscConfig+0x330>)
 800142e:	400a      	ands	r2, r1
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	4b9f      	ldr	r3, [pc, #636]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4b9e      	ldr	r3, [pc, #632]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 8001438:	499f      	ldr	r1, [pc, #636]	@ (80016b8 <HAL_RCC_OscConfig+0x334>)
 800143a:	400a      	ands	r2, r1
 800143c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d014      	beq.n	8001470 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff fc05 	bl	8000c54 <HAL_GetTick>
 800144a:	0003      	movs	r3, r0
 800144c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff fc00 	bl	8000c54 <HAL_GetTick>
 8001454:	0002      	movs	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	@ 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e298      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001462:	4b93      	ldr	r3, [pc, #588]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	2380      	movs	r3, #128	@ 0x80
 8001468:	029b      	lsls	r3, r3, #10
 800146a:	4013      	ands	r3, r2
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0xcc>
 800146e:	e015      	b.n	800149c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fbf0 	bl	8000c54 <HAL_GetTick>
 8001474:	0003      	movs	r3, r0
 8001476:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147a:	f7ff fbeb 	bl	8000c54 <HAL_GetTick>
 800147e:	0002      	movs	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b64      	cmp	r3, #100	@ 0x64
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e283      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800148c:	4b88      	ldr	r3, [pc, #544]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2380      	movs	r3, #128	@ 0x80
 8001492:	029b      	lsls	r3, r3, #10
 8001494:	4013      	ands	r3, r2
 8001496:	d1f0      	bne.n	800147a <HAL_RCC_OscConfig+0xf6>
 8001498:	e000      	b.n	800149c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2202      	movs	r2, #2
 80014a2:	4013      	ands	r3, r2
 80014a4:	d100      	bne.n	80014a8 <HAL_RCC_OscConfig+0x124>
 80014a6:	e099      	b.n	80015dc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014a8:	4b81      	ldr	r3, [pc, #516]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2238      	movs	r2, #56	@ 0x38
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014b2:	4b7f      	ldr	r3, [pc, #508]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2203      	movs	r2, #3
 80014b8:	4013      	ands	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b10      	cmp	r3, #16
 80014c0:	d102      	bne.n	80014c8 <HAL_RCC_OscConfig+0x144>
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d002      	beq.n	80014ce <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d135      	bne.n	800153a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ce:	4b78      	ldr	r3, [pc, #480]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	2380      	movs	r3, #128	@ 0x80
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4013      	ands	r3, r2
 80014d8:	d005      	beq.n	80014e6 <HAL_RCC_OscConfig+0x162>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e256      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e6:	4b72      	ldr	r3, [pc, #456]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4a74      	ldr	r2, [pc, #464]	@ (80016bc <HAL_RCC_OscConfig+0x338>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	021a      	lsls	r2, r3, #8
 80014f6:	4b6e      	ldr	r3, [pc, #440]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 80014f8:	430a      	orrs	r2, r1
 80014fa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d112      	bne.n	8001528 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001502:	4b6b      	ldr	r3, [pc, #428]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a6e      	ldr	r2, [pc, #440]	@ (80016c0 <HAL_RCC_OscConfig+0x33c>)
 8001508:	4013      	ands	r3, r2
 800150a:	0019      	movs	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	4b67      	ldr	r3, [pc, #412]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 8001512:	430a      	orrs	r2, r1
 8001514:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001516:	4b66      	ldr	r3, [pc, #408]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	0adb      	lsrs	r3, r3, #11
 800151c:	2207      	movs	r2, #7
 800151e:	4013      	ands	r3, r2
 8001520:	4a68      	ldr	r2, [pc, #416]	@ (80016c4 <HAL_RCC_OscConfig+0x340>)
 8001522:	40da      	lsrs	r2, r3
 8001524:	4b68      	ldr	r3, [pc, #416]	@ (80016c8 <HAL_RCC_OscConfig+0x344>)
 8001526:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001528:	4b68      	ldr	r3, [pc, #416]	@ (80016cc <HAL_RCC_OscConfig+0x348>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff fb35 	bl	8000b9c <HAL_InitTick>
 8001532:	1e03      	subs	r3, r0, #0
 8001534:	d051      	beq.n	80015da <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e22c      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d030      	beq.n	80015a4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001542:	4b5b      	ldr	r3, [pc, #364]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a5e      	ldr	r2, [pc, #376]	@ (80016c0 <HAL_RCC_OscConfig+0x33c>)
 8001548:	4013      	ands	r3, r2
 800154a:	0019      	movs	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	4b57      	ldr	r3, [pc, #348]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 8001552:	430a      	orrs	r2, r1
 8001554:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001556:	4b56      	ldr	r3, [pc, #344]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4b55      	ldr	r3, [pc, #340]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 800155c:	2180      	movs	r1, #128	@ 0x80
 800155e:	0049      	lsls	r1, r1, #1
 8001560:	430a      	orrs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fb76 	bl	8000c54 <HAL_GetTick>
 8001568:	0003      	movs	r3, r0
 800156a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156e:	f7ff fb71 	bl	8000c54 <HAL_GetTick>
 8001572:	0002      	movs	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e209      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001580:	4b4b      	ldr	r3, [pc, #300]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2380      	movs	r3, #128	@ 0x80
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4013      	ands	r3, r2
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158c:	4b48      	ldr	r3, [pc, #288]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4a4a      	ldr	r2, [pc, #296]	@ (80016bc <HAL_RCC_OscConfig+0x338>)
 8001592:	4013      	ands	r3, r2
 8001594:	0019      	movs	r1, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	021a      	lsls	r2, r3, #8
 800159c:	4b44      	ldr	r3, [pc, #272]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 800159e:	430a      	orrs	r2, r1
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	e01b      	b.n	80015dc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80015a4:	4b42      	ldr	r3, [pc, #264]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b41      	ldr	r3, [pc, #260]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 80015aa:	4949      	ldr	r1, [pc, #292]	@ (80016d0 <HAL_RCC_OscConfig+0x34c>)
 80015ac:	400a      	ands	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fb50 	bl	8000c54 <HAL_GetTick>
 80015b4:	0003      	movs	r3, r0
 80015b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ba:	f7ff fb4b 	bl	8000c54 <HAL_GetTick>
 80015be:	0002      	movs	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e1e3      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015cc:	4b38      	ldr	r3, [pc, #224]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	2380      	movs	r3, #128	@ 0x80
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4013      	ands	r3, r2
 80015d6:	d1f0      	bne.n	80015ba <HAL_RCC_OscConfig+0x236>
 80015d8:	e000      	b.n	80015dc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015da:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2208      	movs	r2, #8
 80015e2:	4013      	ands	r3, r2
 80015e4:	d047      	beq.n	8001676 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80015e6:	4b32      	ldr	r3, [pc, #200]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2238      	movs	r2, #56	@ 0x38
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b18      	cmp	r3, #24
 80015f0:	d10a      	bne.n	8001608 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80015f2:	4b2f      	ldr	r3, [pc, #188]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 80015f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f6:	2202      	movs	r2, #2
 80015f8:	4013      	ands	r3, r2
 80015fa:	d03c      	beq.n	8001676 <HAL_RCC_OscConfig+0x2f2>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d138      	bne.n	8001676 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e1c5      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d019      	beq.n	8001644 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001610:	4b27      	ldr	r3, [pc, #156]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 8001612:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001614:	4b26      	ldr	r3, [pc, #152]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 8001616:	2101      	movs	r1, #1
 8001618:	430a      	orrs	r2, r1
 800161a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff fb1a 	bl	8000c54 <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001626:	f7ff fb15 	bl	8000c54 <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e1ad      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001638:	4b1d      	ldr	r3, [pc, #116]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 800163a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800163c:	2202      	movs	r2, #2
 800163e:	4013      	ands	r3, r2
 8001640:	d0f1      	beq.n	8001626 <HAL_RCC_OscConfig+0x2a2>
 8001642:	e018      	b.n	8001676 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001644:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 8001646:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001648:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 800164a:	2101      	movs	r1, #1
 800164c:	438a      	bics	r2, r1
 800164e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001650:	f7ff fb00 	bl	8000c54 <HAL_GetTick>
 8001654:	0003      	movs	r3, r0
 8001656:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800165a:	f7ff fafb 	bl	8000c54 <HAL_GetTick>
 800165e:	0002      	movs	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e193      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800166c:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 800166e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001670:	2202      	movs	r2, #2
 8001672:	4013      	ands	r3, r2
 8001674:	d1f1      	bne.n	800165a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2204      	movs	r2, #4
 800167c:	4013      	ands	r3, r2
 800167e:	d100      	bne.n	8001682 <HAL_RCC_OscConfig+0x2fe>
 8001680:	e0c6      	b.n	8001810 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001682:	231f      	movs	r3, #31
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800168a:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2238      	movs	r2, #56	@ 0x38
 8001690:	4013      	ands	r3, r2
 8001692:	2b20      	cmp	r3, #32
 8001694:	d11e      	bne.n	80016d4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001696:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <HAL_RCC_OscConfig+0x32c>)
 8001698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800169a:	2202      	movs	r2, #2
 800169c:	4013      	ands	r3, r2
 800169e:	d100      	bne.n	80016a2 <HAL_RCC_OscConfig+0x31e>
 80016a0:	e0b6      	b.n	8001810 <HAL_RCC_OscConfig+0x48c>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d000      	beq.n	80016ac <HAL_RCC_OscConfig+0x328>
 80016aa:	e0b1      	b.n	8001810 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e171      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
 80016b0:	40021000 	.word	0x40021000
 80016b4:	fffeffff 	.word	0xfffeffff
 80016b8:	fffbffff 	.word	0xfffbffff
 80016bc:	ffff80ff 	.word	0xffff80ff
 80016c0:	ffffc7ff 	.word	0xffffc7ff
 80016c4:	00f42400 	.word	0x00f42400
 80016c8:	2000000c 	.word	0x2000000c
 80016cc:	20000010 	.word	0x20000010
 80016d0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016d4:	4bb1      	ldr	r3, [pc, #708]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 80016d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016d8:	2380      	movs	r3, #128	@ 0x80
 80016da:	055b      	lsls	r3, r3, #21
 80016dc:	4013      	ands	r3, r2
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_OscConfig+0x360>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x362>
 80016e4:	2300      	movs	r3, #0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d011      	beq.n	800170e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4bac      	ldr	r3, [pc, #688]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 80016ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016ee:	4bab      	ldr	r3, [pc, #684]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 80016f0:	2180      	movs	r1, #128	@ 0x80
 80016f2:	0549      	lsls	r1, r1, #21
 80016f4:	430a      	orrs	r2, r1
 80016f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016f8:	4ba8      	ldr	r3, [pc, #672]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 80016fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016fc:	2380      	movs	r3, #128	@ 0x80
 80016fe:	055b      	lsls	r3, r3, #21
 8001700:	4013      	ands	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001706:	231f      	movs	r3, #31
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800170e:	4ba4      	ldr	r3, [pc, #656]	@ (80019a0 <HAL_RCC_OscConfig+0x61c>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	2380      	movs	r3, #128	@ 0x80
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4013      	ands	r3, r2
 8001718:	d11a      	bne.n	8001750 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800171a:	4ba1      	ldr	r3, [pc, #644]	@ (80019a0 <HAL_RCC_OscConfig+0x61c>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4ba0      	ldr	r3, [pc, #640]	@ (80019a0 <HAL_RCC_OscConfig+0x61c>)
 8001720:	2180      	movs	r1, #128	@ 0x80
 8001722:	0049      	lsls	r1, r1, #1
 8001724:	430a      	orrs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001728:	f7ff fa94 	bl	8000c54 <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001732:	f7ff fa8f 	bl	8000c54 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e127      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001744:	4b96      	ldr	r3, [pc, #600]	@ (80019a0 <HAL_RCC_OscConfig+0x61c>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2380      	movs	r3, #128	@ 0x80
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4013      	ands	r3, r2
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d106      	bne.n	8001766 <HAL_RCC_OscConfig+0x3e2>
 8001758:	4b90      	ldr	r3, [pc, #576]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 800175a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800175c:	4b8f      	ldr	r3, [pc, #572]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 800175e:	2101      	movs	r1, #1
 8001760:	430a      	orrs	r2, r1
 8001762:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001764:	e01c      	b.n	80017a0 <HAL_RCC_OscConfig+0x41c>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b05      	cmp	r3, #5
 800176c:	d10c      	bne.n	8001788 <HAL_RCC_OscConfig+0x404>
 800176e:	4b8b      	ldr	r3, [pc, #556]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 8001770:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001772:	4b8a      	ldr	r3, [pc, #552]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 8001774:	2104      	movs	r1, #4
 8001776:	430a      	orrs	r2, r1
 8001778:	65da      	str	r2, [r3, #92]	@ 0x5c
 800177a:	4b88      	ldr	r3, [pc, #544]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 800177c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800177e:	4b87      	ldr	r3, [pc, #540]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 8001780:	2101      	movs	r1, #1
 8001782:	430a      	orrs	r2, r1
 8001784:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001786:	e00b      	b.n	80017a0 <HAL_RCC_OscConfig+0x41c>
 8001788:	4b84      	ldr	r3, [pc, #528]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 800178a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800178c:	4b83      	ldr	r3, [pc, #524]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 800178e:	2101      	movs	r1, #1
 8001790:	438a      	bics	r2, r1
 8001792:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001794:	4b81      	ldr	r3, [pc, #516]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 8001796:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001798:	4b80      	ldr	r3, [pc, #512]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 800179a:	2104      	movs	r1, #4
 800179c:	438a      	bics	r2, r1
 800179e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d014      	beq.n	80017d2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fa54 	bl	8000c54 <HAL_GetTick>
 80017ac:	0003      	movs	r3, r0
 80017ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b0:	e009      	b.n	80017c6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f7ff fa4f 	bl	8000c54 <HAL_GetTick>
 80017b6:	0002      	movs	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	4a79      	ldr	r2, [pc, #484]	@ (80019a4 <HAL_RCC_OscConfig+0x620>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e0e6      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017c6:	4b75      	ldr	r3, [pc, #468]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 80017c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ca:	2202      	movs	r2, #2
 80017cc:	4013      	ands	r3, r2
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x42e>
 80017d0:	e013      	b.n	80017fa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d2:	f7ff fa3f 	bl	8000c54 <HAL_GetTick>
 80017d6:	0003      	movs	r3, r0
 80017d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017da:	e009      	b.n	80017f0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017dc:	f7ff fa3a 	bl	8000c54 <HAL_GetTick>
 80017e0:	0002      	movs	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	4a6f      	ldr	r2, [pc, #444]	@ (80019a4 <HAL_RCC_OscConfig+0x620>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e0d1      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017f0:	4b6a      	ldr	r3, [pc, #424]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 80017f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f4:	2202      	movs	r2, #2
 80017f6:	4013      	ands	r3, r2
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80017fa:	231f      	movs	r3, #31
 80017fc:	18fb      	adds	r3, r7, r3
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d105      	bne.n	8001810 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001804:	4b65      	ldr	r3, [pc, #404]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 8001806:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001808:	4b64      	ldr	r3, [pc, #400]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 800180a:	4967      	ldr	r1, [pc, #412]	@ (80019a8 <HAL_RCC_OscConfig+0x624>)
 800180c:	400a      	ands	r2, r1
 800180e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d100      	bne.n	800181a <HAL_RCC_OscConfig+0x496>
 8001818:	e0bb      	b.n	8001992 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800181a:	4b60      	ldr	r3, [pc, #384]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2238      	movs	r2, #56	@ 0x38
 8001820:	4013      	ands	r3, r2
 8001822:	2b10      	cmp	r3, #16
 8001824:	d100      	bne.n	8001828 <HAL_RCC_OscConfig+0x4a4>
 8001826:	e07b      	b.n	8001920 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d156      	bne.n	80018de <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001830:	4b5a      	ldr	r3, [pc, #360]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b59      	ldr	r3, [pc, #356]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 8001836:	495d      	ldr	r1, [pc, #372]	@ (80019ac <HAL_RCC_OscConfig+0x628>)
 8001838:	400a      	ands	r2, r1
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff fa0a 	bl	8000c54 <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001846:	f7ff fa05 	bl	8000c54 <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e09d      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001858:	4b50      	ldr	r3, [pc, #320]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2380      	movs	r3, #128	@ 0x80
 800185e:	049b      	lsls	r3, r3, #18
 8001860:	4013      	ands	r3, r2
 8001862:	d1f0      	bne.n	8001846 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001864:	4b4d      	ldr	r3, [pc, #308]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4a51      	ldr	r2, [pc, #324]	@ (80019b0 <HAL_RCC_OscConfig+0x62c>)
 800186a:	4013      	ands	r3, r2
 800186c:	0019      	movs	r1, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1a      	ldr	r2, [r3, #32]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001890:	431a      	orrs	r2, r3
 8001892:	4b42      	ldr	r3, [pc, #264]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 8001894:	430a      	orrs	r2, r1
 8001896:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001898:	4b40      	ldr	r3, [pc, #256]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b3f      	ldr	r3, [pc, #252]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 800189e:	2180      	movs	r1, #128	@ 0x80
 80018a0:	0449      	lsls	r1, r1, #17
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80018a6:	4b3d      	ldr	r3, [pc, #244]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	4b3c      	ldr	r3, [pc, #240]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 80018ac:	2180      	movs	r1, #128	@ 0x80
 80018ae:	0549      	lsls	r1, r1, #21
 80018b0:	430a      	orrs	r2, r1
 80018b2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff f9ce 	bl	8000c54 <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018be:	f7ff f9c9 	bl	8000c54 <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e061      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d0:	4b32      	ldr	r3, [pc, #200]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	2380      	movs	r3, #128	@ 0x80
 80018d6:	049b      	lsls	r3, r3, #18
 80018d8:	4013      	ands	r3, r2
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x53a>
 80018dc:	e059      	b.n	8001992 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018de:	4b2f      	ldr	r3, [pc, #188]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b2e      	ldr	r3, [pc, #184]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 80018e4:	4931      	ldr	r1, [pc, #196]	@ (80019ac <HAL_RCC_OscConfig+0x628>)
 80018e6:	400a      	ands	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff f9b3 	bl	8000c54 <HAL_GetTick>
 80018ee:	0003      	movs	r3, r0
 80018f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff f9ae 	bl	8000c54 <HAL_GetTick>
 80018f8:	0002      	movs	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e046      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001906:	4b25      	ldr	r3, [pc, #148]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	2380      	movs	r3, #128	@ 0x80
 800190c:	049b      	lsls	r3, r3, #18
 800190e:	4013      	ands	r3, r2
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001912:	4b22      	ldr	r3, [pc, #136]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	4b21      	ldr	r3, [pc, #132]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 8001918:	4926      	ldr	r1, [pc, #152]	@ (80019b4 <HAL_RCC_OscConfig+0x630>)
 800191a:	400a      	ands	r2, r1
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	e038      	b.n	8001992 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e033      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800192c:	4b1b      	ldr	r3, [pc, #108]	@ (800199c <HAL_RCC_OscConfig+0x618>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2203      	movs	r2, #3
 8001936:	401a      	ands	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	429a      	cmp	r2, r3
 800193e:	d126      	bne.n	800198e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	2270      	movs	r2, #112	@ 0x70
 8001944:	401a      	ands	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d11f      	bne.n	800198e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	23fe      	movs	r3, #254	@ 0xfe
 8001952:	01db      	lsls	r3, r3, #7
 8001954:	401a      	ands	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d116      	bne.n	800198e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	23f8      	movs	r3, #248	@ 0xf8
 8001964:	039b      	lsls	r3, r3, #14
 8001966:	401a      	ands	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d10e      	bne.n	800198e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	23e0      	movs	r3, #224	@ 0xe0
 8001974:	051b      	lsls	r3, r3, #20
 8001976:	401a      	ands	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	0f5b      	lsrs	r3, r3, #29
 8001984:	075a      	lsls	r2, r3, #29
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d001      	beq.n	8001992 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	0018      	movs	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	b008      	add	sp, #32
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000
 80019a0:	40007000 	.word	0x40007000
 80019a4:	00001388 	.word	0x00001388
 80019a8:	efffffff 	.word	0xefffffff
 80019ac:	feffffff 	.word	0xfeffffff
 80019b0:	11c1808c 	.word	0x11c1808c
 80019b4:	eefefffc 	.word	0xeefefffc

080019b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0e9      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019cc:	4b76      	ldr	r3, [pc, #472]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2207      	movs	r2, #7
 80019d2:	4013      	ands	r3, r2
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d91e      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b73      	ldr	r3, [pc, #460]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2207      	movs	r2, #7
 80019e0:	4393      	bics	r3, r2
 80019e2:	0019      	movs	r1, r3
 80019e4:	4b70      	ldr	r3, [pc, #448]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019ec:	f7ff f932 	bl	8000c54 <HAL_GetTick>
 80019f0:	0003      	movs	r3, r0
 80019f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019f4:	e009      	b.n	8001a0a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f6:	f7ff f92d 	bl	8000c54 <HAL_GetTick>
 80019fa:	0002      	movs	r2, r0
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	4a6a      	ldr	r2, [pc, #424]	@ (8001bac <HAL_RCC_ClockConfig+0x1f4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e0ca      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a0a:	4b67      	ldr	r3, [pc, #412]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2207      	movs	r2, #7
 8001a10:	4013      	ands	r3, r2
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d1ee      	bne.n	80019f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d015      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2204      	movs	r2, #4
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d006      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a2c:	4b60      	ldr	r3, [pc, #384]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	4b5f      	ldr	r3, [pc, #380]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a32:	21e0      	movs	r1, #224	@ 0xe0
 8001a34:	01c9      	lsls	r1, r1, #7
 8001a36:	430a      	orrs	r2, r1
 8001a38:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a3a:	4b5d      	ldr	r3, [pc, #372]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	4a5d      	ldr	r2, [pc, #372]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1fc>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	4b59      	ldr	r3, [pc, #356]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2201      	movs	r2, #1
 8001a54:	4013      	ands	r3, r2
 8001a56:	d057      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a60:	4b53      	ldr	r3, [pc, #332]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	029b      	lsls	r3, r3, #10
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d12b      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e097      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a78:	4b4d      	ldr	r3, [pc, #308]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	049b      	lsls	r3, r3, #18
 8001a80:	4013      	ands	r3, r2
 8001a82:	d11f      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e08b      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d107      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a90:	4b47      	ldr	r3, [pc, #284]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2380      	movs	r3, #128	@ 0x80
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d113      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e07f      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aa8:	4b41      	ldr	r3, [pc, #260]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aac:	2202      	movs	r2, #2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d108      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e074      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aba:	2202      	movs	r2, #2
 8001abc:	4013      	ands	r3, r2
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e06d      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ac4:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2207      	movs	r2, #7
 8001aca:	4393      	bics	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4b37      	ldr	r3, [pc, #220]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ad8:	f7ff f8bc 	bl	8000c54 <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae0:	e009      	b.n	8001af6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae2:	f7ff f8b7 	bl	8000c54 <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	4a2f      	ldr	r2, [pc, #188]	@ (8001bac <HAL_RCC_ClockConfig+0x1f4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e054      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2238      	movs	r2, #56	@ 0x38
 8001afc:	401a      	ands	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d1ec      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b08:	4b27      	ldr	r3, [pc, #156]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	4013      	ands	r3, r2
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d21e      	bcs.n	8001b54 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b24      	ldr	r3, [pc, #144]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2207      	movs	r2, #7
 8001b1c:	4393      	bics	r3, r2
 8001b1e:	0019      	movs	r1, r3
 8001b20:	4b21      	ldr	r3, [pc, #132]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b28:	f7ff f894 	bl	8000c54 <HAL_GetTick>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b30:	e009      	b.n	8001b46 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b32:	f7ff f88f 	bl	8000c54 <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bac <HAL_RCC_ClockConfig+0x1f4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e02c      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b46:	4b18      	ldr	r3, [pc, #96]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2207      	movs	r2, #7
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d1ee      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2204      	movs	r2, #4
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d009      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b5e:	4b14      	ldr	r3, [pc, #80]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	4a15      	ldr	r2, [pc, #84]	@ (8001bb8 <HAL_RCC_ClockConfig+0x200>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	0019      	movs	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b72:	f000 f829 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8001b76:	0001      	movs	r1, r0
 8001b78:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	220f      	movs	r2, #15
 8001b80:	401a      	ands	r2, r3
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <HAL_RCC_ClockConfig+0x204>)
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	58d3      	ldr	r3, [r2, r3]
 8001b88:	221f      	movs	r2, #31
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	000a      	movs	r2, r1
 8001b8e:	40da      	lsrs	r2, r3
 8001b90:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <HAL_RCC_ClockConfig+0x208>)
 8001b92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b94:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <HAL_RCC_ClockConfig+0x20c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7fe ffff 	bl	8000b9c <HAL_InitTick>
 8001b9e:	0003      	movs	r3, r0
}
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b004      	add	sp, #16
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40022000 	.word	0x40022000
 8001bac:	00001388 	.word	0x00001388
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	fffff0ff 	.word	0xfffff0ff
 8001bb8:	ffff8fff 	.word	0xffff8fff
 8001bbc:	08004788 	.word	0x08004788
 8001bc0:	2000000c 	.word	0x2000000c
 8001bc4:	20000010 	.word	0x20000010

08001bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bce:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2238      	movs	r2, #56	@ 0x38
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d10f      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001bd8:	4b39      	ldr	r3, [pc, #228]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	0adb      	lsrs	r3, r3, #11
 8001bde:	2207      	movs	r2, #7
 8001be0:	4013      	ands	r3, r2
 8001be2:	2201      	movs	r2, #1
 8001be4:	409a      	lsls	r2, r3
 8001be6:	0013      	movs	r3, r2
 8001be8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001bea:	6839      	ldr	r1, [r7, #0]
 8001bec:	4835      	ldr	r0, [pc, #212]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bee:	f7fe fa89 	bl	8000104 <__udivsi3>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	e05d      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf8:	4b31      	ldr	r3, [pc, #196]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2238      	movs	r2, #56	@ 0x38
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d102      	bne.n	8001c0a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c04:	4b30      	ldr	r3, [pc, #192]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	e054      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2238      	movs	r2, #56	@ 0x38
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b10      	cmp	r3, #16
 8001c14:	d138      	bne.n	8001c88 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c16:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c20:	4b27      	ldr	r3, [pc, #156]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	2207      	movs	r2, #7
 8001c28:	4013      	ands	r3, r2
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d10d      	bne.n	8001c50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	4824      	ldr	r0, [pc, #144]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c38:	f7fe fa64 	bl	8000104 <__udivsi3>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	0019      	movs	r1, r3
 8001c40:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	227f      	movs	r2, #127	@ 0x7f
 8001c48:	4013      	ands	r3, r2
 8001c4a:	434b      	muls	r3, r1
 8001c4c:	617b      	str	r3, [r7, #20]
        break;
 8001c4e:	e00d      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	481c      	ldr	r0, [pc, #112]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c54:	f7fe fa56 	bl	8000104 <__udivsi3>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	227f      	movs	r2, #127	@ 0x7f
 8001c64:	4013      	ands	r3, r2
 8001c66:	434b      	muls	r3, r1
 8001c68:	617b      	str	r3, [r7, #20]
        break;
 8001c6a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c6c:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0f5b      	lsrs	r3, r3, #29
 8001c72:	2207      	movs	r2, #7
 8001c74:	4013      	ands	r3, r2
 8001c76:	3301      	adds	r3, #1
 8001c78:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	6978      	ldr	r0, [r7, #20]
 8001c7e:	f7fe fa41 	bl	8000104 <__udivsi3>
 8001c82:	0003      	movs	r3, r0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	e015      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c88:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2238      	movs	r2, #56	@ 0x38
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b20      	cmp	r3, #32
 8001c92:	d103      	bne.n	8001c9c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c94:	2380      	movs	r3, #128	@ 0x80
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c9c:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2238      	movs	r2, #56	@ 0x38
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b18      	cmp	r3, #24
 8001ca6:	d103      	bne.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001ca8:	23fa      	movs	r3, #250	@ 0xfa
 8001caa:	01db      	lsls	r3, r3, #7
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	e001      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001cb4:	693b      	ldr	r3, [r7, #16]
}
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b006      	add	sp, #24
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	46c0      	nop			@ (mov r8, r8)
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	00f42400 	.word	0x00f42400
 8001cc8:	007a1200 	.word	0x007a1200

08001ccc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd0:	4b02      	ldr	r3, [pc, #8]	@ (8001cdc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	2000000c 	.word	0x2000000c

08001ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ce4:	f7ff fff2 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001ce8:	0004      	movs	r4, r0
 8001cea:	f7ff fb3f 	bl	800136c <LL_RCC_GetAPB1Prescaler>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	0b1a      	lsrs	r2, r3, #12
 8001cf2:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cf4:	0092      	lsls	r2, r2, #2
 8001cf6:	58d3      	ldr	r3, [r2, r3]
 8001cf8:	221f      	movs	r2, #31
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	40dc      	lsrs	r4, r3
 8001cfe:	0023      	movs	r3, r4
}
 8001d00:	0018      	movs	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bdb0      	pop	{r4, r5, r7, pc}
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	080047c8 	.word	0x080047c8

08001d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d14:	2313      	movs	r3, #19
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d1c:	2312      	movs	r3, #18
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2380      	movs	r3, #128	@ 0x80
 8001d2a:	029b      	lsls	r3, r3, #10
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d100      	bne.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d30:	e0a3      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d32:	2011      	movs	r0, #17
 8001d34:	183b      	adds	r3, r7, r0
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3a:	4bc3      	ldr	r3, [pc, #780]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d3e:	2380      	movs	r3, #128	@ 0x80
 8001d40:	055b      	lsls	r3, r3, #21
 8001d42:	4013      	ands	r3, r2
 8001d44:	d110      	bne.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	4bc0      	ldr	r3, [pc, #768]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d4a:	4bbf      	ldr	r3, [pc, #764]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d4c:	2180      	movs	r1, #128	@ 0x80
 8001d4e:	0549      	lsls	r1, r1, #21
 8001d50:	430a      	orrs	r2, r1
 8001d52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d54:	4bbc      	ldr	r3, [pc, #752]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d58:	2380      	movs	r3, #128	@ 0x80
 8001d5a:	055b      	lsls	r3, r3, #21
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d62:	183b      	adds	r3, r7, r0
 8001d64:	2201      	movs	r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d68:	4bb8      	ldr	r3, [pc, #736]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4bb7      	ldr	r3, [pc, #732]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d6e:	2180      	movs	r1, #128	@ 0x80
 8001d70:	0049      	lsls	r1, r1, #1
 8001d72:	430a      	orrs	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d76:	f7fe ff6d 	bl	8000c54 <HAL_GetTick>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d7e:	e00b      	b.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d80:	f7fe ff68 	bl	8000c54 <HAL_GetTick>
 8001d84:	0002      	movs	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d904      	bls.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d8e:	2313      	movs	r3, #19
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	2203      	movs	r2, #3
 8001d94:	701a      	strb	r2, [r3, #0]
        break;
 8001d96:	e005      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d98:	4bac      	ldr	r3, [pc, #688]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2380      	movs	r3, #128	@ 0x80
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4013      	ands	r3, r2
 8001da2:	d0ed      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001da4:	2313      	movs	r3, #19
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d154      	bne.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dae:	4ba6      	ldr	r3, [pc, #664]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001db0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001db2:	23c0      	movs	r3, #192	@ 0xc0
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4013      	ands	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d019      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d014      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dca:	4b9f      	ldr	r3, [pc, #636]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dce:	4aa0      	ldr	r2, [pc, #640]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001dd4:	4b9c      	ldr	r3, [pc, #624]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001dd8:	4b9b      	ldr	r3, [pc, #620]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dda:	2180      	movs	r1, #128	@ 0x80
 8001ddc:	0249      	lsls	r1, r1, #9
 8001dde:	430a      	orrs	r2, r1
 8001de0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001de2:	4b99      	ldr	r3, [pc, #612]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001de4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001de6:	4b98      	ldr	r3, [pc, #608]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001de8:	499a      	ldr	r1, [pc, #616]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001dea:	400a      	ands	r2, r1
 8001dec:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dee:	4b96      	ldr	r3, [pc, #600]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2201      	movs	r2, #1
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d016      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7fe ff2a 	bl	8000c54 <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e04:	e00c      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7fe ff25 	bl	8000c54 <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	4a91      	ldr	r2, [pc, #580]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d904      	bls.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001e16:	2313      	movs	r3, #19
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	701a      	strb	r2, [r3, #0]
            break;
 8001e1e:	e004      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e20:	4b89      	ldr	r3, [pc, #548]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e24:	2202      	movs	r2, #2
 8001e26:	4013      	ands	r3, r2
 8001e28:	d0ed      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e2a:	2313      	movs	r3, #19
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10a      	bne.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e34:	4b84      	ldr	r3, [pc, #528]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e38:	4a85      	ldr	r2, [pc, #532]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e42:	4b81      	ldr	r3, [pc, #516]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e44:	430a      	orrs	r2, r1
 8001e46:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e48:	e00c      	b.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e4a:	2312      	movs	r3, #18
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	2213      	movs	r2, #19
 8001e50:	18ba      	adds	r2, r7, r2
 8001e52:	7812      	ldrb	r2, [r2, #0]
 8001e54:	701a      	strb	r2, [r3, #0]
 8001e56:	e005      	b.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e58:	2312      	movs	r3, #18
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	2213      	movs	r2, #19
 8001e5e:	18ba      	adds	r2, r7, r2
 8001e60:	7812      	ldrb	r2, [r2, #0]
 8001e62:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e64:	2311      	movs	r3, #17
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d105      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6e:	4b76      	ldr	r3, [pc, #472]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e72:	4b75      	ldr	r3, [pc, #468]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e74:	4979      	ldr	r1, [pc, #484]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001e76:	400a      	ands	r2, r1
 8001e78:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4013      	ands	r3, r2
 8001e82:	d009      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e84:	4b70      	ldr	r3, [pc, #448]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e88:	2203      	movs	r2, #3
 8001e8a:	4393      	bics	r3, r2
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	4b6d      	ldr	r3, [pc, #436]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e94:	430a      	orrs	r2, r1
 8001e96:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d009      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ea2:	4b69      	ldr	r3, [pc, #420]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	4393      	bics	r3, r2
 8001eaa:	0019      	movs	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	4b65      	ldr	r3, [pc, #404]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2210      	movs	r2, #16
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d009      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ec0:	4b61      	ldr	r3, [pc, #388]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec4:	4a66      	ldr	r2, [pc, #408]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	0019      	movs	r1, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	4b5e      	ldr	r3, [pc, #376]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2380      	movs	r3, #128	@ 0x80
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4013      	ands	r3, r2
 8001ede:	d009      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ee0:	4b59      	ldr	r3, [pc, #356]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee4:	4a5f      	ldr	r2, [pc, #380]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	0019      	movs	r1, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699a      	ldr	r2, [r3, #24]
 8001eee:	4b56      	ldr	r3, [pc, #344]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	2380      	movs	r3, #128	@ 0x80
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4013      	ands	r3, r2
 8001efe:	d009      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f00:	4b51      	ldr	r3, [pc, #324]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f04:	4a58      	ldr	r2, [pc, #352]	@ (8002068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	4b4e      	ldr	r3, [pc, #312]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f10:	430a      	orrs	r2, r1
 8001f12:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2220      	movs	r2, #32
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d009      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f22:	4a52      	ldr	r2, [pc, #328]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	4b46      	ldr	r3, [pc, #280]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	2380      	movs	r3, #128	@ 0x80
 8001f38:	01db      	lsls	r3, r3, #7
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d015      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f3e:	4b42      	ldr	r3, [pc, #264]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	0899      	lsrs	r1, r3, #2
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1a      	ldr	r2, [r3, #32]
 8001f4a:	4b3f      	ldr	r3, [pc, #252]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	2380      	movs	r3, #128	@ 0x80
 8001f56:	05db      	lsls	r3, r3, #23
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	4b39      	ldr	r3, [pc, #228]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f62:	2180      	movs	r1, #128	@ 0x80
 8001f64:	0249      	lsls	r1, r1, #9
 8001f66:	430a      	orrs	r2, r1
 8001f68:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	2380      	movs	r3, #128	@ 0x80
 8001f70:	031b      	lsls	r3, r3, #12
 8001f72:	4013      	ands	r3, r2
 8001f74:	d009      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f76:	4b34      	ldr	r3, [pc, #208]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f7a:	2240      	movs	r2, #64	@ 0x40
 8001f7c:	4393      	bics	r3, r2
 8001f7e:	0019      	movs	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f84:	4b30      	ldr	r3, [pc, #192]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f86:	430a      	orrs	r2, r1
 8001f88:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	2380      	movs	r3, #128	@ 0x80
 8001f90:	039b      	lsls	r3, r3, #14
 8001f92:	4013      	ands	r3, r2
 8001f94:	d016      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f96:	4b2c      	ldr	r3, [pc, #176]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f9a:	4a35      	ldr	r2, [pc, #212]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fa4:	4b28      	ldr	r3, [pc, #160]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fae:	2380      	movs	r3, #128	@ 0x80
 8001fb0:	03db      	lsls	r3, r3, #15
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d106      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001fb6:	4b24      	ldr	r3, [pc, #144]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fbc:	2180      	movs	r1, #128	@ 0x80
 8001fbe:	0449      	lsls	r1, r1, #17
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2380      	movs	r3, #128	@ 0x80
 8001fca:	03db      	lsls	r3, r3, #15
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d016      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd4:	4a27      	ldr	r2, [pc, #156]	@ (8002074 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fde:	4b1a      	ldr	r3, [pc, #104]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fe8:	2380      	movs	r3, #128	@ 0x80
 8001fea:	045b      	lsls	r3, r3, #17
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d106      	bne.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001ff0:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ff6:	2180      	movs	r1, #128	@ 0x80
 8001ff8:	0449      	lsls	r1, r1, #17
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	2380      	movs	r3, #128	@ 0x80
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	4013      	ands	r3, r2
 8002008:	d016      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800200a:	4b0f      	ldr	r3, [pc, #60]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800200c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200e:	4a1a      	ldr	r2, [pc, #104]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002010:	4013      	ands	r3, r2
 8002012:	0019      	movs	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800201a:	430a      	orrs	r2, r1
 800201c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	2380      	movs	r3, #128	@ 0x80
 8002024:	01db      	lsls	r3, r3, #7
 8002026:	429a      	cmp	r2, r3
 8002028:	d106      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800202a:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002030:	2180      	movs	r1, #128	@ 0x80
 8002032:	0249      	lsls	r1, r1, #9
 8002034:	430a      	orrs	r2, r1
 8002036:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002038:	2312      	movs	r3, #18
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	781b      	ldrb	r3, [r3, #0]
}
 800203e:	0018      	movs	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	b006      	add	sp, #24
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	40021000 	.word	0x40021000
 800204c:	40007000 	.word	0x40007000
 8002050:	fffffcff 	.word	0xfffffcff
 8002054:	fffeffff 	.word	0xfffeffff
 8002058:	00001388 	.word	0x00001388
 800205c:	efffffff 	.word	0xefffffff
 8002060:	fffff3ff 	.word	0xfffff3ff
 8002064:	fff3ffff 	.word	0xfff3ffff
 8002068:	ffcfffff 	.word	0xffcfffff
 800206c:	ffffcfff 	.word	0xffffcfff
 8002070:	ffbfffff 	.word	0xffbfffff
 8002074:	feffffff 	.word	0xfeffffff
 8002078:	ffff3fff 	.word	0xffff3fff

0800207c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0a8      	b.n	80021e0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	2382      	movs	r3, #130	@ 0x82
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	429a      	cmp	r2, r3
 80020a0:	d009      	beq.n	80020b6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	61da      	str	r2, [r3, #28]
 80020a8:	e005      	b.n	80020b6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	225d      	movs	r2, #93	@ 0x5d
 80020c0:	5c9b      	ldrb	r3, [r3, r2]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d107      	bne.n	80020d8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	225c      	movs	r2, #92	@ 0x5c
 80020cc:	2100      	movs	r1, #0
 80020ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7fe fc26 	bl	8000924 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	225d      	movs	r2, #93	@ 0x5d
 80020dc:	2102      	movs	r1, #2
 80020de:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2140      	movs	r1, #64	@ 0x40
 80020ec:	438a      	bics	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	23e0      	movs	r3, #224	@ 0xe0
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d902      	bls.n	8002102 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	e002      	b.n	8002108 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002102:	2380      	movs	r3, #128	@ 0x80
 8002104:	015b      	lsls	r3, r3, #5
 8002106:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	23f0      	movs	r3, #240	@ 0xf0
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	429a      	cmp	r2, r3
 8002112:	d008      	beq.n	8002126 <HAL_SPI_Init+0xaa>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	23e0      	movs	r3, #224	@ 0xe0
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	429a      	cmp	r2, r3
 800211e:	d002      	beq.n	8002126 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	2382      	movs	r3, #130	@ 0x82
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	401a      	ands	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6899      	ldr	r1, [r3, #8]
 8002134:	2384      	movs	r3, #132	@ 0x84
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	400b      	ands	r3, r1
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2102      	movs	r1, #2
 8002142:	400b      	ands	r3, r1
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	2101      	movs	r1, #1
 800214c:	400b      	ands	r3, r1
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6999      	ldr	r1, [r3, #24]
 8002154:	2380      	movs	r3, #128	@ 0x80
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	400b      	ands	r3, r1
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	2138      	movs	r1, #56	@ 0x38
 8002162:	400b      	ands	r3, r1
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	2180      	movs	r1, #128	@ 0x80
 800216c:	400b      	ands	r3, r1
 800216e:	431a      	orrs	r2, r3
 8002170:	0011      	movs	r1, r2
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002176:	2380      	movs	r3, #128	@ 0x80
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	401a      	ands	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	0c1b      	lsrs	r3, r3, #16
 800218a:	2204      	movs	r2, #4
 800218c:	401a      	ands	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002192:	2110      	movs	r1, #16
 8002194:	400b      	ands	r3, r1
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800219c:	2108      	movs	r1, #8
 800219e:	400b      	ands	r3, r1
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68d9      	ldr	r1, [r3, #12]
 80021a6:	23f0      	movs	r3, #240	@ 0xf0
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	400b      	ands	r3, r1
 80021ac:	431a      	orrs	r2, r3
 80021ae:	0011      	movs	r1, r2
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	2380      	movs	r3, #128	@ 0x80
 80021b4:	015b      	lsls	r3, r3, #5
 80021b6:	401a      	ands	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69da      	ldr	r2, [r3, #28]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4907      	ldr	r1, [pc, #28]	@ (80021e8 <HAL_SPI_Init+0x16c>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	225d      	movs	r2, #93	@ 0x5d
 80021da:	2101      	movs	r1, #1
 80021dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	0018      	movs	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b004      	add	sp, #16
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	fffff7ff 	.word	0xfffff7ff

080021ec <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	1dbb      	adds	r3, r7, #6
 80021f8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021fa:	2117      	movs	r1, #23
 80021fc:	187b      	adds	r3, r7, r1
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]


  if (hspi->State != HAL_SPI_STATE_READY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	225d      	movs	r2, #93	@ 0x5d
 8002206:	5c9b      	ldrb	r3, [r3, r2]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d003      	beq.n	8002216 <HAL_SPI_Receive_IT+0x2a>
  {
    errorcode = HAL_BUSY;
 800220e:	187b      	adds	r3, r7, r1
 8002210:	2202      	movs	r2, #2
 8002212:	701a      	strb	r2, [r3, #0]
    goto error;
 8002214:	e09c      	b.n	8002350 <HAL_SPI_Receive_IT+0x164>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d112      	bne.n	8002244 <HAL_SPI_Receive_IT+0x58>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	2382      	movs	r3, #130	@ 0x82
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	429a      	cmp	r2, r3
 8002228:	d10c      	bne.n	8002244 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	225d      	movs	r2, #93	@ 0x5d
 800222e:	2104      	movs	r1, #4
 8002230:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002232:	1dbb      	adds	r3, r7, #6
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f898 	bl	8002370 <HAL_SPI_TransmitReceive_IT>
 8002240:	0003      	movs	r3, r0
 8002242:	e088      	b.n	8002356 <HAL_SPI_Receive_IT+0x16a>
  }


  if ((pData == NULL) || (Size == 0U))
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_SPI_Receive_IT+0x66>
 800224a:	1dbb      	adds	r3, r7, #6
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d104      	bne.n	800225c <HAL_SPI_Receive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8002252:	2317      	movs	r3, #23
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
    goto error;
 800225a:	e079      	b.n	8002350 <HAL_SPI_Receive_IT+0x164>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	225c      	movs	r2, #92	@ 0x5c
 8002260:	5c9b      	ldrb	r3, [r3, r2]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_SPI_Receive_IT+0x7e>
 8002266:	2302      	movs	r3, #2
 8002268:	e075      	b.n	8002356 <HAL_SPI_Receive_IT+0x16a>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	225c      	movs	r2, #92	@ 0x5c
 800226e:	2101      	movs	r1, #1
 8002270:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	225d      	movs	r2, #93	@ 0x5d
 8002276:	2104      	movs	r1, #4
 8002278:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1dba      	adds	r2, r7, #6
 800228a:	2144      	movs	r1, #68	@ 0x44
 800228c:	8812      	ldrh	r2, [r2, #0]
 800228e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1dba      	adds	r2, r7, #6
 8002294:	2146      	movs	r1, #70	@ 0x46
 8002296:	8812      	ldrh	r2, [r2, #0]
 8002298:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	23e0      	movs	r3, #224	@ 0xe0
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d90b      	bls.n	80022d6 <HAL_SPI_Receive_IT+0xea>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4925      	ldr	r1, [pc, #148]	@ (8002360 <HAL_SPI_Receive_IT+0x174>)
 80022ca:	400a      	ands	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4a24      	ldr	r2, [pc, #144]	@ (8002364 <HAL_SPI_Receive_IT+0x178>)
 80022d2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80022d4:	e00b      	b.n	80022ee <HAL_SPI_Receive_IT+0x102>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2180      	movs	r1, #128	@ 0x80
 80022e2:	0149      	lsls	r1, r1, #5
 80022e4:	430a      	orrs	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002368 <HAL_SPI_Receive_IT+0x17c>)
 80022ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	2380      	movs	r3, #128	@ 0x80
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d10f      	bne.n	800231a <HAL_SPI_Receive_IT+0x12e>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2140      	movs	r1, #64	@ 0x40
 8002306:	438a      	bics	r2, r1
 8002308:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4915      	ldr	r1, [pc, #84]	@ (800236c <HAL_SPI_Receive_IT+0x180>)
 8002316:	400a      	ands	r2, r1
 8002318:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2240      	movs	r2, #64	@ 0x40
 8002322:	4013      	ands	r3, r2
 8002324:	2b40      	cmp	r3, #64	@ 0x40
 8002326:	d007      	beq.n	8002338 <HAL_SPI_Receive_IT+0x14c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2140      	movs	r1, #64	@ 0x40
 8002334:	430a      	orrs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	225c      	movs	r2, #92	@ 0x5c
 800233c:	2100      	movs	r1, #0
 800233e:	5499      	strb	r1, [r3, r2]
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2160      	movs	r1, #96	@ 0x60
 800234c:	430a      	orrs	r2, r1
 800234e:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002350:	2317      	movs	r3, #23
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	781b      	ldrb	r3, [r3, #0]
}
 8002356:	0018      	movs	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	b006      	add	sp, #24
 800235c:	bd80      	pop	{r7, pc}
 800235e:	46c0      	nop			@ (mov r8, r8)
 8002360:	ffffefff 	.word	0xffffefff
 8002364:	08002993 	.word	0x08002993
 8002368:	08002941 	.word	0x08002941
 800236c:	ffffbfff 	.word	0xffffbfff

08002370 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	001a      	movs	r2, r3
 800237e:	1cbb      	adds	r3, r7, #2
 8002380:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002382:	2317      	movs	r3, #23
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800238a:	2016      	movs	r0, #22
 800238c:	183b      	adds	r3, r7, r0
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	215d      	movs	r1, #93	@ 0x5d
 8002392:	5c52      	ldrb	r2, [r2, r1]
 8002394:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800239c:	0001      	movs	r1, r0
 800239e:	187b      	adds	r3, r7, r1
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d011      	beq.n	80023ca <HAL_SPI_TransmitReceive_IT+0x5a>
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	2382      	movs	r3, #130	@ 0x82
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d107      	bne.n	80023c0 <HAL_SPI_TransmitReceive_IT+0x50>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d103      	bne.n	80023c0 <HAL_SPI_TransmitReceive_IT+0x50>
 80023b8:	187b      	adds	r3, r7, r1
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d004      	beq.n	80023ca <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 80023c0:	2317      	movs	r3, #23
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	2202      	movs	r2, #2
 80023c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80023c8:	e088      	b.n	80024dc <HAL_SPI_TransmitReceive_IT+0x16c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d006      	beq.n	80023de <HAL_SPI_TransmitReceive_IT+0x6e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_SPI_TransmitReceive_IT+0x6e>
 80023d6:	1cbb      	adds	r3, r7, #2
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d104      	bne.n	80023e8 <HAL_SPI_TransmitReceive_IT+0x78>
  {
    errorcode = HAL_ERROR;
 80023de:	2317      	movs	r3, #23
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
    goto error;
 80023e6:	e079      	b.n	80024dc <HAL_SPI_TransmitReceive_IT+0x16c>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	225c      	movs	r2, #92	@ 0x5c
 80023ec:	5c9b      	ldrb	r3, [r3, r2]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_SPI_TransmitReceive_IT+0x86>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e075      	b.n	80024e2 <HAL_SPI_TransmitReceive_IT+0x172>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	225c      	movs	r2, #92	@ 0x5c
 80023fa:	2101      	movs	r1, #1
 80023fc:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	225d      	movs	r2, #93	@ 0x5d
 8002402:	5c9b      	ldrb	r3, [r3, r2]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b04      	cmp	r3, #4
 8002408:	d003      	beq.n	8002412 <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	225d      	movs	r2, #93	@ 0x5d
 800240e:	2105      	movs	r1, #5
 8002410:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1cba      	adds	r2, r7, #2
 8002422:	8812      	ldrh	r2, [r2, #0]
 8002424:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1cba      	adds	r2, r7, #2
 800242a:	8812      	ldrh	r2, [r2, #0]
 800242c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1cba      	adds	r2, r7, #2
 8002438:	2144      	movs	r1, #68	@ 0x44
 800243a:	8812      	ldrh	r2, [r2, #0]
 800243c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1cba      	adds	r2, r7, #2
 8002442:	2146      	movs	r1, #70	@ 0x46
 8002444:	8812      	ldrh	r2, [r2, #0]
 8002446:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	23e0      	movs	r3, #224	@ 0xe0
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	429a      	cmp	r2, r3
 8002452:	d906      	bls.n	8002462 <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4a25      	ldr	r2, [pc, #148]	@ (80024ec <HAL_SPI_TransmitReceive_IT+0x17c>)
 8002458:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4a24      	ldr	r2, [pc, #144]	@ (80024f0 <HAL_SPI_TransmitReceive_IT+0x180>)
 800245e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002460:	e005      	b.n	800246e <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4a23      	ldr	r2, [pc, #140]	@ (80024f4 <HAL_SPI_TransmitReceive_IT+0x184>)
 8002466:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4a23      	ldr	r2, [pc, #140]	@ (80024f8 <HAL_SPI_TransmitReceive_IT+0x188>)
 800246c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	23e0      	movs	r3, #224	@ 0xe0
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	429a      	cmp	r2, r3
 8002478:	d803      	bhi.n	8002482 <HAL_SPI_TransmitReceive_IT+0x112>
 800247a:	1cbb      	adds	r3, r7, #2
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d908      	bls.n	8002494 <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	491b      	ldr	r1, [pc, #108]	@ (80024fc <HAL_SPI_TransmitReceive_IT+0x18c>)
 800248e:	400a      	ands	r2, r1
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	e008      	b.n	80024a6 <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2180      	movs	r1, #128	@ 0x80
 80024a0:	0149      	lsls	r1, r1, #5
 80024a2:	430a      	orrs	r2, r1
 80024a4:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2240      	movs	r2, #64	@ 0x40
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b40      	cmp	r3, #64	@ 0x40
 80024b2:	d007      	beq.n	80024c4 <HAL_SPI_TransmitReceive_IT+0x154>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2140      	movs	r1, #64	@ 0x40
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	225c      	movs	r2, #92	@ 0x5c
 80024c8:	2100      	movs	r1, #0
 80024ca:	5499      	strb	r1, [r3, r2]
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	21e0      	movs	r1, #224	@ 0xe0
 80024d8:	430a      	orrs	r2, r1
 80024da:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80024dc:	2317      	movs	r3, #23
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	781b      	ldrb	r3, [r3, #0]
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b006      	add	sp, #24
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	08002877 	.word	0x08002877
 80024f0:	080028df 	.word	0x080028df
 80024f4:	08002721 	.word	0x08002721
 80024f8:	080027e3 	.word	0x080027e3
 80024fc:	ffffefff 	.word	0xffffefff

08002500 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2240      	movs	r2, #64	@ 0x40
 800251c:	4013      	ands	r3, r2
 800251e:	d10d      	bne.n	800253c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2201      	movs	r2, #1
 8002524:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002526:	d009      	beq.n	800253c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2240      	movs	r2, #64	@ 0x40
 800252c:	4013      	ands	r3, r2
 800252e:	d005      	beq.n	800253c <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	0010      	movs	r0, r2
 8002538:	4798      	blx	r3
    return;
 800253a:	e0c5      	b.n	80026c8 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	2202      	movs	r2, #2
 8002540:	4013      	ands	r3, r2
 8002542:	d009      	beq.n	8002558 <HAL_SPI_IRQHandler+0x58>
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	2280      	movs	r2, #128	@ 0x80
 8002548:	4013      	ands	r3, r2
 800254a:	d005      	beq.n	8002558 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	0010      	movs	r0, r2
 8002554:	4798      	blx	r3
    return;
 8002556:	e0b7      	b.n	80026c8 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2220      	movs	r2, #32
 800255c:	4013      	ands	r3, r2
 800255e:	d109      	bne.n	8002574 <HAL_SPI_IRQHandler+0x74>
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2240      	movs	r2, #64	@ 0x40
 8002564:	4013      	ands	r3, r2
 8002566:	d105      	bne.n	8002574 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	2380      	movs	r3, #128	@ 0x80
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4013      	ands	r3, r2
 8002570:	d100      	bne.n	8002574 <HAL_SPI_IRQHandler+0x74>
 8002572:	e0a9      	b.n	80026c8 <HAL_SPI_IRQHandler+0x1c8>
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	2220      	movs	r2, #32
 8002578:	4013      	ands	r3, r2
 800257a:	d100      	bne.n	800257e <HAL_SPI_IRQHandler+0x7e>
 800257c:	e0a4      	b.n	80026c8 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2240      	movs	r2, #64	@ 0x40
 8002582:	4013      	ands	r3, r2
 8002584:	d023      	beq.n	80025ce <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	225d      	movs	r2, #93	@ 0x5d
 800258a:	5c9b      	ldrb	r3, [r3, r2]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b03      	cmp	r3, #3
 8002590:	d011      	beq.n	80025b6 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002596:	2204      	movs	r2, #4
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	e00b      	b.n	80025ce <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	693b      	ldr	r3, [r7, #16]
        return;
 80025cc:	e07c      	b.n	80026c8 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	2220      	movs	r2, #32
 80025d2:	4013      	ands	r3, r2
 80025d4:	d014      	beq.n	8002600 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025da:	2201      	movs	r2, #1
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2140      	movs	r1, #64	@ 0x40
 80025fa:	438a      	bics	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	2380      	movs	r3, #128	@ 0x80
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4013      	ands	r3, r2
 8002608:	d00c      	beq.n	8002624 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800260e:	2208      	movs	r2, #8
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002628:	2b00      	cmp	r3, #0
 800262a:	d04c      	beq.n	80026c6 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	21e0      	movs	r1, #224	@ 0xe0
 8002638:	438a      	bics	r2, r1
 800263a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	225d      	movs	r2, #93	@ 0x5d
 8002640:	2101      	movs	r1, #1
 8002642:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	2202      	movs	r2, #2
 8002648:	4013      	ands	r3, r2
 800264a:	d103      	bne.n	8002654 <HAL_SPI_IRQHandler+0x154>
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	2201      	movs	r2, #1
 8002650:	4013      	ands	r3, r2
 8002652:	d032      	beq.n	80026ba <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2103      	movs	r1, #3
 8002660:	438a      	bics	r2, r1
 8002662:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002668:	2b00      	cmp	r3, #0
 800266a:	d010      	beq.n	800268e <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002670:	4a17      	ldr	r2, [pc, #92]	@ (80026d0 <HAL_SPI_IRQHandler+0x1d0>)
 8002672:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002678:	0018      	movs	r0, r3
 800267a:	f7fe fc4b 	bl	8000f14 <HAL_DMA_Abort_IT>
 800267e:	1e03      	subs	r3, r0, #0
 8002680:	d005      	beq.n	800268e <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002686:	2240      	movs	r2, #64	@ 0x40
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002692:	2b00      	cmp	r3, #0
 8002694:	d016      	beq.n	80026c4 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269a:	4a0d      	ldr	r2, [pc, #52]	@ (80026d0 <HAL_SPI_IRQHandler+0x1d0>)
 800269c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a2:	0018      	movs	r0, r3
 80026a4:	f7fe fc36 	bl	8000f14 <HAL_DMA_Abort_IT>
 80026a8:	1e03      	subs	r3, r0, #0
 80026aa:	d00b      	beq.n	80026c4 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b0:	2240      	movs	r2, #64	@ 0x40
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80026b8:	e004      	b.n	80026c4 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	0018      	movs	r0, r3
 80026be:	f000 f811 	bl	80026e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80026c2:	e000      	b.n	80026c6 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 80026c4:	46c0      	nop			@ (mov r8, r8)
    return;
 80026c6:	46c0      	nop			@ (mov r8, r8)
  }
}
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b008      	add	sp, #32
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			@ (mov r8, r8)
 80026d0:	080026f5 	.word	0x080026f5

080026d4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80026dc:	46c0      	nop			@ (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	b002      	add	sp, #8
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80026ec:	46c0      	nop			@ (mov r8, r8)
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b002      	add	sp, #8
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002700:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2246      	movs	r2, #70	@ 0x46
 8002706:	2100      	movs	r1, #0
 8002708:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	0018      	movs	r0, r3
 8002714:	f7ff ffe6 	bl	80026e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002718:	46c0      	nop			@ (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	b004      	add	sp, #16
 800271e:	bd80      	pop	{r7, pc}

08002720 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2246      	movs	r2, #70	@ 0x46
 800272c:	5a9b      	ldrh	r3, [r3, r2]
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b01      	cmp	r3, #1
 8002732:	d924      	bls.n	800277e <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	b292      	uxth	r2, r2
 8002740:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	1c9a      	adds	r2, r3, #2
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2246      	movs	r2, #70	@ 0x46
 8002750:	5a9b      	ldrh	r3, [r3, r2]
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b02      	subs	r3, #2
 8002756:	b299      	uxth	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2246      	movs	r2, #70	@ 0x46
 800275c:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2246      	movs	r2, #70	@ 0x46
 8002762:	5a9b      	ldrh	r3, [r3, r2]
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d120      	bne.n	80027ac <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2180      	movs	r1, #128	@ 0x80
 8002776:	0149      	lsls	r1, r1, #5
 8002778:	430a      	orrs	r2, r1
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	e016      	b.n	80027ac <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	330c      	adds	r3, #12
 8002784:	001a      	movs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	7812      	ldrb	r2, [r2, #0]
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2246      	movs	r2, #70	@ 0x46
 800279e:	5a9b      	ldrh	r3, [r3, r2]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b299      	uxth	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2246      	movs	r2, #70	@ 0x46
 80027aa:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2246      	movs	r2, #70	@ 0x46
 80027b0:	5a9b      	ldrh	r3, [r3, r2]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d110      	bne.n	80027da <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2160      	movs	r1, #96	@ 0x60
 80027c4:	438a      	bics	r2, r1
 80027c6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d103      	bne.n	80027da <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f000 fad7 	bl	8002d88 <SPI_CloseRxTx_ISR>
    }
  }
}
 80027da:	46c0      	nop			@ (mov r8, r8)
 80027dc:	46bd      	mov	sp, r7
 80027de:	b002      	add	sp, #8
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d912      	bls.n	800281a <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f8:	881a      	ldrh	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002804:	1c9a      	adds	r2, r3, #2
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800280e:	b29b      	uxth	r3, r3
 8002810:	3b02      	subs	r3, #2
 8002812:	b29a      	uxth	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002818:	e012      	b.n	8002840 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	330c      	adds	r3, #12
 8002824:	7812      	ldrb	r2, [r2, #0]
 8002826:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d111      	bne.n	800286e <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2180      	movs	r1, #128	@ 0x80
 8002856:	438a      	bics	r2, r1
 8002858:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2246      	movs	r2, #70	@ 0x46
 800285e:	5a9b      	ldrh	r3, [r3, r2]
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	0018      	movs	r0, r3
 800286a:	f000 fa8d 	bl	8002d88 <SPI_CloseRxTx_ISR>
    }
  }
}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	b002      	add	sp, #8
 8002874:	bd80      	pop	{r7, pc}

08002876 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	b292      	uxth	r2, r2
 800288a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	1c9a      	adds	r2, r3, #2
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2246      	movs	r2, #70	@ 0x46
 800289a:	5a9b      	ldrh	r3, [r3, r2]
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b299      	uxth	r1, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2246      	movs	r2, #70	@ 0x46
 80028a6:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2246      	movs	r2, #70	@ 0x46
 80028ac:	5a9b      	ldrh	r3, [r3, r2]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d110      	bne.n	80028d6 <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2140      	movs	r1, #64	@ 0x40
 80028c0:	438a      	bics	r2, r1
 80028c2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d103      	bne.n	80028d6 <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 fa59 	bl	8002d88 <SPI_CloseRxTx_ISR>
    }
  }
}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	46bd      	mov	sp, r7
 80028da:	b002      	add	sp, #8
 80028dc:	bd80      	pop	{r7, pc}

080028de <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ea:	881a      	ldrh	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f6:	1c9a      	adds	r2, r3, #2
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d111      	bne.n	8002938 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2180      	movs	r1, #128	@ 0x80
 8002920:	438a      	bics	r2, r1
 8002922:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2246      	movs	r2, #70	@ 0x46
 8002928:	5a9b      	ldrh	r3, [r3, r2]
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d103      	bne.n	8002938 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	0018      	movs	r0, r3
 8002934:	f000 fa28 	bl	8002d88 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002938:	46c0      	nop			@ (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b002      	add	sp, #8
 800293e:	bd80      	pop	{r7, pc}

08002940 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	330c      	adds	r3, #12
 800294e:	001a      	movs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	7812      	ldrb	r2, [r2, #0]
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2246      	movs	r2, #70	@ 0x46
 8002968:	5a9b      	ldrh	r3, [r3, r2]
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b299      	uxth	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2246      	movs	r2, #70	@ 0x46
 8002974:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2246      	movs	r2, #70	@ 0x46
 800297a:	5a9b      	ldrh	r3, [r3, r2]
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d103      	bne.n	800298a <SPI_RxISR_8BIT+0x4a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0018      	movs	r0, r3
 8002986:	f000 fa45 	bl	8002e14 <SPI_CloseRx_ISR>
  }
}
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	46bd      	mov	sp, r7
 800298e:	b002      	add	sp, #8
 8002990:	bd80      	pop	{r7, pc}

08002992 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	b292      	uxth	r2, r2
 80029a6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	1c9a      	adds	r2, r3, #2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2246      	movs	r2, #70	@ 0x46
 80029b6:	5a9b      	ldrh	r3, [r3, r2]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b299      	uxth	r1, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2246      	movs	r2, #70	@ 0x46
 80029c2:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2246      	movs	r2, #70	@ 0x46
 80029c8:	5a9b      	ldrh	r3, [r3, r2]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d103      	bne.n	80029d8 <SPI_RxISR_16BIT+0x46>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 fa1e 	bl	8002e14 <SPI_CloseRx_ISR>
  }
}
 80029d8:	46c0      	nop			@ (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	b002      	add	sp, #8
 80029de:	bd80      	pop	{r7, pc}

080029e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	1dfb      	adds	r3, r7, #7
 80029ee:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029f0:	f7fe f930 	bl	8000c54 <HAL_GetTick>
 80029f4:	0002      	movs	r2, r0
 80029f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	18d3      	adds	r3, r2, r3
 80029fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a00:	f7fe f928 	bl	8000c54 <HAL_GetTick>
 8002a04:	0003      	movs	r3, r0
 8002a06:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a08:	4b3a      	ldr	r3, [pc, #232]	@ (8002af4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	015b      	lsls	r3, r3, #5
 8002a0e:	0d1b      	lsrs	r3, r3, #20
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	4353      	muls	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a16:	e058      	b.n	8002aca <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	d055      	beq.n	8002aca <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a1e:	f7fe f919 	bl	8000c54 <HAL_GetTick>
 8002a22:	0002      	movs	r2, r0
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d902      	bls.n	8002a34 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d142      	bne.n	8002aba <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	21e0      	movs	r1, #224	@ 0xe0
 8002a40:	438a      	bics	r2, r1
 8002a42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	2382      	movs	r3, #130	@ 0x82
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d113      	bne.n	8002a78 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	2380      	movs	r3, #128	@ 0x80
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d005      	beq.n	8002a68 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	2380      	movs	r3, #128	@ 0x80
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d107      	bne.n	8002a78 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2140      	movs	r1, #64	@ 0x40
 8002a74:	438a      	bics	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a7c:	2380      	movs	r3, #128	@ 0x80
 8002a7e:	019b      	lsls	r3, r3, #6
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d110      	bne.n	8002aa6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	491a      	ldr	r1, [pc, #104]	@ (8002af8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002a90:	400a      	ands	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2180      	movs	r1, #128	@ 0x80
 8002aa0:	0189      	lsls	r1, r1, #6
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	225d      	movs	r2, #93	@ 0x5d
 8002aaa:	2101      	movs	r1, #1
 8002aac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	225c      	movs	r2, #92	@ 0x5c
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e017      	b.n	8002aea <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	425a      	negs	r2, r3
 8002ada:	4153      	adcs	r3, r2
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	001a      	movs	r2, r3
 8002ae0:	1dfb      	adds	r3, r7, #7
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d197      	bne.n	8002a18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	0018      	movs	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b008      	add	sp, #32
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			@ (mov r8, r8)
 8002af4:	2000000c 	.word	0x2000000c
 8002af8:	ffffdfff 	.word	0xffffdfff

08002afc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	@ 0x28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002b0a:	2317      	movs	r3, #23
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002b12:	f7fe f89f 	bl	8000c54 <HAL_GetTick>
 8002b16:	0002      	movs	r2, r0
 8002b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	18d3      	adds	r3, r2, r3
 8002b20:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002b22:	f7fe f897 	bl	8000c54 <HAL_GetTick>
 8002b26:	0003      	movs	r3, r0
 8002b28:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	330c      	adds	r3, #12
 8002b30:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002b32:	4b41      	ldr	r3, [pc, #260]	@ (8002c38 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	0013      	movs	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	189b      	adds	r3, r3, r2
 8002b3c:	00da      	lsls	r2, r3, #3
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	0d1b      	lsrs	r3, r3, #20
 8002b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b44:	4353      	muls	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002b48:	e068      	b.n	8002c1c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	23c0      	movs	r3, #192	@ 0xc0
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d10a      	bne.n	8002b6a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d107      	bne.n	8002b6a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	2117      	movs	r1, #23
 8002b62:	187b      	adds	r3, r7, r1
 8002b64:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002b66:	187b      	adds	r3, r7, r1
 8002b68:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	d055      	beq.n	8002c1c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b70:	f7fe f870 	bl	8000c54 <HAL_GetTick>
 8002b74:	0002      	movs	r2, r0
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d902      	bls.n	8002b86 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d142      	bne.n	8002c0c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	21e0      	movs	r1, #224	@ 0xe0
 8002b92:	438a      	bics	r2, r1
 8002b94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	2382      	movs	r3, #130	@ 0x82
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d113      	bne.n	8002bca <SPI_WaitFifoStateUntilTimeout+0xce>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	2380      	movs	r3, #128	@ 0x80
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d005      	beq.n	8002bba <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	2380      	movs	r3, #128	@ 0x80
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d107      	bne.n	8002bca <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2140      	movs	r1, #64	@ 0x40
 8002bc6:	438a      	bics	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bce:	2380      	movs	r3, #128	@ 0x80
 8002bd0:	019b      	lsls	r3, r3, #6
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d110      	bne.n	8002bf8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4916      	ldr	r1, [pc, #88]	@ (8002c3c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002be2:	400a      	ands	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2180      	movs	r1, #128	@ 0x80
 8002bf2:	0189      	lsls	r1, r1, #6
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	225d      	movs	r2, #93	@ 0x5d
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	225c      	movs	r2, #92	@ 0x5c
 8002c04:	2100      	movs	r1, #0
 8002c06:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e010      	b.n	8002c2e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	4013      	ands	r3, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d18e      	bne.n	8002b4a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	0018      	movs	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b00a      	add	sp, #40	@ 0x28
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	2000000c 	.word	0x2000000c
 8002c3c:	ffffdfff 	.word	0xffffdfff

08002c40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	2382      	movs	r3, #130	@ 0x82
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d113      	bne.n	8002c80 <SPI_EndRxTransaction+0x40>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	2380      	movs	r3, #128	@ 0x80
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d005      	beq.n	8002c70 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	2380      	movs	r3, #128	@ 0x80
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d107      	bne.n	8002c80 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2140      	movs	r1, #64	@ 0x40
 8002c7c:	438a      	bics	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	0013      	movs	r3, r2
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2180      	movs	r1, #128	@ 0x80
 8002c8e:	f7ff fea7 	bl	80029e0 <SPI_WaitFlagStateUntilTimeout>
 8002c92:	1e03      	subs	r3, r0, #0
 8002c94:	d007      	beq.n	8002ca6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e026      	b.n	8002cf4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	2382      	movs	r3, #130	@ 0x82
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d11f      	bne.n	8002cf2 <SPI_EndRxTransaction+0xb2>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	2380      	movs	r3, #128	@ 0x80
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d005      	beq.n	8002cca <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	2380      	movs	r3, #128	@ 0x80
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d113      	bne.n	8002cf2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	23c0      	movs	r3, #192	@ 0xc0
 8002cce:	00d9      	lsls	r1, r3, #3
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	0013      	movs	r3, r2
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f7ff ff0f 	bl	8002afc <SPI_WaitFifoStateUntilTimeout>
 8002cde:	1e03      	subs	r3, r0, #0
 8002ce0:	d007      	beq.n	8002cf2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e000      	b.n	8002cf4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b004      	add	sp, #16
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	23c0      	movs	r3, #192	@ 0xc0
 8002d0c:	0159      	lsls	r1, r3, #5
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	0013      	movs	r3, r2
 8002d16:	2200      	movs	r2, #0
 8002d18:	f7ff fef0 	bl	8002afc <SPI_WaitFifoStateUntilTimeout>
 8002d1c:	1e03      	subs	r3, r0, #0
 8002d1e:	d007      	beq.n	8002d30 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d24:	2220      	movs	r2, #32
 8002d26:	431a      	orrs	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e027      	b.n	8002d80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	0013      	movs	r3, r2
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2180      	movs	r1, #128	@ 0x80
 8002d3e:	f7ff fe4f 	bl	80029e0 <SPI_WaitFlagStateUntilTimeout>
 8002d42:	1e03      	subs	r3, r0, #0
 8002d44:	d007      	beq.n	8002d56 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e014      	b.n	8002d80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	23c0      	movs	r3, #192	@ 0xc0
 8002d5a:	00d9      	lsls	r1, r3, #3
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	0013      	movs	r3, r2
 8002d64:	2200      	movs	r2, #0
 8002d66:	f7ff fec9 	bl	8002afc <SPI_WaitFifoStateUntilTimeout>
 8002d6a:	1e03      	subs	r3, r0, #0
 8002d6c:	d007      	beq.n	8002d7e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d72:	2220      	movs	r2, #32
 8002d74:	431a      	orrs	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e000      	b.n	8002d80 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	0018      	movs	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b004      	add	sp, #16
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d90:	f7fd ff60 	bl	8000c54 <HAL_GetTick>
 8002d94:	0003      	movs	r3, r0
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2120      	movs	r1, #32
 8002da4:	438a      	bics	r2, r1
 8002da6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2164      	movs	r1, #100	@ 0x64
 8002dae:	0018      	movs	r0, r3
 8002db0:	f7ff ffa4 	bl	8002cfc <SPI_EndRxTxTransaction>
 8002db4:	1e03      	subs	r3, r0, #0
 8002db6:	d005      	beq.n	8002dc4 <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d117      	bne.n	8002dfc <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	225d      	movs	r2, #93	@ 0x5d
 8002dd0:	5c9b      	ldrb	r3, [r3, r2]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d108      	bne.n	8002dea <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	225d      	movs	r2, #93	@ 0x5d
 8002ddc:	2101      	movs	r1, #1
 8002dde:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	0018      	movs	r0, r3
 8002de4:	f7fd fd52 	bl	800088c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002de8:	e010      	b.n	8002e0c <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	225d      	movs	r2, #93	@ 0x5d
 8002dee:	2101      	movs	r1, #1
 8002df0:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	0018      	movs	r0, r3
 8002df6:	f7ff fc6d 	bl	80026d4 <HAL_SPI_TxRxCpltCallback>
}
 8002dfa:	e007      	b.n	8002e0c <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	225d      	movs	r2, #93	@ 0x5d
 8002e00:	2101      	movs	r1, #1
 8002e02:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	0018      	movs	r0, r3
 8002e08:	f7ff fc6c 	bl	80026e4 <HAL_SPI_ErrorCallback>
}
 8002e0c:	46c0      	nop			@ (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b004      	add	sp, #16
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2160      	movs	r1, #96	@ 0x60
 8002e28:	438a      	bics	r2, r1
 8002e2a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002e2c:	f7fd ff12 	bl	8000c54 <HAL_GetTick>
 8002e30:	0002      	movs	r2, r0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2164      	movs	r1, #100	@ 0x64
 8002e36:	0018      	movs	r0, r3
 8002e38:	f7ff ff02 	bl	8002c40 <SPI_EndRxTransaction>
 8002e3c:	1e03      	subs	r3, r0, #0
 8002e3e:	d005      	beq.n	8002e4c <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e44:	2220      	movs	r2, #32
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	225d      	movs	r2, #93	@ 0x5d
 8002e50:	2101      	movs	r1, #1
 8002e52:	5499      	strb	r1, [r3, r2]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d104      	bne.n	8002e66 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f7fd fd14 	bl	800088c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002e64:	e003      	b.n	8002e6e <SPI_CloseRx_ISR+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f7ff fc3b 	bl	80026e4 <HAL_SPI_ErrorCallback>
}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b002      	add	sp, #8
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e046      	b.n	8002f18 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2288      	movs	r2, #136	@ 0x88
 8002e8e:	589b      	ldr	r3, [r3, r2]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d107      	bne.n	8002ea4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2284      	movs	r2, #132	@ 0x84
 8002e98:	2100      	movs	r1, #0
 8002e9a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f7fd fd92 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2288      	movs	r2, #136	@ 0x88
 8002ea8:	2124      	movs	r1, #36	@ 0x24
 8002eaa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	438a      	bics	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f000 fed4 	bl	8003c74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 fc12 	bl	80036f8 <UART_SetConfig>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e01c      	b.n	8002f18 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	490d      	ldr	r1, [pc, #52]	@ (8002f20 <HAL_UART_Init+0xa8>)
 8002eea:	400a      	ands	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	212a      	movs	r1, #42	@ 0x2a
 8002efa:	438a      	bics	r2, r1
 8002efc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2101      	movs	r1, #1
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f000 ff63 	bl	8003ddc <UART_CheckIdleState>
 8002f16:	0003      	movs	r3, r0
}
 8002f18:	0018      	movs	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	ffffb7ff 	.word	0xffffb7ff

08002f24 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08c      	sub	sp, #48	@ 0x30
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	1dbb      	adds	r3, r7, #6
 8002f30:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2288      	movs	r2, #136	@ 0x88
 8002f36:	589b      	ldr	r3, [r3, r2]
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d000      	beq.n	8002f3e <HAL_UART_Transmit_IT+0x1a>
 8002f3c:	e08d      	b.n	800305a <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_UART_Transmit_IT+0x28>
 8002f44:	1dbb      	adds	r3, r7, #6
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e085      	b.n	800305c <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	2380      	movs	r3, #128	@ 0x80
 8002f56:	015b      	lsls	r3, r3, #5
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d109      	bne.n	8002f70 <HAL_UART_Transmit_IT+0x4c>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2201      	movs	r2, #1
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d001      	beq.n	8002f70 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e075      	b.n	800305c <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1dba      	adds	r2, r7, #6
 8002f7a:	2154      	movs	r1, #84	@ 0x54
 8002f7c:	8812      	ldrh	r2, [r2, #0]
 8002f7e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1dba      	adds	r2, r7, #6
 8002f84:	2156      	movs	r1, #86	@ 0x56
 8002f86:	8812      	ldrh	r2, [r2, #0]
 8002f88:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2290      	movs	r2, #144	@ 0x90
 8002f94:	2100      	movs	r1, #0
 8002f96:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2288      	movs	r2, #136	@ 0x88
 8002f9c:	2121      	movs	r1, #33	@ 0x21
 8002f9e:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002fa4:	2380      	movs	r3, #128	@ 0x80
 8002fa6:	059b      	lsls	r3, r3, #22
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d12a      	bne.n	8003002 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	2380      	movs	r3, #128	@ 0x80
 8002fb2:	015b      	lsls	r3, r3, #5
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d107      	bne.n	8002fc8 <HAL_UART_Transmit_IT+0xa4>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d103      	bne.n	8002fc8 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4a28      	ldr	r2, [pc, #160]	@ (8003064 <HAL_UART_Transmit_IT+0x140>)
 8002fc4:	679a      	str	r2, [r3, #120]	@ 0x78
 8002fc6:	e002      	b.n	8002fce <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4a27      	ldr	r2, [pc, #156]	@ (8003068 <HAL_UART_Transmit_IT+0x144>)
 8002fcc:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fce:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd2:	61fb      	str	r3, [r7, #28]
  return(result);
 8002fd4:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fd8:	2301      	movs	r3, #1
 8002fda:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	f383 8810 	msr	PRIMASK, r3
}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2180      	movs	r1, #128	@ 0x80
 8002ff0:	0409      	lsls	r1, r1, #16
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]
 8002ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	f383 8810 	msr	PRIMASK, r3
}
 8003000:	e029      	b.n	8003056 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	2380      	movs	r3, #128	@ 0x80
 8003008:	015b      	lsls	r3, r3, #5
 800300a:	429a      	cmp	r2, r3
 800300c:	d107      	bne.n	800301e <HAL_UART_Transmit_IT+0xfa>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d103      	bne.n	800301e <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4a14      	ldr	r2, [pc, #80]	@ (800306c <HAL_UART_Transmit_IT+0x148>)
 800301a:	679a      	str	r2, [r3, #120]	@ 0x78
 800301c:	e002      	b.n	8003024 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4a13      	ldr	r2, [pc, #76]	@ (8003070 <HAL_UART_Transmit_IT+0x14c>)
 8003022:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003024:	f3ef 8310 	mrs	r3, PRIMASK
 8003028:	613b      	str	r3, [r7, #16]
  return(result);
 800302a:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800302c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800302e:	2301      	movs	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f383 8810 	msr	PRIMASK, r3
}
 8003038:	46c0      	nop			@ (mov r8, r8)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2180      	movs	r1, #128	@ 0x80
 8003046:	430a      	orrs	r2, r1
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	f383 8810 	msr	PRIMASK, r3
}
 8003054:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	e000      	b.n	800305c <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800305a:	2302      	movs	r3, #2
  }
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b00c      	add	sp, #48	@ 0x30
 8003062:	bd80      	pop	{r7, pc}
 8003064:	08004369 	.word	0x08004369
 8003068:	0800427d 	.word	0x0800427d
 800306c:	080041bf 	.word	0x080041bf
 8003070:	0800410b 	.word	0x0800410b

08003074 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003074:	b5b0      	push	{r4, r5, r7, lr}
 8003076:	b0aa      	sub	sp, #168	@ 0xa8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	22a4      	movs	r2, #164	@ 0xa4
 8003084:	18b9      	adds	r1, r7, r2
 8003086:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	20a0      	movs	r0, #160	@ 0xa0
 8003090:	1839      	adds	r1, r7, r0
 8003092:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	249c      	movs	r4, #156	@ 0x9c
 800309c:	1939      	adds	r1, r7, r4
 800309e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030a0:	0011      	movs	r1, r2
 80030a2:	18bb      	adds	r3, r7, r2
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4aa2      	ldr	r2, [pc, #648]	@ (8003330 <HAL_UART_IRQHandler+0x2bc>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	2298      	movs	r2, #152	@ 0x98
 80030ac:	18bd      	adds	r5, r7, r2
 80030ae:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80030b0:	18bb      	adds	r3, r7, r2
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d11a      	bne.n	80030ee <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80030b8:	187b      	adds	r3, r7, r1
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2220      	movs	r2, #32
 80030be:	4013      	ands	r3, r2
 80030c0:	d015      	beq.n	80030ee <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80030c2:	183b      	adds	r3, r7, r0
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2220      	movs	r2, #32
 80030c8:	4013      	ands	r3, r2
 80030ca:	d105      	bne.n	80030d8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80030cc:	193b      	adds	r3, r7, r4
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	2380      	movs	r3, #128	@ 0x80
 80030d2:	055b      	lsls	r3, r3, #21
 80030d4:	4013      	ands	r3, r2
 80030d6:	d00a      	beq.n	80030ee <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d100      	bne.n	80030e2 <HAL_UART_IRQHandler+0x6e>
 80030e0:	e2dc      	b.n	800369c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	0010      	movs	r0, r2
 80030ea:	4798      	blx	r3
      }
      return;
 80030ec:	e2d6      	b.n	800369c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030ee:	2398      	movs	r3, #152	@ 0x98
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d100      	bne.n	80030fa <HAL_UART_IRQHandler+0x86>
 80030f8:	e122      	b.n	8003340 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80030fa:	239c      	movs	r3, #156	@ 0x9c
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a8c      	ldr	r2, [pc, #560]	@ (8003334 <HAL_UART_IRQHandler+0x2c0>)
 8003102:	4013      	ands	r3, r2
 8003104:	d106      	bne.n	8003114 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003106:	23a0      	movs	r3, #160	@ 0xa0
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a8a      	ldr	r2, [pc, #552]	@ (8003338 <HAL_UART_IRQHandler+0x2c4>)
 800310e:	4013      	ands	r3, r2
 8003110:	d100      	bne.n	8003114 <HAL_UART_IRQHandler+0xa0>
 8003112:	e115      	b.n	8003340 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003114:	23a4      	movs	r3, #164	@ 0xa4
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2201      	movs	r2, #1
 800311c:	4013      	ands	r3, r2
 800311e:	d012      	beq.n	8003146 <HAL_UART_IRQHandler+0xd2>
 8003120:	23a0      	movs	r3, #160	@ 0xa0
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	2380      	movs	r3, #128	@ 0x80
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4013      	ands	r3, r2
 800312c:	d00b      	beq.n	8003146 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2201      	movs	r2, #1
 8003134:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2290      	movs	r2, #144	@ 0x90
 800313a:	589b      	ldr	r3, [r3, r2]
 800313c:	2201      	movs	r2, #1
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2190      	movs	r1, #144	@ 0x90
 8003144:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003146:	23a4      	movs	r3, #164	@ 0xa4
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2202      	movs	r2, #2
 800314e:	4013      	ands	r3, r2
 8003150:	d011      	beq.n	8003176 <HAL_UART_IRQHandler+0x102>
 8003152:	239c      	movs	r3, #156	@ 0x9c
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2201      	movs	r2, #1
 800315a:	4013      	ands	r3, r2
 800315c:	d00b      	beq.n	8003176 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2202      	movs	r2, #2
 8003164:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2290      	movs	r2, #144	@ 0x90
 800316a:	589b      	ldr	r3, [r3, r2]
 800316c:	2204      	movs	r2, #4
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2190      	movs	r1, #144	@ 0x90
 8003174:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003176:	23a4      	movs	r3, #164	@ 0xa4
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2204      	movs	r2, #4
 800317e:	4013      	ands	r3, r2
 8003180:	d011      	beq.n	80031a6 <HAL_UART_IRQHandler+0x132>
 8003182:	239c      	movs	r3, #156	@ 0x9c
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2201      	movs	r2, #1
 800318a:	4013      	ands	r3, r2
 800318c:	d00b      	beq.n	80031a6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2204      	movs	r2, #4
 8003194:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2290      	movs	r2, #144	@ 0x90
 800319a:	589b      	ldr	r3, [r3, r2]
 800319c:	2202      	movs	r2, #2
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2190      	movs	r1, #144	@ 0x90
 80031a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031a6:	23a4      	movs	r3, #164	@ 0xa4
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2208      	movs	r2, #8
 80031ae:	4013      	ands	r3, r2
 80031b0:	d017      	beq.n	80031e2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80031b2:	23a0      	movs	r3, #160	@ 0xa0
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2220      	movs	r2, #32
 80031ba:	4013      	ands	r3, r2
 80031bc:	d105      	bne.n	80031ca <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80031be:	239c      	movs	r3, #156	@ 0x9c
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a5b      	ldr	r2, [pc, #364]	@ (8003334 <HAL_UART_IRQHandler+0x2c0>)
 80031c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80031c8:	d00b      	beq.n	80031e2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2208      	movs	r2, #8
 80031d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2290      	movs	r2, #144	@ 0x90
 80031d6:	589b      	ldr	r3, [r3, r2]
 80031d8:	2208      	movs	r2, #8
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2190      	movs	r1, #144	@ 0x90
 80031e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031e2:	23a4      	movs	r3, #164	@ 0xa4
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	2380      	movs	r3, #128	@ 0x80
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	4013      	ands	r3, r2
 80031ee:	d013      	beq.n	8003218 <HAL_UART_IRQHandler+0x1a4>
 80031f0:	23a0      	movs	r3, #160	@ 0xa0
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	2380      	movs	r3, #128	@ 0x80
 80031f8:	04db      	lsls	r3, r3, #19
 80031fa:	4013      	ands	r3, r2
 80031fc:	d00c      	beq.n	8003218 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2280      	movs	r2, #128	@ 0x80
 8003204:	0112      	lsls	r2, r2, #4
 8003206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2290      	movs	r2, #144	@ 0x90
 800320c:	589b      	ldr	r3, [r3, r2]
 800320e:	2220      	movs	r2, #32
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2190      	movs	r1, #144	@ 0x90
 8003216:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2290      	movs	r2, #144	@ 0x90
 800321c:	589b      	ldr	r3, [r3, r2]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d100      	bne.n	8003224 <HAL_UART_IRQHandler+0x1b0>
 8003222:	e23d      	b.n	80036a0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003224:	23a4      	movs	r3, #164	@ 0xa4
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2220      	movs	r2, #32
 800322c:	4013      	ands	r3, r2
 800322e:	d015      	beq.n	800325c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003230:	23a0      	movs	r3, #160	@ 0xa0
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2220      	movs	r2, #32
 8003238:	4013      	ands	r3, r2
 800323a:	d106      	bne.n	800324a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800323c:	239c      	movs	r3, #156	@ 0x9c
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	2380      	movs	r3, #128	@ 0x80
 8003244:	055b      	lsls	r3, r3, #21
 8003246:	4013      	ands	r3, r2
 8003248:	d008      	beq.n	800325c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800324e:	2b00      	cmp	r3, #0
 8003250:	d004      	beq.n	800325c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	0010      	movs	r0, r2
 800325a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2290      	movs	r2, #144	@ 0x90
 8003260:	589b      	ldr	r3, [r3, r2]
 8003262:	2194      	movs	r1, #148	@ 0x94
 8003264:	187a      	adds	r2, r7, r1
 8003266:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2240      	movs	r2, #64	@ 0x40
 8003270:	4013      	ands	r3, r2
 8003272:	2b40      	cmp	r3, #64	@ 0x40
 8003274:	d004      	beq.n	8003280 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003276:	187b      	adds	r3, r7, r1
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2228      	movs	r2, #40	@ 0x28
 800327c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800327e:	d04c      	beq.n	800331a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	0018      	movs	r0, r3
 8003284:	f000 fec4 	bl	8004010 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2240      	movs	r2, #64	@ 0x40
 8003290:	4013      	ands	r3, r2
 8003292:	2b40      	cmp	r3, #64	@ 0x40
 8003294:	d13c      	bne.n	8003310 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003296:	f3ef 8310 	mrs	r3, PRIMASK
 800329a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800329c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800329e:	2090      	movs	r0, #144	@ 0x90
 80032a0:	183a      	adds	r2, r7, r0
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	2301      	movs	r3, #1
 80032a6:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032aa:	f383 8810 	msr	PRIMASK, r3
}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2140      	movs	r1, #64	@ 0x40
 80032bc:	438a      	bics	r2, r1
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	183b      	adds	r3, r7, r0
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032c8:	f383 8810 	msr	PRIMASK, r3
}
 80032cc:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2280      	movs	r2, #128	@ 0x80
 80032d2:	589b      	ldr	r3, [r3, r2]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d016      	beq.n	8003306 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2280      	movs	r2, #128	@ 0x80
 80032dc:	589b      	ldr	r3, [r3, r2]
 80032de:	4a17      	ldr	r2, [pc, #92]	@ (800333c <HAL_UART_IRQHandler+0x2c8>)
 80032e0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2280      	movs	r2, #128	@ 0x80
 80032e6:	589b      	ldr	r3, [r3, r2]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7fd fe13 	bl	8000f14 <HAL_DMA_Abort_IT>
 80032ee:	1e03      	subs	r3, r0, #0
 80032f0:	d01c      	beq.n	800332c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2280      	movs	r2, #128	@ 0x80
 80032f6:	589b      	ldr	r3, [r3, r2]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	2180      	movs	r1, #128	@ 0x80
 80032fe:	5852      	ldr	r2, [r2, r1]
 8003300:	0010      	movs	r0, r2
 8003302:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003304:	e012      	b.n	800332c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	0018      	movs	r0, r3
 800330a:	f000 f9e1 	bl	80036d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330e:	e00d      	b.n	800332c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	0018      	movs	r0, r3
 8003314:	f000 f9dc 	bl	80036d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003318:	e008      	b.n	800332c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	0018      	movs	r0, r3
 800331e:	f000 f9d7 	bl	80036d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2290      	movs	r2, #144	@ 0x90
 8003326:	2100      	movs	r1, #0
 8003328:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800332a:	e1b9      	b.n	80036a0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332c:	46c0      	nop			@ (mov r8, r8)
    return;
 800332e:	e1b7      	b.n	80036a0 <HAL_UART_IRQHandler+0x62c>
 8003330:	0000080f 	.word	0x0000080f
 8003334:	10000001 	.word	0x10000001
 8003338:	04000120 	.word	0x04000120
 800333c:	080040dd 	.word	0x080040dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003344:	2b01      	cmp	r3, #1
 8003346:	d000      	beq.n	800334a <HAL_UART_IRQHandler+0x2d6>
 8003348:	e13e      	b.n	80035c8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800334a:	23a4      	movs	r3, #164	@ 0xa4
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2210      	movs	r2, #16
 8003352:	4013      	ands	r3, r2
 8003354:	d100      	bne.n	8003358 <HAL_UART_IRQHandler+0x2e4>
 8003356:	e137      	b.n	80035c8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003358:	23a0      	movs	r3, #160	@ 0xa0
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2210      	movs	r2, #16
 8003360:	4013      	ands	r3, r2
 8003362:	d100      	bne.n	8003366 <HAL_UART_IRQHandler+0x2f2>
 8003364:	e130      	b.n	80035c8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2210      	movs	r2, #16
 800336c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2240      	movs	r2, #64	@ 0x40
 8003376:	4013      	ands	r3, r2
 8003378:	2b40      	cmp	r3, #64	@ 0x40
 800337a:	d000      	beq.n	800337e <HAL_UART_IRQHandler+0x30a>
 800337c:	e0a4      	b.n	80034c8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2280      	movs	r2, #128	@ 0x80
 8003382:	589b      	ldr	r3, [r3, r2]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	217e      	movs	r1, #126	@ 0x7e
 800338a:	187b      	adds	r3, r7, r1
 800338c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800338e:	187b      	adds	r3, r7, r1
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d100      	bne.n	8003398 <HAL_UART_IRQHandler+0x324>
 8003396:	e185      	b.n	80036a4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	225c      	movs	r2, #92	@ 0x5c
 800339c:	5a9b      	ldrh	r3, [r3, r2]
 800339e:	187a      	adds	r2, r7, r1
 80033a0:	8812      	ldrh	r2, [r2, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d300      	bcc.n	80033a8 <HAL_UART_IRQHandler+0x334>
 80033a6:	e17d      	b.n	80036a4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	187a      	adds	r2, r7, r1
 80033ac:	215e      	movs	r1, #94	@ 0x5e
 80033ae:	8812      	ldrh	r2, [r2, #0]
 80033b0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2280      	movs	r2, #128	@ 0x80
 80033b6:	589b      	ldr	r3, [r3, r2]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2220      	movs	r2, #32
 80033be:	4013      	ands	r3, r2
 80033c0:	d170      	bne.n	80034a4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c2:	f3ef 8310 	mrs	r3, PRIMASK
 80033c6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80033c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033cc:	2301      	movs	r3, #1
 80033ce:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033d2:	f383 8810 	msr	PRIMASK, r3
}
 80033d6:	46c0      	nop			@ (mov r8, r8)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	49b4      	ldr	r1, [pc, #720]	@ (80036b4 <HAL_UART_IRQHandler+0x640>)
 80033e4:	400a      	ands	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ee:	f383 8810 	msr	PRIMASK, r3
}
 80033f2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f4:	f3ef 8310 	mrs	r3, PRIMASK
 80033f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80033fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80033fe:	2301      	movs	r3, #1
 8003400:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003404:	f383 8810 	msr	PRIMASK, r3
}
 8003408:	46c0      	nop			@ (mov r8, r8)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2101      	movs	r1, #1
 8003416:	438a      	bics	r2, r1
 8003418:	609a      	str	r2, [r3, #8]
 800341a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800341c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003420:	f383 8810 	msr	PRIMASK, r3
}
 8003424:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003426:	f3ef 8310 	mrs	r3, PRIMASK
 800342a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800342c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800342e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003430:	2301      	movs	r3, #1
 8003432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003436:	f383 8810 	msr	PRIMASK, r3
}
 800343a:	46c0      	nop			@ (mov r8, r8)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2140      	movs	r1, #64	@ 0x40
 8003448:	438a      	bics	r2, r1
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800344e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003452:	f383 8810 	msr	PRIMASK, r3
}
 8003456:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	228c      	movs	r2, #140	@ 0x8c
 800345c:	2120      	movs	r1, #32
 800345e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003466:	f3ef 8310 	mrs	r3, PRIMASK
 800346a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800346c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003470:	2301      	movs	r3, #1
 8003472:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003474:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003476:	f383 8810 	msr	PRIMASK, r3
}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2110      	movs	r1, #16
 8003488:	438a      	bics	r2, r1
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800348e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003490:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003492:	f383 8810 	msr	PRIMASK, r3
}
 8003496:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2280      	movs	r2, #128	@ 0x80
 800349c:	589b      	ldr	r3, [r3, r2]
 800349e:	0018      	movs	r0, r3
 80034a0:	f7fd fcd6 	bl	8000e50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	225c      	movs	r2, #92	@ 0x5c
 80034ae:	5a9a      	ldrh	r2, [r3, r2]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	215e      	movs	r1, #94	@ 0x5e
 80034b4:	5a5b      	ldrh	r3, [r3, r1]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	0011      	movs	r1, r2
 80034c0:	0018      	movs	r0, r3
 80034c2:	f000 f90d 	bl	80036e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034c6:	e0ed      	b.n	80036a4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	225c      	movs	r2, #92	@ 0x5c
 80034cc:	5a99      	ldrh	r1, [r3, r2]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	225e      	movs	r2, #94	@ 0x5e
 80034d2:	5a9b      	ldrh	r3, [r3, r2]
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	208e      	movs	r0, #142	@ 0x8e
 80034d8:	183b      	adds	r3, r7, r0
 80034da:	1a8a      	subs	r2, r1, r2
 80034dc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	225e      	movs	r2, #94	@ 0x5e
 80034e2:	5a9b      	ldrh	r3, [r3, r2]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d100      	bne.n	80034ec <HAL_UART_IRQHandler+0x478>
 80034ea:	e0dd      	b.n	80036a8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80034ec:	183b      	adds	r3, r7, r0
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d100      	bne.n	80034f6 <HAL_UART_IRQHandler+0x482>
 80034f4:	e0d8      	b.n	80036a8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f6:	f3ef 8310 	mrs	r3, PRIMASK
 80034fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80034fc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034fe:	2488      	movs	r4, #136	@ 0x88
 8003500:	193a      	adds	r2, r7, r4
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	2301      	movs	r3, #1
 8003506:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f383 8810 	msr	PRIMASK, r3
}
 800350e:	46c0      	nop			@ (mov r8, r8)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4967      	ldr	r1, [pc, #412]	@ (80036b8 <HAL_UART_IRQHandler+0x644>)
 800351c:	400a      	ands	r2, r1
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	193b      	adds	r3, r7, r4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f383 8810 	msr	PRIMASK, r3
}
 800352c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800352e:	f3ef 8310 	mrs	r3, PRIMASK
 8003532:	61bb      	str	r3, [r7, #24]
  return(result);
 8003534:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003536:	2484      	movs	r4, #132	@ 0x84
 8003538:	193a      	adds	r2, r7, r4
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	2301      	movs	r3, #1
 800353e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f383 8810 	msr	PRIMASK, r3
}
 8003546:	46c0      	nop			@ (mov r8, r8)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	495a      	ldr	r1, [pc, #360]	@ (80036bc <HAL_UART_IRQHandler+0x648>)
 8003554:	400a      	ands	r2, r1
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	193b      	adds	r3, r7, r4
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	f383 8810 	msr	PRIMASK, r3
}
 8003564:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	228c      	movs	r2, #140	@ 0x8c
 800356a:	2120      	movs	r1, #32
 800356c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357a:	f3ef 8310 	mrs	r3, PRIMASK
 800357e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003582:	2480      	movs	r4, #128	@ 0x80
 8003584:	193a      	adds	r2, r7, r4
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	2301      	movs	r3, #1
 800358a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358e:	f383 8810 	msr	PRIMASK, r3
}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2110      	movs	r1, #16
 80035a0:	438a      	bics	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	193b      	adds	r3, r7, r4
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ac:	f383 8810 	msr	PRIMASK, r3
}
 80035b0:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2202      	movs	r2, #2
 80035b6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035b8:	183b      	adds	r3, r7, r0
 80035ba:	881a      	ldrh	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	0011      	movs	r1, r2
 80035c0:	0018      	movs	r0, r3
 80035c2:	f000 f88d 	bl	80036e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035c6:	e06f      	b.n	80036a8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035c8:	23a4      	movs	r3, #164	@ 0xa4
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	2380      	movs	r3, #128	@ 0x80
 80035d0:	035b      	lsls	r3, r3, #13
 80035d2:	4013      	ands	r3, r2
 80035d4:	d010      	beq.n	80035f8 <HAL_UART_IRQHandler+0x584>
 80035d6:	239c      	movs	r3, #156	@ 0x9c
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	2380      	movs	r3, #128	@ 0x80
 80035de:	03db      	lsls	r3, r3, #15
 80035e0:	4013      	ands	r3, r2
 80035e2:	d009      	beq.n	80035f8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2280      	movs	r2, #128	@ 0x80
 80035ea:	0352      	lsls	r2, r2, #13
 80035ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f000 ff5f 	bl	80044b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035f6:	e05a      	b.n	80036ae <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80035f8:	23a4      	movs	r3, #164	@ 0xa4
 80035fa:	18fb      	adds	r3, r7, r3
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2280      	movs	r2, #128	@ 0x80
 8003600:	4013      	ands	r3, r2
 8003602:	d016      	beq.n	8003632 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003604:	23a0      	movs	r3, #160	@ 0xa0
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2280      	movs	r2, #128	@ 0x80
 800360c:	4013      	ands	r3, r2
 800360e:	d106      	bne.n	800361e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003610:	239c      	movs	r3, #156	@ 0x9c
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	2380      	movs	r3, #128	@ 0x80
 8003618:	041b      	lsls	r3, r3, #16
 800361a:	4013      	ands	r3, r2
 800361c:	d009      	beq.n	8003632 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003622:	2b00      	cmp	r3, #0
 8003624:	d042      	beq.n	80036ac <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	0010      	movs	r0, r2
 800362e:	4798      	blx	r3
    }
    return;
 8003630:	e03c      	b.n	80036ac <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003632:	23a4      	movs	r3, #164	@ 0xa4
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2240      	movs	r2, #64	@ 0x40
 800363a:	4013      	ands	r3, r2
 800363c:	d00a      	beq.n	8003654 <HAL_UART_IRQHandler+0x5e0>
 800363e:	23a0      	movs	r3, #160	@ 0xa0
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2240      	movs	r2, #64	@ 0x40
 8003646:	4013      	ands	r3, r2
 8003648:	d004      	beq.n	8003654 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	0018      	movs	r0, r3
 800364e:	f000 ff05 	bl	800445c <UART_EndTransmit_IT>
    return;
 8003652:	e02c      	b.n	80036ae <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003654:	23a4      	movs	r3, #164	@ 0xa4
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	2380      	movs	r3, #128	@ 0x80
 800365c:	041b      	lsls	r3, r3, #16
 800365e:	4013      	ands	r3, r2
 8003660:	d00b      	beq.n	800367a <HAL_UART_IRQHandler+0x606>
 8003662:	23a0      	movs	r3, #160	@ 0xa0
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	2380      	movs	r3, #128	@ 0x80
 800366a:	05db      	lsls	r3, r3, #23
 800366c:	4013      	ands	r3, r2
 800366e:	d004      	beq.n	800367a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	0018      	movs	r0, r3
 8003674:	f000 ff2e 	bl	80044d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003678:	e019      	b.n	80036ae <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800367a:	23a4      	movs	r3, #164	@ 0xa4
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	2380      	movs	r3, #128	@ 0x80
 8003682:	045b      	lsls	r3, r3, #17
 8003684:	4013      	ands	r3, r2
 8003686:	d012      	beq.n	80036ae <HAL_UART_IRQHandler+0x63a>
 8003688:	23a0      	movs	r3, #160	@ 0xa0
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	da0d      	bge.n	80036ae <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	0018      	movs	r0, r3
 8003696:	f000 ff15 	bl	80044c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800369a:	e008      	b.n	80036ae <HAL_UART_IRQHandler+0x63a>
      return;
 800369c:	46c0      	nop			@ (mov r8, r8)
 800369e:	e006      	b.n	80036ae <HAL_UART_IRQHandler+0x63a>
    return;
 80036a0:	46c0      	nop			@ (mov r8, r8)
 80036a2:	e004      	b.n	80036ae <HAL_UART_IRQHandler+0x63a>
      return;
 80036a4:	46c0      	nop			@ (mov r8, r8)
 80036a6:	e002      	b.n	80036ae <HAL_UART_IRQHandler+0x63a>
      return;
 80036a8:	46c0      	nop			@ (mov r8, r8)
 80036aa:	e000      	b.n	80036ae <HAL_UART_IRQHandler+0x63a>
    return;
 80036ac:	46c0      	nop			@ (mov r8, r8)
  }
}
 80036ae:	46bd      	mov	sp, r7
 80036b0:	b02a      	add	sp, #168	@ 0xa8
 80036b2:	bdb0      	pop	{r4, r5, r7, pc}
 80036b4:	fffffeff 	.word	0xfffffeff
 80036b8:	fffffedf 	.word	0xfffffedf
 80036bc:	effffffe 	.word	0xeffffffe

080036c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036c8:	46c0      	nop			@ (mov r8, r8)
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b002      	add	sp, #8
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036d8:	46c0      	nop			@ (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b002      	add	sp, #8
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	000a      	movs	r2, r1
 80036ea:	1cbb      	adds	r3, r7, #2
 80036ec:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b002      	add	sp, #8
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f8:	b5b0      	push	{r4, r5, r7, lr}
 80036fa:	b090      	sub	sp, #64	@ 0x40
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003700:	231a      	movs	r3, #26
 8003702:	2220      	movs	r2, #32
 8003704:	189b      	adds	r3, r3, r2
 8003706:	19db      	adds	r3, r3, r7
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800370c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	431a      	orrs	r2, r3
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	431a      	orrs	r2, r3
 800371c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	4313      	orrs	r3, r2
 8003722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4aaf      	ldr	r2, [pc, #700]	@ (80039e8 <UART_SetConfig+0x2f0>)
 800372c:	4013      	ands	r3, r2
 800372e:	0019      	movs	r1, r3
 8003730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003736:	430b      	orrs	r3, r1
 8003738:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	4aaa      	ldr	r2, [pc, #680]	@ (80039ec <UART_SetConfig+0x2f4>)
 8003742:	4013      	ands	r3, r2
 8003744:	0018      	movs	r0, r3
 8003746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003748:	68d9      	ldr	r1, [r3, #12]
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	0003      	movs	r3, r0
 8003750:	430b      	orrs	r3, r1
 8003752:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4aa4      	ldr	r2, [pc, #656]	@ (80039f0 <UART_SetConfig+0x2f8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d004      	beq.n	800376e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800376a:	4313      	orrs	r3, r2
 800376c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a9f      	ldr	r2, [pc, #636]	@ (80039f4 <UART_SetConfig+0x2fc>)
 8003776:	4013      	ands	r3, r2
 8003778:	0019      	movs	r1, r3
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003780:	430b      	orrs	r3, r1
 8003782:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378a:	220f      	movs	r2, #15
 800378c:	4393      	bics	r3, r2
 800378e:	0018      	movs	r0, r3
 8003790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003792:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	0003      	movs	r3, r0
 800379a:	430b      	orrs	r3, r1
 800379c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800379e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a95      	ldr	r2, [pc, #596]	@ (80039f8 <UART_SetConfig+0x300>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d131      	bne.n	800380c <UART_SetConfig+0x114>
 80037a8:	4b94      	ldr	r3, [pc, #592]	@ (80039fc <UART_SetConfig+0x304>)
 80037aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ac:	2203      	movs	r2, #3
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d01d      	beq.n	80037f0 <UART_SetConfig+0xf8>
 80037b4:	d823      	bhi.n	80037fe <UART_SetConfig+0x106>
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d00c      	beq.n	80037d4 <UART_SetConfig+0xdc>
 80037ba:	d820      	bhi.n	80037fe <UART_SetConfig+0x106>
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <UART_SetConfig+0xce>
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d00e      	beq.n	80037e2 <UART_SetConfig+0xea>
 80037c4:	e01b      	b.n	80037fe <UART_SetConfig+0x106>
 80037c6:	231b      	movs	r3, #27
 80037c8:	2220      	movs	r2, #32
 80037ca:	189b      	adds	r3, r3, r2
 80037cc:	19db      	adds	r3, r3, r7
 80037ce:	2200      	movs	r2, #0
 80037d0:	701a      	strb	r2, [r3, #0]
 80037d2:	e0b4      	b.n	800393e <UART_SetConfig+0x246>
 80037d4:	231b      	movs	r3, #27
 80037d6:	2220      	movs	r2, #32
 80037d8:	189b      	adds	r3, r3, r2
 80037da:	19db      	adds	r3, r3, r7
 80037dc:	2202      	movs	r2, #2
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	e0ad      	b.n	800393e <UART_SetConfig+0x246>
 80037e2:	231b      	movs	r3, #27
 80037e4:	2220      	movs	r2, #32
 80037e6:	189b      	adds	r3, r3, r2
 80037e8:	19db      	adds	r3, r3, r7
 80037ea:	2204      	movs	r2, #4
 80037ec:	701a      	strb	r2, [r3, #0]
 80037ee:	e0a6      	b.n	800393e <UART_SetConfig+0x246>
 80037f0:	231b      	movs	r3, #27
 80037f2:	2220      	movs	r2, #32
 80037f4:	189b      	adds	r3, r3, r2
 80037f6:	19db      	adds	r3, r3, r7
 80037f8:	2208      	movs	r2, #8
 80037fa:	701a      	strb	r2, [r3, #0]
 80037fc:	e09f      	b.n	800393e <UART_SetConfig+0x246>
 80037fe:	231b      	movs	r3, #27
 8003800:	2220      	movs	r2, #32
 8003802:	189b      	adds	r3, r3, r2
 8003804:	19db      	adds	r3, r3, r7
 8003806:	2210      	movs	r2, #16
 8003808:	701a      	strb	r2, [r3, #0]
 800380a:	e098      	b.n	800393e <UART_SetConfig+0x246>
 800380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a7b      	ldr	r2, [pc, #492]	@ (8003a00 <UART_SetConfig+0x308>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d131      	bne.n	800387a <UART_SetConfig+0x182>
 8003816:	4b79      	ldr	r3, [pc, #484]	@ (80039fc <UART_SetConfig+0x304>)
 8003818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381a:	220c      	movs	r2, #12
 800381c:	4013      	ands	r3, r2
 800381e:	2b0c      	cmp	r3, #12
 8003820:	d01d      	beq.n	800385e <UART_SetConfig+0x166>
 8003822:	d823      	bhi.n	800386c <UART_SetConfig+0x174>
 8003824:	2b08      	cmp	r3, #8
 8003826:	d00c      	beq.n	8003842 <UART_SetConfig+0x14a>
 8003828:	d820      	bhi.n	800386c <UART_SetConfig+0x174>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <UART_SetConfig+0x13c>
 800382e:	2b04      	cmp	r3, #4
 8003830:	d00e      	beq.n	8003850 <UART_SetConfig+0x158>
 8003832:	e01b      	b.n	800386c <UART_SetConfig+0x174>
 8003834:	231b      	movs	r3, #27
 8003836:	2220      	movs	r2, #32
 8003838:	189b      	adds	r3, r3, r2
 800383a:	19db      	adds	r3, r3, r7
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
 8003840:	e07d      	b.n	800393e <UART_SetConfig+0x246>
 8003842:	231b      	movs	r3, #27
 8003844:	2220      	movs	r2, #32
 8003846:	189b      	adds	r3, r3, r2
 8003848:	19db      	adds	r3, r3, r7
 800384a:	2202      	movs	r2, #2
 800384c:	701a      	strb	r2, [r3, #0]
 800384e:	e076      	b.n	800393e <UART_SetConfig+0x246>
 8003850:	231b      	movs	r3, #27
 8003852:	2220      	movs	r2, #32
 8003854:	189b      	adds	r3, r3, r2
 8003856:	19db      	adds	r3, r3, r7
 8003858:	2204      	movs	r2, #4
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	e06f      	b.n	800393e <UART_SetConfig+0x246>
 800385e:	231b      	movs	r3, #27
 8003860:	2220      	movs	r2, #32
 8003862:	189b      	adds	r3, r3, r2
 8003864:	19db      	adds	r3, r3, r7
 8003866:	2208      	movs	r2, #8
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	e068      	b.n	800393e <UART_SetConfig+0x246>
 800386c:	231b      	movs	r3, #27
 800386e:	2220      	movs	r2, #32
 8003870:	189b      	adds	r3, r3, r2
 8003872:	19db      	adds	r3, r3, r7
 8003874:	2210      	movs	r2, #16
 8003876:	701a      	strb	r2, [r3, #0]
 8003878:	e061      	b.n	800393e <UART_SetConfig+0x246>
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a61      	ldr	r2, [pc, #388]	@ (8003a04 <UART_SetConfig+0x30c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d106      	bne.n	8003892 <UART_SetConfig+0x19a>
 8003884:	231b      	movs	r3, #27
 8003886:	2220      	movs	r2, #32
 8003888:	189b      	adds	r3, r3, r2
 800388a:	19db      	adds	r3, r3, r7
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]
 8003890:	e055      	b.n	800393e <UART_SetConfig+0x246>
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a5c      	ldr	r2, [pc, #368]	@ (8003a08 <UART_SetConfig+0x310>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d106      	bne.n	80038aa <UART_SetConfig+0x1b2>
 800389c:	231b      	movs	r3, #27
 800389e:	2220      	movs	r2, #32
 80038a0:	189b      	adds	r3, r3, r2
 80038a2:	19db      	adds	r3, r3, r7
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
 80038a8:	e049      	b.n	800393e <UART_SetConfig+0x246>
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a50      	ldr	r2, [pc, #320]	@ (80039f0 <UART_SetConfig+0x2f8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d13e      	bne.n	8003932 <UART_SetConfig+0x23a>
 80038b4:	4b51      	ldr	r3, [pc, #324]	@ (80039fc <UART_SetConfig+0x304>)
 80038b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038b8:	23c0      	movs	r3, #192	@ 0xc0
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	4013      	ands	r3, r2
 80038be:	22c0      	movs	r2, #192	@ 0xc0
 80038c0:	0112      	lsls	r2, r2, #4
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d027      	beq.n	8003916 <UART_SetConfig+0x21e>
 80038c6:	22c0      	movs	r2, #192	@ 0xc0
 80038c8:	0112      	lsls	r2, r2, #4
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d82a      	bhi.n	8003924 <UART_SetConfig+0x22c>
 80038ce:	2280      	movs	r2, #128	@ 0x80
 80038d0:	0112      	lsls	r2, r2, #4
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d011      	beq.n	80038fa <UART_SetConfig+0x202>
 80038d6:	2280      	movs	r2, #128	@ 0x80
 80038d8:	0112      	lsls	r2, r2, #4
 80038da:	4293      	cmp	r3, r2
 80038dc:	d822      	bhi.n	8003924 <UART_SetConfig+0x22c>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d004      	beq.n	80038ec <UART_SetConfig+0x1f4>
 80038e2:	2280      	movs	r2, #128	@ 0x80
 80038e4:	00d2      	lsls	r2, r2, #3
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00e      	beq.n	8003908 <UART_SetConfig+0x210>
 80038ea:	e01b      	b.n	8003924 <UART_SetConfig+0x22c>
 80038ec:	231b      	movs	r3, #27
 80038ee:	2220      	movs	r2, #32
 80038f0:	189b      	adds	r3, r3, r2
 80038f2:	19db      	adds	r3, r3, r7
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
 80038f8:	e021      	b.n	800393e <UART_SetConfig+0x246>
 80038fa:	231b      	movs	r3, #27
 80038fc:	2220      	movs	r2, #32
 80038fe:	189b      	adds	r3, r3, r2
 8003900:	19db      	adds	r3, r3, r7
 8003902:	2202      	movs	r2, #2
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	e01a      	b.n	800393e <UART_SetConfig+0x246>
 8003908:	231b      	movs	r3, #27
 800390a:	2220      	movs	r2, #32
 800390c:	189b      	adds	r3, r3, r2
 800390e:	19db      	adds	r3, r3, r7
 8003910:	2204      	movs	r2, #4
 8003912:	701a      	strb	r2, [r3, #0]
 8003914:	e013      	b.n	800393e <UART_SetConfig+0x246>
 8003916:	231b      	movs	r3, #27
 8003918:	2220      	movs	r2, #32
 800391a:	189b      	adds	r3, r3, r2
 800391c:	19db      	adds	r3, r3, r7
 800391e:	2208      	movs	r2, #8
 8003920:	701a      	strb	r2, [r3, #0]
 8003922:	e00c      	b.n	800393e <UART_SetConfig+0x246>
 8003924:	231b      	movs	r3, #27
 8003926:	2220      	movs	r2, #32
 8003928:	189b      	adds	r3, r3, r2
 800392a:	19db      	adds	r3, r3, r7
 800392c:	2210      	movs	r2, #16
 800392e:	701a      	strb	r2, [r3, #0]
 8003930:	e005      	b.n	800393e <UART_SetConfig+0x246>
 8003932:	231b      	movs	r3, #27
 8003934:	2220      	movs	r2, #32
 8003936:	189b      	adds	r3, r3, r2
 8003938:	19db      	adds	r3, r3, r7
 800393a:	2210      	movs	r2, #16
 800393c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a2b      	ldr	r2, [pc, #172]	@ (80039f0 <UART_SetConfig+0x2f8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d000      	beq.n	800394a <UART_SetConfig+0x252>
 8003948:	e0a9      	b.n	8003a9e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800394a:	231b      	movs	r3, #27
 800394c:	2220      	movs	r2, #32
 800394e:	189b      	adds	r3, r3, r2
 8003950:	19db      	adds	r3, r3, r7
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b08      	cmp	r3, #8
 8003956:	d015      	beq.n	8003984 <UART_SetConfig+0x28c>
 8003958:	dc18      	bgt.n	800398c <UART_SetConfig+0x294>
 800395a:	2b04      	cmp	r3, #4
 800395c:	d00d      	beq.n	800397a <UART_SetConfig+0x282>
 800395e:	dc15      	bgt.n	800398c <UART_SetConfig+0x294>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <UART_SetConfig+0x272>
 8003964:	2b02      	cmp	r3, #2
 8003966:	d005      	beq.n	8003974 <UART_SetConfig+0x27c>
 8003968:	e010      	b.n	800398c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800396a:	f7fe f9b9 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 800396e:	0003      	movs	r3, r0
 8003970:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003972:	e014      	b.n	800399e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003974:	4b25      	ldr	r3, [pc, #148]	@ (8003a0c <UART_SetConfig+0x314>)
 8003976:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003978:	e011      	b.n	800399e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397a:	f7fe f925 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 800397e:	0003      	movs	r3, r0
 8003980:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003982:	e00c      	b.n	800399e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003984:	2380      	movs	r3, #128	@ 0x80
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800398a:	e008      	b.n	800399e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003990:	231a      	movs	r3, #26
 8003992:	2220      	movs	r2, #32
 8003994:	189b      	adds	r3, r3, r2
 8003996:	19db      	adds	r3, r3, r7
 8003998:	2201      	movs	r2, #1
 800399a:	701a      	strb	r2, [r3, #0]
        break;
 800399c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800399e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d100      	bne.n	80039a6 <UART_SetConfig+0x2ae>
 80039a4:	e14b      	b.n	8003c3e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039aa:	4b19      	ldr	r3, [pc, #100]	@ (8003a10 <UART_SetConfig+0x318>)
 80039ac:	0052      	lsls	r2, r2, #1
 80039ae:	5ad3      	ldrh	r3, [r2, r3]
 80039b0:	0019      	movs	r1, r3
 80039b2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80039b4:	f7fc fba6 	bl	8000104 <__udivsi3>
 80039b8:	0003      	movs	r3, r0
 80039ba:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	0013      	movs	r3, r2
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	189b      	adds	r3, r3, r2
 80039c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d305      	bcc.n	80039d8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d91d      	bls.n	8003a14 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80039d8:	231a      	movs	r3, #26
 80039da:	2220      	movs	r2, #32
 80039dc:	189b      	adds	r3, r3, r2
 80039de:	19db      	adds	r3, r3, r7
 80039e0:	2201      	movs	r2, #1
 80039e2:	701a      	strb	r2, [r3, #0]
 80039e4:	e12b      	b.n	8003c3e <UART_SetConfig+0x546>
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	cfff69f3 	.word	0xcfff69f3
 80039ec:	ffffcfff 	.word	0xffffcfff
 80039f0:	40008000 	.word	0x40008000
 80039f4:	11fff4ff 	.word	0x11fff4ff
 80039f8:	40013800 	.word	0x40013800
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40004400 	.word	0x40004400
 8003a04:	40004800 	.word	0x40004800
 8003a08:	40004c00 	.word	0x40004c00
 8003a0c:	00f42400 	.word	0x00f42400
 8003a10:	080047e8 	.word	0x080047e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a20:	4b92      	ldr	r3, [pc, #584]	@ (8003c6c <UART_SetConfig+0x574>)
 8003a22:	0052      	lsls	r2, r2, #1
 8003a24:	5ad3      	ldrh	r3, [r2, r3]
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	69b8      	ldr	r0, [r7, #24]
 8003a32:	69f9      	ldr	r1, [r7, #28]
 8003a34:	f7fc fcdc 	bl	80003f0 <__aeabi_uldivmod>
 8003a38:	0002      	movs	r2, r0
 8003a3a:	000b      	movs	r3, r1
 8003a3c:	0e11      	lsrs	r1, r2, #24
 8003a3e:	021d      	lsls	r5, r3, #8
 8003a40:	430d      	orrs	r5, r1
 8003a42:	0214      	lsls	r4, r2, #8
 8003a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	085b      	lsrs	r3, r3, #1
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68b8      	ldr	r0, [r7, #8]
 8003a52:	68f9      	ldr	r1, [r7, #12]
 8003a54:	1900      	adds	r0, r0, r4
 8003a56:	4169      	adcs	r1, r5
 8003a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f7fc fcc3 	bl	80003f0 <__aeabi_uldivmod>
 8003a6a:	0002      	movs	r2, r0
 8003a6c:	000b      	movs	r3, r1
 8003a6e:	0013      	movs	r3, r2
 8003a70:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a74:	23c0      	movs	r3, #192	@ 0xc0
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d309      	bcc.n	8003a90 <UART_SetConfig+0x398>
 8003a7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a7e:	2380      	movs	r3, #128	@ 0x80
 8003a80:	035b      	lsls	r3, r3, #13
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d204      	bcs.n	8003a90 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	e0d6      	b.n	8003c3e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003a90:	231a      	movs	r3, #26
 8003a92:	2220      	movs	r2, #32
 8003a94:	189b      	adds	r3, r3, r2
 8003a96:	19db      	adds	r3, r3, r7
 8003a98:	2201      	movs	r2, #1
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	e0cf      	b.n	8003c3e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa0:	69da      	ldr	r2, [r3, #28]
 8003aa2:	2380      	movs	r3, #128	@ 0x80
 8003aa4:	021b      	lsls	r3, r3, #8
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d000      	beq.n	8003aac <UART_SetConfig+0x3b4>
 8003aaa:	e070      	b.n	8003b8e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003aac:	231b      	movs	r3, #27
 8003aae:	2220      	movs	r2, #32
 8003ab0:	189b      	adds	r3, r3, r2
 8003ab2:	19db      	adds	r3, r3, r7
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d015      	beq.n	8003ae6 <UART_SetConfig+0x3ee>
 8003aba:	dc18      	bgt.n	8003aee <UART_SetConfig+0x3f6>
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d00d      	beq.n	8003adc <UART_SetConfig+0x3e4>
 8003ac0:	dc15      	bgt.n	8003aee <UART_SetConfig+0x3f6>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <UART_SetConfig+0x3d4>
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d005      	beq.n	8003ad6 <UART_SetConfig+0x3de>
 8003aca:	e010      	b.n	8003aee <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003acc:	f7fe f908 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ad4:	e014      	b.n	8003b00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad6:	4b66      	ldr	r3, [pc, #408]	@ (8003c70 <UART_SetConfig+0x578>)
 8003ad8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ada:	e011      	b.n	8003b00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003adc:	f7fe f874 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ae4:	e00c      	b.n	8003b00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ae6:	2380      	movs	r3, #128	@ 0x80
 8003ae8:	021b      	lsls	r3, r3, #8
 8003aea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003aec:	e008      	b.n	8003b00 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003af2:	231a      	movs	r3, #26
 8003af4:	2220      	movs	r2, #32
 8003af6:	189b      	adds	r3, r3, r2
 8003af8:	19db      	adds	r3, r3, r7
 8003afa:	2201      	movs	r2, #1
 8003afc:	701a      	strb	r2, [r3, #0]
        break;
 8003afe:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d100      	bne.n	8003b08 <UART_SetConfig+0x410>
 8003b06:	e09a      	b.n	8003c3e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b0c:	4b57      	ldr	r3, [pc, #348]	@ (8003c6c <UART_SetConfig+0x574>)
 8003b0e:	0052      	lsls	r2, r2, #1
 8003b10:	5ad3      	ldrh	r3, [r2, r3]
 8003b12:	0019      	movs	r1, r3
 8003b14:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003b16:	f7fc faf5 	bl	8000104 <__udivsi3>
 8003b1a:	0003      	movs	r3, r0
 8003b1c:	005a      	lsls	r2, r3, #1
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	085b      	lsrs	r3, r3, #1
 8003b24:	18d2      	adds	r2, r2, r3
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	0010      	movs	r0, r2
 8003b2e:	f7fc fae9 	bl	8000104 <__udivsi3>
 8003b32:	0003      	movs	r3, r0
 8003b34:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b38:	2b0f      	cmp	r3, #15
 8003b3a:	d921      	bls.n	8003b80 <UART_SetConfig+0x488>
 8003b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b3e:	2380      	movs	r3, #128	@ 0x80
 8003b40:	025b      	lsls	r3, r3, #9
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d21c      	bcs.n	8003b80 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	200e      	movs	r0, #14
 8003b4c:	2420      	movs	r4, #32
 8003b4e:	1903      	adds	r3, r0, r4
 8003b50:	19db      	adds	r3, r3, r7
 8003b52:	210f      	movs	r1, #15
 8003b54:	438a      	bics	r2, r1
 8003b56:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2207      	movs	r2, #7
 8003b60:	4013      	ands	r3, r2
 8003b62:	b299      	uxth	r1, r3
 8003b64:	1903      	adds	r3, r0, r4
 8003b66:	19db      	adds	r3, r3, r7
 8003b68:	1902      	adds	r2, r0, r4
 8003b6a:	19d2      	adds	r2, r2, r7
 8003b6c:	8812      	ldrh	r2, [r2, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	1902      	adds	r2, r0, r4
 8003b78:	19d2      	adds	r2, r2, r7
 8003b7a:	8812      	ldrh	r2, [r2, #0]
 8003b7c:	60da      	str	r2, [r3, #12]
 8003b7e:	e05e      	b.n	8003c3e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003b80:	231a      	movs	r3, #26
 8003b82:	2220      	movs	r2, #32
 8003b84:	189b      	adds	r3, r3, r2
 8003b86:	19db      	adds	r3, r3, r7
 8003b88:	2201      	movs	r2, #1
 8003b8a:	701a      	strb	r2, [r3, #0]
 8003b8c:	e057      	b.n	8003c3e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b8e:	231b      	movs	r3, #27
 8003b90:	2220      	movs	r2, #32
 8003b92:	189b      	adds	r3, r3, r2
 8003b94:	19db      	adds	r3, r3, r7
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d015      	beq.n	8003bc8 <UART_SetConfig+0x4d0>
 8003b9c:	dc18      	bgt.n	8003bd0 <UART_SetConfig+0x4d8>
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d00d      	beq.n	8003bbe <UART_SetConfig+0x4c6>
 8003ba2:	dc15      	bgt.n	8003bd0 <UART_SetConfig+0x4d8>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <UART_SetConfig+0x4b6>
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d005      	beq.n	8003bb8 <UART_SetConfig+0x4c0>
 8003bac:	e010      	b.n	8003bd0 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bae:	f7fe f897 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003bb6:	e014      	b.n	8003be2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8003c70 <UART_SetConfig+0x578>)
 8003bba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003bbc:	e011      	b.n	8003be2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bbe:	f7fe f803 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8003bc2:	0003      	movs	r3, r0
 8003bc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003bc6:	e00c      	b.n	8003be2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc8:	2380      	movs	r3, #128	@ 0x80
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003bce:	e008      	b.n	8003be2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003bd4:	231a      	movs	r3, #26
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	189b      	adds	r3, r3, r2
 8003bda:	19db      	adds	r3, r3, r7
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]
        break;
 8003be0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d02a      	beq.n	8003c3e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bec:	4b1f      	ldr	r3, [pc, #124]	@ (8003c6c <UART_SetConfig+0x574>)
 8003bee:	0052      	lsls	r2, r2, #1
 8003bf0:	5ad3      	ldrh	r3, [r2, r3]
 8003bf2:	0019      	movs	r1, r3
 8003bf4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003bf6:	f7fc fa85 	bl	8000104 <__udivsi3>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	001a      	movs	r2, r3
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	18d2      	adds	r2, r2, r3
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	0010      	movs	r0, r2
 8003c0e:	f7fc fa79 	bl	8000104 <__udivsi3>
 8003c12:	0003      	movs	r3, r0
 8003c14:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c18:	2b0f      	cmp	r3, #15
 8003c1a:	d90a      	bls.n	8003c32 <UART_SetConfig+0x53a>
 8003c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c1e:	2380      	movs	r3, #128	@ 0x80
 8003c20:	025b      	lsls	r3, r3, #9
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d205      	bcs.n	8003c32 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60da      	str	r2, [r3, #12]
 8003c30:	e005      	b.n	8003c3e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003c32:	231a      	movs	r3, #26
 8003c34:	2220      	movs	r2, #32
 8003c36:	189b      	adds	r3, r3, r2
 8003c38:	19db      	adds	r3, r3, r7
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	226a      	movs	r2, #106	@ 0x6a
 8003c42:	2101      	movs	r1, #1
 8003c44:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c48:	2268      	movs	r2, #104	@ 0x68
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	2200      	movs	r2, #0
 8003c52:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	2200      	movs	r2, #0
 8003c58:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003c5a:	231a      	movs	r3, #26
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	189b      	adds	r3, r3, r2
 8003c60:	19db      	adds	r3, r3, r7
 8003c62:	781b      	ldrb	r3, [r3, #0]
}
 8003c64:	0018      	movs	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b010      	add	sp, #64	@ 0x40
 8003c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c6c:	080047e8 	.word	0x080047e8
 8003c70:	00f42400 	.word	0x00f42400

08003c74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c80:	2208      	movs	r2, #8
 8003c82:	4013      	ands	r3, r2
 8003c84:	d00b      	beq.n	8003c9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4a4a      	ldr	r2, [pc, #296]	@ (8003db8 <UART_AdvFeatureConfig+0x144>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	0019      	movs	r1, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d00b      	beq.n	8003cc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	4a43      	ldr	r2, [pc, #268]	@ (8003dbc <UART_AdvFeatureConfig+0x148>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	0019      	movs	r1, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d00b      	beq.n	8003ce2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4a3b      	ldr	r2, [pc, #236]	@ (8003dc0 <UART_AdvFeatureConfig+0x14c>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	0019      	movs	r1, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d00b      	beq.n	8003d04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	4a34      	ldr	r2, [pc, #208]	@ (8003dc4 <UART_AdvFeatureConfig+0x150>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d08:	2210      	movs	r2, #16
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d00b      	beq.n	8003d26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	4a2c      	ldr	r2, [pc, #176]	@ (8003dc8 <UART_AdvFeatureConfig+0x154>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	0019      	movs	r1, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d00b      	beq.n	8003d48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	4a25      	ldr	r2, [pc, #148]	@ (8003dcc <UART_AdvFeatureConfig+0x158>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4c:	2240      	movs	r2, #64	@ 0x40
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d01d      	beq.n	8003d8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd0 <UART_AdvFeatureConfig+0x15c>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	0019      	movs	r1, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d6e:	2380      	movs	r3, #128	@ 0x80
 8003d70:	035b      	lsls	r3, r3, #13
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d10b      	bne.n	8003d8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	4a15      	ldr	r2, [pc, #84]	@ (8003dd4 <UART_AdvFeatureConfig+0x160>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	0019      	movs	r1, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d92:	2280      	movs	r2, #128	@ 0x80
 8003d94:	4013      	ands	r3, r2
 8003d96:	d00b      	beq.n	8003db0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8003dd8 <UART_AdvFeatureConfig+0x164>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	0019      	movs	r1, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	605a      	str	r2, [r3, #4]
  }
}
 8003db0:	46c0      	nop			@ (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b002      	add	sp, #8
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	ffff7fff 	.word	0xffff7fff
 8003dbc:	fffdffff 	.word	0xfffdffff
 8003dc0:	fffeffff 	.word	0xfffeffff
 8003dc4:	fffbffff 	.word	0xfffbffff
 8003dc8:	ffffefff 	.word	0xffffefff
 8003dcc:	ffffdfff 	.word	0xffffdfff
 8003dd0:	ffefffff 	.word	0xffefffff
 8003dd4:	ff9fffff 	.word	0xff9fffff
 8003dd8:	fff7ffff 	.word	0xfff7ffff

08003ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b092      	sub	sp, #72	@ 0x48
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2290      	movs	r2, #144	@ 0x90
 8003de8:	2100      	movs	r1, #0
 8003dea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dec:	f7fc ff32 	bl	8000c54 <HAL_GetTick>
 8003df0:	0003      	movs	r3, r0
 8003df2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2208      	movs	r2, #8
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d12d      	bne.n	8003e5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e04:	2280      	movs	r2, #128	@ 0x80
 8003e06:	0391      	lsls	r1, r2, #14
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	4a47      	ldr	r2, [pc, #284]	@ (8003f28 <UART_CheckIdleState+0x14c>)
 8003e0c:	9200      	str	r2, [sp, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f000 f88e 	bl	8003f30 <UART_WaitOnFlagUntilTimeout>
 8003e14:	1e03      	subs	r3, r0, #0
 8003e16:	d022      	beq.n	8003e5e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e18:	f3ef 8310 	mrs	r3, PRIMASK
 8003e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003e20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e22:	2301      	movs	r3, #1
 8003e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e28:	f383 8810 	msr	PRIMASK, r3
}
 8003e2c:	46c0      	nop			@ (mov r8, r8)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2180      	movs	r1, #128	@ 0x80
 8003e3a:	438a      	bics	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e44:	f383 8810 	msr	PRIMASK, r3
}
 8003e48:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2288      	movs	r2, #136	@ 0x88
 8003e4e:	2120      	movs	r1, #32
 8003e50:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2284      	movs	r2, #132	@ 0x84
 8003e56:	2100      	movs	r1, #0
 8003e58:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e060      	b.n	8003f20 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2204      	movs	r2, #4
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d146      	bne.n	8003efa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e6e:	2280      	movs	r2, #128	@ 0x80
 8003e70:	03d1      	lsls	r1, r2, #15
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	4a2c      	ldr	r2, [pc, #176]	@ (8003f28 <UART_CheckIdleState+0x14c>)
 8003e76:	9200      	str	r2, [sp, #0]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f000 f859 	bl	8003f30 <UART_WaitOnFlagUntilTimeout>
 8003e7e:	1e03      	subs	r3, r0, #0
 8003e80:	d03b      	beq.n	8003efa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e82:	f3ef 8310 	mrs	r3, PRIMASK
 8003e86:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e88:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f383 8810 	msr	PRIMASK, r3
}
 8003e96:	46c0      	nop			@ (mov r8, r8)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4922      	ldr	r1, [pc, #136]	@ (8003f2c <UART_CheckIdleState+0x150>)
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f383 8810 	msr	PRIMASK, r3
}
 8003eb2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb8:	61bb      	str	r3, [r7, #24]
  return(result);
 8003eba:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f383 8810 	msr	PRIMASK, r3
}
 8003ec8:	46c0      	nop			@ (mov r8, r8)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	438a      	bics	r2, r1
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003edc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	f383 8810 	msr	PRIMASK, r3
}
 8003ee4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	228c      	movs	r2, #140	@ 0x8c
 8003eea:	2120      	movs	r1, #32
 8003eec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2284      	movs	r2, #132	@ 0x84
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e012      	b.n	8003f20 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2288      	movs	r2, #136	@ 0x88
 8003efe:	2120      	movs	r1, #32
 8003f00:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	228c      	movs	r2, #140	@ 0x8c
 8003f06:	2120      	movs	r1, #32
 8003f08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2284      	movs	r2, #132	@ 0x84
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	0018      	movs	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b010      	add	sp, #64	@ 0x40
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	01ffffff 	.word	0x01ffffff
 8003f2c:	fffffedf 	.word	0xfffffedf

08003f30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	1dfb      	adds	r3, r7, #7
 8003f3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f40:	e051      	b.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	3301      	adds	r3, #1
 8003f46:	d04e      	beq.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f48:	f7fc fe84 	bl	8000c54 <HAL_GetTick>
 8003f4c:	0002      	movs	r2, r0
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d302      	bcc.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e051      	b.n	8004006 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2204      	movs	r2, #4
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d03b      	beq.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b80      	cmp	r3, #128	@ 0x80
 8003f72:	d038      	beq.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b40      	cmp	r3, #64	@ 0x40
 8003f78:	d035      	beq.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	2208      	movs	r2, #8
 8003f82:	4013      	ands	r3, r2
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d111      	bne.n	8003fac <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	0018      	movs	r0, r3
 8003f94:	f000 f83c 	bl	8004010 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2290      	movs	r2, #144	@ 0x90
 8003f9c:	2108      	movs	r1, #8
 8003f9e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2284      	movs	r2, #132	@ 0x84
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e02c      	b.n	8004006 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69da      	ldr	r2, [r3, #28]
 8003fb2:	2380      	movs	r3, #128	@ 0x80
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	2380      	movs	r3, #128	@ 0x80
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d112      	bne.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2280      	movs	r2, #128	@ 0x80
 8003fc6:	0112      	lsls	r2, r2, #4
 8003fc8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f000 f81f 	bl	8004010 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2290      	movs	r2, #144	@ 0x90
 8003fd6:	2120      	movs	r1, #32
 8003fd8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2284      	movs	r2, #132	@ 0x84
 8003fde:	2100      	movs	r1, #0
 8003fe0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e00f      	b.n	8004006 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	425a      	negs	r2, r3
 8003ff6:	4153      	adcs	r3, r2
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	1dfb      	adds	r3, r7, #7
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d09e      	beq.n	8003f42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	0018      	movs	r0, r3
 8004008:	46bd      	mov	sp, r7
 800400a:	b004      	add	sp, #16
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08e      	sub	sp, #56	@ 0x38
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004018:	f3ef 8310 	mrs	r3, PRIMASK
 800401c:	617b      	str	r3, [r7, #20]
  return(result);
 800401e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004020:	637b      	str	r3, [r7, #52]	@ 0x34
 8004022:	2301      	movs	r3, #1
 8004024:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	f383 8810 	msr	PRIMASK, r3
}
 800402c:	46c0      	nop			@ (mov r8, r8)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4926      	ldr	r1, [pc, #152]	@ (80040d4 <UART_EndRxTransfer+0xc4>)
 800403a:	400a      	ands	r2, r1
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004040:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f383 8810 	msr	PRIMASK, r3
}
 8004048:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404a:	f3ef 8310 	mrs	r3, PRIMASK
 800404e:	623b      	str	r3, [r7, #32]
  return(result);
 8004050:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004052:	633b      	str	r3, [r7, #48]	@ 0x30
 8004054:	2301      	movs	r3, #1
 8004056:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	f383 8810 	msr	PRIMASK, r3
}
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	491b      	ldr	r1, [pc, #108]	@ (80040d8 <UART_EndRxTransfer+0xc8>)
 800406c:	400a      	ands	r2, r1
 800406e:	609a      	str	r2, [r3, #8]
 8004070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004072:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004076:	f383 8810 	msr	PRIMASK, r3
}
 800407a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004080:	2b01      	cmp	r3, #1
 8004082:	d118      	bne.n	80040b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004084:	f3ef 8310 	mrs	r3, PRIMASK
 8004088:	60bb      	str	r3, [r7, #8]
  return(result);
 800408a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800408e:	2301      	movs	r3, #1
 8004090:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f383 8810 	msr	PRIMASK, r3
}
 8004098:	46c0      	nop			@ (mov r8, r8)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2110      	movs	r1, #16
 80040a6:	438a      	bics	r2, r1
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f383 8810 	msr	PRIMASK, r3
}
 80040b4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	228c      	movs	r2, #140	@ 0x8c
 80040ba:	2120      	movs	r1, #32
 80040bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80040ca:	46c0      	nop			@ (mov r8, r8)
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b00e      	add	sp, #56	@ 0x38
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	46c0      	nop			@ (mov r8, r8)
 80040d4:	fffffedf 	.word	0xfffffedf
 80040d8:	effffffe 	.word	0xeffffffe

080040dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	225e      	movs	r2, #94	@ 0x5e
 80040ee:	2100      	movs	r1, #0
 80040f0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2256      	movs	r2, #86	@ 0x56
 80040f6:	2100      	movs	r1, #0
 80040f8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	0018      	movs	r0, r3
 80040fe:	f7ff fae7 	bl	80036d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004102:	46c0      	nop			@ (mov r8, r8)
 8004104:	46bd      	mov	sp, r7
 8004106:	b004      	add	sp, #16
 8004108:	bd80      	pop	{r7, pc}

0800410a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b08a      	sub	sp, #40	@ 0x28
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2288      	movs	r2, #136	@ 0x88
 8004116:	589b      	ldr	r3, [r3, r2]
 8004118:	2b21      	cmp	r3, #33	@ 0x21
 800411a:	d14c      	bne.n	80041b6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2256      	movs	r2, #86	@ 0x56
 8004120:	5a9b      	ldrh	r3, [r3, r2]
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d132      	bne.n	800418e <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004128:	f3ef 8310 	mrs	r3, PRIMASK
 800412c:	60bb      	str	r3, [r7, #8]
  return(result);
 800412e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004130:	627b      	str	r3, [r7, #36]	@ 0x24
 8004132:	2301      	movs	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f383 8810 	msr	PRIMASK, r3
}
 800413c:	46c0      	nop			@ (mov r8, r8)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2180      	movs	r1, #128	@ 0x80
 800414a:	438a      	bics	r2, r1
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f383 8810 	msr	PRIMASK, r3
}
 8004158:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800415a:	f3ef 8310 	mrs	r3, PRIMASK
 800415e:	617b      	str	r3, [r7, #20]
  return(result);
 8004160:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004162:	623b      	str	r3, [r7, #32]
 8004164:	2301      	movs	r3, #1
 8004166:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	f383 8810 	msr	PRIMASK, r3
}
 800416e:	46c0      	nop			@ (mov r8, r8)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2140      	movs	r1, #64	@ 0x40
 800417c:	430a      	orrs	r2, r1
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f383 8810 	msr	PRIMASK, r3
}
 800418a:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800418c:	e013      	b.n	80041b6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004192:	781a      	ldrb	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2256      	movs	r2, #86	@ 0x56
 80041a8:	5a9b      	ldrh	r3, [r3, r2]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b299      	uxth	r1, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2256      	movs	r2, #86	@ 0x56
 80041b4:	5299      	strh	r1, [r3, r2]
}
 80041b6:	46c0      	nop			@ (mov r8, r8)
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b00a      	add	sp, #40	@ 0x28
 80041bc:	bd80      	pop	{r7, pc}

080041be <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b08c      	sub	sp, #48	@ 0x30
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2288      	movs	r2, #136	@ 0x88
 80041ca:	589b      	ldr	r3, [r3, r2]
 80041cc:	2b21      	cmp	r3, #33	@ 0x21
 80041ce:	d151      	bne.n	8004274 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2256      	movs	r2, #86	@ 0x56
 80041d4:	5a9b      	ldrh	r3, [r3, r2]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d132      	bne.n	8004242 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041dc:	f3ef 8310 	mrs	r3, PRIMASK
 80041e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80041e2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80041e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041e6:	2301      	movs	r3, #1
 80041e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f383 8810 	msr	PRIMASK, r3
}
 80041f0:	46c0      	nop			@ (mov r8, r8)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2180      	movs	r1, #128	@ 0x80
 80041fe:	438a      	bics	r2, r1
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004204:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f383 8810 	msr	PRIMASK, r3
}
 800420c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800420e:	f3ef 8310 	mrs	r3, PRIMASK
 8004212:	61bb      	str	r3, [r7, #24]
  return(result);
 8004214:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004216:	627b      	str	r3, [r7, #36]	@ 0x24
 8004218:	2301      	movs	r3, #1
 800421a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f383 8810 	msr	PRIMASK, r3
}
 8004222:	46c0      	nop			@ (mov r8, r8)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2140      	movs	r1, #64	@ 0x40
 8004230:	430a      	orrs	r2, r1
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004236:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	f383 8810 	msr	PRIMASK, r3
}
 800423e:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004240:	e018      	b.n	8004274 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004246:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	001a      	movs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	05d2      	lsls	r2, r2, #23
 8004254:	0dd2      	lsrs	r2, r2, #23
 8004256:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800425c:	1c9a      	adds	r2, r3, #2
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2256      	movs	r2, #86	@ 0x56
 8004266:	5a9b      	ldrh	r3, [r3, r2]
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b299      	uxth	r1, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2256      	movs	r2, #86	@ 0x56
 8004272:	5299      	strh	r1, [r3, r2]
}
 8004274:	46c0      	nop			@ (mov r8, r8)
 8004276:	46bd      	mov	sp, r7
 8004278:	b00c      	add	sp, #48	@ 0x30
 800427a:	bd80      	pop	{r7, pc}

0800427c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08c      	sub	sp, #48	@ 0x30
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2288      	movs	r2, #136	@ 0x88
 8004288:	589b      	ldr	r3, [r3, r2]
 800428a:	2b21      	cmp	r3, #33	@ 0x21
 800428c:	d165      	bne.n	800435a <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800428e:	232e      	movs	r3, #46	@ 0x2e
 8004290:	18fb      	adds	r3, r7, r3
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	216a      	movs	r1, #106	@ 0x6a
 8004296:	5a52      	ldrh	r2, [r2, r1]
 8004298:	801a      	strh	r2, [r3, #0]
 800429a:	e059      	b.n	8004350 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2256      	movs	r2, #86	@ 0x56
 80042a0:	5a9b      	ldrh	r3, [r3, r2]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d133      	bne.n	8004310 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042a8:	f3ef 8310 	mrs	r3, PRIMASK
 80042ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80042ae:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80042b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042b2:	2301      	movs	r3, #1
 80042b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f383 8810 	msr	PRIMASK, r3
}
 80042bc:	46c0      	nop			@ (mov r8, r8)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4926      	ldr	r1, [pc, #152]	@ (8004364 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80042ca:	400a      	ands	r2, r1
 80042cc:	609a      	str	r2, [r3, #8]
 80042ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f383 8810 	msr	PRIMASK, r3
}
 80042d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042da:	f3ef 8310 	mrs	r3, PRIMASK
 80042de:	61bb      	str	r3, [r7, #24]
  return(result);
 80042e0:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e4:	2301      	movs	r3, #1
 80042e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f383 8810 	msr	PRIMASK, r3
}
 80042ee:	46c0      	nop			@ (mov r8, r8)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2140      	movs	r1, #64	@ 0x40
 80042fc:	430a      	orrs	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004302:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	f383 8810 	msr	PRIMASK, r3
}
 800430a:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800430c:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800430e:	e024      	b.n	800435a <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	2280      	movs	r2, #128	@ 0x80
 8004318:	4013      	ands	r3, r2
 800431a:	d013      	beq.n	8004344 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004320:	781a      	ldrb	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2256      	movs	r2, #86	@ 0x56
 8004336:	5a9b      	ldrh	r3, [r3, r2]
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b299      	uxth	r1, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2256      	movs	r2, #86	@ 0x56
 8004342:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004344:	212e      	movs	r1, #46	@ 0x2e
 8004346:	187b      	adds	r3, r7, r1
 8004348:	881a      	ldrh	r2, [r3, #0]
 800434a:	187b      	adds	r3, r7, r1
 800434c:	3a01      	subs	r2, #1
 800434e:	801a      	strh	r2, [r3, #0]
 8004350:	232e      	movs	r3, #46	@ 0x2e
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1a0      	bne.n	800429c <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800435a:	46c0      	nop			@ (mov r8, r8)
 800435c:	46bd      	mov	sp, r7
 800435e:	b00c      	add	sp, #48	@ 0x30
 8004360:	bd80      	pop	{r7, pc}
 8004362:	46c0      	nop			@ (mov r8, r8)
 8004364:	ff7fffff 	.word	0xff7fffff

08004368 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08c      	sub	sp, #48	@ 0x30
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2288      	movs	r2, #136	@ 0x88
 8004374:	589b      	ldr	r3, [r3, r2]
 8004376:	2b21      	cmp	r3, #33	@ 0x21
 8004378:	d16a      	bne.n	8004450 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800437a:	232e      	movs	r3, #46	@ 0x2e
 800437c:	18fb      	adds	r3, r7, r3
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	216a      	movs	r1, #106	@ 0x6a
 8004382:	5a52      	ldrh	r2, [r2, r1]
 8004384:	801a      	strh	r2, [r3, #0]
 8004386:	e05e      	b.n	8004446 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2256      	movs	r2, #86	@ 0x56
 800438c:	5a9b      	ldrh	r3, [r3, r2]
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d133      	bne.n	80043fc <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004394:	f3ef 8310 	mrs	r3, PRIMASK
 8004398:	60bb      	str	r3, [r7, #8]
  return(result);
 800439a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800439c:	627b      	str	r3, [r7, #36]	@ 0x24
 800439e:	2301      	movs	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f383 8810 	msr	PRIMASK, r3
}
 80043a8:	46c0      	nop			@ (mov r8, r8)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4928      	ldr	r1, [pc, #160]	@ (8004458 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80043b6:	400a      	ands	r2, r1
 80043b8:	609a      	str	r2, [r3, #8]
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f383 8810 	msr	PRIMASK, r3
}
 80043c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c6:	f3ef 8310 	mrs	r3, PRIMASK
 80043ca:	617b      	str	r3, [r7, #20]
  return(result);
 80043cc:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043ce:	623b      	str	r3, [r7, #32]
 80043d0:	2301      	movs	r3, #1
 80043d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	f383 8810 	msr	PRIMASK, r3
}
 80043da:	46c0      	nop			@ (mov r8, r8)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2140      	movs	r1, #64	@ 0x40
 80043e8:	430a      	orrs	r2, r1
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f383 8810 	msr	PRIMASK, r3
}
 80043f6:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80043f8:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80043fa:	e029      	b.n	8004450 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	2280      	movs	r2, #128	@ 0x80
 8004404:	4013      	ands	r3, r2
 8004406:	d018      	beq.n	800443a <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800440c:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800440e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	001a      	movs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	05d2      	lsls	r2, r2, #23
 800441a:	0dd2      	lsrs	r2, r2, #23
 800441c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004422:	1c9a      	adds	r2, r3, #2
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2256      	movs	r2, #86	@ 0x56
 800442c:	5a9b      	ldrh	r3, [r3, r2]
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b299      	uxth	r1, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2256      	movs	r2, #86	@ 0x56
 8004438:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800443a:	212e      	movs	r1, #46	@ 0x2e
 800443c:	187b      	adds	r3, r7, r1
 800443e:	881a      	ldrh	r2, [r3, #0]
 8004440:	187b      	adds	r3, r7, r1
 8004442:	3a01      	subs	r2, #1
 8004444:	801a      	strh	r2, [r3, #0]
 8004446:	232e      	movs	r3, #46	@ 0x2e
 8004448:	18fb      	adds	r3, r7, r3
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d19b      	bne.n	8004388 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8004450:	46c0      	nop			@ (mov r8, r8)
 8004452:	46bd      	mov	sp, r7
 8004454:	b00c      	add	sp, #48	@ 0x30
 8004456:	bd80      	pop	{r7, pc}
 8004458:	ff7fffff 	.word	0xff7fffff

0800445c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004464:	f3ef 8310 	mrs	r3, PRIMASK
 8004468:	60bb      	str	r3, [r7, #8]
  return(result);
 800446a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	2301      	movs	r3, #1
 8004470:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f383 8810 	msr	PRIMASK, r3
}
 8004478:	46c0      	nop			@ (mov r8, r8)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2140      	movs	r1, #64	@ 0x40
 8004486:	438a      	bics	r2, r1
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f383 8810 	msr	PRIMASK, r3
}
 8004494:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2288      	movs	r2, #136	@ 0x88
 800449a:	2120      	movs	r1, #32
 800449c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	0018      	movs	r0, r3
 80044a8:	f7ff f90a 	bl	80036c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ac:	46c0      	nop			@ (mov r8, r8)
 80044ae:	46bd      	mov	sp, r7
 80044b0:	b006      	add	sp, #24
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80044bc:	46c0      	nop			@ (mov r8, r8)
 80044be:	46bd      	mov	sp, r7
 80044c0:	b002      	add	sp, #8
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80044cc:	46c0      	nop			@ (mov r8, r8)
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b002      	add	sp, #8
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80044dc:	46c0      	nop			@ (mov r8, r8)
 80044de:	46bd      	mov	sp, r7
 80044e0:	b002      	add	sp, #8
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2284      	movs	r2, #132	@ 0x84
 80044f0:	5c9b      	ldrb	r3, [r3, r2]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <HAL_UARTEx_DisableFifoMode+0x16>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e027      	b.n	800454a <HAL_UARTEx_DisableFifoMode+0x66>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2284      	movs	r2, #132	@ 0x84
 80044fe:	2101      	movs	r1, #1
 8004500:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2288      	movs	r2, #136	@ 0x88
 8004506:	2124      	movs	r1, #36	@ 0x24
 8004508:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2101      	movs	r1, #1
 800451e:	438a      	bics	r2, r1
 8004520:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4a0b      	ldr	r2, [pc, #44]	@ (8004554 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004526:	4013      	ands	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2288      	movs	r2, #136	@ 0x88
 800453c:	2120      	movs	r1, #32
 800453e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2284      	movs	r2, #132	@ 0x84
 8004544:	2100      	movs	r1, #0
 8004546:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	0018      	movs	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	b004      	add	sp, #16
 8004550:	bd80      	pop	{r7, pc}
 8004552:	46c0      	nop			@ (mov r8, r8)
 8004554:	dfffffff 	.word	0xdfffffff

08004558 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2284      	movs	r2, #132	@ 0x84
 8004566:	5c9b      	ldrb	r3, [r3, r2]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800456c:	2302      	movs	r3, #2
 800456e:	e02e      	b.n	80045ce <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2284      	movs	r2, #132	@ 0x84
 8004574:	2101      	movs	r1, #1
 8004576:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2288      	movs	r2, #136	@ 0x88
 800457c:	2124      	movs	r1, #36	@ 0x24
 800457e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2101      	movs	r1, #1
 8004594:	438a      	bics	r2, r1
 8004596:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	08d9      	lsrs	r1, r3, #3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	0018      	movs	r0, r3
 80045b0:	f000 f854 	bl	800465c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2288      	movs	r2, #136	@ 0x88
 80045c0:	2120      	movs	r1, #32
 80045c2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2284      	movs	r2, #132	@ 0x84
 80045c8:	2100      	movs	r1, #0
 80045ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	0018      	movs	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b004      	add	sp, #16
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2284      	movs	r2, #132	@ 0x84
 80045e6:	5c9b      	ldrb	r3, [r3, r2]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e02f      	b.n	8004650 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2284      	movs	r2, #132	@ 0x84
 80045f4:	2101      	movs	r1, #1
 80045f6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2288      	movs	r2, #136	@ 0x88
 80045fc:	2124      	movs	r1, #36	@ 0x24
 80045fe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2101      	movs	r1, #1
 8004614:	438a      	bics	r2, r1
 8004616:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	4a0e      	ldr	r2, [pc, #56]	@ (8004658 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004620:	4013      	ands	r3, r2
 8004622:	0019      	movs	r1, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	0018      	movs	r0, r3
 8004632:	f000 f813 	bl	800465c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2288      	movs	r2, #136	@ 0x88
 8004642:	2120      	movs	r1, #32
 8004644:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2284      	movs	r2, #132	@ 0x84
 800464a:	2100      	movs	r1, #0
 800464c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	0018      	movs	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	b004      	add	sp, #16
 8004656:	bd80      	pop	{r7, pc}
 8004658:	f1ffffff 	.word	0xf1ffffff

0800465c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800465c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004668:	2b00      	cmp	r3, #0
 800466a:	d108      	bne.n	800467e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	226a      	movs	r2, #106	@ 0x6a
 8004670:	2101      	movs	r1, #1
 8004672:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2268      	movs	r2, #104	@ 0x68
 8004678:	2101      	movs	r1, #1
 800467a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800467c:	e043      	b.n	8004706 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800467e:	260f      	movs	r6, #15
 8004680:	19bb      	adds	r3, r7, r6
 8004682:	2208      	movs	r2, #8
 8004684:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004686:	200e      	movs	r0, #14
 8004688:	183b      	adds	r3, r7, r0
 800468a:	2208      	movs	r2, #8
 800468c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	0e5b      	lsrs	r3, r3, #25
 8004696:	b2da      	uxtb	r2, r3
 8004698:	240d      	movs	r4, #13
 800469a:	193b      	adds	r3, r7, r4
 800469c:	2107      	movs	r1, #7
 800469e:	400a      	ands	r2, r1
 80046a0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	0f5b      	lsrs	r3, r3, #29
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	250c      	movs	r5, #12
 80046ae:	197b      	adds	r3, r7, r5
 80046b0:	2107      	movs	r1, #7
 80046b2:	400a      	ands	r2, r1
 80046b4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046b6:	183b      	adds	r3, r7, r0
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	197a      	adds	r2, r7, r5
 80046bc:	7812      	ldrb	r2, [r2, #0]
 80046be:	4914      	ldr	r1, [pc, #80]	@ (8004710 <UARTEx_SetNbDataToProcess+0xb4>)
 80046c0:	5c8a      	ldrb	r2, [r1, r2]
 80046c2:	435a      	muls	r2, r3
 80046c4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80046c6:	197b      	adds	r3, r7, r5
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	4a12      	ldr	r2, [pc, #72]	@ (8004714 <UARTEx_SetNbDataToProcess+0xb8>)
 80046cc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046ce:	0019      	movs	r1, r3
 80046d0:	f7fb fda2 	bl	8000218 <__divsi3>
 80046d4:	0003      	movs	r3, r0
 80046d6:	b299      	uxth	r1, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	226a      	movs	r2, #106	@ 0x6a
 80046dc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046de:	19bb      	adds	r3, r7, r6
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	193a      	adds	r2, r7, r4
 80046e4:	7812      	ldrb	r2, [r2, #0]
 80046e6:	490a      	ldr	r1, [pc, #40]	@ (8004710 <UARTEx_SetNbDataToProcess+0xb4>)
 80046e8:	5c8a      	ldrb	r2, [r1, r2]
 80046ea:	435a      	muls	r2, r3
 80046ec:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80046ee:	193b      	adds	r3, r7, r4
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	4a08      	ldr	r2, [pc, #32]	@ (8004714 <UARTEx_SetNbDataToProcess+0xb8>)
 80046f4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046f6:	0019      	movs	r1, r3
 80046f8:	f7fb fd8e 	bl	8000218 <__divsi3>
 80046fc:	0003      	movs	r3, r0
 80046fe:	b299      	uxth	r1, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2268      	movs	r2, #104	@ 0x68
 8004704:	5299      	strh	r1, [r3, r2]
}
 8004706:	46c0      	nop			@ (mov r8, r8)
 8004708:	46bd      	mov	sp, r7
 800470a:	b005      	add	sp, #20
 800470c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800470e:	46c0      	nop			@ (mov r8, r8)
 8004710:	08004800 	.word	0x08004800
 8004714:	08004808 	.word	0x08004808

08004718 <memset>:
 8004718:	0003      	movs	r3, r0
 800471a:	1882      	adds	r2, r0, r2
 800471c:	4293      	cmp	r3, r2
 800471e:	d100      	bne.n	8004722 <memset+0xa>
 8004720:	4770      	bx	lr
 8004722:	7019      	strb	r1, [r3, #0]
 8004724:	3301      	adds	r3, #1
 8004726:	e7f9      	b.n	800471c <memset+0x4>

08004728 <__libc_init_array>:
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	2600      	movs	r6, #0
 800472c:	4c0c      	ldr	r4, [pc, #48]	@ (8004760 <__libc_init_array+0x38>)
 800472e:	4d0d      	ldr	r5, [pc, #52]	@ (8004764 <__libc_init_array+0x3c>)
 8004730:	1b64      	subs	r4, r4, r5
 8004732:	10a4      	asrs	r4, r4, #2
 8004734:	42a6      	cmp	r6, r4
 8004736:	d109      	bne.n	800474c <__libc_init_array+0x24>
 8004738:	2600      	movs	r6, #0
 800473a:	f000 f819 	bl	8004770 <_init>
 800473e:	4c0a      	ldr	r4, [pc, #40]	@ (8004768 <__libc_init_array+0x40>)
 8004740:	4d0a      	ldr	r5, [pc, #40]	@ (800476c <__libc_init_array+0x44>)
 8004742:	1b64      	subs	r4, r4, r5
 8004744:	10a4      	asrs	r4, r4, #2
 8004746:	42a6      	cmp	r6, r4
 8004748:	d105      	bne.n	8004756 <__libc_init_array+0x2e>
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	00b3      	lsls	r3, r6, #2
 800474e:	58eb      	ldr	r3, [r5, r3]
 8004750:	4798      	blx	r3
 8004752:	3601      	adds	r6, #1
 8004754:	e7ee      	b.n	8004734 <__libc_init_array+0xc>
 8004756:	00b3      	lsls	r3, r6, #2
 8004758:	58eb      	ldr	r3, [r5, r3]
 800475a:	4798      	blx	r3
 800475c:	3601      	adds	r6, #1
 800475e:	e7f2      	b.n	8004746 <__libc_init_array+0x1e>
 8004760:	08004818 	.word	0x08004818
 8004764:	08004818 	.word	0x08004818
 8004768:	0800481c 	.word	0x0800481c
 800476c:	08004818 	.word	0x08004818

08004770 <_init>:
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004776:	bc08      	pop	{r3}
 8004778:	469e      	mov	lr, r3
 800477a:	4770      	bx	lr

0800477c <_fini>:
 800477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477e:	46c0      	nop			@ (mov r8, r8)
 8004780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004782:	bc08      	pop	{r3}
 8004784:	469e      	mov	lr, r3
 8004786:	4770      	bx	lr
