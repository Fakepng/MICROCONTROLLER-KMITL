
STM32_COURSE_SOMSIN_2_3_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b84  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003c40  08003c40  00004c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d1c  08003d1c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d1c  08003d1c  00004d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d24  08003d24  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d24  08003d24  00004d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d28  08003d28  00004d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d2c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08003d38  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003d38  0000510c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f819  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002010  00000000  00000000  0001484d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00016860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad9  00000000  00000000  00017620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ee0  00000000  00000000  000180f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b1f  00000000  00000000  0002ffd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d750  00000000  00000000  00040af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de248  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000320c  00000000  00000000  000de28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000e1498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003c28 	.word	0x08003c28

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003c28 	.word	0x08003c28

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fabe 	bl	8000ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f824 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f93a 	bl	80008a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f8ea 	bl	8000804 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000630:	f000 f866 	bl	8000700 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000634:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <main+0x50>)
 8000636:	2100      	movs	r1, #0
 8000638:	0018      	movs	r0, r3
 800063a:	f001 fd27 	bl	800208c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(2000);
 800063e:	23fa      	movs	r3, #250	@ 0xfa
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	0018      	movs	r0, r3
 8000644:	f000 fb32 	bl	8000cac <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,2048);
 8000648:	4b08      	ldr	r3, [pc, #32]	@ (800066c <main+0x50>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2280      	movs	r2, #128	@ 0x80
 800064e:	0112      	lsls	r2, r2, #4
 8000650:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(2000);
 8000652:	23fa      	movs	r3, #250	@ 0xfa
 8000654:	00db      	lsls	r3, r3, #3
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fb28 	bl	8000cac <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,1024);
 800065c:	4b03      	ldr	r3, [pc, #12]	@ (800066c <main+0x50>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2280      	movs	r2, #128	@ 0x80
 8000662:	00d2      	lsls	r2, r2, #3
 8000664:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(2000);
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	e7e9      	b.n	800063e <main+0x22>
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	20000028 	.word	0x20000028

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b093      	sub	sp, #76	@ 0x4c
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	2410      	movs	r4, #16
 8000678:	193b      	adds	r3, r7, r4
 800067a:	0018      	movs	r0, r3
 800067c:	2338      	movs	r3, #56	@ 0x38
 800067e:	001a      	movs	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	f003 faa5 	bl	8003bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000686:	003b      	movs	r3, r7
 8000688:	0018      	movs	r0, r3
 800068a:	2310      	movs	r3, #16
 800068c:	001a      	movs	r2, r3
 800068e:	2100      	movs	r1, #0
 8000690:	f003 fa9e 	bl	8003bd0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	2380      	movs	r3, #128	@ 0x80
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	0018      	movs	r0, r3
 800069a:	f000 fd77 	bl	800118c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2202      	movs	r2, #2
 80006a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2280      	movs	r2, #128	@ 0x80
 80006a8:	0052      	lsls	r2, r2, #1
 80006aa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2240      	movs	r2, #64	@ 0x40
 80006b6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 fdaf 	bl	8001224 <HAL_RCC_OscConfig>
 80006c6:	1e03      	subs	r3, r0, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006ca:	f000 f939 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	003b      	movs	r3, r7
 80006d0:	2207      	movs	r2, #7
 80006d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d4:	003b      	movs	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	003b      	movs	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	003b      	movs	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e6:	003b      	movs	r3, r7
 80006e8:	2100      	movs	r1, #0
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 f8b4 	bl	8001858 <HAL_RCC_ClockConfig>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006f4:	f000 f924 	bl	8000940 <Error_Handler>
  }
}
 80006f8:	46c0      	nop			@ (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b013      	add	sp, #76	@ 0x4c
 80006fe:	bd90      	pop	{r4, r7, pc}

08000700 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08e      	sub	sp, #56	@ 0x38
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	2328      	movs	r3, #40	@ 0x28
 8000708:	18fb      	adds	r3, r7, r3
 800070a:	0018      	movs	r0, r3
 800070c:	2310      	movs	r3, #16
 800070e:	001a      	movs	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	f003 fa5d 	bl	8003bd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000716:	231c      	movs	r3, #28
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	0018      	movs	r0, r3
 800071c:	230c      	movs	r3, #12
 800071e:	001a      	movs	r2, r3
 8000720:	2100      	movs	r1, #0
 8000722:	f003 fa55 	bl	8003bd0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000726:	003b      	movs	r3, r7
 8000728:	0018      	movs	r0, r3
 800072a:	231c      	movs	r3, #28
 800072c:	001a      	movs	r2, r3
 800072e:	2100      	movs	r1, #0
 8000730:	f003 fa4e 	bl	8003bd0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000734:	4b30      	ldr	r3, [pc, #192]	@ (80007f8 <MX_TIM3_Init+0xf8>)
 8000736:	4a31      	ldr	r2, [pc, #196]	@ (80007fc <MX_TIM3_Init+0xfc>)
 8000738:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32 - 1;
 800073a:	4b2f      	ldr	r3, [pc, #188]	@ (80007f8 <MX_TIM3_Init+0xf8>)
 800073c:	221f      	movs	r2, #31
 800073e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000740:	4b2d      	ldr	r3, [pc, #180]	@ (80007f8 <MX_TIM3_Init+0xf8>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8000746:	4b2c      	ldr	r3, [pc, #176]	@ (80007f8 <MX_TIM3_Init+0xf8>)
 8000748:	4a2d      	ldr	r2, [pc, #180]	@ (8000800 <MX_TIM3_Init+0x100>)
 800074a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074c:	4b2a      	ldr	r3, [pc, #168]	@ (80007f8 <MX_TIM3_Init+0xf8>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000752:	4b29      	ldr	r3, [pc, #164]	@ (80007f8 <MX_TIM3_Init+0xf8>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000758:	4b27      	ldr	r3, [pc, #156]	@ (80007f8 <MX_TIM3_Init+0xf8>)
 800075a:	0018      	movs	r0, r3
 800075c:	f001 fbde 	bl	8001f1c <HAL_TIM_Base_Init>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000764:	f000 f8ec 	bl	8000940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000768:	2128      	movs	r1, #40	@ 0x28
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2280      	movs	r2, #128	@ 0x80
 800076e:	0152      	lsls	r2, r2, #5
 8000770:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000772:	187a      	adds	r2, r7, r1
 8000774:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <MX_TIM3_Init+0xf8>)
 8000776:	0011      	movs	r1, r2
 8000778:	0018      	movs	r0, r3
 800077a:	f001 fe71 	bl	8002460 <HAL_TIM_ConfigClockSource>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000782:	f000 f8dd 	bl	8000940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000786:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <MX_TIM3_Init+0xf8>)
 8000788:	0018      	movs	r0, r3
 800078a:	f001 fc1f 	bl	8001fcc <HAL_TIM_PWM_Init>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000792:	f000 f8d5 	bl	8000940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000796:	211c      	movs	r1, #28
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007a4:	187a      	adds	r2, r7, r1
 80007a6:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <MX_TIM3_Init+0xf8>)
 80007a8:	0011      	movs	r1, r2
 80007aa:	0018      	movs	r0, r3
 80007ac:	f002 fb40 	bl	8002e30 <HAL_TIMEx_MasterConfigSynchronization>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80007b4:	f000 f8c4 	bl	8000940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b8:	003b      	movs	r3, r7
 80007ba:	2260      	movs	r2, #96	@ 0x60
 80007bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1024;
 80007be:	003b      	movs	r3, r7
 80007c0:	2280      	movs	r2, #128	@ 0x80
 80007c2:	00d2      	lsls	r2, r2, #3
 80007c4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c6:	003b      	movs	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007cc:	003b      	movs	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d2:	0039      	movs	r1, r7
 80007d4:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <MX_TIM3_Init+0xf8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	0018      	movs	r0, r3
 80007da:	f001 fd41 	bl	8002260 <HAL_TIM_PWM_ConfigChannel>
 80007de:	1e03      	subs	r3, r0, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80007e2:	f000 f8ad 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007e6:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <MX_TIM3_Init+0xf8>)
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 f8f5 	bl	80009d8 <HAL_TIM_MspPostInit>

}
 80007ee:	46c0      	nop			@ (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b00e      	add	sp, #56	@ 0x38
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	20000028 	.word	0x20000028
 80007fc:	40000400 	.word	0x40000400
 8000800:	00000fff 	.word	0x00000fff

08000804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000808:	4b23      	ldr	r3, [pc, #140]	@ (8000898 <MX_USART2_UART_Init+0x94>)
 800080a:	4a24      	ldr	r2, [pc, #144]	@ (800089c <MX_USART2_UART_Init+0x98>)
 800080c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800080e:	4b22      	ldr	r3, [pc, #136]	@ (8000898 <MX_USART2_UART_Init+0x94>)
 8000810:	22e1      	movs	r2, #225	@ 0xe1
 8000812:	0252      	lsls	r2, r2, #9
 8000814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b20      	ldr	r3, [pc, #128]	@ (8000898 <MX_USART2_UART_Init+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b1e      	ldr	r3, [pc, #120]	@ (8000898 <MX_USART2_UART_Init+0x94>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b1d      	ldr	r3, [pc, #116]	@ (8000898 <MX_USART2_UART_Init+0x94>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <MX_USART2_UART_Init+0x94>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_USART2_UART_Init+0x94>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <MX_USART2_UART_Init+0x94>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083a:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <MX_USART2_UART_Init+0x94>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000840:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <MX_USART2_UART_Init+0x94>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000846:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_USART2_UART_Init+0x94>)
 8000848:	2200      	movs	r2, #0
 800084a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_USART2_UART_Init+0x94>)
 800084e:	0018      	movs	r0, r3
 8000850:	f002 fb5c 	bl	8002f0c <HAL_UART_Init>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000858:	f000 f872 	bl	8000940 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085c:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_USART2_UART_Init+0x94>)
 800085e:	2100      	movs	r1, #0
 8000860:	0018      	movs	r0, r3
 8000862:	f003 f8d5 	bl	8003a10 <HAL_UARTEx_SetTxFifoThreshold>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800086a:	f000 f869 	bl	8000940 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086e:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <MX_USART2_UART_Init+0x94>)
 8000870:	2100      	movs	r1, #0
 8000872:	0018      	movs	r0, r3
 8000874:	f003 f90c 	bl	8003a90 <HAL_UARTEx_SetRxFifoThreshold>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800087c:	f000 f860 	bl	8000940 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000880:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <MX_USART2_UART_Init+0x94>)
 8000882:	0018      	movs	r0, r3
 8000884:	f003 f88a 	bl	800399c <HAL_UARTEx_DisableFifoMode>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800088c:	f000 f858 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000890:	46c0      	nop			@ (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	20000074 	.word	0x20000074
 800089c:	40004400 	.word	0x40004400

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b089      	sub	sp, #36	@ 0x24
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	240c      	movs	r4, #12
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	0018      	movs	r0, r3
 80008ac:	2314      	movs	r3, #20
 80008ae:	001a      	movs	r2, r3
 80008b0:	2100      	movs	r1, #0
 80008b2:	f003 f98d 	bl	8003bd0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4b21      	ldr	r3, [pc, #132]	@ (800093c <MX_GPIO_Init+0x9c>)
 80008b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ba:	4b20      	ldr	r3, [pc, #128]	@ (800093c <MX_GPIO_Init+0x9c>)
 80008bc:	2104      	movs	r1, #4
 80008be:	430a      	orrs	r2, r1
 80008c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008c2:	4b1e      	ldr	r3, [pc, #120]	@ (800093c <MX_GPIO_Init+0x9c>)
 80008c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008c6:	2204      	movs	r2, #4
 80008c8:	4013      	ands	r3, r2
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ce:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <MX_GPIO_Init+0x9c>)
 80008d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008d2:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <MX_GPIO_Init+0x9c>)
 80008d4:	2120      	movs	r1, #32
 80008d6:	430a      	orrs	r2, r1
 80008d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80008da:	4b18      	ldr	r3, [pc, #96]	@ (800093c <MX_GPIO_Init+0x9c>)
 80008dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008de:	2220      	movs	r2, #32
 80008e0:	4013      	ands	r3, r2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b15      	ldr	r3, [pc, #84]	@ (800093c <MX_GPIO_Init+0x9c>)
 80008e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ea:	4b14      	ldr	r3, [pc, #80]	@ (800093c <MX_GPIO_Init+0x9c>)
 80008ec:	2101      	movs	r1, #1
 80008ee:	430a      	orrs	r2, r1
 80008f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008f2:	4b12      	ldr	r3, [pc, #72]	@ (800093c <MX_GPIO_Init+0x9c>)
 80008f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008f6:	2201      	movs	r2, #1
 80008f8:	4013      	ands	r3, r2
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008fe:	23a0      	movs	r3, #160	@ 0xa0
 8000900:	05db      	lsls	r3, r3, #23
 8000902:	2200      	movs	r2, #0
 8000904:	2120      	movs	r1, #32
 8000906:	0018      	movs	r0, r3
 8000908:	f000 fc22 	bl	8001150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800090c:	0021      	movs	r1, r4
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2220      	movs	r2, #32
 8000912:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2201      	movs	r2, #1
 8000918:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2202      	movs	r2, #2
 8000924:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000926:	187a      	adds	r2, r7, r1
 8000928:	23a0      	movs	r3, #160	@ 0xa0
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	0011      	movs	r1, r2
 800092e:	0018      	movs	r0, r3
 8000930:	f000 faaa 	bl	8000e88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000934:	46c0      	nop			@ (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b009      	add	sp, #36	@ 0x24
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	40021000 	.word	0x40021000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <HAL_MspInit+0x4c>)
 8000954:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <HAL_MspInit+0x4c>)
 8000958:	2101      	movs	r1, #1
 800095a:	430a      	orrs	r2, r1
 800095c:	641a      	str	r2, [r3, #64]	@ 0x40
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	2201      	movs	r2, #1
 8000964:	4013      	ands	r3, r2
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <HAL_MspInit+0x4c>)
 800096c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <HAL_MspInit+0x4c>)
 8000970:	2180      	movs	r1, #128	@ 0x80
 8000972:	0549      	lsls	r1, r1, #21
 8000974:	430a      	orrs	r2, r1
 8000976:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000978:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <HAL_MspInit+0x4c>)
 800097a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800097c:	2380      	movs	r3, #128	@ 0x80
 800097e:	055b      	lsls	r3, r3, #21
 8000980:	4013      	ands	r3, r2
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000986:	23c0      	movs	r3, #192	@ 0xc0
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	0018      	movs	r0, r3
 800098c:	f000 f9b2 	bl	8000cf4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000990:	46c0      	nop			@ (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b002      	add	sp, #8
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a09      	ldr	r2, [pc, #36]	@ (80009d0 <HAL_TIM_Base_MspInit+0x34>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d10b      	bne.n	80009c6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <HAL_TIM_Base_MspInit+0x38>)
 80009b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <HAL_TIM_Base_MspInit+0x38>)
 80009b4:	2102      	movs	r1, #2
 80009b6:	430a      	orrs	r2, r1
 80009b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <HAL_TIM_Base_MspInit+0x38>)
 80009bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009be:	2202      	movs	r2, #2
 80009c0:	4013      	ands	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b004      	add	sp, #16
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	40000400 	.word	0x40000400
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b089      	sub	sp, #36	@ 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	240c      	movs	r4, #12
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	0018      	movs	r0, r3
 80009e6:	2314      	movs	r3, #20
 80009e8:	001a      	movs	r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	f003 f8f0 	bl	8003bd0 <memset>
  if(htim->Instance==TIM3)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a14      	ldr	r2, [pc, #80]	@ (8000a48 <HAL_TIM_MspPostInit+0x70>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d122      	bne.n	8000a40 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <HAL_TIM_MspPostInit+0x74>)
 80009fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009fe:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <HAL_TIM_MspPostInit+0x74>)
 8000a00:	2101      	movs	r1, #1
 8000a02:	430a      	orrs	r2, r1
 8000a04:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <HAL_TIM_MspPostInit+0x74>)
 8000a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a12:	0021      	movs	r1, r4
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2240      	movs	r2, #64	@ 0x40
 8000a18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2201      	movs	r2, #1
 8000a30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	187a      	adds	r2, r7, r1
 8000a34:	23a0      	movs	r3, #160	@ 0xa0
 8000a36:	05db      	lsls	r3, r3, #23
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 fa24 	bl	8000e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a40:	46c0      	nop			@ (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b009      	add	sp, #36	@ 0x24
 8000a46:	bd90      	pop	{r4, r7, pc}
 8000a48:	40000400 	.word	0x40000400
 8000a4c:	40021000 	.word	0x40021000

08000a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b097      	sub	sp, #92	@ 0x5c
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	2344      	movs	r3, #68	@ 0x44
 8000a5a:	18fb      	adds	r3, r7, r3
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	2314      	movs	r3, #20
 8000a60:	001a      	movs	r2, r3
 8000a62:	2100      	movs	r1, #0
 8000a64:	f003 f8b4 	bl	8003bd0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a68:	2410      	movs	r4, #16
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	2334      	movs	r3, #52	@ 0x34
 8000a70:	001a      	movs	r2, r3
 8000a72:	2100      	movs	r1, #0
 8000a74:	f003 f8ac 	bl	8003bd0 <memset>
  if(huart->Instance==USART2)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a22      	ldr	r2, [pc, #136]	@ (8000b08 <HAL_UART_MspInit+0xb8>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d13e      	bne.n	8000b00 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2202      	movs	r2, #2
 8000a86:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	0018      	movs	r0, r3
 8000a92:	f001 f88b 	bl	8001bac <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a9a:	f7ff ff51 	bl	8000940 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <HAL_UART_MspInit+0xbc>)
 8000aa0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <HAL_UART_MspInit+0xbc>)
 8000aa4:	2180      	movs	r1, #128	@ 0x80
 8000aa6:	0289      	lsls	r1, r1, #10
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000aac:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <HAL_UART_MspInit+0xbc>)
 8000aae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ab0:	2380      	movs	r3, #128	@ 0x80
 8000ab2:	029b      	lsls	r3, r3, #10
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <HAL_UART_MspInit+0xbc>)
 8000abc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000abe:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <HAL_UART_MspInit+0xbc>)
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ac6:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <HAL_UART_MspInit+0xbc>)
 8000ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aca:	2201      	movs	r2, #1
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000ad2:	2144      	movs	r1, #68	@ 0x44
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2202      	movs	r2, #2
 8000ade:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2201      	movs	r2, #1
 8000af0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	187a      	adds	r2, r7, r1
 8000af4:	23a0      	movs	r3, #160	@ 0xa0
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	0011      	movs	r1, r2
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 f9c4 	bl	8000e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b017      	add	sp, #92	@ 0x5c
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	40004400 	.word	0x40004400
 8000b0c:	40021000 	.word	0x40021000

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b14:	46c0      	nop			@ (mov r8, r8)
 8000b16:	e7fd      	b.n	8000b14 <NMI_Handler+0x4>

08000b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	e7fd      	b.n	8000b1c <HardFault_Handler+0x4>

08000b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b24:	46c0      	nop			@ (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b38:	f000 f89c 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b4c:	480d      	ldr	r0, [pc, #52]	@ (8000b84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b4e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b50:	f7ff fff7 	bl	8000b42 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b54:	480c      	ldr	r0, [pc, #48]	@ (8000b88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b56:	490d      	ldr	r1, [pc, #52]	@ (8000b8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b58:	4a0d      	ldr	r2, [pc, #52]	@ (8000b90 <LoopForever+0xe>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b98 <LoopForever+0x16>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b7a:	f003 f831 	bl	8003be0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b7e:	f7ff fd4d 	bl	800061c <main>

08000b82 <LoopForever>:

LoopForever:
  b LoopForever
 8000b82:	e7fe      	b.n	8000b82 <LoopForever>
  ldr   r0, =_estack
 8000b84:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b90:	08003d2c 	.word	0x08003d2c
  ldr r2, =_sbss
 8000b94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b98:	2000010c 	.word	0x2000010c

08000b9c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC1_COMP_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <HAL_Init+0x3c>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <HAL_Init+0x3c>)
 8000bb2:	2180      	movs	r1, #128	@ 0x80
 8000bb4:	0049      	lsls	r1, r1, #1
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f000 f810 	bl	8000be0 <HAL_InitTick>
 8000bc0:	1e03      	subs	r3, r0, #0
 8000bc2:	d003      	beq.n	8000bcc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]
 8000bca:	e001      	b.n	8000bd0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000bcc:	f7ff febe 	bl	800094c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781b      	ldrb	r3, [r3, #0]
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b002      	add	sp, #8
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40022000 	.word	0x40022000

08000be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000be8:	230f      	movs	r3, #15
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <HAL_InitTick+0x88>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d02b      	beq.n	8000c50 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c6c <HAL_InitTick+0x8c>)
 8000bfa:	681c      	ldr	r4, [r3, #0]
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <HAL_InitTick+0x88>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	0019      	movs	r1, r3
 8000c02:	23fa      	movs	r3, #250	@ 0xfa
 8000c04:	0098      	lsls	r0, r3, #2
 8000c06:	f7ff fa7d 	bl	8000104 <__udivsi3>
 8000c0a:	0003      	movs	r3, r0
 8000c0c:	0019      	movs	r1, r3
 8000c0e:	0020      	movs	r0, r4
 8000c10:	f7ff fa78 	bl	8000104 <__udivsi3>
 8000c14:	0003      	movs	r3, r0
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 f929 	bl	8000e6e <HAL_SYSTICK_Config>
 8000c1c:	1e03      	subs	r3, r0, #0
 8000c1e:	d112      	bne.n	8000c46 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d80a      	bhi.n	8000c3c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	2301      	movs	r3, #1
 8000c2a:	425b      	negs	r3, r3
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 f908 	bl	8000e44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_InitTick+0x90>)
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	e00d      	b.n	8000c58 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	18fb      	adds	r3, r7, r3
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
 8000c44:	e008      	b.n	8000c58 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c46:	230f      	movs	r3, #15
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	e003      	b.n	8000c58 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c50:	230f      	movs	r3, #15
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c58:	230f      	movs	r3, #15
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	781b      	ldrb	r3, [r3, #0]
}
 8000c5e:	0018      	movs	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b005      	add	sp, #20
 8000c64:	bd90      	pop	{r4, r7, pc}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <HAL_IncTick+0x1c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <HAL_IncTick+0x20>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	18d2      	adds	r2, r2, r3
 8000c84:	4b03      	ldr	r3, [pc, #12]	@ (8000c94 <HAL_IncTick+0x20>)
 8000c86:	601a      	str	r2, [r3, #0]
}
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000108 	.word	0x20000108

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b02      	ldr	r3, [pc, #8]	@ (8000ca8 <HAL_GetTick+0x10>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	20000108 	.word	0x20000108

08000cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb4:	f7ff fff0 	bl	8000c98 <HAL_GetTick>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	d005      	beq.n	8000cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf0 <HAL_Delay+0x44>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	001a      	movs	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	189b      	adds	r3, r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	f7ff ffe0 	bl	8000c98 <HAL_GetTick>
 8000cd8:	0002      	movs	r2, r0
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d8f7      	bhi.n	8000cd4 <HAL_Delay+0x28>
  {
  }
}
 8000ce4:	46c0      	nop			@ (mov r8, r8)
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b004      	add	sp, #16
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	20000008 	.word	0x20000008

08000cf4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a06      	ldr	r2, [pc, #24]	@ (8000d1c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000d02:	4013      	ands	r3, r2
 8000d04:	0019      	movs	r1, r3
 8000d06:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]
}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	40010000 	.word	0x40010000
 8000d1c:	fffff9ff 	.word	0xfffff9ff

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	0002      	movs	r2, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d34:	d828      	bhi.n	8000d88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d36:	4a2f      	ldr	r2, [pc, #188]	@ (8000df4 <__NVIC_SetPriority+0xd4>)
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b25b      	sxtb	r3, r3
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	33c0      	adds	r3, #192	@ 0xc0
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	589b      	ldr	r3, [r3, r2]
 8000d46:	1dfa      	adds	r2, r7, #7
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	400a      	ands	r2, r1
 8000d50:	00d2      	lsls	r2, r2, #3
 8000d52:	21ff      	movs	r1, #255	@ 0xff
 8000d54:	4091      	lsls	r1, r2
 8000d56:	000a      	movs	r2, r1
 8000d58:	43d2      	mvns	r2, r2
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	019b      	lsls	r3, r3, #6
 8000d62:	22ff      	movs	r2, #255	@ 0xff
 8000d64:	401a      	ands	r2, r3
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	4003      	ands	r3, r0
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d74:	481f      	ldr	r0, [pc, #124]	@ (8000df4 <__NVIC_SetPriority+0xd4>)
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	089b      	lsrs	r3, r3, #2
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	33c0      	adds	r3, #192	@ 0xc0
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d86:	e031      	b.n	8000dec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d88:	4a1b      	ldr	r2, [pc, #108]	@ (8000df8 <__NVIC_SetPriority+0xd8>)
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	0019      	movs	r1, r3
 8000d90:	230f      	movs	r3, #15
 8000d92:	400b      	ands	r3, r1
 8000d94:	3b08      	subs	r3, #8
 8000d96:	089b      	lsrs	r3, r3, #2
 8000d98:	3306      	adds	r3, #6
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	18d3      	adds	r3, r2, r3
 8000d9e:	3304      	adds	r3, #4
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	1dfa      	adds	r2, r7, #7
 8000da4:	7812      	ldrb	r2, [r2, #0]
 8000da6:	0011      	movs	r1, r2
 8000da8:	2203      	movs	r2, #3
 8000daa:	400a      	ands	r2, r1
 8000dac:	00d2      	lsls	r2, r2, #3
 8000dae:	21ff      	movs	r1, #255	@ 0xff
 8000db0:	4091      	lsls	r1, r2
 8000db2:	000a      	movs	r2, r1
 8000db4:	43d2      	mvns	r2, r2
 8000db6:	401a      	ands	r2, r3
 8000db8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	019b      	lsls	r3, r3, #6
 8000dbe:	22ff      	movs	r2, #255	@ 0xff
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	2303      	movs	r3, #3
 8000dca:	4003      	ands	r3, r0
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd0:	4809      	ldr	r0, [pc, #36]	@ (8000df8 <__NVIC_SetPriority+0xd8>)
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	001c      	movs	r4, r3
 8000dd8:	230f      	movs	r3, #15
 8000dda:	4023      	ands	r3, r4
 8000ddc:	3b08      	subs	r3, #8
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	430a      	orrs	r2, r1
 8000de2:	3306      	adds	r3, #6
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	18c3      	adds	r3, r0, r3
 8000de8:	3304      	adds	r3, #4
 8000dea:	601a      	str	r2, [r3, #0]
}
 8000dec:	46c0      	nop			@ (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b003      	add	sp, #12
 8000df2:	bd90      	pop	{r4, r7, pc}
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	1e5a      	subs	r2, r3, #1
 8000e08:	2380      	movs	r3, #128	@ 0x80
 8000e0a:	045b      	lsls	r3, r3, #17
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d301      	bcc.n	8000e14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e10:	2301      	movs	r3, #1
 8000e12:	e010      	b.n	8000e36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e14:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <SysTick_Config+0x44>)
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	3a01      	subs	r2, #1
 8000e1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	425b      	negs	r3, r3
 8000e20:	2103      	movs	r1, #3
 8000e22:	0018      	movs	r0, r3
 8000e24:	f7ff ff7c 	bl	8000d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e28:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <SysTick_Config+0x44>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2e:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <SysTick_Config+0x44>)
 8000e30:	2207      	movs	r2, #7
 8000e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	0018      	movs	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	e000e010 	.word	0xe000e010

08000e44 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	210f      	movs	r1, #15
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	1c02      	adds	r2, r0, #0
 8000e54:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	0011      	movs	r1, r2
 8000e60:	0018      	movs	r0, r3
 8000e62:	f7ff ff5d 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b004      	add	sp, #16
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff ffbf 	bl	8000dfc <SysTick_Config>
 8000e7e:	0003      	movs	r3, r0
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b002      	add	sp, #8
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e96:	e147      	b.n	8001128 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	000a      	movs	r2, r1
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d100      	bne.n	8000eb0 <HAL_GPIO_Init+0x28>
 8000eae:	e138      	b.n	8001122 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d005      	beq.n	8000ec8 <HAL_GPIO_Init+0x40>
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d130      	bne.n	8000f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	0013      	movs	r3, r2
 8000ed8:	43da      	mvns	r2, r3
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	409a      	lsls	r2, r3
 8000eea:	0013      	movs	r3, r2
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000efe:	2201      	movs	r2, #1
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
 8000f04:	0013      	movs	r3, r2
 8000f06:	43da      	mvns	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	091b      	lsrs	r3, r3, #4
 8000f14:	2201      	movs	r2, #1
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2203      	movs	r2, #3
 8000f30:	4013      	ands	r3, r2
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d017      	beq.n	8000f66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	409a      	lsls	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	43da      	mvns	r2, r3
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d123      	bne.n	8000fba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	0092      	lsls	r2, r2, #2
 8000f7c:	58d3      	ldr	r3, [r2, r3]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	2207      	movs	r2, #7
 8000f84:	4013      	ands	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	220f      	movs	r2, #15
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	0013      	movs	r3, r2
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	691a      	ldr	r2, [r3, #16]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	2107      	movs	r1, #7
 8000f9e:	400b      	ands	r3, r1
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	08da      	lsrs	r2, r3, #3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3208      	adds	r2, #8
 8000fb4:	0092      	lsls	r2, r2, #2
 8000fb6:	6939      	ldr	r1, [r7, #16]
 8000fb8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	409a      	lsls	r2, r3
 8000fc8:	0013      	movs	r3, r2
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	401a      	ands	r2, r3
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	0013      	movs	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	23c0      	movs	r3, #192	@ 0xc0
 8000ff4:	029b      	lsls	r3, r3, #10
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d100      	bne.n	8000ffc <HAL_GPIO_Init+0x174>
 8000ffa:	e092      	b.n	8001122 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ffc:	4a50      	ldr	r2, [pc, #320]	@ (8001140 <HAL_GPIO_Init+0x2b8>)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	3318      	adds	r3, #24
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	589b      	ldr	r3, [r3, r2]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2203      	movs	r2, #3
 800100e:	4013      	ands	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	220f      	movs	r2, #15
 8001014:	409a      	lsls	r2, r3
 8001016:	0013      	movs	r3, r2
 8001018:	43da      	mvns	r2, r3
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	23a0      	movs	r3, #160	@ 0xa0
 8001024:	05db      	lsls	r3, r3, #23
 8001026:	429a      	cmp	r2, r3
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x1ca>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a45      	ldr	r2, [pc, #276]	@ (8001144 <HAL_GPIO_Init+0x2bc>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x1c6>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a44      	ldr	r2, [pc, #272]	@ (8001148 <HAL_GPIO_Init+0x2c0>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x1c2>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a43      	ldr	r2, [pc, #268]	@ (800114c <HAL_GPIO_Init+0x2c4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x1be>
 8001042:	2303      	movs	r3, #3
 8001044:	e006      	b.n	8001054 <HAL_GPIO_Init+0x1cc>
 8001046:	2305      	movs	r3, #5
 8001048:	e004      	b.n	8001054 <HAL_GPIO_Init+0x1cc>
 800104a:	2302      	movs	r3, #2
 800104c:	e002      	b.n	8001054 <HAL_GPIO_Init+0x1cc>
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <HAL_GPIO_Init+0x1cc>
 8001052:	2300      	movs	r3, #0
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	2103      	movs	r1, #3
 8001058:	400a      	ands	r2, r1
 800105a:	00d2      	lsls	r2, r2, #3
 800105c:	4093      	lsls	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001064:	4936      	ldr	r1, [pc, #216]	@ (8001140 <HAL_GPIO_Init+0x2b8>)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3318      	adds	r3, #24
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001072:	4b33      	ldr	r3, [pc, #204]	@ (8001140 <HAL_GPIO_Init+0x2b8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43da      	mvns	r2, r3
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	2380      	movs	r3, #128	@ 0x80
 8001088:	035b      	lsls	r3, r3, #13
 800108a:	4013      	ands	r3, r2
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001096:	4b2a      	ldr	r3, [pc, #168]	@ (8001140 <HAL_GPIO_Init+0x2b8>)
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800109c:	4b28      	ldr	r3, [pc, #160]	@ (8001140 <HAL_GPIO_Init+0x2b8>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43da      	mvns	r2, r3
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	2380      	movs	r3, #128	@ 0x80
 80010b2:	039b      	lsls	r3, r3, #14
 80010b4:	4013      	ands	r3, r2
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <HAL_GPIO_Init+0x2b8>)
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001140 <HAL_GPIO_Init+0x2b8>)
 80010c8:	2384      	movs	r3, #132	@ 0x84
 80010ca:	58d3      	ldr	r3, [r2, r3]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	43da      	mvns	r2, r3
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	2380      	movs	r3, #128	@ 0x80
 80010de:	029b      	lsls	r3, r3, #10
 80010e0:	4013      	ands	r3, r2
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010ec:	4914      	ldr	r1, [pc, #80]	@ (8001140 <HAL_GPIO_Init+0x2b8>)
 80010ee:	2284      	movs	r2, #132	@ 0x84
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80010f4:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <HAL_GPIO_Init+0x2b8>)
 80010f6:	2380      	movs	r3, #128	@ 0x80
 80010f8:	58d3      	ldr	r3, [r2, r3]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43da      	mvns	r2, r3
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	2380      	movs	r3, #128	@ 0x80
 800110c:	025b      	lsls	r3, r3, #9
 800110e:	4013      	ands	r3, r2
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800111a:	4909      	ldr	r1, [pc, #36]	@ (8001140 <HAL_GPIO_Init+0x2b8>)
 800111c:	2280      	movs	r2, #128	@ 0x80
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	40da      	lsrs	r2, r3
 8001130:	1e13      	subs	r3, r2, #0
 8001132:	d000      	beq.n	8001136 <HAL_GPIO_Init+0x2ae>
 8001134:	e6b0      	b.n	8000e98 <HAL_GPIO_Init+0x10>
  }
}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	46c0      	nop			@ (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	b006      	add	sp, #24
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40021800 	.word	0x40021800
 8001144:	50000400 	.word	0x50000400
 8001148:	50000800 	.word	0x50000800
 800114c:	50000c00 	.word	0x50000c00

08001150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	0008      	movs	r0, r1
 800115a:	0011      	movs	r1, r2
 800115c:	1cbb      	adds	r3, r7, #2
 800115e:	1c02      	adds	r2, r0, #0
 8001160:	801a      	strh	r2, [r3, #0]
 8001162:	1c7b      	adds	r3, r7, #1
 8001164:	1c0a      	adds	r2, r1, #0
 8001166:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001168:	1c7b      	adds	r3, r7, #1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d004      	beq.n	800117a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001170:	1cbb      	adds	r3, r7, #2
 8001172:	881a      	ldrh	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001178:	e003      	b.n	8001182 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800117a:	1cbb      	adds	r3, r7, #2
 800117c:	881a      	ldrh	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	46bd      	mov	sp, r7
 8001186:	b002      	add	sp, #8
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a19      	ldr	r2, [pc, #100]	@ (8001200 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800119a:	4013      	ands	r3, r2
 800119c:	0019      	movs	r1, r3
 800119e:	4b17      	ldr	r3, [pc, #92]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	2380      	movs	r3, #128	@ 0x80
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d11f      	bne.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	0013      	movs	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	189b      	adds	r3, r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4912      	ldr	r1, [pc, #72]	@ (8001208 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80011be:	0018      	movs	r0, r3
 80011c0:	f7fe ffa0 	bl	8000104 <__udivsi3>
 80011c4:	0003      	movs	r3, r0
 80011c6:	3301      	adds	r3, #1
 80011c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ca:	e008      	b.n	80011de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	e001      	b.n	80011de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e009      	b.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011de:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	2380      	movs	r3, #128	@ 0x80
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	401a      	ands	r2, r3
 80011e8:	2380      	movs	r3, #128	@ 0x80
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d0ed      	beq.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	0018      	movs	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b004      	add	sp, #16
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	40007000 	.word	0x40007000
 8001200:	fffff9ff 	.word	0xfffff9ff
 8001204:	20000000 	.word	0x20000000
 8001208:	000f4240 	.word	0x000f4240

0800120c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001210:	4b03      	ldr	r3, [pc, #12]	@ (8001220 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	23e0      	movs	r3, #224	@ 0xe0
 8001216:	01db      	lsls	r3, r3, #7
 8001218:	4013      	ands	r3, r2
}
 800121a:	0018      	movs	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e2fe      	b.n	8001834 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2201      	movs	r2, #1
 800123c:	4013      	ands	r3, r2
 800123e:	d100      	bne.n	8001242 <HAL_RCC_OscConfig+0x1e>
 8001240:	e07c      	b.n	800133c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001242:	4bc3      	ldr	r3, [pc, #780]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2238      	movs	r2, #56	@ 0x38
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800124c:	4bc0      	ldr	r3, [pc, #768]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2203      	movs	r2, #3
 8001252:	4013      	ands	r3, r2
 8001254:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	2b10      	cmp	r3, #16
 800125a:	d102      	bne.n	8001262 <HAL_RCC_OscConfig+0x3e>
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	2b03      	cmp	r3, #3
 8001260:	d002      	beq.n	8001268 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2b08      	cmp	r3, #8
 8001266:	d10b      	bne.n	8001280 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001268:	4bb9      	ldr	r3, [pc, #740]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	2380      	movs	r3, #128	@ 0x80
 800126e:	029b      	lsls	r3, r3, #10
 8001270:	4013      	ands	r3, r2
 8001272:	d062      	beq.n	800133a <HAL_RCC_OscConfig+0x116>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d15e      	bne.n	800133a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e2d9      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	2380      	movs	r3, #128	@ 0x80
 8001286:	025b      	lsls	r3, r3, #9
 8001288:	429a      	cmp	r2, r3
 800128a:	d107      	bne.n	800129c <HAL_RCC_OscConfig+0x78>
 800128c:	4bb0      	ldr	r3, [pc, #704]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4baf      	ldr	r3, [pc, #700]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001292:	2180      	movs	r1, #128	@ 0x80
 8001294:	0249      	lsls	r1, r1, #9
 8001296:	430a      	orrs	r2, r1
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	e020      	b.n	80012de <HAL_RCC_OscConfig+0xba>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	23a0      	movs	r3, #160	@ 0xa0
 80012a2:	02db      	lsls	r3, r3, #11
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d10e      	bne.n	80012c6 <HAL_RCC_OscConfig+0xa2>
 80012a8:	4ba9      	ldr	r3, [pc, #676]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4ba8      	ldr	r3, [pc, #672]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012ae:	2180      	movs	r1, #128	@ 0x80
 80012b0:	02c9      	lsls	r1, r1, #11
 80012b2:	430a      	orrs	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	4ba6      	ldr	r3, [pc, #664]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4ba5      	ldr	r3, [pc, #660]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012bc:	2180      	movs	r1, #128	@ 0x80
 80012be:	0249      	lsls	r1, r1, #9
 80012c0:	430a      	orrs	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	e00b      	b.n	80012de <HAL_RCC_OscConfig+0xba>
 80012c6:	4ba2      	ldr	r3, [pc, #648]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4ba1      	ldr	r3, [pc, #644]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012cc:	49a1      	ldr	r1, [pc, #644]	@ (8001554 <HAL_RCC_OscConfig+0x330>)
 80012ce:	400a      	ands	r2, r1
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	4b9f      	ldr	r3, [pc, #636]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	4b9e      	ldr	r3, [pc, #632]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012d8:	499f      	ldr	r1, [pc, #636]	@ (8001558 <HAL_RCC_OscConfig+0x334>)
 80012da:	400a      	ands	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d014      	beq.n	8001310 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e6:	f7ff fcd7 	bl	8000c98 <HAL_GetTick>
 80012ea:	0003      	movs	r3, r0
 80012ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fcd2 	bl	8000c98 <HAL_GetTick>
 80012f4:	0002      	movs	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	@ 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e298      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001302:	4b93      	ldr	r3, [pc, #588]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	2380      	movs	r3, #128	@ 0x80
 8001308:	029b      	lsls	r3, r3, #10
 800130a:	4013      	ands	r3, r2
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0xcc>
 800130e:	e015      	b.n	800133c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff fcc2 	bl	8000c98 <HAL_GetTick>
 8001314:	0003      	movs	r3, r0
 8001316:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800131a:	f7ff fcbd 	bl	8000c98 <HAL_GetTick>
 800131e:	0002      	movs	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b64      	cmp	r3, #100	@ 0x64
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e283      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800132c:	4b88      	ldr	r3, [pc, #544]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2380      	movs	r3, #128	@ 0x80
 8001332:	029b      	lsls	r3, r3, #10
 8001334:	4013      	ands	r3, r2
 8001336:	d1f0      	bne.n	800131a <HAL_RCC_OscConfig+0xf6>
 8001338:	e000      	b.n	800133c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2202      	movs	r2, #2
 8001342:	4013      	ands	r3, r2
 8001344:	d100      	bne.n	8001348 <HAL_RCC_OscConfig+0x124>
 8001346:	e099      	b.n	800147c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001348:	4b81      	ldr	r3, [pc, #516]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2238      	movs	r2, #56	@ 0x38
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001352:	4b7f      	ldr	r3, [pc, #508]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2203      	movs	r2, #3
 8001358:	4013      	ands	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2b10      	cmp	r3, #16
 8001360:	d102      	bne.n	8001368 <HAL_RCC_OscConfig+0x144>
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d002      	beq.n	800136e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d135      	bne.n	80013da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800136e:	4b78      	ldr	r3, [pc, #480]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	2380      	movs	r3, #128	@ 0x80
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	4013      	ands	r3, r2
 8001378:	d005      	beq.n	8001386 <HAL_RCC_OscConfig+0x162>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e256      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001386:	4b72      	ldr	r3, [pc, #456]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4a74      	ldr	r2, [pc, #464]	@ (800155c <HAL_RCC_OscConfig+0x338>)
 800138c:	4013      	ands	r3, r2
 800138e:	0019      	movs	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	021a      	lsls	r2, r3, #8
 8001396:	4b6e      	ldr	r3, [pc, #440]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001398:	430a      	orrs	r2, r1
 800139a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d112      	bne.n	80013c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013a2:	4b6b      	ldr	r3, [pc, #428]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001560 <HAL_RCC_OscConfig+0x33c>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	0019      	movs	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	4b67      	ldr	r3, [pc, #412]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80013b2:	430a      	orrs	r2, r1
 80013b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80013b6:	4b66      	ldr	r3, [pc, #408]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	0adb      	lsrs	r3, r3, #11
 80013bc:	2207      	movs	r2, #7
 80013be:	4013      	ands	r3, r2
 80013c0:	4a68      	ldr	r2, [pc, #416]	@ (8001564 <HAL_RCC_OscConfig+0x340>)
 80013c2:	40da      	lsrs	r2, r3
 80013c4:	4b68      	ldr	r3, [pc, #416]	@ (8001568 <HAL_RCC_OscConfig+0x344>)
 80013c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013c8:	4b68      	ldr	r3, [pc, #416]	@ (800156c <HAL_RCC_OscConfig+0x348>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7ff fc07 	bl	8000be0 <HAL_InitTick>
 80013d2:	1e03      	subs	r3, r0, #0
 80013d4:	d051      	beq.n	800147a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e22c      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d030      	beq.n	8001444 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001560 <HAL_RCC_OscConfig+0x33c>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	0019      	movs	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	4b57      	ldr	r3, [pc, #348]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80013f2:	430a      	orrs	r2, r1
 80013f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80013f6:	4b56      	ldr	r3, [pc, #344]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b55      	ldr	r3, [pc, #340]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80013fc:	2180      	movs	r1, #128	@ 0x80
 80013fe:	0049      	lsls	r1, r1, #1
 8001400:	430a      	orrs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fc48 	bl	8000c98 <HAL_GetTick>
 8001408:	0003      	movs	r3, r0
 800140a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140e:	f7ff fc43 	bl	8000c98 <HAL_GetTick>
 8001412:	0002      	movs	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e209      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001420:	4b4b      	ldr	r3, [pc, #300]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	2380      	movs	r3, #128	@ 0x80
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4013      	ands	r3, r2
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142c:	4b48      	ldr	r3, [pc, #288]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4a4a      	ldr	r2, [pc, #296]	@ (800155c <HAL_RCC_OscConfig+0x338>)
 8001432:	4013      	ands	r3, r2
 8001434:	0019      	movs	r1, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	021a      	lsls	r2, r3, #8
 800143c:	4b44      	ldr	r3, [pc, #272]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 800143e:	430a      	orrs	r2, r1
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	e01b      	b.n	800147c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001444:	4b42      	ldr	r3, [pc, #264]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b41      	ldr	r3, [pc, #260]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 800144a:	4949      	ldr	r1, [pc, #292]	@ (8001570 <HAL_RCC_OscConfig+0x34c>)
 800144c:	400a      	ands	r2, r1
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff fc22 	bl	8000c98 <HAL_GetTick>
 8001454:	0003      	movs	r3, r0
 8001456:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800145a:	f7ff fc1d 	bl	8000c98 <HAL_GetTick>
 800145e:	0002      	movs	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e1e3      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800146c:	4b38      	ldr	r3, [pc, #224]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	2380      	movs	r3, #128	@ 0x80
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4013      	ands	r3, r2
 8001476:	d1f0      	bne.n	800145a <HAL_RCC_OscConfig+0x236>
 8001478:	e000      	b.n	800147c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800147a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2208      	movs	r2, #8
 8001482:	4013      	ands	r3, r2
 8001484:	d047      	beq.n	8001516 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001486:	4b32      	ldr	r3, [pc, #200]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2238      	movs	r2, #56	@ 0x38
 800148c:	4013      	ands	r3, r2
 800148e:	2b18      	cmp	r3, #24
 8001490:	d10a      	bne.n	80014a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001492:	4b2f      	ldr	r3, [pc, #188]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001496:	2202      	movs	r2, #2
 8001498:	4013      	ands	r3, r2
 800149a:	d03c      	beq.n	8001516 <HAL_RCC_OscConfig+0x2f2>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d138      	bne.n	8001516 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e1c5      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d019      	beq.n	80014e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80014b0:	4b27      	ldr	r3, [pc, #156]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80014b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014b4:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	430a      	orrs	r2, r1
 80014ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff fbec 	bl	8000c98 <HAL_GetTick>
 80014c0:	0003      	movs	r3, r0
 80014c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c6:	f7ff fbe7 	bl	8000c98 <HAL_GetTick>
 80014ca:	0002      	movs	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e1ad      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80014da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014dc:	2202      	movs	r2, #2
 80014de:	4013      	ands	r3, r2
 80014e0:	d0f1      	beq.n	80014c6 <HAL_RCC_OscConfig+0x2a2>
 80014e2:	e018      	b.n	8001516 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80014e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80014e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014e8:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 80014ea:	2101      	movs	r1, #1
 80014ec:	438a      	bics	r2, r1
 80014ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff fbd2 	bl	8000c98 <HAL_GetTick>
 80014f4:	0003      	movs	r3, r0
 80014f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fa:	f7ff fbcd 	bl	8000c98 <HAL_GetTick>
 80014fe:	0002      	movs	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e193      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800150c:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 800150e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001510:	2202      	movs	r2, #2
 8001512:	4013      	ands	r3, r2
 8001514:	d1f1      	bne.n	80014fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2204      	movs	r2, #4
 800151c:	4013      	ands	r3, r2
 800151e:	d100      	bne.n	8001522 <HAL_RCC_OscConfig+0x2fe>
 8001520:	e0c6      	b.n	80016b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001522:	231f      	movs	r3, #31
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800152a:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2238      	movs	r2, #56	@ 0x38
 8001530:	4013      	ands	r3, r2
 8001532:	2b20      	cmp	r3, #32
 8001534:	d11e      	bne.n	8001574 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800153a:	2202      	movs	r2, #2
 800153c:	4013      	ands	r3, r2
 800153e:	d100      	bne.n	8001542 <HAL_RCC_OscConfig+0x31e>
 8001540:	e0b6      	b.n	80016b0 <HAL_RCC_OscConfig+0x48c>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d000      	beq.n	800154c <HAL_RCC_OscConfig+0x328>
 800154a:	e0b1      	b.n	80016b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e171      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
 8001550:	40021000 	.word	0x40021000
 8001554:	fffeffff 	.word	0xfffeffff
 8001558:	fffbffff 	.word	0xfffbffff
 800155c:	ffff80ff 	.word	0xffff80ff
 8001560:	ffffc7ff 	.word	0xffffc7ff
 8001564:	00f42400 	.word	0x00f42400
 8001568:	20000000 	.word	0x20000000
 800156c:	20000004 	.word	0x20000004
 8001570:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001574:	4bb1      	ldr	r3, [pc, #708]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 8001576:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001578:	2380      	movs	r3, #128	@ 0x80
 800157a:	055b      	lsls	r3, r3, #21
 800157c:	4013      	ands	r3, r2
 800157e:	d101      	bne.n	8001584 <HAL_RCC_OscConfig+0x360>
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <HAL_RCC_OscConfig+0x362>
 8001584:	2300      	movs	r3, #0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d011      	beq.n	80015ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	4bac      	ldr	r3, [pc, #688]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 800158c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800158e:	4bab      	ldr	r3, [pc, #684]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 8001590:	2180      	movs	r1, #128	@ 0x80
 8001592:	0549      	lsls	r1, r1, #21
 8001594:	430a      	orrs	r2, r1
 8001596:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001598:	4ba8      	ldr	r3, [pc, #672]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 800159a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800159c:	2380      	movs	r3, #128	@ 0x80
 800159e:	055b      	lsls	r3, r3, #21
 80015a0:	4013      	ands	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80015a6:	231f      	movs	r3, #31
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	2201      	movs	r2, #1
 80015ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ae:	4ba4      	ldr	r3, [pc, #656]	@ (8001840 <HAL_RCC_OscConfig+0x61c>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	2380      	movs	r3, #128	@ 0x80
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4013      	ands	r3, r2
 80015b8:	d11a      	bne.n	80015f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015ba:	4ba1      	ldr	r3, [pc, #644]	@ (8001840 <HAL_RCC_OscConfig+0x61c>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4ba0      	ldr	r3, [pc, #640]	@ (8001840 <HAL_RCC_OscConfig+0x61c>)
 80015c0:	2180      	movs	r1, #128	@ 0x80
 80015c2:	0049      	lsls	r1, r1, #1
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fb66 	bl	8000c98 <HAL_GetTick>
 80015cc:	0003      	movs	r3, r0
 80015ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d2:	f7ff fb61 	bl	8000c98 <HAL_GetTick>
 80015d6:	0002      	movs	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e127      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e4:	4b96      	ldr	r3, [pc, #600]	@ (8001840 <HAL_RCC_OscConfig+0x61c>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	2380      	movs	r3, #128	@ 0x80
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4013      	ands	r3, r2
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d106      	bne.n	8001606 <HAL_RCC_OscConfig+0x3e2>
 80015f8:	4b90      	ldr	r3, [pc, #576]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 80015fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015fc:	4b8f      	ldr	r3, [pc, #572]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 80015fe:	2101      	movs	r1, #1
 8001600:	430a      	orrs	r2, r1
 8001602:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001604:	e01c      	b.n	8001640 <HAL_RCC_OscConfig+0x41c>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b05      	cmp	r3, #5
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x404>
 800160e:	4b8b      	ldr	r3, [pc, #556]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 8001610:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001612:	4b8a      	ldr	r3, [pc, #552]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 8001614:	2104      	movs	r1, #4
 8001616:	430a      	orrs	r2, r1
 8001618:	65da      	str	r2, [r3, #92]	@ 0x5c
 800161a:	4b88      	ldr	r3, [pc, #544]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 800161c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800161e:	4b87      	ldr	r3, [pc, #540]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 8001620:	2101      	movs	r1, #1
 8001622:	430a      	orrs	r2, r1
 8001624:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001626:	e00b      	b.n	8001640 <HAL_RCC_OscConfig+0x41c>
 8001628:	4b84      	ldr	r3, [pc, #528]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 800162a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800162c:	4b83      	ldr	r3, [pc, #524]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 800162e:	2101      	movs	r1, #1
 8001630:	438a      	bics	r2, r1
 8001632:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001634:	4b81      	ldr	r3, [pc, #516]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 8001636:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001638:	4b80      	ldr	r3, [pc, #512]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 800163a:	2104      	movs	r1, #4
 800163c:	438a      	bics	r2, r1
 800163e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d014      	beq.n	8001672 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff fb26 	bl	8000c98 <HAL_GetTick>
 800164c:	0003      	movs	r3, r0
 800164e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001650:	e009      	b.n	8001666 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001652:	f7ff fb21 	bl	8000c98 <HAL_GetTick>
 8001656:	0002      	movs	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	4a79      	ldr	r2, [pc, #484]	@ (8001844 <HAL_RCC_OscConfig+0x620>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e0e6      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001666:	4b75      	ldr	r3, [pc, #468]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 8001668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800166a:	2202      	movs	r2, #2
 800166c:	4013      	ands	r3, r2
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x42e>
 8001670:	e013      	b.n	800169a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001672:	f7ff fb11 	bl	8000c98 <HAL_GetTick>
 8001676:	0003      	movs	r3, r0
 8001678:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800167a:	e009      	b.n	8001690 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167c:	f7ff fb0c 	bl	8000c98 <HAL_GetTick>
 8001680:	0002      	movs	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	4a6f      	ldr	r2, [pc, #444]	@ (8001844 <HAL_RCC_OscConfig+0x620>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e0d1      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001690:	4b6a      	ldr	r3, [pc, #424]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 8001692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001694:	2202      	movs	r2, #2
 8001696:	4013      	ands	r3, r2
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800169a:	231f      	movs	r3, #31
 800169c:	18fb      	adds	r3, r7, r3
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d105      	bne.n	80016b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80016a4:	4b65      	ldr	r3, [pc, #404]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 80016a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016a8:	4b64      	ldr	r3, [pc, #400]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 80016aa:	4967      	ldr	r1, [pc, #412]	@ (8001848 <HAL_RCC_OscConfig+0x624>)
 80016ac:	400a      	ands	r2, r1
 80016ae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d100      	bne.n	80016ba <HAL_RCC_OscConfig+0x496>
 80016b8:	e0bb      	b.n	8001832 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ba:	4b60      	ldr	r3, [pc, #384]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2238      	movs	r2, #56	@ 0x38
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b10      	cmp	r3, #16
 80016c4:	d100      	bne.n	80016c8 <HAL_RCC_OscConfig+0x4a4>
 80016c6:	e07b      	b.n	80017c0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d156      	bne.n	800177e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d0:	4b5a      	ldr	r3, [pc, #360]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b59      	ldr	r3, [pc, #356]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 80016d6:	495d      	ldr	r1, [pc, #372]	@ (800184c <HAL_RCC_OscConfig+0x628>)
 80016d8:	400a      	ands	r2, r1
 80016da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff fadc 	bl	8000c98 <HAL_GetTick>
 80016e0:	0003      	movs	r3, r0
 80016e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e6:	f7ff fad7 	bl	8000c98 <HAL_GetTick>
 80016ea:	0002      	movs	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e09d      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f8:	4b50      	ldr	r3, [pc, #320]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	@ 0x80
 80016fe:	049b      	lsls	r3, r3, #18
 8001700:	4013      	ands	r3, r2
 8001702:	d1f0      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001704:	4b4d      	ldr	r3, [pc, #308]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4a51      	ldr	r2, [pc, #324]	@ (8001850 <HAL_RCC_OscConfig+0x62c>)
 800170a:	4013      	ands	r3, r2
 800170c:	0019      	movs	r1, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1a      	ldr	r2, [r3, #32]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001730:	431a      	orrs	r2, r3
 8001732:	4b42      	ldr	r3, [pc, #264]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 8001734:	430a      	orrs	r2, r1
 8001736:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001738:	4b40      	ldr	r3, [pc, #256]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b3f      	ldr	r3, [pc, #252]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 800173e:	2180      	movs	r1, #128	@ 0x80
 8001740:	0449      	lsls	r1, r1, #17
 8001742:	430a      	orrs	r2, r1
 8001744:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001746:	4b3d      	ldr	r3, [pc, #244]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	4b3c      	ldr	r3, [pc, #240]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 800174c:	2180      	movs	r1, #128	@ 0x80
 800174e:	0549      	lsls	r1, r1, #21
 8001750:	430a      	orrs	r2, r1
 8001752:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff faa0 	bl	8000c98 <HAL_GetTick>
 8001758:	0003      	movs	r3, r0
 800175a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175e:	f7ff fa9b 	bl	8000c98 <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e061      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001770:	4b32      	ldr	r3, [pc, #200]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	@ 0x80
 8001776:	049b      	lsls	r3, r3, #18
 8001778:	4013      	ands	r3, r2
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x53a>
 800177c:	e059      	b.n	8001832 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177e:	4b2f      	ldr	r3, [pc, #188]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b2e      	ldr	r3, [pc, #184]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 8001784:	4931      	ldr	r1, [pc, #196]	@ (800184c <HAL_RCC_OscConfig+0x628>)
 8001786:	400a      	ands	r2, r1
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178a:	f7ff fa85 	bl	8000c98 <HAL_GetTick>
 800178e:	0003      	movs	r3, r0
 8001790:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff fa80 	bl	8000c98 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e046      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a6:	4b25      	ldr	r3, [pc, #148]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	049b      	lsls	r3, r3, #18
 80017ae:	4013      	ands	r3, r2
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80017b2:	4b22      	ldr	r3, [pc, #136]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	4b21      	ldr	r3, [pc, #132]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 80017b8:	4926      	ldr	r1, [pc, #152]	@ (8001854 <HAL_RCC_OscConfig+0x630>)
 80017ba:	400a      	ands	r2, r1
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	e038      	b.n	8001832 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e033      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <HAL_RCC_OscConfig+0x618>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	2203      	movs	r2, #3
 80017d6:	401a      	ands	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d126      	bne.n	800182e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	2270      	movs	r2, #112	@ 0x70
 80017e4:	401a      	ands	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d11f      	bne.n	800182e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	23fe      	movs	r3, #254	@ 0xfe
 80017f2:	01db      	lsls	r3, r3, #7
 80017f4:	401a      	ands	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d116      	bne.n	800182e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	23f8      	movs	r3, #248	@ 0xf8
 8001804:	039b      	lsls	r3, r3, #14
 8001806:	401a      	ands	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800180c:	429a      	cmp	r2, r3
 800180e:	d10e      	bne.n	800182e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	23e0      	movs	r3, #224	@ 0xe0
 8001814:	051b      	lsls	r3, r3, #20
 8001816:	401a      	ands	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800181c:	429a      	cmp	r2, r3
 800181e:	d106      	bne.n	800182e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	0f5b      	lsrs	r3, r3, #29
 8001824:	075a      	lsls	r2, r3, #29
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800182a:	429a      	cmp	r2, r3
 800182c:	d001      	beq.n	8001832 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	0018      	movs	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	b008      	add	sp, #32
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40021000 	.word	0x40021000
 8001840:	40007000 	.word	0x40007000
 8001844:	00001388 	.word	0x00001388
 8001848:	efffffff 	.word	0xefffffff
 800184c:	feffffff 	.word	0xfeffffff
 8001850:	11c1808c 	.word	0x11c1808c
 8001854:	eefefffc 	.word	0xeefefffc

08001858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0e9      	b.n	8001a40 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800186c:	4b76      	ldr	r3, [pc, #472]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2207      	movs	r2, #7
 8001872:	4013      	ands	r3, r2
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d91e      	bls.n	80018b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b73      	ldr	r3, [pc, #460]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2207      	movs	r2, #7
 8001880:	4393      	bics	r3, r2
 8001882:	0019      	movs	r1, r3
 8001884:	4b70      	ldr	r3, [pc, #448]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800188c:	f7ff fa04 	bl	8000c98 <HAL_GetTick>
 8001890:	0003      	movs	r3, r0
 8001892:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001894:	e009      	b.n	80018aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001896:	f7ff f9ff 	bl	8000c98 <HAL_GetTick>
 800189a:	0002      	movs	r2, r0
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	4a6a      	ldr	r2, [pc, #424]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e0ca      	b.n	8001a40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018aa:	4b67      	ldr	r3, [pc, #412]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2207      	movs	r2, #7
 80018b0:	4013      	ands	r3, r2
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d1ee      	bne.n	8001896 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2202      	movs	r2, #2
 80018be:	4013      	ands	r3, r2
 80018c0:	d015      	beq.n	80018ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2204      	movs	r2, #4
 80018c8:	4013      	ands	r3, r2
 80018ca:	d006      	beq.n	80018da <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018cc:	4b60      	ldr	r3, [pc, #384]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f8>)
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	4b5f      	ldr	r3, [pc, #380]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f8>)
 80018d2:	21e0      	movs	r1, #224	@ 0xe0
 80018d4:	01c9      	lsls	r1, r1, #7
 80018d6:	430a      	orrs	r2, r1
 80018d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018da:	4b5d      	ldr	r3, [pc, #372]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f8>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	4a5d      	ldr	r2, [pc, #372]	@ (8001a54 <HAL_RCC_ClockConfig+0x1fc>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	0019      	movs	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	4b59      	ldr	r3, [pc, #356]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f8>)
 80018ea:	430a      	orrs	r2, r1
 80018ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2201      	movs	r2, #1
 80018f4:	4013      	ands	r3, r2
 80018f6:	d057      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001900:	4b53      	ldr	r3, [pc, #332]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f8>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	2380      	movs	r3, #128	@ 0x80
 8001906:	029b      	lsls	r3, r3, #10
 8001908:	4013      	ands	r3, r2
 800190a:	d12b      	bne.n	8001964 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e097      	b.n	8001a40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d107      	bne.n	8001928 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001918:	4b4d      	ldr	r3, [pc, #308]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f8>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	2380      	movs	r3, #128	@ 0x80
 800191e:	049b      	lsls	r3, r3, #18
 8001920:	4013      	ands	r3, r2
 8001922:	d11f      	bne.n	8001964 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e08b      	b.n	8001a40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d107      	bne.n	8001940 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001930:	4b47      	ldr	r3, [pc, #284]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f8>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2380      	movs	r3, #128	@ 0x80
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4013      	ands	r3, r2
 800193a:	d113      	bne.n	8001964 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e07f      	b.n	8001a40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d106      	bne.n	8001956 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001948:	4b41      	ldr	r3, [pc, #260]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f8>)
 800194a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800194c:	2202      	movs	r2, #2
 800194e:	4013      	ands	r3, r2
 8001950:	d108      	bne.n	8001964 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e074      	b.n	8001a40 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001956:	4b3e      	ldr	r3, [pc, #248]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f8>)
 8001958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800195a:	2202      	movs	r2, #2
 800195c:	4013      	ands	r3, r2
 800195e:	d101      	bne.n	8001964 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e06d      	b.n	8001a40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001964:	4b3a      	ldr	r3, [pc, #232]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f8>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2207      	movs	r2, #7
 800196a:	4393      	bics	r3, r2
 800196c:	0019      	movs	r1, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	4b37      	ldr	r3, [pc, #220]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f8>)
 8001974:	430a      	orrs	r2, r1
 8001976:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001978:	f7ff f98e 	bl	8000c98 <HAL_GetTick>
 800197c:	0003      	movs	r3, r0
 800197e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001980:	e009      	b.n	8001996 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001982:	f7ff f989 	bl	8000c98 <HAL_GetTick>
 8001986:	0002      	movs	r2, r0
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	4a2f      	ldr	r2, [pc, #188]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e054      	b.n	8001a40 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	4b2e      	ldr	r3, [pc, #184]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f8>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2238      	movs	r2, #56	@ 0x38
 800199c:	401a      	ands	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d1ec      	bne.n	8001982 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019a8:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2207      	movs	r2, #7
 80019ae:	4013      	ands	r3, r2
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d21e      	bcs.n	80019f4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b24      	ldr	r3, [pc, #144]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2207      	movs	r2, #7
 80019bc:	4393      	bics	r3, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	4b21      	ldr	r3, [pc, #132]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019c8:	f7ff f966 	bl	8000c98 <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019d0:	e009      	b.n	80019e6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d2:	f7ff f961 	bl	8000c98 <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	4a1b      	ldr	r2, [pc, #108]	@ (8001a4c <HAL_RCC_ClockConfig+0x1f4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e02c      	b.n	8001a40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019e6:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <HAL_RCC_ClockConfig+0x1f0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2207      	movs	r2, #7
 80019ec:	4013      	ands	r3, r2
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d1ee      	bne.n	80019d2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2204      	movs	r2, #4
 80019fa:	4013      	ands	r3, r2
 80019fc:	d009      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019fe:	4b14      	ldr	r3, [pc, #80]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f8>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	4a15      	ldr	r2, [pc, #84]	@ (8001a58 <HAL_RCC_ClockConfig+0x200>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	0019      	movs	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f8>)
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a12:	f000 f829 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8001a16:	0001      	movs	r1, r0
 8001a18:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	220f      	movs	r2, #15
 8001a20:	401a      	ands	r2, r3
 8001a22:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <HAL_RCC_ClockConfig+0x204>)
 8001a24:	0092      	lsls	r2, r2, #2
 8001a26:	58d3      	ldr	r3, [r2, r3]
 8001a28:	221f      	movs	r2, #31
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	000a      	movs	r2, r1
 8001a2e:	40da      	lsrs	r2, r3
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_RCC_ClockConfig+0x208>)
 8001a32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a34:	4b0b      	ldr	r3, [pc, #44]	@ (8001a64 <HAL_RCC_ClockConfig+0x20c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7ff f8d1 	bl	8000be0 <HAL_InitTick>
 8001a3e:	0003      	movs	r3, r0
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b004      	add	sp, #16
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40022000 	.word	0x40022000
 8001a4c:	00001388 	.word	0x00001388
 8001a50:	40021000 	.word	0x40021000
 8001a54:	fffff0ff 	.word	0xfffff0ff
 8001a58:	ffff8fff 	.word	0xffff8fff
 8001a5c:	08003c40 	.word	0x08003c40
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000004 	.word	0x20000004

08001a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2238      	movs	r2, #56	@ 0x38
 8001a74:	4013      	ands	r3, r2
 8001a76:	d10f      	bne.n	8001a98 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a78:	4b39      	ldr	r3, [pc, #228]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0adb      	lsrs	r3, r3, #11
 8001a7e:	2207      	movs	r2, #7
 8001a80:	4013      	ands	r3, r2
 8001a82:	2201      	movs	r2, #1
 8001a84:	409a      	lsls	r2, r3
 8001a86:	0013      	movs	r3, r2
 8001a88:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	4835      	ldr	r0, [pc, #212]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a8e:	f7fe fb39 	bl	8000104 <__udivsi3>
 8001a92:	0003      	movs	r3, r0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	e05d      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a98:	4b31      	ldr	r3, [pc, #196]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2238      	movs	r2, #56	@ 0x38
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d102      	bne.n	8001aaa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001aa4:	4b30      	ldr	r3, [pc, #192]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x100>)
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	e054      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2238      	movs	r2, #56	@ 0x38
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	2b10      	cmp	r3, #16
 8001ab4:	d138      	bne.n	8001b28 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2203      	movs	r2, #3
 8001abc:	4013      	ands	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ac0:	4b27      	ldr	r3, [pc, #156]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	2207      	movs	r2, #7
 8001ac8:	4013      	ands	r3, r2
 8001aca:	3301      	adds	r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d10d      	bne.n	8001af0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	4824      	ldr	r0, [pc, #144]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ad8:	f7fe fb14 	bl	8000104 <__udivsi3>
 8001adc:	0003      	movs	r3, r0
 8001ade:	0019      	movs	r1, r3
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	227f      	movs	r2, #127	@ 0x7f
 8001ae8:	4013      	ands	r3, r2
 8001aea:	434b      	muls	r3, r1
 8001aec:	617b      	str	r3, [r7, #20]
        break;
 8001aee:	e00d      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	481c      	ldr	r0, [pc, #112]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001af4:	f7fe fb06 	bl	8000104 <__udivsi3>
 8001af8:	0003      	movs	r3, r0
 8001afa:	0019      	movs	r1, r3
 8001afc:	4b18      	ldr	r3, [pc, #96]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	227f      	movs	r2, #127	@ 0x7f
 8001b04:	4013      	ands	r3, r2
 8001b06:	434b      	muls	r3, r1
 8001b08:	617b      	str	r3, [r7, #20]
        break;
 8001b0a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b0c:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0f5b      	lsrs	r3, r3, #29
 8001b12:	2207      	movs	r2, #7
 8001b14:	4013      	ands	r3, r2
 8001b16:	3301      	adds	r3, #1
 8001b18:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	6978      	ldr	r0, [r7, #20]
 8001b1e:	f7fe faf1 	bl	8000104 <__udivsi3>
 8001b22:	0003      	movs	r3, r0
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	e015      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b28:	4b0d      	ldr	r3, [pc, #52]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2238      	movs	r2, #56	@ 0x38
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b20      	cmp	r3, #32
 8001b32:	d103      	bne.n	8001b3c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b34:	2380      	movs	r3, #128	@ 0x80
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	e00b      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b3c:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2238      	movs	r2, #56	@ 0x38
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b18      	cmp	r3, #24
 8001b46:	d103      	bne.n	8001b50 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b48:	23fa      	movs	r3, #250	@ 0xfa
 8001b4a:	01db      	lsls	r3, r3, #7
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	e001      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b54:	693b      	ldr	r3, [r7, #16]
}
 8001b56:	0018      	movs	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b006      	add	sp, #24
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	40021000 	.word	0x40021000
 8001b64:	00f42400 	.word	0x00f42400
 8001b68:	007a1200 	.word	0x007a1200

08001b6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b70:	4b02      	ldr	r3, [pc, #8]	@ (8001b7c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			@ (mov r8, r8)
 8001b7c:	20000000 	.word	0x20000000

08001b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b80:	b5b0      	push	{r4, r5, r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001b84:	f7ff fff2 	bl	8001b6c <HAL_RCC_GetHCLKFreq>
 8001b88:	0004      	movs	r4, r0
 8001b8a:	f7ff fb3f 	bl	800120c <LL_RCC_GetAPB1Prescaler>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	0b1a      	lsrs	r2, r3, #12
 8001b92:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b94:	0092      	lsls	r2, r2, #2
 8001b96:	58d3      	ldr	r3, [r2, r3]
 8001b98:	221f      	movs	r2, #31
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	40dc      	lsrs	r4, r3
 8001b9e:	0023      	movs	r3, r4
}
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba6:	46c0      	nop			@ (mov r8, r8)
 8001ba8:	08003c80 	.word	0x08003c80

08001bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001bb4:	2313      	movs	r3, #19
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bbc:	2312      	movs	r3, #18
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2380      	movs	r3, #128	@ 0x80
 8001bca:	029b      	lsls	r3, r3, #10
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d100      	bne.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001bd0:	e0a3      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd2:	2011      	movs	r0, #17
 8001bd4:	183b      	adds	r3, r7, r0
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bda:	4bc3      	ldr	r3, [pc, #780]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bde:	2380      	movs	r3, #128	@ 0x80
 8001be0:	055b      	lsls	r3, r3, #21
 8001be2:	4013      	ands	r3, r2
 8001be4:	d110      	bne.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	4bc0      	ldr	r3, [pc, #768]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001be8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bea:	4bbf      	ldr	r3, [pc, #764]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bec:	2180      	movs	r1, #128	@ 0x80
 8001bee:	0549      	lsls	r1, r1, #21
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001bf4:	4bbc      	ldr	r3, [pc, #752]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bf8:	2380      	movs	r3, #128	@ 0x80
 8001bfa:	055b      	lsls	r3, r3, #21
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c02:	183b      	adds	r3, r7, r0
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c08:	4bb8      	ldr	r3, [pc, #736]	@ (8001eec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4bb7      	ldr	r3, [pc, #732]	@ (8001eec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001c0e:	2180      	movs	r1, #128	@ 0x80
 8001c10:	0049      	lsls	r1, r1, #1
 8001c12:	430a      	orrs	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c16:	f7ff f83f 	bl	8000c98 <HAL_GetTick>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c1e:	e00b      	b.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c20:	f7ff f83a 	bl	8000c98 <HAL_GetTick>
 8001c24:	0002      	movs	r2, r0
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d904      	bls.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001c2e:	2313      	movs	r3, #19
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	2203      	movs	r2, #3
 8001c34:	701a      	strb	r2, [r3, #0]
        break;
 8001c36:	e005      	b.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c38:	4bac      	ldr	r3, [pc, #688]	@ (8001eec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2380      	movs	r3, #128	@ 0x80
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4013      	ands	r3, r2
 8001c42:	d0ed      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001c44:	2313      	movs	r3, #19
 8001c46:	18fb      	adds	r3, r7, r3
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d154      	bne.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c4e:	4ba6      	ldr	r3, [pc, #664]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c52:	23c0      	movs	r3, #192	@ 0xc0
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4013      	ands	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d019      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d014      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c6a:	4b9f      	ldr	r3, [pc, #636]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6e:	4aa0      	ldr	r2, [pc, #640]	@ (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c74:	4b9c      	ldr	r3, [pc, #624]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c78:	4b9b      	ldr	r3, [pc, #620]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c7a:	2180      	movs	r1, #128	@ 0x80
 8001c7c:	0249      	lsls	r1, r1, #9
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c82:	4b99      	ldr	r3, [pc, #612]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c86:	4b98      	ldr	r3, [pc, #608]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c88:	499a      	ldr	r1, [pc, #616]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001c8a:	400a      	ands	r2, r1
 8001c8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c8e:	4b96      	ldr	r3, [pc, #600]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d016      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7fe fffc 	bl	8000c98 <HAL_GetTick>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca4:	e00c      	b.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7fe fff7 	bl	8000c98 <HAL_GetTick>
 8001caa:	0002      	movs	r2, r0
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	4a91      	ldr	r2, [pc, #580]	@ (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d904      	bls.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001cb6:	2313      	movs	r3, #19
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	2203      	movs	r2, #3
 8001cbc:	701a      	strb	r2, [r3, #0]
            break;
 8001cbe:	e004      	b.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cc0:	4b89      	ldr	r3, [pc, #548]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d0ed      	beq.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001cca:	2313      	movs	r3, #19
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10a      	bne.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cd4:	4b84      	ldr	r3, [pc, #528]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd8:	4a85      	ldr	r2, [pc, #532]	@ (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	0019      	movs	r1, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ce2:	4b81      	ldr	r3, [pc, #516]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ce8:	e00c      	b.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001cea:	2312      	movs	r3, #18
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	2213      	movs	r2, #19
 8001cf0:	18ba      	adds	r2, r7, r2
 8001cf2:	7812      	ldrb	r2, [r2, #0]
 8001cf4:	701a      	strb	r2, [r3, #0]
 8001cf6:	e005      	b.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cf8:	2312      	movs	r3, #18
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	2213      	movs	r2, #19
 8001cfe:	18ba      	adds	r2, r7, r2
 8001d00:	7812      	ldrb	r2, [r2, #0]
 8001d02:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d04:	2311      	movs	r3, #17
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d105      	bne.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d0e:	4b76      	ldr	r3, [pc, #472]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d12:	4b75      	ldr	r3, [pc, #468]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d14:	4979      	ldr	r1, [pc, #484]	@ (8001efc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001d16:	400a      	ands	r2, r1
 8001d18:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4013      	ands	r3, r2
 8001d22:	d009      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d24:	4b70      	ldr	r3, [pc, #448]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d28:	2203      	movs	r2, #3
 8001d2a:	4393      	bics	r3, r2
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	4b6d      	ldr	r3, [pc, #436]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d34:	430a      	orrs	r2, r1
 8001d36:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d009      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d42:	4b69      	ldr	r3, [pc, #420]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d46:	220c      	movs	r2, #12
 8001d48:	4393      	bics	r3, r2
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	4b65      	ldr	r3, [pc, #404]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d52:	430a      	orrs	r2, r1
 8001d54:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d009      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d60:	4b61      	ldr	r3, [pc, #388]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d64:	4a66      	ldr	r2, [pc, #408]	@ (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	0019      	movs	r1, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d70:	430a      	orrs	r2, r1
 8001d72:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2380      	movs	r3, #128	@ 0x80
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d009      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d80:	4b59      	ldr	r3, [pc, #356]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d84:	4a5f      	ldr	r2, [pc, #380]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	0019      	movs	r1, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699a      	ldr	r2, [r3, #24]
 8001d8e:	4b56      	ldr	r3, [pc, #344]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d90:	430a      	orrs	r2, r1
 8001d92:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d009      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001da0:	4b51      	ldr	r3, [pc, #324]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da4:	4a58      	ldr	r2, [pc, #352]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69da      	ldr	r2, [r3, #28]
 8001dae:	4b4e      	ldr	r3, [pc, #312]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001db0:	430a      	orrs	r2, r1
 8001db2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2220      	movs	r2, #32
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d009      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc2:	4a52      	ldr	r2, [pc, #328]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	4b46      	ldr	r3, [pc, #280]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	2380      	movs	r3, #128	@ 0x80
 8001dd8:	01db      	lsls	r3, r3, #7
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d015      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001dde:	4b42      	ldr	r3, [pc, #264]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	0899      	lsrs	r1, r3, #2
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1a      	ldr	r2, [r3, #32]
 8001dea:	4b3f      	ldr	r3, [pc, #252]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dec:	430a      	orrs	r2, r1
 8001dee:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1a      	ldr	r2, [r3, #32]
 8001df4:	2380      	movs	r3, #128	@ 0x80
 8001df6:	05db      	lsls	r3, r3, #23
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	4b39      	ldr	r3, [pc, #228]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e02:	2180      	movs	r1, #128	@ 0x80
 8001e04:	0249      	lsls	r1, r1, #9
 8001e06:	430a      	orrs	r2, r1
 8001e08:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	2380      	movs	r3, #128	@ 0x80
 8001e10:	031b      	lsls	r3, r3, #12
 8001e12:	4013      	ands	r3, r2
 8001e14:	d009      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e16:	4b34      	ldr	r3, [pc, #208]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1a:	2240      	movs	r2, #64	@ 0x40
 8001e1c:	4393      	bics	r3, r2
 8001e1e:	0019      	movs	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e24:	4b30      	ldr	r3, [pc, #192]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e26:	430a      	orrs	r2, r1
 8001e28:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	2380      	movs	r3, #128	@ 0x80
 8001e30:	039b      	lsls	r3, r3, #14
 8001e32:	4013      	ands	r3, r2
 8001e34:	d016      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001e36:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3a:	4a35      	ldr	r2, [pc, #212]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	0019      	movs	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e44:	4b28      	ldr	r3, [pc, #160]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e46:	430a      	orrs	r2, r1
 8001e48:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e4e:	2380      	movs	r3, #128	@ 0x80
 8001e50:	03db      	lsls	r3, r3, #15
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d106      	bne.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001e56:	4b24      	ldr	r3, [pc, #144]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e5c:	2180      	movs	r1, #128	@ 0x80
 8001e5e:	0449      	lsls	r1, r1, #17
 8001e60:	430a      	orrs	r2, r1
 8001e62:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	@ 0x80
 8001e6a:	03db      	lsls	r3, r3, #15
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d016      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001e70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e74:	4a27      	ldr	r2, [pc, #156]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	0019      	movs	r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e80:	430a      	orrs	r2, r1
 8001e82:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e88:	2380      	movs	r3, #128	@ 0x80
 8001e8a:	045b      	lsls	r3, r3, #17
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d106      	bne.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001e90:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	4b14      	ldr	r3, [pc, #80]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e96:	2180      	movs	r1, #128	@ 0x80
 8001e98:	0449      	lsls	r1, r1, #17
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	@ 0x80
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d016      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eae:	4a1a      	ldr	r2, [pc, #104]	@ (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	695a      	ldr	r2, [r3, #20]
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	2380      	movs	r3, #128	@ 0x80
 8001ec4:	01db      	lsls	r3, r3, #7
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d106      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001eca:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ed0:	2180      	movs	r1, #128	@ 0x80
 8001ed2:	0249      	lsls	r1, r1, #9
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001ed8:	2312      	movs	r3, #18
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	781b      	ldrb	r3, [r3, #0]
}
 8001ede:	0018      	movs	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b006      	add	sp, #24
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			@ (mov r8, r8)
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40007000 	.word	0x40007000
 8001ef0:	fffffcff 	.word	0xfffffcff
 8001ef4:	fffeffff 	.word	0xfffeffff
 8001ef8:	00001388 	.word	0x00001388
 8001efc:	efffffff 	.word	0xefffffff
 8001f00:	fffff3ff 	.word	0xfffff3ff
 8001f04:	fff3ffff 	.word	0xfff3ffff
 8001f08:	ffcfffff 	.word	0xffcfffff
 8001f0c:	ffffcfff 	.word	0xffffcfff
 8001f10:	ffbfffff 	.word	0xffbfffff
 8001f14:	feffffff 	.word	0xfeffffff
 8001f18:	ffff3fff 	.word	0xffff3fff

08001f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e04a      	b.n	8001fc4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	223d      	movs	r2, #61	@ 0x3d
 8001f32:	5c9b      	ldrb	r3, [r3, r2]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d107      	bne.n	8001f4a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	223c      	movs	r2, #60	@ 0x3c
 8001f3e:	2100      	movs	r1, #0
 8001f40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7fe fd29 	bl	800099c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	223d      	movs	r2, #61	@ 0x3d
 8001f4e:	2102      	movs	r1, #2
 8001f50:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	0010      	movs	r0, r2
 8001f5e:	f000 fb55 	bl	800260c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2248      	movs	r2, #72	@ 0x48
 8001f66:	2101      	movs	r1, #1
 8001f68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	223e      	movs	r2, #62	@ 0x3e
 8001f6e:	2101      	movs	r1, #1
 8001f70:	5499      	strb	r1, [r3, r2]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	223f      	movs	r2, #63	@ 0x3f
 8001f76:	2101      	movs	r1, #1
 8001f78:	5499      	strb	r1, [r3, r2]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2240      	movs	r2, #64	@ 0x40
 8001f7e:	2101      	movs	r1, #1
 8001f80:	5499      	strb	r1, [r3, r2]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2241      	movs	r2, #65	@ 0x41
 8001f86:	2101      	movs	r1, #1
 8001f88:	5499      	strb	r1, [r3, r2]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2242      	movs	r2, #66	@ 0x42
 8001f8e:	2101      	movs	r1, #1
 8001f90:	5499      	strb	r1, [r3, r2]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2243      	movs	r2, #67	@ 0x43
 8001f96:	2101      	movs	r1, #1
 8001f98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2244      	movs	r2, #68	@ 0x44
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	5499      	strb	r1, [r3, r2]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2245      	movs	r2, #69	@ 0x45
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	5499      	strb	r1, [r3, r2]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2246      	movs	r2, #70	@ 0x46
 8001fae:	2101      	movs	r1, #1
 8001fb0:	5499      	strb	r1, [r3, r2]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2247      	movs	r2, #71	@ 0x47
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	223d      	movs	r2, #61	@ 0x3d
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b002      	add	sp, #8
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e04a      	b.n	8002074 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	223d      	movs	r2, #61	@ 0x3d
 8001fe2:	5c9b      	ldrb	r3, [r3, r2]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d107      	bne.n	8001ffa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	223c      	movs	r2, #60	@ 0x3c
 8001fee:	2100      	movs	r1, #0
 8001ff0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f000 f841 	bl	800207c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	223d      	movs	r2, #61	@ 0x3d
 8001ffe:	2102      	movs	r1, #2
 8002000:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3304      	adds	r3, #4
 800200a:	0019      	movs	r1, r3
 800200c:	0010      	movs	r0, r2
 800200e:	f000 fafd 	bl	800260c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2248      	movs	r2, #72	@ 0x48
 8002016:	2101      	movs	r1, #1
 8002018:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	223e      	movs	r2, #62	@ 0x3e
 800201e:	2101      	movs	r1, #1
 8002020:	5499      	strb	r1, [r3, r2]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	223f      	movs	r2, #63	@ 0x3f
 8002026:	2101      	movs	r1, #1
 8002028:	5499      	strb	r1, [r3, r2]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2240      	movs	r2, #64	@ 0x40
 800202e:	2101      	movs	r1, #1
 8002030:	5499      	strb	r1, [r3, r2]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2241      	movs	r2, #65	@ 0x41
 8002036:	2101      	movs	r1, #1
 8002038:	5499      	strb	r1, [r3, r2]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2242      	movs	r2, #66	@ 0x42
 800203e:	2101      	movs	r1, #1
 8002040:	5499      	strb	r1, [r3, r2]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2243      	movs	r2, #67	@ 0x43
 8002046:	2101      	movs	r1, #1
 8002048:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2244      	movs	r2, #68	@ 0x44
 800204e:	2101      	movs	r1, #1
 8002050:	5499      	strb	r1, [r3, r2]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2245      	movs	r2, #69	@ 0x45
 8002056:	2101      	movs	r1, #1
 8002058:	5499      	strb	r1, [r3, r2]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2246      	movs	r2, #70	@ 0x46
 800205e:	2101      	movs	r1, #1
 8002060:	5499      	strb	r1, [r3, r2]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2247      	movs	r2, #71	@ 0x47
 8002066:	2101      	movs	r1, #1
 8002068:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	223d      	movs	r2, #61	@ 0x3d
 800206e:	2101      	movs	r1, #1
 8002070:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	0018      	movs	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	b002      	add	sp, #8
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002084:	46c0      	nop			@ (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b002      	add	sp, #8
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d108      	bne.n	80020ae <HAL_TIM_PWM_Start+0x22>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	223e      	movs	r2, #62	@ 0x3e
 80020a0:	5c9b      	ldrb	r3, [r3, r2]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	3b01      	subs	r3, #1
 80020a6:	1e5a      	subs	r2, r3, #1
 80020a8:	4193      	sbcs	r3, r2
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	e037      	b.n	800211e <HAL_TIM_PWM_Start+0x92>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d108      	bne.n	80020c6 <HAL_TIM_PWM_Start+0x3a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	223f      	movs	r2, #63	@ 0x3f
 80020b8:	5c9b      	ldrb	r3, [r3, r2]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	1e5a      	subs	r2, r3, #1
 80020c0:	4193      	sbcs	r3, r2
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	e02b      	b.n	800211e <HAL_TIM_PWM_Start+0x92>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d108      	bne.n	80020de <HAL_TIM_PWM_Start+0x52>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2240      	movs	r2, #64	@ 0x40
 80020d0:	5c9b      	ldrb	r3, [r3, r2]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	1e5a      	subs	r2, r3, #1
 80020d8:	4193      	sbcs	r3, r2
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	e01f      	b.n	800211e <HAL_TIM_PWM_Start+0x92>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	d108      	bne.n	80020f6 <HAL_TIM_PWM_Start+0x6a>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2241      	movs	r2, #65	@ 0x41
 80020e8:	5c9b      	ldrb	r3, [r3, r2]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	1e5a      	subs	r2, r3, #1
 80020f0:	4193      	sbcs	r3, r2
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	e013      	b.n	800211e <HAL_TIM_PWM_Start+0x92>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b10      	cmp	r3, #16
 80020fa:	d108      	bne.n	800210e <HAL_TIM_PWM_Start+0x82>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2242      	movs	r2, #66	@ 0x42
 8002100:	5c9b      	ldrb	r3, [r3, r2]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	1e5a      	subs	r2, r3, #1
 8002108:	4193      	sbcs	r3, r2
 800210a:	b2db      	uxtb	r3, r3
 800210c:	e007      	b.n	800211e <HAL_TIM_PWM_Start+0x92>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2243      	movs	r2, #67	@ 0x43
 8002112:	5c9b      	ldrb	r3, [r3, r2]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	1e5a      	subs	r2, r3, #1
 800211a:	4193      	sbcs	r3, r2
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e08b      	b.n	800223e <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d104      	bne.n	8002136 <HAL_TIM_PWM_Start+0xaa>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	223e      	movs	r2, #62	@ 0x3e
 8002130:	2102      	movs	r1, #2
 8002132:	5499      	strb	r1, [r3, r2]
 8002134:	e023      	b.n	800217e <HAL_TIM_PWM_Start+0xf2>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b04      	cmp	r3, #4
 800213a:	d104      	bne.n	8002146 <HAL_TIM_PWM_Start+0xba>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	223f      	movs	r2, #63	@ 0x3f
 8002140:	2102      	movs	r1, #2
 8002142:	5499      	strb	r1, [r3, r2]
 8002144:	e01b      	b.n	800217e <HAL_TIM_PWM_Start+0xf2>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b08      	cmp	r3, #8
 800214a:	d104      	bne.n	8002156 <HAL_TIM_PWM_Start+0xca>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2240      	movs	r2, #64	@ 0x40
 8002150:	2102      	movs	r1, #2
 8002152:	5499      	strb	r1, [r3, r2]
 8002154:	e013      	b.n	800217e <HAL_TIM_PWM_Start+0xf2>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b0c      	cmp	r3, #12
 800215a:	d104      	bne.n	8002166 <HAL_TIM_PWM_Start+0xda>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2241      	movs	r2, #65	@ 0x41
 8002160:	2102      	movs	r1, #2
 8002162:	5499      	strb	r1, [r3, r2]
 8002164:	e00b      	b.n	800217e <HAL_TIM_PWM_Start+0xf2>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	2b10      	cmp	r3, #16
 800216a:	d104      	bne.n	8002176 <HAL_TIM_PWM_Start+0xea>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2242      	movs	r2, #66	@ 0x42
 8002170:	2102      	movs	r1, #2
 8002172:	5499      	strb	r1, [r3, r2]
 8002174:	e003      	b.n	800217e <HAL_TIM_PWM_Start+0xf2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2243      	movs	r2, #67	@ 0x43
 800217a:	2102      	movs	r1, #2
 800217c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6839      	ldr	r1, [r7, #0]
 8002184:	2201      	movs	r2, #1
 8002186:	0018      	movs	r0, r3
 8002188:	f000 fe2e 	bl	8002de8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2d      	ldr	r2, [pc, #180]	@ (8002248 <HAL_TIM_PWM_Start+0x1bc>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00e      	beq.n	80021b4 <HAL_TIM_PWM_Start+0x128>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a2c      	ldr	r2, [pc, #176]	@ (800224c <HAL_TIM_PWM_Start+0x1c0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d009      	beq.n	80021b4 <HAL_TIM_PWM_Start+0x128>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002250 <HAL_TIM_PWM_Start+0x1c4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d004      	beq.n	80021b4 <HAL_TIM_PWM_Start+0x128>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a29      	ldr	r2, [pc, #164]	@ (8002254 <HAL_TIM_PWM_Start+0x1c8>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d101      	bne.n	80021b8 <HAL_TIM_PWM_Start+0x12c>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <HAL_TIM_PWM_Start+0x12e>
 80021b8:	2300      	movs	r3, #0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d008      	beq.n	80021d0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2180      	movs	r1, #128	@ 0x80
 80021ca:	0209      	lsls	r1, r1, #8
 80021cc:	430a      	orrs	r2, r1
 80021ce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002248 <HAL_TIM_PWM_Start+0x1bc>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00f      	beq.n	80021fa <HAL_TIM_PWM_Start+0x16e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	2380      	movs	r3, #128	@ 0x80
 80021e0:	05db      	lsls	r3, r3, #23
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d009      	beq.n	80021fa <HAL_TIM_PWM_Start+0x16e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002258 <HAL_TIM_PWM_Start+0x1cc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d004      	beq.n	80021fa <HAL_TIM_PWM_Start+0x16e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a15      	ldr	r2, [pc, #84]	@ (800224c <HAL_TIM_PWM_Start+0x1c0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d116      	bne.n	8002228 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	4a16      	ldr	r2, [pc, #88]	@ (800225c <HAL_TIM_PWM_Start+0x1d0>)
 8002202:	4013      	ands	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b06      	cmp	r3, #6
 800220a:	d016      	beq.n	800223a <HAL_TIM_PWM_Start+0x1ae>
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	025b      	lsls	r3, r3, #9
 8002212:	429a      	cmp	r2, r3
 8002214:	d011      	beq.n	800223a <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2101      	movs	r1, #1
 8002222:	430a      	orrs	r2, r1
 8002224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002226:	e008      	b.n	800223a <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2101      	movs	r1, #1
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	e000      	b.n	800223c <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	0018      	movs	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	b004      	add	sp, #16
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	40012c00 	.word	0x40012c00
 800224c:	40014000 	.word	0x40014000
 8002250:	40014400 	.word	0x40014400
 8002254:	40014800 	.word	0x40014800
 8002258:	40000400 	.word	0x40000400
 800225c:	00010007 	.word	0x00010007

08002260 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800226c:	2317      	movs	r3, #23
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	223c      	movs	r2, #60	@ 0x3c
 8002278:	5c9b      	ldrb	r3, [r3, r2]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_TIM_PWM_ConfigChannel+0x22>
 800227e:	2302      	movs	r3, #2
 8002280:	e0e5      	b.n	800244e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	223c      	movs	r2, #60	@ 0x3c
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b14      	cmp	r3, #20
 800228e:	d900      	bls.n	8002292 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002290:	e0d1      	b.n	8002436 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	009a      	lsls	r2, r3, #2
 8002296:	4b70      	ldr	r3, [pc, #448]	@ (8002458 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002298:	18d3      	adds	r3, r2, r3
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	0011      	movs	r1, r2
 80022a6:	0018      	movs	r0, r3
 80022a8:	f000 fa3e 	bl	8002728 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2108      	movs	r1, #8
 80022b8:	430a      	orrs	r2, r1
 80022ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2104      	movs	r1, #4
 80022c8:	438a      	bics	r2, r1
 80022ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6999      	ldr	r1, [r3, #24]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	619a      	str	r2, [r3, #24]
      break;
 80022de:	e0af      	b.n	8002440 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	0011      	movs	r1, r2
 80022e8:	0018      	movs	r0, r3
 80022ea:	f000 faa7 	bl	800283c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699a      	ldr	r2, [r3, #24]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2180      	movs	r1, #128	@ 0x80
 80022fa:	0109      	lsls	r1, r1, #4
 80022fc:	430a      	orrs	r2, r1
 80022fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4954      	ldr	r1, [pc, #336]	@ (800245c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800230c:	400a      	ands	r2, r1
 800230e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6999      	ldr	r1, [r3, #24]
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	021a      	lsls	r2, r3, #8
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	619a      	str	r2, [r3, #24]
      break;
 8002324:	e08c      	b.n	8002440 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	0011      	movs	r1, r2
 800232e:	0018      	movs	r0, r3
 8002330:	f000 fb08 	bl	8002944 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	69da      	ldr	r2, [r3, #28]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2108      	movs	r1, #8
 8002340:	430a      	orrs	r2, r1
 8002342:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	69da      	ldr	r2, [r3, #28]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2104      	movs	r1, #4
 8002350:	438a      	bics	r2, r1
 8002352:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69d9      	ldr	r1, [r3, #28]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	61da      	str	r2, [r3, #28]
      break;
 8002366:	e06b      	b.n	8002440 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	0011      	movs	r1, r2
 8002370:	0018      	movs	r0, r3
 8002372:	f000 fb6f 	bl	8002a54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2180      	movs	r1, #128	@ 0x80
 8002382:	0109      	lsls	r1, r1, #4
 8002384:	430a      	orrs	r2, r1
 8002386:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	69da      	ldr	r2, [r3, #28]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4932      	ldr	r1, [pc, #200]	@ (800245c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002394:	400a      	ands	r2, r1
 8002396:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	69d9      	ldr	r1, [r3, #28]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	021a      	lsls	r2, r3, #8
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	61da      	str	r2, [r3, #28]
      break;
 80023ac:	e048      	b.n	8002440 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	0011      	movs	r1, r2
 80023b6:	0018      	movs	r0, r3
 80023b8:	f000 fbb6 	bl	8002b28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2108      	movs	r1, #8
 80023c8:	430a      	orrs	r2, r1
 80023ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2104      	movs	r1, #4
 80023d8:	438a      	bics	r2, r1
 80023da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80023ee:	e027      	b.n	8002440 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	0011      	movs	r1, r2
 80023f8:	0018      	movs	r0, r3
 80023fa:	f000 fbf5 	bl	8002be8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2180      	movs	r1, #128	@ 0x80
 800240a:	0109      	lsls	r1, r1, #4
 800240c:	430a      	orrs	r2, r1
 800240e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4910      	ldr	r1, [pc, #64]	@ (800245c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800241c:	400a      	ands	r2, r1
 800241e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	021a      	lsls	r2, r3, #8
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002434:	e004      	b.n	8002440 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002436:	2317      	movs	r3, #23
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]
      break;
 800243e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	223c      	movs	r2, #60	@ 0x3c
 8002444:	2100      	movs	r1, #0
 8002446:	5499      	strb	r1, [r3, r2]

  return status;
 8002448:	2317      	movs	r3, #23
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	781b      	ldrb	r3, [r3, #0]
}
 800244e:	0018      	movs	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	b006      	add	sp, #24
 8002454:	bd80      	pop	{r7, pc}
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	08003ca0 	.word	0x08003ca0
 800245c:	fffffbff 	.word	0xfffffbff

08002460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800246a:	230f      	movs	r3, #15
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	223c      	movs	r2, #60	@ 0x3c
 8002476:	5c9b      	ldrb	r3, [r3, r2]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_TIM_ConfigClockSource+0x20>
 800247c:	2302      	movs	r3, #2
 800247e:	e0bc      	b.n	80025fa <HAL_TIM_ConfigClockSource+0x19a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	223c      	movs	r2, #60	@ 0x3c
 8002484:	2101      	movs	r1, #1
 8002486:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	223d      	movs	r2, #61	@ 0x3d
 800248c:	2102      	movs	r1, #2
 800248e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	4a5a      	ldr	r2, [pc, #360]	@ (8002604 <HAL_TIM_ConfigClockSource+0x1a4>)
 800249c:	4013      	ands	r3, r2
 800249e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4a59      	ldr	r2, [pc, #356]	@ (8002608 <HAL_TIM_ConfigClockSource+0x1a8>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2280      	movs	r2, #128	@ 0x80
 80024b6:	0192      	lsls	r2, r2, #6
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d040      	beq.n	800253e <HAL_TIM_ConfigClockSource+0xde>
 80024bc:	2280      	movs	r2, #128	@ 0x80
 80024be:	0192      	lsls	r2, r2, #6
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d900      	bls.n	80024c6 <HAL_TIM_ConfigClockSource+0x66>
 80024c4:	e088      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x178>
 80024c6:	2280      	movs	r2, #128	@ 0x80
 80024c8:	0152      	lsls	r2, r2, #5
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d100      	bne.n	80024d0 <HAL_TIM_ConfigClockSource+0x70>
 80024ce:	e088      	b.n	80025e2 <HAL_TIM_ConfigClockSource+0x182>
 80024d0:	2280      	movs	r2, #128	@ 0x80
 80024d2:	0152      	lsls	r2, r2, #5
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d900      	bls.n	80024da <HAL_TIM_ConfigClockSource+0x7a>
 80024d8:	e07e      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x178>
 80024da:	2b70      	cmp	r3, #112	@ 0x70
 80024dc:	d018      	beq.n	8002510 <HAL_TIM_ConfigClockSource+0xb0>
 80024de:	d900      	bls.n	80024e2 <HAL_TIM_ConfigClockSource+0x82>
 80024e0:	e07a      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x178>
 80024e2:	2b60      	cmp	r3, #96	@ 0x60
 80024e4:	d04f      	beq.n	8002586 <HAL_TIM_ConfigClockSource+0x126>
 80024e6:	d900      	bls.n	80024ea <HAL_TIM_ConfigClockSource+0x8a>
 80024e8:	e076      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x178>
 80024ea:	2b50      	cmp	r3, #80	@ 0x50
 80024ec:	d03b      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x106>
 80024ee:	d900      	bls.n	80024f2 <HAL_TIM_ConfigClockSource+0x92>
 80024f0:	e072      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x178>
 80024f2:	2b40      	cmp	r3, #64	@ 0x40
 80024f4:	d057      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0x146>
 80024f6:	d900      	bls.n	80024fa <HAL_TIM_ConfigClockSource+0x9a>
 80024f8:	e06e      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x178>
 80024fa:	2b30      	cmp	r3, #48	@ 0x30
 80024fc:	d063      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0x166>
 80024fe:	d86b      	bhi.n	80025d8 <HAL_TIM_ConfigClockSource+0x178>
 8002500:	2b20      	cmp	r3, #32
 8002502:	d060      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0x166>
 8002504:	d868      	bhi.n	80025d8 <HAL_TIM_ConfigClockSource+0x178>
 8002506:	2b00      	cmp	r3, #0
 8002508:	d05d      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0x166>
 800250a:	2b10      	cmp	r3, #16
 800250c:	d05b      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0x166>
 800250e:	e063      	b.n	80025d8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002520:	f000 fc42 	bl	8002da8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2277      	movs	r2, #119	@ 0x77
 8002530:	4313      	orrs	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	609a      	str	r2, [r3, #8]
      break;
 800253c:	e052      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800254e:	f000 fc2b 	bl	8002da8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2180      	movs	r1, #128	@ 0x80
 800255e:	01c9      	lsls	r1, r1, #7
 8002560:	430a      	orrs	r2, r1
 8002562:	609a      	str	r2, [r3, #8]
      break;
 8002564:	e03e      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002572:	001a      	movs	r2, r3
 8002574:	f000 fb9c 	bl	8002cb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2150      	movs	r1, #80	@ 0x50
 800257e:	0018      	movs	r0, r3
 8002580:	f000 fbf6 	bl	8002d70 <TIM_ITRx_SetConfig>
      break;
 8002584:	e02e      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002592:	001a      	movs	r2, r3
 8002594:	f000 fbba 	bl	8002d0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2160      	movs	r1, #96	@ 0x60
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 fbe6 	bl	8002d70 <TIM_ITRx_SetConfig>
      break;
 80025a4:	e01e      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b2:	001a      	movs	r2, r3
 80025b4:	f000 fb7c 	bl	8002cb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2140      	movs	r1, #64	@ 0x40
 80025be:	0018      	movs	r0, r3
 80025c0:	f000 fbd6 	bl	8002d70 <TIM_ITRx_SetConfig>
      break;
 80025c4:	e00e      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	0019      	movs	r1, r3
 80025d0:	0010      	movs	r0, r2
 80025d2:	f000 fbcd 	bl	8002d70 <TIM_ITRx_SetConfig>
      break;
 80025d6:	e005      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80025d8:	230f      	movs	r3, #15
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
      break;
 80025e0:	e000      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80025e2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	223d      	movs	r2, #61	@ 0x3d
 80025e8:	2101      	movs	r1, #1
 80025ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	223c      	movs	r2, #60	@ 0x3c
 80025f0:	2100      	movs	r1, #0
 80025f2:	5499      	strb	r1, [r3, r2]

  return status;
 80025f4:	230f      	movs	r3, #15
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	781b      	ldrb	r3, [r3, #0]
}
 80025fa:	0018      	movs	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b004      	add	sp, #16
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	ffceff88 	.word	0xffceff88
 8002608:	ffff00ff 	.word	0xffff00ff

0800260c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a3b      	ldr	r2, [pc, #236]	@ (800270c <TIM_Base_SetConfig+0x100>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d008      	beq.n	8002636 <TIM_Base_SetConfig+0x2a>
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	2380      	movs	r3, #128	@ 0x80
 8002628:	05db      	lsls	r3, r3, #23
 800262a:	429a      	cmp	r2, r3
 800262c:	d003      	beq.n	8002636 <TIM_Base_SetConfig+0x2a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a37      	ldr	r2, [pc, #220]	@ (8002710 <TIM_Base_SetConfig+0x104>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d108      	bne.n	8002648 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2270      	movs	r2, #112	@ 0x70
 800263a:	4393      	bics	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a30      	ldr	r2, [pc, #192]	@ (800270c <TIM_Base_SetConfig+0x100>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d018      	beq.n	8002682 <TIM_Base_SetConfig+0x76>
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	2380      	movs	r3, #128	@ 0x80
 8002654:	05db      	lsls	r3, r3, #23
 8002656:	429a      	cmp	r2, r3
 8002658:	d013      	beq.n	8002682 <TIM_Base_SetConfig+0x76>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a2c      	ldr	r2, [pc, #176]	@ (8002710 <TIM_Base_SetConfig+0x104>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00f      	beq.n	8002682 <TIM_Base_SetConfig+0x76>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a2b      	ldr	r2, [pc, #172]	@ (8002714 <TIM_Base_SetConfig+0x108>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00b      	beq.n	8002682 <TIM_Base_SetConfig+0x76>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a2a      	ldr	r2, [pc, #168]	@ (8002718 <TIM_Base_SetConfig+0x10c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <TIM_Base_SetConfig+0x76>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a29      	ldr	r2, [pc, #164]	@ (800271c <TIM_Base_SetConfig+0x110>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d003      	beq.n	8002682 <TIM_Base_SetConfig+0x76>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a28      	ldr	r2, [pc, #160]	@ (8002720 <TIM_Base_SetConfig+0x114>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d108      	bne.n	8002694 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4a27      	ldr	r2, [pc, #156]	@ (8002724 <TIM_Base_SetConfig+0x118>)
 8002686:	4013      	ands	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4313      	orrs	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2280      	movs	r2, #128	@ 0x80
 8002698:	4393      	bics	r3, r2
 800269a:	001a      	movs	r2, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a13      	ldr	r2, [pc, #76]	@ (800270c <TIM_Base_SetConfig+0x100>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d00b      	beq.n	80026da <TIM_Base_SetConfig+0xce>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a14      	ldr	r2, [pc, #80]	@ (8002718 <TIM_Base_SetConfig+0x10c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d007      	beq.n	80026da <TIM_Base_SetConfig+0xce>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a13      	ldr	r2, [pc, #76]	@ (800271c <TIM_Base_SetConfig+0x110>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d003      	beq.n	80026da <TIM_Base_SetConfig+0xce>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a12      	ldr	r2, [pc, #72]	@ (8002720 <TIM_Base_SetConfig+0x114>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d103      	bne.n	80026e2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2201      	movs	r2, #1
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d106      	bne.n	8002702 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	2201      	movs	r2, #1
 80026fa:	4393      	bics	r3, r2
 80026fc:	001a      	movs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	611a      	str	r2, [r3, #16]
  }
}
 8002702:	46c0      	nop			@ (mov r8, r8)
 8002704:	46bd      	mov	sp, r7
 8002706:	b004      	add	sp, #16
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			@ (mov r8, r8)
 800270c:	40012c00 	.word	0x40012c00
 8002710:	40000400 	.word	0x40000400
 8002714:	40002000 	.word	0x40002000
 8002718:	40014000 	.word	0x40014000
 800271c:	40014400 	.word	0x40014400
 8002720:	40014800 	.word	0x40014800
 8002724:	fffffcff 	.word	0xfffffcff

08002728 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	2201      	movs	r2, #1
 800273e:	4393      	bics	r3, r2
 8002740:	001a      	movs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4a32      	ldr	r2, [pc, #200]	@ (8002820 <TIM_OC1_SetConfig+0xf8>)
 8002756:	4013      	ands	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2203      	movs	r2, #3
 800275e:	4393      	bics	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2202      	movs	r2, #2
 8002770:	4393      	bics	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a28      	ldr	r2, [pc, #160]	@ (8002824 <TIM_OC1_SetConfig+0xfc>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00b      	beq.n	800279e <TIM_OC1_SetConfig+0x76>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a27      	ldr	r2, [pc, #156]	@ (8002828 <TIM_OC1_SetConfig+0x100>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d007      	beq.n	800279e <TIM_OC1_SetConfig+0x76>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a26      	ldr	r2, [pc, #152]	@ (800282c <TIM_OC1_SetConfig+0x104>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d003      	beq.n	800279e <TIM_OC1_SetConfig+0x76>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a25      	ldr	r2, [pc, #148]	@ (8002830 <TIM_OC1_SetConfig+0x108>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d10c      	bne.n	80027b8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2208      	movs	r2, #8
 80027a2:	4393      	bics	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2204      	movs	r2, #4
 80027b4:	4393      	bics	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002824 <TIM_OC1_SetConfig+0xfc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00b      	beq.n	80027d8 <TIM_OC1_SetConfig+0xb0>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a19      	ldr	r2, [pc, #100]	@ (8002828 <TIM_OC1_SetConfig+0x100>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d007      	beq.n	80027d8 <TIM_OC1_SetConfig+0xb0>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a18      	ldr	r2, [pc, #96]	@ (800282c <TIM_OC1_SetConfig+0x104>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d003      	beq.n	80027d8 <TIM_OC1_SetConfig+0xb0>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a17      	ldr	r2, [pc, #92]	@ (8002830 <TIM_OC1_SetConfig+0x108>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d111      	bne.n	80027fc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4a16      	ldr	r2, [pc, #88]	@ (8002834 <TIM_OC1_SetConfig+0x10c>)
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4a15      	ldr	r2, [pc, #84]	@ (8002838 <TIM_OC1_SetConfig+0x110>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	621a      	str	r2, [r3, #32]
}
 8002816:	46c0      	nop			@ (mov r8, r8)
 8002818:	46bd      	mov	sp, r7
 800281a:	b006      	add	sp, #24
 800281c:	bd80      	pop	{r7, pc}
 800281e:	46c0      	nop			@ (mov r8, r8)
 8002820:	fffeff8f 	.word	0xfffeff8f
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40014000 	.word	0x40014000
 800282c:	40014400 	.word	0x40014400
 8002830:	40014800 	.word	0x40014800
 8002834:	fffffeff 	.word	0xfffffeff
 8002838:	fffffdff 	.word	0xfffffdff

0800283c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	2210      	movs	r2, #16
 8002852:	4393      	bics	r3, r2
 8002854:	001a      	movs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4a2e      	ldr	r2, [pc, #184]	@ (8002924 <TIM_OC2_SetConfig+0xe8>)
 800286a:	4013      	ands	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4a2d      	ldr	r2, [pc, #180]	@ (8002928 <TIM_OC2_SetConfig+0xec>)
 8002872:	4013      	ands	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2220      	movs	r2, #32
 8002886:	4393      	bics	r3, r2
 8002888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	4313      	orrs	r3, r2
 8002894:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a24      	ldr	r2, [pc, #144]	@ (800292c <TIM_OC2_SetConfig+0xf0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d10d      	bne.n	80028ba <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2280      	movs	r2, #128	@ 0x80
 80028a2:	4393      	bics	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2240      	movs	r2, #64	@ 0x40
 80028b6:	4393      	bics	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a1b      	ldr	r2, [pc, #108]	@ (800292c <TIM_OC2_SetConfig+0xf0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00b      	beq.n	80028da <TIM_OC2_SetConfig+0x9e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002930 <TIM_OC2_SetConfig+0xf4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d007      	beq.n	80028da <TIM_OC2_SetConfig+0x9e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a19      	ldr	r2, [pc, #100]	@ (8002934 <TIM_OC2_SetConfig+0xf8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d003      	beq.n	80028da <TIM_OC2_SetConfig+0x9e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a18      	ldr	r2, [pc, #96]	@ (8002938 <TIM_OC2_SetConfig+0xfc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d113      	bne.n	8002902 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4a17      	ldr	r2, [pc, #92]	@ (800293c <TIM_OC2_SetConfig+0x100>)
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4a16      	ldr	r2, [pc, #88]	@ (8002940 <TIM_OC2_SetConfig+0x104>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	621a      	str	r2, [r3, #32]
}
 800291c:	46c0      	nop			@ (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b006      	add	sp, #24
 8002922:	bd80      	pop	{r7, pc}
 8002924:	feff8fff 	.word	0xfeff8fff
 8002928:	fffffcff 	.word	0xfffffcff
 800292c:	40012c00 	.word	0x40012c00
 8002930:	40014000 	.word	0x40014000
 8002934:	40014400 	.word	0x40014400
 8002938:	40014800 	.word	0x40014800
 800293c:	fffffbff 	.word	0xfffffbff
 8002940:	fffff7ff 	.word	0xfffff7ff

08002944 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	4a33      	ldr	r2, [pc, #204]	@ (8002a28 <TIM_OC3_SetConfig+0xe4>)
 800295a:	401a      	ands	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4a2f      	ldr	r2, [pc, #188]	@ (8002a2c <TIM_OC3_SetConfig+0xe8>)
 8002970:	4013      	ands	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2203      	movs	r2, #3
 8002978:	4393      	bics	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	4a29      	ldr	r2, [pc, #164]	@ (8002a30 <TIM_OC3_SetConfig+0xec>)
 800298a:	4013      	ands	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a25      	ldr	r2, [pc, #148]	@ (8002a34 <TIM_OC3_SetConfig+0xf0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d10d      	bne.n	80029be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	4a24      	ldr	r2, [pc, #144]	@ (8002a38 <TIM_OC3_SetConfig+0xf4>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	4a20      	ldr	r2, [pc, #128]	@ (8002a3c <TIM_OC3_SetConfig+0xf8>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002a34 <TIM_OC3_SetConfig+0xf0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00b      	beq.n	80029de <TIM_OC3_SetConfig+0x9a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002a40 <TIM_OC3_SetConfig+0xfc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d007      	beq.n	80029de <TIM_OC3_SetConfig+0x9a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002a44 <TIM_OC3_SetConfig+0x100>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d003      	beq.n	80029de <TIM_OC3_SetConfig+0x9a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002a48 <TIM_OC3_SetConfig+0x104>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d113      	bne.n	8002a06 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a4c <TIM_OC3_SetConfig+0x108>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4a19      	ldr	r2, [pc, #100]	@ (8002a50 <TIM_OC3_SetConfig+0x10c>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	621a      	str	r2, [r3, #32]
}
 8002a20:	46c0      	nop			@ (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b006      	add	sp, #24
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	fffffeff 	.word	0xfffffeff
 8002a2c:	fffeff8f 	.word	0xfffeff8f
 8002a30:	fffffdff 	.word	0xfffffdff
 8002a34:	40012c00 	.word	0x40012c00
 8002a38:	fffff7ff 	.word	0xfffff7ff
 8002a3c:	fffffbff 	.word	0xfffffbff
 8002a40:	40014000 	.word	0x40014000
 8002a44:	40014400 	.word	0x40014400
 8002a48:	40014800 	.word	0x40014800
 8002a4c:	ffffefff 	.word	0xffffefff
 8002a50:	ffffdfff 	.word	0xffffdfff

08002a54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4a26      	ldr	r2, [pc, #152]	@ (8002b04 <TIM_OC4_SetConfig+0xb0>)
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4a22      	ldr	r2, [pc, #136]	@ (8002b08 <TIM_OC4_SetConfig+0xb4>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4a21      	ldr	r2, [pc, #132]	@ (8002b0c <TIM_OC4_SetConfig+0xb8>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002b10 <TIM_OC4_SetConfig+0xbc>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	031b      	lsls	r3, r3, #12
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a19      	ldr	r2, [pc, #100]	@ (8002b14 <TIM_OC4_SetConfig+0xc0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00b      	beq.n	8002acc <TIM_OC4_SetConfig+0x78>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a18      	ldr	r2, [pc, #96]	@ (8002b18 <TIM_OC4_SetConfig+0xc4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d007      	beq.n	8002acc <TIM_OC4_SetConfig+0x78>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a17      	ldr	r2, [pc, #92]	@ (8002b1c <TIM_OC4_SetConfig+0xc8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d003      	beq.n	8002acc <TIM_OC4_SetConfig+0x78>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a16      	ldr	r2, [pc, #88]	@ (8002b20 <TIM_OC4_SetConfig+0xcc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d109      	bne.n	8002ae0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	4a15      	ldr	r2, [pc, #84]	@ (8002b24 <TIM_OC4_SetConfig+0xd0>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	019b      	lsls	r3, r3, #6
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	621a      	str	r2, [r3, #32]
}
 8002afa:	46c0      	nop			@ (mov r8, r8)
 8002afc:	46bd      	mov	sp, r7
 8002afe:	b006      	add	sp, #24
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	46c0      	nop			@ (mov r8, r8)
 8002b04:	ffffefff 	.word	0xffffefff
 8002b08:	feff8fff 	.word	0xfeff8fff
 8002b0c:	fffffcff 	.word	0xfffffcff
 8002b10:	ffffdfff 	.word	0xffffdfff
 8002b14:	40012c00 	.word	0x40012c00
 8002b18:	40014000 	.word	0x40014000
 8002b1c:	40014400 	.word	0x40014400
 8002b20:	40014800 	.word	0x40014800
 8002b24:	ffffbfff 	.word	0xffffbfff

08002b28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	4a23      	ldr	r2, [pc, #140]	@ (8002bcc <TIM_OC5_SetConfig+0xa4>)
 8002b3e:	401a      	ands	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a1f      	ldr	r2, [pc, #124]	@ (8002bd0 <TIM_OC5_SetConfig+0xa8>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd4 <TIM_OC5_SetConfig+0xac>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	041b      	lsls	r3, r3, #16
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a17      	ldr	r2, [pc, #92]	@ (8002bd8 <TIM_OC5_SetConfig+0xb0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00b      	beq.n	8002b96 <TIM_OC5_SetConfig+0x6e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a16      	ldr	r2, [pc, #88]	@ (8002bdc <TIM_OC5_SetConfig+0xb4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <TIM_OC5_SetConfig+0x6e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a15      	ldr	r2, [pc, #84]	@ (8002be0 <TIM_OC5_SetConfig+0xb8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d003      	beq.n	8002b96 <TIM_OC5_SetConfig+0x6e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a14      	ldr	r2, [pc, #80]	@ (8002be4 <TIM_OC5_SetConfig+0xbc>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d109      	bne.n	8002baa <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	4a0c      	ldr	r2, [pc, #48]	@ (8002bcc <TIM_OC5_SetConfig+0xa4>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	621a      	str	r2, [r3, #32]
}
 8002bc4:	46c0      	nop			@ (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b006      	add	sp, #24
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	fffeffff 	.word	0xfffeffff
 8002bd0:	fffeff8f 	.word	0xfffeff8f
 8002bd4:	fffdffff 	.word	0xfffdffff
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40014000 	.word	0x40014000
 8002be0:	40014400 	.word	0x40014400
 8002be4:	40014800 	.word	0x40014800

08002be8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	4a24      	ldr	r2, [pc, #144]	@ (8002c90 <TIM_OC6_SetConfig+0xa8>)
 8002bfe:	401a      	ands	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4a20      	ldr	r2, [pc, #128]	@ (8002c94 <TIM_OC6_SetConfig+0xac>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4a1c      	ldr	r2, [pc, #112]	@ (8002c98 <TIM_OC6_SetConfig+0xb0>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	051b      	lsls	r3, r3, #20
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a18      	ldr	r2, [pc, #96]	@ (8002c9c <TIM_OC6_SetConfig+0xb4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00b      	beq.n	8002c58 <TIM_OC6_SetConfig+0x70>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a17      	ldr	r2, [pc, #92]	@ (8002ca0 <TIM_OC6_SetConfig+0xb8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d007      	beq.n	8002c58 <TIM_OC6_SetConfig+0x70>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a16      	ldr	r2, [pc, #88]	@ (8002ca4 <TIM_OC6_SetConfig+0xbc>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d003      	beq.n	8002c58 <TIM_OC6_SetConfig+0x70>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a15      	ldr	r2, [pc, #84]	@ (8002ca8 <TIM_OC6_SetConfig+0xc0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d109      	bne.n	8002c6c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	4a14      	ldr	r2, [pc, #80]	@ (8002cac <TIM_OC6_SetConfig+0xc4>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	029b      	lsls	r3, r3, #10
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	621a      	str	r2, [r3, #32]
}
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b006      	add	sp, #24
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			@ (mov r8, r8)
 8002c90:	ffefffff 	.word	0xffefffff
 8002c94:	feff8fff 	.word	0xfeff8fff
 8002c98:	ffdfffff 	.word	0xffdfffff
 8002c9c:	40012c00 	.word	0x40012c00
 8002ca0:	40014000 	.word	0x40014000
 8002ca4:	40014400 	.word	0x40014400
 8002ca8:	40014800 	.word	0x40014800
 8002cac:	fffbffff 	.word	0xfffbffff

08002cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	4393      	bics	r3, r2
 8002cca:	001a      	movs	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	22f0      	movs	r2, #240	@ 0xf0
 8002cda:	4393      	bics	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	220a      	movs	r2, #10
 8002cec:	4393      	bics	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	621a      	str	r2, [r3, #32]
}
 8002d04:	46c0      	nop			@ (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b006      	add	sp, #24
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	2210      	movs	r2, #16
 8002d24:	4393      	bics	r3, r2
 8002d26:	001a      	movs	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4a0d      	ldr	r2, [pc, #52]	@ (8002d6c <TIM_TI2_ConfigInputStage+0x60>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	031b      	lsls	r3, r3, #12
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	22a0      	movs	r2, #160	@ 0xa0
 8002d48:	4393      	bics	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	621a      	str	r2, [r3, #32]
}
 8002d62:	46c0      	nop			@ (mov r8, r8)
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b006      	add	sp, #24
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	46c0      	nop			@ (mov r8, r8)
 8002d6c:	ffff0fff 	.word	0xffff0fff

08002d70 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4a08      	ldr	r2, [pc, #32]	@ (8002da4 <TIM_ITRx_SetConfig+0x34>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	2207      	movs	r2, #7
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	609a      	str	r2, [r3, #8]
}
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b004      	add	sp, #16
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	ffcfff8f 	.word	0xffcfff8f

08002da8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	4a09      	ldr	r2, [pc, #36]	@ (8002de4 <TIM_ETR_SetConfig+0x3c>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	021a      	lsls	r2, r3, #8
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	609a      	str	r2, [r3, #8]
}
 8002ddc:	46c0      	nop			@ (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b006      	add	sp, #24
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	ffff00ff 	.word	0xffff00ff

08002de8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	221f      	movs	r2, #31
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	0013      	movs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	43d2      	mvns	r2, r2
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a1a      	ldr	r2, [r3, #32]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	211f      	movs	r1, #31
 8002e18:	400b      	ands	r3, r1
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4099      	lsls	r1, r3
 8002e1e:	000b      	movs	r3, r1
 8002e20:	431a      	orrs	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	621a      	str	r2, [r3, #32]
}
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b006      	add	sp, #24
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	223c      	movs	r2, #60	@ 0x3c
 8002e3e:	5c9b      	ldrb	r3, [r3, r2]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e055      	b.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	223c      	movs	r2, #60	@ 0x3c
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	223d      	movs	r2, #61	@ 0x3d
 8002e54:	2102      	movs	r1, #2
 8002e56:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a23      	ldr	r2, [pc, #140]	@ (8002efc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d108      	bne.n	8002e84 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4a22      	ldr	r2, [pc, #136]	@ (8002f00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2270      	movs	r2, #112	@ 0x70
 8002e88:	4393      	bics	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a16      	ldr	r2, [pc, #88]	@ (8002efc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00f      	beq.n	8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	2380      	movs	r3, #128	@ 0x80
 8002eae:	05db      	lsls	r3, r3, #23
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d009      	beq.n	8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a12      	ldr	r2, [pc, #72]	@ (8002f04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d004      	beq.n	8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a11      	ldr	r2, [pc, #68]	@ (8002f08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d10c      	bne.n	8002ee2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2280      	movs	r2, #128	@ 0x80
 8002ecc:	4393      	bics	r3, r2
 8002ece:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	223d      	movs	r2, #61	@ 0x3d
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	223c      	movs	r2, #60	@ 0x3c
 8002eee:	2100      	movs	r1, #0
 8002ef0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b004      	add	sp, #16
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40012c00 	.word	0x40012c00
 8002f00:	ff0fffff 	.word	0xff0fffff
 8002f04:	40000400 	.word	0x40000400
 8002f08:	40014000 	.word	0x40014000

08002f0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e046      	b.n	8002fac <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2288      	movs	r2, #136	@ 0x88
 8002f22:	589b      	ldr	r3, [r3, r2]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d107      	bne.n	8002f38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2284      	movs	r2, #132	@ 0x84
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f7fd fd8c 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2288      	movs	r2, #136	@ 0x88
 8002f3c:	2124      	movs	r1, #36	@ 0x24
 8002f3e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	438a      	bics	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 faea 	bl	8003534 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	0018      	movs	r0, r3
 8002f64:	f000 f828 	bl	8002fb8 <UART_SetConfig>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e01c      	b.n	8002fac <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	490d      	ldr	r1, [pc, #52]	@ (8002fb4 <HAL_UART_Init+0xa8>)
 8002f7e:	400a      	ands	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	212a      	movs	r1, #42	@ 0x2a
 8002f8e:	438a      	bics	r2, r1
 8002f90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f000 fb79 	bl	800369c <UART_CheckIdleState>
 8002faa:	0003      	movs	r3, r0
}
 8002fac:	0018      	movs	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b002      	add	sp, #8
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	ffffb7ff 	.word	0xffffb7ff

08002fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb8:	b5b0      	push	{r4, r5, r7, lr}
 8002fba:	b090      	sub	sp, #64	@ 0x40
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fc0:	231a      	movs	r3, #26
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	189b      	adds	r3, r3, r2
 8002fc6:	19db      	adds	r3, r3, r7
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4aaf      	ldr	r2, [pc, #700]	@ (80032a8 <UART_SetConfig+0x2f0>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	0019      	movs	r1, r3
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4aaa      	ldr	r2, [pc, #680]	@ (80032ac <UART_SetConfig+0x2f4>)
 8003002:	4013      	ands	r3, r2
 8003004:	0018      	movs	r0, r3
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	68d9      	ldr	r1, [r3, #12]
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	0003      	movs	r3, r0
 8003010:	430b      	orrs	r3, r1
 8003012:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4aa4      	ldr	r2, [pc, #656]	@ (80032b0 <UART_SetConfig+0x2f8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d004      	beq.n	800302e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800302a:	4313      	orrs	r3, r2
 800302c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4a9f      	ldr	r2, [pc, #636]	@ (80032b4 <UART_SetConfig+0x2fc>)
 8003036:	4013      	ands	r3, r2
 8003038:	0019      	movs	r1, r3
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003040:	430b      	orrs	r3, r1
 8003042:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304a:	220f      	movs	r2, #15
 800304c:	4393      	bics	r3, r2
 800304e:	0018      	movs	r0, r3
 8003050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003052:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	0003      	movs	r3, r0
 800305a:	430b      	orrs	r3, r1
 800305c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a95      	ldr	r2, [pc, #596]	@ (80032b8 <UART_SetConfig+0x300>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d131      	bne.n	80030cc <UART_SetConfig+0x114>
 8003068:	4b94      	ldr	r3, [pc, #592]	@ (80032bc <UART_SetConfig+0x304>)
 800306a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306c:	2203      	movs	r2, #3
 800306e:	4013      	ands	r3, r2
 8003070:	2b03      	cmp	r3, #3
 8003072:	d01d      	beq.n	80030b0 <UART_SetConfig+0xf8>
 8003074:	d823      	bhi.n	80030be <UART_SetConfig+0x106>
 8003076:	2b02      	cmp	r3, #2
 8003078:	d00c      	beq.n	8003094 <UART_SetConfig+0xdc>
 800307a:	d820      	bhi.n	80030be <UART_SetConfig+0x106>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <UART_SetConfig+0xce>
 8003080:	2b01      	cmp	r3, #1
 8003082:	d00e      	beq.n	80030a2 <UART_SetConfig+0xea>
 8003084:	e01b      	b.n	80030be <UART_SetConfig+0x106>
 8003086:	231b      	movs	r3, #27
 8003088:	2220      	movs	r2, #32
 800308a:	189b      	adds	r3, r3, r2
 800308c:	19db      	adds	r3, r3, r7
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	e0b4      	b.n	80031fe <UART_SetConfig+0x246>
 8003094:	231b      	movs	r3, #27
 8003096:	2220      	movs	r2, #32
 8003098:	189b      	adds	r3, r3, r2
 800309a:	19db      	adds	r3, r3, r7
 800309c:	2202      	movs	r2, #2
 800309e:	701a      	strb	r2, [r3, #0]
 80030a0:	e0ad      	b.n	80031fe <UART_SetConfig+0x246>
 80030a2:	231b      	movs	r3, #27
 80030a4:	2220      	movs	r2, #32
 80030a6:	189b      	adds	r3, r3, r2
 80030a8:	19db      	adds	r3, r3, r7
 80030aa:	2204      	movs	r2, #4
 80030ac:	701a      	strb	r2, [r3, #0]
 80030ae:	e0a6      	b.n	80031fe <UART_SetConfig+0x246>
 80030b0:	231b      	movs	r3, #27
 80030b2:	2220      	movs	r2, #32
 80030b4:	189b      	adds	r3, r3, r2
 80030b6:	19db      	adds	r3, r3, r7
 80030b8:	2208      	movs	r2, #8
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	e09f      	b.n	80031fe <UART_SetConfig+0x246>
 80030be:	231b      	movs	r3, #27
 80030c0:	2220      	movs	r2, #32
 80030c2:	189b      	adds	r3, r3, r2
 80030c4:	19db      	adds	r3, r3, r7
 80030c6:	2210      	movs	r2, #16
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	e098      	b.n	80031fe <UART_SetConfig+0x246>
 80030cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a7b      	ldr	r2, [pc, #492]	@ (80032c0 <UART_SetConfig+0x308>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d131      	bne.n	800313a <UART_SetConfig+0x182>
 80030d6:	4b79      	ldr	r3, [pc, #484]	@ (80032bc <UART_SetConfig+0x304>)
 80030d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030da:	220c      	movs	r2, #12
 80030dc:	4013      	ands	r3, r2
 80030de:	2b0c      	cmp	r3, #12
 80030e0:	d01d      	beq.n	800311e <UART_SetConfig+0x166>
 80030e2:	d823      	bhi.n	800312c <UART_SetConfig+0x174>
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d00c      	beq.n	8003102 <UART_SetConfig+0x14a>
 80030e8:	d820      	bhi.n	800312c <UART_SetConfig+0x174>
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <UART_SetConfig+0x13c>
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d00e      	beq.n	8003110 <UART_SetConfig+0x158>
 80030f2:	e01b      	b.n	800312c <UART_SetConfig+0x174>
 80030f4:	231b      	movs	r3, #27
 80030f6:	2220      	movs	r2, #32
 80030f8:	189b      	adds	r3, r3, r2
 80030fa:	19db      	adds	r3, r3, r7
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	e07d      	b.n	80031fe <UART_SetConfig+0x246>
 8003102:	231b      	movs	r3, #27
 8003104:	2220      	movs	r2, #32
 8003106:	189b      	adds	r3, r3, r2
 8003108:	19db      	adds	r3, r3, r7
 800310a:	2202      	movs	r2, #2
 800310c:	701a      	strb	r2, [r3, #0]
 800310e:	e076      	b.n	80031fe <UART_SetConfig+0x246>
 8003110:	231b      	movs	r3, #27
 8003112:	2220      	movs	r2, #32
 8003114:	189b      	adds	r3, r3, r2
 8003116:	19db      	adds	r3, r3, r7
 8003118:	2204      	movs	r2, #4
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	e06f      	b.n	80031fe <UART_SetConfig+0x246>
 800311e:	231b      	movs	r3, #27
 8003120:	2220      	movs	r2, #32
 8003122:	189b      	adds	r3, r3, r2
 8003124:	19db      	adds	r3, r3, r7
 8003126:	2208      	movs	r2, #8
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	e068      	b.n	80031fe <UART_SetConfig+0x246>
 800312c:	231b      	movs	r3, #27
 800312e:	2220      	movs	r2, #32
 8003130:	189b      	adds	r3, r3, r2
 8003132:	19db      	adds	r3, r3, r7
 8003134:	2210      	movs	r2, #16
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	e061      	b.n	80031fe <UART_SetConfig+0x246>
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a61      	ldr	r2, [pc, #388]	@ (80032c4 <UART_SetConfig+0x30c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d106      	bne.n	8003152 <UART_SetConfig+0x19a>
 8003144:	231b      	movs	r3, #27
 8003146:	2220      	movs	r2, #32
 8003148:	189b      	adds	r3, r3, r2
 800314a:	19db      	adds	r3, r3, r7
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	e055      	b.n	80031fe <UART_SetConfig+0x246>
 8003152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a5c      	ldr	r2, [pc, #368]	@ (80032c8 <UART_SetConfig+0x310>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d106      	bne.n	800316a <UART_SetConfig+0x1b2>
 800315c:	231b      	movs	r3, #27
 800315e:	2220      	movs	r2, #32
 8003160:	189b      	adds	r3, r3, r2
 8003162:	19db      	adds	r3, r3, r7
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	e049      	b.n	80031fe <UART_SetConfig+0x246>
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a50      	ldr	r2, [pc, #320]	@ (80032b0 <UART_SetConfig+0x2f8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d13e      	bne.n	80031f2 <UART_SetConfig+0x23a>
 8003174:	4b51      	ldr	r3, [pc, #324]	@ (80032bc <UART_SetConfig+0x304>)
 8003176:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003178:	23c0      	movs	r3, #192	@ 0xc0
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	4013      	ands	r3, r2
 800317e:	22c0      	movs	r2, #192	@ 0xc0
 8003180:	0112      	lsls	r2, r2, #4
 8003182:	4293      	cmp	r3, r2
 8003184:	d027      	beq.n	80031d6 <UART_SetConfig+0x21e>
 8003186:	22c0      	movs	r2, #192	@ 0xc0
 8003188:	0112      	lsls	r2, r2, #4
 800318a:	4293      	cmp	r3, r2
 800318c:	d82a      	bhi.n	80031e4 <UART_SetConfig+0x22c>
 800318e:	2280      	movs	r2, #128	@ 0x80
 8003190:	0112      	lsls	r2, r2, #4
 8003192:	4293      	cmp	r3, r2
 8003194:	d011      	beq.n	80031ba <UART_SetConfig+0x202>
 8003196:	2280      	movs	r2, #128	@ 0x80
 8003198:	0112      	lsls	r2, r2, #4
 800319a:	4293      	cmp	r3, r2
 800319c:	d822      	bhi.n	80031e4 <UART_SetConfig+0x22c>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d004      	beq.n	80031ac <UART_SetConfig+0x1f4>
 80031a2:	2280      	movs	r2, #128	@ 0x80
 80031a4:	00d2      	lsls	r2, r2, #3
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00e      	beq.n	80031c8 <UART_SetConfig+0x210>
 80031aa:	e01b      	b.n	80031e4 <UART_SetConfig+0x22c>
 80031ac:	231b      	movs	r3, #27
 80031ae:	2220      	movs	r2, #32
 80031b0:	189b      	adds	r3, r3, r2
 80031b2:	19db      	adds	r3, r3, r7
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
 80031b8:	e021      	b.n	80031fe <UART_SetConfig+0x246>
 80031ba:	231b      	movs	r3, #27
 80031bc:	2220      	movs	r2, #32
 80031be:	189b      	adds	r3, r3, r2
 80031c0:	19db      	adds	r3, r3, r7
 80031c2:	2202      	movs	r2, #2
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e01a      	b.n	80031fe <UART_SetConfig+0x246>
 80031c8:	231b      	movs	r3, #27
 80031ca:	2220      	movs	r2, #32
 80031cc:	189b      	adds	r3, r3, r2
 80031ce:	19db      	adds	r3, r3, r7
 80031d0:	2204      	movs	r2, #4
 80031d2:	701a      	strb	r2, [r3, #0]
 80031d4:	e013      	b.n	80031fe <UART_SetConfig+0x246>
 80031d6:	231b      	movs	r3, #27
 80031d8:	2220      	movs	r2, #32
 80031da:	189b      	adds	r3, r3, r2
 80031dc:	19db      	adds	r3, r3, r7
 80031de:	2208      	movs	r2, #8
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e00c      	b.n	80031fe <UART_SetConfig+0x246>
 80031e4:	231b      	movs	r3, #27
 80031e6:	2220      	movs	r2, #32
 80031e8:	189b      	adds	r3, r3, r2
 80031ea:	19db      	adds	r3, r3, r7
 80031ec:	2210      	movs	r2, #16
 80031ee:	701a      	strb	r2, [r3, #0]
 80031f0:	e005      	b.n	80031fe <UART_SetConfig+0x246>
 80031f2:	231b      	movs	r3, #27
 80031f4:	2220      	movs	r2, #32
 80031f6:	189b      	adds	r3, r3, r2
 80031f8:	19db      	adds	r3, r3, r7
 80031fa:	2210      	movs	r2, #16
 80031fc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a2b      	ldr	r2, [pc, #172]	@ (80032b0 <UART_SetConfig+0x2f8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d000      	beq.n	800320a <UART_SetConfig+0x252>
 8003208:	e0a9      	b.n	800335e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800320a:	231b      	movs	r3, #27
 800320c:	2220      	movs	r2, #32
 800320e:	189b      	adds	r3, r3, r2
 8003210:	19db      	adds	r3, r3, r7
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b08      	cmp	r3, #8
 8003216:	d015      	beq.n	8003244 <UART_SetConfig+0x28c>
 8003218:	dc18      	bgt.n	800324c <UART_SetConfig+0x294>
 800321a:	2b04      	cmp	r3, #4
 800321c:	d00d      	beq.n	800323a <UART_SetConfig+0x282>
 800321e:	dc15      	bgt.n	800324c <UART_SetConfig+0x294>
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <UART_SetConfig+0x272>
 8003224:	2b02      	cmp	r3, #2
 8003226:	d005      	beq.n	8003234 <UART_SetConfig+0x27c>
 8003228:	e010      	b.n	800324c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800322a:	f7fe fca9 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 800322e:	0003      	movs	r3, r0
 8003230:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003232:	e014      	b.n	800325e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003234:	4b25      	ldr	r3, [pc, #148]	@ (80032cc <UART_SetConfig+0x314>)
 8003236:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003238:	e011      	b.n	800325e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800323a:	f7fe fc15 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 800323e:	0003      	movs	r3, r0
 8003240:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003242:	e00c      	b.n	800325e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003244:	2380      	movs	r3, #128	@ 0x80
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800324a:	e008      	b.n	800325e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003250:	231a      	movs	r3, #26
 8003252:	2220      	movs	r2, #32
 8003254:	189b      	adds	r3, r3, r2
 8003256:	19db      	adds	r3, r3, r7
 8003258:	2201      	movs	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]
        break;
 800325c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800325e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003260:	2b00      	cmp	r3, #0
 8003262:	d100      	bne.n	8003266 <UART_SetConfig+0x2ae>
 8003264:	e14b      	b.n	80034fe <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800326a:	4b19      	ldr	r3, [pc, #100]	@ (80032d0 <UART_SetConfig+0x318>)
 800326c:	0052      	lsls	r2, r2, #1
 800326e:	5ad3      	ldrh	r3, [r2, r3]
 8003270:	0019      	movs	r1, r3
 8003272:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003274:	f7fc ff46 	bl	8000104 <__udivsi3>
 8003278:	0003      	movs	r3, r0
 800327a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	0013      	movs	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	189b      	adds	r3, r3, r2
 8003286:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003288:	429a      	cmp	r2, r3
 800328a:	d305      	bcc.n	8003298 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003292:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003294:	429a      	cmp	r2, r3
 8003296:	d91d      	bls.n	80032d4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003298:	231a      	movs	r3, #26
 800329a:	2220      	movs	r2, #32
 800329c:	189b      	adds	r3, r3, r2
 800329e:	19db      	adds	r3, r3, r7
 80032a0:	2201      	movs	r2, #1
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e12b      	b.n	80034fe <UART_SetConfig+0x546>
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	cfff69f3 	.word	0xcfff69f3
 80032ac:	ffffcfff 	.word	0xffffcfff
 80032b0:	40008000 	.word	0x40008000
 80032b4:	11fff4ff 	.word	0x11fff4ff
 80032b8:	40013800 	.word	0x40013800
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40004400 	.word	0x40004400
 80032c4:	40004800 	.word	0x40004800
 80032c8:	40004c00 	.word	0x40004c00
 80032cc:	00f42400 	.word	0x00f42400
 80032d0:	08003cf4 	.word	0x08003cf4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032e0:	4b92      	ldr	r3, [pc, #584]	@ (800352c <UART_SetConfig+0x574>)
 80032e2:	0052      	lsls	r2, r2, #1
 80032e4:	5ad3      	ldrh	r3, [r2, r3]
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	69b8      	ldr	r0, [r7, #24]
 80032f2:	69f9      	ldr	r1, [r7, #28]
 80032f4:	f7fd f87c 	bl	80003f0 <__aeabi_uldivmod>
 80032f8:	0002      	movs	r2, r0
 80032fa:	000b      	movs	r3, r1
 80032fc:	0e11      	lsrs	r1, r2, #24
 80032fe:	021d      	lsls	r5, r3, #8
 8003300:	430d      	orrs	r5, r1
 8003302:	0214      	lsls	r4, r2, #8
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68b8      	ldr	r0, [r7, #8]
 8003312:	68f9      	ldr	r1, [r7, #12]
 8003314:	1900      	adds	r0, r0, r4
 8003316:	4169      	adcs	r1, r5
 8003318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	2300      	movs	r3, #0
 8003320:	607b      	str	r3, [r7, #4]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f7fd f863 	bl	80003f0 <__aeabi_uldivmod>
 800332a:	0002      	movs	r2, r0
 800332c:	000b      	movs	r3, r1
 800332e:	0013      	movs	r3, r2
 8003330:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003334:	23c0      	movs	r3, #192	@ 0xc0
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	429a      	cmp	r2, r3
 800333a:	d309      	bcc.n	8003350 <UART_SetConfig+0x398>
 800333c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800333e:	2380      	movs	r3, #128	@ 0x80
 8003340:	035b      	lsls	r3, r3, #13
 8003342:	429a      	cmp	r2, r3
 8003344:	d204      	bcs.n	8003350 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800334c:	60da      	str	r2, [r3, #12]
 800334e:	e0d6      	b.n	80034fe <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003350:	231a      	movs	r3, #26
 8003352:	2220      	movs	r2, #32
 8003354:	189b      	adds	r3, r3, r2
 8003356:	19db      	adds	r3, r3, r7
 8003358:	2201      	movs	r2, #1
 800335a:	701a      	strb	r2, [r3, #0]
 800335c:	e0cf      	b.n	80034fe <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	69da      	ldr	r2, [r3, #28]
 8003362:	2380      	movs	r3, #128	@ 0x80
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	429a      	cmp	r2, r3
 8003368:	d000      	beq.n	800336c <UART_SetConfig+0x3b4>
 800336a:	e070      	b.n	800344e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800336c:	231b      	movs	r3, #27
 800336e:	2220      	movs	r2, #32
 8003370:	189b      	adds	r3, r3, r2
 8003372:	19db      	adds	r3, r3, r7
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b08      	cmp	r3, #8
 8003378:	d015      	beq.n	80033a6 <UART_SetConfig+0x3ee>
 800337a:	dc18      	bgt.n	80033ae <UART_SetConfig+0x3f6>
 800337c:	2b04      	cmp	r3, #4
 800337e:	d00d      	beq.n	800339c <UART_SetConfig+0x3e4>
 8003380:	dc15      	bgt.n	80033ae <UART_SetConfig+0x3f6>
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <UART_SetConfig+0x3d4>
 8003386:	2b02      	cmp	r3, #2
 8003388:	d005      	beq.n	8003396 <UART_SetConfig+0x3de>
 800338a:	e010      	b.n	80033ae <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800338c:	f7fe fbf8 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 8003390:	0003      	movs	r3, r0
 8003392:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003394:	e014      	b.n	80033c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003396:	4b66      	ldr	r3, [pc, #408]	@ (8003530 <UART_SetConfig+0x578>)
 8003398:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800339a:	e011      	b.n	80033c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800339c:	f7fe fb64 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 80033a0:	0003      	movs	r3, r0
 80033a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80033a4:	e00c      	b.n	80033c0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033a6:	2380      	movs	r3, #128	@ 0x80
 80033a8:	021b      	lsls	r3, r3, #8
 80033aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80033ac:	e008      	b.n	80033c0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80033b2:	231a      	movs	r3, #26
 80033b4:	2220      	movs	r2, #32
 80033b6:	189b      	adds	r3, r3, r2
 80033b8:	19db      	adds	r3, r3, r7
 80033ba:	2201      	movs	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
        break;
 80033be:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d100      	bne.n	80033c8 <UART_SetConfig+0x410>
 80033c6:	e09a      	b.n	80034fe <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033cc:	4b57      	ldr	r3, [pc, #348]	@ (800352c <UART_SetConfig+0x574>)
 80033ce:	0052      	lsls	r2, r2, #1
 80033d0:	5ad3      	ldrh	r3, [r2, r3]
 80033d2:	0019      	movs	r1, r3
 80033d4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80033d6:	f7fc fe95 	bl	8000104 <__udivsi3>
 80033da:	0003      	movs	r3, r0
 80033dc:	005a      	lsls	r2, r3, #1
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	18d2      	adds	r2, r2, r3
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	0019      	movs	r1, r3
 80033ec:	0010      	movs	r0, r2
 80033ee:	f7fc fe89 	bl	8000104 <__udivsi3>
 80033f2:	0003      	movs	r3, r0
 80033f4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f8:	2b0f      	cmp	r3, #15
 80033fa:	d921      	bls.n	8003440 <UART_SetConfig+0x488>
 80033fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033fe:	2380      	movs	r3, #128	@ 0x80
 8003400:	025b      	lsls	r3, r3, #9
 8003402:	429a      	cmp	r2, r3
 8003404:	d21c      	bcs.n	8003440 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003408:	b29a      	uxth	r2, r3
 800340a:	200e      	movs	r0, #14
 800340c:	2420      	movs	r4, #32
 800340e:	1903      	adds	r3, r0, r4
 8003410:	19db      	adds	r3, r3, r7
 8003412:	210f      	movs	r1, #15
 8003414:	438a      	bics	r2, r1
 8003416:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	b29b      	uxth	r3, r3
 800341e:	2207      	movs	r2, #7
 8003420:	4013      	ands	r3, r2
 8003422:	b299      	uxth	r1, r3
 8003424:	1903      	adds	r3, r0, r4
 8003426:	19db      	adds	r3, r3, r7
 8003428:	1902      	adds	r2, r0, r4
 800342a:	19d2      	adds	r2, r2, r7
 800342c:	8812      	ldrh	r2, [r2, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	1902      	adds	r2, r0, r4
 8003438:	19d2      	adds	r2, r2, r7
 800343a:	8812      	ldrh	r2, [r2, #0]
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	e05e      	b.n	80034fe <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003440:	231a      	movs	r3, #26
 8003442:	2220      	movs	r2, #32
 8003444:	189b      	adds	r3, r3, r2
 8003446:	19db      	adds	r3, r3, r7
 8003448:	2201      	movs	r2, #1
 800344a:	701a      	strb	r2, [r3, #0]
 800344c:	e057      	b.n	80034fe <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800344e:	231b      	movs	r3, #27
 8003450:	2220      	movs	r2, #32
 8003452:	189b      	adds	r3, r3, r2
 8003454:	19db      	adds	r3, r3, r7
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b08      	cmp	r3, #8
 800345a:	d015      	beq.n	8003488 <UART_SetConfig+0x4d0>
 800345c:	dc18      	bgt.n	8003490 <UART_SetConfig+0x4d8>
 800345e:	2b04      	cmp	r3, #4
 8003460:	d00d      	beq.n	800347e <UART_SetConfig+0x4c6>
 8003462:	dc15      	bgt.n	8003490 <UART_SetConfig+0x4d8>
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <UART_SetConfig+0x4b6>
 8003468:	2b02      	cmp	r3, #2
 800346a:	d005      	beq.n	8003478 <UART_SetConfig+0x4c0>
 800346c:	e010      	b.n	8003490 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800346e:	f7fe fb87 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 8003472:	0003      	movs	r3, r0
 8003474:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003476:	e014      	b.n	80034a2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003478:	4b2d      	ldr	r3, [pc, #180]	@ (8003530 <UART_SetConfig+0x578>)
 800347a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800347c:	e011      	b.n	80034a2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800347e:	f7fe faf3 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8003482:	0003      	movs	r3, r0
 8003484:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003486:	e00c      	b.n	80034a2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003488:	2380      	movs	r3, #128	@ 0x80
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800348e:	e008      	b.n	80034a2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003494:	231a      	movs	r3, #26
 8003496:	2220      	movs	r2, #32
 8003498:	189b      	adds	r3, r3, r2
 800349a:	19db      	adds	r3, r3, r7
 800349c:	2201      	movs	r2, #1
 800349e:	701a      	strb	r2, [r3, #0]
        break;
 80034a0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80034a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d02a      	beq.n	80034fe <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034ac:	4b1f      	ldr	r3, [pc, #124]	@ (800352c <UART_SetConfig+0x574>)
 80034ae:	0052      	lsls	r2, r2, #1
 80034b0:	5ad3      	ldrh	r3, [r2, r3]
 80034b2:	0019      	movs	r1, r3
 80034b4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80034b6:	f7fc fe25 	bl	8000104 <__udivsi3>
 80034ba:	0003      	movs	r3, r0
 80034bc:	001a      	movs	r2, r3
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	085b      	lsrs	r3, r3, #1
 80034c4:	18d2      	adds	r2, r2, r3
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	0019      	movs	r1, r3
 80034cc:	0010      	movs	r0, r2
 80034ce:	f7fc fe19 	bl	8000104 <__udivsi3>
 80034d2:	0003      	movs	r3, r0
 80034d4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d8:	2b0f      	cmp	r3, #15
 80034da:	d90a      	bls.n	80034f2 <UART_SetConfig+0x53a>
 80034dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034de:	2380      	movs	r3, #128	@ 0x80
 80034e0:	025b      	lsls	r3, r3, #9
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d205      	bcs.n	80034f2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60da      	str	r2, [r3, #12]
 80034f0:	e005      	b.n	80034fe <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80034f2:	231a      	movs	r3, #26
 80034f4:	2220      	movs	r2, #32
 80034f6:	189b      	adds	r3, r3, r2
 80034f8:	19db      	adds	r3, r3, r7
 80034fa:	2201      	movs	r2, #1
 80034fc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80034fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003500:	226a      	movs	r2, #106	@ 0x6a
 8003502:	2101      	movs	r1, #1
 8003504:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	2268      	movs	r2, #104	@ 0x68
 800350a:	2101      	movs	r1, #1
 800350c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003510:	2200      	movs	r2, #0
 8003512:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003516:	2200      	movs	r2, #0
 8003518:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800351a:	231a      	movs	r3, #26
 800351c:	2220      	movs	r2, #32
 800351e:	189b      	adds	r3, r3, r2
 8003520:	19db      	adds	r3, r3, r7
 8003522:	781b      	ldrb	r3, [r3, #0]
}
 8003524:	0018      	movs	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	b010      	add	sp, #64	@ 0x40
 800352a:	bdb0      	pop	{r4, r5, r7, pc}
 800352c:	08003cf4 	.word	0x08003cf4
 8003530:	00f42400 	.word	0x00f42400

08003534 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003540:	2208      	movs	r2, #8
 8003542:	4013      	ands	r3, r2
 8003544:	d00b      	beq.n	800355e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a4a      	ldr	r2, [pc, #296]	@ (8003678 <UART_AdvFeatureConfig+0x144>)
 800354e:	4013      	ands	r3, r2
 8003550:	0019      	movs	r1, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003562:	2201      	movs	r2, #1
 8003564:	4013      	ands	r3, r2
 8003566:	d00b      	beq.n	8003580 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4a43      	ldr	r2, [pc, #268]	@ (800367c <UART_AdvFeatureConfig+0x148>)
 8003570:	4013      	ands	r3, r2
 8003572:	0019      	movs	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003584:	2202      	movs	r2, #2
 8003586:	4013      	ands	r3, r2
 8003588:	d00b      	beq.n	80035a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4a3b      	ldr	r2, [pc, #236]	@ (8003680 <UART_AdvFeatureConfig+0x14c>)
 8003592:	4013      	ands	r3, r2
 8003594:	0019      	movs	r1, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a6:	2204      	movs	r2, #4
 80035a8:	4013      	ands	r3, r2
 80035aa:	d00b      	beq.n	80035c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	4a34      	ldr	r2, [pc, #208]	@ (8003684 <UART_AdvFeatureConfig+0x150>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	0019      	movs	r1, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c8:	2210      	movs	r2, #16
 80035ca:	4013      	ands	r3, r2
 80035cc:	d00b      	beq.n	80035e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003688 <UART_AdvFeatureConfig+0x154>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ea:	2220      	movs	r2, #32
 80035ec:	4013      	ands	r3, r2
 80035ee:	d00b      	beq.n	8003608 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	4a25      	ldr	r2, [pc, #148]	@ (800368c <UART_AdvFeatureConfig+0x158>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	0019      	movs	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360c:	2240      	movs	r2, #64	@ 0x40
 800360e:	4013      	ands	r3, r2
 8003610:	d01d      	beq.n	800364e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	4a1d      	ldr	r2, [pc, #116]	@ (8003690 <UART_AdvFeatureConfig+0x15c>)
 800361a:	4013      	ands	r3, r2
 800361c:	0019      	movs	r1, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800362e:	2380      	movs	r3, #128	@ 0x80
 8003630:	035b      	lsls	r3, r3, #13
 8003632:	429a      	cmp	r2, r3
 8003634:	d10b      	bne.n	800364e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4a15      	ldr	r2, [pc, #84]	@ (8003694 <UART_AdvFeatureConfig+0x160>)
 800363e:	4013      	ands	r3, r2
 8003640:	0019      	movs	r1, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003652:	2280      	movs	r2, #128	@ 0x80
 8003654:	4013      	ands	r3, r2
 8003656:	d00b      	beq.n	8003670 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4a0e      	ldr	r2, [pc, #56]	@ (8003698 <UART_AdvFeatureConfig+0x164>)
 8003660:	4013      	ands	r3, r2
 8003662:	0019      	movs	r1, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]
  }
}
 8003670:	46c0      	nop			@ (mov r8, r8)
 8003672:	46bd      	mov	sp, r7
 8003674:	b002      	add	sp, #8
 8003676:	bd80      	pop	{r7, pc}
 8003678:	ffff7fff 	.word	0xffff7fff
 800367c:	fffdffff 	.word	0xfffdffff
 8003680:	fffeffff 	.word	0xfffeffff
 8003684:	fffbffff 	.word	0xfffbffff
 8003688:	ffffefff 	.word	0xffffefff
 800368c:	ffffdfff 	.word	0xffffdfff
 8003690:	ffefffff 	.word	0xffefffff
 8003694:	ff9fffff 	.word	0xff9fffff
 8003698:	fff7ffff 	.word	0xfff7ffff

0800369c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b092      	sub	sp, #72	@ 0x48
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2290      	movs	r2, #144	@ 0x90
 80036a8:	2100      	movs	r1, #0
 80036aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036ac:	f7fd faf4 	bl	8000c98 <HAL_GetTick>
 80036b0:	0003      	movs	r3, r0
 80036b2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2208      	movs	r2, #8
 80036bc:	4013      	ands	r3, r2
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d12d      	bne.n	800371e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c4:	2280      	movs	r2, #128	@ 0x80
 80036c6:	0391      	lsls	r1, r2, #14
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4a47      	ldr	r2, [pc, #284]	@ (80037e8 <UART_CheckIdleState+0x14c>)
 80036cc:	9200      	str	r2, [sp, #0]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f000 f88e 	bl	80037f0 <UART_WaitOnFlagUntilTimeout>
 80036d4:	1e03      	subs	r3, r0, #0
 80036d6:	d022      	beq.n	800371e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d8:	f3ef 8310 	mrs	r3, PRIMASK
 80036dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80036e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036e2:	2301      	movs	r3, #1
 80036e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e8:	f383 8810 	msr	PRIMASK, r3
}
 80036ec:	46c0      	nop			@ (mov r8, r8)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2180      	movs	r1, #128	@ 0x80
 80036fa:	438a      	bics	r2, r1
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003700:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003704:	f383 8810 	msr	PRIMASK, r3
}
 8003708:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2288      	movs	r2, #136	@ 0x88
 800370e:	2120      	movs	r1, #32
 8003710:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2284      	movs	r2, #132	@ 0x84
 8003716:	2100      	movs	r1, #0
 8003718:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e060      	b.n	80037e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2204      	movs	r2, #4
 8003726:	4013      	ands	r3, r2
 8003728:	2b04      	cmp	r3, #4
 800372a:	d146      	bne.n	80037ba <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800372c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800372e:	2280      	movs	r2, #128	@ 0x80
 8003730:	03d1      	lsls	r1, r2, #15
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	4a2c      	ldr	r2, [pc, #176]	@ (80037e8 <UART_CheckIdleState+0x14c>)
 8003736:	9200      	str	r2, [sp, #0]
 8003738:	2200      	movs	r2, #0
 800373a:	f000 f859 	bl	80037f0 <UART_WaitOnFlagUntilTimeout>
 800373e:	1e03      	subs	r3, r0, #0
 8003740:	d03b      	beq.n	80037ba <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003742:	f3ef 8310 	mrs	r3, PRIMASK
 8003746:	60fb      	str	r3, [r7, #12]
  return(result);
 8003748:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800374a:	637b      	str	r3, [r7, #52]	@ 0x34
 800374c:	2301      	movs	r3, #1
 800374e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f383 8810 	msr	PRIMASK, r3
}
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4922      	ldr	r1, [pc, #136]	@ (80037ec <UART_CheckIdleState+0x150>)
 8003764:	400a      	ands	r2, r1
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800376a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f383 8810 	msr	PRIMASK, r3
}
 8003772:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003774:	f3ef 8310 	mrs	r3, PRIMASK
 8003778:	61bb      	str	r3, [r7, #24]
  return(result);
 800377a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377c:	633b      	str	r3, [r7, #48]	@ 0x30
 800377e:	2301      	movs	r3, #1
 8003780:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f383 8810 	msr	PRIMASK, r3
}
 8003788:	46c0      	nop			@ (mov r8, r8)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2101      	movs	r1, #1
 8003796:	438a      	bics	r2, r1
 8003798:	609a      	str	r2, [r3, #8]
 800379a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	f383 8810 	msr	PRIMASK, r3
}
 80037a4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	228c      	movs	r2, #140	@ 0x8c
 80037aa:	2120      	movs	r1, #32
 80037ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2284      	movs	r2, #132	@ 0x84
 80037b2:	2100      	movs	r1, #0
 80037b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e012      	b.n	80037e0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2288      	movs	r2, #136	@ 0x88
 80037be:	2120      	movs	r1, #32
 80037c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	228c      	movs	r2, #140	@ 0x8c
 80037c6:	2120      	movs	r1, #32
 80037c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2284      	movs	r2, #132	@ 0x84
 80037da:	2100      	movs	r1, #0
 80037dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	0018      	movs	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b010      	add	sp, #64	@ 0x40
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	01ffffff 	.word	0x01ffffff
 80037ec:	fffffedf 	.word	0xfffffedf

080037f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	1dfb      	adds	r3, r7, #7
 80037fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003800:	e051      	b.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	3301      	adds	r3, #1
 8003806:	d04e      	beq.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003808:	f7fd fa46 	bl	8000c98 <HAL_GetTick>
 800380c:	0002      	movs	r2, r0
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	429a      	cmp	r2, r3
 8003816:	d302      	bcc.n	800381e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e051      	b.n	80038c6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2204      	movs	r2, #4
 800382a:	4013      	ands	r3, r2
 800382c:	d03b      	beq.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b80      	cmp	r3, #128	@ 0x80
 8003832:	d038      	beq.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b40      	cmp	r3, #64	@ 0x40
 8003838:	d035      	beq.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	2208      	movs	r2, #8
 8003842:	4013      	ands	r3, r2
 8003844:	2b08      	cmp	r3, #8
 8003846:	d111      	bne.n	800386c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2208      	movs	r2, #8
 800384e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	0018      	movs	r0, r3
 8003854:	f000 f83c 	bl	80038d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2290      	movs	r2, #144	@ 0x90
 800385c:	2108      	movs	r1, #8
 800385e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2284      	movs	r2, #132	@ 0x84
 8003864:	2100      	movs	r1, #0
 8003866:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e02c      	b.n	80038c6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	2380      	movs	r3, #128	@ 0x80
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	401a      	ands	r2, r3
 8003878:	2380      	movs	r3, #128	@ 0x80
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	429a      	cmp	r2, r3
 800387e:	d112      	bne.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2280      	movs	r2, #128	@ 0x80
 8003886:	0112      	lsls	r2, r2, #4
 8003888:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	0018      	movs	r0, r3
 800388e:	f000 f81f 	bl	80038d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2290      	movs	r2, #144	@ 0x90
 8003896:	2120      	movs	r1, #32
 8003898:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2284      	movs	r2, #132	@ 0x84
 800389e:	2100      	movs	r1, #0
 80038a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e00f      	b.n	80038c6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	4013      	ands	r3, r2
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	425a      	negs	r2, r3
 80038b6:	4153      	adcs	r3, r2
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	001a      	movs	r2, r3
 80038bc:	1dfb      	adds	r3, r7, #7
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d09e      	beq.n	8003802 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	0018      	movs	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b004      	add	sp, #16
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08e      	sub	sp, #56	@ 0x38
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d8:	f3ef 8310 	mrs	r3, PRIMASK
 80038dc:	617b      	str	r3, [r7, #20]
  return(result);
 80038de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80038e2:	2301      	movs	r3, #1
 80038e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	f383 8810 	msr	PRIMASK, r3
}
 80038ec:	46c0      	nop			@ (mov r8, r8)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4926      	ldr	r1, [pc, #152]	@ (8003994 <UART_EndRxTransfer+0xc4>)
 80038fa:	400a      	ands	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003900:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f383 8810 	msr	PRIMASK, r3
}
 8003908:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800390a:	f3ef 8310 	mrs	r3, PRIMASK
 800390e:	623b      	str	r3, [r7, #32]
  return(result);
 8003910:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003912:	633b      	str	r3, [r7, #48]	@ 0x30
 8003914:	2301      	movs	r3, #1
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391a:	f383 8810 	msr	PRIMASK, r3
}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	491b      	ldr	r1, [pc, #108]	@ (8003998 <UART_EndRxTransfer+0xc8>)
 800392c:	400a      	ands	r2, r1
 800392e:	609a      	str	r2, [r3, #8]
 8003930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003932:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003936:	f383 8810 	msr	PRIMASK, r3
}
 800393a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003940:	2b01      	cmp	r3, #1
 8003942:	d118      	bne.n	8003976 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003944:	f3ef 8310 	mrs	r3, PRIMASK
 8003948:	60bb      	str	r3, [r7, #8]
  return(result);
 800394a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800394c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800394e:	2301      	movs	r3, #1
 8003950:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f383 8810 	msr	PRIMASK, r3
}
 8003958:	46c0      	nop			@ (mov r8, r8)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2110      	movs	r1, #16
 8003966:	438a      	bics	r2, r1
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f383 8810 	msr	PRIMASK, r3
}
 8003974:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	228c      	movs	r2, #140	@ 0x8c
 800397a:	2120      	movs	r1, #32
 800397c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800398a:	46c0      	nop			@ (mov r8, r8)
 800398c:	46bd      	mov	sp, r7
 800398e:	b00e      	add	sp, #56	@ 0x38
 8003990:	bd80      	pop	{r7, pc}
 8003992:	46c0      	nop			@ (mov r8, r8)
 8003994:	fffffedf 	.word	0xfffffedf
 8003998:	effffffe 	.word	0xeffffffe

0800399c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2284      	movs	r2, #132	@ 0x84
 80039a8:	5c9b      	ldrb	r3, [r3, r2]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e027      	b.n	8003a02 <HAL_UARTEx_DisableFifoMode+0x66>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2284      	movs	r2, #132	@ 0x84
 80039b6:	2101      	movs	r1, #1
 80039b8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2288      	movs	r2, #136	@ 0x88
 80039be:	2124      	movs	r1, #36	@ 0x24
 80039c0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2101      	movs	r1, #1
 80039d6:	438a      	bics	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4a0b      	ldr	r2, [pc, #44]	@ (8003a0c <HAL_UARTEx_DisableFifoMode+0x70>)
 80039de:	4013      	ands	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2288      	movs	r2, #136	@ 0x88
 80039f4:	2120      	movs	r1, #32
 80039f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2284      	movs	r2, #132	@ 0x84
 80039fc:	2100      	movs	r1, #0
 80039fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	0018      	movs	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b004      	add	sp, #16
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	46c0      	nop			@ (mov r8, r8)
 8003a0c:	dfffffff 	.word	0xdfffffff

08003a10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2284      	movs	r2, #132	@ 0x84
 8003a1e:	5c9b      	ldrb	r3, [r3, r2]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e02e      	b.n	8003a86 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2284      	movs	r2, #132	@ 0x84
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2288      	movs	r2, #136	@ 0x88
 8003a34:	2124      	movs	r1, #36	@ 0x24
 8003a36:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	438a      	bics	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	08d9      	lsrs	r1, r3, #3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f000 f854 	bl	8003b14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2288      	movs	r2, #136	@ 0x88
 8003a78:	2120      	movs	r1, #32
 8003a7a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2284      	movs	r2, #132	@ 0x84
 8003a80:	2100      	movs	r1, #0
 8003a82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	0018      	movs	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b004      	add	sp, #16
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2284      	movs	r2, #132	@ 0x84
 8003a9e:	5c9b      	ldrb	r3, [r3, r2]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e02f      	b.n	8003b08 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2284      	movs	r2, #132	@ 0x84
 8003aac:	2101      	movs	r1, #1
 8003aae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2288      	movs	r2, #136	@ 0x88
 8003ab4:	2124      	movs	r1, #36	@ 0x24
 8003ab6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2101      	movs	r1, #1
 8003acc:	438a      	bics	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8003b10 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	0019      	movs	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f000 f813 	bl	8003b14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2288      	movs	r2, #136	@ 0x88
 8003afa:	2120      	movs	r1, #32
 8003afc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2284      	movs	r2, #132	@ 0x84
 8003b02:	2100      	movs	r1, #0
 8003b04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	0018      	movs	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b004      	add	sp, #16
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	f1ffffff 	.word	0xf1ffffff

08003b14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d108      	bne.n	8003b36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	226a      	movs	r2, #106	@ 0x6a
 8003b28:	2101      	movs	r1, #1
 8003b2a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2268      	movs	r2, #104	@ 0x68
 8003b30:	2101      	movs	r1, #1
 8003b32:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b34:	e043      	b.n	8003bbe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b36:	260f      	movs	r6, #15
 8003b38:	19bb      	adds	r3, r7, r6
 8003b3a:	2208      	movs	r2, #8
 8003b3c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b3e:	200e      	movs	r0, #14
 8003b40:	183b      	adds	r3, r7, r0
 8003b42:	2208      	movs	r2, #8
 8003b44:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	0e5b      	lsrs	r3, r3, #25
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	240d      	movs	r4, #13
 8003b52:	193b      	adds	r3, r7, r4
 8003b54:	2107      	movs	r1, #7
 8003b56:	400a      	ands	r2, r1
 8003b58:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	0f5b      	lsrs	r3, r3, #29
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	250c      	movs	r5, #12
 8003b66:	197b      	adds	r3, r7, r5
 8003b68:	2107      	movs	r1, #7
 8003b6a:	400a      	ands	r2, r1
 8003b6c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b6e:	183b      	adds	r3, r7, r0
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	197a      	adds	r2, r7, r5
 8003b74:	7812      	ldrb	r2, [r2, #0]
 8003b76:	4914      	ldr	r1, [pc, #80]	@ (8003bc8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003b78:	5c8a      	ldrb	r2, [r1, r2]
 8003b7a:	435a      	muls	r2, r3
 8003b7c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b7e:	197b      	adds	r3, r7, r5
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	4a12      	ldr	r2, [pc, #72]	@ (8003bcc <UARTEx_SetNbDataToProcess+0xb8>)
 8003b84:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b86:	0019      	movs	r1, r3
 8003b88:	f7fc fb46 	bl	8000218 <__divsi3>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	b299      	uxth	r1, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	226a      	movs	r2, #106	@ 0x6a
 8003b94:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b96:	19bb      	adds	r3, r7, r6
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	193a      	adds	r2, r7, r4
 8003b9c:	7812      	ldrb	r2, [r2, #0]
 8003b9e:	490a      	ldr	r1, [pc, #40]	@ (8003bc8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003ba0:	5c8a      	ldrb	r2, [r1, r2]
 8003ba2:	435a      	muls	r2, r3
 8003ba4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ba6:	193b      	adds	r3, r7, r4
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	4a08      	ldr	r2, [pc, #32]	@ (8003bcc <UARTEx_SetNbDataToProcess+0xb8>)
 8003bac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bae:	0019      	movs	r1, r3
 8003bb0:	f7fc fb32 	bl	8000218 <__divsi3>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	b299      	uxth	r1, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2268      	movs	r2, #104	@ 0x68
 8003bbc:	5299      	strh	r1, [r3, r2]
}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b005      	add	sp, #20
 8003bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	08003d0c 	.word	0x08003d0c
 8003bcc:	08003d14 	.word	0x08003d14

08003bd0 <memset>:
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	1882      	adds	r2, r0, r2
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d100      	bne.n	8003bda <memset+0xa>
 8003bd8:	4770      	bx	lr
 8003bda:	7019      	strb	r1, [r3, #0]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	e7f9      	b.n	8003bd4 <memset+0x4>

08003be0 <__libc_init_array>:
 8003be0:	b570      	push	{r4, r5, r6, lr}
 8003be2:	2600      	movs	r6, #0
 8003be4:	4c0c      	ldr	r4, [pc, #48]	@ (8003c18 <__libc_init_array+0x38>)
 8003be6:	4d0d      	ldr	r5, [pc, #52]	@ (8003c1c <__libc_init_array+0x3c>)
 8003be8:	1b64      	subs	r4, r4, r5
 8003bea:	10a4      	asrs	r4, r4, #2
 8003bec:	42a6      	cmp	r6, r4
 8003bee:	d109      	bne.n	8003c04 <__libc_init_array+0x24>
 8003bf0:	2600      	movs	r6, #0
 8003bf2:	f000 f819 	bl	8003c28 <_init>
 8003bf6:	4c0a      	ldr	r4, [pc, #40]	@ (8003c20 <__libc_init_array+0x40>)
 8003bf8:	4d0a      	ldr	r5, [pc, #40]	@ (8003c24 <__libc_init_array+0x44>)
 8003bfa:	1b64      	subs	r4, r4, r5
 8003bfc:	10a4      	asrs	r4, r4, #2
 8003bfe:	42a6      	cmp	r6, r4
 8003c00:	d105      	bne.n	8003c0e <__libc_init_array+0x2e>
 8003c02:	bd70      	pop	{r4, r5, r6, pc}
 8003c04:	00b3      	lsls	r3, r6, #2
 8003c06:	58eb      	ldr	r3, [r5, r3]
 8003c08:	4798      	blx	r3
 8003c0a:	3601      	adds	r6, #1
 8003c0c:	e7ee      	b.n	8003bec <__libc_init_array+0xc>
 8003c0e:	00b3      	lsls	r3, r6, #2
 8003c10:	58eb      	ldr	r3, [r5, r3]
 8003c12:	4798      	blx	r3
 8003c14:	3601      	adds	r6, #1
 8003c16:	e7f2      	b.n	8003bfe <__libc_init_array+0x1e>
 8003c18:	08003d24 	.word	0x08003d24
 8003c1c:	08003d24 	.word	0x08003d24
 8003c20:	08003d28 	.word	0x08003d28
 8003c24:	08003d24 	.word	0x08003d24

08003c28 <_init>:
 8003c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c2e:	bc08      	pop	{r3}
 8003c30:	469e      	mov	lr, r3
 8003c32:	4770      	bx	lr

08003c34 <_fini>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	46c0      	nop			@ (mov r8, r8)
 8003c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	469e      	mov	lr, r3
 8003c3e:	4770      	bx	lr
