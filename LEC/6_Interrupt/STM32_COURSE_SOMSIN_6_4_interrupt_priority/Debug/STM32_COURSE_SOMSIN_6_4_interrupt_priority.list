
STM32_COURSE_SOMSIN_6_4_interrupt_priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fb0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800406c  0800406c  0000506c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004114  08004114  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004114  08004114  00005114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800411c  0800411c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800411c  0800411c  0000511c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004120  08004120  00005120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004124  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08004130  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08004130  0000610c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d10  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237f  00000000  00000000  00016d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  000190c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b63  00000000  00000000  00019f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180bf  00000000  00000000  0001aa9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011964  00000000  00000000  00032b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d9f0  00000000  00000000  000444be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1eae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003470  00000000  00000000  000e1ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000e5364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004054 	.word	0x08004054

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004054 	.word	0x08004054

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fafe 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f80e 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f90e 	bl	8000848 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f8be 	bl	80007ac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000630:	f000 f866 	bl	8000700 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000634:	4b02      	ldr	r3, [pc, #8]	@ (8000640 <main+0x24>)
 8000636:	0018      	movs	r0, r3
 8000638:	f001 fe32 	bl	80022a0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	e7fd      	b.n	800063c <main+0x20>
 8000640:	20000028 	.word	0x20000028

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b093      	sub	sp, #76	@ 0x4c
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	2410      	movs	r4, #16
 800064c:	193b      	adds	r3, r7, r4
 800064e:	0018      	movs	r0, r3
 8000650:	2338      	movs	r3, #56	@ 0x38
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f003 fcd1 	bl	8003ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065a:	003b      	movs	r3, r7
 800065c:	0018      	movs	r0, r3
 800065e:	2310      	movs	r3, #16
 8000660:	001a      	movs	r2, r3
 8000662:	2100      	movs	r1, #0
 8000664:	f003 fcca 	bl	8003ffc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2380      	movs	r3, #128	@ 0x80
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	0018      	movs	r0, r3
 800066e:	f000 fef7 	bl	8001460 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000672:	193b      	adds	r3, r7, r4
 8000674:	2202      	movs	r2, #2
 8000676:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	2280      	movs	r2, #128	@ 0x80
 800067c:	0052      	lsls	r2, r2, #1
 800067e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000680:	0021      	movs	r1, r4
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2240      	movs	r2, #64	@ 0x40
 800068c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2202      	movs	r2, #2
 8000692:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2202      	movs	r2, #2
 8000698:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2200      	movs	r2, #0
 800069e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2208      	movs	r2, #8
 80006a4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2280      	movs	r2, #128	@ 0x80
 80006aa:	0292      	lsls	r2, r2, #10
 80006ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	0492      	lsls	r2, r2, #18
 80006b4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2280      	movs	r2, #128	@ 0x80
 80006ba:	0592      	lsls	r2, r2, #22
 80006bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 ff19 	bl	80014f8 <HAL_RCC_OscConfig>
 80006c6:	1e03      	subs	r3, r0, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006ca:	f000 f983 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	003b      	movs	r3, r7
 80006d0:	2207      	movs	r2, #7
 80006d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	003b      	movs	r3, r7
 80006d6:	2202      	movs	r2, #2
 80006d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	003b      	movs	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	003b      	movs	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e6:	003b      	movs	r3, r7
 80006e8:	2102      	movs	r1, #2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 fa1e 	bl	8001b2c <HAL_RCC_ClockConfig>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006f4:	f000 f96e 	bl	80009d4 <Error_Handler>
  }
}
 80006f8:	46c0      	nop			@ (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b013      	add	sp, #76	@ 0x4c
 80006fe:	bd90      	pop	{r4, r7, pc}

08000700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	2310      	movs	r3, #16
 8000708:	18fb      	adds	r3, r7, r3
 800070a:	0018      	movs	r0, r3
 800070c:	2310      	movs	r3, #16
 800070e:	001a      	movs	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	f003 fc73 	bl	8003ffc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	0018      	movs	r0, r3
 800071a:	230c      	movs	r3, #12
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f003 fc6c 	bl	8003ffc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000724:	4b1e      	ldr	r3, [pc, #120]	@ (80007a0 <MX_TIM2_Init+0xa0>)
 8000726:	2280      	movs	r2, #128	@ 0x80
 8000728:	05d2      	lsls	r2, r2, #23
 800072a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400 - 1;
 800072c:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <MX_TIM2_Init+0xa0>)
 800072e:	4a1d      	ldr	r2, [pc, #116]	@ (80007a4 <MX_TIM2_Init+0xa4>)
 8000730:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000732:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_TIM2_Init+0xa0>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000 - 1;
 8000738:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <MX_TIM2_Init+0xa0>)
 800073a:	4a1b      	ldr	r2, [pc, #108]	@ (80007a8 <MX_TIM2_Init+0xa8>)
 800073c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_TIM2_Init+0xa0>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <MX_TIM2_Init+0xa0>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_TIM2_Init+0xa0>)
 800074c:	0018      	movs	r0, r3
 800074e:	f001 fd4f 	bl	80021f0 <HAL_TIM_Base_Init>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000756:	f000 f93d 	bl	80009d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075a:	2110      	movs	r1, #16
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2280      	movs	r2, #128	@ 0x80
 8000760:	0152      	lsls	r2, r2, #5
 8000762:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000764:	187a      	adds	r2, r7, r1
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_TIM2_Init+0xa0>)
 8000768:	0011      	movs	r1, r2
 800076a:	0018      	movs	r0, r3
 800076c:	f001 fefc 	bl	8002568 <HAL_TIM_ConfigClockSource>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000774:	f000 f92e 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000784:	1d3a      	adds	r2, r7, #4
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_TIM2_Init+0xa0>)
 8000788:	0011      	movs	r1, r2
 800078a:	0018      	movs	r0, r3
 800078c:	f002 f90c 	bl	80029a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000794:	f000 f91e 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000798:	46c0      	nop			@ (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b008      	add	sp, #32
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000028 	.word	0x20000028
 80007a4:	000018ff 	.word	0x000018ff
 80007a8:	0001869f 	.word	0x0001869f

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b23      	ldr	r3, [pc, #140]	@ (8000840 <MX_USART2_UART_Init+0x94>)
 80007b2:	4a24      	ldr	r2, [pc, #144]	@ (8000844 <MX_USART2_UART_Init+0x98>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b22      	ldr	r3, [pc, #136]	@ (8000840 <MX_USART2_UART_Init+0x94>)
 80007b8:	22e1      	movs	r2, #225	@ 0xe1
 80007ba:	0252      	lsls	r2, r2, #9
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b20      	ldr	r3, [pc, #128]	@ (8000840 <MX_USART2_UART_Init+0x94>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000840 <MX_USART2_UART_Init+0x94>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000840 <MX_USART2_UART_Init+0x94>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <MX_USART2_UART_Init+0x94>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000840 <MX_USART2_UART_Init+0x94>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <MX_USART2_UART_Init+0x94>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <MX_USART2_UART_Init+0x94>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e8:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <MX_USART2_UART_Init+0x94>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ee:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_USART2_UART_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <MX_USART2_UART_Init+0x94>)
 80007f6:	0018      	movs	r0, r3
 80007f8:	f002 f95c 	bl	8002ab4 <HAL_UART_Init>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000800:	f000 f8e8 	bl	80009d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000804:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_USART2_UART_Init+0x94>)
 8000806:	2100      	movs	r1, #0
 8000808:	0018      	movs	r0, r3
 800080a:	f003 fb17 	bl	8003e3c <HAL_UARTEx_SetTxFifoThreshold>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000812:	f000 f8df 	bl	80009d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000816:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <MX_USART2_UART_Init+0x94>)
 8000818:	2100      	movs	r1, #0
 800081a:	0018      	movs	r0, r3
 800081c:	f003 fb4e 	bl	8003ebc <HAL_UARTEx_SetRxFifoThreshold>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000824:	f000 f8d6 	bl	80009d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000828:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <MX_USART2_UART_Init+0x94>)
 800082a:	0018      	movs	r0, r3
 800082c:	f003 facc 	bl	8003dc8 <HAL_UARTEx_DisableFifoMode>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000834:	f000 f8ce 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	20000074 	.word	0x20000074
 8000844:	40004400 	.word	0x40004400

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b089      	sub	sp, #36	@ 0x24
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	240c      	movs	r4, #12
 8000850:	193b      	adds	r3, r7, r4
 8000852:	0018      	movs	r0, r3
 8000854:	2314      	movs	r3, #20
 8000856:	001a      	movs	r2, r3
 8000858:	2100      	movs	r1, #0
 800085a:	f003 fbcf 	bl	8003ffc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	4b2e      	ldr	r3, [pc, #184]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000860:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000862:	4b2d      	ldr	r3, [pc, #180]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000864:	2104      	movs	r1, #4
 8000866:	430a      	orrs	r2, r1
 8000868:	635a      	str	r2, [r3, #52]	@ 0x34
 800086a:	4b2b      	ldr	r3, [pc, #172]	@ (8000918 <MX_GPIO_Init+0xd0>)
 800086c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800086e:	2204      	movs	r2, #4
 8000870:	4013      	ands	r3, r2
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000876:	4b28      	ldr	r3, [pc, #160]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800087a:	4b27      	ldr	r3, [pc, #156]	@ (8000918 <MX_GPIO_Init+0xd0>)
 800087c:	2120      	movs	r1, #32
 800087e:	430a      	orrs	r2, r1
 8000880:	635a      	str	r2, [r3, #52]	@ 0x34
 8000882:	4b25      	ldr	r3, [pc, #148]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000886:	2220      	movs	r2, #32
 8000888:	4013      	ands	r3, r2
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000892:	4b21      	ldr	r3, [pc, #132]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000894:	2101      	movs	r1, #1
 8000896:	430a      	orrs	r2, r1
 8000898:	635a      	str	r2, [r3, #52]	@ 0x34
 800089a:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <MX_GPIO_Init+0xd0>)
 800089c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800089e:	2201      	movs	r2, #1
 80008a0:	4013      	ands	r3, r2
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008a6:	23a0      	movs	r3, #160	@ 0xa0
 80008a8:	05db      	lsls	r3, r3, #23
 80008aa:	2200      	movs	r2, #0
 80008ac:	2120      	movs	r1, #32
 80008ae:	0018      	movs	r0, r3
 80008b0:	f000 fd84 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	2280      	movs	r2, #128	@ 0x80
 80008b8:	0192      	lsls	r2, r2, #6
 80008ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	2288      	movs	r2, #136	@ 0x88
 80008c0:	0352      	lsls	r2, r2, #13
 80008c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	4a13      	ldr	r2, [pc, #76]	@ (800091c <MX_GPIO_Init+0xd4>)
 80008ce:	0019      	movs	r1, r3
 80008d0:	0010      	movs	r0, r2
 80008d2:	f000 fc0f 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008d6:	0021      	movs	r1, r4
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2220      	movs	r2, #32
 80008dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2201      	movs	r2, #1
 80008e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2202      	movs	r2, #2
 80008ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80008f0:	187a      	adds	r2, r7, r1
 80008f2:	23a0      	movs	r3, #160	@ 0xa0
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f000 fbfb 	bl	80010f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2102      	movs	r1, #2
 8000902:	2007      	movs	r0, #7
 8000904:	f000 faf8 	bl	8000ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000908:	2007      	movs	r0, #7
 800090a:	f000 fb0a 	bl	8000f22 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	b009      	add	sp, #36	@ 0x24
 8000914:	bd90      	pop	{r4, r7, pc}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	40021000 	.word	0x40021000
 800091c:	50000800 	.word	0x50000800

08000920 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b089      	sub	sp, #36	@ 0x24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	unsigned char out_string[20] = "haruhi1\r\n";
 8000928:	2308      	movs	r3, #8
 800092a:	18f9      	adds	r1, r7, r3
 800092c:	4a18      	ldr	r2, [pc, #96]	@ (8000990 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800092e:	000b      	movs	r3, r1
 8000930:	ca11      	ldmia	r2!, {r0, r4}
 8000932:	c311      	stmia	r3!, {r0, r4}
 8000934:	8812      	ldrh	r2, [r2, #0]
 8000936:	801a      	strh	r2, [r3, #0]
 8000938:	230a      	movs	r3, #10
 800093a:	18cb      	adds	r3, r1, r3
 800093c:	220a      	movs	r2, #10
 800093e:	2100      	movs	r1, #0
 8000940:	0018      	movs	r0, r3
 8000942:	f003 fb5b 	bl	8003ffc <memset>
	if(htim == &htim2){
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800094a:	429a      	cmp	r2, r3
 800094c:	d11c      	bne.n	8000988 <HAL_TIM_PeriodElapsedCallback+0x68>
		for(int i=0;i<5;i++){
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
 8000952:	e016      	b.n	8000982 <HAL_TIM_PeriodElapsedCallback+0x62>
			HAL_UART_Transmit(&huart2, out_string, 9,1000);
 8000954:	23fa      	movs	r3, #250	@ 0xfa
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	2408      	movs	r4, #8
 800095a:	1939      	adds	r1, r7, r4
 800095c:	480e      	ldr	r0, [pc, #56]	@ (8000998 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800095e:	2209      	movs	r2, #9
 8000960:	f002 f8fe 	bl	8002b60 <HAL_UART_Transmit>
			out_string[6]++;
 8000964:	0021      	movs	r1, r4
 8000966:	187b      	adds	r3, r7, r1
 8000968:	799b      	ldrb	r3, [r3, #6]
 800096a:	3301      	adds	r3, #1
 800096c:	b2da      	uxtb	r2, r3
 800096e:	187b      	adds	r3, r7, r1
 8000970:	719a      	strb	r2, [r3, #6]
			HAL_Delay(1000);
 8000972:	23fa      	movs	r3, #250	@ 0xfa
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	0018      	movs	r0, r3
 8000978:	f000 f9d8 	bl	8000d2c <HAL_Delay>
		for(int i=0;i<5;i++){
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	3301      	adds	r3, #1
 8000980:	61fb      	str	r3, [r7, #28]
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	2b04      	cmp	r3, #4
 8000986:	dde5      	ble.n	8000954 <HAL_TIM_PeriodElapsedCallback+0x34>
		}
	}
}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b009      	add	sp, #36	@ 0x24
 800098e:	bd90      	pop	{r4, r7, pc}
 8000990:	0800406c 	.word	0x0800406c
 8000994:	20000028 	.word	0x20000028
 8000998:	20000074 	.word	0x20000074

0800099c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	0002      	movs	r2, r0
 80009a4:	1dbb      	adds	r3, r7, #6
 80009a6:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_13) {
 80009a8:	1dbb      	adds	r3, r7, #6
 80009aa:	881a      	ldrh	r2, [r3, #0]
 80009ac:	2380      	movs	r3, #128	@ 0x80
 80009ae:	019b      	lsls	r3, r3, #6
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d106      	bne.n	80009c2 <HAL_GPIO_EXTI_Rising_Callback+0x26>
	  HAL_UART_Transmit(&huart2, "Somsin\r\n", 8,1000);
 80009b4:	23fa      	movs	r3, #250	@ 0xfa
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4904      	ldr	r1, [pc, #16]	@ (80009cc <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <HAL_GPIO_EXTI_Rising_Callback+0x34>)
 80009bc:	2208      	movs	r2, #8
 80009be:	f002 f8cf 	bl	8002b60 <HAL_UART_Transmit>
  }
}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b002      	add	sp, #8
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	08004080 	.word	0x08004080
 80009d0:	20000074 	.word	0x20000074

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	46c0      	nop			@ (mov r8, r8)
 80009de:	e7fd      	b.n	80009dc <Error_Handler+0x8>

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <HAL_MspInit+0x4c>)
 80009e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009ea:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <HAL_MspInit+0x4c>)
 80009ec:	2101      	movs	r1, #1
 80009ee:	430a      	orrs	r2, r1
 80009f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	2201      	movs	r2, #1
 80009f8:	4013      	ands	r3, r2
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <HAL_MspInit+0x4c>)
 8000a00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a02:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <HAL_MspInit+0x4c>)
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	0549      	lsls	r1, r1, #21
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a0c:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <HAL_MspInit+0x4c>)
 8000a0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a10:	2380      	movs	r3, #128	@ 0x80
 8000a12:	055b      	lsls	r3, r3, #21
 8000a14:	4013      	ands	r3, r2
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000a1a:	23c0      	movs	r3, #192	@ 0xc0
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 f9a8 	bl	8000d74 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b002      	add	sp, #8
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	2380      	movs	r3, #128	@ 0x80
 8000a3e:	05db      	lsls	r3, r3, #23
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d113      	bne.n	8000a6c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a44:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <HAL_TIM_Base_MspInit+0x44>)
 8000a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a48:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <HAL_TIM_Base_MspInit+0x44>)
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <HAL_TIM_Base_MspInit+0x44>)
 8000a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a54:	2201      	movs	r2, #1
 8000a56:	4013      	ands	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2103      	movs	r1, #3
 8000a60:	200f      	movs	r0, #15
 8000a62:	f000 fa49 	bl	8000ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a66:	200f      	movs	r0, #15
 8000a68:	f000 fa5b 	bl	8000f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b004      	add	sp, #16
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40021000 	.word	0x40021000

08000a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b097      	sub	sp, #92	@ 0x5c
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	2344      	movs	r3, #68	@ 0x44
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	0018      	movs	r0, r3
 8000a86:	2314      	movs	r3, #20
 8000a88:	001a      	movs	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f003 fab6 	bl	8003ffc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a90:	2410      	movs	r4, #16
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	0018      	movs	r0, r3
 8000a96:	2334      	movs	r3, #52	@ 0x34
 8000a98:	001a      	movs	r2, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f003 faae 	bl	8003ffc <memset>
  if(huart->Instance==USART2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a26      	ldr	r2, [pc, #152]	@ (8000b40 <HAL_UART_MspInit+0xc8>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d146      	bne.n	8000b38 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	2202      	movs	r2, #2
 8000aae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f001 f9e1 	bl	8001e80 <HAL_RCCEx_PeriphCLKConfig>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ac2:	f7ff ff87 	bl	80009d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b44 <HAL_UART_MspInit+0xcc>)
 8000ac8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000aca:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <HAL_UART_MspInit+0xcc>)
 8000acc:	2180      	movs	r1, #128	@ 0x80
 8000ace:	0289      	lsls	r1, r1, #10
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b44 <HAL_UART_MspInit+0xcc>)
 8000ad6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ad8:	2380      	movs	r3, #128	@ 0x80
 8000ada:	029b      	lsls	r3, r3, #10
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <HAL_UART_MspInit+0xcc>)
 8000ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ae6:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <HAL_UART_MspInit+0xcc>)
 8000ae8:	2101      	movs	r1, #1
 8000aea:	430a      	orrs	r2, r1
 8000aec:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HAL_UART_MspInit+0xcc>)
 8000af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000af2:	2201      	movs	r2, #1
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000afa:	2144      	movs	r1, #68	@ 0x44
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	220c      	movs	r2, #12
 8000b00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2202      	movs	r2, #2
 8000b06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2201      	movs	r2, #1
 8000b18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	187a      	adds	r2, r7, r1
 8000b1c:	23a0      	movs	r3, #160	@ 0xa0
 8000b1e:	05db      	lsls	r3, r3, #23
 8000b20:	0011      	movs	r1, r2
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 fae6 	bl	80010f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	201c      	movs	r0, #28
 8000b2e:	f000 f9e3 	bl	8000ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b32:	201c      	movs	r0, #28
 8000b34:	f000 f9f5 	bl	8000f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b017      	add	sp, #92	@ 0x5c
 8000b3e:	bd90      	pop	{r4, r7, pc}
 8000b40:	40004400 	.word	0x40004400
 8000b44:	40021000 	.word	0x40021000

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b4c:	46c0      	nop			@ (mov r8, r8)
 8000b4e:	e7fd      	b.n	8000b4c <NMI_Handler+0x4>

08000b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b54:	46c0      	nop			@ (mov r8, r8)
 8000b56:	e7fd      	b.n	8000b54 <HardFault_Handler+0x4>

08000b58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b5c:	46c0      	nop			@ (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b70:	f000 f8c0 	bl	8000cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b74:	46c0      	nop			@ (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b7e:	2380      	movs	r3, #128	@ 0x80
 8000b80:	019b      	lsls	r3, r3, #6
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 fc38 	bl	80013f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000b88:	46c0      	nop			@ (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b94:	4b03      	ldr	r3, [pc, #12]	@ (8000ba4 <TIM2_IRQHandler+0x14>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f001 fbde 	bl	8002358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	20000028 	.word	0x20000028

08000ba8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bac:	4b03      	ldr	r3, [pc, #12]	@ (8000bbc <USART2_IRQHandler+0x14>)
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f002 f87a 	bl	8002ca8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bb4:	46c0      	nop			@ (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	20000074 	.word	0x20000074

08000bc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc4:	46c0      	nop			@ (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bcc:	480d      	ldr	r0, [pc, #52]	@ (8000c04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd0:	f7ff fff6 	bl	8000bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	@ (8000c0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <LoopForever+0xe>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	@ (8000c18 <LoopForever+0x16>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bfa:	f003 fa07 	bl	800400c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bfe:	f7ff fd0d 	bl	800061c <main>

08000c02 <LoopForever>:

LoopForever:
  b LoopForever
 8000c02:	e7fe      	b.n	8000c02 <LoopForever>
  ldr   r0, =_estack
 8000c04:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c10:	08004124 	.word	0x08004124
  ldr r2, =_sbss
 8000c14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c18:	2000010c 	.word	0x2000010c

08000c1c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC1_COMP_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <HAL_Init+0x3c>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <HAL_Init+0x3c>)
 8000c32:	2180      	movs	r1, #128	@ 0x80
 8000c34:	0049      	lsls	r1, r1, #1
 8000c36:	430a      	orrs	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 f810 	bl	8000c60 <HAL_InitTick>
 8000c40:	1e03      	subs	r3, r0, #0
 8000c42:	d003      	beq.n	8000c4c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e001      	b.n	8000c50 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c4c:	f7ff fec8 	bl	80009e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c50:	1dfb      	adds	r3, r7, #7
 8000c52:	781b      	ldrb	r3, [r3, #0]
}
 8000c54:	0018      	movs	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b002      	add	sp, #8
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40022000 	.word	0x40022000

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c68:	230f      	movs	r3, #15
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce8 <HAL_InitTick+0x88>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d02b      	beq.n	8000cd0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c78:	4b1c      	ldr	r3, [pc, #112]	@ (8000cec <HAL_InitTick+0x8c>)
 8000c7a:	681c      	ldr	r4, [r3, #0]
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <HAL_InitTick+0x88>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	0019      	movs	r1, r3
 8000c82:	23fa      	movs	r3, #250	@ 0xfa
 8000c84:	0098      	lsls	r0, r3, #2
 8000c86:	f7ff fa3d 	bl	8000104 <__udivsi3>
 8000c8a:	0003      	movs	r3, r0
 8000c8c:	0019      	movs	r1, r3
 8000c8e:	0020      	movs	r0, r4
 8000c90:	f7ff fa38 	bl	8000104 <__udivsi3>
 8000c94:	0003      	movs	r3, r0
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 f953 	bl	8000f42 <HAL_SYSTICK_Config>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d112      	bne.n	8000cc6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d80a      	bhi.n	8000cbc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	425b      	negs	r3, r3
 8000cac:	2200      	movs	r2, #0
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 f922 	bl	8000ef8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <HAL_InitTick+0x90>)
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	e00d      	b.n	8000cd8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
 8000cc4:	e008      	b.n	8000cd8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	e003      	b.n	8000cd8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cd8:	230f      	movs	r3, #15
 8000cda:	18fb      	adds	r3, r7, r3
 8000cdc:	781b      	ldrb	r3, [r3, #0]
}
 8000cde:	0018      	movs	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b005      	add	sp, #20
 8000ce4:	bd90      	pop	{r4, r7, pc}
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000004 	.word	0x20000004

08000cf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <HAL_IncTick+0x1c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <HAL_IncTick+0x20>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	18d2      	adds	r2, r2, r3
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <HAL_IncTick+0x20>)
 8000d06:	601a      	str	r2, [r3, #0]
}
 8000d08:	46c0      	nop			@ (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000108 	.word	0x20000108

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b02      	ldr	r3, [pc, #8]	@ (8000d28 <HAL_GetTick+0x10>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	20000108 	.word	0x20000108

08000d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff fff0 	bl	8000d18 <HAL_GetTick>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	3301      	adds	r3, #1
 8000d44:	d005      	beq.n	8000d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d46:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <HAL_Delay+0x44>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	189b      	adds	r3, r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	f7ff ffe0 	bl	8000d18 <HAL_GetTick>
 8000d58:	0002      	movs	r2, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8f7      	bhi.n	8000d54 <HAL_Delay+0x28>
  {
  }
}
 8000d64:	46c0      	nop			@ (mov r8, r8)
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b004      	add	sp, #16
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	20000008 	.word	0x20000008

08000d74 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a06      	ldr	r2, [pc, #24]	@ (8000d9c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000d82:	4013      	ands	r3, r2
 8000d84:	0019      	movs	r1, r3
 8000d86:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	601a      	str	r2, [r3, #0]
}
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	40010000 	.word	0x40010000
 8000d9c:	fffff9ff 	.word	0xfffff9ff

08000da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	0002      	movs	r2, r0
 8000da8:	1dfb      	adds	r3, r7, #7
 8000daa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dac:	1dfb      	adds	r3, r7, #7
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000db2:	d809      	bhi.n	8000dc8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	001a      	movs	r2, r3
 8000dba:	231f      	movs	r3, #31
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <__NVIC_EnableIRQ+0x30>)
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4091      	lsls	r1, r2
 8000dc4:	000a      	movs	r2, r1
 8000dc6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000dc8:	46c0      	nop			@ (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	0002      	movs	r2, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000de8:	d828      	bhi.n	8000e3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dea:	4a2f      	ldr	r2, [pc, #188]	@ (8000ea8 <__NVIC_SetPriority+0xd4>)
 8000dec:	1dfb      	adds	r3, r7, #7
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	33c0      	adds	r3, #192	@ 0xc0
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	589b      	ldr	r3, [r3, r2]
 8000dfa:	1dfa      	adds	r2, r7, #7
 8000dfc:	7812      	ldrb	r2, [r2, #0]
 8000dfe:	0011      	movs	r1, r2
 8000e00:	2203      	movs	r2, #3
 8000e02:	400a      	ands	r2, r1
 8000e04:	00d2      	lsls	r2, r2, #3
 8000e06:	21ff      	movs	r1, #255	@ 0xff
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	000a      	movs	r2, r1
 8000e0c:	43d2      	mvns	r2, r2
 8000e0e:	401a      	ands	r2, r3
 8000e10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	019b      	lsls	r3, r3, #6
 8000e16:	22ff      	movs	r2, #255	@ 0xff
 8000e18:	401a      	ands	r2, r3
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	0018      	movs	r0, r3
 8000e20:	2303      	movs	r3, #3
 8000e22:	4003      	ands	r3, r0
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e28:	481f      	ldr	r0, [pc, #124]	@ (8000ea8 <__NVIC_SetPriority+0xd4>)
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	430a      	orrs	r2, r1
 8000e34:	33c0      	adds	r3, #192	@ 0xc0
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e3a:	e031      	b.n	8000ea0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000eac <__NVIC_SetPriority+0xd8>)
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	0019      	movs	r1, r3
 8000e44:	230f      	movs	r3, #15
 8000e46:	400b      	ands	r3, r1
 8000e48:	3b08      	subs	r3, #8
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	3306      	adds	r3, #6
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	18d3      	adds	r3, r2, r3
 8000e52:	3304      	adds	r3, #4
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	1dfa      	adds	r2, r7, #7
 8000e58:	7812      	ldrb	r2, [r2, #0]
 8000e5a:	0011      	movs	r1, r2
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	400a      	ands	r2, r1
 8000e60:	00d2      	lsls	r2, r2, #3
 8000e62:	21ff      	movs	r1, #255	@ 0xff
 8000e64:	4091      	lsls	r1, r2
 8000e66:	000a      	movs	r2, r1
 8000e68:	43d2      	mvns	r2, r2
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	019b      	lsls	r3, r3, #6
 8000e72:	22ff      	movs	r2, #255	@ 0xff
 8000e74:	401a      	ands	r2, r3
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	4003      	ands	r3, r0
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e84:	4809      	ldr	r0, [pc, #36]	@ (8000eac <__NVIC_SetPriority+0xd8>)
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	001c      	movs	r4, r3
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	4023      	ands	r3, r4
 8000e90:	3b08      	subs	r3, #8
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	430a      	orrs	r2, r1
 8000e96:	3306      	adds	r3, #6
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	18c3      	adds	r3, r0, r3
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	601a      	str	r2, [r3, #0]
}
 8000ea0:	46c0      	nop			@ (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b003      	add	sp, #12
 8000ea6:	bd90      	pop	{r4, r7, pc}
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	1e5a      	subs	r2, r3, #1
 8000ebc:	2380      	movs	r3, #128	@ 0x80
 8000ebe:	045b      	lsls	r3, r3, #17
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d301      	bcc.n	8000ec8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e010      	b.n	8000eea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <SysTick_Config+0x44>)
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	3a01      	subs	r2, #1
 8000ece:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	425b      	negs	r3, r3
 8000ed4:	2103      	movs	r1, #3
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f7ff ff7c 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	@ (8000ef4 <SysTick_Config+0x44>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <SysTick_Config+0x44>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	210f      	movs	r1, #15
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	1c02      	adds	r2, r0, #0
 8000f08:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	0011      	movs	r1, r2
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff ff5d 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b004      	add	sp, #16
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	0002      	movs	r2, r0
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff ff33 	bl	8000da0 <__NVIC_EnableIRQ>
}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b002      	add	sp, #8
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f7ff ffaf 	bl	8000eb0 <SysTick_Config>
 8000f52:	0003      	movs	r3, r0
}
 8000f54:	0018      	movs	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e050      	b.n	8001010 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2225      	movs	r2, #37	@ 0x25
 8000f72:	5c9b      	ldrb	r3, [r3, r2]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d008      	beq.n	8000f8c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2224      	movs	r2, #36	@ 0x24
 8000f84:	2100      	movs	r1, #0
 8000f86:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e041      	b.n	8001010 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	210e      	movs	r1, #14
 8000f98:	438a      	bics	r2, r1
 8000f9a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	491c      	ldr	r1, [pc, #112]	@ (8001018 <HAL_DMA_Abort+0xbc>)
 8000fa8:	400a      	ands	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	438a      	bics	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000fbc:	4b17      	ldr	r3, [pc, #92]	@ (800101c <HAL_DMA_Abort+0xc0>)
 8000fbe:	6859      	ldr	r1, [r3, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc4:	221c      	movs	r2, #28
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2201      	movs	r2, #1
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	4b13      	ldr	r3, [pc, #76]	@ (800101c <HAL_DMA_Abort+0xc0>)
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000fda:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00c      	beq.n	8000ffe <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fee:	490a      	ldr	r1, [pc, #40]	@ (8001018 <HAL_DMA_Abort+0xbc>)
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000ffc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2225      	movs	r2, #37	@ 0x25
 8001002:	2101      	movs	r1, #1
 8001004:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2224      	movs	r2, #36	@ 0x24
 800100a:	2100      	movs	r1, #0
 800100c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800100e:	2300      	movs	r3, #0
}
 8001010:	0018      	movs	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	b002      	add	sp, #8
 8001016:	bd80      	pop	{r7, pc}
 8001018:	fffffeff 	.word	0xfffffeff
 800101c:	40020000 	.word	0x40020000

08001020 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001028:	210f      	movs	r1, #15
 800102a:	187b      	adds	r3, r7, r1
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2225      	movs	r2, #37	@ 0x25
 8001034:	5c9b      	ldrb	r3, [r3, r2]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d006      	beq.n	800104a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2204      	movs	r2, #4
 8001040:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	e049      	b.n	80010de <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	210e      	movs	r1, #14
 8001056:	438a      	bics	r2, r1
 8001058:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2101      	movs	r1, #1
 8001066:	438a      	bics	r2, r1
 8001068:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001074:	491d      	ldr	r1, [pc, #116]	@ (80010ec <HAL_DMA_Abort_IT+0xcc>)
 8001076:	400a      	ands	r2, r1
 8001078:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800107a:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <HAL_DMA_Abort_IT+0xd0>)
 800107c:	6859      	ldr	r1, [r3, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	221c      	movs	r2, #28
 8001084:	4013      	ands	r3, r2
 8001086:	2201      	movs	r2, #1
 8001088:	409a      	lsls	r2, r3
 800108a:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <HAL_DMA_Abort_IT+0xd0>)
 800108c:	430a      	orrs	r2, r1
 800108e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001098:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00c      	beq.n	80010bc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010ac:	490f      	ldr	r1, [pc, #60]	@ (80010ec <HAL_DMA_Abort_IT+0xcc>)
 80010ae:	400a      	ands	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80010ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2225      	movs	r2, #37	@ 0x25
 80010c0:	2101      	movs	r1, #1
 80010c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2224      	movs	r2, #36	@ 0x24
 80010c8:	2100      	movs	r1, #0
 80010ca:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	0010      	movs	r0, r2
 80010dc:	4798      	blx	r3
    }
  }
  return status;
 80010de:	230f      	movs	r3, #15
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	781b      	ldrb	r3, [r3, #0]
}
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b004      	add	sp, #16
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	fffffeff 	.word	0xfffffeff
 80010f0:	40020000 	.word	0x40020000

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001102:	e147      	b.n	8001394 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2101      	movs	r1, #1
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	4091      	lsls	r1, r2
 800110e:	000a      	movs	r2, r1
 8001110:	4013      	ands	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d100      	bne.n	800111c <HAL_GPIO_Init+0x28>
 800111a:	e138      	b.n	800138e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2203      	movs	r2, #3
 8001122:	4013      	ands	r3, r2
 8001124:	2b01      	cmp	r3, #1
 8001126:	d005      	beq.n	8001134 <HAL_GPIO_Init+0x40>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2203      	movs	r2, #3
 800112e:	4013      	ands	r3, r2
 8001130:	2b02      	cmp	r3, #2
 8001132:	d130      	bne.n	8001196 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	409a      	lsls	r2, r3
 8001142:	0013      	movs	r3, r2
 8001144:	43da      	mvns	r2, r3
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	409a      	lsls	r2, r3
 8001156:	0013      	movs	r3, r2
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800116a:	2201      	movs	r2, #1
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	43da      	mvns	r2, r3
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	091b      	lsrs	r3, r3, #4
 8001180:	2201      	movs	r2, #1
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2203      	movs	r2, #3
 800119c:	4013      	ands	r3, r2
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d017      	beq.n	80011d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	43da      	mvns	r2, r3
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2203      	movs	r2, #3
 80011d8:	4013      	ands	r3, r2
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d123      	bne.n	8001226 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	08da      	lsrs	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3208      	adds	r2, #8
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	58d3      	ldr	r3, [r2, r3]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	2207      	movs	r2, #7
 80011f0:	4013      	ands	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	43da      	mvns	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	691a      	ldr	r2, [r3, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2107      	movs	r1, #7
 800120a:	400b      	ands	r3, r1
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	08da      	lsrs	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3208      	adds	r2, #8
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	6939      	ldr	r1, [r7, #16]
 8001224:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	409a      	lsls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	43da      	mvns	r2, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2203      	movs	r2, #3
 8001244:	401a      	ands	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	409a      	lsls	r2, r3
 800124c:	0013      	movs	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	23c0      	movs	r3, #192	@ 0xc0
 8001260:	029b      	lsls	r3, r3, #10
 8001262:	4013      	ands	r3, r2
 8001264:	d100      	bne.n	8001268 <HAL_GPIO_Init+0x174>
 8001266:	e092      	b.n	800138e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001268:	4a50      	ldr	r2, [pc, #320]	@ (80013ac <HAL_GPIO_Init+0x2b8>)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3318      	adds	r3, #24
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	589b      	ldr	r3, [r3, r2]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2203      	movs	r2, #3
 800127a:	4013      	ands	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	220f      	movs	r2, #15
 8001280:	409a      	lsls	r2, r3
 8001282:	0013      	movs	r3, r2
 8001284:	43da      	mvns	r2, r3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	23a0      	movs	r3, #160	@ 0xa0
 8001290:	05db      	lsls	r3, r3, #23
 8001292:	429a      	cmp	r2, r3
 8001294:	d013      	beq.n	80012be <HAL_GPIO_Init+0x1ca>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a45      	ldr	r2, [pc, #276]	@ (80013b0 <HAL_GPIO_Init+0x2bc>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d00d      	beq.n	80012ba <HAL_GPIO_Init+0x1c6>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a44      	ldr	r2, [pc, #272]	@ (80013b4 <HAL_GPIO_Init+0x2c0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d007      	beq.n	80012b6 <HAL_GPIO_Init+0x1c2>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a43      	ldr	r2, [pc, #268]	@ (80013b8 <HAL_GPIO_Init+0x2c4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d101      	bne.n	80012b2 <HAL_GPIO_Init+0x1be>
 80012ae:	2303      	movs	r3, #3
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x1cc>
 80012b2:	2305      	movs	r3, #5
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x1cc>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x1cc>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x1cc>
 80012be:	2300      	movs	r3, #0
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	2103      	movs	r1, #3
 80012c4:	400a      	ands	r2, r1
 80012c6:	00d2      	lsls	r2, r2, #3
 80012c8:	4093      	lsls	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80012d0:	4936      	ldr	r1, [pc, #216]	@ (80013ac <HAL_GPIO_Init+0x2b8>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3318      	adds	r3, #24
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012de:	4b33      	ldr	r3, [pc, #204]	@ (80013ac <HAL_GPIO_Init+0x2b8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43da      	mvns	r2, r3
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	2380      	movs	r3, #128	@ 0x80
 80012f4:	035b      	lsls	r3, r3, #13
 80012f6:	4013      	ands	r3, r2
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001302:	4b2a      	ldr	r3, [pc, #168]	@ (80013ac <HAL_GPIO_Init+0x2b8>)
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001308:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <HAL_GPIO_Init+0x2b8>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43da      	mvns	r2, r3
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	2380      	movs	r3, #128	@ 0x80
 800131e:	039b      	lsls	r3, r3, #14
 8001320:	4013      	ands	r3, r2
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800132c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ac <HAL_GPIO_Init+0x2b8>)
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001332:	4a1e      	ldr	r2, [pc, #120]	@ (80013ac <HAL_GPIO_Init+0x2b8>)
 8001334:	2384      	movs	r3, #132	@ 0x84
 8001336:	58d3      	ldr	r3, [r2, r3]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	43da      	mvns	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	2380      	movs	r3, #128	@ 0x80
 800134a:	029b      	lsls	r3, r3, #10
 800134c:	4013      	ands	r3, r2
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001358:	4914      	ldr	r1, [pc, #80]	@ (80013ac <HAL_GPIO_Init+0x2b8>)
 800135a:	2284      	movs	r2, #132	@ 0x84
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001360:	4a12      	ldr	r2, [pc, #72]	@ (80013ac <HAL_GPIO_Init+0x2b8>)
 8001362:	2380      	movs	r3, #128	@ 0x80
 8001364:	58d3      	ldr	r3, [r2, r3]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43da      	mvns	r2, r3
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	2380      	movs	r3, #128	@ 0x80
 8001378:	025b      	lsls	r3, r3, #9
 800137a:	4013      	ands	r3, r2
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001386:	4909      	ldr	r1, [pc, #36]	@ (80013ac <HAL_GPIO_Init+0x2b8>)
 8001388:	2280      	movs	r2, #128	@ 0x80
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3301      	adds	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	40da      	lsrs	r2, r3
 800139c:	1e13      	subs	r3, r2, #0
 800139e:	d000      	beq.n	80013a2 <HAL_GPIO_Init+0x2ae>
 80013a0:	e6b0      	b.n	8001104 <HAL_GPIO_Init+0x10>
  }
}
 80013a2:	46c0      	nop			@ (mov r8, r8)
 80013a4:	46c0      	nop			@ (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b006      	add	sp, #24
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021800 	.word	0x40021800
 80013b0:	50000400 	.word	0x50000400
 80013b4:	50000800 	.word	0x50000800
 80013b8:	50000c00 	.word	0x50000c00

080013bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	0008      	movs	r0, r1
 80013c6:	0011      	movs	r1, r2
 80013c8:	1cbb      	adds	r3, r7, #2
 80013ca:	1c02      	adds	r2, r0, #0
 80013cc:	801a      	strh	r2, [r3, #0]
 80013ce:	1c7b      	adds	r3, r7, #1
 80013d0:	1c0a      	adds	r2, r1, #0
 80013d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d4:	1c7b      	adds	r3, r7, #1
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d004      	beq.n	80013e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013dc:	1cbb      	adds	r3, r7, #2
 80013de:	881a      	ldrh	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013e4:	e003      	b.n	80013ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013e6:	1cbb      	adds	r3, r7, #2
 80013e8:	881a      	ldrh	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	0002      	movs	r2, r0
 8001400:	1dbb      	adds	r3, r7, #6
 8001402:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001404:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	1dba      	adds	r2, r7, #6
 800140a:	8812      	ldrh	r2, [r2, #0]
 800140c:	4013      	ands	r3, r2
 800140e:	d008      	beq.n	8001422 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001410:	4b0d      	ldr	r3, [pc, #52]	@ (8001448 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001412:	1dba      	adds	r2, r7, #6
 8001414:	8812      	ldrh	r2, [r2, #0]
 8001416:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001418:	1dbb      	adds	r3, r7, #6
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff fabd 	bl	800099c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001422:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	1dba      	adds	r2, r7, #6
 8001428:	8812      	ldrh	r2, [r2, #0]
 800142a:	4013      	ands	r3, r2
 800142c:	d008      	beq.n	8001440 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001430:	1dba      	adds	r2, r7, #6
 8001432:	8812      	ldrh	r2, [r2, #0]
 8001434:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001436:	1dbb      	adds	r3, r7, #6
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	0018      	movs	r0, r3
 800143c:	f000 f806 	bl	800144c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001440:	46c0      	nop			@ (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b002      	add	sp, #8
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021800 	.word	0x40021800

0800144c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	0002      	movs	r2, r0
 8001454:	1dbb      	adds	r3, r7, #6
 8001456:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001458:	46c0      	nop			@ (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	b002      	add	sp, #8
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001468:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a19      	ldr	r2, [pc, #100]	@ (80014d4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800146e:	4013      	ands	r3, r2
 8001470:	0019      	movs	r1, r3
 8001472:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	430a      	orrs	r2, r1
 8001478:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	2380      	movs	r3, #128	@ 0x80
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	429a      	cmp	r2, r3
 8001482:	d11f      	bne.n	80014c4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001484:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	0013      	movs	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	189b      	adds	r3, r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4912      	ldr	r1, [pc, #72]	@ (80014dc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001492:	0018      	movs	r0, r3
 8001494:	f7fe fe36 	bl	8000104 <__udivsi3>
 8001498:	0003      	movs	r3, r0
 800149a:	3301      	adds	r3, #1
 800149c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800149e:	e008      	b.n	80014b2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	e001      	b.n	80014b2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e009      	b.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014b2:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014b4:	695a      	ldr	r2, [r3, #20]
 80014b6:	2380      	movs	r3, #128	@ 0x80
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	401a      	ands	r2, r3
 80014bc:	2380      	movs	r3, #128	@ 0x80
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d0ed      	beq.n	80014a0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b004      	add	sp, #16
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			@ (mov r8, r8)
 80014d0:	40007000 	.word	0x40007000
 80014d4:	fffff9ff 	.word	0xfffff9ff
 80014d8:	20000000 	.word	0x20000000
 80014dc:	000f4240 	.word	0x000f4240

080014e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	23e0      	movs	r3, #224	@ 0xe0
 80014ea:	01db      	lsls	r3, r3, #7
 80014ec:	4013      	ands	r3, r2
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40021000 	.word	0x40021000

080014f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e2fe      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2201      	movs	r2, #1
 8001510:	4013      	ands	r3, r2
 8001512:	d100      	bne.n	8001516 <HAL_RCC_OscConfig+0x1e>
 8001514:	e07c      	b.n	8001610 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001516:	4bc3      	ldr	r3, [pc, #780]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2238      	movs	r2, #56	@ 0x38
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001520:	4bc0      	ldr	r3, [pc, #768]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2203      	movs	r2, #3
 8001526:	4013      	ands	r3, r2
 8001528:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	2b10      	cmp	r3, #16
 800152e:	d102      	bne.n	8001536 <HAL_RCC_OscConfig+0x3e>
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d002      	beq.n	800153c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2b08      	cmp	r3, #8
 800153a:	d10b      	bne.n	8001554 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	4bb9      	ldr	r3, [pc, #740]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	029b      	lsls	r3, r3, #10
 8001544:	4013      	ands	r3, r2
 8001546:	d062      	beq.n	800160e <HAL_RCC_OscConfig+0x116>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d15e      	bne.n	800160e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e2d9      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	2380      	movs	r3, #128	@ 0x80
 800155a:	025b      	lsls	r3, r3, #9
 800155c:	429a      	cmp	r2, r3
 800155e:	d107      	bne.n	8001570 <HAL_RCC_OscConfig+0x78>
 8001560:	4bb0      	ldr	r3, [pc, #704]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4baf      	ldr	r3, [pc, #700]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001566:	2180      	movs	r1, #128	@ 0x80
 8001568:	0249      	lsls	r1, r1, #9
 800156a:	430a      	orrs	r2, r1
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	e020      	b.n	80015b2 <HAL_RCC_OscConfig+0xba>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	23a0      	movs	r3, #160	@ 0xa0
 8001576:	02db      	lsls	r3, r3, #11
 8001578:	429a      	cmp	r2, r3
 800157a:	d10e      	bne.n	800159a <HAL_RCC_OscConfig+0xa2>
 800157c:	4ba9      	ldr	r3, [pc, #676]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4ba8      	ldr	r3, [pc, #672]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001582:	2180      	movs	r1, #128	@ 0x80
 8001584:	02c9      	lsls	r1, r1, #11
 8001586:	430a      	orrs	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	4ba6      	ldr	r3, [pc, #664]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4ba5      	ldr	r3, [pc, #660]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001590:	2180      	movs	r1, #128	@ 0x80
 8001592:	0249      	lsls	r1, r1, #9
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e00b      	b.n	80015b2 <HAL_RCC_OscConfig+0xba>
 800159a:	4ba2      	ldr	r3, [pc, #648]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4ba1      	ldr	r3, [pc, #644]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 80015a0:	49a1      	ldr	r1, [pc, #644]	@ (8001828 <HAL_RCC_OscConfig+0x330>)
 80015a2:	400a      	ands	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	4b9f      	ldr	r3, [pc, #636]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4b9e      	ldr	r3, [pc, #632]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 80015ac:	499f      	ldr	r1, [pc, #636]	@ (800182c <HAL_RCC_OscConfig+0x334>)
 80015ae:	400a      	ands	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d014      	beq.n	80015e4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ba:	f7ff fbad 	bl	8000d18 <HAL_GetTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff fba8 	bl	8000d18 <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	@ 0x64
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e298      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015d6:	4b93      	ldr	r3, [pc, #588]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	2380      	movs	r3, #128	@ 0x80
 80015dc:	029b      	lsls	r3, r3, #10
 80015de:	4013      	ands	r3, r2
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0xcc>
 80015e2:	e015      	b.n	8001610 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff fb98 	bl	8000d18 <HAL_GetTick>
 80015e8:	0003      	movs	r3, r0
 80015ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ee:	f7ff fb93 	bl	8000d18 <HAL_GetTick>
 80015f2:	0002      	movs	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b64      	cmp	r3, #100	@ 0x64
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e283      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001600:	4b88      	ldr	r3, [pc, #544]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2380      	movs	r3, #128	@ 0x80
 8001606:	029b      	lsls	r3, r3, #10
 8001608:	4013      	ands	r3, r2
 800160a:	d1f0      	bne.n	80015ee <HAL_RCC_OscConfig+0xf6>
 800160c:	e000      	b.n	8001610 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2202      	movs	r2, #2
 8001616:	4013      	ands	r3, r2
 8001618:	d100      	bne.n	800161c <HAL_RCC_OscConfig+0x124>
 800161a:	e099      	b.n	8001750 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800161c:	4b81      	ldr	r3, [pc, #516]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2238      	movs	r2, #56	@ 0x38
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001626:	4b7f      	ldr	r3, [pc, #508]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	2203      	movs	r2, #3
 800162c:	4013      	ands	r3, r2
 800162e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2b10      	cmp	r3, #16
 8001634:	d102      	bne.n	800163c <HAL_RCC_OscConfig+0x144>
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d002      	beq.n	8001642 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d135      	bne.n	80016ae <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001642:	4b78      	ldr	r3, [pc, #480]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	2380      	movs	r3, #128	@ 0x80
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4013      	ands	r3, r2
 800164c:	d005      	beq.n	800165a <HAL_RCC_OscConfig+0x162>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e256      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165a:	4b72      	ldr	r3, [pc, #456]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4a74      	ldr	r2, [pc, #464]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 8001660:	4013      	ands	r3, r2
 8001662:	0019      	movs	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	021a      	lsls	r2, r3, #8
 800166a:	4b6e      	ldr	r3, [pc, #440]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 800166c:	430a      	orrs	r2, r1
 800166e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d112      	bne.n	800169c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001676:	4b6b      	ldr	r3, [pc, #428]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6e      	ldr	r2, [pc, #440]	@ (8001834 <HAL_RCC_OscConfig+0x33c>)
 800167c:	4013      	ands	r3, r2
 800167e:	0019      	movs	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691a      	ldr	r2, [r3, #16]
 8001684:	4b67      	ldr	r3, [pc, #412]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001686:	430a      	orrs	r2, r1
 8001688:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800168a:	4b66      	ldr	r3, [pc, #408]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	0adb      	lsrs	r3, r3, #11
 8001690:	2207      	movs	r2, #7
 8001692:	4013      	ands	r3, r2
 8001694:	4a68      	ldr	r2, [pc, #416]	@ (8001838 <HAL_RCC_OscConfig+0x340>)
 8001696:	40da      	lsrs	r2, r3
 8001698:	4b68      	ldr	r3, [pc, #416]	@ (800183c <HAL_RCC_OscConfig+0x344>)
 800169a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800169c:	4b68      	ldr	r3, [pc, #416]	@ (8001840 <HAL_RCC_OscConfig+0x348>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff fadd 	bl	8000c60 <HAL_InitTick>
 80016a6:	1e03      	subs	r3, r0, #0
 80016a8:	d051      	beq.n	800174e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e22c      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d030      	beq.n	8001718 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001834 <HAL_RCC_OscConfig+0x33c>)
 80016bc:	4013      	ands	r3, r2
 80016be:	0019      	movs	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	4b57      	ldr	r3, [pc, #348]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 80016c6:	430a      	orrs	r2, r1
 80016c8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80016ca:	4b56      	ldr	r3, [pc, #344]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b55      	ldr	r3, [pc, #340]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 80016d0:	2180      	movs	r1, #128	@ 0x80
 80016d2:	0049      	lsls	r1, r1, #1
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff fb1e 	bl	8000d18 <HAL_GetTick>
 80016dc:	0003      	movs	r3, r0
 80016de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e2:	f7ff fb19 	bl	8000d18 <HAL_GetTick>
 80016e6:	0002      	movs	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e209      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2380      	movs	r3, #128	@ 0x80
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4013      	ands	r3, r2
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001700:	4b48      	ldr	r3, [pc, #288]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4a4a      	ldr	r2, [pc, #296]	@ (8001830 <HAL_RCC_OscConfig+0x338>)
 8001706:	4013      	ands	r3, r2
 8001708:	0019      	movs	r1, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	021a      	lsls	r2, r3, #8
 8001710:	4b44      	ldr	r3, [pc, #272]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001712:	430a      	orrs	r2, r1
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	e01b      	b.n	8001750 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001718:	4b42      	ldr	r3, [pc, #264]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b41      	ldr	r3, [pc, #260]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 800171e:	4949      	ldr	r1, [pc, #292]	@ (8001844 <HAL_RCC_OscConfig+0x34c>)
 8001720:	400a      	ands	r2, r1
 8001722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001724:	f7ff faf8 	bl	8000d18 <HAL_GetTick>
 8001728:	0003      	movs	r3, r0
 800172a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800172e:	f7ff faf3 	bl	8000d18 <HAL_GetTick>
 8001732:	0002      	movs	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e1e3      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001740:	4b38      	ldr	r3, [pc, #224]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2380      	movs	r3, #128	@ 0x80
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4013      	ands	r3, r2
 800174a:	d1f0      	bne.n	800172e <HAL_RCC_OscConfig+0x236>
 800174c:	e000      	b.n	8001750 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800174e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2208      	movs	r2, #8
 8001756:	4013      	ands	r3, r2
 8001758:	d047      	beq.n	80017ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800175a:	4b32      	ldr	r3, [pc, #200]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2238      	movs	r2, #56	@ 0x38
 8001760:	4013      	ands	r3, r2
 8001762:	2b18      	cmp	r3, #24
 8001764:	d10a      	bne.n	800177c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001766:	4b2f      	ldr	r3, [pc, #188]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800176a:	2202      	movs	r2, #2
 800176c:	4013      	ands	r3, r2
 800176e:	d03c      	beq.n	80017ea <HAL_RCC_OscConfig+0x2f2>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d138      	bne.n	80017ea <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e1c5      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d019      	beq.n	80017b8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001784:	4b27      	ldr	r3, [pc, #156]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001786:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001788:	4b26      	ldr	r3, [pc, #152]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 800178a:	2101      	movs	r1, #1
 800178c:	430a      	orrs	r2, r1
 800178e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff fac2 	bl	8000d18 <HAL_GetTick>
 8001794:	0003      	movs	r3, r0
 8001796:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179a:	f7ff fabd 	bl	8000d18 <HAL_GetTick>
 800179e:	0002      	movs	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e1ad      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 80017ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b0:	2202      	movs	r2, #2
 80017b2:	4013      	ands	r3, r2
 80017b4:	d0f1      	beq.n	800179a <HAL_RCC_OscConfig+0x2a2>
 80017b6:	e018      	b.n	80017ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80017b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 80017ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017bc:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 80017be:	2101      	movs	r1, #1
 80017c0:	438a      	bics	r2, r1
 80017c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff faa8 	bl	8000d18 <HAL_GetTick>
 80017c8:	0003      	movs	r3, r0
 80017ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ce:	f7ff faa3 	bl	8000d18 <HAL_GetTick>
 80017d2:	0002      	movs	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e193      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e0:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 80017e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e4:	2202      	movs	r2, #2
 80017e6:	4013      	ands	r3, r2
 80017e8:	d1f1      	bne.n	80017ce <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2204      	movs	r2, #4
 80017f0:	4013      	ands	r3, r2
 80017f2:	d100      	bne.n	80017f6 <HAL_RCC_OscConfig+0x2fe>
 80017f4:	e0c6      	b.n	8001984 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f6:	231f      	movs	r3, #31
 80017f8:	18fb      	adds	r3, r7, r3
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2238      	movs	r2, #56	@ 0x38
 8001804:	4013      	ands	r3, r2
 8001806:	2b20      	cmp	r3, #32
 8001808:	d11e      	bne.n	8001848 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_RCC_OscConfig+0x32c>)
 800180c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800180e:	2202      	movs	r2, #2
 8001810:	4013      	ands	r3, r2
 8001812:	d100      	bne.n	8001816 <HAL_RCC_OscConfig+0x31e>
 8001814:	e0b6      	b.n	8001984 <HAL_RCC_OscConfig+0x48c>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d000      	beq.n	8001820 <HAL_RCC_OscConfig+0x328>
 800181e:	e0b1      	b.n	8001984 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e171      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
 8001824:	40021000 	.word	0x40021000
 8001828:	fffeffff 	.word	0xfffeffff
 800182c:	fffbffff 	.word	0xfffbffff
 8001830:	ffff80ff 	.word	0xffff80ff
 8001834:	ffffc7ff 	.word	0xffffc7ff
 8001838:	00f42400 	.word	0x00f42400
 800183c:	20000000 	.word	0x20000000
 8001840:	20000004 	.word	0x20000004
 8001844:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001848:	4bb1      	ldr	r3, [pc, #708]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 800184a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800184c:	2380      	movs	r3, #128	@ 0x80
 800184e:	055b      	lsls	r3, r3, #21
 8001850:	4013      	ands	r3, r2
 8001852:	d101      	bne.n	8001858 <HAL_RCC_OscConfig+0x360>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <HAL_RCC_OscConfig+0x362>
 8001858:	2300      	movs	r3, #0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d011      	beq.n	8001882 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4bac      	ldr	r3, [pc, #688]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001860:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001862:	4bab      	ldr	r3, [pc, #684]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001864:	2180      	movs	r1, #128	@ 0x80
 8001866:	0549      	lsls	r1, r1, #21
 8001868:	430a      	orrs	r2, r1
 800186a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800186c:	4ba8      	ldr	r3, [pc, #672]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 800186e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001870:	2380      	movs	r3, #128	@ 0x80
 8001872:	055b      	lsls	r3, r3, #21
 8001874:	4013      	ands	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800187a:	231f      	movs	r3, #31
 800187c:	18fb      	adds	r3, r7, r3
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001882:	4ba4      	ldr	r3, [pc, #656]	@ (8001b14 <HAL_RCC_OscConfig+0x61c>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	2380      	movs	r3, #128	@ 0x80
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4013      	ands	r3, r2
 800188c:	d11a      	bne.n	80018c4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800188e:	4ba1      	ldr	r3, [pc, #644]	@ (8001b14 <HAL_RCC_OscConfig+0x61c>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4ba0      	ldr	r3, [pc, #640]	@ (8001b14 <HAL_RCC_OscConfig+0x61c>)
 8001894:	2180      	movs	r1, #128	@ 0x80
 8001896:	0049      	lsls	r1, r1, #1
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800189c:	f7ff fa3c 	bl	8000d18 <HAL_GetTick>
 80018a0:	0003      	movs	r3, r0
 80018a2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a6:	f7ff fa37 	bl	8000d18 <HAL_GetTick>
 80018aa:	0002      	movs	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e127      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b8:	4b96      	ldr	r3, [pc, #600]	@ (8001b14 <HAL_RCC_OscConfig+0x61c>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	2380      	movs	r3, #128	@ 0x80
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4013      	ands	r3, r2
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d106      	bne.n	80018da <HAL_RCC_OscConfig+0x3e2>
 80018cc:	4b90      	ldr	r3, [pc, #576]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 80018ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018d0:	4b8f      	ldr	r3, [pc, #572]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	430a      	orrs	r2, r1
 80018d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018d8:	e01c      	b.n	8001914 <HAL_RCC_OscConfig+0x41c>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b05      	cmp	r3, #5
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0x404>
 80018e2:	4b8b      	ldr	r3, [pc, #556]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 80018e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018e6:	4b8a      	ldr	r3, [pc, #552]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 80018e8:	2104      	movs	r1, #4
 80018ea:	430a      	orrs	r2, r1
 80018ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018ee:	4b88      	ldr	r3, [pc, #544]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 80018f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018f2:	4b87      	ldr	r3, [pc, #540]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 80018f4:	2101      	movs	r1, #1
 80018f6:	430a      	orrs	r2, r1
 80018f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0x41c>
 80018fc:	4b84      	ldr	r3, [pc, #528]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 80018fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001900:	4b83      	ldr	r3, [pc, #524]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001902:	2101      	movs	r1, #1
 8001904:	438a      	bics	r2, r1
 8001906:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001908:	4b81      	ldr	r3, [pc, #516]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 800190a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800190c:	4b80      	ldr	r3, [pc, #512]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 800190e:	2104      	movs	r1, #4
 8001910:	438a      	bics	r2, r1
 8001912:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d014      	beq.n	8001946 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff f9fc 	bl	8000d18 <HAL_GetTick>
 8001920:	0003      	movs	r3, r0
 8001922:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001924:	e009      	b.n	800193a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001926:	f7ff f9f7 	bl	8000d18 <HAL_GetTick>
 800192a:	0002      	movs	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	4a79      	ldr	r2, [pc, #484]	@ (8001b18 <HAL_RCC_OscConfig+0x620>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e0e6      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800193a:	4b75      	ldr	r3, [pc, #468]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 800193c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193e:	2202      	movs	r2, #2
 8001940:	4013      	ands	r3, r2
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x42e>
 8001944:	e013      	b.n	800196e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001946:	f7ff f9e7 	bl	8000d18 <HAL_GetTick>
 800194a:	0003      	movs	r3, r0
 800194c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800194e:	e009      	b.n	8001964 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001950:	f7ff f9e2 	bl	8000d18 <HAL_GetTick>
 8001954:	0002      	movs	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	4a6f      	ldr	r2, [pc, #444]	@ (8001b18 <HAL_RCC_OscConfig+0x620>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e0d1      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001964:	4b6a      	ldr	r3, [pc, #424]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001968:	2202      	movs	r2, #2
 800196a:	4013      	ands	r3, r2
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800196e:	231f      	movs	r3, #31
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d105      	bne.n	8001984 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001978:	4b65      	ldr	r3, [pc, #404]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 800197a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800197c:	4b64      	ldr	r3, [pc, #400]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 800197e:	4967      	ldr	r1, [pc, #412]	@ (8001b1c <HAL_RCC_OscConfig+0x624>)
 8001980:	400a      	ands	r2, r1
 8001982:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d100      	bne.n	800198e <HAL_RCC_OscConfig+0x496>
 800198c:	e0bb      	b.n	8001b06 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800198e:	4b60      	ldr	r3, [pc, #384]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2238      	movs	r2, #56	@ 0x38
 8001994:	4013      	ands	r3, r2
 8001996:	2b10      	cmp	r3, #16
 8001998:	d100      	bne.n	800199c <HAL_RCC_OscConfig+0x4a4>
 800199a:	e07b      	b.n	8001a94 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d156      	bne.n	8001a52 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a4:	4b5a      	ldr	r3, [pc, #360]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b59      	ldr	r3, [pc, #356]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 80019aa:	495d      	ldr	r1, [pc, #372]	@ (8001b20 <HAL_RCC_OscConfig+0x628>)
 80019ac:	400a      	ands	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff f9b2 	bl	8000d18 <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ba:	f7ff f9ad 	bl	8000d18 <HAL_GetTick>
 80019be:	0002      	movs	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e09d      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019cc:	4b50      	ldr	r3, [pc, #320]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	2380      	movs	r3, #128	@ 0x80
 80019d2:	049b      	lsls	r3, r3, #18
 80019d4:	4013      	ands	r3, r2
 80019d6:	d1f0      	bne.n	80019ba <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4a51      	ldr	r2, [pc, #324]	@ (8001b24 <HAL_RCC_OscConfig+0x62c>)
 80019de:	4013      	ands	r3, r2
 80019e0:	0019      	movs	r1, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a1a      	ldr	r2, [r3, #32]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f8:	431a      	orrs	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a04:	431a      	orrs	r2, r3
 8001a06:	4b42      	ldr	r3, [pc, #264]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a0c:	4b40      	ldr	r3, [pc, #256]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b3f      	ldr	r3, [pc, #252]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a12:	2180      	movs	r1, #128	@ 0x80
 8001a14:	0449      	lsls	r1, r1, #17
 8001a16:	430a      	orrs	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001a1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a20:	2180      	movs	r1, #128	@ 0x80
 8001a22:	0549      	lsls	r1, r1, #21
 8001a24:	430a      	orrs	r2, r1
 8001a26:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff f976 	bl	8000d18 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a32:	f7ff f971 	bl	8000d18 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e061      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a44:	4b32      	ldr	r3, [pc, #200]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	@ 0x80
 8001a4a:	049b      	lsls	r3, r3, #18
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x53a>
 8001a50:	e059      	b.n	8001b06 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a52:	4b2f      	ldr	r3, [pc, #188]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4b2e      	ldr	r3, [pc, #184]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a58:	4931      	ldr	r1, [pc, #196]	@ (8001b20 <HAL_RCC_OscConfig+0x628>)
 8001a5a:	400a      	ands	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5e:	f7ff f95b 	bl	8000d18 <HAL_GetTick>
 8001a62:	0003      	movs	r3, r0
 8001a64:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a68:	f7ff f956 	bl	8000d18 <HAL_GetTick>
 8001a6c:	0002      	movs	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e046      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7a:	4b25      	ldr	r3, [pc, #148]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	2380      	movs	r3, #128	@ 0x80
 8001a80:	049b      	lsls	r3, r3, #18
 8001a82:	4013      	ands	r3, r2
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001a86:	4b22      	ldr	r3, [pc, #136]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	4b21      	ldr	r3, [pc, #132]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001a8c:	4926      	ldr	r1, [pc, #152]	@ (8001b28 <HAL_RCC_OscConfig+0x630>)
 8001a8e:	400a      	ands	r2, r1
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	e038      	b.n	8001b06 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e033      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <HAL_RCC_OscConfig+0x618>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	401a      	ands	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d126      	bne.n	8001b02 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2270      	movs	r2, #112	@ 0x70
 8001ab8:	401a      	ands	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d11f      	bne.n	8001b02 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	23fe      	movs	r3, #254	@ 0xfe
 8001ac6:	01db      	lsls	r3, r3, #7
 8001ac8:	401a      	ands	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ace:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d116      	bne.n	8001b02 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	23f8      	movs	r3, #248	@ 0xf8
 8001ad8:	039b      	lsls	r3, r3, #14
 8001ada:	401a      	ands	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d10e      	bne.n	8001b02 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	23e0      	movs	r3, #224	@ 0xe0
 8001ae8:	051b      	lsls	r3, r3, #20
 8001aea:	401a      	ands	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	0f5b      	lsrs	r3, r3, #29
 8001af8:	075a      	lsls	r2, r3, #29
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d001      	beq.n	8001b06 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	0018      	movs	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b008      	add	sp, #32
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40007000 	.word	0x40007000
 8001b18:	00001388 	.word	0x00001388
 8001b1c:	efffffff 	.word	0xefffffff
 8001b20:	feffffff 	.word	0xfeffffff
 8001b24:	11c1808c 	.word	0x11c1808c
 8001b28:	eefefffc 	.word	0xeefefffc

08001b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0e9      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b40:	4b76      	ldr	r3, [pc, #472]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2207      	movs	r2, #7
 8001b46:	4013      	ands	r3, r2
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d91e      	bls.n	8001b8c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b73      	ldr	r3, [pc, #460]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2207      	movs	r2, #7
 8001b54:	4393      	bics	r3, r2
 8001b56:	0019      	movs	r1, r3
 8001b58:	4b70      	ldr	r3, [pc, #448]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b60:	f7ff f8da 	bl	8000d18 <HAL_GetTick>
 8001b64:	0003      	movs	r3, r0
 8001b66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b68:	e009      	b.n	8001b7e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6a:	f7ff f8d5 	bl	8000d18 <HAL_GetTick>
 8001b6e:	0002      	movs	r2, r0
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	4a6a      	ldr	r2, [pc, #424]	@ (8001d20 <HAL_RCC_ClockConfig+0x1f4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e0ca      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b7e:	4b67      	ldr	r3, [pc, #412]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2207      	movs	r2, #7
 8001b84:	4013      	ands	r3, r2
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d1ee      	bne.n	8001b6a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2202      	movs	r2, #2
 8001b92:	4013      	ands	r3, r2
 8001b94:	d015      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d006      	beq.n	8001bae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ba0:	4b60      	ldr	r3, [pc, #384]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	4b5f      	ldr	r3, [pc, #380]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001ba6:	21e0      	movs	r1, #224	@ 0xe0
 8001ba8:	01c9      	lsls	r1, r1, #7
 8001baa:	430a      	orrs	r2, r1
 8001bac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bae:	4b5d      	ldr	r3, [pc, #372]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	4a5d      	ldr	r2, [pc, #372]	@ (8001d28 <HAL_RCC_ClockConfig+0x1fc>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	4b59      	ldr	r3, [pc, #356]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d057      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bd4:	4b53      	ldr	r3, [pc, #332]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2380      	movs	r3, #128	@ 0x80
 8001bda:	029b      	lsls	r3, r3, #10
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d12b      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e097      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d107      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bec:	4b4d      	ldr	r3, [pc, #308]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	@ 0x80
 8001bf2:	049b      	lsls	r3, r3, #18
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d11f      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e08b      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c04:	4b47      	ldr	r3, [pc, #284]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	@ 0x80
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d113      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e07f      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c1c:	4b41      	ldr	r3, [pc, #260]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c20:	2202      	movs	r2, #2
 8001c22:	4013      	ands	r3, r2
 8001c24:	d108      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e074      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c2e:	2202      	movs	r2, #2
 8001c30:	4013      	ands	r3, r2
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e06d      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c38:	4b3a      	ldr	r3, [pc, #232]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2207      	movs	r2, #7
 8001c3e:	4393      	bics	r3, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	4b37      	ldr	r3, [pc, #220]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c4c:	f7ff f864 	bl	8000d18 <HAL_GetTick>
 8001c50:	0003      	movs	r3, r0
 8001c52:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c54:	e009      	b.n	8001c6a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c56:	f7ff f85f 	bl	8000d18 <HAL_GetTick>
 8001c5a:	0002      	movs	r2, r0
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	4a2f      	ldr	r2, [pc, #188]	@ (8001d20 <HAL_RCC_ClockConfig+0x1f4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e054      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2238      	movs	r2, #56	@ 0x38
 8001c70:	401a      	ands	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d1ec      	bne.n	8001c56 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b27      	ldr	r3, [pc, #156]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2207      	movs	r2, #7
 8001c82:	4013      	ands	r3, r2
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d21e      	bcs.n	8001cc8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b24      	ldr	r3, [pc, #144]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2207      	movs	r2, #7
 8001c90:	4393      	bics	r3, r2
 8001c92:	0019      	movs	r1, r3
 8001c94:	4b21      	ldr	r3, [pc, #132]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c9c:	f7ff f83c 	bl	8000d18 <HAL_GetTick>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ca4:	e009      	b.n	8001cba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca6:	f7ff f837 	bl	8000d18 <HAL_GetTick>
 8001caa:	0002      	movs	r2, r0
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8001d20 <HAL_RCC_ClockConfig+0x1f4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e02c      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cba:	4b18      	ldr	r3, [pc, #96]	@ (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2207      	movs	r2, #7
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d1ee      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2204      	movs	r2, #4
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d009      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd2:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	4a15      	ldr	r2, [pc, #84]	@ (8001d2c <HAL_RCC_ClockConfig+0x200>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	0019      	movs	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ce6:	f000 f829 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8001cea:	0001      	movs	r1, r0
 8001cec:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	220f      	movs	r2, #15
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d30 <HAL_RCC_ClockConfig+0x204>)
 8001cf8:	0092      	lsls	r2, r2, #2
 8001cfa:	58d3      	ldr	r3, [r2, r3]
 8001cfc:	221f      	movs	r2, #31
 8001cfe:	4013      	ands	r3, r2
 8001d00:	000a      	movs	r2, r1
 8001d02:	40da      	lsrs	r2, r3
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <HAL_RCC_ClockConfig+0x208>)
 8001d06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d08:	4b0b      	ldr	r3, [pc, #44]	@ (8001d38 <HAL_RCC_ClockConfig+0x20c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f7fe ffa7 	bl	8000c60 <HAL_InitTick>
 8001d12:	0003      	movs	r3, r0
}
 8001d14:	0018      	movs	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b004      	add	sp, #16
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40022000 	.word	0x40022000
 8001d20:	00001388 	.word	0x00001388
 8001d24:	40021000 	.word	0x40021000
 8001d28:	fffff0ff 	.word	0xfffff0ff
 8001d2c:	ffff8fff 	.word	0xffff8fff
 8001d30:	0800408c 	.word	0x0800408c
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000004 	.word	0x20000004

08001d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d42:	4b3c      	ldr	r3, [pc, #240]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2238      	movs	r2, #56	@ 0x38
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d10f      	bne.n	8001d6c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d4c:	4b39      	ldr	r3, [pc, #228]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0adb      	lsrs	r3, r3, #11
 8001d52:	2207      	movs	r2, #7
 8001d54:	4013      	ands	r3, r2
 8001d56:	2201      	movs	r2, #1
 8001d58:	409a      	lsls	r2, r3
 8001d5a:	0013      	movs	r3, r2
 8001d5c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d5e:	6839      	ldr	r1, [r7, #0]
 8001d60:	4835      	ldr	r0, [pc, #212]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d62:	f7fe f9cf 	bl	8000104 <__udivsi3>
 8001d66:	0003      	movs	r3, r0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	e05d      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d6c:	4b31      	ldr	r3, [pc, #196]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2238      	movs	r2, #56	@ 0x38
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d102      	bne.n	8001d7e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d78:	4b30      	ldr	r3, [pc, #192]	@ (8001e3c <HAL_RCC_GetSysClockFreq+0x100>)
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	e054      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2238      	movs	r2, #56	@ 0x38
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b10      	cmp	r3, #16
 8001d88:	d138      	bne.n	8001dfc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2203      	movs	r2, #3
 8001d90:	4013      	ands	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d94:	4b27      	ldr	r3, [pc, #156]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	2207      	movs	r2, #7
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	3301      	adds	r3, #1
 8001da0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d10d      	bne.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	4824      	ldr	r0, [pc, #144]	@ (8001e3c <HAL_RCC_GetSysClockFreq+0x100>)
 8001dac:	f7fe f9aa 	bl	8000104 <__udivsi3>
 8001db0:	0003      	movs	r3, r0
 8001db2:	0019      	movs	r1, r3
 8001db4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	227f      	movs	r2, #127	@ 0x7f
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	434b      	muls	r3, r1
 8001dc0:	617b      	str	r3, [r7, #20]
        break;
 8001dc2:	e00d      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	481c      	ldr	r0, [pc, #112]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001dc8:	f7fe f99c 	bl	8000104 <__udivsi3>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	0019      	movs	r1, r3
 8001dd0:	4b18      	ldr	r3, [pc, #96]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	227f      	movs	r2, #127	@ 0x7f
 8001dd8:	4013      	ands	r3, r2
 8001dda:	434b      	muls	r3, r1
 8001ddc:	617b      	str	r3, [r7, #20]
        break;
 8001dde:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001de0:	4b14      	ldr	r3, [pc, #80]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0f5b      	lsrs	r3, r3, #29
 8001de6:	2207      	movs	r2, #7
 8001de8:	4013      	ands	r3, r2
 8001dea:	3301      	adds	r3, #1
 8001dec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	6978      	ldr	r0, [r7, #20]
 8001df2:	f7fe f987 	bl	8000104 <__udivsi3>
 8001df6:	0003      	movs	r3, r0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	e015      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2238      	movs	r2, #56	@ 0x38
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	d103      	bne.n	8001e10 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001e08:	2380      	movs	r3, #128	@ 0x80
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	e00b      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e10:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2238      	movs	r2, #56	@ 0x38
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b18      	cmp	r3, #24
 8001e1a:	d103      	bne.n	8001e24 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001e1c:	23fa      	movs	r3, #250	@ 0xfa
 8001e1e:	01db      	lsls	r3, r3, #7
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	e001      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e28:	693b      	ldr	r3, [r7, #16]
}
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b006      	add	sp, #24
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	40021000 	.word	0x40021000
 8001e38:	00f42400 	.word	0x00f42400
 8001e3c:	007a1200 	.word	0x007a1200

08001e40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e44:	4b02      	ldr	r3, [pc, #8]	@ (8001e50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			@ (mov r8, r8)
 8001e50:	20000000 	.word	0x20000000

08001e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e54:	b5b0      	push	{r4, r5, r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001e58:	f7ff fff2 	bl	8001e40 <HAL_RCC_GetHCLKFreq>
 8001e5c:	0004      	movs	r4, r0
 8001e5e:	f7ff fb3f 	bl	80014e0 <LL_RCC_GetAPB1Prescaler>
 8001e62:	0003      	movs	r3, r0
 8001e64:	0b1a      	lsrs	r2, r3, #12
 8001e66:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e68:	0092      	lsls	r2, r2, #2
 8001e6a:	58d3      	ldr	r3, [r2, r3]
 8001e6c:	221f      	movs	r2, #31
 8001e6e:	4013      	ands	r3, r2
 8001e70:	40dc      	lsrs	r4, r3
 8001e72:	0023      	movs	r3, r4
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	080040cc 	.word	0x080040cc

08001e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001e88:	2313      	movs	r3, #19
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e90:	2312      	movs	r3, #18
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2380      	movs	r3, #128	@ 0x80
 8001e9e:	029b      	lsls	r3, r3, #10
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d100      	bne.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ea4:	e0a3      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea6:	2011      	movs	r0, #17
 8001ea8:	183b      	adds	r3, r7, r0
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eae:	4bc3      	ldr	r3, [pc, #780]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eb2:	2380      	movs	r3, #128	@ 0x80
 8001eb4:	055b      	lsls	r3, r3, #21
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d110      	bne.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	4bc0      	ldr	r3, [pc, #768]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ebc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ebe:	4bbf      	ldr	r3, [pc, #764]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec0:	2180      	movs	r1, #128	@ 0x80
 8001ec2:	0549      	lsls	r1, r1, #21
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ec8:	4bbc      	ldr	r3, [pc, #752]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ecc:	2380      	movs	r3, #128	@ 0x80
 8001ece:	055b      	lsls	r3, r3, #21
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed6:	183b      	adds	r3, r7, r0
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001edc:	4bb8      	ldr	r3, [pc, #736]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4bb7      	ldr	r3, [pc, #732]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001ee2:	2180      	movs	r1, #128	@ 0x80
 8001ee4:	0049      	lsls	r1, r1, #1
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eea:	f7fe ff15 	bl	8000d18 <HAL_GetTick>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ef2:	e00b      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef4:	f7fe ff10 	bl	8000d18 <HAL_GetTick>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d904      	bls.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001f02:	2313      	movs	r3, #19
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	2203      	movs	r2, #3
 8001f08:	701a      	strb	r2, [r3, #0]
        break;
 8001f0a:	e005      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f0c:	4bac      	ldr	r3, [pc, #688]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	2380      	movs	r3, #128	@ 0x80
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4013      	ands	r3, r2
 8001f16:	d0ed      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001f18:	2313      	movs	r3, #19
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d154      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f22:	4ba6      	ldr	r3, [pc, #664]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f26:	23c0      	movs	r3, #192	@ 0xc0
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d019      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d014      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f3e:	4b9f      	ldr	r3, [pc, #636]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f42:	4aa0      	ldr	r2, [pc, #640]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f48:	4b9c      	ldr	r3, [pc, #624]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f4c:	4b9b      	ldr	r3, [pc, #620]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f4e:	2180      	movs	r1, #128	@ 0x80
 8001f50:	0249      	lsls	r1, r1, #9
 8001f52:	430a      	orrs	r2, r1
 8001f54:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f56:	4b99      	ldr	r3, [pc, #612]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f5a:	4b98      	ldr	r3, [pc, #608]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f5c:	499a      	ldr	r1, [pc, #616]	@ (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001f5e:	400a      	ands	r2, r1
 8001f60:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f62:	4b96      	ldr	r3, [pc, #600]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d016      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7fe fed2 	bl	8000d18 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f78:	e00c      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7fe fecd 	bl	8000d18 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	4a91      	ldr	r2, [pc, #580]	@ (80021cc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d904      	bls.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001f8a:	2313      	movs	r3, #19
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	2203      	movs	r2, #3
 8001f90:	701a      	strb	r2, [r3, #0]
            break;
 8001f92:	e004      	b.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f94:	4b89      	ldr	r3, [pc, #548]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f98:	2202      	movs	r2, #2
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d0ed      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001f9e:	2313      	movs	r3, #19
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10a      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fa8:	4b84      	ldr	r3, [pc, #528]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fac:	4a85      	ldr	r2, [pc, #532]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fb6:	4b81      	ldr	r3, [pc, #516]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fbc:	e00c      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fbe:	2312      	movs	r3, #18
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	2213      	movs	r2, #19
 8001fc4:	18ba      	adds	r2, r7, r2
 8001fc6:	7812      	ldrb	r2, [r2, #0]
 8001fc8:	701a      	strb	r2, [r3, #0]
 8001fca:	e005      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fcc:	2312      	movs	r3, #18
 8001fce:	18fb      	adds	r3, r7, r3
 8001fd0:	2213      	movs	r2, #19
 8001fd2:	18ba      	adds	r2, r7, r2
 8001fd4:	7812      	ldrb	r2, [r2, #0]
 8001fd6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fd8:	2311      	movs	r3, #17
 8001fda:	18fb      	adds	r3, r7, r3
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d105      	bne.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe2:	4b76      	ldr	r3, [pc, #472]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fe6:	4b75      	ldr	r3, [pc, #468]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe8:	4979      	ldr	r1, [pc, #484]	@ (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001fea:	400a      	ands	r2, r1
 8001fec:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d009      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ff8:	4b70      	ldr	r3, [pc, #448]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	4393      	bics	r3, r2
 8002000:	0019      	movs	r1, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	4b6d      	ldr	r3, [pc, #436]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002008:	430a      	orrs	r2, r1
 800200a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2202      	movs	r2, #2
 8002012:	4013      	ands	r3, r2
 8002014:	d009      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002016:	4b69      	ldr	r3, [pc, #420]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201a:	220c      	movs	r2, #12
 800201c:	4393      	bics	r3, r2
 800201e:	0019      	movs	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	4b65      	ldr	r3, [pc, #404]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002026:	430a      	orrs	r2, r1
 8002028:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2210      	movs	r2, #16
 8002030:	4013      	ands	r3, r2
 8002032:	d009      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002034:	4b61      	ldr	r3, [pc, #388]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002038:	4a66      	ldr	r2, [pc, #408]	@ (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800203a:	4013      	ands	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	4b5e      	ldr	r3, [pc, #376]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002044:	430a      	orrs	r2, r1
 8002046:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	2380      	movs	r3, #128	@ 0x80
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4013      	ands	r3, r2
 8002052:	d009      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002054:	4b59      	ldr	r3, [pc, #356]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002058:	4a5f      	ldr	r2, [pc, #380]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800205a:	4013      	ands	r3, r2
 800205c:	0019      	movs	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	4b56      	ldr	r3, [pc, #344]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002064:	430a      	orrs	r2, r1
 8002066:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	@ 0x80
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4013      	ands	r3, r2
 8002072:	d009      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002074:	4b51      	ldr	r3, [pc, #324]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002078:	4a58      	ldr	r2, [pc, #352]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800207a:	4013      	ands	r3, r2
 800207c:	0019      	movs	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69da      	ldr	r2, [r3, #28]
 8002082:	4b4e      	ldr	r3, [pc, #312]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002084:	430a      	orrs	r2, r1
 8002086:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2220      	movs	r2, #32
 800208e:	4013      	ands	r3, r2
 8002090:	d009      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002092:	4b4a      	ldr	r3, [pc, #296]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002096:	4a52      	ldr	r2, [pc, #328]	@ (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002098:	4013      	ands	r3, r2
 800209a:	0019      	movs	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	4b46      	ldr	r3, [pc, #280]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020a2:	430a      	orrs	r2, r1
 80020a4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	2380      	movs	r3, #128	@ 0x80
 80020ac:	01db      	lsls	r3, r3, #7
 80020ae:	4013      	ands	r3, r2
 80020b0:	d015      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020b2:	4b42      	ldr	r3, [pc, #264]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	0899      	lsrs	r1, r3, #2
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1a      	ldr	r2, [r3, #32]
 80020be:	4b3f      	ldr	r3, [pc, #252]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020c0:	430a      	orrs	r2, r1
 80020c2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1a      	ldr	r2, [r3, #32]
 80020c8:	2380      	movs	r3, #128	@ 0x80
 80020ca:	05db      	lsls	r3, r3, #23
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d106      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020d0:	4b3a      	ldr	r3, [pc, #232]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	4b39      	ldr	r3, [pc, #228]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020d6:	2180      	movs	r1, #128	@ 0x80
 80020d8:	0249      	lsls	r1, r1, #9
 80020da:	430a      	orrs	r2, r1
 80020dc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	2380      	movs	r3, #128	@ 0x80
 80020e4:	031b      	lsls	r3, r3, #12
 80020e6:	4013      	ands	r3, r2
 80020e8:	d009      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020ea:	4b34      	ldr	r3, [pc, #208]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ee:	2240      	movs	r2, #64	@ 0x40
 80020f0:	4393      	bics	r3, r2
 80020f2:	0019      	movs	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020f8:	4b30      	ldr	r3, [pc, #192]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020fa:	430a      	orrs	r2, r1
 80020fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	2380      	movs	r3, #128	@ 0x80
 8002104:	039b      	lsls	r3, r3, #14
 8002106:	4013      	ands	r3, r2
 8002108:	d016      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800210a:	4b2c      	ldr	r3, [pc, #176]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800210c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800210e:	4a35      	ldr	r2, [pc, #212]	@ (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002110:	4013      	ands	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002118:	4b28      	ldr	r3, [pc, #160]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800211a:	430a      	orrs	r2, r1
 800211c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002122:	2380      	movs	r3, #128	@ 0x80
 8002124:	03db      	lsls	r3, r3, #15
 8002126:	429a      	cmp	r2, r3
 8002128:	d106      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800212a:	4b24      	ldr	r3, [pc, #144]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	4b23      	ldr	r3, [pc, #140]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002130:	2180      	movs	r1, #128	@ 0x80
 8002132:	0449      	lsls	r1, r1, #17
 8002134:	430a      	orrs	r2, r1
 8002136:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	@ 0x80
 800213e:	03db      	lsls	r3, r3, #15
 8002140:	4013      	ands	r3, r2
 8002142:	d016      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002144:	4b1d      	ldr	r3, [pc, #116]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002148:	4a27      	ldr	r2, [pc, #156]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800214a:	4013      	ands	r3, r2
 800214c:	0019      	movs	r1, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002152:	4b1a      	ldr	r3, [pc, #104]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002154:	430a      	orrs	r2, r1
 8002156:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800215c:	2380      	movs	r3, #128	@ 0x80
 800215e:	045b      	lsls	r3, r3, #17
 8002160:	429a      	cmp	r2, r3
 8002162:	d106      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002164:	4b15      	ldr	r3, [pc, #84]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	4b14      	ldr	r3, [pc, #80]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800216a:	2180      	movs	r1, #128	@ 0x80
 800216c:	0449      	lsls	r1, r1, #17
 800216e:	430a      	orrs	r2, r1
 8002170:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	2380      	movs	r3, #128	@ 0x80
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	4013      	ands	r3, r2
 800217c:	d016      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800217e:	4b0f      	ldr	r3, [pc, #60]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002182:	4a1a      	ldr	r2, [pc, #104]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002184:	4013      	ands	r3, r2
 8002186:	0019      	movs	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800218e:	430a      	orrs	r2, r1
 8002190:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	2380      	movs	r3, #128	@ 0x80
 8002198:	01db      	lsls	r3, r3, #7
 800219a:	429a      	cmp	r2, r3
 800219c:	d106      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800219e:	4b07      	ldr	r3, [pc, #28]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021a4:	2180      	movs	r1, #128	@ 0x80
 80021a6:	0249      	lsls	r1, r1, #9
 80021a8:	430a      	orrs	r2, r1
 80021aa:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80021ac:	2312      	movs	r3, #18
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	781b      	ldrb	r3, [r3, #0]
}
 80021b2:	0018      	movs	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b006      	add	sp, #24
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			@ (mov r8, r8)
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40007000 	.word	0x40007000
 80021c4:	fffffcff 	.word	0xfffffcff
 80021c8:	fffeffff 	.word	0xfffeffff
 80021cc:	00001388 	.word	0x00001388
 80021d0:	efffffff 	.word	0xefffffff
 80021d4:	fffff3ff 	.word	0xfffff3ff
 80021d8:	fff3ffff 	.word	0xfff3ffff
 80021dc:	ffcfffff 	.word	0xffcfffff
 80021e0:	ffffcfff 	.word	0xffffcfff
 80021e4:	ffbfffff 	.word	0xffbfffff
 80021e8:	feffffff 	.word	0xfeffffff
 80021ec:	ffff3fff 	.word	0xffff3fff

080021f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e04a      	b.n	8002298 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	223d      	movs	r2, #61	@ 0x3d
 8002206:	5c9b      	ldrb	r3, [r3, r2]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d107      	bne.n	800221e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	223c      	movs	r2, #60	@ 0x3c
 8002212:	2100      	movs	r1, #0
 8002214:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	0018      	movs	r0, r3
 800221a:	f7fe fc09 	bl	8000a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	223d      	movs	r2, #61	@ 0x3d
 8002222:	2102      	movs	r1, #2
 8002224:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3304      	adds	r3, #4
 800222e:	0019      	movs	r1, r3
 8002230:	0010      	movs	r0, r2
 8002232:	f000 fa8f 	bl	8002754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2248      	movs	r2, #72	@ 0x48
 800223a:	2101      	movs	r1, #1
 800223c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	223e      	movs	r2, #62	@ 0x3e
 8002242:	2101      	movs	r1, #1
 8002244:	5499      	strb	r1, [r3, r2]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	223f      	movs	r2, #63	@ 0x3f
 800224a:	2101      	movs	r1, #1
 800224c:	5499      	strb	r1, [r3, r2]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2240      	movs	r2, #64	@ 0x40
 8002252:	2101      	movs	r1, #1
 8002254:	5499      	strb	r1, [r3, r2]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2241      	movs	r2, #65	@ 0x41
 800225a:	2101      	movs	r1, #1
 800225c:	5499      	strb	r1, [r3, r2]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2242      	movs	r2, #66	@ 0x42
 8002262:	2101      	movs	r1, #1
 8002264:	5499      	strb	r1, [r3, r2]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2243      	movs	r2, #67	@ 0x43
 800226a:	2101      	movs	r1, #1
 800226c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2244      	movs	r2, #68	@ 0x44
 8002272:	2101      	movs	r1, #1
 8002274:	5499      	strb	r1, [r3, r2]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2245      	movs	r2, #69	@ 0x45
 800227a:	2101      	movs	r1, #1
 800227c:	5499      	strb	r1, [r3, r2]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2246      	movs	r2, #70	@ 0x46
 8002282:	2101      	movs	r1, #1
 8002284:	5499      	strb	r1, [r3, r2]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2247      	movs	r2, #71	@ 0x47
 800228a:	2101      	movs	r1, #1
 800228c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	223d      	movs	r2, #61	@ 0x3d
 8002292:	2101      	movs	r1, #1
 8002294:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	b002      	add	sp, #8
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	223d      	movs	r2, #61	@ 0x3d
 80022ac:	5c9b      	ldrb	r3, [r3, r2]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d001      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e042      	b.n	800233e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	223d      	movs	r2, #61	@ 0x3d
 80022bc:	2102      	movs	r1, #2
 80022be:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2101      	movs	r1, #1
 80022cc:	430a      	orrs	r2, r1
 80022ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002348 <HAL_TIM_Base_Start_IT+0xa8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00f      	beq.n	80022fa <HAL_TIM_Base_Start_IT+0x5a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	2380      	movs	r3, #128	@ 0x80
 80022e0:	05db      	lsls	r3, r3, #23
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d009      	beq.n	80022fa <HAL_TIM_Base_Start_IT+0x5a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a18      	ldr	r2, [pc, #96]	@ (800234c <HAL_TIM_Base_Start_IT+0xac>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d004      	beq.n	80022fa <HAL_TIM_Base_Start_IT+0x5a>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a16      	ldr	r2, [pc, #88]	@ (8002350 <HAL_TIM_Base_Start_IT+0xb0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d116      	bne.n	8002328 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4a14      	ldr	r2, [pc, #80]	@ (8002354 <HAL_TIM_Base_Start_IT+0xb4>)
 8002302:	4013      	ands	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b06      	cmp	r3, #6
 800230a:	d016      	beq.n	800233a <HAL_TIM_Base_Start_IT+0x9a>
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	2380      	movs	r3, #128	@ 0x80
 8002310:	025b      	lsls	r3, r3, #9
 8002312:	429a      	cmp	r2, r3
 8002314:	d011      	beq.n	800233a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2101      	movs	r1, #1
 8002322:	430a      	orrs	r2, r1
 8002324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002326:	e008      	b.n	800233a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2101      	movs	r1, #1
 8002334:	430a      	orrs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	e000      	b.n	800233c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800233a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	0018      	movs	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	b004      	add	sp, #16
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			@ (mov r8, r8)
 8002348:	40012c00 	.word	0x40012c00
 800234c:	40000400 	.word	0x40000400
 8002350:	40014000 	.word	0x40014000
 8002354:	00010007 	.word	0x00010007

08002358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2202      	movs	r2, #2
 8002374:	4013      	ands	r3, r2
 8002376:	d021      	beq.n	80023bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2202      	movs	r2, #2
 800237c:	4013      	ands	r3, r2
 800237e:	d01d      	beq.n	80023bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2203      	movs	r2, #3
 8002386:	4252      	negs	r2, r2
 8002388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2203      	movs	r2, #3
 8002398:	4013      	ands	r3, r2
 800239a:	d004      	beq.n	80023a6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	0018      	movs	r0, r3
 80023a0:	f000 f9c0 	bl	8002724 <HAL_TIM_IC_CaptureCallback>
 80023a4:	e007      	b.n	80023b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	0018      	movs	r0, r3
 80023aa:	f000 f9b3 	bl	8002714 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	0018      	movs	r0, r3
 80023b2:	f000 f9bf 	bl	8002734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2204      	movs	r2, #4
 80023c0:	4013      	ands	r3, r2
 80023c2:	d022      	beq.n	800240a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2204      	movs	r2, #4
 80023c8:	4013      	ands	r3, r2
 80023ca:	d01e      	beq.n	800240a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2205      	movs	r2, #5
 80023d2:	4252      	negs	r2, r2
 80023d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2202      	movs	r2, #2
 80023da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699a      	ldr	r2, [r3, #24]
 80023e2:	23c0      	movs	r3, #192	@ 0xc0
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4013      	ands	r3, r2
 80023e8:	d004      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	0018      	movs	r0, r3
 80023ee:	f000 f999 	bl	8002724 <HAL_TIM_IC_CaptureCallback>
 80023f2:	e007      	b.n	8002404 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	0018      	movs	r0, r3
 80023f8:	f000 f98c 	bl	8002714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	0018      	movs	r0, r3
 8002400:	f000 f998 	bl	8002734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2208      	movs	r2, #8
 800240e:	4013      	ands	r3, r2
 8002410:	d021      	beq.n	8002456 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2208      	movs	r2, #8
 8002416:	4013      	ands	r3, r2
 8002418:	d01d      	beq.n	8002456 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2209      	movs	r2, #9
 8002420:	4252      	negs	r2, r2
 8002422:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2204      	movs	r2, #4
 8002428:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	2203      	movs	r2, #3
 8002432:	4013      	ands	r3, r2
 8002434:	d004      	beq.n	8002440 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	0018      	movs	r0, r3
 800243a:	f000 f973 	bl	8002724 <HAL_TIM_IC_CaptureCallback>
 800243e:	e007      	b.n	8002450 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	0018      	movs	r0, r3
 8002444:	f000 f966 	bl	8002714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	0018      	movs	r0, r3
 800244c:	f000 f972 	bl	8002734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2210      	movs	r2, #16
 800245a:	4013      	ands	r3, r2
 800245c:	d022      	beq.n	80024a4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2210      	movs	r2, #16
 8002462:	4013      	ands	r3, r2
 8002464:	d01e      	beq.n	80024a4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2211      	movs	r2, #17
 800246c:	4252      	negs	r2, r2
 800246e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2208      	movs	r2, #8
 8002474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	23c0      	movs	r3, #192	@ 0xc0
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4013      	ands	r3, r2
 8002482:	d004      	beq.n	800248e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	0018      	movs	r0, r3
 8002488:	f000 f94c 	bl	8002724 <HAL_TIM_IC_CaptureCallback>
 800248c:	e007      	b.n	800249e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	0018      	movs	r0, r3
 8002492:	f000 f93f 	bl	8002714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	0018      	movs	r0, r3
 800249a:	f000 f94b 	bl	8002734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2201      	movs	r2, #1
 80024a8:	4013      	ands	r3, r2
 80024aa:	d00c      	beq.n	80024c6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2201      	movs	r2, #1
 80024b0:	4013      	ands	r3, r2
 80024b2:	d008      	beq.n	80024c6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2202      	movs	r2, #2
 80024ba:	4252      	negs	r2, r2
 80024bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f7fe fa2d 	bl	8000920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2280      	movs	r2, #128	@ 0x80
 80024ca:	4013      	ands	r3, r2
 80024cc:	d104      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	2380      	movs	r3, #128	@ 0x80
 80024d2:	019b      	lsls	r3, r3, #6
 80024d4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80024d6:	d00b      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2280      	movs	r2, #128	@ 0x80
 80024dc:	4013      	ands	r3, r2
 80024de:	d007      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002560 <HAL_TIM_IRQHandler+0x208>)
 80024e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 fad2 	bl	8002a94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	2380      	movs	r3, #128	@ 0x80
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4013      	ands	r3, r2
 80024f8:	d00b      	beq.n	8002512 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2280      	movs	r2, #128	@ 0x80
 80024fe:	4013      	ands	r3, r2
 8002500:	d007      	beq.n	8002512 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a17      	ldr	r2, [pc, #92]	@ (8002564 <HAL_TIM_IRQHandler+0x20c>)
 8002508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	0018      	movs	r0, r3
 800250e:	f000 fac9 	bl	8002aa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2240      	movs	r2, #64	@ 0x40
 8002516:	4013      	ands	r3, r2
 8002518:	d00c      	beq.n	8002534 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2240      	movs	r2, #64	@ 0x40
 800251e:	4013      	ands	r3, r2
 8002520:	d008      	beq.n	8002534 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2241      	movs	r2, #65	@ 0x41
 8002528:	4252      	negs	r2, r2
 800252a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	0018      	movs	r0, r3
 8002530:	f000 f908 	bl	8002744 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2220      	movs	r2, #32
 8002538:	4013      	ands	r3, r2
 800253a:	d00c      	beq.n	8002556 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	4013      	ands	r3, r2
 8002542:	d008      	beq.n	8002556 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2221      	movs	r2, #33	@ 0x21
 800254a:	4252      	negs	r2, r2
 800254c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	0018      	movs	r0, r3
 8002552:	f000 fa97 	bl	8002a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002556:	46c0      	nop			@ (mov r8, r8)
 8002558:	46bd      	mov	sp, r7
 800255a:	b004      	add	sp, #16
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			@ (mov r8, r8)
 8002560:	ffffdf7f 	.word	0xffffdf7f
 8002564:	fffffeff 	.word	0xfffffeff

08002568 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002572:	230f      	movs	r3, #15
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	223c      	movs	r2, #60	@ 0x3c
 800257e:	5c9b      	ldrb	r3, [r3, r2]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_TIM_ConfigClockSource+0x20>
 8002584:	2302      	movs	r3, #2
 8002586:	e0bc      	b.n	8002702 <HAL_TIM_ConfigClockSource+0x19a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	223c      	movs	r2, #60	@ 0x3c
 800258c:	2101      	movs	r1, #1
 800258e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	223d      	movs	r2, #61	@ 0x3d
 8002594:	2102      	movs	r1, #2
 8002596:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4a5a      	ldr	r2, [pc, #360]	@ (800270c <HAL_TIM_ConfigClockSource+0x1a4>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4a59      	ldr	r2, [pc, #356]	@ (8002710 <HAL_TIM_ConfigClockSource+0x1a8>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2280      	movs	r2, #128	@ 0x80
 80025be:	0192      	lsls	r2, r2, #6
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d040      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0xde>
 80025c4:	2280      	movs	r2, #128	@ 0x80
 80025c6:	0192      	lsls	r2, r2, #6
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d900      	bls.n	80025ce <HAL_TIM_ConfigClockSource+0x66>
 80025cc:	e088      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x178>
 80025ce:	2280      	movs	r2, #128	@ 0x80
 80025d0:	0152      	lsls	r2, r2, #5
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d100      	bne.n	80025d8 <HAL_TIM_ConfigClockSource+0x70>
 80025d6:	e088      	b.n	80026ea <HAL_TIM_ConfigClockSource+0x182>
 80025d8:	2280      	movs	r2, #128	@ 0x80
 80025da:	0152      	lsls	r2, r2, #5
 80025dc:	4293      	cmp	r3, r2
 80025de:	d900      	bls.n	80025e2 <HAL_TIM_ConfigClockSource+0x7a>
 80025e0:	e07e      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x178>
 80025e2:	2b70      	cmp	r3, #112	@ 0x70
 80025e4:	d018      	beq.n	8002618 <HAL_TIM_ConfigClockSource+0xb0>
 80025e6:	d900      	bls.n	80025ea <HAL_TIM_ConfigClockSource+0x82>
 80025e8:	e07a      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x178>
 80025ea:	2b60      	cmp	r3, #96	@ 0x60
 80025ec:	d04f      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x126>
 80025ee:	d900      	bls.n	80025f2 <HAL_TIM_ConfigClockSource+0x8a>
 80025f0:	e076      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x178>
 80025f2:	2b50      	cmp	r3, #80	@ 0x50
 80025f4:	d03b      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x106>
 80025f6:	d900      	bls.n	80025fa <HAL_TIM_ConfigClockSource+0x92>
 80025f8:	e072      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x178>
 80025fa:	2b40      	cmp	r3, #64	@ 0x40
 80025fc:	d057      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0x146>
 80025fe:	d900      	bls.n	8002602 <HAL_TIM_ConfigClockSource+0x9a>
 8002600:	e06e      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x178>
 8002602:	2b30      	cmp	r3, #48	@ 0x30
 8002604:	d063      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x166>
 8002606:	d86b      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x178>
 8002608:	2b20      	cmp	r3, #32
 800260a:	d060      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x166>
 800260c:	d868      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x178>
 800260e:	2b00      	cmp	r3, #0
 8002610:	d05d      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x166>
 8002612:	2b10      	cmp	r3, #16
 8002614:	d05b      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x166>
 8002616:	e063      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002628:	f000 f99e 	bl	8002968 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2277      	movs	r2, #119	@ 0x77
 8002638:	4313      	orrs	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	609a      	str	r2, [r3, #8]
      break;
 8002644:	e052      	b.n	80026ec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002656:	f000 f987 	bl	8002968 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2180      	movs	r1, #128	@ 0x80
 8002666:	01c9      	lsls	r1, r1, #7
 8002668:	430a      	orrs	r2, r1
 800266a:	609a      	str	r2, [r3, #8]
      break;
 800266c:	e03e      	b.n	80026ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800267a:	001a      	movs	r2, r3
 800267c:	f000 f8f8 	bl	8002870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2150      	movs	r1, #80	@ 0x50
 8002686:	0018      	movs	r0, r3
 8002688:	f000 f952 	bl	8002930 <TIM_ITRx_SetConfig>
      break;
 800268c:	e02e      	b.n	80026ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800269a:	001a      	movs	r2, r3
 800269c:	f000 f916 	bl	80028cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2160      	movs	r1, #96	@ 0x60
 80026a6:	0018      	movs	r0, r3
 80026a8:	f000 f942 	bl	8002930 <TIM_ITRx_SetConfig>
      break;
 80026ac:	e01e      	b.n	80026ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ba:	001a      	movs	r2, r3
 80026bc:	f000 f8d8 	bl	8002870 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2140      	movs	r1, #64	@ 0x40
 80026c6:	0018      	movs	r0, r3
 80026c8:	f000 f932 	bl	8002930 <TIM_ITRx_SetConfig>
      break;
 80026cc:	e00e      	b.n	80026ec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	0019      	movs	r1, r3
 80026d8:	0010      	movs	r0, r2
 80026da:	f000 f929 	bl	8002930 <TIM_ITRx_SetConfig>
      break;
 80026de:	e005      	b.n	80026ec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80026e0:	230f      	movs	r3, #15
 80026e2:	18fb      	adds	r3, r7, r3
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
      break;
 80026e8:	e000      	b.n	80026ec <HAL_TIM_ConfigClockSource+0x184>
      break;
 80026ea:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	223d      	movs	r2, #61	@ 0x3d
 80026f0:	2101      	movs	r1, #1
 80026f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	223c      	movs	r2, #60	@ 0x3c
 80026f8:	2100      	movs	r1, #0
 80026fa:	5499      	strb	r1, [r3, r2]

  return status;
 80026fc:	230f      	movs	r3, #15
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	781b      	ldrb	r3, [r3, #0]
}
 8002702:	0018      	movs	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	b004      	add	sp, #16
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			@ (mov r8, r8)
 800270c:	ffceff88 	.word	0xffceff88
 8002710:	ffff00ff 	.word	0xffff00ff

08002714 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800271c:	46c0      	nop			@ (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	b002      	add	sp, #8
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800272c:	46c0      	nop			@ (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	b002      	add	sp, #8
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800273c:	46c0      	nop			@ (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800274c:	46c0      	nop			@ (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	b002      	add	sp, #8
 8002752:	bd80      	pop	{r7, pc}

08002754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3b      	ldr	r2, [pc, #236]	@ (8002854 <TIM_Base_SetConfig+0x100>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d008      	beq.n	800277e <TIM_Base_SetConfig+0x2a>
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	2380      	movs	r3, #128	@ 0x80
 8002770:	05db      	lsls	r3, r3, #23
 8002772:	429a      	cmp	r2, r3
 8002774:	d003      	beq.n	800277e <TIM_Base_SetConfig+0x2a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a37      	ldr	r2, [pc, #220]	@ (8002858 <TIM_Base_SetConfig+0x104>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d108      	bne.n	8002790 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2270      	movs	r2, #112	@ 0x70
 8002782:	4393      	bics	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a30      	ldr	r2, [pc, #192]	@ (8002854 <TIM_Base_SetConfig+0x100>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d018      	beq.n	80027ca <TIM_Base_SetConfig+0x76>
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	2380      	movs	r3, #128	@ 0x80
 800279c:	05db      	lsls	r3, r3, #23
 800279e:	429a      	cmp	r2, r3
 80027a0:	d013      	beq.n	80027ca <TIM_Base_SetConfig+0x76>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002858 <TIM_Base_SetConfig+0x104>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00f      	beq.n	80027ca <TIM_Base_SetConfig+0x76>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a2b      	ldr	r2, [pc, #172]	@ (800285c <TIM_Base_SetConfig+0x108>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00b      	beq.n	80027ca <TIM_Base_SetConfig+0x76>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002860 <TIM_Base_SetConfig+0x10c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d007      	beq.n	80027ca <TIM_Base_SetConfig+0x76>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a29      	ldr	r2, [pc, #164]	@ (8002864 <TIM_Base_SetConfig+0x110>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d003      	beq.n	80027ca <TIM_Base_SetConfig+0x76>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a28      	ldr	r2, [pc, #160]	@ (8002868 <TIM_Base_SetConfig+0x114>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d108      	bne.n	80027dc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4a27      	ldr	r2, [pc, #156]	@ (800286c <TIM_Base_SetConfig+0x118>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2280      	movs	r2, #128	@ 0x80
 80027e0:	4393      	bics	r3, r2
 80027e2:	001a      	movs	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a13      	ldr	r2, [pc, #76]	@ (8002854 <TIM_Base_SetConfig+0x100>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00b      	beq.n	8002822 <TIM_Base_SetConfig+0xce>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a14      	ldr	r2, [pc, #80]	@ (8002860 <TIM_Base_SetConfig+0x10c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d007      	beq.n	8002822 <TIM_Base_SetConfig+0xce>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a13      	ldr	r2, [pc, #76]	@ (8002864 <TIM_Base_SetConfig+0x110>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d003      	beq.n	8002822 <TIM_Base_SetConfig+0xce>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a12      	ldr	r2, [pc, #72]	@ (8002868 <TIM_Base_SetConfig+0x114>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d103      	bne.n	800282a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2201      	movs	r2, #1
 8002836:	4013      	ands	r3, r2
 8002838:	2b01      	cmp	r3, #1
 800283a:	d106      	bne.n	800284a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	2201      	movs	r2, #1
 8002842:	4393      	bics	r3, r2
 8002844:	001a      	movs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	611a      	str	r2, [r3, #16]
  }
}
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	46bd      	mov	sp, r7
 800284e:	b004      	add	sp, #16
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			@ (mov r8, r8)
 8002854:	40012c00 	.word	0x40012c00
 8002858:	40000400 	.word	0x40000400
 800285c:	40002000 	.word	0x40002000
 8002860:	40014000 	.word	0x40014000
 8002864:	40014400 	.word	0x40014400
 8002868:	40014800 	.word	0x40014800
 800286c:	fffffcff 	.word	0xfffffcff

08002870 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	2201      	movs	r2, #1
 8002888:	4393      	bics	r3, r2
 800288a:	001a      	movs	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	22f0      	movs	r2, #240	@ 0xf0
 800289a:	4393      	bics	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	220a      	movs	r2, #10
 80028ac:	4393      	bics	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	621a      	str	r2, [r3, #32]
}
 80028c4:	46c0      	nop			@ (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b006      	add	sp, #24
 80028ca:	bd80      	pop	{r7, pc}

080028cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	2210      	movs	r2, #16
 80028e4:	4393      	bics	r3, r2
 80028e6:	001a      	movs	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4a0d      	ldr	r2, [pc, #52]	@ (800292c <TIM_TI2_ConfigInputStage+0x60>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	031b      	lsls	r3, r3, #12
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	22a0      	movs	r2, #160	@ 0xa0
 8002908:	4393      	bics	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4313      	orrs	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	621a      	str	r2, [r3, #32]
}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	b006      	add	sp, #24
 8002928:	bd80      	pop	{r7, pc}
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	ffff0fff 	.word	0xffff0fff

08002930 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4a08      	ldr	r2, [pc, #32]	@ (8002964 <TIM_ITRx_SetConfig+0x34>)
 8002944:	4013      	ands	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	2207      	movs	r2, #7
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	609a      	str	r2, [r3, #8]
}
 800295a:	46c0      	nop			@ (mov r8, r8)
 800295c:	46bd      	mov	sp, r7
 800295e:	b004      	add	sp, #16
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	ffcfff8f 	.word	0xffcfff8f

08002968 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	4a09      	ldr	r2, [pc, #36]	@ (80029a4 <TIM_ETR_SetConfig+0x3c>)
 8002980:	4013      	ands	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	021a      	lsls	r2, r3, #8
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	431a      	orrs	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4313      	orrs	r3, r2
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	609a      	str	r2, [r3, #8]
}
 800299c:	46c0      	nop			@ (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	b006      	add	sp, #24
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	ffff00ff 	.word	0xffff00ff

080029a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	223c      	movs	r2, #60	@ 0x3c
 80029b6:	5c9b      	ldrb	r3, [r3, r2]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029bc:	2302      	movs	r3, #2
 80029be:	e055      	b.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	223c      	movs	r2, #60	@ 0x3c
 80029c4:	2101      	movs	r1, #1
 80029c6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	223d      	movs	r2, #61	@ 0x3d
 80029cc:	2102      	movs	r1, #2
 80029ce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a23      	ldr	r2, [pc, #140]	@ (8002a74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d108      	bne.n	80029fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4a22      	ldr	r2, [pc, #136]	@ (8002a78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2270      	movs	r2, #112	@ 0x70
 8002a00:	4393      	bics	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a16      	ldr	r2, [pc, #88]	@ (8002a74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00f      	beq.n	8002a40 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	2380      	movs	r3, #128	@ 0x80
 8002a26:	05db      	lsls	r3, r3, #23
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d009      	beq.n	8002a40 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a12      	ldr	r2, [pc, #72]	@ (8002a7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d004      	beq.n	8002a40 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a11      	ldr	r2, [pc, #68]	@ (8002a80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d10c      	bne.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2280      	movs	r2, #128	@ 0x80
 8002a44:	4393      	bics	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	223d      	movs	r2, #61	@ 0x3d
 8002a5e:	2101      	movs	r1, #1
 8002a60:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	223c      	movs	r2, #60	@ 0x3c
 8002a66:	2100      	movs	r1, #0
 8002a68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b004      	add	sp, #16
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40012c00 	.word	0x40012c00
 8002a78:	ff0fffff 	.word	0xff0fffff
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40014000 	.word	0x40014000

08002a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a8c:	46c0      	nop			@ (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b002      	add	sp, #8
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a9c:	46c0      	nop			@ (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b002      	add	sp, #8
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002aac:	46c0      	nop			@ (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b002      	add	sp, #8
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e046      	b.n	8002b54 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2288      	movs	r2, #136	@ 0x88
 8002aca:	589b      	ldr	r3, [r3, r2]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d107      	bne.n	8002ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2284      	movs	r2, #132	@ 0x84
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	0018      	movs	r0, r3
 8002adc:	f7fd ffcc 	bl	8000a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2288      	movs	r2, #136	@ 0x88
 8002ae4:	2124      	movs	r1, #36	@ 0x24
 8002ae6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2101      	movs	r1, #1
 8002af4:	438a      	bics	r2, r1
 8002af6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 fed0 	bl	80038a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 fc0e 	bl	800332c <UART_SetConfig>
 8002b10:	0003      	movs	r3, r0
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e01c      	b.n	8002b54 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	490d      	ldr	r1, [pc, #52]	@ (8002b5c <HAL_UART_Init+0xa8>)
 8002b26:	400a      	ands	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	212a      	movs	r1, #42	@ 0x2a
 8002b36:	438a      	bics	r2, r1
 8002b38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2101      	movs	r1, #1
 8002b46:	430a      	orrs	r2, r1
 8002b48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 ff5f 	bl	8003a10 <UART_CheckIdleState>
 8002b52:	0003      	movs	r3, r0
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b002      	add	sp, #8
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	ffffb7ff 	.word	0xffffb7ff

08002b60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	@ 0x28
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	1dbb      	adds	r3, r7, #6
 8002b6e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2288      	movs	r2, #136	@ 0x88
 8002b74:	589b      	ldr	r3, [r3, r2]
 8002b76:	2b20      	cmp	r3, #32
 8002b78:	d000      	beq.n	8002b7c <HAL_UART_Transmit+0x1c>
 8002b7a:	e090      	b.n	8002c9e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_UART_Transmit+0x2a>
 8002b82:	1dbb      	adds	r3, r7, #6
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e088      	b.n	8002ca0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	2380      	movs	r3, #128	@ 0x80
 8002b94:	015b      	lsls	r3, r3, #5
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d109      	bne.n	8002bae <HAL_UART_Transmit+0x4e>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d105      	bne.n	8002bae <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d001      	beq.n	8002bae <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e078      	b.n	8002ca0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2290      	movs	r2, #144	@ 0x90
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2288      	movs	r2, #136	@ 0x88
 8002bba:	2121      	movs	r1, #33	@ 0x21
 8002bbc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bbe:	f7fe f8ab 	bl	8000d18 <HAL_GetTick>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1dba      	adds	r2, r7, #6
 8002bca:	2154      	movs	r1, #84	@ 0x54
 8002bcc:	8812      	ldrh	r2, [r2, #0]
 8002bce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1dba      	adds	r2, r7, #6
 8002bd4:	2156      	movs	r1, #86	@ 0x56
 8002bd6:	8812      	ldrh	r2, [r2, #0]
 8002bd8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	2380      	movs	r3, #128	@ 0x80
 8002be0:	015b      	lsls	r3, r3, #5
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d108      	bne.n	8002bf8 <HAL_UART_Transmit+0x98>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d104      	bne.n	8002bf8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	e003      	b.n	8002c00 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c00:	e030      	b.n	8002c64 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	0013      	movs	r3, r2
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2180      	movs	r1, #128	@ 0x80
 8002c10:	f000 ffa8 	bl	8003b64 <UART_WaitOnFlagUntilTimeout>
 8002c14:	1e03      	subs	r3, r0, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2288      	movs	r2, #136	@ 0x88
 8002c1c:	2120      	movs	r1, #32
 8002c1e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e03d      	b.n	8002ca0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10b      	bne.n	8002c42 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	001a      	movs	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	05d2      	lsls	r2, r2, #23
 8002c36:	0dd2      	lsrs	r2, r2, #23
 8002c38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	3302      	adds	r3, #2
 8002c3e:	61bb      	str	r3, [r7, #24]
 8002c40:	e007      	b.n	8002c52 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	781a      	ldrb	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2256      	movs	r2, #86	@ 0x56
 8002c56:	5a9b      	ldrh	r3, [r3, r2]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b299      	uxth	r1, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2256      	movs	r2, #86	@ 0x56
 8002c62:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2256      	movs	r2, #86	@ 0x56
 8002c68:	5a9b      	ldrh	r3, [r3, r2]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1c8      	bne.n	8002c02 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	0013      	movs	r3, r2
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2140      	movs	r1, #64	@ 0x40
 8002c7e:	f000 ff71 	bl	8003b64 <UART_WaitOnFlagUntilTimeout>
 8002c82:	1e03      	subs	r3, r0, #0
 8002c84:	d005      	beq.n	8002c92 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2288      	movs	r2, #136	@ 0x88
 8002c8a:	2120      	movs	r1, #32
 8002c8c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e006      	b.n	8002ca0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2288      	movs	r2, #136	@ 0x88
 8002c96:	2120      	movs	r1, #32
 8002c98:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e000      	b.n	8002ca0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
  }
}
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b008      	add	sp, #32
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ca8:	b5b0      	push	{r4, r5, r7, lr}
 8002caa:	b0aa      	sub	sp, #168	@ 0xa8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	22a4      	movs	r2, #164	@ 0xa4
 8002cb8:	18b9      	adds	r1, r7, r2
 8002cba:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	20a0      	movs	r0, #160	@ 0xa0
 8002cc4:	1839      	adds	r1, r7, r0
 8002cc6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	249c      	movs	r4, #156	@ 0x9c
 8002cd0:	1939      	adds	r1, r7, r4
 8002cd2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002cd4:	0011      	movs	r1, r2
 8002cd6:	18bb      	adds	r3, r7, r2
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4aa2      	ldr	r2, [pc, #648]	@ (8002f64 <HAL_UART_IRQHandler+0x2bc>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2298      	movs	r2, #152	@ 0x98
 8002ce0:	18bd      	adds	r5, r7, r2
 8002ce2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002ce4:	18bb      	adds	r3, r7, r2
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d11a      	bne.n	8002d22 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002cec:	187b      	adds	r3, r7, r1
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d015      	beq.n	8002d22 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002cf6:	183b      	adds	r3, r7, r0
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d105      	bne.n	8002d0c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002d00:	193b      	adds	r3, r7, r4
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	2380      	movs	r3, #128	@ 0x80
 8002d06:	055b      	lsls	r3, r3, #21
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d00a      	beq.n	8002d22 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d100      	bne.n	8002d16 <HAL_UART_IRQHandler+0x6e>
 8002d14:	e2dc      	b.n	80032d0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	0010      	movs	r0, r2
 8002d1e:	4798      	blx	r3
      }
      return;
 8002d20:	e2d6      	b.n	80032d0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d22:	2398      	movs	r3, #152	@ 0x98
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d100      	bne.n	8002d2e <HAL_UART_IRQHandler+0x86>
 8002d2c:	e122      	b.n	8002f74 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002d2e:	239c      	movs	r3, #156	@ 0x9c
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a8c      	ldr	r2, [pc, #560]	@ (8002f68 <HAL_UART_IRQHandler+0x2c0>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	d106      	bne.n	8002d48 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002d3a:	23a0      	movs	r3, #160	@ 0xa0
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a8a      	ldr	r2, [pc, #552]	@ (8002f6c <HAL_UART_IRQHandler+0x2c4>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	d100      	bne.n	8002d48 <HAL_UART_IRQHandler+0xa0>
 8002d46:	e115      	b.n	8002f74 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d48:	23a4      	movs	r3, #164	@ 0xa4
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4013      	ands	r3, r2
 8002d52:	d012      	beq.n	8002d7a <HAL_UART_IRQHandler+0xd2>
 8002d54:	23a0      	movs	r3, #160	@ 0xa0
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	2380      	movs	r3, #128	@ 0x80
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d00b      	beq.n	8002d7a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2201      	movs	r2, #1
 8002d68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2290      	movs	r2, #144	@ 0x90
 8002d6e:	589b      	ldr	r3, [r3, r2]
 8002d70:	2201      	movs	r2, #1
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2190      	movs	r1, #144	@ 0x90
 8002d78:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d7a:	23a4      	movs	r3, #164	@ 0xa4
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2202      	movs	r2, #2
 8002d82:	4013      	ands	r3, r2
 8002d84:	d011      	beq.n	8002daa <HAL_UART_IRQHandler+0x102>
 8002d86:	239c      	movs	r3, #156	@ 0x9c
 8002d88:	18fb      	adds	r3, r7, r3
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d00b      	beq.n	8002daa <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2202      	movs	r2, #2
 8002d98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2290      	movs	r2, #144	@ 0x90
 8002d9e:	589b      	ldr	r3, [r3, r2]
 8002da0:	2204      	movs	r2, #4
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2190      	movs	r1, #144	@ 0x90
 8002da8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002daa:	23a4      	movs	r3, #164	@ 0xa4
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2204      	movs	r2, #4
 8002db2:	4013      	ands	r3, r2
 8002db4:	d011      	beq.n	8002dda <HAL_UART_IRQHandler+0x132>
 8002db6:	239c      	movs	r3, #156	@ 0x9c
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d00b      	beq.n	8002dda <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2290      	movs	r2, #144	@ 0x90
 8002dce:	589b      	ldr	r3, [r3, r2]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2190      	movs	r1, #144	@ 0x90
 8002dd8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002dda:	23a4      	movs	r3, #164	@ 0xa4
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2208      	movs	r2, #8
 8002de2:	4013      	ands	r3, r2
 8002de4:	d017      	beq.n	8002e16 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002de6:	23a0      	movs	r3, #160	@ 0xa0
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2220      	movs	r2, #32
 8002dee:	4013      	ands	r3, r2
 8002df0:	d105      	bne.n	8002dfe <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002df2:	239c      	movs	r3, #156	@ 0x9c
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a5b      	ldr	r2, [pc, #364]	@ (8002f68 <HAL_UART_IRQHandler+0x2c0>)
 8002dfa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002dfc:	d00b      	beq.n	8002e16 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2208      	movs	r2, #8
 8002e04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2290      	movs	r2, #144	@ 0x90
 8002e0a:	589b      	ldr	r3, [r3, r2]
 8002e0c:	2208      	movs	r2, #8
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2190      	movs	r1, #144	@ 0x90
 8002e14:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e16:	23a4      	movs	r3, #164	@ 0xa4
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	2380      	movs	r3, #128	@ 0x80
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	4013      	ands	r3, r2
 8002e22:	d013      	beq.n	8002e4c <HAL_UART_IRQHandler+0x1a4>
 8002e24:	23a0      	movs	r3, #160	@ 0xa0
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	2380      	movs	r3, #128	@ 0x80
 8002e2c:	04db      	lsls	r3, r3, #19
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d00c      	beq.n	8002e4c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2280      	movs	r2, #128	@ 0x80
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2290      	movs	r2, #144	@ 0x90
 8002e40:	589b      	ldr	r3, [r3, r2]
 8002e42:	2220      	movs	r2, #32
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2190      	movs	r1, #144	@ 0x90
 8002e4a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2290      	movs	r2, #144	@ 0x90
 8002e50:	589b      	ldr	r3, [r3, r2]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d100      	bne.n	8002e58 <HAL_UART_IRQHandler+0x1b0>
 8002e56:	e23d      	b.n	80032d4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e58:	23a4      	movs	r3, #164	@ 0xa4
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	4013      	ands	r3, r2
 8002e62:	d015      	beq.n	8002e90 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002e64:	23a0      	movs	r3, #160	@ 0xa0
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d106      	bne.n	8002e7e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002e70:	239c      	movs	r3, #156	@ 0x9c
 8002e72:	18fb      	adds	r3, r7, r3
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	2380      	movs	r3, #128	@ 0x80
 8002e78:	055b      	lsls	r3, r3, #21
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d008      	beq.n	8002e90 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d004      	beq.n	8002e90 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	0010      	movs	r0, r2
 8002e8e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2290      	movs	r2, #144	@ 0x90
 8002e94:	589b      	ldr	r3, [r3, r2]
 8002e96:	2194      	movs	r1, #148	@ 0x94
 8002e98:	187a      	adds	r2, r7, r1
 8002e9a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2240      	movs	r2, #64	@ 0x40
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b40      	cmp	r3, #64	@ 0x40
 8002ea8:	d004      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002eaa:	187b      	adds	r3, r7, r1
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2228      	movs	r2, #40	@ 0x28
 8002eb0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002eb2:	d04c      	beq.n	8002f4e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f000 fec4 	bl	8003c44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2240      	movs	r2, #64	@ 0x40
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b40      	cmp	r3, #64	@ 0x40
 8002ec8:	d13c      	bne.n	8002f44 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eca:	f3ef 8310 	mrs	r3, PRIMASK
 8002ece:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002ed0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ed2:	2090      	movs	r0, #144	@ 0x90
 8002ed4:	183a      	adds	r2, r7, r0
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	2301      	movs	r3, #1
 8002eda:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002edc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ede:	f383 8810 	msr	PRIMASK, r3
}
 8002ee2:	46c0      	nop			@ (mov r8, r8)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2140      	movs	r1, #64	@ 0x40
 8002ef0:	438a      	bics	r2, r1
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	183b      	adds	r3, r7, r0
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002efc:	f383 8810 	msr	PRIMASK, r3
}
 8002f00:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2280      	movs	r2, #128	@ 0x80
 8002f06:	589b      	ldr	r3, [r3, r2]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d016      	beq.n	8002f3a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2280      	movs	r2, #128	@ 0x80
 8002f10:	589b      	ldr	r3, [r3, r2]
 8002f12:	4a17      	ldr	r2, [pc, #92]	@ (8002f70 <HAL_UART_IRQHandler+0x2c8>)
 8002f14:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2280      	movs	r2, #128	@ 0x80
 8002f1a:	589b      	ldr	r3, [r3, r2]
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f7fe f87f 	bl	8001020 <HAL_DMA_Abort_IT>
 8002f22:	1e03      	subs	r3, r0, #0
 8002f24:	d01c      	beq.n	8002f60 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2280      	movs	r2, #128	@ 0x80
 8002f2a:	589b      	ldr	r3, [r3, r2]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	2180      	movs	r1, #128	@ 0x80
 8002f32:	5852      	ldr	r2, [r2, r1]
 8002f34:	0010      	movs	r0, r2
 8002f36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	e012      	b.n	8002f60 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f000 f9e1 	bl	8003304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f42:	e00d      	b.n	8002f60 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	0018      	movs	r0, r3
 8002f48:	f000 f9dc 	bl	8003304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f4c:	e008      	b.n	8002f60 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	0018      	movs	r0, r3
 8002f52:	f000 f9d7 	bl	8003304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2290      	movs	r2, #144	@ 0x90
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002f5e:	e1b9      	b.n	80032d4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f60:	46c0      	nop			@ (mov r8, r8)
    return;
 8002f62:	e1b7      	b.n	80032d4 <HAL_UART_IRQHandler+0x62c>
 8002f64:	0000080f 	.word	0x0000080f
 8002f68:	10000001 	.word	0x10000001
 8002f6c:	04000120 	.word	0x04000120
 8002f70:	08003d11 	.word	0x08003d11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d000      	beq.n	8002f7e <HAL_UART_IRQHandler+0x2d6>
 8002f7c:	e13e      	b.n	80031fc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f7e:	23a4      	movs	r3, #164	@ 0xa4
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2210      	movs	r2, #16
 8002f86:	4013      	ands	r3, r2
 8002f88:	d100      	bne.n	8002f8c <HAL_UART_IRQHandler+0x2e4>
 8002f8a:	e137      	b.n	80031fc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f8c:	23a0      	movs	r3, #160	@ 0xa0
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2210      	movs	r2, #16
 8002f94:	4013      	ands	r3, r2
 8002f96:	d100      	bne.n	8002f9a <HAL_UART_IRQHandler+0x2f2>
 8002f98:	e130      	b.n	80031fc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2240      	movs	r2, #64	@ 0x40
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b40      	cmp	r3, #64	@ 0x40
 8002fae:	d000      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x30a>
 8002fb0:	e0a4      	b.n	80030fc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2280      	movs	r2, #128	@ 0x80
 8002fb6:	589b      	ldr	r3, [r3, r2]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	217e      	movs	r1, #126	@ 0x7e
 8002fbe:	187b      	adds	r3, r7, r1
 8002fc0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002fc2:	187b      	adds	r3, r7, r1
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d100      	bne.n	8002fcc <HAL_UART_IRQHandler+0x324>
 8002fca:	e185      	b.n	80032d8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	225c      	movs	r2, #92	@ 0x5c
 8002fd0:	5a9b      	ldrh	r3, [r3, r2]
 8002fd2:	187a      	adds	r2, r7, r1
 8002fd4:	8812      	ldrh	r2, [r2, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d300      	bcc.n	8002fdc <HAL_UART_IRQHandler+0x334>
 8002fda:	e17d      	b.n	80032d8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	187a      	adds	r2, r7, r1
 8002fe0:	215e      	movs	r1, #94	@ 0x5e
 8002fe2:	8812      	ldrh	r2, [r2, #0]
 8002fe4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2280      	movs	r2, #128	@ 0x80
 8002fea:	589b      	ldr	r3, [r3, r2]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d170      	bne.n	80030d8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8002ffa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ffe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003000:	2301      	movs	r3, #1
 8003002:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003006:	f383 8810 	msr	PRIMASK, r3
}
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	49b4      	ldr	r1, [pc, #720]	@ (80032e8 <HAL_UART_IRQHandler+0x640>)
 8003018:	400a      	ands	r2, r1
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800301e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003022:	f383 8810 	msr	PRIMASK, r3
}
 8003026:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003028:	f3ef 8310 	mrs	r3, PRIMASK
 800302c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800302e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003030:	677b      	str	r3, [r7, #116]	@ 0x74
 8003032:	2301      	movs	r3, #1
 8003034:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003038:	f383 8810 	msr	PRIMASK, r3
}
 800303c:	46c0      	nop			@ (mov r8, r8)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2101      	movs	r1, #1
 800304a:	438a      	bics	r2, r1
 800304c:	609a      	str	r2, [r3, #8]
 800304e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003050:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003054:	f383 8810 	msr	PRIMASK, r3
}
 8003058:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800305a:	f3ef 8310 	mrs	r3, PRIMASK
 800305e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003060:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003062:	673b      	str	r3, [r7, #112]	@ 0x70
 8003064:	2301      	movs	r3, #1
 8003066:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003068:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800306a:	f383 8810 	msr	PRIMASK, r3
}
 800306e:	46c0      	nop			@ (mov r8, r8)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	438a      	bics	r2, r1
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003082:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003086:	f383 8810 	msr	PRIMASK, r3
}
 800308a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	228c      	movs	r2, #140	@ 0x8c
 8003090:	2120      	movs	r1, #32
 8003092:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800309a:	f3ef 8310 	mrs	r3, PRIMASK
 800309e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80030a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030a4:	2301      	movs	r3, #1
 80030a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030aa:	f383 8810 	msr	PRIMASK, r3
}
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2110      	movs	r1, #16
 80030bc:	438a      	bics	r2, r1
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030c6:	f383 8810 	msr	PRIMASK, r3
}
 80030ca:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2280      	movs	r2, #128	@ 0x80
 80030d0:	589b      	ldr	r3, [r3, r2]
 80030d2:	0018      	movs	r0, r3
 80030d4:	f7fd ff42 	bl	8000f5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	225c      	movs	r2, #92	@ 0x5c
 80030e2:	5a9a      	ldrh	r2, [r3, r2]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	215e      	movs	r1, #94	@ 0x5e
 80030e8:	5a5b      	ldrh	r3, [r3, r1]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	0011      	movs	r1, r2
 80030f4:	0018      	movs	r0, r3
 80030f6:	f000 f90d 	bl	8003314 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030fa:	e0ed      	b.n	80032d8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	225c      	movs	r2, #92	@ 0x5c
 8003100:	5a99      	ldrh	r1, [r3, r2]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	225e      	movs	r2, #94	@ 0x5e
 8003106:	5a9b      	ldrh	r3, [r3, r2]
 8003108:	b29a      	uxth	r2, r3
 800310a:	208e      	movs	r0, #142	@ 0x8e
 800310c:	183b      	adds	r3, r7, r0
 800310e:	1a8a      	subs	r2, r1, r2
 8003110:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	225e      	movs	r2, #94	@ 0x5e
 8003116:	5a9b      	ldrh	r3, [r3, r2]
 8003118:	b29b      	uxth	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d100      	bne.n	8003120 <HAL_UART_IRQHandler+0x478>
 800311e:	e0dd      	b.n	80032dc <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003120:	183b      	adds	r3, r7, r0
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d100      	bne.n	800312a <HAL_UART_IRQHandler+0x482>
 8003128:	e0d8      	b.n	80032dc <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800312a:	f3ef 8310 	mrs	r3, PRIMASK
 800312e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003130:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003132:	2488      	movs	r4, #136	@ 0x88
 8003134:	193a      	adds	r2, r7, r4
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	2301      	movs	r3, #1
 800313a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f383 8810 	msr	PRIMASK, r3
}
 8003142:	46c0      	nop			@ (mov r8, r8)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4967      	ldr	r1, [pc, #412]	@ (80032ec <HAL_UART_IRQHandler+0x644>)
 8003150:	400a      	ands	r2, r1
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	193b      	adds	r3, r7, r4
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f383 8810 	msr	PRIMASK, r3
}
 8003160:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003162:	f3ef 8310 	mrs	r3, PRIMASK
 8003166:	61bb      	str	r3, [r7, #24]
  return(result);
 8003168:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800316a:	2484      	movs	r4, #132	@ 0x84
 800316c:	193a      	adds	r2, r7, r4
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	2301      	movs	r3, #1
 8003172:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f383 8810 	msr	PRIMASK, r3
}
 800317a:	46c0      	nop			@ (mov r8, r8)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	495a      	ldr	r1, [pc, #360]	@ (80032f0 <HAL_UART_IRQHandler+0x648>)
 8003188:	400a      	ands	r2, r1
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	193b      	adds	r3, r7, r4
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	f383 8810 	msr	PRIMASK, r3
}
 8003198:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	228c      	movs	r2, #140	@ 0x8c
 800319e:	2120      	movs	r1, #32
 80031a0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ae:	f3ef 8310 	mrs	r3, PRIMASK
 80031b2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b6:	2480      	movs	r4, #128	@ 0x80
 80031b8:	193a      	adds	r2, r7, r4
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	2301      	movs	r3, #1
 80031be:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c2:	f383 8810 	msr	PRIMASK, r3
}
 80031c6:	46c0      	nop			@ (mov r8, r8)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2110      	movs	r1, #16
 80031d4:	438a      	bics	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	193b      	adds	r3, r7, r4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e0:	f383 8810 	msr	PRIMASK, r3
}
 80031e4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031ec:	183b      	adds	r3, r7, r0
 80031ee:	881a      	ldrh	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	0011      	movs	r1, r2
 80031f4:	0018      	movs	r0, r3
 80031f6:	f000 f88d 	bl	8003314 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031fa:	e06f      	b.n	80032dc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80031fc:	23a4      	movs	r3, #164	@ 0xa4
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	2380      	movs	r3, #128	@ 0x80
 8003204:	035b      	lsls	r3, r3, #13
 8003206:	4013      	ands	r3, r2
 8003208:	d010      	beq.n	800322c <HAL_UART_IRQHandler+0x584>
 800320a:	239c      	movs	r3, #156	@ 0x9c
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	2380      	movs	r3, #128	@ 0x80
 8003212:	03db      	lsls	r3, r3, #15
 8003214:	4013      	ands	r3, r2
 8003216:	d009      	beq.n	800322c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2280      	movs	r2, #128	@ 0x80
 800321e:	0352      	lsls	r2, r2, #13
 8003220:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	0018      	movs	r0, r3
 8003226:	f000 fdb6 	bl	8003d96 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800322a:	e05a      	b.n	80032e2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800322c:	23a4      	movs	r3, #164	@ 0xa4
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2280      	movs	r2, #128	@ 0x80
 8003234:	4013      	ands	r3, r2
 8003236:	d016      	beq.n	8003266 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003238:	23a0      	movs	r3, #160	@ 0xa0
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2280      	movs	r2, #128	@ 0x80
 8003240:	4013      	ands	r3, r2
 8003242:	d106      	bne.n	8003252 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003244:	239c      	movs	r3, #156	@ 0x9c
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	2380      	movs	r3, #128	@ 0x80
 800324c:	041b      	lsls	r3, r3, #16
 800324e:	4013      	ands	r3, r2
 8003250:	d009      	beq.n	8003266 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003256:	2b00      	cmp	r3, #0
 8003258:	d042      	beq.n	80032e0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	0010      	movs	r0, r2
 8003262:	4798      	blx	r3
    }
    return;
 8003264:	e03c      	b.n	80032e0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003266:	23a4      	movs	r3, #164	@ 0xa4
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2240      	movs	r2, #64	@ 0x40
 800326e:	4013      	ands	r3, r2
 8003270:	d00a      	beq.n	8003288 <HAL_UART_IRQHandler+0x5e0>
 8003272:	23a0      	movs	r3, #160	@ 0xa0
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2240      	movs	r2, #64	@ 0x40
 800327a:	4013      	ands	r3, r2
 800327c:	d004      	beq.n	8003288 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	0018      	movs	r0, r3
 8003282:	f000 fd5c 	bl	8003d3e <UART_EndTransmit_IT>
    return;
 8003286:	e02c      	b.n	80032e2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003288:	23a4      	movs	r3, #164	@ 0xa4
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	2380      	movs	r3, #128	@ 0x80
 8003290:	041b      	lsls	r3, r3, #16
 8003292:	4013      	ands	r3, r2
 8003294:	d00b      	beq.n	80032ae <HAL_UART_IRQHandler+0x606>
 8003296:	23a0      	movs	r3, #160	@ 0xa0
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	2380      	movs	r3, #128	@ 0x80
 800329e:	05db      	lsls	r3, r3, #23
 80032a0:	4013      	ands	r3, r2
 80032a2:	d004      	beq.n	80032ae <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	0018      	movs	r0, r3
 80032a8:	f000 fd85 	bl	8003db6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032ac:	e019      	b.n	80032e2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80032ae:	23a4      	movs	r3, #164	@ 0xa4
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	2380      	movs	r3, #128	@ 0x80
 80032b6:	045b      	lsls	r3, r3, #17
 80032b8:	4013      	ands	r3, r2
 80032ba:	d012      	beq.n	80032e2 <HAL_UART_IRQHandler+0x63a>
 80032bc:	23a0      	movs	r3, #160	@ 0xa0
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	da0d      	bge.n	80032e2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	0018      	movs	r0, r3
 80032ca:	f000 fd6c 	bl	8003da6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032ce:	e008      	b.n	80032e2 <HAL_UART_IRQHandler+0x63a>
      return;
 80032d0:	46c0      	nop			@ (mov r8, r8)
 80032d2:	e006      	b.n	80032e2 <HAL_UART_IRQHandler+0x63a>
    return;
 80032d4:	46c0      	nop			@ (mov r8, r8)
 80032d6:	e004      	b.n	80032e2 <HAL_UART_IRQHandler+0x63a>
      return;
 80032d8:	46c0      	nop			@ (mov r8, r8)
 80032da:	e002      	b.n	80032e2 <HAL_UART_IRQHandler+0x63a>
      return;
 80032dc:	46c0      	nop			@ (mov r8, r8)
 80032de:	e000      	b.n	80032e2 <HAL_UART_IRQHandler+0x63a>
    return;
 80032e0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b02a      	add	sp, #168	@ 0xa8
 80032e6:	bdb0      	pop	{r4, r5, r7, pc}
 80032e8:	fffffeff 	.word	0xfffffeff
 80032ec:	fffffedf 	.word	0xfffffedf
 80032f0:	effffffe 	.word	0xeffffffe

080032f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032fc:	46c0      	nop			@ (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800330c:	46c0      	nop			@ (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	b002      	add	sp, #8
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	000a      	movs	r2, r1
 800331e:	1cbb      	adds	r3, r7, #2
 8003320:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003322:	46c0      	nop			@ (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b002      	add	sp, #8
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800332c:	b5b0      	push	{r4, r5, r7, lr}
 800332e:	b090      	sub	sp, #64	@ 0x40
 8003330:	af00      	add	r7, sp, #0
 8003332:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003334:	231a      	movs	r3, #26
 8003336:	2220      	movs	r2, #32
 8003338:	189b      	adds	r3, r3, r2
 800333a:	19db      	adds	r3, r3, r7
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	431a      	orrs	r2, r3
 800334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	431a      	orrs	r2, r3
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	4313      	orrs	r3, r2
 8003356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4aaf      	ldr	r2, [pc, #700]	@ (800361c <UART_SetConfig+0x2f0>)
 8003360:	4013      	ands	r3, r2
 8003362:	0019      	movs	r1, r3
 8003364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800336a:	430b      	orrs	r3, r1
 800336c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800336e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	4aaa      	ldr	r2, [pc, #680]	@ (8003620 <UART_SetConfig+0x2f4>)
 8003376:	4013      	ands	r3, r2
 8003378:	0018      	movs	r0, r3
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	68d9      	ldr	r1, [r3, #12]
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	0003      	movs	r3, r0
 8003384:	430b      	orrs	r3, r1
 8003386:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4aa4      	ldr	r2, [pc, #656]	@ (8003624 <UART_SetConfig+0x2f8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d004      	beq.n	80033a2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800339e:	4313      	orrs	r3, r2
 80033a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4a9f      	ldr	r2, [pc, #636]	@ (8003628 <UART_SetConfig+0x2fc>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	0019      	movs	r1, r3
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033b4:	430b      	orrs	r3, r1
 80033b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80033b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033be:	220f      	movs	r2, #15
 80033c0:	4393      	bics	r3, r2
 80033c2:	0018      	movs	r0, r3
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80033c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	0003      	movs	r3, r0
 80033ce:	430b      	orrs	r3, r1
 80033d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a95      	ldr	r2, [pc, #596]	@ (800362c <UART_SetConfig+0x300>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d131      	bne.n	8003440 <UART_SetConfig+0x114>
 80033dc:	4b94      	ldr	r3, [pc, #592]	@ (8003630 <UART_SetConfig+0x304>)
 80033de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e0:	2203      	movs	r2, #3
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d01d      	beq.n	8003424 <UART_SetConfig+0xf8>
 80033e8:	d823      	bhi.n	8003432 <UART_SetConfig+0x106>
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d00c      	beq.n	8003408 <UART_SetConfig+0xdc>
 80033ee:	d820      	bhi.n	8003432 <UART_SetConfig+0x106>
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <UART_SetConfig+0xce>
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d00e      	beq.n	8003416 <UART_SetConfig+0xea>
 80033f8:	e01b      	b.n	8003432 <UART_SetConfig+0x106>
 80033fa:	231b      	movs	r3, #27
 80033fc:	2220      	movs	r2, #32
 80033fe:	189b      	adds	r3, r3, r2
 8003400:	19db      	adds	r3, r3, r7
 8003402:	2200      	movs	r2, #0
 8003404:	701a      	strb	r2, [r3, #0]
 8003406:	e0b4      	b.n	8003572 <UART_SetConfig+0x246>
 8003408:	231b      	movs	r3, #27
 800340a:	2220      	movs	r2, #32
 800340c:	189b      	adds	r3, r3, r2
 800340e:	19db      	adds	r3, r3, r7
 8003410:	2202      	movs	r2, #2
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e0ad      	b.n	8003572 <UART_SetConfig+0x246>
 8003416:	231b      	movs	r3, #27
 8003418:	2220      	movs	r2, #32
 800341a:	189b      	adds	r3, r3, r2
 800341c:	19db      	adds	r3, r3, r7
 800341e:	2204      	movs	r2, #4
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e0a6      	b.n	8003572 <UART_SetConfig+0x246>
 8003424:	231b      	movs	r3, #27
 8003426:	2220      	movs	r2, #32
 8003428:	189b      	adds	r3, r3, r2
 800342a:	19db      	adds	r3, r3, r7
 800342c:	2208      	movs	r2, #8
 800342e:	701a      	strb	r2, [r3, #0]
 8003430:	e09f      	b.n	8003572 <UART_SetConfig+0x246>
 8003432:	231b      	movs	r3, #27
 8003434:	2220      	movs	r2, #32
 8003436:	189b      	adds	r3, r3, r2
 8003438:	19db      	adds	r3, r3, r7
 800343a:	2210      	movs	r2, #16
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	e098      	b.n	8003572 <UART_SetConfig+0x246>
 8003440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a7b      	ldr	r2, [pc, #492]	@ (8003634 <UART_SetConfig+0x308>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d131      	bne.n	80034ae <UART_SetConfig+0x182>
 800344a:	4b79      	ldr	r3, [pc, #484]	@ (8003630 <UART_SetConfig+0x304>)
 800344c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344e:	220c      	movs	r2, #12
 8003450:	4013      	ands	r3, r2
 8003452:	2b0c      	cmp	r3, #12
 8003454:	d01d      	beq.n	8003492 <UART_SetConfig+0x166>
 8003456:	d823      	bhi.n	80034a0 <UART_SetConfig+0x174>
 8003458:	2b08      	cmp	r3, #8
 800345a:	d00c      	beq.n	8003476 <UART_SetConfig+0x14a>
 800345c:	d820      	bhi.n	80034a0 <UART_SetConfig+0x174>
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <UART_SetConfig+0x13c>
 8003462:	2b04      	cmp	r3, #4
 8003464:	d00e      	beq.n	8003484 <UART_SetConfig+0x158>
 8003466:	e01b      	b.n	80034a0 <UART_SetConfig+0x174>
 8003468:	231b      	movs	r3, #27
 800346a:	2220      	movs	r2, #32
 800346c:	189b      	adds	r3, r3, r2
 800346e:	19db      	adds	r3, r3, r7
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	e07d      	b.n	8003572 <UART_SetConfig+0x246>
 8003476:	231b      	movs	r3, #27
 8003478:	2220      	movs	r2, #32
 800347a:	189b      	adds	r3, r3, r2
 800347c:	19db      	adds	r3, r3, r7
 800347e:	2202      	movs	r2, #2
 8003480:	701a      	strb	r2, [r3, #0]
 8003482:	e076      	b.n	8003572 <UART_SetConfig+0x246>
 8003484:	231b      	movs	r3, #27
 8003486:	2220      	movs	r2, #32
 8003488:	189b      	adds	r3, r3, r2
 800348a:	19db      	adds	r3, r3, r7
 800348c:	2204      	movs	r2, #4
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	e06f      	b.n	8003572 <UART_SetConfig+0x246>
 8003492:	231b      	movs	r3, #27
 8003494:	2220      	movs	r2, #32
 8003496:	189b      	adds	r3, r3, r2
 8003498:	19db      	adds	r3, r3, r7
 800349a:	2208      	movs	r2, #8
 800349c:	701a      	strb	r2, [r3, #0]
 800349e:	e068      	b.n	8003572 <UART_SetConfig+0x246>
 80034a0:	231b      	movs	r3, #27
 80034a2:	2220      	movs	r2, #32
 80034a4:	189b      	adds	r3, r3, r2
 80034a6:	19db      	adds	r3, r3, r7
 80034a8:	2210      	movs	r2, #16
 80034aa:	701a      	strb	r2, [r3, #0]
 80034ac:	e061      	b.n	8003572 <UART_SetConfig+0x246>
 80034ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a61      	ldr	r2, [pc, #388]	@ (8003638 <UART_SetConfig+0x30c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d106      	bne.n	80034c6 <UART_SetConfig+0x19a>
 80034b8:	231b      	movs	r3, #27
 80034ba:	2220      	movs	r2, #32
 80034bc:	189b      	adds	r3, r3, r2
 80034be:	19db      	adds	r3, r3, r7
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]
 80034c4:	e055      	b.n	8003572 <UART_SetConfig+0x246>
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a5c      	ldr	r2, [pc, #368]	@ (800363c <UART_SetConfig+0x310>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d106      	bne.n	80034de <UART_SetConfig+0x1b2>
 80034d0:	231b      	movs	r3, #27
 80034d2:	2220      	movs	r2, #32
 80034d4:	189b      	adds	r3, r3, r2
 80034d6:	19db      	adds	r3, r3, r7
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	e049      	b.n	8003572 <UART_SetConfig+0x246>
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a50      	ldr	r2, [pc, #320]	@ (8003624 <UART_SetConfig+0x2f8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d13e      	bne.n	8003566 <UART_SetConfig+0x23a>
 80034e8:	4b51      	ldr	r3, [pc, #324]	@ (8003630 <UART_SetConfig+0x304>)
 80034ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034ec:	23c0      	movs	r3, #192	@ 0xc0
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	4013      	ands	r3, r2
 80034f2:	22c0      	movs	r2, #192	@ 0xc0
 80034f4:	0112      	lsls	r2, r2, #4
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d027      	beq.n	800354a <UART_SetConfig+0x21e>
 80034fa:	22c0      	movs	r2, #192	@ 0xc0
 80034fc:	0112      	lsls	r2, r2, #4
 80034fe:	4293      	cmp	r3, r2
 8003500:	d82a      	bhi.n	8003558 <UART_SetConfig+0x22c>
 8003502:	2280      	movs	r2, #128	@ 0x80
 8003504:	0112      	lsls	r2, r2, #4
 8003506:	4293      	cmp	r3, r2
 8003508:	d011      	beq.n	800352e <UART_SetConfig+0x202>
 800350a:	2280      	movs	r2, #128	@ 0x80
 800350c:	0112      	lsls	r2, r2, #4
 800350e:	4293      	cmp	r3, r2
 8003510:	d822      	bhi.n	8003558 <UART_SetConfig+0x22c>
 8003512:	2b00      	cmp	r3, #0
 8003514:	d004      	beq.n	8003520 <UART_SetConfig+0x1f4>
 8003516:	2280      	movs	r2, #128	@ 0x80
 8003518:	00d2      	lsls	r2, r2, #3
 800351a:	4293      	cmp	r3, r2
 800351c:	d00e      	beq.n	800353c <UART_SetConfig+0x210>
 800351e:	e01b      	b.n	8003558 <UART_SetConfig+0x22c>
 8003520:	231b      	movs	r3, #27
 8003522:	2220      	movs	r2, #32
 8003524:	189b      	adds	r3, r3, r2
 8003526:	19db      	adds	r3, r3, r7
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	e021      	b.n	8003572 <UART_SetConfig+0x246>
 800352e:	231b      	movs	r3, #27
 8003530:	2220      	movs	r2, #32
 8003532:	189b      	adds	r3, r3, r2
 8003534:	19db      	adds	r3, r3, r7
 8003536:	2202      	movs	r2, #2
 8003538:	701a      	strb	r2, [r3, #0]
 800353a:	e01a      	b.n	8003572 <UART_SetConfig+0x246>
 800353c:	231b      	movs	r3, #27
 800353e:	2220      	movs	r2, #32
 8003540:	189b      	adds	r3, r3, r2
 8003542:	19db      	adds	r3, r3, r7
 8003544:	2204      	movs	r2, #4
 8003546:	701a      	strb	r2, [r3, #0]
 8003548:	e013      	b.n	8003572 <UART_SetConfig+0x246>
 800354a:	231b      	movs	r3, #27
 800354c:	2220      	movs	r2, #32
 800354e:	189b      	adds	r3, r3, r2
 8003550:	19db      	adds	r3, r3, r7
 8003552:	2208      	movs	r2, #8
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	e00c      	b.n	8003572 <UART_SetConfig+0x246>
 8003558:	231b      	movs	r3, #27
 800355a:	2220      	movs	r2, #32
 800355c:	189b      	adds	r3, r3, r2
 800355e:	19db      	adds	r3, r3, r7
 8003560:	2210      	movs	r2, #16
 8003562:	701a      	strb	r2, [r3, #0]
 8003564:	e005      	b.n	8003572 <UART_SetConfig+0x246>
 8003566:	231b      	movs	r3, #27
 8003568:	2220      	movs	r2, #32
 800356a:	189b      	adds	r3, r3, r2
 800356c:	19db      	adds	r3, r3, r7
 800356e:	2210      	movs	r2, #16
 8003570:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a2b      	ldr	r2, [pc, #172]	@ (8003624 <UART_SetConfig+0x2f8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d000      	beq.n	800357e <UART_SetConfig+0x252>
 800357c:	e0a9      	b.n	80036d2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800357e:	231b      	movs	r3, #27
 8003580:	2220      	movs	r2, #32
 8003582:	189b      	adds	r3, r3, r2
 8003584:	19db      	adds	r3, r3, r7
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b08      	cmp	r3, #8
 800358a:	d015      	beq.n	80035b8 <UART_SetConfig+0x28c>
 800358c:	dc18      	bgt.n	80035c0 <UART_SetConfig+0x294>
 800358e:	2b04      	cmp	r3, #4
 8003590:	d00d      	beq.n	80035ae <UART_SetConfig+0x282>
 8003592:	dc15      	bgt.n	80035c0 <UART_SetConfig+0x294>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <UART_SetConfig+0x272>
 8003598:	2b02      	cmp	r3, #2
 800359a:	d005      	beq.n	80035a8 <UART_SetConfig+0x27c>
 800359c:	e010      	b.n	80035c0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800359e:	f7fe fc59 	bl	8001e54 <HAL_RCC_GetPCLK1Freq>
 80035a2:	0003      	movs	r3, r0
 80035a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035a6:	e014      	b.n	80035d2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035a8:	4b25      	ldr	r3, [pc, #148]	@ (8003640 <UART_SetConfig+0x314>)
 80035aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035ac:	e011      	b.n	80035d2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ae:	f7fe fbc5 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 80035b2:	0003      	movs	r3, r0
 80035b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035b6:	e00c      	b.n	80035d2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035b8:	2380      	movs	r3, #128	@ 0x80
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035be:	e008      	b.n	80035d2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80035c4:	231a      	movs	r3, #26
 80035c6:	2220      	movs	r2, #32
 80035c8:	189b      	adds	r3, r3, r2
 80035ca:	19db      	adds	r3, r3, r7
 80035cc:	2201      	movs	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]
        break;
 80035d0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d100      	bne.n	80035da <UART_SetConfig+0x2ae>
 80035d8:	e14b      	b.n	8003872 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035de:	4b19      	ldr	r3, [pc, #100]	@ (8003644 <UART_SetConfig+0x318>)
 80035e0:	0052      	lsls	r2, r2, #1
 80035e2:	5ad3      	ldrh	r3, [r2, r3]
 80035e4:	0019      	movs	r1, r3
 80035e6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80035e8:	f7fc fd8c 	bl	8000104 <__udivsi3>
 80035ec:	0003      	movs	r3, r0
 80035ee:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	0013      	movs	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	189b      	adds	r3, r3, r2
 80035fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d305      	bcc.n	800360c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003606:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003608:	429a      	cmp	r2, r3
 800360a:	d91d      	bls.n	8003648 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800360c:	231a      	movs	r3, #26
 800360e:	2220      	movs	r2, #32
 8003610:	189b      	adds	r3, r3, r2
 8003612:	19db      	adds	r3, r3, r7
 8003614:	2201      	movs	r2, #1
 8003616:	701a      	strb	r2, [r3, #0]
 8003618:	e12b      	b.n	8003872 <UART_SetConfig+0x546>
 800361a:	46c0      	nop			@ (mov r8, r8)
 800361c:	cfff69f3 	.word	0xcfff69f3
 8003620:	ffffcfff 	.word	0xffffcfff
 8003624:	40008000 	.word	0x40008000
 8003628:	11fff4ff 	.word	0x11fff4ff
 800362c:	40013800 	.word	0x40013800
 8003630:	40021000 	.word	0x40021000
 8003634:	40004400 	.word	0x40004400
 8003638:	40004800 	.word	0x40004800
 800363c:	40004c00 	.word	0x40004c00
 8003640:	00f42400 	.word	0x00f42400
 8003644:	080040ec 	.word	0x080040ec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364a:	61bb      	str	r3, [r7, #24]
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]
 8003650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003654:	4b92      	ldr	r3, [pc, #584]	@ (80038a0 <UART_SetConfig+0x574>)
 8003656:	0052      	lsls	r2, r2, #1
 8003658:	5ad3      	ldrh	r3, [r2, r3]
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	69b8      	ldr	r0, [r7, #24]
 8003666:	69f9      	ldr	r1, [r7, #28]
 8003668:	f7fc fec2 	bl	80003f0 <__aeabi_uldivmod>
 800366c:	0002      	movs	r2, r0
 800366e:	000b      	movs	r3, r1
 8003670:	0e11      	lsrs	r1, r2, #24
 8003672:	021d      	lsls	r5, r3, #8
 8003674:	430d      	orrs	r5, r1
 8003676:	0214      	lsls	r4, r2, #8
 8003678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	085b      	lsrs	r3, r3, #1
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68b8      	ldr	r0, [r7, #8]
 8003686:	68f9      	ldr	r1, [r7, #12]
 8003688:	1900      	adds	r0, r0, r4
 800368a:	4169      	adcs	r1, r5
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	603b      	str	r3, [r7, #0]
 8003692:	2300      	movs	r3, #0
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f7fc fea9 	bl	80003f0 <__aeabi_uldivmod>
 800369e:	0002      	movs	r2, r0
 80036a0:	000b      	movs	r3, r1
 80036a2:	0013      	movs	r3, r2
 80036a4:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036a8:	23c0      	movs	r3, #192	@ 0xc0
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d309      	bcc.n	80036c4 <UART_SetConfig+0x398>
 80036b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036b2:	2380      	movs	r3, #128	@ 0x80
 80036b4:	035b      	lsls	r3, r3, #13
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d204      	bcs.n	80036c4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	e0d6      	b.n	8003872 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80036c4:	231a      	movs	r3, #26
 80036c6:	2220      	movs	r2, #32
 80036c8:	189b      	adds	r3, r3, r2
 80036ca:	19db      	adds	r3, r3, r7
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	e0cf      	b.n	8003872 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d4:	69da      	ldr	r2, [r3, #28]
 80036d6:	2380      	movs	r3, #128	@ 0x80
 80036d8:	021b      	lsls	r3, r3, #8
 80036da:	429a      	cmp	r2, r3
 80036dc:	d000      	beq.n	80036e0 <UART_SetConfig+0x3b4>
 80036de:	e070      	b.n	80037c2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80036e0:	231b      	movs	r3, #27
 80036e2:	2220      	movs	r2, #32
 80036e4:	189b      	adds	r3, r3, r2
 80036e6:	19db      	adds	r3, r3, r7
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d015      	beq.n	800371a <UART_SetConfig+0x3ee>
 80036ee:	dc18      	bgt.n	8003722 <UART_SetConfig+0x3f6>
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d00d      	beq.n	8003710 <UART_SetConfig+0x3e4>
 80036f4:	dc15      	bgt.n	8003722 <UART_SetConfig+0x3f6>
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <UART_SetConfig+0x3d4>
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d005      	beq.n	800370a <UART_SetConfig+0x3de>
 80036fe:	e010      	b.n	8003722 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003700:	f7fe fba8 	bl	8001e54 <HAL_RCC_GetPCLK1Freq>
 8003704:	0003      	movs	r3, r0
 8003706:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003708:	e014      	b.n	8003734 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800370a:	4b66      	ldr	r3, [pc, #408]	@ (80038a4 <UART_SetConfig+0x578>)
 800370c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800370e:	e011      	b.n	8003734 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003710:	f7fe fb14 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8003714:	0003      	movs	r3, r0
 8003716:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003718:	e00c      	b.n	8003734 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800371a:	2380      	movs	r3, #128	@ 0x80
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003720:	e008      	b.n	8003734 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003726:	231a      	movs	r3, #26
 8003728:	2220      	movs	r2, #32
 800372a:	189b      	adds	r3, r3, r2
 800372c:	19db      	adds	r3, r3, r7
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
        break;
 8003732:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003736:	2b00      	cmp	r3, #0
 8003738:	d100      	bne.n	800373c <UART_SetConfig+0x410>
 800373a:	e09a      	b.n	8003872 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800373c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003740:	4b57      	ldr	r3, [pc, #348]	@ (80038a0 <UART_SetConfig+0x574>)
 8003742:	0052      	lsls	r2, r2, #1
 8003744:	5ad3      	ldrh	r3, [r2, r3]
 8003746:	0019      	movs	r1, r3
 8003748:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800374a:	f7fc fcdb 	bl	8000104 <__udivsi3>
 800374e:	0003      	movs	r3, r0
 8003750:	005a      	lsls	r2, r3, #1
 8003752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	085b      	lsrs	r3, r3, #1
 8003758:	18d2      	adds	r2, r2, r3
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	0019      	movs	r1, r3
 8003760:	0010      	movs	r0, r2
 8003762:	f7fc fccf 	bl	8000104 <__udivsi3>
 8003766:	0003      	movs	r3, r0
 8003768:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800376a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376c:	2b0f      	cmp	r3, #15
 800376e:	d921      	bls.n	80037b4 <UART_SetConfig+0x488>
 8003770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003772:	2380      	movs	r3, #128	@ 0x80
 8003774:	025b      	lsls	r3, r3, #9
 8003776:	429a      	cmp	r2, r3
 8003778:	d21c      	bcs.n	80037b4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800377a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377c:	b29a      	uxth	r2, r3
 800377e:	200e      	movs	r0, #14
 8003780:	2420      	movs	r4, #32
 8003782:	1903      	adds	r3, r0, r4
 8003784:	19db      	adds	r3, r3, r7
 8003786:	210f      	movs	r1, #15
 8003788:	438a      	bics	r2, r1
 800378a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800378c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	b29b      	uxth	r3, r3
 8003792:	2207      	movs	r2, #7
 8003794:	4013      	ands	r3, r2
 8003796:	b299      	uxth	r1, r3
 8003798:	1903      	adds	r3, r0, r4
 800379a:	19db      	adds	r3, r3, r7
 800379c:	1902      	adds	r2, r0, r4
 800379e:	19d2      	adds	r2, r2, r7
 80037a0:	8812      	ldrh	r2, [r2, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	1902      	adds	r2, r0, r4
 80037ac:	19d2      	adds	r2, r2, r7
 80037ae:	8812      	ldrh	r2, [r2, #0]
 80037b0:	60da      	str	r2, [r3, #12]
 80037b2:	e05e      	b.n	8003872 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80037b4:	231a      	movs	r3, #26
 80037b6:	2220      	movs	r2, #32
 80037b8:	189b      	adds	r3, r3, r2
 80037ba:	19db      	adds	r3, r3, r7
 80037bc:	2201      	movs	r2, #1
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	e057      	b.n	8003872 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037c2:	231b      	movs	r3, #27
 80037c4:	2220      	movs	r2, #32
 80037c6:	189b      	adds	r3, r3, r2
 80037c8:	19db      	adds	r3, r3, r7
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d015      	beq.n	80037fc <UART_SetConfig+0x4d0>
 80037d0:	dc18      	bgt.n	8003804 <UART_SetConfig+0x4d8>
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d00d      	beq.n	80037f2 <UART_SetConfig+0x4c6>
 80037d6:	dc15      	bgt.n	8003804 <UART_SetConfig+0x4d8>
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <UART_SetConfig+0x4b6>
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d005      	beq.n	80037ec <UART_SetConfig+0x4c0>
 80037e0:	e010      	b.n	8003804 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e2:	f7fe fb37 	bl	8001e54 <HAL_RCC_GetPCLK1Freq>
 80037e6:	0003      	movs	r3, r0
 80037e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80037ea:	e014      	b.n	8003816 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037ec:	4b2d      	ldr	r3, [pc, #180]	@ (80038a4 <UART_SetConfig+0x578>)
 80037ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80037f0:	e011      	b.n	8003816 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037f2:	f7fe faa3 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 80037f6:	0003      	movs	r3, r0
 80037f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80037fa:	e00c      	b.n	8003816 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037fc:	2380      	movs	r3, #128	@ 0x80
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003802:	e008      	b.n	8003816 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003808:	231a      	movs	r3, #26
 800380a:	2220      	movs	r2, #32
 800380c:	189b      	adds	r3, r3, r2
 800380e:	19db      	adds	r3, r3, r7
 8003810:	2201      	movs	r2, #1
 8003812:	701a      	strb	r2, [r3, #0]
        break;
 8003814:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003818:	2b00      	cmp	r3, #0
 800381a:	d02a      	beq.n	8003872 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800381c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003820:	4b1f      	ldr	r3, [pc, #124]	@ (80038a0 <UART_SetConfig+0x574>)
 8003822:	0052      	lsls	r2, r2, #1
 8003824:	5ad3      	ldrh	r3, [r2, r3]
 8003826:	0019      	movs	r1, r3
 8003828:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800382a:	f7fc fc6b 	bl	8000104 <__udivsi3>
 800382e:	0003      	movs	r3, r0
 8003830:	001a      	movs	r2, r3
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	18d2      	adds	r2, r2, r3
 800383a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	0019      	movs	r1, r3
 8003840:	0010      	movs	r0, r2
 8003842:	f7fc fc5f 	bl	8000104 <__udivsi3>
 8003846:	0003      	movs	r3, r0
 8003848:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800384a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384c:	2b0f      	cmp	r3, #15
 800384e:	d90a      	bls.n	8003866 <UART_SetConfig+0x53a>
 8003850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003852:	2380      	movs	r3, #128	@ 0x80
 8003854:	025b      	lsls	r3, r3, #9
 8003856:	429a      	cmp	r2, r3
 8003858:	d205      	bcs.n	8003866 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800385a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385c:	b29a      	uxth	r2, r3
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60da      	str	r2, [r3, #12]
 8003864:	e005      	b.n	8003872 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003866:	231a      	movs	r3, #26
 8003868:	2220      	movs	r2, #32
 800386a:	189b      	adds	r3, r3, r2
 800386c:	19db      	adds	r3, r3, r7
 800386e:	2201      	movs	r2, #1
 8003870:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	226a      	movs	r2, #106	@ 0x6a
 8003876:	2101      	movs	r1, #1
 8003878:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	2268      	movs	r2, #104	@ 0x68
 800387e:	2101      	movs	r1, #1
 8003880:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	2200      	movs	r2, #0
 8003886:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	2200      	movs	r2, #0
 800388c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800388e:	231a      	movs	r3, #26
 8003890:	2220      	movs	r2, #32
 8003892:	189b      	adds	r3, r3, r2
 8003894:	19db      	adds	r3, r3, r7
 8003896:	781b      	ldrb	r3, [r3, #0]
}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	b010      	add	sp, #64	@ 0x40
 800389e:	bdb0      	pop	{r4, r5, r7, pc}
 80038a0:	080040ec 	.word	0x080040ec
 80038a4:	00f42400 	.word	0x00f42400

080038a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b4:	2208      	movs	r2, #8
 80038b6:	4013      	ands	r3, r2
 80038b8:	d00b      	beq.n	80038d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4a4a      	ldr	r2, [pc, #296]	@ (80039ec <UART_AdvFeatureConfig+0x144>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	0019      	movs	r1, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d6:	2201      	movs	r2, #1
 80038d8:	4013      	ands	r3, r2
 80038da:	d00b      	beq.n	80038f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4a43      	ldr	r2, [pc, #268]	@ (80039f0 <UART_AdvFeatureConfig+0x148>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	0019      	movs	r1, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f8:	2202      	movs	r2, #2
 80038fa:	4013      	ands	r3, r2
 80038fc:	d00b      	beq.n	8003916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	4a3b      	ldr	r2, [pc, #236]	@ (80039f4 <UART_AdvFeatureConfig+0x14c>)
 8003906:	4013      	ands	r3, r2
 8003908:	0019      	movs	r1, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391a:	2204      	movs	r2, #4
 800391c:	4013      	ands	r3, r2
 800391e:	d00b      	beq.n	8003938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4a34      	ldr	r2, [pc, #208]	@ (80039f8 <UART_AdvFeatureConfig+0x150>)
 8003928:	4013      	ands	r3, r2
 800392a:	0019      	movs	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393c:	2210      	movs	r2, #16
 800393e:	4013      	ands	r3, r2
 8003940:	d00b      	beq.n	800395a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4a2c      	ldr	r2, [pc, #176]	@ (80039fc <UART_AdvFeatureConfig+0x154>)
 800394a:	4013      	ands	r3, r2
 800394c:	0019      	movs	r1, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395e:	2220      	movs	r2, #32
 8003960:	4013      	ands	r3, r2
 8003962:	d00b      	beq.n	800397c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	4a25      	ldr	r2, [pc, #148]	@ (8003a00 <UART_AdvFeatureConfig+0x158>)
 800396c:	4013      	ands	r3, r2
 800396e:	0019      	movs	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003980:	2240      	movs	r2, #64	@ 0x40
 8003982:	4013      	ands	r3, r2
 8003984:	d01d      	beq.n	80039c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	4a1d      	ldr	r2, [pc, #116]	@ (8003a04 <UART_AdvFeatureConfig+0x15c>)
 800398e:	4013      	ands	r3, r2
 8003990:	0019      	movs	r1, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039a2:	2380      	movs	r3, #128	@ 0x80
 80039a4:	035b      	lsls	r3, r3, #13
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d10b      	bne.n	80039c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a15      	ldr	r2, [pc, #84]	@ (8003a08 <UART_AdvFeatureConfig+0x160>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	0019      	movs	r1, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c6:	2280      	movs	r2, #128	@ 0x80
 80039c8:	4013      	ands	r3, r2
 80039ca:	d00b      	beq.n	80039e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4a0e      	ldr	r2, [pc, #56]	@ (8003a0c <UART_AdvFeatureConfig+0x164>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	0019      	movs	r1, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	605a      	str	r2, [r3, #4]
  }
}
 80039e4:	46c0      	nop			@ (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b002      	add	sp, #8
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	ffff7fff 	.word	0xffff7fff
 80039f0:	fffdffff 	.word	0xfffdffff
 80039f4:	fffeffff 	.word	0xfffeffff
 80039f8:	fffbffff 	.word	0xfffbffff
 80039fc:	ffffefff 	.word	0xffffefff
 8003a00:	ffffdfff 	.word	0xffffdfff
 8003a04:	ffefffff 	.word	0xffefffff
 8003a08:	ff9fffff 	.word	0xff9fffff
 8003a0c:	fff7ffff 	.word	0xfff7ffff

08003a10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b092      	sub	sp, #72	@ 0x48
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2290      	movs	r2, #144	@ 0x90
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a20:	f7fd f97a 	bl	8000d18 <HAL_GetTick>
 8003a24:	0003      	movs	r3, r0
 8003a26:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2208      	movs	r2, #8
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d12d      	bne.n	8003a92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a38:	2280      	movs	r2, #128	@ 0x80
 8003a3a:	0391      	lsls	r1, r2, #14
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4a47      	ldr	r2, [pc, #284]	@ (8003b5c <UART_CheckIdleState+0x14c>)
 8003a40:	9200      	str	r2, [sp, #0]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f000 f88e 	bl	8003b64 <UART_WaitOnFlagUntilTimeout>
 8003a48:	1e03      	subs	r3, r0, #0
 8003a4a:	d022      	beq.n	8003a92 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a50:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003a54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a56:	2301      	movs	r3, #1
 8003a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5c:	f383 8810 	msr	PRIMASK, r3
}
 8003a60:	46c0      	nop			@ (mov r8, r8)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2180      	movs	r1, #128	@ 0x80
 8003a6e:	438a      	bics	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a78:	f383 8810 	msr	PRIMASK, r3
}
 8003a7c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2288      	movs	r2, #136	@ 0x88
 8003a82:	2120      	movs	r1, #32
 8003a84:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2284      	movs	r2, #132	@ 0x84
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e060      	b.n	8003b54 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2204      	movs	r2, #4
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d146      	bne.n	8003b2e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aa2:	2280      	movs	r2, #128	@ 0x80
 8003aa4:	03d1      	lsls	r1, r2, #15
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4a2c      	ldr	r2, [pc, #176]	@ (8003b5c <UART_CheckIdleState+0x14c>)
 8003aaa:	9200      	str	r2, [sp, #0]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f000 f859 	bl	8003b64 <UART_WaitOnFlagUntilTimeout>
 8003ab2:	1e03      	subs	r3, r0, #0
 8003ab4:	d03b      	beq.n	8003b2e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aba:	60fb      	str	r3, [r7, #12]
  return(result);
 8003abc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003abe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f383 8810 	msr	PRIMASK, r3
}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4922      	ldr	r1, [pc, #136]	@ (8003b60 <UART_CheckIdleState+0x150>)
 8003ad8:	400a      	ands	r2, r1
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ade:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f383 8810 	msr	PRIMASK, r3
}
 8003ae6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8003aec:	61bb      	str	r3, [r7, #24]
  return(result);
 8003aee:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003af2:	2301      	movs	r3, #1
 8003af4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f383 8810 	msr	PRIMASK, r3
}
 8003afc:	46c0      	nop			@ (mov r8, r8)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2101      	movs	r1, #1
 8003b0a:	438a      	bics	r2, r1
 8003b0c:	609a      	str	r2, [r3, #8]
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b10:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	f383 8810 	msr	PRIMASK, r3
}
 8003b18:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	228c      	movs	r2, #140	@ 0x8c
 8003b1e:	2120      	movs	r1, #32
 8003b20:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2284      	movs	r2, #132	@ 0x84
 8003b26:	2100      	movs	r1, #0
 8003b28:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e012      	b.n	8003b54 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2288      	movs	r2, #136	@ 0x88
 8003b32:	2120      	movs	r1, #32
 8003b34:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	228c      	movs	r2, #140	@ 0x8c
 8003b3a:	2120      	movs	r1, #32
 8003b3c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2284      	movs	r2, #132	@ 0x84
 8003b4e:	2100      	movs	r1, #0
 8003b50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	0018      	movs	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b010      	add	sp, #64	@ 0x40
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	01ffffff 	.word	0x01ffffff
 8003b60:	fffffedf 	.word	0xfffffedf

08003b64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	1dfb      	adds	r3, r7, #7
 8003b72:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b74:	e051      	b.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	d04e      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7c:	f7fd f8cc 	bl	8000d18 <HAL_GetTick>
 8003b80:	0002      	movs	r2, r0
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d302      	bcc.n	8003b92 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e051      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2204      	movs	r2, #4
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d03b      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b80      	cmp	r3, #128	@ 0x80
 8003ba6:	d038      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b40      	cmp	r3, #64	@ 0x40
 8003bac:	d035      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d111      	bne.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f000 f83c 	bl	8003c44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2290      	movs	r2, #144	@ 0x90
 8003bd0:	2108      	movs	r1, #8
 8003bd2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2284      	movs	r2, #132	@ 0x84
 8003bd8:	2100      	movs	r1, #0
 8003bda:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e02c      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	2380      	movs	r3, #128	@ 0x80
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	401a      	ands	r2, r3
 8003bec:	2380      	movs	r3, #128	@ 0x80
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d112      	bne.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2280      	movs	r2, #128	@ 0x80
 8003bfa:	0112      	lsls	r2, r2, #4
 8003bfc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 f81f 	bl	8003c44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2290      	movs	r2, #144	@ 0x90
 8003c0a:	2120      	movs	r1, #32
 8003c0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2284      	movs	r2, #132	@ 0x84
 8003c12:	2100      	movs	r1, #0
 8003c14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e00f      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	4013      	ands	r3, r2
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	425a      	negs	r2, r3
 8003c2a:	4153      	adcs	r3, r2
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	001a      	movs	r2, r3
 8003c30:	1dfb      	adds	r3, r7, #7
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d09e      	beq.n	8003b76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b004      	add	sp, #16
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08e      	sub	sp, #56	@ 0x38
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c50:	617b      	str	r3, [r7, #20]
  return(result);
 8003c52:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c56:	2301      	movs	r3, #1
 8003c58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f383 8810 	msr	PRIMASK, r3
}
 8003c60:	46c0      	nop			@ (mov r8, r8)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4926      	ldr	r1, [pc, #152]	@ (8003d08 <UART_EndRxTransfer+0xc4>)
 8003c6e:	400a      	ands	r2, r1
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f383 8810 	msr	PRIMASK, r3
}
 8003c7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c82:	623b      	str	r3, [r7, #32]
  return(result);
 8003c84:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c86:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c88:	2301      	movs	r3, #1
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8e:	f383 8810 	msr	PRIMASK, r3
}
 8003c92:	46c0      	nop			@ (mov r8, r8)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	491b      	ldr	r1, [pc, #108]	@ (8003d0c <UART_EndRxTransfer+0xc8>)
 8003ca0:	400a      	ands	r2, r1
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003caa:	f383 8810 	msr	PRIMASK, r3
}
 8003cae:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d118      	bne.n	8003cea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cbe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f383 8810 	msr	PRIMASK, r3
}
 8003ccc:	46c0      	nop			@ (mov r8, r8)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2110      	movs	r1, #16
 8003cda:	438a      	bics	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f383 8810 	msr	PRIMASK, r3
}
 8003ce8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	228c      	movs	r2, #140	@ 0x8c
 8003cee:	2120      	movs	r1, #32
 8003cf0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003cfe:	46c0      	nop			@ (mov r8, r8)
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b00e      	add	sp, #56	@ 0x38
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	46c0      	nop			@ (mov r8, r8)
 8003d08:	fffffedf 	.word	0xfffffedf
 8003d0c:	effffffe 	.word	0xeffffffe

08003d10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	225e      	movs	r2, #94	@ 0x5e
 8003d22:	2100      	movs	r1, #0
 8003d24:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2256      	movs	r2, #86	@ 0x56
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	0018      	movs	r0, r3
 8003d32:	f7ff fae7 	bl	8003304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b004      	add	sp, #16
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d46:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d4c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	2301      	movs	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f383 8810 	msr	PRIMASK, r3
}
 8003d5a:	46c0      	nop			@ (mov r8, r8)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2140      	movs	r1, #64	@ 0x40
 8003d68:	438a      	bics	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f383 8810 	msr	PRIMASK, r3
}
 8003d76:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2288      	movs	r2, #136	@ 0x88
 8003d7c:	2120      	movs	r1, #32
 8003d7e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f7ff fab3 	bl	80032f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b006      	add	sp, #24
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b002      	add	sp, #8
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b002      	add	sp, #8
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003dbe:	46c0      	nop			@ (mov r8, r8)
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b002      	add	sp, #8
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2284      	movs	r2, #132	@ 0x84
 8003dd4:	5c9b      	ldrb	r3, [r3, r2]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_UARTEx_DisableFifoMode+0x16>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e027      	b.n	8003e2e <HAL_UARTEx_DisableFifoMode+0x66>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2284      	movs	r2, #132	@ 0x84
 8003de2:	2101      	movs	r1, #1
 8003de4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2288      	movs	r2, #136	@ 0x88
 8003dea:	2124      	movs	r1, #36	@ 0x24
 8003dec:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2101      	movs	r1, #1
 8003e02:	438a      	bics	r2, r1
 8003e04:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4a0b      	ldr	r2, [pc, #44]	@ (8003e38 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2288      	movs	r2, #136	@ 0x88
 8003e20:	2120      	movs	r1, #32
 8003e22:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2284      	movs	r2, #132	@ 0x84
 8003e28:	2100      	movs	r1, #0
 8003e2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	0018      	movs	r0, r3
 8003e30:	46bd      	mov	sp, r7
 8003e32:	b004      	add	sp, #16
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	46c0      	nop			@ (mov r8, r8)
 8003e38:	dfffffff 	.word	0xdfffffff

08003e3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2284      	movs	r2, #132	@ 0x84
 8003e4a:	5c9b      	ldrb	r3, [r3, r2]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e02e      	b.n	8003eb2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2284      	movs	r2, #132	@ 0x84
 8003e58:	2101      	movs	r1, #1
 8003e5a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2288      	movs	r2, #136	@ 0x88
 8003e60:	2124      	movs	r1, #36	@ 0x24
 8003e62:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2101      	movs	r1, #1
 8003e78:	438a      	bics	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	08d9      	lsrs	r1, r3, #3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	0018      	movs	r0, r3
 8003e94:	f000 f854 	bl	8003f40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2288      	movs	r2, #136	@ 0x88
 8003ea4:	2120      	movs	r1, #32
 8003ea6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2284      	movs	r2, #132	@ 0x84
 8003eac:	2100      	movs	r1, #0
 8003eae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	b004      	add	sp, #16
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2284      	movs	r2, #132	@ 0x84
 8003eca:	5c9b      	ldrb	r3, [r3, r2]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e02f      	b.n	8003f34 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2284      	movs	r2, #132	@ 0x84
 8003ed8:	2101      	movs	r1, #1
 8003eda:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2288      	movs	r2, #136	@ 0x88
 8003ee0:	2124      	movs	r1, #36	@ 0x24
 8003ee2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	438a      	bics	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	4a0e      	ldr	r2, [pc, #56]	@ (8003f3c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	0019      	movs	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	0018      	movs	r0, r3
 8003f16:	f000 f813 	bl	8003f40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2288      	movs	r2, #136	@ 0x88
 8003f26:	2120      	movs	r1, #32
 8003f28:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2284      	movs	r2, #132	@ 0x84
 8003f2e:	2100      	movs	r1, #0
 8003f30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	0018      	movs	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	b004      	add	sp, #16
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	f1ffffff 	.word	0xf1ffffff

08003f40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d108      	bne.n	8003f62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	226a      	movs	r2, #106	@ 0x6a
 8003f54:	2101      	movs	r1, #1
 8003f56:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2268      	movs	r2, #104	@ 0x68
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f60:	e043      	b.n	8003fea <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f62:	260f      	movs	r6, #15
 8003f64:	19bb      	adds	r3, r7, r6
 8003f66:	2208      	movs	r2, #8
 8003f68:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f6a:	200e      	movs	r0, #14
 8003f6c:	183b      	adds	r3, r7, r0
 8003f6e:	2208      	movs	r2, #8
 8003f70:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	0e5b      	lsrs	r3, r3, #25
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	240d      	movs	r4, #13
 8003f7e:	193b      	adds	r3, r7, r4
 8003f80:	2107      	movs	r1, #7
 8003f82:	400a      	ands	r2, r1
 8003f84:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	0f5b      	lsrs	r3, r3, #29
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	250c      	movs	r5, #12
 8003f92:	197b      	adds	r3, r7, r5
 8003f94:	2107      	movs	r1, #7
 8003f96:	400a      	ands	r2, r1
 8003f98:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f9a:	183b      	adds	r3, r7, r0
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	197a      	adds	r2, r7, r5
 8003fa0:	7812      	ldrb	r2, [r2, #0]
 8003fa2:	4914      	ldr	r1, [pc, #80]	@ (8003ff4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003fa4:	5c8a      	ldrb	r2, [r1, r2]
 8003fa6:	435a      	muls	r2, r3
 8003fa8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003faa:	197b      	adds	r3, r7, r5
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	4a12      	ldr	r2, [pc, #72]	@ (8003ff8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003fb0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	f7fc f930 	bl	8000218 <__divsi3>
 8003fb8:	0003      	movs	r3, r0
 8003fba:	b299      	uxth	r1, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	226a      	movs	r2, #106	@ 0x6a
 8003fc0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003fc2:	19bb      	adds	r3, r7, r6
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	193a      	adds	r2, r7, r4
 8003fc8:	7812      	ldrb	r2, [r2, #0]
 8003fca:	490a      	ldr	r1, [pc, #40]	@ (8003ff4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003fcc:	5c8a      	ldrb	r2, [r1, r2]
 8003fce:	435a      	muls	r2, r3
 8003fd0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003fd2:	193b      	adds	r3, r7, r4
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	4a08      	ldr	r2, [pc, #32]	@ (8003ff8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003fd8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003fda:	0019      	movs	r1, r3
 8003fdc:	f7fc f91c 	bl	8000218 <__divsi3>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	b299      	uxth	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2268      	movs	r2, #104	@ 0x68
 8003fe8:	5299      	strh	r1, [r3, r2]
}
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	46bd      	mov	sp, r7
 8003fee:	b005      	add	sp, #20
 8003ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	08004104 	.word	0x08004104
 8003ff8:	0800410c 	.word	0x0800410c

08003ffc <memset>:
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	1882      	adds	r2, r0, r2
 8004000:	4293      	cmp	r3, r2
 8004002:	d100      	bne.n	8004006 <memset+0xa>
 8004004:	4770      	bx	lr
 8004006:	7019      	strb	r1, [r3, #0]
 8004008:	3301      	adds	r3, #1
 800400a:	e7f9      	b.n	8004000 <memset+0x4>

0800400c <__libc_init_array>:
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	2600      	movs	r6, #0
 8004010:	4c0c      	ldr	r4, [pc, #48]	@ (8004044 <__libc_init_array+0x38>)
 8004012:	4d0d      	ldr	r5, [pc, #52]	@ (8004048 <__libc_init_array+0x3c>)
 8004014:	1b64      	subs	r4, r4, r5
 8004016:	10a4      	asrs	r4, r4, #2
 8004018:	42a6      	cmp	r6, r4
 800401a:	d109      	bne.n	8004030 <__libc_init_array+0x24>
 800401c:	2600      	movs	r6, #0
 800401e:	f000 f819 	bl	8004054 <_init>
 8004022:	4c0a      	ldr	r4, [pc, #40]	@ (800404c <__libc_init_array+0x40>)
 8004024:	4d0a      	ldr	r5, [pc, #40]	@ (8004050 <__libc_init_array+0x44>)
 8004026:	1b64      	subs	r4, r4, r5
 8004028:	10a4      	asrs	r4, r4, #2
 800402a:	42a6      	cmp	r6, r4
 800402c:	d105      	bne.n	800403a <__libc_init_array+0x2e>
 800402e:	bd70      	pop	{r4, r5, r6, pc}
 8004030:	00b3      	lsls	r3, r6, #2
 8004032:	58eb      	ldr	r3, [r5, r3]
 8004034:	4798      	blx	r3
 8004036:	3601      	adds	r6, #1
 8004038:	e7ee      	b.n	8004018 <__libc_init_array+0xc>
 800403a:	00b3      	lsls	r3, r6, #2
 800403c:	58eb      	ldr	r3, [r5, r3]
 800403e:	4798      	blx	r3
 8004040:	3601      	adds	r6, #1
 8004042:	e7f2      	b.n	800402a <__libc_init_array+0x1e>
 8004044:	0800411c 	.word	0x0800411c
 8004048:	0800411c 	.word	0x0800411c
 800404c:	08004120 	.word	0x08004120
 8004050:	0800411c 	.word	0x0800411c

08004054 <_init>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	46c0      	nop			@ (mov r8, r8)
 8004058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405a:	bc08      	pop	{r3}
 800405c:	469e      	mov	lr, r3
 800405e:	4770      	bx	lr

08004060 <_fini>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	46c0      	nop			@ (mov r8, r8)
 8004064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004066:	bc08      	pop	{r3}
 8004068:	469e      	mov	lr, r3
 800406a:	4770      	bx	lr
