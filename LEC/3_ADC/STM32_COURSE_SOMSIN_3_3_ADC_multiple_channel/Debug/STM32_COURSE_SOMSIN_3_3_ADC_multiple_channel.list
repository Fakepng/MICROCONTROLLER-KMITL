
STM32_COURSE_SOMSIN_3_3_ADC_multiple_channel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004828  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080048e4  080048e4  000058e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049b4  080049b4  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080049b4  080049b4  000059b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049bc  080049bc  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049bc  080049bc  000059bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049c0  080049c0  000059c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080049c4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000005c  08004a20  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08004a20  000062c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d46c  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002004  00000000  00000000  000134f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  000154f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000870  00000000  00000000  00015ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001858a  00000000  00000000  00016868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc8b  00000000  00000000  0002edf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ed24  00000000  00000000  0003ca7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db7a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bac  00000000  00000000  000db7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000de390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080048cc 	.word	0x080048cc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	080048cc 	.word	0x080048cc

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b08b      	sub	sp, #44	@ 0x2c
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fb19 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f861 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f973 	bl	8000928 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000642:	f000 f923 	bl	800088c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000646:	f000 f8a3 	bl	8000790 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1); // Calibrate ADC
 800064a:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <main+0xc0>)
 800064c:	0018      	movs	r0, r3
 800064e:	f001 fb9f 	bl	8001d90 <HAL_ADCEx_Calibration_Start>
  HAL_UART_Transmit(&huart2, (uint8_t *)"haruhi3\r\n", 9, 1000);
 8000652:	23fa      	movs	r3, #250	@ 0xfa
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4927      	ldr	r1, [pc, #156]	@ (80006f4 <main+0xc4>)
 8000658:	4827      	ldr	r0, [pc, #156]	@ (80006f8 <main+0xc8>)
 800065a:	2209      	movs	r2, #9
 800065c:	f002 fde8 	bl	8003230 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	uint16_t adc_value[0] = {0,0};
	char adc_value_string[30];
	int adc_value_string_size = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_ADC_Start(&hadc1); // start conversion
 8000664:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <main+0xc0>)
 8000666:	0018      	movs	r0, r3
 8000668:	f000 fed2 	bl	8001410 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000); // wait for conversion
 800066c:	23fa      	movs	r3, #250	@ 0xfa
 800066e:	009a      	lsls	r2, r3, #2
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <main+0xc0>)
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f000 ff55 	bl	8001524 <HAL_ADC_PollForConversion>
	adc_value[0] = HAL_ADC_GetValue(&hadc1); // get ADC CH0 value
 800067a:	4b1d      	ldr	r3, [pc, #116]	@ (80006f0 <main+0xc0>)
 800067c:	0018      	movs	r0, r3
 800067e:	f000 ffe5 	bl	800164c <HAL_ADC_GetValue>
 8000682:	0003      	movs	r3, r0
 8000684:	b29a      	uxth	r2, r3
 8000686:	2424      	movs	r4, #36	@ 0x24
 8000688:	193b      	adds	r3, r7, r4
 800068a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Start(&hadc1); // start conversion
 800068c:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <main+0xc0>)
 800068e:	0018      	movs	r0, r3
 8000690:	f000 febe 	bl	8001410 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000); // wait for conversion
 8000694:	23fa      	movs	r3, #250	@ 0xfa
 8000696:	009a      	lsls	r2, r3, #2
 8000698:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <main+0xc0>)
 800069a:	0011      	movs	r1, r2
 800069c:	0018      	movs	r0, r3
 800069e:	f000 ff41 	bl	8001524 <HAL_ADC_PollForConversion>
	adc_value[1] = HAL_ADC_GetValue(&hadc1); // get ADC CH1 value
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <main+0xc0>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 ffd1 	bl	800164c <HAL_ADC_GetValue>
 80006aa:	0003      	movs	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Stop(&hadc1); // stop conversion
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <main+0xc0>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fef9 	bl	80014ac <HAL_ADC_Stop>

	adc_value_string_size = sprintf(adc_value_string,"%d,%d\r\n",adc_value[0],adc_value[1]);
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	001a      	movs	r2, r3
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	885b      	ldrh	r3, [r3, #2]
 80006c4:	490d      	ldr	r1, [pc, #52]	@ (80006fc <main+0xcc>)
 80006c6:	1d38      	adds	r0, r7, #4
 80006c8:	f003 fc62 	bl	8003f90 <siprintf>
 80006cc:	0003      	movs	r3, r0
 80006ce:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_UART_Transmit(&huart2, adc_value_string, adc_value_string_size, 1000);
 80006d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	23fa      	movs	r3, #250	@ 0xfa
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	1d39      	adds	r1, r7, #4
 80006da:	4807      	ldr	r0, [pc, #28]	@ (80006f8 <main+0xc8>)
 80006dc:	f002 fda8 	bl	8003230 <HAL_UART_Transmit>

	HAL_Delay (1000);
 80006e0:	23fa      	movs	r3, #250	@ 0xfa
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 fb47 	bl	8000d78 <HAL_Delay>
  {
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	e7b8      	b.n	8000660 <main+0x30>
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	20000078 	.word	0x20000078
 80006f4:	080048e4 	.word	0x080048e4
 80006f8:	200000dc 	.word	0x200000dc
 80006fc:	080048f0 	.word	0x080048f0

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b093      	sub	sp, #76	@ 0x4c
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	2410      	movs	r4, #16
 8000708:	193b      	adds	r3, r7, r4
 800070a:	0018      	movs	r0, r3
 800070c:	2338      	movs	r3, #56	@ 0x38
 800070e:	001a      	movs	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	f003 fc5d 	bl	8003fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000716:	003b      	movs	r3, r7
 8000718:	0018      	movs	r0, r3
 800071a:	2310      	movs	r3, #16
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f003 fc56 	bl	8003fd0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	2380      	movs	r3, #128	@ 0x80
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	0018      	movs	r0, r3
 800072a:	f001 fe63 	bl	80023f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2202      	movs	r2, #2
 8000732:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2280      	movs	r2, #128	@ 0x80
 8000738:	0052      	lsls	r2, r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800073c:	193b      	adds	r3, r7, r4
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2240      	movs	r2, #64	@ 0x40
 8000746:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	193b      	adds	r3, r7, r4
 8000750:	0018      	movs	r0, r3
 8000752:	f001 fe9b 	bl	800248c <HAL_RCC_OscConfig>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800075a:	f000 f935 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	003b      	movs	r3, r7
 8000760:	2207      	movs	r2, #7
 8000762:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000764:	003b      	movs	r3, r7
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	003b      	movs	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000770:	003b      	movs	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000776:	003b      	movs	r3, r7
 8000778:	2100      	movs	r1, #0
 800077a:	0018      	movs	r0, r3
 800077c:	f002 f9a0 	bl	8002ac0 <HAL_RCC_ClockConfig>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000784:	f000 f920 	bl	80009c8 <Error_Handler>
  }
}
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b013      	add	sp, #76	@ 0x4c
 800078e:	bd90      	pop	{r4, r7, pc}

08000790 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	0018      	movs	r0, r3
 800079a:	230c      	movs	r3, #12
 800079c:	001a      	movs	r2, r3
 800079e:	2100      	movs	r1, #0
 80007a0:	f003 fc16 	bl	8003fd0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007a4:	4b36      	ldr	r3, [pc, #216]	@ (8000880 <MX_ADC1_Init+0xf0>)
 80007a6:	4a37      	ldr	r2, [pc, #220]	@ (8000884 <MX_ADC1_Init+0xf4>)
 80007a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007aa:	4b35      	ldr	r3, [pc, #212]	@ (8000880 <MX_ADC1_Init+0xf0>)
 80007ac:	2280      	movs	r2, #128	@ 0x80
 80007ae:	05d2      	lsls	r2, r2, #23
 80007b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b2:	4b33      	ldr	r3, [pc, #204]	@ (8000880 <MX_ADC1_Init+0xf0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b8:	4b31      	ldr	r3, [pc, #196]	@ (8000880 <MX_ADC1_Init+0xf0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007be:	4b30      	ldr	r3, [pc, #192]	@ (8000880 <MX_ADC1_Init+0xf0>)
 80007c0:	2280      	movs	r2, #128	@ 0x80
 80007c2:	0392      	lsls	r2, r2, #14
 80007c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000880 <MX_ADC1_Init+0xf0>)
 80007c8:	2204      	movs	r2, #4
 80007ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000880 <MX_ADC1_Init+0xf0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80007d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000880 <MX_ADC1_Init+0xf0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d8:	4b29      	ldr	r3, [pc, #164]	@ (8000880 <MX_ADC1_Init+0xf0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 80007de:	4b28      	ldr	r3, [pc, #160]	@ (8000880 <MX_ADC1_Init+0xf0>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80007e4:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <MX_ADC1_Init+0xf0>)
 80007e6:	2220      	movs	r2, #32
 80007e8:	2101      	movs	r1, #1
 80007ea:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ec:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <MX_ADC1_Init+0xf0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f2:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <MX_ADC1_Init+0xf0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007f8:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_ADC1_Init+0xf0>)
 80007fa:	222c      	movs	r2, #44	@ 0x2c
 80007fc:	2100      	movs	r1, #0
 80007fe:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000800:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_ADC1_Init+0xf0>)
 8000802:	2200      	movs	r2, #0
 8000804:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000806:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_ADC1_Init+0xf0>)
 8000808:	2200      	movs	r2, #0
 800080a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800080c:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_ADC1_Init+0xf0>)
 800080e:	2200      	movs	r2, #0
 8000810:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_ADC1_Init+0xf0>)
 8000814:	223c      	movs	r2, #60	@ 0x3c
 8000816:	2100      	movs	r1, #0
 8000818:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_ADC1_Init+0xf0>)
 800081c:	2200      	movs	r2, #0
 800081e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000820:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <MX_ADC1_Init+0xf0>)
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fc4c 	bl	80010c0 <HAL_ADC_Init>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800082c:	f000 f8cc 	bl	80009c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2201      	movs	r2, #1
 8000834:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000842:	1d3a      	adds	r2, r7, #4
 8000844:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_ADC1_Init+0xf0>)
 8000846:	0011      	movs	r1, r2
 8000848:	0018      	movs	r0, r3
 800084a:	f000 ff0b 	bl	8001664 <HAL_ADC_ConfigChannel>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000852:	f000 f8b9 	bl	80009c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4a0b      	ldr	r2, [pc, #44]	@ (8000888 <MX_ADC1_Init+0xf8>)
 800085a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2204      	movs	r2, #4
 8000860:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	1d3a      	adds	r2, r7, #4
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_ADC1_Init+0xf0>)
 8000866:	0011      	movs	r1, r2
 8000868:	0018      	movs	r0, r3
 800086a:	f000 fefb 	bl	8001664 <HAL_ADC_ConfigChannel>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000872:	f000 f8a9 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b004      	add	sp, #16
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	20000078 	.word	0x20000078
 8000884:	40012400 	.word	0x40012400
 8000888:	04000002 	.word	0x04000002

0800088c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000890:	4b23      	ldr	r3, [pc, #140]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 8000892:	4a24      	ldr	r2, [pc, #144]	@ (8000924 <MX_USART2_UART_Init+0x98>)
 8000894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000896:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 8000898:	22e1      	movs	r2, #225	@ 0xe1
 800089a:	0252      	lsls	r2, r2, #9
 800089c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b20      	ldr	r3, [pc, #128]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c2:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c8:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ce:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f002 fc54 	bl	8003184 <HAL_UART_Init>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d001      	beq.n	80008e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008e0:	f000 f872 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008e6:	2100      	movs	r1, #0
 80008e8:	0018      	movs	r0, r3
 80008ea:	f003 fa71 	bl	8003dd0 <HAL_UARTEx_SetTxFifoThreshold>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008f2:	f000 f869 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 80008f8:	2100      	movs	r1, #0
 80008fa:	0018      	movs	r0, r3
 80008fc:	f003 faa8 	bl	8003e50 <HAL_UARTEx_SetRxFifoThreshold>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d001      	beq.n	8000908 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000904:	f000 f860 	bl	80009c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000908:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <MX_USART2_UART_Init+0x94>)
 800090a:	0018      	movs	r0, r3
 800090c:	f003 fa26 	bl	8003d5c <HAL_UARTEx_DisableFifoMode>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000914:	f000 f858 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000918:	46c0      	nop			@ (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	200000dc 	.word	0x200000dc
 8000924:	40004400 	.word	0x40004400

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b089      	sub	sp, #36	@ 0x24
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	240c      	movs	r4, #12
 8000930:	193b      	adds	r3, r7, r4
 8000932:	0018      	movs	r0, r3
 8000934:	2314      	movs	r3, #20
 8000936:	001a      	movs	r2, r3
 8000938:	2100      	movs	r1, #0
 800093a:	f003 fb49 	bl	8003fd0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	4b21      	ldr	r3, [pc, #132]	@ (80009c4 <MX_GPIO_Init+0x9c>)
 8000940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000942:	4b20      	ldr	r3, [pc, #128]	@ (80009c4 <MX_GPIO_Init+0x9c>)
 8000944:	2104      	movs	r1, #4
 8000946:	430a      	orrs	r2, r1
 8000948:	635a      	str	r2, [r3, #52]	@ 0x34
 800094a:	4b1e      	ldr	r3, [pc, #120]	@ (80009c4 <MX_GPIO_Init+0x9c>)
 800094c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800094e:	2204      	movs	r2, #4
 8000950:	4013      	ands	r3, r2
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000956:	4b1b      	ldr	r3, [pc, #108]	@ (80009c4 <MX_GPIO_Init+0x9c>)
 8000958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800095a:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <MX_GPIO_Init+0x9c>)
 800095c:	2120      	movs	r1, #32
 800095e:	430a      	orrs	r2, r1
 8000960:	635a      	str	r2, [r3, #52]	@ 0x34
 8000962:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <MX_GPIO_Init+0x9c>)
 8000964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000966:	2220      	movs	r2, #32
 8000968:	4013      	ands	r3, r2
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <MX_GPIO_Init+0x9c>)
 8000970:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000972:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <MX_GPIO_Init+0x9c>)
 8000974:	2101      	movs	r1, #1
 8000976:	430a      	orrs	r2, r1
 8000978:	635a      	str	r2, [r3, #52]	@ 0x34
 800097a:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_GPIO_Init+0x9c>)
 800097c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800097e:	2201      	movs	r2, #1
 8000980:	4013      	ands	r3, r2
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000986:	23a0      	movs	r3, #160	@ 0xa0
 8000988:	05db      	lsls	r3, r3, #23
 800098a:	2200      	movs	r2, #0
 800098c:	2120      	movs	r1, #32
 800098e:	0018      	movs	r0, r3
 8000990:	f001 fd12 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000994:	0021      	movs	r1, r4
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2220      	movs	r2, #32
 800099a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2201      	movs	r2, #1
 80009a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2202      	movs	r2, #2
 80009ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80009ae:	187a      	adds	r2, r7, r1
 80009b0:	23a0      	movs	r3, #160	@ 0xa0
 80009b2:	05db      	lsls	r3, r3, #23
 80009b4:	0011      	movs	r1, r2
 80009b6:	0018      	movs	r0, r3
 80009b8:	f001 fb9a 	bl	80020f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b009      	add	sp, #36	@ 0x24
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	40021000 	.word	0x40021000

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	46c0      	nop			@ (mov r8, r8)
 80009d2:	e7fd      	b.n	80009d0 <Error_Handler+0x8>

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009e0:	2101      	movs	r1, #1
 80009e2:	430a      	orrs	r2, r1
 80009e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ea:	2201      	movs	r2, #1
 80009ec:	4013      	ands	r3, r2
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009f8:	2180      	movs	r1, #128	@ 0x80
 80009fa:	0549      	lsls	r1, r1, #21
 80009fc:	430a      	orrs	r2, r1
 80009fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a00:	4b07      	ldr	r3, [pc, #28]	@ (8000a20 <HAL_MspInit+0x4c>)
 8000a02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a04:	2380      	movs	r3, #128	@ 0x80
 8000a06:	055b      	lsls	r3, r3, #21
 8000a08:	4013      	ands	r3, r2
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000a0e:	23c0      	movs	r3, #192	@ 0xc0
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 f9d4 	bl	8000dc0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b002      	add	sp, #8
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b08b      	sub	sp, #44	@ 0x2c
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	2414      	movs	r4, #20
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	0018      	movs	r0, r3
 8000a32:	2314      	movs	r3, #20
 8000a34:	001a      	movs	r2, r3
 8000a36:	2100      	movs	r1, #0
 8000a38:	f003 faca 	bl	8003fd0 <memset>
  if(hadc->Instance==ADC1)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a18      	ldr	r2, [pc, #96]	@ (8000aa4 <HAL_ADC_MspInit+0x80>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d129      	bne.n	8000a9a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <HAL_ADC_MspInit+0x84>)
 8000a48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a4a:	4b17      	ldr	r3, [pc, #92]	@ (8000aa8 <HAL_ADC_MspInit+0x84>)
 8000a4c:	2180      	movs	r1, #128	@ 0x80
 8000a4e:	0349      	lsls	r1, r1, #13
 8000a50:	430a      	orrs	r2, r1
 8000a52:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a54:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <HAL_ADC_MspInit+0x84>)
 8000a56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a58:	2380      	movs	r3, #128	@ 0x80
 8000a5a:	035b      	lsls	r3, r3, #13
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <HAL_ADC_MspInit+0x84>)
 8000a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a66:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <HAL_ADC_MspInit+0x84>)
 8000a68:	2101      	movs	r1, #1
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <HAL_ADC_MspInit+0x84>)
 8000a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a72:	2201      	movs	r2, #1
 8000a74:	4013      	ands	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	2203      	movs	r2, #3
 8000a84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	193a      	adds	r2, r7, r4
 8000a8e:	23a0      	movs	r3, #160	@ 0xa0
 8000a90:	05db      	lsls	r3, r3, #23
 8000a92:	0011      	movs	r1, r2
 8000a94:	0018      	movs	r0, r3
 8000a96:	f001 fb2b 	bl	80020f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b00b      	add	sp, #44	@ 0x2c
 8000aa0:	bd90      	pop	{r4, r7, pc}
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	40012400 	.word	0x40012400
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b097      	sub	sp, #92	@ 0x5c
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	2344      	movs	r3, #68	@ 0x44
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	0018      	movs	r0, r3
 8000aba:	2314      	movs	r3, #20
 8000abc:	001a      	movs	r2, r3
 8000abe:	2100      	movs	r1, #0
 8000ac0:	f003 fa86 	bl	8003fd0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac4:	2410      	movs	r4, #16
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	0018      	movs	r0, r3
 8000aca:	2334      	movs	r3, #52	@ 0x34
 8000acc:	001a      	movs	r2, r3
 8000ace:	2100      	movs	r1, #0
 8000ad0:	f003 fa7e 	bl	8003fd0 <memset>
  if(huart->Instance==USART2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a22      	ldr	r2, [pc, #136]	@ (8000b64 <HAL_UART_MspInit+0xb8>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d13e      	bne.n	8000b5c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	0018      	movs	r0, r3
 8000aee:	f002 f991 	bl	8002e14 <HAL_RCCEx_PeriphCLKConfig>
 8000af2:	1e03      	subs	r3, r0, #0
 8000af4:	d001      	beq.n	8000afa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000af6:	f7ff ff67 	bl	80009c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000afa:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <HAL_UART_MspInit+0xbc>)
 8000afc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000afe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <HAL_UART_MspInit+0xbc>)
 8000b00:	2180      	movs	r1, #128	@ 0x80
 8000b02:	0289      	lsls	r1, r1, #10
 8000b04:	430a      	orrs	r2, r1
 8000b06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b08:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <HAL_UART_MspInit+0xbc>)
 8000b0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b0c:	2380      	movs	r3, #128	@ 0x80
 8000b0e:	029b      	lsls	r3, r3, #10
 8000b10:	4013      	ands	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <HAL_UART_MspInit+0xbc>)
 8000b18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b1a:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <HAL_UART_MspInit+0xbc>)
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <HAL_UART_MspInit+0xbc>)
 8000b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b26:	2201      	movs	r2, #1
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b2e:	2144      	movs	r1, #68	@ 0x44
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	220c      	movs	r2, #12
 8000b34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2202      	movs	r2, #2
 8000b3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2201      	movs	r2, #1
 8000b40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	187a      	adds	r2, r7, r1
 8000b50:	23a0      	movs	r3, #160	@ 0xa0
 8000b52:	05db      	lsls	r3, r3, #23
 8000b54:	0011      	movs	r1, r2
 8000b56:	0018      	movs	r0, r3
 8000b58:	f001 faca 	bl	80020f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b5c:	46c0      	nop			@ (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b017      	add	sp, #92	@ 0x5c
 8000b62:	bd90      	pop	{r4, r7, pc}
 8000b64:	40004400 	.word	0x40004400
 8000b68:	40021000 	.word	0x40021000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	e7fd      	b.n	8000b70 <NMI_Handler+0x4>

08000b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b78:	46c0      	nop			@ (mov r8, r8)
 8000b7a:	e7fd      	b.n	8000b78 <HardFault_Handler+0x4>

08000b7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b94:	f000 f8d4 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b98:	46c0      	nop			@ (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	@ (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	@ (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	@ (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	18d3      	adds	r3, r2, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d207      	bcs.n	8000be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd0:	f003 fa06 	bl	8003fe0 <__errno>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	425b      	negs	r3, r3
 8000bde:	e009      	b.n	8000bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be0:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be6:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	18d2      	adds	r2, r2, r3
 8000bee:	4b05      	ldr	r3, [pc, #20]	@ (8000c04 <_sbrk+0x64>)
 8000bf0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b006      	add	sp, #24
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20009000 	.word	0x20009000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	20000170 	.word	0x20000170
 8000c08:	200002c0 	.word	0x200002c0

08000c0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	46c0      	nop			@ (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c18:	480d      	ldr	r0, [pc, #52]	@ (8000c50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c1c:	f7ff fff6 	bl	8000c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	@ (8000c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <LoopForever+0xe>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	@ (8000c64 <LoopForever+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c46:	f003 f9d1 	bl	8003fec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c4a:	f7ff fcf1 	bl	8000630 <main>

08000c4e <LoopForever>:

LoopForever:
  b LoopForever
 8000c4e:	e7fe      	b.n	8000c4e <LoopForever>
  ldr   r0, =_estack
 8000c50:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c5c:	080049c4 	.word	0x080049c4
  ldr r2, =_sbss
 8000c60:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c64:	200002c0 	.word	0x200002c0

08000c68 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_COMP_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <HAL_Init+0x3c>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <HAL_Init+0x3c>)
 8000c7e:	2180      	movs	r1, #128	@ 0x80
 8000c80:	0049      	lsls	r1, r1, #1
 8000c82:	430a      	orrs	r2, r1
 8000c84:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c86:	2000      	movs	r0, #0
 8000c88:	f000 f810 	bl	8000cac <HAL_InitTick>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
 8000c96:	e001      	b.n	8000c9c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f7ff fe9c 	bl	80009d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	781b      	ldrb	r3, [r3, #0]
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b002      	add	sp, #8
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40022000 	.word	0x40022000

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <HAL_InitTick+0x88>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d02b      	beq.n	8000d1c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <HAL_InitTick+0x8c>)
 8000cc6:	681c      	ldr	r4, [r3, #0]
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <HAL_InitTick+0x88>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	0019      	movs	r1, r3
 8000cce:	23fa      	movs	r3, #250	@ 0xfa
 8000cd0:	0098      	lsls	r0, r3, #2
 8000cd2:	f7ff fa21 	bl	8000118 <__udivsi3>
 8000cd6:	0003      	movs	r3, r0
 8000cd8:	0019      	movs	r1, r3
 8000cda:	0020      	movs	r0, r4
 8000cdc:	f7ff fa1c 	bl	8000118 <__udivsi3>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f001 f9f7 	bl	80020d6 <HAL_SYSTICK_Config>
 8000ce8:	1e03      	subs	r3, r0, #0
 8000cea:	d112      	bne.n	8000d12 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d80a      	bhi.n	8000d08 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	425b      	negs	r3, r3
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f001 f9d6 	bl	80020ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <HAL_InitTick+0x90>)
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	e00d      	b.n	8000d24 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d08:	230f      	movs	r3, #15
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e008      	b.n	8000d24 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d12:	230f      	movs	r3, #15
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e003      	b.n	8000d24 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	18fb      	adds	r3, r7, r3
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d24:	230f      	movs	r3, #15
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	781b      	ldrb	r3, [r3, #0]
}
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b005      	add	sp, #20
 8000d30:	bd90      	pop	{r4, r7, pc}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000004 	.word	0x20000004

08000d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <HAL_IncTick+0x1c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	001a      	movs	r2, r3
 8000d4a:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <HAL_IncTick+0x20>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	18d2      	adds	r2, r2, r3
 8000d50:	4b03      	ldr	r3, [pc, #12]	@ (8000d60 <HAL_IncTick+0x20>)
 8000d52:	601a      	str	r2, [r3, #0]
}
 8000d54:	46c0      	nop			@ (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000174 	.word	0x20000174

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b02      	ldr	r3, [pc, #8]	@ (8000d74 <HAL_GetTick+0x10>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	20000174 	.word	0x20000174

08000d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d80:	f7ff fff0 	bl	8000d64 <HAL_GetTick>
 8000d84:	0003      	movs	r3, r0
 8000d86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	d005      	beq.n	8000d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d92:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <HAL_Delay+0x44>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	001a      	movs	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	189b      	adds	r3, r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	f7ff ffe0 	bl	8000d64 <HAL_GetTick>
 8000da4:	0002      	movs	r2, r0
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d8f7      	bhi.n	8000da0 <HAL_Delay+0x28>
  {
  }
}
 8000db0:	46c0      	nop			@ (mov r8, r8)
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b004      	add	sp, #16
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a06      	ldr	r2, [pc, #24]	@ (8000de8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000dce:	4013      	ands	r3, r2
 8000dd0:	0019      	movs	r1, r3
 8000dd2:	4b04      	ldr	r3, [pc, #16]	@ (8000de4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]
}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	40010000 	.word	0x40010000
 8000de8:	fffff9ff 	.word	0xfffff9ff

08000dec <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	431a      	orrs	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	601a      	str	r2, [r3, #0]
}
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	fe3fffff 	.word	0xfe3fffff

08000e14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	23e0      	movs	r3, #224	@ 0xe0
 8000e22:	045b      	lsls	r3, r3, #17
 8000e24:	4013      	ands	r3, r2
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	2104      	movs	r1, #4
 8000e42:	400a      	ands	r2, r1
 8000e44:	2107      	movs	r1, #7
 8000e46:	4091      	lsls	r1, r2
 8000e48:	000a      	movs	r2, r1
 8000e4a:	43d2      	mvns	r2, r2
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	2104      	movs	r1, #4
 8000e52:	400b      	ands	r3, r1
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	4099      	lsls	r1, r3
 8000e58:	000b      	movs	r3, r1
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000e60:	46c0      	nop			@ (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b004      	add	sp, #16
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	2104      	movs	r1, #4
 8000e7a:	400a      	ands	r2, r1
 8000e7c:	2107      	movs	r1, #7
 8000e7e:	4091      	lsls	r1, r2
 8000e80:	000a      	movs	r2, r1
 8000e82:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	2104      	movs	r1, #4
 8000e88:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e8a:	40da      	lsrs	r2, r3
 8000e8c:	0013      	movs	r3, r2
}
 8000e8e:	0018      	movs	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b002      	add	sp, #8
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	23c0      	movs	r3, #192	@ 0xc0
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	d101      	bne.n	8000eae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b002      	add	sp, #8
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec8:	68ba      	ldr	r2, [r7, #8]
 8000eca:	211f      	movs	r1, #31
 8000ecc:	400a      	ands	r2, r1
 8000ece:	210f      	movs	r1, #15
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	000a      	movs	r2, r1
 8000ed4:	43d2      	mvns	r2, r2
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	0e9b      	lsrs	r3, r3, #26
 8000edc:	210f      	movs	r1, #15
 8000ede:	4019      	ands	r1, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	201f      	movs	r0, #31
 8000ee4:	4003      	ands	r3, r0
 8000ee6:	4099      	lsls	r1, r3
 8000ee8:	000b      	movs	r3, r1
 8000eea:	431a      	orrs	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ef0:	46c0      	nop			@ (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b004      	add	sp, #16
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	035b      	lsls	r3, r3, #13
 8000f0a:	0b5b      	lsrs	r3, r3, #13
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	0352      	lsls	r2, r2, #13
 8000f2c:	0b52      	lsrs	r2, r2, #13
 8000f2e:	43d2      	mvns	r2, r2
 8000f30:	401a      	ands	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b002      	add	sp, #8
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	0212      	lsls	r2, r2, #8
 8000f54:	43d2      	mvns	r2, r2
 8000f56:	401a      	ands	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
 8000f60:	4904      	ldr	r1, [pc, #16]	@ (8000f74 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000f62:	400b      	ands	r3, r1
 8000f64:	431a      	orrs	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b004      	add	sp, #16
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	07ffff00 	.word	0x07ffff00

08000f78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	4a05      	ldr	r2, [pc, #20]	@ (8000f9c <LL_ADC_EnableInternalRegulator+0x24>)
 8000f86:	4013      	ands	r3, r2
 8000f88:	2280      	movs	r2, #128	@ 0x80
 8000f8a:	0552      	lsls	r2, r2, #21
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	6fffffe8 	.word	0x6fffffe8

08000fa0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	055b      	lsls	r3, r3, #21
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	2380      	movs	r3, #128	@ 0x80
 8000fb4:	055b      	lsls	r3, r3, #21
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d101      	bne.n	8000fbe <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b002      	add	sp, #8
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	4a04      	ldr	r2, [pc, #16]	@ (8000fe8 <LL_ADC_Enable+0x20>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2201      	movs	r2, #1
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fe0:	46c0      	nop			@ (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b002      	add	sp, #8
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	7fffffe8 	.word	0x7fffffe8

08000fec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	4a04      	ldr	r2, [pc, #16]	@ (800100c <LL_ADC_Disable+0x20>)
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001004:	46c0      	nop			@ (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}
 800100c:	7fffffe8 	.word	0x7fffffe8

08001010 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	2201      	movs	r2, #1
 800101e:	4013      	ands	r3, r2
 8001020:	2b01      	cmp	r3, #1
 8001022:	d101      	bne.n	8001028 <LL_ADC_IsEnabled+0x18>
 8001024:	2301      	movs	r3, #1
 8001026:	e000      	b.n	800102a <LL_ADC_IsEnabled+0x1a>
 8001028:	2300      	movs	r3, #0
}
 800102a:	0018      	movs	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	b002      	add	sp, #8
 8001030:	bd80      	pop	{r7, pc}

08001032 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2202      	movs	r2, #2
 8001040:	4013      	ands	r3, r2
 8001042:	2b02      	cmp	r3, #2
 8001044:	d101      	bne.n	800104a <LL_ADC_IsDisableOngoing+0x18>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <LL_ADC_IsDisableOngoing+0x1a>
 800104a:	2300      	movs	r3, #0
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b002      	add	sp, #8
 8001052:	bd80      	pop	{r7, pc}

08001054 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <LL_ADC_REG_StartConversion+0x20>)
 8001062:	4013      	ands	r3, r2
 8001064:	2204      	movs	r2, #4
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800106c:	46c0      	nop			@ (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}
 8001074:	7fffffe8 	.word	0x7fffffe8

08001078 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	4a04      	ldr	r2, [pc, #16]	@ (8001098 <LL_ADC_REG_StopConversion+0x20>)
 8001086:	4013      	ands	r3, r2
 8001088:	2210      	movs	r2, #16
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001090:	46c0      	nop			@ (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b002      	add	sp, #8
 8001096:	bd80      	pop	{r7, pc}
 8001098:	7fffffe8 	.word	0x7fffffe8

0800109c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	2204      	movs	r2, #4
 80010aa:	4013      	ands	r3, r2
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d101      	bne.n	80010b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010b0:	2301      	movs	r3, #1
 80010b2:	e000      	b.n	80010b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	0018      	movs	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b002      	add	sp, #8
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c8:	231f      	movs	r3, #31
 80010ca:	18fb      	adds	r3, r7, r3
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e17f      	b.n	80013e6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10a      	bne.n	8001104 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	0018      	movs	r0, r3
 80010f2:	f7ff fc97 	bl	8000a24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2254      	movs	r2, #84	@ 0x54
 8001100:	2100      	movs	r1, #0
 8001102:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff ff49 	bl	8000fa0 <LL_ADC_IsInternalRegulatorEnabled>
 800110e:	1e03      	subs	r3, r0, #0
 8001110:	d115      	bne.n	800113e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	0018      	movs	r0, r3
 8001118:	f7ff ff2e 	bl	8000f78 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800111c:	4bb4      	ldr	r3, [pc, #720]	@ (80013f0 <HAL_ADC_Init+0x330>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	49b4      	ldr	r1, [pc, #720]	@ (80013f4 <HAL_ADC_Init+0x334>)
 8001122:	0018      	movs	r0, r3
 8001124:	f7fe fff8 	bl	8000118 <__udivsi3>
 8001128:	0003      	movs	r3, r0
 800112a:	3301      	adds	r3, #1
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001130:	e002      	b.n	8001138 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3b01      	subs	r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f9      	bne.n	8001132 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	0018      	movs	r0, r3
 8001144:	f7ff ff2c 	bl	8000fa0 <LL_ADC_IsInternalRegulatorEnabled>
 8001148:	1e03      	subs	r3, r0, #0
 800114a:	d10f      	bne.n	800116c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001150:	2210      	movs	r2, #16
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800115c:	2201      	movs	r2, #1
 800115e:	431a      	orrs	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001164:	231f      	movs	r3, #31
 8001166:	18fb      	adds	r3, r7, r3
 8001168:	2201      	movs	r2, #1
 800116a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	0018      	movs	r0, r3
 8001172:	f7ff ff93 	bl	800109c <LL_ADC_REG_IsConversionOngoing>
 8001176:	0003      	movs	r3, r0
 8001178:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117e:	2210      	movs	r2, #16
 8001180:	4013      	ands	r3, r2
 8001182:	d000      	beq.n	8001186 <HAL_ADC_Init+0xc6>
 8001184:	e122      	b.n	80013cc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d000      	beq.n	800118e <HAL_ADC_Init+0xce>
 800118c:	e11e      	b.n	80013cc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001192:	4a99      	ldr	r2, [pc, #612]	@ (80013f8 <HAL_ADC_Init+0x338>)
 8001194:	4013      	ands	r3, r2
 8001196:	2202      	movs	r2, #2
 8001198:	431a      	orrs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff ff34 	bl	8001010 <LL_ADC_IsEnabled>
 80011a8:	1e03      	subs	r3, r0, #0
 80011aa:	d000      	beq.n	80011ae <HAL_ADC_Init+0xee>
 80011ac:	e0ad      	b.n	800130a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7e1b      	ldrb	r3, [r3, #24]
 80011b6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80011b8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7e5b      	ldrb	r3, [r3, #25]
 80011be:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011c0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7e9b      	ldrb	r3, [r3, #26]
 80011c6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011c8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <HAL_ADC_Init+0x118>
 80011d2:	2380      	movs	r3, #128	@ 0x80
 80011d4:	015b      	lsls	r3, r3, #5
 80011d6:	e000      	b.n	80011da <HAL_ADC_Init+0x11a>
 80011d8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011da:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011e0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	da04      	bge.n	80011f4 <HAL_ADC_Init+0x134>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	085b      	lsrs	r3, r3, #1
 80011f2:	e001      	b.n	80011f8 <HAL_ADC_Init+0x138>
 80011f4:	2380      	movs	r3, #128	@ 0x80
 80011f6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80011f8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	212c      	movs	r1, #44	@ 0x2c
 80011fe:	5c5b      	ldrb	r3, [r3, r1]
 8001200:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001202:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2220      	movs	r2, #32
 800120e:	5c9b      	ldrb	r3, [r3, r2]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d115      	bne.n	8001240 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7e9b      	ldrb	r3, [r3, #26]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d105      	bne.n	8001228 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	2280      	movs	r2, #128	@ 0x80
 8001220:	0252      	lsls	r2, r2, #9
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
 8001226:	e00b      	b.n	8001240 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122c:	2220      	movs	r2, #32
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001238:	2201      	movs	r2, #1
 800123a:	431a      	orrs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00a      	beq.n	800125e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800124c:	23e0      	movs	r3, #224	@ 0xe0
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001256:	4313      	orrs	r3, r2
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	4a65      	ldr	r2, [pc, #404]	@ (80013fc <HAL_ADC_Init+0x33c>)
 8001266:	4013      	ands	r3, r2
 8001268:	0019      	movs	r1, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	430a      	orrs	r2, r1
 8001272:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	0f9b      	lsrs	r3, r3, #30
 800127a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001280:	4313      	orrs	r3, r2
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4313      	orrs	r3, r2
 8001286:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	223c      	movs	r2, #60	@ 0x3c
 800128c:	5c9b      	ldrb	r3, [r3, r2]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d111      	bne.n	80012b6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	0f9b      	lsrs	r3, r3, #30
 8001298:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800129e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80012a4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80012aa:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	2201      	movs	r2, #1
 80012b2:	4313      	orrs	r3, r2
 80012b4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	4a50      	ldr	r2, [pc, #320]	@ (8001400 <HAL_ADC_Init+0x340>)
 80012be:	4013      	ands	r3, r2
 80012c0:	0019      	movs	r1, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	23c0      	movs	r3, #192	@ 0xc0
 80012d2:	061b      	lsls	r3, r3, #24
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d018      	beq.n	800130a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012dc:	2380      	movs	r3, #128	@ 0x80
 80012de:	05db      	lsls	r3, r3, #23
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d012      	beq.n	800130a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012e8:	2380      	movs	r3, #128	@ 0x80
 80012ea:	061b      	lsls	r3, r3, #24
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d00c      	beq.n	800130a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80012f0:	4b44      	ldr	r3, [pc, #272]	@ (8001404 <HAL_ADC_Init+0x344>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a44      	ldr	r2, [pc, #272]	@ (8001408 <HAL_ADC_Init+0x348>)
 80012f6:	4013      	ands	r3, r2
 80012f8:	0019      	movs	r1, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	23f0      	movs	r3, #240	@ 0xf0
 8001300:	039b      	lsls	r3, r3, #14
 8001302:	401a      	ands	r2, r3
 8001304:	4b3f      	ldr	r3, [pc, #252]	@ (8001404 <HAL_ADC_Init+0x344>)
 8001306:	430a      	orrs	r2, r1
 8001308:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001312:	001a      	movs	r2, r3
 8001314:	2100      	movs	r1, #0
 8001316:	f7ff fd8a 	bl	8000e2e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001322:	493a      	ldr	r1, [pc, #232]	@ (800140c <HAL_ADC_Init+0x34c>)
 8001324:	001a      	movs	r2, r3
 8001326:	f7ff fd82 	bl	8000e2e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d109      	bne.n	8001346 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2110      	movs	r1, #16
 800133e:	4249      	negs	r1, r1
 8001340:	430a      	orrs	r2, r1
 8001342:	629a      	str	r2, [r3, #40]	@ 0x28
 8001344:	e018      	b.n	8001378 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691a      	ldr	r2, [r3, #16]
 800134a:	2380      	movs	r3, #128	@ 0x80
 800134c:	039b      	lsls	r3, r3, #14
 800134e:	429a      	cmp	r2, r3
 8001350:	d112      	bne.n	8001378 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	3b01      	subs	r3, #1
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	221c      	movs	r2, #28
 8001362:	4013      	ands	r3, r2
 8001364:	2210      	movs	r2, #16
 8001366:	4252      	negs	r2, r2
 8001368:	409a      	lsls	r2, r3
 800136a:	0011      	movs	r1, r2
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2100      	movs	r1, #0
 800137e:	0018      	movs	r0, r3
 8001380:	f7ff fd72 	bl	8000e68 <LL_ADC_GetSamplingTimeCommonChannels>
 8001384:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800138a:	429a      	cmp	r2, r3
 800138c:	d10b      	bne.n	80013a6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001398:	2203      	movs	r2, #3
 800139a:	4393      	bics	r3, r2
 800139c:	2201      	movs	r2, #1
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013a4:	e01c      	b.n	80013e0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013aa:	2212      	movs	r2, #18
 80013ac:	4393      	bics	r3, r2
 80013ae:	2210      	movs	r2, #16
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ba:	2201      	movs	r2, #1
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80013c2:	231f      	movs	r3, #31
 80013c4:	18fb      	adds	r3, r7, r3
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013ca:	e009      	b.n	80013e0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d0:	2210      	movs	r2, #16
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80013d8:	231f      	movs	r3, #31
 80013da:	18fb      	adds	r3, r7, r3
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80013e0:	231f      	movs	r3, #31
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	781b      	ldrb	r3, [r3, #0]
}
 80013e6:	0018      	movs	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b008      	add	sp, #32
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	20000000 	.word	0x20000000
 80013f4:	00030d40 	.word	0x00030d40
 80013f8:	fffffefd 	.word	0xfffffefd
 80013fc:	ffde0201 	.word	0xffde0201
 8001400:	1ffffc02 	.word	0x1ffffc02
 8001404:	40012708 	.word	0x40012708
 8001408:	ffc3ffff 	.word	0xffc3ffff
 800140c:	07ffff04 	.word	0x07ffff04

08001410 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001410:	b5b0      	push	{r4, r5, r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff fe3d 	bl	800109c <LL_ADC_REG_IsConversionOngoing>
 8001422:	1e03      	subs	r3, r0, #0
 8001424:	d135      	bne.n	8001492 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2254      	movs	r2, #84	@ 0x54
 800142a:	5c9b      	ldrb	r3, [r3, r2]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_ADC_Start+0x24>
 8001430:	2302      	movs	r3, #2
 8001432:	e035      	b.n	80014a0 <HAL_ADC_Start+0x90>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2254      	movs	r2, #84	@ 0x54
 8001438:	2101      	movs	r1, #1
 800143a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800143c:	250f      	movs	r5, #15
 800143e:	197c      	adds	r4, r7, r5
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	0018      	movs	r0, r3
 8001444:	f000 fb28 	bl	8001a98 <ADC_Enable>
 8001448:	0003      	movs	r3, r0
 800144a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800144c:	197b      	adds	r3, r7, r5
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d119      	bne.n	8001488 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001458:	4a13      	ldr	r2, [pc, #76]	@ (80014a8 <HAL_ADC_Start+0x98>)
 800145a:	4013      	ands	r3, r2
 800145c:	2280      	movs	r2, #128	@ 0x80
 800145e:	0052      	lsls	r2, r2, #1
 8001460:	431a      	orrs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	221c      	movs	r2, #28
 8001472:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2254      	movs	r2, #84	@ 0x54
 8001478:	2100      	movs	r1, #0
 800147a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0018      	movs	r0, r3
 8001482:	f7ff fde7 	bl	8001054 <LL_ADC_REG_StartConversion>
 8001486:	e008      	b.n	800149a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2254      	movs	r2, #84	@ 0x54
 800148c:	2100      	movs	r1, #0
 800148e:	5499      	strb	r1, [r3, r2]
 8001490:	e003      	b.n	800149a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001492:	230f      	movs	r3, #15
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	2202      	movs	r2, #2
 8001498:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800149a:	230f      	movs	r3, #15
 800149c:	18fb      	adds	r3, r7, r3
 800149e:	781b      	ldrb	r3, [r3, #0]
}
 80014a0:	0018      	movs	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b004      	add	sp, #16
 80014a6:	bdb0      	pop	{r4, r5, r7, pc}
 80014a8:	fffff0fe 	.word	0xfffff0fe

080014ac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80014ac:	b5b0      	push	{r4, r5, r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2254      	movs	r2, #84	@ 0x54
 80014b8:	5c9b      	ldrb	r3, [r3, r2]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d101      	bne.n	80014c2 <HAL_ADC_Stop+0x16>
 80014be:	2302      	movs	r3, #2
 80014c0:	e029      	b.n	8001516 <HAL_ADC_Stop+0x6a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2254      	movs	r2, #84	@ 0x54
 80014c6:	2101      	movs	r1, #1
 80014c8:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80014ca:	250f      	movs	r5, #15
 80014cc:	197c      	adds	r4, r7, r5
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	0018      	movs	r0, r3
 80014d2:	f000 fa9f 	bl	8001a14 <ADC_ConversionStop>
 80014d6:	0003      	movs	r3, r0
 80014d8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80014da:	197b      	adds	r3, r7, r5
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d112      	bne.n	8001508 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80014e2:	197c      	adds	r4, r7, r5
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	0018      	movs	r0, r3
 80014e8:	f000 fb5c 	bl	8001ba4 <ADC_Disable>
 80014ec:	0003      	movs	r3, r0
 80014ee:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80014f0:	197b      	adds	r3, r7, r5
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d107      	bne.n	8001508 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fc:	4a08      	ldr	r2, [pc, #32]	@ (8001520 <HAL_ADC_Stop+0x74>)
 80014fe:	4013      	ands	r3, r2
 8001500:	2201      	movs	r2, #1
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2254      	movs	r2, #84	@ 0x54
 800150c:	2100      	movs	r1, #0
 800150e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001510:	230f      	movs	r3, #15
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	781b      	ldrb	r3, [r3, #0]
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b004      	add	sp, #16
 800151c:	bdb0      	pop	{r4, r5, r7, pc}
 800151e:	46c0      	nop			@ (mov r8, r8)
 8001520:	fffffefe 	.word	0xfffffefe

08001524 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	2b08      	cmp	r3, #8
 8001534:	d102      	bne.n	800153c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001536:	2308      	movs	r3, #8
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	e00f      	b.n	800155c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2201      	movs	r2, #1
 8001544:	4013      	ands	r3, r2
 8001546:	d007      	beq.n	8001558 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154c:	2220      	movs	r2, #32
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e072      	b.n	800163e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001558:	2304      	movs	r3, #4
 800155a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800155c:	f7ff fc02 	bl	8000d64 <HAL_GetTick>
 8001560:	0003      	movs	r3, r0
 8001562:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001564:	e01f      	b.n	80015a6 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	d01c      	beq.n	80015a6 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800156c:	f7ff fbfa 	bl	8000d64 <HAL_GetTick>
 8001570:	0002      	movs	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d302      	bcc.n	8001582 <HAL_ADC_PollForConversion+0x5e>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d111      	bne.n	80015a6 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	4013      	ands	r3, r2
 800158c:	d10b      	bne.n	80015a6 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001592:	2204      	movs	r2, #4
 8001594:	431a      	orrs	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2254      	movs	r2, #84	@ 0x54
 800159e:	2100      	movs	r1, #0
 80015a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e04b      	b.n	800163e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	4013      	ands	r3, r2
 80015b0:	d0d9      	beq.n	8001566 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b6:	2280      	movs	r2, #128	@ 0x80
 80015b8:	0092      	lsls	r2, r2, #2
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7ff fc66 	bl	8000e96 <LL_ADC_REG_IsTriggerSourceSWStart>
 80015ca:	1e03      	subs	r3, r0, #0
 80015cc:	d02e      	beq.n	800162c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	7e9b      	ldrb	r3, [r3, #26]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d12a      	bne.n	800162c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2208      	movs	r2, #8
 80015de:	4013      	ands	r3, r2
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d123      	bne.n	800162c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff fd57 	bl	800109c <LL_ADC_REG_IsConversionOngoing>
 80015ee:	1e03      	subs	r3, r0, #0
 80015f0:	d110      	bne.n	8001614 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	210c      	movs	r1, #12
 80015fe:	438a      	bics	r2, r1
 8001600:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001606:	4a10      	ldr	r2, [pc, #64]	@ (8001648 <HAL_ADC_PollForConversion+0x124>)
 8001608:	4013      	ands	r3, r2
 800160a:	2201      	movs	r2, #1
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	659a      	str	r2, [r3, #88]	@ 0x58
 8001612:	e00b      	b.n	800162c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001618:	2220      	movs	r2, #32
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001624:	2201      	movs	r2, #1
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7e1b      	ldrb	r3, [r3, #24]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d103      	bne.n	800163c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	220c      	movs	r2, #12
 800163a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	0018      	movs	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	b004      	add	sp, #16
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	fffffefe 	.word	0xfffffefe

0800164c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800165a:	0018      	movs	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	b002      	add	sp, #8
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800166e:	2317      	movs	r3, #23
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2254      	movs	r2, #84	@ 0x54
 800167e:	5c9b      	ldrb	r3, [r3, r2]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x24>
 8001684:	2302      	movs	r3, #2
 8001686:	e1c0      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x3a6>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2254      	movs	r2, #84	@ 0x54
 800168c:	2101      	movs	r1, #1
 800168e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	0018      	movs	r0, r3
 8001696:	f7ff fd01 	bl	800109c <LL_ADC_REG_IsConversionOngoing>
 800169a:	1e03      	subs	r3, r0, #0
 800169c:	d000      	beq.n	80016a0 <HAL_ADC_ConfigChannel+0x3c>
 800169e:	e1a3      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d100      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x46>
 80016a8:	e143      	b.n	8001932 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691a      	ldr	r2, [r3, #16]
 80016ae:	2380      	movs	r3, #128	@ 0x80
 80016b0:	061b      	lsls	r3, r3, #24
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d004      	beq.n	80016c0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80016ba:	4ac1      	ldr	r2, [pc, #772]	@ (80019c0 <HAL_ADC_ConfigChannel+0x35c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d108      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	0019      	movs	r1, r3
 80016ca:	0010      	movs	r0, r2
 80016cc:	f7ff fc14 	bl	8000ef8 <LL_ADC_REG_SetSequencerChAdd>
 80016d0:	e0c9      	b.n	8001866 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	211f      	movs	r1, #31
 80016dc:	400b      	ands	r3, r1
 80016de:	210f      	movs	r1, #15
 80016e0:	4099      	lsls	r1, r3
 80016e2:	000b      	movs	r3, r1
 80016e4:	43db      	mvns	r3, r3
 80016e6:	4013      	ands	r3, r2
 80016e8:	0019      	movs	r1, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	035b      	lsls	r3, r3, #13
 80016f0:	0b5b      	lsrs	r3, r3, #13
 80016f2:	d105      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x9c>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	0e9b      	lsrs	r3, r3, #26
 80016fa:	221f      	movs	r2, #31
 80016fc:	4013      	ands	r3, r2
 80016fe:	e098      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2201      	movs	r2, #1
 8001706:	4013      	ands	r3, r2
 8001708:	d000      	beq.n	800170c <HAL_ADC_ConfigChannel+0xa8>
 800170a:	e091      	b.n	8001830 <HAL_ADC_ConfigChannel+0x1cc>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2202      	movs	r2, #2
 8001712:	4013      	ands	r3, r2
 8001714:	d000      	beq.n	8001718 <HAL_ADC_ConfigChannel+0xb4>
 8001716:	e089      	b.n	800182c <HAL_ADC_ConfigChannel+0x1c8>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2204      	movs	r2, #4
 800171e:	4013      	ands	r3, r2
 8001720:	d000      	beq.n	8001724 <HAL_ADC_ConfigChannel+0xc0>
 8001722:	e081      	b.n	8001828 <HAL_ADC_ConfigChannel+0x1c4>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2208      	movs	r2, #8
 800172a:	4013      	ands	r3, r2
 800172c:	d000      	beq.n	8001730 <HAL_ADC_ConfigChannel+0xcc>
 800172e:	e079      	b.n	8001824 <HAL_ADC_ConfigChannel+0x1c0>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2210      	movs	r2, #16
 8001736:	4013      	ands	r3, r2
 8001738:	d000      	beq.n	800173c <HAL_ADC_ConfigChannel+0xd8>
 800173a:	e071      	b.n	8001820 <HAL_ADC_ConfigChannel+0x1bc>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2220      	movs	r2, #32
 8001742:	4013      	ands	r3, r2
 8001744:	d000      	beq.n	8001748 <HAL_ADC_ConfigChannel+0xe4>
 8001746:	e069      	b.n	800181c <HAL_ADC_ConfigChannel+0x1b8>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2240      	movs	r2, #64	@ 0x40
 800174e:	4013      	ands	r3, r2
 8001750:	d000      	beq.n	8001754 <HAL_ADC_ConfigChannel+0xf0>
 8001752:	e061      	b.n	8001818 <HAL_ADC_ConfigChannel+0x1b4>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2280      	movs	r2, #128	@ 0x80
 800175a:	4013      	ands	r3, r2
 800175c:	d000      	beq.n	8001760 <HAL_ADC_ConfigChannel+0xfc>
 800175e:	e059      	b.n	8001814 <HAL_ADC_ConfigChannel+0x1b0>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	2380      	movs	r3, #128	@ 0x80
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4013      	ands	r3, r2
 800176a:	d151      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x1ac>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d149      	bne.n	800180c <HAL_ADC_ConfigChannel+0x1a8>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2380      	movs	r3, #128	@ 0x80
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4013      	ands	r3, r2
 8001782:	d141      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1a4>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	2380      	movs	r3, #128	@ 0x80
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	4013      	ands	r3, r2
 800178e:	d139      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x1a0>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	2380      	movs	r3, #128	@ 0x80
 8001796:	015b      	lsls	r3, r3, #5
 8001798:	4013      	ands	r3, r2
 800179a:	d131      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x19c>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2380      	movs	r3, #128	@ 0x80
 80017a2:	019b      	lsls	r3, r3, #6
 80017a4:	4013      	ands	r3, r2
 80017a6:	d129      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x198>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	@ 0x80
 80017ae:	01db      	lsls	r3, r3, #7
 80017b0:	4013      	ands	r3, r2
 80017b2:	d121      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x194>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2380      	movs	r3, #128	@ 0x80
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	4013      	ands	r3, r2
 80017be:	d119      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x190>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2380      	movs	r3, #128	@ 0x80
 80017c6:	025b      	lsls	r3, r3, #9
 80017c8:	4013      	ands	r3, r2
 80017ca:	d111      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x18c>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2380      	movs	r3, #128	@ 0x80
 80017d2:	029b      	lsls	r3, r3, #10
 80017d4:	4013      	ands	r3, r2
 80017d6:	d109      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x188>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	2380      	movs	r3, #128	@ 0x80
 80017de:	02db      	lsls	r3, r3, #11
 80017e0:	4013      	ands	r3, r2
 80017e2:	d001      	beq.n	80017e8 <HAL_ADC_ConfigChannel+0x184>
 80017e4:	2312      	movs	r3, #18
 80017e6:	e024      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 80017e8:	2300      	movs	r3, #0
 80017ea:	e022      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 80017ec:	2311      	movs	r3, #17
 80017ee:	e020      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 80017f0:	2310      	movs	r3, #16
 80017f2:	e01e      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 80017f4:	230f      	movs	r3, #15
 80017f6:	e01c      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 80017f8:	230e      	movs	r3, #14
 80017fa:	e01a      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 80017fc:	230d      	movs	r3, #13
 80017fe:	e018      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 8001800:	230c      	movs	r3, #12
 8001802:	e016      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 8001804:	230b      	movs	r3, #11
 8001806:	e014      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 8001808:	230a      	movs	r3, #10
 800180a:	e012      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 800180c:	2309      	movs	r3, #9
 800180e:	e010      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 8001810:	2308      	movs	r3, #8
 8001812:	e00e      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 8001814:	2307      	movs	r3, #7
 8001816:	e00c      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 8001818:	2306      	movs	r3, #6
 800181a:	e00a      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 800181c:	2305      	movs	r3, #5
 800181e:	e008      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 8001820:	2304      	movs	r3, #4
 8001822:	e006      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 8001824:	2303      	movs	r3, #3
 8001826:	e004      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 8001828:	2302      	movs	r3, #2
 800182a:	e002      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <HAL_ADC_ConfigChannel+0x1ce>
 8001830:	2300      	movs	r3, #0
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	6852      	ldr	r2, [r2, #4]
 8001836:	201f      	movs	r0, #31
 8001838:	4002      	ands	r2, r0
 800183a:	4093      	lsls	r3, r2
 800183c:	000a      	movs	r2, r1
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	429a      	cmp	r2, r3
 8001852:	d808      	bhi.n	8001866 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	6859      	ldr	r1, [r3, #4]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	001a      	movs	r2, r3
 8001862:	f7ff fb29 	bl	8000eb8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	6819      	ldr	r1, [r3, #0]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	001a      	movs	r2, r3
 8001874:	f7ff fb64 	bl	8000f40 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	db00      	blt.n	8001882 <HAL_ADC_ConfigChannel+0x21e>
 8001880:	e0bc      	b.n	80019fc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001882:	4b50      	ldr	r3, [pc, #320]	@ (80019c4 <HAL_ADC_ConfigChannel+0x360>)
 8001884:	0018      	movs	r0, r3
 8001886:	f7ff fac5 	bl	8000e14 <LL_ADC_GetCommonPathInternalCh>
 800188a:	0003      	movs	r3, r0
 800188c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a4d      	ldr	r2, [pc, #308]	@ (80019c8 <HAL_ADC_ConfigChannel+0x364>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d122      	bne.n	80018de <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	2380      	movs	r3, #128	@ 0x80
 800189c:	041b      	lsls	r3, r3, #16
 800189e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80018a0:	d11d      	bne.n	80018de <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	2280      	movs	r2, #128	@ 0x80
 80018a6:	0412      	lsls	r2, r2, #16
 80018a8:	4313      	orrs	r3, r2
 80018aa:	4a46      	ldr	r2, [pc, #280]	@ (80019c4 <HAL_ADC_ConfigChannel+0x360>)
 80018ac:	0019      	movs	r1, r3
 80018ae:	0010      	movs	r0, r2
 80018b0:	f7ff fa9c 	bl	8000dec <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018b4:	4b45      	ldr	r3, [pc, #276]	@ (80019cc <HAL_ADC_ConfigChannel+0x368>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4945      	ldr	r1, [pc, #276]	@ (80019d0 <HAL_ADC_ConfigChannel+0x36c>)
 80018ba:	0018      	movs	r0, r3
 80018bc:	f7fe fc2c 	bl	8000118 <__udivsi3>
 80018c0:	0003      	movs	r3, r0
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	0013      	movs	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	189b      	adds	r3, r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80018ce:	e002      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f9      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80018dc:	e08e      	b.n	80019fc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a3c      	ldr	r2, [pc, #240]	@ (80019d4 <HAL_ADC_ConfigChannel+0x370>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d10e      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	2380      	movs	r3, #128	@ 0x80
 80018ec:	045b      	lsls	r3, r3, #17
 80018ee:	4013      	ands	r3, r2
 80018f0:	d109      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	2280      	movs	r2, #128	@ 0x80
 80018f6:	0452      	lsls	r2, r2, #17
 80018f8:	4313      	orrs	r3, r2
 80018fa:	4a32      	ldr	r2, [pc, #200]	@ (80019c4 <HAL_ADC_ConfigChannel+0x360>)
 80018fc:	0019      	movs	r1, r3
 80018fe:	0010      	movs	r0, r2
 8001900:	f7ff fa74 	bl	8000dec <LL_ADC_SetCommonPathInternalCh>
 8001904:	e07a      	b.n	80019fc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a33      	ldr	r2, [pc, #204]	@ (80019d8 <HAL_ADC_ConfigChannel+0x374>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d000      	beq.n	8001912 <HAL_ADC_ConfigChannel+0x2ae>
 8001910:	e074      	b.n	80019fc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	2380      	movs	r3, #128	@ 0x80
 8001916:	03db      	lsls	r3, r3, #15
 8001918:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800191a:	d000      	beq.n	800191e <HAL_ADC_ConfigChannel+0x2ba>
 800191c:	e06e      	b.n	80019fc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2280      	movs	r2, #128	@ 0x80
 8001922:	03d2      	lsls	r2, r2, #15
 8001924:	4313      	orrs	r3, r2
 8001926:	4a27      	ldr	r2, [pc, #156]	@ (80019c4 <HAL_ADC_ConfigChannel+0x360>)
 8001928:	0019      	movs	r1, r3
 800192a:	0010      	movs	r0, r2
 800192c:	f7ff fa5e 	bl	8000dec <LL_ADC_SetCommonPathInternalCh>
 8001930:	e064      	b.n	80019fc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691a      	ldr	r2, [r3, #16]
 8001936:	2380      	movs	r3, #128	@ 0x80
 8001938:	061b      	lsls	r3, r3, #24
 800193a:	429a      	cmp	r2, r3
 800193c:	d004      	beq.n	8001948 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001942:	4a1f      	ldr	r2, [pc, #124]	@ (80019c0 <HAL_ADC_ConfigChannel+0x35c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d107      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0019      	movs	r1, r3
 8001952:	0010      	movs	r0, r2
 8001954:	f7ff fae1 	bl	8000f1a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	da4d      	bge.n	80019fc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001960:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <HAL_ADC_ConfigChannel+0x360>)
 8001962:	0018      	movs	r0, r3
 8001964:	f7ff fa56 	bl	8000e14 <LL_ADC_GetCommonPathInternalCh>
 8001968:	0003      	movs	r3, r0
 800196a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a15      	ldr	r2, [pc, #84]	@ (80019c8 <HAL_ADC_ConfigChannel+0x364>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d108      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4a18      	ldr	r2, [pc, #96]	@ (80019dc <HAL_ADC_ConfigChannel+0x378>)
 800197a:	4013      	ands	r3, r2
 800197c:	4a11      	ldr	r2, [pc, #68]	@ (80019c4 <HAL_ADC_ConfigChannel+0x360>)
 800197e:	0019      	movs	r1, r3
 8001980:	0010      	movs	r0, r2
 8001982:	f7ff fa33 	bl	8000dec <LL_ADC_SetCommonPathInternalCh>
 8001986:	e039      	b.n	80019fc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a11      	ldr	r2, [pc, #68]	@ (80019d4 <HAL_ADC_ConfigChannel+0x370>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d108      	bne.n	80019a4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4a12      	ldr	r2, [pc, #72]	@ (80019e0 <HAL_ADC_ConfigChannel+0x37c>)
 8001996:	4013      	ands	r3, r2
 8001998:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <HAL_ADC_ConfigChannel+0x360>)
 800199a:	0019      	movs	r1, r3
 800199c:	0010      	movs	r0, r2
 800199e:	f7ff fa25 	bl	8000dec <LL_ADC_SetCommonPathInternalCh>
 80019a2:	e02b      	b.n	80019fc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0b      	ldr	r2, [pc, #44]	@ (80019d8 <HAL_ADC_ConfigChannel+0x374>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d126      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4a0c      	ldr	r2, [pc, #48]	@ (80019e4 <HAL_ADC_ConfigChannel+0x380>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	4a03      	ldr	r2, [pc, #12]	@ (80019c4 <HAL_ADC_ConfigChannel+0x360>)
 80019b6:	0019      	movs	r1, r3
 80019b8:	0010      	movs	r0, r2
 80019ba:	f7ff fa17 	bl	8000dec <LL_ADC_SetCommonPathInternalCh>
 80019be:	e01d      	b.n	80019fc <HAL_ADC_ConfigChannel+0x398>
 80019c0:	80000004 	.word	0x80000004
 80019c4:	40012708 	.word	0x40012708
 80019c8:	b0001000 	.word	0xb0001000
 80019cc:	20000000 	.word	0x20000000
 80019d0:	00030d40 	.word	0x00030d40
 80019d4:	b8004000 	.word	0xb8004000
 80019d8:	b4002000 	.word	0xb4002000
 80019dc:	ff7fffff 	.word	0xff7fffff
 80019e0:	feffffff 	.word	0xfeffffff
 80019e4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ec:	2220      	movs	r2, #32
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019f4:	2317      	movs	r3, #23
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2254      	movs	r2, #84	@ 0x54
 8001a00:	2100      	movs	r1, #0
 8001a02:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001a04:	2317      	movs	r3, #23
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	781b      	ldrb	r3, [r3, #0]
}
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b006      	add	sp, #24
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			@ (mov r8, r8)

08001a14 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	0018      	movs	r0, r3
 8001a22:	f7ff fb3b 	bl	800109c <LL_ADC_REG_IsConversionOngoing>
 8001a26:	1e03      	subs	r3, r0, #0
 8001a28:	d031      	beq.n	8001a8e <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f7ff faff 	bl	8001032 <LL_ADC_IsDisableOngoing>
 8001a34:	1e03      	subs	r3, r0, #0
 8001a36:	d104      	bne.n	8001a42 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff fb1b 	bl	8001078 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a42:	f7ff f98f 	bl	8000d64 <HAL_GetTick>
 8001a46:	0003      	movs	r3, r0
 8001a48:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001a4a:	e01a      	b.n	8001a82 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001a4c:	f7ff f98a 	bl	8000d64 <HAL_GetTick>
 8001a50:	0002      	movs	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d913      	bls.n	8001a82 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2204      	movs	r2, #4
 8001a62:	4013      	ands	r3, r2
 8001a64:	d00d      	beq.n	8001a82 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a76:	2201      	movs	r2, #1
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e006      	b.n	8001a90 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2204      	movs	r2, #4
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d1de      	bne.n	8001a4c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b004      	add	sp, #16
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f7ff fab1 	bl	8001010 <LL_ADC_IsEnabled>
 8001aae:	1e03      	subs	r3, r0, #0
 8001ab0:	d000      	beq.n	8001ab4 <ADC_Enable+0x1c>
 8001ab2:	e069      	b.n	8001b88 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	4a36      	ldr	r2, [pc, #216]	@ (8001b94 <ADC_Enable+0xfc>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	d00d      	beq.n	8001adc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac4:	2210      	movs	r2, #16
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e056      	b.n	8001b8a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7ff fa71 	bl	8000fc8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8001b98 <ADC_Enable+0x100>)
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f7ff f993 	bl	8000e14 <LL_ADC_GetCommonPathInternalCh>
 8001aee:	0002      	movs	r2, r0
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	041b      	lsls	r3, r3, #16
 8001af4:	4013      	ands	r3, r2
 8001af6:	d00f      	beq.n	8001b18 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001af8:	4b28      	ldr	r3, [pc, #160]	@ (8001b9c <ADC_Enable+0x104>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4928      	ldr	r1, [pc, #160]	@ (8001ba0 <ADC_Enable+0x108>)
 8001afe:	0018      	movs	r0, r3
 8001b00:	f7fe fb0a 	bl	8000118 <__udivsi3>
 8001b04:	0003      	movs	r3, r0
 8001b06:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001b08:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001b0a:	e002      	b.n	8001b12 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f9      	bne.n	8001b0c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7e5b      	ldrb	r3, [r3, #25]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d033      	beq.n	8001b88 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001b20:	f7ff f920 	bl	8000d64 <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b28:	e027      	b.n	8001b7a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f7ff fa6e 	bl	8001010 <LL_ADC_IsEnabled>
 8001b34:	1e03      	subs	r3, r0, #0
 8001b36:	d104      	bne.n	8001b42 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f7ff fa43 	bl	8000fc8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b42:	f7ff f90f 	bl	8000d64 <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d914      	bls.n	8001b7a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2201      	movs	r2, #1
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d00d      	beq.n	8001b7a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b62:	2210      	movs	r2, #16
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6e:	2201      	movs	r2, #1
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e007      	b.n	8001b8a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2201      	movs	r2, #1
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d1d0      	bne.n	8001b2a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b004      	add	sp, #16
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			@ (mov r8, r8)
 8001b94:	80000017 	.word	0x80000017
 8001b98:	40012708 	.word	0x40012708
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	00030d40 	.word	0x00030d40

08001ba4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7ff fa3e 	bl	8001032 <LL_ADC_IsDisableOngoing>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f7ff fa26 	bl	8001010 <LL_ADC_IsEnabled>
 8001bc4:	1e03      	subs	r3, r0, #0
 8001bc6:	d046      	beq.n	8001c56 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d143      	bne.n	8001c56 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2205      	movs	r2, #5
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10d      	bne.n	8001bf8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	0018      	movs	r0, r3
 8001be2:	f7ff fa03 	bl	8000fec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2203      	movs	r2, #3
 8001bec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bee:	f7ff f8b9 	bl	8000d64 <HAL_GetTick>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001bf6:	e028      	b.n	8001c4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c08:	2201      	movs	r2, #1
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e021      	b.n	8001c58 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c14:	f7ff f8a6 	bl	8000d64 <HAL_GetTick>
 8001c18:	0002      	movs	r2, r0
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d913      	bls.n	8001c4a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d00d      	beq.n	8001c4a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	2210      	movs	r2, #16
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3e:	2201      	movs	r2, #1
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e006      	b.n	8001c58 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2201      	movs	r2, #1
 8001c52:	4013      	ands	r3, r2
 8001c54:	d1de      	bne.n	8001c14 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	0018      	movs	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b004      	add	sp, #16
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <LL_ADC_GetCommonClock>:
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	23f0      	movs	r3, #240	@ 0xf0
 8001c6e:	039b      	lsls	r3, r3, #14
 8001c70:	4013      	ands	r3, r2
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b002      	add	sp, #8
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <LL_ADC_GetClock>:
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	0f9b      	lsrs	r3, r3, #30
 8001c88:	079b      	lsls	r3, r3, #30
}
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b002      	add	sp, #8
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <LL_ADC_SetCalibrationFactor>:
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	22b4      	movs	r2, #180	@ 0xb4
 8001ca0:	589b      	ldr	r3, [r3, r2]
 8001ca2:	227f      	movs	r2, #127	@ 0x7f
 8001ca4:	4393      	bics	r3, r2
 8001ca6:	001a      	movs	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	21b4      	movs	r1, #180	@ 0xb4
 8001cb0:	505a      	str	r2, [r3, r1]
}
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b002      	add	sp, #8
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <LL_ADC_GetCalibrationFactor>:
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	22b4      	movs	r2, #180	@ 0xb4
 8001cc6:	589b      	ldr	r3, [r3, r2]
 8001cc8:	227f      	movs	r2, #127	@ 0x7f
 8001cca:	4013      	ands	r3, r2
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b002      	add	sp, #8
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <LL_ADC_Enable>:
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <LL_ADC_Enable+0x20>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	609a      	str	r2, [r3, #8]
}
 8001cec:	46c0      	nop			@ (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	7fffffe8 	.word	0x7fffffe8

08001cf8 <LL_ADC_Disable>:
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	4a04      	ldr	r2, [pc, #16]	@ (8001d18 <LL_ADC_Disable+0x20>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	2202      	movs	r2, #2
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
}
 8001d10:	46c0      	nop			@ (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b002      	add	sp, #8
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	7fffffe8 	.word	0x7fffffe8

08001d1c <LL_ADC_IsEnabled>:
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <LL_ADC_IsEnabled+0x18>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <LL_ADC_IsEnabled+0x1a>
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	0018      	movs	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b002      	add	sp, #8
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <LL_ADC_StartCalibration>:
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <LL_ADC_StartCalibration+0x24>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2280      	movs	r2, #128	@ 0x80
 8001d52:	0612      	lsls	r2, r2, #24
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	609a      	str	r2, [r3, #8]
}
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b002      	add	sp, #8
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	7fffffe8 	.word	0x7fffffe8

08001d68 <LL_ADC_IsCalibrationOnGoing>:
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	0fdb      	lsrs	r3, r3, #31
 8001d76:	07da      	lsls	r2, r3, #31
 8001d78:	2380      	movs	r3, #128	@ 0x80
 8001d7a:	061b      	lsls	r3, r3, #24
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d101      	bne.n	8001d84 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b08b      	sub	sp, #44	@ 0x2c
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2254      	movs	r2, #84	@ 0x54
 8001da4:	5c9b      	ldrb	r3, [r3, r2]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_ADCEx_Calibration_Start+0x1e>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e0dd      	b.n	8001f6a <HAL_ADCEx_Calibration_Start+0x1da>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2254      	movs	r2, #84	@ 0x54
 8001db2:	2101      	movs	r1, #1
 8001db4:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001db6:	231f      	movs	r3, #31
 8001db8:	18fc      	adds	r4, r7, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f7ff fef1 	bl	8001ba4 <ADC_Disable>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f7ff ffa6 	bl	8001d1c <LL_ADC_IsEnabled>
 8001dd0:	1e03      	subs	r3, r0, #0
 8001dd2:	d000      	beq.n	8001dd6 <HAL_ADCEx_Calibration_Start+0x46>
 8001dd4:	e0bc      	b.n	8001f50 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dda:	4a66      	ldr	r2, [pc, #408]	@ (8001f74 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2202      	movs	r2, #2
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4a62      	ldr	r2, [pc, #392]	@ (8001f78 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	495f      	ldr	r1, [pc, #380]	@ (8001f7c <HAL_ADCEx_Calibration_Start+0x1ec>)
 8001dfe:	400a      	ands	r2, r1
 8001e00:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e06:	e02d      	b.n	8001e64 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f7ff ff97 	bl	8001d40 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001e12:	e014      	b.n	8001e3e <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	3301      	adds	r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4a58      	ldr	r2, [pc, #352]	@ (8001f80 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d90d      	bls.n	8001e3e <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e26:	2212      	movs	r2, #18
 8001e28:	4393      	bics	r3, r2
 8001e2a:	2210      	movs	r2, #16
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2254      	movs	r2, #84	@ 0x54
 8001e36:	2100      	movs	r1, #0
 8001e38:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e095      	b.n	8001f6a <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	0018      	movs	r0, r3
 8001e44:	f7ff ff90 	bl	8001d68 <LL_ADC_IsCalibrationOnGoing>
 8001e48:	1e03      	subs	r3, r0, #0
 8001e4a:	d1e3      	bne.n	8001e14 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff ff32 	bl	8001cba <LL_ADC_GetCalibrationFactor>
 8001e56:	0002      	movs	r2, r0
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	189b      	adds	r3, r3, r2
 8001e5c:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	3301      	adds	r3, #1
 8001e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	2b07      	cmp	r3, #7
 8001e68:	d9ce      	bls.n	8001e08 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8001e6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e6c:	6a38      	ldr	r0, [r7, #32]
 8001e6e:	f7fe f953 	bl	8000118 <__udivsi3>
 8001e72:	0003      	movs	r3, r0
 8001e74:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f7ff ff2a 	bl	8001cd4 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7ff fef8 	bl	8001c7a <LL_ADC_GetClock>
 8001e8a:	1e03      	subs	r3, r0, #0
 8001e8c:	d11b      	bne.n	8001ec6 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f84 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7ff fee5 	bl	8001c60 <LL_ADC_GetCommonClock>
 8001e96:	0003      	movs	r3, r0
 8001e98:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	23e0      	movs	r3, #224	@ 0xe0
 8001e9e:	035b      	lsls	r3, r3, #13
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d310      	bcc.n	8001ec6 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	0c9b      	lsrs	r3, r3, #18
 8001ea8:	3b03      	subs	r3, #3
 8001eaa:	2201      	movs	r2, #1
 8001eac:	409a      	lsls	r2, r3
 8001eae:	0013      	movs	r3, r2
 8001eb0:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	085b      	lsrs	r3, r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8001eb8:	e002      	b.n	8001ec0 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f9      	bne.n	8001eba <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6a3a      	ldr	r2, [r7, #32]
 8001ecc:	0011      	movs	r1, r2
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f7ff fedf 	bl	8001c92 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f7ff ff0d 	bl	8001cf8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ede:	f7fe ff41 	bl	8000d64 <HAL_GetTick>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ee6:	e01b      	b.n	8001f20 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ee8:	f7fe ff3c 	bl	8000d64 <HAL_GetTick>
 8001eec:	0002      	movs	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d914      	bls.n	8001f20 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	0018      	movs	r0, r3
 8001efc:	f7ff ff0e 	bl	8001d1c <LL_ADC_IsEnabled>
 8001f00:	1e03      	subs	r3, r0, #0
 8001f02:	d00d      	beq.n	8001f20 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f08:	2210      	movs	r2, #16
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f14:	2201      	movs	r2, #1
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e024      	b.n	8001f6a <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7ff fef9 	bl	8001d1c <LL_ADC_IsEnabled>
 8001f2a:	1e03      	subs	r3, r0, #0
 8001f2c:	d1dc      	bne.n	8001ee8 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68d9      	ldr	r1, [r3, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f42:	2203      	movs	r2, #3
 8001f44:	4393      	bics	r3, r2
 8001f46:	2201      	movs	r2, #1
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f4e:	e005      	b.n	8001f5c <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f54:	2210      	movs	r2, #16
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2254      	movs	r2, #84	@ 0x54
 8001f60:	2100      	movs	r1, #0
 8001f62:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001f64:	231f      	movs	r3, #31
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	781b      	ldrb	r3, [r3, #0]
}
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b00b      	add	sp, #44	@ 0x2c
 8001f70:	bd90      	pop	{r4, r7, pc}
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	fffffefd 	.word	0xfffffefd
 8001f78:	00008003 	.word	0x00008003
 8001f7c:	ffff7ffc 	.word	0xffff7ffc
 8001f80:	0002f1ff 	.word	0x0002f1ff
 8001f84:	40012708 	.word	0x40012708

08001f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	0002      	movs	r2, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	1dfb      	adds	r3, r7, #7
 8001f94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f96:	1dfb      	adds	r3, r7, #7
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f9c:	d828      	bhi.n	8001ff0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f9e:	4a2f      	ldr	r2, [pc, #188]	@ (800205c <__NVIC_SetPriority+0xd4>)
 8001fa0:	1dfb      	adds	r3, r7, #7
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	b25b      	sxtb	r3, r3
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	33c0      	adds	r3, #192	@ 0xc0
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	589b      	ldr	r3, [r3, r2]
 8001fae:	1dfa      	adds	r2, r7, #7
 8001fb0:	7812      	ldrb	r2, [r2, #0]
 8001fb2:	0011      	movs	r1, r2
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	400a      	ands	r2, r1
 8001fb8:	00d2      	lsls	r2, r2, #3
 8001fba:	21ff      	movs	r1, #255	@ 0xff
 8001fbc:	4091      	lsls	r1, r2
 8001fbe:	000a      	movs	r2, r1
 8001fc0:	43d2      	mvns	r2, r2
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	019b      	lsls	r3, r3, #6
 8001fca:	22ff      	movs	r2, #255	@ 0xff
 8001fcc:	401a      	ands	r2, r3
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	4003      	ands	r3, r0
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fdc:	481f      	ldr	r0, [pc, #124]	@ (800205c <__NVIC_SetPriority+0xd4>)
 8001fde:	1dfb      	adds	r3, r7, #7
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	b25b      	sxtb	r3, r3
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	33c0      	adds	r3, #192	@ 0xc0
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fee:	e031      	b.n	8002054 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8002060 <__NVIC_SetPriority+0xd8>)
 8001ff2:	1dfb      	adds	r3, r7, #7
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	230f      	movs	r3, #15
 8001ffa:	400b      	ands	r3, r1
 8001ffc:	3b08      	subs	r3, #8
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3306      	adds	r3, #6
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	18d3      	adds	r3, r2, r3
 8002006:	3304      	adds	r3, #4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	1dfa      	adds	r2, r7, #7
 800200c:	7812      	ldrb	r2, [r2, #0]
 800200e:	0011      	movs	r1, r2
 8002010:	2203      	movs	r2, #3
 8002012:	400a      	ands	r2, r1
 8002014:	00d2      	lsls	r2, r2, #3
 8002016:	21ff      	movs	r1, #255	@ 0xff
 8002018:	4091      	lsls	r1, r2
 800201a:	000a      	movs	r2, r1
 800201c:	43d2      	mvns	r2, r2
 800201e:	401a      	ands	r2, r3
 8002020:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	019b      	lsls	r3, r3, #6
 8002026:	22ff      	movs	r2, #255	@ 0xff
 8002028:	401a      	ands	r2, r3
 800202a:	1dfb      	adds	r3, r7, #7
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	0018      	movs	r0, r3
 8002030:	2303      	movs	r3, #3
 8002032:	4003      	ands	r3, r0
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002038:	4809      	ldr	r0, [pc, #36]	@ (8002060 <__NVIC_SetPriority+0xd8>)
 800203a:	1dfb      	adds	r3, r7, #7
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	001c      	movs	r4, r3
 8002040:	230f      	movs	r3, #15
 8002042:	4023      	ands	r3, r4
 8002044:	3b08      	subs	r3, #8
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	430a      	orrs	r2, r1
 800204a:	3306      	adds	r3, #6
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	18c3      	adds	r3, r0, r3
 8002050:	3304      	adds	r3, #4
 8002052:	601a      	str	r2, [r3, #0]
}
 8002054:	46c0      	nop			@ (mov r8, r8)
 8002056:	46bd      	mov	sp, r7
 8002058:	b003      	add	sp, #12
 800205a:	bd90      	pop	{r4, r7, pc}
 800205c:	e000e100 	.word	0xe000e100
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	1e5a      	subs	r2, r3, #1
 8002070:	2380      	movs	r3, #128	@ 0x80
 8002072:	045b      	lsls	r3, r3, #17
 8002074:	429a      	cmp	r2, r3
 8002076:	d301      	bcc.n	800207c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002078:	2301      	movs	r3, #1
 800207a:	e010      	b.n	800209e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207c:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <SysTick_Config+0x44>)
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	3a01      	subs	r2, #1
 8002082:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002084:	2301      	movs	r3, #1
 8002086:	425b      	negs	r3, r3
 8002088:	2103      	movs	r1, #3
 800208a:	0018      	movs	r0, r3
 800208c:	f7ff ff7c 	bl	8001f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002090:	4b05      	ldr	r3, [pc, #20]	@ (80020a8 <SysTick_Config+0x44>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002096:	4b04      	ldr	r3, [pc, #16]	@ (80020a8 <SysTick_Config+0x44>)
 8002098:	2207      	movs	r2, #7
 800209a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800209c:	2300      	movs	r3, #0
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b002      	add	sp, #8
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			@ (mov r8, r8)
 80020a8:	e000e010 	.word	0xe000e010

080020ac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	210f      	movs	r1, #15
 80020b8:	187b      	adds	r3, r7, r1
 80020ba:	1c02      	adds	r2, r0, #0
 80020bc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	187b      	adds	r3, r7, r1
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	b25b      	sxtb	r3, r3
 80020c6:	0011      	movs	r1, r2
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7ff ff5d 	bl	8001f88 <__NVIC_SetPriority>
}
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b004      	add	sp, #16
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7ff ffbf 	bl	8002064 <SysTick_Config>
 80020e6:	0003      	movs	r3, r0
}
 80020e8:	0018      	movs	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b002      	add	sp, #8
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fe:	e147      	b.n	8002390 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2101      	movs	r1, #1
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4091      	lsls	r1, r2
 800210a:	000a      	movs	r2, r1
 800210c:	4013      	ands	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d100      	bne.n	8002118 <HAL_GPIO_Init+0x28>
 8002116:	e138      	b.n	800238a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2203      	movs	r2, #3
 800211e:	4013      	ands	r3, r2
 8002120:	2b01      	cmp	r3, #1
 8002122:	d005      	beq.n	8002130 <HAL_GPIO_Init+0x40>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2203      	movs	r2, #3
 800212a:	4013      	ands	r3, r2
 800212c:	2b02      	cmp	r3, #2
 800212e:	d130      	bne.n	8002192 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	409a      	lsls	r2, r3
 800213e:	0013      	movs	r3, r2
 8002140:	43da      	mvns	r2, r3
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	409a      	lsls	r2, r3
 8002152:	0013      	movs	r3, r2
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002166:	2201      	movs	r2, #1
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	409a      	lsls	r2, r3
 800216c:	0013      	movs	r3, r2
 800216e:	43da      	mvns	r2, r3
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	2201      	movs	r2, #1
 800217e:	401a      	ands	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	409a      	lsls	r2, r3
 8002184:	0013      	movs	r3, r2
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2203      	movs	r2, #3
 8002198:	4013      	ands	r3, r2
 800219a:	2b03      	cmp	r3, #3
 800219c:	d017      	beq.n	80021ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	2203      	movs	r2, #3
 80021aa:	409a      	lsls	r2, r3
 80021ac:	0013      	movs	r3, r2
 80021ae:	43da      	mvns	r2, r3
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	409a      	lsls	r2, r3
 80021c0:	0013      	movs	r3, r2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2203      	movs	r2, #3
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d123      	bne.n	8002222 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	08da      	lsrs	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3208      	adds	r2, #8
 80021e2:	0092      	lsls	r2, r2, #2
 80021e4:	58d3      	ldr	r3, [r2, r3]
 80021e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	2207      	movs	r2, #7
 80021ec:	4013      	ands	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	409a      	lsls	r2, r3
 80021f4:	0013      	movs	r3, r2
 80021f6:	43da      	mvns	r2, r3
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4013      	ands	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2107      	movs	r1, #7
 8002206:	400b      	ands	r3, r1
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	409a      	lsls	r2, r3
 800220c:	0013      	movs	r3, r2
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	08da      	lsrs	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3208      	adds	r2, #8
 800221c:	0092      	lsls	r2, r2, #2
 800221e:	6939      	ldr	r1, [r7, #16]
 8002220:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	409a      	lsls	r2, r3
 8002230:	0013      	movs	r3, r2
 8002232:	43da      	mvns	r2, r3
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2203      	movs	r2, #3
 8002240:	401a      	ands	r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	409a      	lsls	r2, r3
 8002248:	0013      	movs	r3, r2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	23c0      	movs	r3, #192	@ 0xc0
 800225c:	029b      	lsls	r3, r3, #10
 800225e:	4013      	ands	r3, r2
 8002260:	d100      	bne.n	8002264 <HAL_GPIO_Init+0x174>
 8002262:	e092      	b.n	800238a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002264:	4a50      	ldr	r2, [pc, #320]	@ (80023a8 <HAL_GPIO_Init+0x2b8>)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	3318      	adds	r3, #24
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	589b      	ldr	r3, [r3, r2]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2203      	movs	r2, #3
 8002276:	4013      	ands	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	220f      	movs	r2, #15
 800227c:	409a      	lsls	r2, r3
 800227e:	0013      	movs	r3, r2
 8002280:	43da      	mvns	r2, r3
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	23a0      	movs	r3, #160	@ 0xa0
 800228c:	05db      	lsls	r3, r3, #23
 800228e:	429a      	cmp	r2, r3
 8002290:	d013      	beq.n	80022ba <HAL_GPIO_Init+0x1ca>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a45      	ldr	r2, [pc, #276]	@ (80023ac <HAL_GPIO_Init+0x2bc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00d      	beq.n	80022b6 <HAL_GPIO_Init+0x1c6>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a44      	ldr	r2, [pc, #272]	@ (80023b0 <HAL_GPIO_Init+0x2c0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d007      	beq.n	80022b2 <HAL_GPIO_Init+0x1c2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a43      	ldr	r2, [pc, #268]	@ (80023b4 <HAL_GPIO_Init+0x2c4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d101      	bne.n	80022ae <HAL_GPIO_Init+0x1be>
 80022aa:	2303      	movs	r3, #3
 80022ac:	e006      	b.n	80022bc <HAL_GPIO_Init+0x1cc>
 80022ae:	2305      	movs	r3, #5
 80022b0:	e004      	b.n	80022bc <HAL_GPIO_Init+0x1cc>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e002      	b.n	80022bc <HAL_GPIO_Init+0x1cc>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_GPIO_Init+0x1cc>
 80022ba:	2300      	movs	r3, #0
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	2103      	movs	r1, #3
 80022c0:	400a      	ands	r2, r1
 80022c2:	00d2      	lsls	r2, r2, #3
 80022c4:	4093      	lsls	r3, r2
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80022cc:	4936      	ldr	r1, [pc, #216]	@ (80023a8 <HAL_GPIO_Init+0x2b8>)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	3318      	adds	r3, #24
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022da:	4b33      	ldr	r3, [pc, #204]	@ (80023a8 <HAL_GPIO_Init+0x2b8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	43da      	mvns	r2, r3
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	2380      	movs	r3, #128	@ 0x80
 80022f0:	035b      	lsls	r3, r3, #13
 80022f2:	4013      	ands	r3, r2
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022fe:	4b2a      	ldr	r3, [pc, #168]	@ (80023a8 <HAL_GPIO_Init+0x2b8>)
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002304:	4b28      	ldr	r3, [pc, #160]	@ (80023a8 <HAL_GPIO_Init+0x2b8>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	43da      	mvns	r2, r3
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	2380      	movs	r3, #128	@ 0x80
 800231a:	039b      	lsls	r3, r3, #14
 800231c:	4013      	ands	r3, r2
 800231e:	d003      	beq.n	8002328 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002328:	4b1f      	ldr	r3, [pc, #124]	@ (80023a8 <HAL_GPIO_Init+0x2b8>)
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800232e:	4a1e      	ldr	r2, [pc, #120]	@ (80023a8 <HAL_GPIO_Init+0x2b8>)
 8002330:	2384      	movs	r3, #132	@ 0x84
 8002332:	58d3      	ldr	r3, [r2, r3]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	43da      	mvns	r2, r3
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	2380      	movs	r3, #128	@ 0x80
 8002346:	029b      	lsls	r3, r3, #10
 8002348:	4013      	ands	r3, r2
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002354:	4914      	ldr	r1, [pc, #80]	@ (80023a8 <HAL_GPIO_Init+0x2b8>)
 8002356:	2284      	movs	r2, #132	@ 0x84
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800235c:	4a12      	ldr	r2, [pc, #72]	@ (80023a8 <HAL_GPIO_Init+0x2b8>)
 800235e:	2380      	movs	r3, #128	@ 0x80
 8002360:	58d3      	ldr	r3, [r2, r3]
 8002362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	43da      	mvns	r2, r3
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	2380      	movs	r3, #128	@ 0x80
 8002374:	025b      	lsls	r3, r3, #9
 8002376:	4013      	ands	r3, r2
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002382:	4909      	ldr	r1, [pc, #36]	@ (80023a8 <HAL_GPIO_Init+0x2b8>)
 8002384:	2280      	movs	r2, #128	@ 0x80
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	3301      	adds	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	40da      	lsrs	r2, r3
 8002398:	1e13      	subs	r3, r2, #0
 800239a:	d000      	beq.n	800239e <HAL_GPIO_Init+0x2ae>
 800239c:	e6b0      	b.n	8002100 <HAL_GPIO_Init+0x10>
  }
}
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	46c0      	nop			@ (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b006      	add	sp, #24
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40021800 	.word	0x40021800
 80023ac:	50000400 	.word	0x50000400
 80023b0:	50000800 	.word	0x50000800
 80023b4:	50000c00 	.word	0x50000c00

080023b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	0008      	movs	r0, r1
 80023c2:	0011      	movs	r1, r2
 80023c4:	1cbb      	adds	r3, r7, #2
 80023c6:	1c02      	adds	r2, r0, #0
 80023c8:	801a      	strh	r2, [r3, #0]
 80023ca:	1c7b      	adds	r3, r7, #1
 80023cc:	1c0a      	adds	r2, r1, #0
 80023ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023d0:	1c7b      	adds	r3, r7, #1
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023d8:	1cbb      	adds	r3, r7, #2
 80023da:	881a      	ldrh	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023e0:	e003      	b.n	80023ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023e2:	1cbb      	adds	r3, r7, #2
 80023e4:	881a      	ldrh	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023ea:	46c0      	nop			@ (mov r8, r8)
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b002      	add	sp, #8
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80023fc:	4b19      	ldr	r3, [pc, #100]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a19      	ldr	r2, [pc, #100]	@ (8002468 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002402:	4013      	ands	r3, r2
 8002404:	0019      	movs	r1, r3
 8002406:	4b17      	ldr	r3, [pc, #92]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	430a      	orrs	r2, r1
 800240c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	2380      	movs	r3, #128	@ 0x80
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	429a      	cmp	r2, r3
 8002416:	d11f      	bne.n	8002458 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002418:	4b14      	ldr	r3, [pc, #80]	@ (800246c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	0013      	movs	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	189b      	adds	r3, r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4912      	ldr	r1, [pc, #72]	@ (8002470 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002426:	0018      	movs	r0, r3
 8002428:	f7fd fe76 	bl	8000118 <__udivsi3>
 800242c:	0003      	movs	r3, r0
 800242e:	3301      	adds	r3, #1
 8002430:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002432:	e008      	b.n	8002446 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	3b01      	subs	r3, #1
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e001      	b.n	8002446 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e009      	b.n	800245a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002446:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	2380      	movs	r3, #128	@ 0x80
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	401a      	ands	r2, r3
 8002450:	2380      	movs	r3, #128	@ 0x80
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	429a      	cmp	r2, r3
 8002456:	d0ed      	beq.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b004      	add	sp, #16
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			@ (mov r8, r8)
 8002464:	40007000 	.word	0x40007000
 8002468:	fffff9ff 	.word	0xfffff9ff
 800246c:	20000000 	.word	0x20000000
 8002470:	000f4240 	.word	0x000f4240

08002474 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002478:	4b03      	ldr	r3, [pc, #12]	@ (8002488 <LL_RCC_GetAPB1Prescaler+0x14>)
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	23e0      	movs	r3, #224	@ 0xe0
 800247e:	01db      	lsls	r3, r3, #7
 8002480:	4013      	ands	r3, r2
}
 8002482:	0018      	movs	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000

0800248c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e2fe      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2201      	movs	r2, #1
 80024a4:	4013      	ands	r3, r2
 80024a6:	d100      	bne.n	80024aa <HAL_RCC_OscConfig+0x1e>
 80024a8:	e07c      	b.n	80025a4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024aa:	4bc3      	ldr	r3, [pc, #780]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2238      	movs	r2, #56	@ 0x38
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024b4:	4bc0      	ldr	r3, [pc, #768]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2203      	movs	r2, #3
 80024ba:	4013      	ands	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	2b10      	cmp	r3, #16
 80024c2:	d102      	bne.n	80024ca <HAL_RCC_OscConfig+0x3e>
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d002      	beq.n	80024d0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d10b      	bne.n	80024e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d0:	4bb9      	ldr	r3, [pc, #740]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2380      	movs	r3, #128	@ 0x80
 80024d6:	029b      	lsls	r3, r3, #10
 80024d8:	4013      	ands	r3, r2
 80024da:	d062      	beq.n	80025a2 <HAL_RCC_OscConfig+0x116>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d15e      	bne.n	80025a2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e2d9      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	2380      	movs	r3, #128	@ 0x80
 80024ee:	025b      	lsls	r3, r3, #9
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_OscConfig+0x78>
 80024f4:	4bb0      	ldr	r3, [pc, #704]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4baf      	ldr	r3, [pc, #700]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 80024fa:	2180      	movs	r1, #128	@ 0x80
 80024fc:	0249      	lsls	r1, r1, #9
 80024fe:	430a      	orrs	r2, r1
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e020      	b.n	8002546 <HAL_RCC_OscConfig+0xba>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	23a0      	movs	r3, #160	@ 0xa0
 800250a:	02db      	lsls	r3, r3, #11
 800250c:	429a      	cmp	r2, r3
 800250e:	d10e      	bne.n	800252e <HAL_RCC_OscConfig+0xa2>
 8002510:	4ba9      	ldr	r3, [pc, #676]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4ba8      	ldr	r3, [pc, #672]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 8002516:	2180      	movs	r1, #128	@ 0x80
 8002518:	02c9      	lsls	r1, r1, #11
 800251a:	430a      	orrs	r2, r1
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	4ba6      	ldr	r3, [pc, #664]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4ba5      	ldr	r3, [pc, #660]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 8002524:	2180      	movs	r1, #128	@ 0x80
 8002526:	0249      	lsls	r1, r1, #9
 8002528:	430a      	orrs	r2, r1
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e00b      	b.n	8002546 <HAL_RCC_OscConfig+0xba>
 800252e:	4ba2      	ldr	r3, [pc, #648]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	4ba1      	ldr	r3, [pc, #644]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 8002534:	49a1      	ldr	r1, [pc, #644]	@ (80027bc <HAL_RCC_OscConfig+0x330>)
 8002536:	400a      	ands	r2, r1
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	4b9f      	ldr	r3, [pc, #636]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	4b9e      	ldr	r3, [pc, #632]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 8002540:	499f      	ldr	r1, [pc, #636]	@ (80027c0 <HAL_RCC_OscConfig+0x334>)
 8002542:	400a      	ands	r2, r1
 8002544:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d014      	beq.n	8002578 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254e:	f7fe fc09 	bl	8000d64 <HAL_GetTick>
 8002552:	0003      	movs	r3, r0
 8002554:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002558:	f7fe fc04 	bl	8000d64 <HAL_GetTick>
 800255c:	0002      	movs	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	@ 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e298      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800256a:	4b93      	ldr	r3, [pc, #588]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	2380      	movs	r3, #128	@ 0x80
 8002570:	029b      	lsls	r3, r3, #10
 8002572:	4013      	ands	r3, r2
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0xcc>
 8002576:	e015      	b.n	80025a4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe fbf4 	bl	8000d64 <HAL_GetTick>
 800257c:	0003      	movs	r3, r0
 800257e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002582:	f7fe fbef 	bl	8000d64 <HAL_GetTick>
 8002586:	0002      	movs	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b64      	cmp	r3, #100	@ 0x64
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e283      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002594:	4b88      	ldr	r3, [pc, #544]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	2380      	movs	r3, #128	@ 0x80
 800259a:	029b      	lsls	r3, r3, #10
 800259c:	4013      	ands	r3, r2
 800259e:	d1f0      	bne.n	8002582 <HAL_RCC_OscConfig+0xf6>
 80025a0:	e000      	b.n	80025a4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2202      	movs	r2, #2
 80025aa:	4013      	ands	r3, r2
 80025ac:	d100      	bne.n	80025b0 <HAL_RCC_OscConfig+0x124>
 80025ae:	e099      	b.n	80026e4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025b0:	4b81      	ldr	r3, [pc, #516]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2238      	movs	r2, #56	@ 0x38
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025ba:	4b7f      	ldr	r3, [pc, #508]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2203      	movs	r2, #3
 80025c0:	4013      	ands	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2b10      	cmp	r3, #16
 80025c8:	d102      	bne.n	80025d0 <HAL_RCC_OscConfig+0x144>
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d002      	beq.n	80025d6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d135      	bne.n	8002642 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d6:	4b78      	ldr	r3, [pc, #480]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	2380      	movs	r3, #128	@ 0x80
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4013      	ands	r3, r2
 80025e0:	d005      	beq.n	80025ee <HAL_RCC_OscConfig+0x162>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e256      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ee:	4b72      	ldr	r3, [pc, #456]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4a74      	ldr	r2, [pc, #464]	@ (80027c4 <HAL_RCC_OscConfig+0x338>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	0019      	movs	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	021a      	lsls	r2, r3, #8
 80025fe:	4b6e      	ldr	r3, [pc, #440]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 8002600:	430a      	orrs	r2, r1
 8002602:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d112      	bne.n	8002630 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800260a:	4b6b      	ldr	r3, [pc, #428]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6e      	ldr	r2, [pc, #440]	@ (80027c8 <HAL_RCC_OscConfig+0x33c>)
 8002610:	4013      	ands	r3, r2
 8002612:	0019      	movs	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	4b67      	ldr	r3, [pc, #412]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 800261a:	430a      	orrs	r2, r1
 800261c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800261e:	4b66      	ldr	r3, [pc, #408]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	0adb      	lsrs	r3, r3, #11
 8002624:	2207      	movs	r2, #7
 8002626:	4013      	ands	r3, r2
 8002628:	4a68      	ldr	r2, [pc, #416]	@ (80027cc <HAL_RCC_OscConfig+0x340>)
 800262a:	40da      	lsrs	r2, r3
 800262c:	4b68      	ldr	r3, [pc, #416]	@ (80027d0 <HAL_RCC_OscConfig+0x344>)
 800262e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002630:	4b68      	ldr	r3, [pc, #416]	@ (80027d4 <HAL_RCC_OscConfig+0x348>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	0018      	movs	r0, r3
 8002636:	f7fe fb39 	bl	8000cac <HAL_InitTick>
 800263a:	1e03      	subs	r3, r0, #0
 800263c:	d051      	beq.n	80026e2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e22c      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d030      	beq.n	80026ac <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800264a:	4b5b      	ldr	r3, [pc, #364]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a5e      	ldr	r2, [pc, #376]	@ (80027c8 <HAL_RCC_OscConfig+0x33c>)
 8002650:	4013      	ands	r3, r2
 8002652:	0019      	movs	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	4b57      	ldr	r3, [pc, #348]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 800265a:	430a      	orrs	r2, r1
 800265c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800265e:	4b56      	ldr	r3, [pc, #344]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b55      	ldr	r3, [pc, #340]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 8002664:	2180      	movs	r1, #128	@ 0x80
 8002666:	0049      	lsls	r1, r1, #1
 8002668:	430a      	orrs	r2, r1
 800266a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe fb7a 	bl	8000d64 <HAL_GetTick>
 8002670:	0003      	movs	r3, r0
 8002672:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002676:	f7fe fb75 	bl	8000d64 <HAL_GetTick>
 800267a:	0002      	movs	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e209      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002688:	4b4b      	ldr	r3, [pc, #300]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	2380      	movs	r3, #128	@ 0x80
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4013      	ands	r3, r2
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002694:	4b48      	ldr	r3, [pc, #288]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4a4a      	ldr	r2, [pc, #296]	@ (80027c4 <HAL_RCC_OscConfig+0x338>)
 800269a:	4013      	ands	r3, r2
 800269c:	0019      	movs	r1, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	021a      	lsls	r2, r3, #8
 80026a4:	4b44      	ldr	r3, [pc, #272]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	e01b      	b.n	80026e4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80026ac:	4b42      	ldr	r3, [pc, #264]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b41      	ldr	r3, [pc, #260]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 80026b2:	4949      	ldr	r1, [pc, #292]	@ (80027d8 <HAL_RCC_OscConfig+0x34c>)
 80026b4:	400a      	ands	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7fe fb54 	bl	8000d64 <HAL_GetTick>
 80026bc:	0003      	movs	r3, r0
 80026be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c2:	f7fe fb4f 	bl	8000d64 <HAL_GetTick>
 80026c6:	0002      	movs	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e1e3      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026d4:	4b38      	ldr	r3, [pc, #224]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	2380      	movs	r3, #128	@ 0x80
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4013      	ands	r3, r2
 80026de:	d1f0      	bne.n	80026c2 <HAL_RCC_OscConfig+0x236>
 80026e0:	e000      	b.n	80026e4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2208      	movs	r2, #8
 80026ea:	4013      	ands	r3, r2
 80026ec:	d047      	beq.n	800277e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80026ee:	4b32      	ldr	r3, [pc, #200]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2238      	movs	r2, #56	@ 0x38
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b18      	cmp	r3, #24
 80026f8:	d10a      	bne.n	8002710 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80026fa:	4b2f      	ldr	r3, [pc, #188]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 80026fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026fe:	2202      	movs	r2, #2
 8002700:	4013      	ands	r3, r2
 8002702:	d03c      	beq.n	800277e <HAL_RCC_OscConfig+0x2f2>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d138      	bne.n	800277e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e1c5      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d019      	beq.n	800274c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002718:	4b27      	ldr	r3, [pc, #156]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 800271a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800271c:	4b26      	ldr	r3, [pc, #152]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 800271e:	2101      	movs	r1, #1
 8002720:	430a      	orrs	r2, r1
 8002722:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002724:	f7fe fb1e 	bl	8000d64 <HAL_GetTick>
 8002728:	0003      	movs	r3, r0
 800272a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272e:	f7fe fb19 	bl	8000d64 <HAL_GetTick>
 8002732:	0002      	movs	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e1ad      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002740:	4b1d      	ldr	r3, [pc, #116]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 8002742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002744:	2202      	movs	r2, #2
 8002746:	4013      	ands	r3, r2
 8002748:	d0f1      	beq.n	800272e <HAL_RCC_OscConfig+0x2a2>
 800274a:	e018      	b.n	800277e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800274c:	4b1a      	ldr	r3, [pc, #104]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 800274e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002750:	4b19      	ldr	r3, [pc, #100]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 8002752:	2101      	movs	r1, #1
 8002754:	438a      	bics	r2, r1
 8002756:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7fe fb04 	bl	8000d64 <HAL_GetTick>
 800275c:	0003      	movs	r3, r0
 800275e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002762:	f7fe faff 	bl	8000d64 <HAL_GetTick>
 8002766:	0002      	movs	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e193      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002774:	4b10      	ldr	r3, [pc, #64]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 8002776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002778:	2202      	movs	r2, #2
 800277a:	4013      	ands	r3, r2
 800277c:	d1f1      	bne.n	8002762 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2204      	movs	r2, #4
 8002784:	4013      	ands	r3, r2
 8002786:	d100      	bne.n	800278a <HAL_RCC_OscConfig+0x2fe>
 8002788:	e0c6      	b.n	8002918 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800278a:	231f      	movs	r3, #31
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002792:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2238      	movs	r2, #56	@ 0x38
 8002798:	4013      	ands	r3, r2
 800279a:	2b20      	cmp	r3, #32
 800279c:	d11e      	bne.n	80027dc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800279e:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <HAL_RCC_OscConfig+0x32c>)
 80027a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a2:	2202      	movs	r2, #2
 80027a4:	4013      	ands	r3, r2
 80027a6:	d100      	bne.n	80027aa <HAL_RCC_OscConfig+0x31e>
 80027a8:	e0b6      	b.n	8002918 <HAL_RCC_OscConfig+0x48c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d000      	beq.n	80027b4 <HAL_RCC_OscConfig+0x328>
 80027b2:	e0b1      	b.n	8002918 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e171      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
 80027b8:	40021000 	.word	0x40021000
 80027bc:	fffeffff 	.word	0xfffeffff
 80027c0:	fffbffff 	.word	0xfffbffff
 80027c4:	ffff80ff 	.word	0xffff80ff
 80027c8:	ffffc7ff 	.word	0xffffc7ff
 80027cc:	00f42400 	.word	0x00f42400
 80027d0:	20000000 	.word	0x20000000
 80027d4:	20000004 	.word	0x20000004
 80027d8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027dc:	4bb1      	ldr	r3, [pc, #708]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 80027de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027e0:	2380      	movs	r3, #128	@ 0x80
 80027e2:	055b      	lsls	r3, r3, #21
 80027e4:	4013      	ands	r3, r2
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_OscConfig+0x360>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <HAL_RCC_OscConfig+0x362>
 80027ec:	2300      	movs	r3, #0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d011      	beq.n	8002816 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80027f2:	4bac      	ldr	r3, [pc, #688]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 80027f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027f6:	4bab      	ldr	r3, [pc, #684]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 80027f8:	2180      	movs	r1, #128	@ 0x80
 80027fa:	0549      	lsls	r1, r1, #21
 80027fc:	430a      	orrs	r2, r1
 80027fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002800:	4ba8      	ldr	r3, [pc, #672]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 8002802:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002804:	2380      	movs	r3, #128	@ 0x80
 8002806:	055b      	lsls	r3, r3, #21
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800280e:	231f      	movs	r3, #31
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	2201      	movs	r2, #1
 8002814:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002816:	4ba4      	ldr	r3, [pc, #656]	@ (8002aa8 <HAL_RCC_OscConfig+0x61c>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	2380      	movs	r3, #128	@ 0x80
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4013      	ands	r3, r2
 8002820:	d11a      	bne.n	8002858 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002822:	4ba1      	ldr	r3, [pc, #644]	@ (8002aa8 <HAL_RCC_OscConfig+0x61c>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	4ba0      	ldr	r3, [pc, #640]	@ (8002aa8 <HAL_RCC_OscConfig+0x61c>)
 8002828:	2180      	movs	r1, #128	@ 0x80
 800282a:	0049      	lsls	r1, r1, #1
 800282c:	430a      	orrs	r2, r1
 800282e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002830:	f7fe fa98 	bl	8000d64 <HAL_GetTick>
 8002834:	0003      	movs	r3, r0
 8002836:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283a:	f7fe fa93 	bl	8000d64 <HAL_GetTick>
 800283e:	0002      	movs	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e127      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800284c:	4b96      	ldr	r3, [pc, #600]	@ (8002aa8 <HAL_RCC_OscConfig+0x61c>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4013      	ands	r3, r2
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x3e2>
 8002860:	4b90      	ldr	r3, [pc, #576]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 8002862:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002864:	4b8f      	ldr	r3, [pc, #572]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 8002866:	2101      	movs	r1, #1
 8002868:	430a      	orrs	r2, r1
 800286a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800286c:	e01c      	b.n	80028a8 <HAL_RCC_OscConfig+0x41c>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b05      	cmp	r3, #5
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x404>
 8002876:	4b8b      	ldr	r3, [pc, #556]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 8002878:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800287a:	4b8a      	ldr	r3, [pc, #552]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 800287c:	2104      	movs	r1, #4
 800287e:	430a      	orrs	r2, r1
 8002880:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002882:	4b88      	ldr	r3, [pc, #544]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 8002884:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002886:	4b87      	ldr	r3, [pc, #540]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 8002888:	2101      	movs	r1, #1
 800288a:	430a      	orrs	r2, r1
 800288c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800288e:	e00b      	b.n	80028a8 <HAL_RCC_OscConfig+0x41c>
 8002890:	4b84      	ldr	r3, [pc, #528]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 8002892:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002894:	4b83      	ldr	r3, [pc, #524]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 8002896:	2101      	movs	r1, #1
 8002898:	438a      	bics	r2, r1
 800289a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800289c:	4b81      	ldr	r3, [pc, #516]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 800289e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028a0:	4b80      	ldr	r3, [pc, #512]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 80028a2:	2104      	movs	r1, #4
 80028a4:	438a      	bics	r2, r1
 80028a6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d014      	beq.n	80028da <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7fe fa58 	bl	8000d64 <HAL_GetTick>
 80028b4:	0003      	movs	r3, r0
 80028b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b8:	e009      	b.n	80028ce <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ba:	f7fe fa53 	bl	8000d64 <HAL_GetTick>
 80028be:	0002      	movs	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	4a79      	ldr	r2, [pc, #484]	@ (8002aac <HAL_RCC_OscConfig+0x620>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e0e6      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ce:	4b75      	ldr	r3, [pc, #468]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 80028d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d2:	2202      	movs	r2, #2
 80028d4:	4013      	ands	r3, r2
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x42e>
 80028d8:	e013      	b.n	8002902 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7fe fa43 	bl	8000d64 <HAL_GetTick>
 80028de:	0003      	movs	r3, r0
 80028e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028e2:	e009      	b.n	80028f8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e4:	f7fe fa3e 	bl	8000d64 <HAL_GetTick>
 80028e8:	0002      	movs	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	4a6f      	ldr	r2, [pc, #444]	@ (8002aac <HAL_RCC_OscConfig+0x620>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e0d1      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028f8:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 80028fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fc:	2202      	movs	r2, #2
 80028fe:	4013      	ands	r3, r2
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002902:	231f      	movs	r3, #31
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d105      	bne.n	8002918 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800290c:	4b65      	ldr	r3, [pc, #404]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 800290e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002910:	4b64      	ldr	r3, [pc, #400]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 8002912:	4967      	ldr	r1, [pc, #412]	@ (8002ab0 <HAL_RCC_OscConfig+0x624>)
 8002914:	400a      	ands	r2, r1
 8002916:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d100      	bne.n	8002922 <HAL_RCC_OscConfig+0x496>
 8002920:	e0bb      	b.n	8002a9a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002922:	4b60      	ldr	r3, [pc, #384]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2238      	movs	r2, #56	@ 0x38
 8002928:	4013      	ands	r3, r2
 800292a:	2b10      	cmp	r3, #16
 800292c:	d100      	bne.n	8002930 <HAL_RCC_OscConfig+0x4a4>
 800292e:	e07b      	b.n	8002a28 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d156      	bne.n	80029e6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002938:	4b5a      	ldr	r3, [pc, #360]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b59      	ldr	r3, [pc, #356]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 800293e:	495d      	ldr	r1, [pc, #372]	@ (8002ab4 <HAL_RCC_OscConfig+0x628>)
 8002940:	400a      	ands	r2, r1
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7fe fa0e 	bl	8000d64 <HAL_GetTick>
 8002948:	0003      	movs	r3, r0
 800294a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294e:	f7fe fa09 	bl	8000d64 <HAL_GetTick>
 8002952:	0002      	movs	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e09d      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002960:	4b50      	ldr	r3, [pc, #320]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	@ 0x80
 8002966:	049b      	lsls	r3, r3, #18
 8002968:	4013      	ands	r3, r2
 800296a:	d1f0      	bne.n	800294e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800296c:	4b4d      	ldr	r3, [pc, #308]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4a51      	ldr	r2, [pc, #324]	@ (8002ab8 <HAL_RCC_OscConfig+0x62c>)
 8002972:	4013      	ands	r3, r2
 8002974:	0019      	movs	r1, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1a      	ldr	r2, [r3, #32]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002984:	021b      	lsls	r3, r3, #8
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002998:	431a      	orrs	r2, r3
 800299a:	4b42      	ldr	r3, [pc, #264]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 800299c:	430a      	orrs	r2, r1
 800299e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a0:	4b40      	ldr	r3, [pc, #256]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b3f      	ldr	r3, [pc, #252]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 80029a6:	2180      	movs	r1, #128	@ 0x80
 80029a8:	0449      	lsls	r1, r1, #17
 80029aa:	430a      	orrs	r2, r1
 80029ac:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80029ae:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	4b3c      	ldr	r3, [pc, #240]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 80029b4:	2180      	movs	r1, #128	@ 0x80
 80029b6:	0549      	lsls	r1, r1, #21
 80029b8:	430a      	orrs	r2, r1
 80029ba:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7fe f9d2 	bl	8000d64 <HAL_GetTick>
 80029c0:	0003      	movs	r3, r0
 80029c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c6:	f7fe f9cd 	bl	8000d64 <HAL_GetTick>
 80029ca:	0002      	movs	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e061      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d8:	4b32      	ldr	r3, [pc, #200]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	2380      	movs	r3, #128	@ 0x80
 80029de:	049b      	lsls	r3, r3, #18
 80029e0:	4013      	ands	r3, r2
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x53a>
 80029e4:	e059      	b.n	8002a9a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	4b2f      	ldr	r3, [pc, #188]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b2e      	ldr	r3, [pc, #184]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 80029ec:	4931      	ldr	r1, [pc, #196]	@ (8002ab4 <HAL_RCC_OscConfig+0x628>)
 80029ee:	400a      	ands	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f2:	f7fe f9b7 	bl	8000d64 <HAL_GetTick>
 80029f6:	0003      	movs	r3, r0
 80029f8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fe f9b2 	bl	8000d64 <HAL_GetTick>
 8002a00:	0002      	movs	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e046      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a0e:	4b25      	ldr	r3, [pc, #148]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	2380      	movs	r3, #128	@ 0x80
 8002a14:	049b      	lsls	r3, r3, #18
 8002a16:	4013      	ands	r3, r2
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002a1a:	4b22      	ldr	r3, [pc, #136]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	4b21      	ldr	r3, [pc, #132]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 8002a20:	4926      	ldr	r1, [pc, #152]	@ (8002abc <HAL_RCC_OscConfig+0x630>)
 8002a22:	400a      	ands	r2, r1
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	e038      	b.n	8002a9a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e033      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002a34:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa4 <HAL_RCC_OscConfig+0x618>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	401a      	ands	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d126      	bne.n	8002a96 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2270      	movs	r2, #112	@ 0x70
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d11f      	bne.n	8002a96 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	23fe      	movs	r3, #254	@ 0xfe
 8002a5a:	01db      	lsls	r3, r3, #7
 8002a5c:	401a      	ands	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a62:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d116      	bne.n	8002a96 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	23f8      	movs	r3, #248	@ 0xf8
 8002a6c:	039b      	lsls	r3, r3, #14
 8002a6e:	401a      	ands	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d10e      	bne.n	8002a96 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	23e0      	movs	r3, #224	@ 0xe0
 8002a7c:	051b      	lsls	r3, r3, #20
 8002a7e:	401a      	ands	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d106      	bne.n	8002a96 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	0f5b      	lsrs	r3, r3, #29
 8002a8c:	075a      	lsls	r2, r3, #29
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d001      	beq.n	8002a9a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b008      	add	sp, #32
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40007000 	.word	0x40007000
 8002aac:	00001388 	.word	0x00001388
 8002ab0:	efffffff 	.word	0xefffffff
 8002ab4:	feffffff 	.word	0xfeffffff
 8002ab8:	11c1808c 	.word	0x11c1808c
 8002abc:	eefefffc 	.word	0xeefefffc

08002ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0e9      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad4:	4b76      	ldr	r3, [pc, #472]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2207      	movs	r2, #7
 8002ada:	4013      	ands	r3, r2
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d91e      	bls.n	8002b20 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae2:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2207      	movs	r2, #7
 8002ae8:	4393      	bics	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	4b70      	ldr	r3, [pc, #448]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002af4:	f7fe f936 	bl	8000d64 <HAL_GetTick>
 8002af8:	0003      	movs	r3, r0
 8002afa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002afc:	e009      	b.n	8002b12 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002afe:	f7fe f931 	bl	8000d64 <HAL_GetTick>
 8002b02:	0002      	movs	r2, r0
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	4a6a      	ldr	r2, [pc, #424]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e0ca      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b12:	4b67      	ldr	r3, [pc, #412]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2207      	movs	r2, #7
 8002b18:	4013      	ands	r3, r2
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d1ee      	bne.n	8002afe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2202      	movs	r2, #2
 8002b26:	4013      	ands	r3, r2
 8002b28:	d015      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2204      	movs	r2, #4
 8002b30:	4013      	ands	r3, r2
 8002b32:	d006      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b34:	4b60      	ldr	r3, [pc, #384]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	4b5f      	ldr	r3, [pc, #380]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002b3a:	21e0      	movs	r1, #224	@ 0xe0
 8002b3c:	01c9      	lsls	r1, r1, #7
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b42:	4b5d      	ldr	r3, [pc, #372]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	4a5d      	ldr	r2, [pc, #372]	@ (8002cbc <HAL_RCC_ClockConfig+0x1fc>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	4b59      	ldr	r3, [pc, #356]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002b52:	430a      	orrs	r2, r1
 8002b54:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d057      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d107      	bne.n	8002b78 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b68:	4b53      	ldr	r3, [pc, #332]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	2380      	movs	r3, #128	@ 0x80
 8002b6e:	029b      	lsls	r3, r3, #10
 8002b70:	4013      	ands	r3, r2
 8002b72:	d12b      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e097      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b80:	4b4d      	ldr	r3, [pc, #308]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	049b      	lsls	r3, r3, #18
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d11f      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e08b      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d107      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b98:	4b47      	ldr	r3, [pc, #284]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	2380      	movs	r3, #128	@ 0x80
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d113      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e07f      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d106      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bb0:	4b41      	ldr	r3, [pc, #260]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d108      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e074      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e06d      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bcc:	4b3a      	ldr	r3, [pc, #232]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2207      	movs	r2, #7
 8002bd2:	4393      	bics	r3, r2
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	4b37      	ldr	r3, [pc, #220]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be0:	f7fe f8c0 	bl	8000d64 <HAL_GetTick>
 8002be4:	0003      	movs	r3, r0
 8002be6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be8:	e009      	b.n	8002bfe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bea:	f7fe f8bb 	bl	8000d64 <HAL_GetTick>
 8002bee:	0002      	movs	r2, r0
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e054      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2238      	movs	r2, #56	@ 0x38
 8002c04:	401a      	ands	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d1ec      	bne.n	8002bea <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c10:	4b27      	ldr	r3, [pc, #156]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2207      	movs	r2, #7
 8002c16:	4013      	ands	r3, r2
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d21e      	bcs.n	8002c5c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1e:	4b24      	ldr	r3, [pc, #144]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2207      	movs	r2, #7
 8002c24:	4393      	bics	r3, r2
 8002c26:	0019      	movs	r1, r3
 8002c28:	4b21      	ldr	r3, [pc, #132]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c30:	f7fe f898 	bl	8000d64 <HAL_GetTick>
 8002c34:	0003      	movs	r3, r0
 8002c36:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c38:	e009      	b.n	8002c4e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c3a:	f7fe f893 	bl	8000d64 <HAL_GetTick>
 8002c3e:	0002      	movs	r2, r0
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	4a1b      	ldr	r2, [pc, #108]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e02c      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c4e:	4b18      	ldr	r3, [pc, #96]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2207      	movs	r2, #7
 8002c54:	4013      	ands	r3, r2
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d1ee      	bne.n	8002c3a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2204      	movs	r2, #4
 8002c62:	4013      	ands	r3, r2
 8002c64:	d009      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c66:	4b14      	ldr	r3, [pc, #80]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	4a15      	ldr	r2, [pc, #84]	@ (8002cc0 <HAL_RCC_ClockConfig+0x200>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	0019      	movs	r1, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	4b10      	ldr	r3, [pc, #64]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002c76:	430a      	orrs	r2, r1
 8002c78:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002c7a:	f000 f829 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8002c7e:	0001      	movs	r1, r0
 8002c80:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	220f      	movs	r2, #15
 8002c88:	401a      	ands	r2, r3
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc4 <HAL_RCC_ClockConfig+0x204>)
 8002c8c:	0092      	lsls	r2, r2, #2
 8002c8e:	58d3      	ldr	r3, [r2, r3]
 8002c90:	221f      	movs	r2, #31
 8002c92:	4013      	ands	r3, r2
 8002c94:	000a      	movs	r2, r1
 8002c96:	40da      	lsrs	r2, r3
 8002c98:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <HAL_RCC_ClockConfig+0x208>)
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_RCC_ClockConfig+0x20c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7fe f803 	bl	8000cac <HAL_InitTick>
 8002ca6:	0003      	movs	r3, r0
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b004      	add	sp, #16
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40022000 	.word	0x40022000
 8002cb4:	00001388 	.word	0x00001388
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	fffff0ff 	.word	0xfffff0ff
 8002cc0:	ffff8fff 	.word	0xffff8fff
 8002cc4:	080048f8 	.word	0x080048f8
 8002cc8:	20000000 	.word	0x20000000
 8002ccc:	20000004 	.word	0x20000004

08002cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cd6:	4b3c      	ldr	r3, [pc, #240]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2238      	movs	r2, #56	@ 0x38
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d10f      	bne.n	8002d00 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ce0:	4b39      	ldr	r3, [pc, #228]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	0adb      	lsrs	r3, r3, #11
 8002ce6:	2207      	movs	r2, #7
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2201      	movs	r2, #1
 8002cec:	409a      	lsls	r2, r3
 8002cee:	0013      	movs	r3, r2
 8002cf0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002cf2:	6839      	ldr	r1, [r7, #0]
 8002cf4:	4835      	ldr	r0, [pc, #212]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cf6:	f7fd fa0f 	bl	8000118 <__udivsi3>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	e05d      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d00:	4b31      	ldr	r3, [pc, #196]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2238      	movs	r2, #56	@ 0x38
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d102      	bne.n	8002d12 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d0c:	4b30      	ldr	r3, [pc, #192]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	e054      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d12:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2238      	movs	r2, #56	@ 0x38
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b10      	cmp	r3, #16
 8002d1c:	d138      	bne.n	8002d90 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2203      	movs	r2, #3
 8002d24:	4013      	ands	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d28:	4b27      	ldr	r3, [pc, #156]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	2207      	movs	r2, #7
 8002d30:	4013      	ands	r3, r2
 8002d32:	3301      	adds	r3, #1
 8002d34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d10d      	bne.n	8002d58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	4824      	ldr	r0, [pc, #144]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002d40:	f7fd f9ea 	bl	8000118 <__udivsi3>
 8002d44:	0003      	movs	r3, r0
 8002d46:	0019      	movs	r1, r3
 8002d48:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	227f      	movs	r2, #127	@ 0x7f
 8002d50:	4013      	ands	r3, r2
 8002d52:	434b      	muls	r3, r1
 8002d54:	617b      	str	r3, [r7, #20]
        break;
 8002d56:	e00d      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	481c      	ldr	r0, [pc, #112]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d5c:	f7fd f9dc 	bl	8000118 <__udivsi3>
 8002d60:	0003      	movs	r3, r0
 8002d62:	0019      	movs	r1, r3
 8002d64:	4b18      	ldr	r3, [pc, #96]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	227f      	movs	r2, #127	@ 0x7f
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	434b      	muls	r3, r1
 8002d70:	617b      	str	r3, [r7, #20]
        break;
 8002d72:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002d74:	4b14      	ldr	r3, [pc, #80]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	0f5b      	lsrs	r3, r3, #29
 8002d7a:	2207      	movs	r2, #7
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	3301      	adds	r3, #1
 8002d80:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	6978      	ldr	r0, [r7, #20]
 8002d86:	f7fd f9c7 	bl	8000118 <__udivsi3>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	e015      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d90:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2238      	movs	r2, #56	@ 0x38
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d103      	bne.n	8002da4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d9c:	2380      	movs	r3, #128	@ 0x80
 8002d9e:	021b      	lsls	r3, r3, #8
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	e00b      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002da4:	4b08      	ldr	r3, [pc, #32]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2238      	movs	r2, #56	@ 0x38
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b18      	cmp	r3, #24
 8002dae:	d103      	bne.n	8002db8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002db0:	23fa      	movs	r3, #250	@ 0xfa
 8002db2:	01db      	lsls	r3, r3, #7
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	e001      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002dbc:	693b      	ldr	r3, [r7, #16]
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b006      	add	sp, #24
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	00f42400 	.word	0x00f42400
 8002dd0:	007a1200 	.word	0x007a1200

08002dd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd8:	4b02      	ldr	r3, [pc, #8]	@ (8002de4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	0018      	movs	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	46c0      	nop			@ (mov r8, r8)
 8002de4:	20000000 	.word	0x20000000

08002de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de8:	b5b0      	push	{r4, r5, r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002dec:	f7ff fff2 	bl	8002dd4 <HAL_RCC_GetHCLKFreq>
 8002df0:	0004      	movs	r4, r0
 8002df2:	f7ff fb3f 	bl	8002474 <LL_RCC_GetAPB1Prescaler>
 8002df6:	0003      	movs	r3, r0
 8002df8:	0b1a      	lsrs	r2, r3, #12
 8002dfa:	4b05      	ldr	r3, [pc, #20]	@ (8002e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dfc:	0092      	lsls	r2, r2, #2
 8002dfe:	58d3      	ldr	r3, [r2, r3]
 8002e00:	221f      	movs	r2, #31
 8002e02:	4013      	ands	r3, r2
 8002e04:	40dc      	lsrs	r4, r3
 8002e06:	0023      	movs	r3, r4
}
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e0e:	46c0      	nop			@ (mov r8, r8)
 8002e10:	08004938 	.word	0x08004938

08002e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002e1c:	2313      	movs	r3, #19
 8002e1e:	18fb      	adds	r3, r7, r3
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e24:	2312      	movs	r3, #18
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	2380      	movs	r3, #128	@ 0x80
 8002e32:	029b      	lsls	r3, r3, #10
 8002e34:	4013      	ands	r3, r2
 8002e36:	d100      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002e38:	e0a3      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3a:	2011      	movs	r0, #17
 8002e3c:	183b      	adds	r3, r7, r0
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e42:	4bc3      	ldr	r3, [pc, #780]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e46:	2380      	movs	r3, #128	@ 0x80
 8002e48:	055b      	lsls	r3, r3, #21
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d110      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	4bc0      	ldr	r3, [pc, #768]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e52:	4bbf      	ldr	r3, [pc, #764]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e54:	2180      	movs	r1, #128	@ 0x80
 8002e56:	0549      	lsls	r1, r1, #21
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e5c:	4bbc      	ldr	r3, [pc, #752]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e60:	2380      	movs	r3, #128	@ 0x80
 8002e62:	055b      	lsls	r3, r3, #21
 8002e64:	4013      	ands	r3, r2
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6a:	183b      	adds	r3, r7, r0
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e70:	4bb8      	ldr	r3, [pc, #736]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4bb7      	ldr	r3, [pc, #732]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002e76:	2180      	movs	r1, #128	@ 0x80
 8002e78:	0049      	lsls	r1, r1, #1
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e7e:	f7fd ff71 	bl	8000d64 <HAL_GetTick>
 8002e82:	0003      	movs	r3, r0
 8002e84:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e86:	e00b      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e88:	f7fd ff6c 	bl	8000d64 <HAL_GetTick>
 8002e8c:	0002      	movs	r2, r0
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d904      	bls.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002e96:	2313      	movs	r3, #19
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	701a      	strb	r2, [r3, #0]
        break;
 8002e9e:	e005      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ea0:	4bac      	ldr	r3, [pc, #688]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	2380      	movs	r3, #128	@ 0x80
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d0ed      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002eac:	2313      	movs	r3, #19
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d154      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002eb6:	4ba6      	ldr	r3, [pc, #664]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002eba:	23c0      	movs	r3, #192	@ 0xc0
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d019      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d014      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ed2:	4b9f      	ldr	r3, [pc, #636]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed6:	4aa0      	ldr	r2, [pc, #640]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002edc:	4b9c      	ldr	r3, [pc, #624]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ede:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ee0:	4b9b      	ldr	r3, [pc, #620]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ee2:	2180      	movs	r1, #128	@ 0x80
 8002ee4:	0249      	lsls	r1, r1, #9
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002eea:	4b99      	ldr	r3, [pc, #612]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002eee:	4b98      	ldr	r3, [pc, #608]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ef0:	499a      	ldr	r1, [pc, #616]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002ef2:	400a      	ands	r2, r1
 8002ef4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ef6:	4b96      	ldr	r3, [pc, #600]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2201      	movs	r2, #1
 8002f00:	4013      	ands	r3, r2
 8002f02:	d016      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fd ff2e 	bl	8000d64 <HAL_GetTick>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f0c:	e00c      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7fd ff29 	bl	8000d64 <HAL_GetTick>
 8002f12:	0002      	movs	r2, r0
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	4a91      	ldr	r2, [pc, #580]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d904      	bls.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002f1e:	2313      	movs	r3, #19
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	2203      	movs	r2, #3
 8002f24:	701a      	strb	r2, [r3, #0]
            break;
 8002f26:	e004      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f28:	4b89      	ldr	r3, [pc, #548]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d0ed      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002f32:	2313      	movs	r3, #19
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10a      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f3c:	4b84      	ldr	r3, [pc, #528]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f40:	4a85      	ldr	r2, [pc, #532]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	0019      	movs	r1, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f4a:	4b81      	ldr	r3, [pc, #516]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f50:	e00c      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f52:	2312      	movs	r3, #18
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	2213      	movs	r2, #19
 8002f58:	18ba      	adds	r2, r7, r2
 8002f5a:	7812      	ldrb	r2, [r2, #0]
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	e005      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f60:	2312      	movs	r3, #18
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	2213      	movs	r2, #19
 8002f66:	18ba      	adds	r2, r7, r2
 8002f68:	7812      	ldrb	r2, [r2, #0]
 8002f6a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f6c:	2311      	movs	r3, #17
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d105      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f76:	4b76      	ldr	r3, [pc, #472]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f7a:	4b75      	ldr	r3, [pc, #468]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f7c:	4979      	ldr	r1, [pc, #484]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002f7e:	400a      	ands	r2, r1
 8002f80:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2201      	movs	r2, #1
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d009      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f8c:	4b70      	ldr	r3, [pc, #448]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f90:	2203      	movs	r2, #3
 8002f92:	4393      	bics	r3, r2
 8002f94:	0019      	movs	r1, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	4b6d      	ldr	r3, [pc, #436]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d009      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002faa:	4b69      	ldr	r3, [pc, #420]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fae:	220c      	movs	r2, #12
 8002fb0:	4393      	bics	r3, r2
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	4b65      	ldr	r3, [pc, #404]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2210      	movs	r2, #16
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d009      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fc8:	4b61      	ldr	r3, [pc, #388]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fcc:	4a66      	ldr	r2, [pc, #408]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	4b5e      	ldr	r3, [pc, #376]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	2380      	movs	r3, #128	@ 0x80
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d009      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fe8:	4b59      	ldr	r3, [pc, #356]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fec:	4a5f      	ldr	r2, [pc, #380]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	0019      	movs	r1, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	4b56      	ldr	r3, [pc, #344]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	2380      	movs	r3, #128	@ 0x80
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4013      	ands	r3, r2
 8003006:	d009      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003008:	4b51      	ldr	r3, [pc, #324]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800300a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300c:	4a58      	ldr	r2, [pc, #352]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800300e:	4013      	ands	r3, r2
 8003010:	0019      	movs	r1, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69da      	ldr	r2, [r3, #28]
 8003016:	4b4e      	ldr	r3, [pc, #312]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003018:	430a      	orrs	r2, r1
 800301a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2220      	movs	r2, #32
 8003022:	4013      	ands	r3, r2
 8003024:	d009      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003026:	4b4a      	ldr	r3, [pc, #296]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302a:	4a52      	ldr	r2, [pc, #328]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800302c:	4013      	ands	r3, r2
 800302e:	0019      	movs	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	4b46      	ldr	r3, [pc, #280]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003036:	430a      	orrs	r2, r1
 8003038:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	2380      	movs	r3, #128	@ 0x80
 8003040:	01db      	lsls	r3, r3, #7
 8003042:	4013      	ands	r3, r2
 8003044:	d015      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003046:	4b42      	ldr	r3, [pc, #264]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	0899      	lsrs	r1, r3, #2
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1a      	ldr	r2, [r3, #32]
 8003052:	4b3f      	ldr	r3, [pc, #252]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003054:	430a      	orrs	r2, r1
 8003056:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1a      	ldr	r2, [r3, #32]
 800305c:	2380      	movs	r3, #128	@ 0x80
 800305e:	05db      	lsls	r3, r3, #23
 8003060:	429a      	cmp	r2, r3
 8003062:	d106      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003064:	4b3a      	ldr	r3, [pc, #232]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	4b39      	ldr	r3, [pc, #228]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800306a:	2180      	movs	r1, #128	@ 0x80
 800306c:	0249      	lsls	r1, r1, #9
 800306e:	430a      	orrs	r2, r1
 8003070:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	2380      	movs	r3, #128	@ 0x80
 8003078:	031b      	lsls	r3, r3, #12
 800307a:	4013      	ands	r3, r2
 800307c:	d009      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800307e:	4b34      	ldr	r3, [pc, #208]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003082:	2240      	movs	r2, #64	@ 0x40
 8003084:	4393      	bics	r3, r2
 8003086:	0019      	movs	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800308c:	4b30      	ldr	r3, [pc, #192]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800308e:	430a      	orrs	r2, r1
 8003090:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	2380      	movs	r3, #128	@ 0x80
 8003098:	039b      	lsls	r3, r3, #14
 800309a:	4013      	ands	r3, r2
 800309c:	d016      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800309e:	4b2c      	ldr	r3, [pc, #176]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a2:	4a35      	ldr	r2, [pc, #212]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	0019      	movs	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ac:	4b28      	ldr	r3, [pc, #160]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030ae:	430a      	orrs	r2, r1
 80030b0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030b6:	2380      	movs	r3, #128	@ 0x80
 80030b8:	03db      	lsls	r3, r3, #15
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d106      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80030be:	4b24      	ldr	r3, [pc, #144]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	4b23      	ldr	r3, [pc, #140]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030c4:	2180      	movs	r1, #128	@ 0x80
 80030c6:	0449      	lsls	r1, r1, #17
 80030c8:	430a      	orrs	r2, r1
 80030ca:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	2380      	movs	r3, #128	@ 0x80
 80030d2:	03db      	lsls	r3, r3, #15
 80030d4:	4013      	ands	r3, r2
 80030d6:	d016      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80030d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030dc:	4a27      	ldr	r2, [pc, #156]	@ (800317c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80030de:	4013      	ands	r3, r2
 80030e0:	0019      	movs	r1, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030e8:	430a      	orrs	r2, r1
 80030ea:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030f0:	2380      	movs	r3, #128	@ 0x80
 80030f2:	045b      	lsls	r3, r3, #17
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d106      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80030f8:	4b15      	ldr	r3, [pc, #84]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	4b14      	ldr	r3, [pc, #80]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030fe:	2180      	movs	r1, #128	@ 0x80
 8003100:	0449      	lsls	r1, r1, #17
 8003102:	430a      	orrs	r2, r1
 8003104:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	2380      	movs	r3, #128	@ 0x80
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	4013      	ands	r3, r2
 8003110:	d016      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003112:	4b0f      	ldr	r3, [pc, #60]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003116:	4a1a      	ldr	r2, [pc, #104]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003118:	4013      	ands	r3, r2
 800311a:	0019      	movs	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003122:	430a      	orrs	r2, r1
 8003124:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	2380      	movs	r3, #128	@ 0x80
 800312c:	01db      	lsls	r3, r3, #7
 800312e:	429a      	cmp	r2, r3
 8003130:	d106      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003132:	4b07      	ldr	r3, [pc, #28]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003138:	2180      	movs	r1, #128	@ 0x80
 800313a:	0249      	lsls	r1, r1, #9
 800313c:	430a      	orrs	r2, r1
 800313e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003140:	2312      	movs	r3, #18
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	781b      	ldrb	r3, [r3, #0]
}
 8003146:	0018      	movs	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	b006      	add	sp, #24
 800314c:	bd80      	pop	{r7, pc}
 800314e:	46c0      	nop			@ (mov r8, r8)
 8003150:	40021000 	.word	0x40021000
 8003154:	40007000 	.word	0x40007000
 8003158:	fffffcff 	.word	0xfffffcff
 800315c:	fffeffff 	.word	0xfffeffff
 8003160:	00001388 	.word	0x00001388
 8003164:	efffffff 	.word	0xefffffff
 8003168:	fffff3ff 	.word	0xfffff3ff
 800316c:	fff3ffff 	.word	0xfff3ffff
 8003170:	ffcfffff 	.word	0xffcfffff
 8003174:	ffffcfff 	.word	0xffffcfff
 8003178:	ffbfffff 	.word	0xffbfffff
 800317c:	feffffff 	.word	0xfeffffff
 8003180:	ffff3fff 	.word	0xffff3fff

08003184 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e046      	b.n	8003224 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2288      	movs	r2, #136	@ 0x88
 800319a:	589b      	ldr	r3, [r3, r2]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d107      	bne.n	80031b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2284      	movs	r2, #132	@ 0x84
 80031a4:	2100      	movs	r1, #0
 80031a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	0018      	movs	r0, r3
 80031ac:	f7fd fc7e 	bl	8000aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2288      	movs	r2, #136	@ 0x88
 80031b4:	2124      	movs	r1, #36	@ 0x24
 80031b6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2101      	movs	r1, #1
 80031c4:	438a      	bics	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	0018      	movs	r0, r3
 80031d4:	f000 fb8e 	bl	80038f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 f8cc 	bl	8003378 <UART_SetConfig>
 80031e0:	0003      	movs	r3, r0
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e01c      	b.n	8003224 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	490d      	ldr	r1, [pc, #52]	@ (800322c <HAL_UART_Init+0xa8>)
 80031f6:	400a      	ands	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	212a      	movs	r1, #42	@ 0x2a
 8003206:	438a      	bics	r2, r1
 8003208:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2101      	movs	r1, #1
 8003216:	430a      	orrs	r2, r1
 8003218:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	0018      	movs	r0, r3
 800321e:	f000 fc1d 	bl	8003a5c <UART_CheckIdleState>
 8003222:	0003      	movs	r3, r0
}
 8003224:	0018      	movs	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	b002      	add	sp, #8
 800322a:	bd80      	pop	{r7, pc}
 800322c:	ffffb7ff 	.word	0xffffb7ff

08003230 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	@ 0x28
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	1dbb      	adds	r3, r7, #6
 800323e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2288      	movs	r2, #136	@ 0x88
 8003244:	589b      	ldr	r3, [r3, r2]
 8003246:	2b20      	cmp	r3, #32
 8003248:	d000      	beq.n	800324c <HAL_UART_Transmit+0x1c>
 800324a:	e090      	b.n	800336e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_UART_Transmit+0x2a>
 8003252:	1dbb      	adds	r3, r7, #6
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e088      	b.n	8003370 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	2380      	movs	r3, #128	@ 0x80
 8003264:	015b      	lsls	r3, r3, #5
 8003266:	429a      	cmp	r2, r3
 8003268:	d109      	bne.n	800327e <HAL_UART_Transmit+0x4e>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d105      	bne.n	800327e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2201      	movs	r2, #1
 8003276:	4013      	ands	r3, r2
 8003278:	d001      	beq.n	800327e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e078      	b.n	8003370 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2290      	movs	r2, #144	@ 0x90
 8003282:	2100      	movs	r1, #0
 8003284:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2288      	movs	r2, #136	@ 0x88
 800328a:	2121      	movs	r1, #33	@ 0x21
 800328c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800328e:	f7fd fd69 	bl	8000d64 <HAL_GetTick>
 8003292:	0003      	movs	r3, r0
 8003294:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1dba      	adds	r2, r7, #6
 800329a:	2154      	movs	r1, #84	@ 0x54
 800329c:	8812      	ldrh	r2, [r2, #0]
 800329e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1dba      	adds	r2, r7, #6
 80032a4:	2156      	movs	r1, #86	@ 0x56
 80032a6:	8812      	ldrh	r2, [r2, #0]
 80032a8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	2380      	movs	r3, #128	@ 0x80
 80032b0:	015b      	lsls	r3, r3, #5
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d108      	bne.n	80032c8 <HAL_UART_Transmit+0x98>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d104      	bne.n	80032c8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	e003      	b.n	80032d0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032d0:	e030      	b.n	8003334 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	0013      	movs	r3, r2
 80032dc:	2200      	movs	r2, #0
 80032de:	2180      	movs	r1, #128	@ 0x80
 80032e0:	f000 fc66 	bl	8003bb0 <UART_WaitOnFlagUntilTimeout>
 80032e4:	1e03      	subs	r3, r0, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2288      	movs	r2, #136	@ 0x88
 80032ec:	2120      	movs	r1, #32
 80032ee:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e03d      	b.n	8003370 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10b      	bne.n	8003312 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	001a      	movs	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	05d2      	lsls	r2, r2, #23
 8003306:	0dd2      	lsrs	r2, r2, #23
 8003308:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	3302      	adds	r3, #2
 800330e:	61bb      	str	r3, [r7, #24]
 8003310:	e007      	b.n	8003322 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	781a      	ldrb	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	3301      	adds	r3, #1
 8003320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2256      	movs	r2, #86	@ 0x56
 8003326:	5a9b      	ldrh	r3, [r3, r2]
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b299      	uxth	r1, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2256      	movs	r2, #86	@ 0x56
 8003332:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2256      	movs	r2, #86	@ 0x56
 8003338:	5a9b      	ldrh	r3, [r3, r2]
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1c8      	bne.n	80032d2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	0013      	movs	r3, r2
 800334a:	2200      	movs	r2, #0
 800334c:	2140      	movs	r1, #64	@ 0x40
 800334e:	f000 fc2f 	bl	8003bb0 <UART_WaitOnFlagUntilTimeout>
 8003352:	1e03      	subs	r3, r0, #0
 8003354:	d005      	beq.n	8003362 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2288      	movs	r2, #136	@ 0x88
 800335a:	2120      	movs	r1, #32
 800335c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e006      	b.n	8003370 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2288      	movs	r2, #136	@ 0x88
 8003366:	2120      	movs	r1, #32
 8003368:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e000      	b.n	8003370 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800336e:	2302      	movs	r3, #2
  }
}
 8003370:	0018      	movs	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	b008      	add	sp, #32
 8003376:	bd80      	pop	{r7, pc}

08003378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003378:	b5b0      	push	{r4, r5, r7, lr}
 800337a:	b090      	sub	sp, #64	@ 0x40
 800337c:	af00      	add	r7, sp, #0
 800337e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003380:	231a      	movs	r3, #26
 8003382:	2220      	movs	r2, #32
 8003384:	189b      	adds	r3, r3, r2
 8003386:	19db      	adds	r3, r3, r7
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800338c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	431a      	orrs	r2, r3
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	431a      	orrs	r2, r3
 800339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4aaf      	ldr	r2, [pc, #700]	@ (8003668 <UART_SetConfig+0x2f0>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	0019      	movs	r1, r3
 80033b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033b6:	430b      	orrs	r3, r1
 80033b8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4aaa      	ldr	r2, [pc, #680]	@ (800366c <UART_SetConfig+0x2f4>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	0018      	movs	r0, r3
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	68d9      	ldr	r1, [r3, #12]
 80033ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	0003      	movs	r3, r0
 80033d0:	430b      	orrs	r3, r1
 80033d2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4aa4      	ldr	r2, [pc, #656]	@ (8003670 <UART_SetConfig+0x2f8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d004      	beq.n	80033ee <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033ea:	4313      	orrs	r3, r2
 80033ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a9f      	ldr	r2, [pc, #636]	@ (8003674 <UART_SetConfig+0x2fc>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003400:	430b      	orrs	r3, r1
 8003402:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340a:	220f      	movs	r2, #15
 800340c:	4393      	bics	r3, r2
 800340e:	0018      	movs	r0, r3
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	0003      	movs	r3, r0
 800341a:	430b      	orrs	r3, r1
 800341c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a95      	ldr	r2, [pc, #596]	@ (8003678 <UART_SetConfig+0x300>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d131      	bne.n	800348c <UART_SetConfig+0x114>
 8003428:	4b94      	ldr	r3, [pc, #592]	@ (800367c <UART_SetConfig+0x304>)
 800342a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342c:	2203      	movs	r2, #3
 800342e:	4013      	ands	r3, r2
 8003430:	2b03      	cmp	r3, #3
 8003432:	d01d      	beq.n	8003470 <UART_SetConfig+0xf8>
 8003434:	d823      	bhi.n	800347e <UART_SetConfig+0x106>
 8003436:	2b02      	cmp	r3, #2
 8003438:	d00c      	beq.n	8003454 <UART_SetConfig+0xdc>
 800343a:	d820      	bhi.n	800347e <UART_SetConfig+0x106>
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <UART_SetConfig+0xce>
 8003440:	2b01      	cmp	r3, #1
 8003442:	d00e      	beq.n	8003462 <UART_SetConfig+0xea>
 8003444:	e01b      	b.n	800347e <UART_SetConfig+0x106>
 8003446:	231b      	movs	r3, #27
 8003448:	2220      	movs	r2, #32
 800344a:	189b      	adds	r3, r3, r2
 800344c:	19db      	adds	r3, r3, r7
 800344e:	2200      	movs	r2, #0
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	e0b4      	b.n	80035be <UART_SetConfig+0x246>
 8003454:	231b      	movs	r3, #27
 8003456:	2220      	movs	r2, #32
 8003458:	189b      	adds	r3, r3, r2
 800345a:	19db      	adds	r3, r3, r7
 800345c:	2202      	movs	r2, #2
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	e0ad      	b.n	80035be <UART_SetConfig+0x246>
 8003462:	231b      	movs	r3, #27
 8003464:	2220      	movs	r2, #32
 8003466:	189b      	adds	r3, r3, r2
 8003468:	19db      	adds	r3, r3, r7
 800346a:	2204      	movs	r2, #4
 800346c:	701a      	strb	r2, [r3, #0]
 800346e:	e0a6      	b.n	80035be <UART_SetConfig+0x246>
 8003470:	231b      	movs	r3, #27
 8003472:	2220      	movs	r2, #32
 8003474:	189b      	adds	r3, r3, r2
 8003476:	19db      	adds	r3, r3, r7
 8003478:	2208      	movs	r2, #8
 800347a:	701a      	strb	r2, [r3, #0]
 800347c:	e09f      	b.n	80035be <UART_SetConfig+0x246>
 800347e:	231b      	movs	r3, #27
 8003480:	2220      	movs	r2, #32
 8003482:	189b      	adds	r3, r3, r2
 8003484:	19db      	adds	r3, r3, r7
 8003486:	2210      	movs	r2, #16
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	e098      	b.n	80035be <UART_SetConfig+0x246>
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a7b      	ldr	r2, [pc, #492]	@ (8003680 <UART_SetConfig+0x308>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d131      	bne.n	80034fa <UART_SetConfig+0x182>
 8003496:	4b79      	ldr	r3, [pc, #484]	@ (800367c <UART_SetConfig+0x304>)
 8003498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349a:	220c      	movs	r2, #12
 800349c:	4013      	ands	r3, r2
 800349e:	2b0c      	cmp	r3, #12
 80034a0:	d01d      	beq.n	80034de <UART_SetConfig+0x166>
 80034a2:	d823      	bhi.n	80034ec <UART_SetConfig+0x174>
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d00c      	beq.n	80034c2 <UART_SetConfig+0x14a>
 80034a8:	d820      	bhi.n	80034ec <UART_SetConfig+0x174>
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <UART_SetConfig+0x13c>
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d00e      	beq.n	80034d0 <UART_SetConfig+0x158>
 80034b2:	e01b      	b.n	80034ec <UART_SetConfig+0x174>
 80034b4:	231b      	movs	r3, #27
 80034b6:	2220      	movs	r2, #32
 80034b8:	189b      	adds	r3, r3, r2
 80034ba:	19db      	adds	r3, r3, r7
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	e07d      	b.n	80035be <UART_SetConfig+0x246>
 80034c2:	231b      	movs	r3, #27
 80034c4:	2220      	movs	r2, #32
 80034c6:	189b      	adds	r3, r3, r2
 80034c8:	19db      	adds	r3, r3, r7
 80034ca:	2202      	movs	r2, #2
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e076      	b.n	80035be <UART_SetConfig+0x246>
 80034d0:	231b      	movs	r3, #27
 80034d2:	2220      	movs	r2, #32
 80034d4:	189b      	adds	r3, r3, r2
 80034d6:	19db      	adds	r3, r3, r7
 80034d8:	2204      	movs	r2, #4
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	e06f      	b.n	80035be <UART_SetConfig+0x246>
 80034de:	231b      	movs	r3, #27
 80034e0:	2220      	movs	r2, #32
 80034e2:	189b      	adds	r3, r3, r2
 80034e4:	19db      	adds	r3, r3, r7
 80034e6:	2208      	movs	r2, #8
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	e068      	b.n	80035be <UART_SetConfig+0x246>
 80034ec:	231b      	movs	r3, #27
 80034ee:	2220      	movs	r2, #32
 80034f0:	189b      	adds	r3, r3, r2
 80034f2:	19db      	adds	r3, r3, r7
 80034f4:	2210      	movs	r2, #16
 80034f6:	701a      	strb	r2, [r3, #0]
 80034f8:	e061      	b.n	80035be <UART_SetConfig+0x246>
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a61      	ldr	r2, [pc, #388]	@ (8003684 <UART_SetConfig+0x30c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d106      	bne.n	8003512 <UART_SetConfig+0x19a>
 8003504:	231b      	movs	r3, #27
 8003506:	2220      	movs	r2, #32
 8003508:	189b      	adds	r3, r3, r2
 800350a:	19db      	adds	r3, r3, r7
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
 8003510:	e055      	b.n	80035be <UART_SetConfig+0x246>
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a5c      	ldr	r2, [pc, #368]	@ (8003688 <UART_SetConfig+0x310>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d106      	bne.n	800352a <UART_SetConfig+0x1b2>
 800351c:	231b      	movs	r3, #27
 800351e:	2220      	movs	r2, #32
 8003520:	189b      	adds	r3, r3, r2
 8003522:	19db      	adds	r3, r3, r7
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
 8003528:	e049      	b.n	80035be <UART_SetConfig+0x246>
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a50      	ldr	r2, [pc, #320]	@ (8003670 <UART_SetConfig+0x2f8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d13e      	bne.n	80035b2 <UART_SetConfig+0x23a>
 8003534:	4b51      	ldr	r3, [pc, #324]	@ (800367c <UART_SetConfig+0x304>)
 8003536:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003538:	23c0      	movs	r3, #192	@ 0xc0
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	4013      	ands	r3, r2
 800353e:	22c0      	movs	r2, #192	@ 0xc0
 8003540:	0112      	lsls	r2, r2, #4
 8003542:	4293      	cmp	r3, r2
 8003544:	d027      	beq.n	8003596 <UART_SetConfig+0x21e>
 8003546:	22c0      	movs	r2, #192	@ 0xc0
 8003548:	0112      	lsls	r2, r2, #4
 800354a:	4293      	cmp	r3, r2
 800354c:	d82a      	bhi.n	80035a4 <UART_SetConfig+0x22c>
 800354e:	2280      	movs	r2, #128	@ 0x80
 8003550:	0112      	lsls	r2, r2, #4
 8003552:	4293      	cmp	r3, r2
 8003554:	d011      	beq.n	800357a <UART_SetConfig+0x202>
 8003556:	2280      	movs	r2, #128	@ 0x80
 8003558:	0112      	lsls	r2, r2, #4
 800355a:	4293      	cmp	r3, r2
 800355c:	d822      	bhi.n	80035a4 <UART_SetConfig+0x22c>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d004      	beq.n	800356c <UART_SetConfig+0x1f4>
 8003562:	2280      	movs	r2, #128	@ 0x80
 8003564:	00d2      	lsls	r2, r2, #3
 8003566:	4293      	cmp	r3, r2
 8003568:	d00e      	beq.n	8003588 <UART_SetConfig+0x210>
 800356a:	e01b      	b.n	80035a4 <UART_SetConfig+0x22c>
 800356c:	231b      	movs	r3, #27
 800356e:	2220      	movs	r2, #32
 8003570:	189b      	adds	r3, r3, r2
 8003572:	19db      	adds	r3, r3, r7
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]
 8003578:	e021      	b.n	80035be <UART_SetConfig+0x246>
 800357a:	231b      	movs	r3, #27
 800357c:	2220      	movs	r2, #32
 800357e:	189b      	adds	r3, r3, r2
 8003580:	19db      	adds	r3, r3, r7
 8003582:	2202      	movs	r2, #2
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	e01a      	b.n	80035be <UART_SetConfig+0x246>
 8003588:	231b      	movs	r3, #27
 800358a:	2220      	movs	r2, #32
 800358c:	189b      	adds	r3, r3, r2
 800358e:	19db      	adds	r3, r3, r7
 8003590:	2204      	movs	r2, #4
 8003592:	701a      	strb	r2, [r3, #0]
 8003594:	e013      	b.n	80035be <UART_SetConfig+0x246>
 8003596:	231b      	movs	r3, #27
 8003598:	2220      	movs	r2, #32
 800359a:	189b      	adds	r3, r3, r2
 800359c:	19db      	adds	r3, r3, r7
 800359e:	2208      	movs	r2, #8
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	e00c      	b.n	80035be <UART_SetConfig+0x246>
 80035a4:	231b      	movs	r3, #27
 80035a6:	2220      	movs	r2, #32
 80035a8:	189b      	adds	r3, r3, r2
 80035aa:	19db      	adds	r3, r3, r7
 80035ac:	2210      	movs	r2, #16
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	e005      	b.n	80035be <UART_SetConfig+0x246>
 80035b2:	231b      	movs	r3, #27
 80035b4:	2220      	movs	r2, #32
 80035b6:	189b      	adds	r3, r3, r2
 80035b8:	19db      	adds	r3, r3, r7
 80035ba:	2210      	movs	r2, #16
 80035bc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a2b      	ldr	r2, [pc, #172]	@ (8003670 <UART_SetConfig+0x2f8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d000      	beq.n	80035ca <UART_SetConfig+0x252>
 80035c8:	e0a9      	b.n	800371e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035ca:	231b      	movs	r3, #27
 80035cc:	2220      	movs	r2, #32
 80035ce:	189b      	adds	r3, r3, r2
 80035d0:	19db      	adds	r3, r3, r7
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d015      	beq.n	8003604 <UART_SetConfig+0x28c>
 80035d8:	dc18      	bgt.n	800360c <UART_SetConfig+0x294>
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d00d      	beq.n	80035fa <UART_SetConfig+0x282>
 80035de:	dc15      	bgt.n	800360c <UART_SetConfig+0x294>
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <UART_SetConfig+0x272>
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d005      	beq.n	80035f4 <UART_SetConfig+0x27c>
 80035e8:	e010      	b.n	800360c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ea:	f7ff fbfd 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 80035ee:	0003      	movs	r3, r0
 80035f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035f2:	e014      	b.n	800361e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f4:	4b25      	ldr	r3, [pc, #148]	@ (800368c <UART_SetConfig+0x314>)
 80035f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035f8:	e011      	b.n	800361e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035fa:	f7ff fb69 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 80035fe:	0003      	movs	r3, r0
 8003600:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003602:	e00c      	b.n	800361e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003604:	2380      	movs	r3, #128	@ 0x80
 8003606:	021b      	lsls	r3, r3, #8
 8003608:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800360a:	e008      	b.n	800361e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003610:	231a      	movs	r3, #26
 8003612:	2220      	movs	r2, #32
 8003614:	189b      	adds	r3, r3, r2
 8003616:	19db      	adds	r3, r3, r7
 8003618:	2201      	movs	r2, #1
 800361a:	701a      	strb	r2, [r3, #0]
        break;
 800361c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800361e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003620:	2b00      	cmp	r3, #0
 8003622:	d100      	bne.n	8003626 <UART_SetConfig+0x2ae>
 8003624:	e14b      	b.n	80038be <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800362a:	4b19      	ldr	r3, [pc, #100]	@ (8003690 <UART_SetConfig+0x318>)
 800362c:	0052      	lsls	r2, r2, #1
 800362e:	5ad3      	ldrh	r3, [r2, r3]
 8003630:	0019      	movs	r1, r3
 8003632:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003634:	f7fc fd70 	bl	8000118 <__udivsi3>
 8003638:	0003      	movs	r3, r0
 800363a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800363c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	0013      	movs	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	189b      	adds	r3, r3, r2
 8003646:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003648:	429a      	cmp	r2, r3
 800364a:	d305      	bcc.n	8003658 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003654:	429a      	cmp	r2, r3
 8003656:	d91d      	bls.n	8003694 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003658:	231a      	movs	r3, #26
 800365a:	2220      	movs	r2, #32
 800365c:	189b      	adds	r3, r3, r2
 800365e:	19db      	adds	r3, r3, r7
 8003660:	2201      	movs	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]
 8003664:	e12b      	b.n	80038be <UART_SetConfig+0x546>
 8003666:	46c0      	nop			@ (mov r8, r8)
 8003668:	cfff69f3 	.word	0xcfff69f3
 800366c:	ffffcfff 	.word	0xffffcfff
 8003670:	40008000 	.word	0x40008000
 8003674:	11fff4ff 	.word	0x11fff4ff
 8003678:	40013800 	.word	0x40013800
 800367c:	40021000 	.word	0x40021000
 8003680:	40004400 	.word	0x40004400
 8003684:	40004800 	.word	0x40004800
 8003688:	40004c00 	.word	0x40004c00
 800368c:	00f42400 	.word	0x00f42400
 8003690:	08004958 	.word	0x08004958
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003696:	61bb      	str	r3, [r7, #24]
 8003698:	2300      	movs	r3, #0
 800369a:	61fb      	str	r3, [r7, #28]
 800369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036a0:	4b92      	ldr	r3, [pc, #584]	@ (80038ec <UART_SetConfig+0x574>)
 80036a2:	0052      	lsls	r2, r2, #1
 80036a4:	5ad3      	ldrh	r3, [r2, r3]
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	69b8      	ldr	r0, [r7, #24]
 80036b2:	69f9      	ldr	r1, [r7, #28]
 80036b4:	f7fc fea6 	bl	8000404 <__aeabi_uldivmod>
 80036b8:	0002      	movs	r2, r0
 80036ba:	000b      	movs	r3, r1
 80036bc:	0e11      	lsrs	r1, r2, #24
 80036be:	021d      	lsls	r5, r3, #8
 80036c0:	430d      	orrs	r5, r1
 80036c2:	0214      	lsls	r4, r2, #8
 80036c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	085b      	lsrs	r3, r3, #1
 80036ca:	60bb      	str	r3, [r7, #8]
 80036cc:	2300      	movs	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68b8      	ldr	r0, [r7, #8]
 80036d2:	68f9      	ldr	r1, [r7, #12]
 80036d4:	1900      	adds	r0, r0, r4
 80036d6:	4169      	adcs	r1, r5
 80036d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	2300      	movs	r3, #0
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f7fc fe8d 	bl	8000404 <__aeabi_uldivmod>
 80036ea:	0002      	movs	r2, r0
 80036ec:	000b      	movs	r3, r1
 80036ee:	0013      	movs	r3, r2
 80036f0:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036f4:	23c0      	movs	r3, #192	@ 0xc0
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d309      	bcc.n	8003710 <UART_SetConfig+0x398>
 80036fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036fe:	2380      	movs	r3, #128	@ 0x80
 8003700:	035b      	lsls	r3, r3, #13
 8003702:	429a      	cmp	r2, r3
 8003704:	d204      	bcs.n	8003710 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800370c:	60da      	str	r2, [r3, #12]
 800370e:	e0d6      	b.n	80038be <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003710:	231a      	movs	r3, #26
 8003712:	2220      	movs	r2, #32
 8003714:	189b      	adds	r3, r3, r2
 8003716:	19db      	adds	r3, r3, r7
 8003718:	2201      	movs	r2, #1
 800371a:	701a      	strb	r2, [r3, #0]
 800371c:	e0cf      	b.n	80038be <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	69da      	ldr	r2, [r3, #28]
 8003722:	2380      	movs	r3, #128	@ 0x80
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	429a      	cmp	r2, r3
 8003728:	d000      	beq.n	800372c <UART_SetConfig+0x3b4>
 800372a:	e070      	b.n	800380e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800372c:	231b      	movs	r3, #27
 800372e:	2220      	movs	r2, #32
 8003730:	189b      	adds	r3, r3, r2
 8003732:	19db      	adds	r3, r3, r7
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b08      	cmp	r3, #8
 8003738:	d015      	beq.n	8003766 <UART_SetConfig+0x3ee>
 800373a:	dc18      	bgt.n	800376e <UART_SetConfig+0x3f6>
 800373c:	2b04      	cmp	r3, #4
 800373e:	d00d      	beq.n	800375c <UART_SetConfig+0x3e4>
 8003740:	dc15      	bgt.n	800376e <UART_SetConfig+0x3f6>
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <UART_SetConfig+0x3d4>
 8003746:	2b02      	cmp	r3, #2
 8003748:	d005      	beq.n	8003756 <UART_SetConfig+0x3de>
 800374a:	e010      	b.n	800376e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800374c:	f7ff fb4c 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8003750:	0003      	movs	r3, r0
 8003752:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003754:	e014      	b.n	8003780 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003756:	4b66      	ldr	r3, [pc, #408]	@ (80038f0 <UART_SetConfig+0x578>)
 8003758:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800375a:	e011      	b.n	8003780 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800375c:	f7ff fab8 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8003760:	0003      	movs	r3, r0
 8003762:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003764:	e00c      	b.n	8003780 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003766:	2380      	movs	r3, #128	@ 0x80
 8003768:	021b      	lsls	r3, r3, #8
 800376a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800376c:	e008      	b.n	8003780 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003772:	231a      	movs	r3, #26
 8003774:	2220      	movs	r2, #32
 8003776:	189b      	adds	r3, r3, r2
 8003778:	19db      	adds	r3, r3, r7
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
        break;
 800377e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003782:	2b00      	cmp	r3, #0
 8003784:	d100      	bne.n	8003788 <UART_SetConfig+0x410>
 8003786:	e09a      	b.n	80038be <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800378c:	4b57      	ldr	r3, [pc, #348]	@ (80038ec <UART_SetConfig+0x574>)
 800378e:	0052      	lsls	r2, r2, #1
 8003790:	5ad3      	ldrh	r3, [r2, r3]
 8003792:	0019      	movs	r1, r3
 8003794:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003796:	f7fc fcbf 	bl	8000118 <__udivsi3>
 800379a:	0003      	movs	r3, r0
 800379c:	005a      	lsls	r2, r3, #1
 800379e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	085b      	lsrs	r3, r3, #1
 80037a4:	18d2      	adds	r2, r2, r3
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	0019      	movs	r1, r3
 80037ac:	0010      	movs	r0, r2
 80037ae:	f7fc fcb3 	bl	8000118 <__udivsi3>
 80037b2:	0003      	movs	r3, r0
 80037b4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b8:	2b0f      	cmp	r3, #15
 80037ba:	d921      	bls.n	8003800 <UART_SetConfig+0x488>
 80037bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037be:	2380      	movs	r3, #128	@ 0x80
 80037c0:	025b      	lsls	r3, r3, #9
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d21c      	bcs.n	8003800 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	200e      	movs	r0, #14
 80037cc:	2420      	movs	r4, #32
 80037ce:	1903      	adds	r3, r0, r4
 80037d0:	19db      	adds	r3, r3, r7
 80037d2:	210f      	movs	r1, #15
 80037d4:	438a      	bics	r2, r1
 80037d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2207      	movs	r2, #7
 80037e0:	4013      	ands	r3, r2
 80037e2:	b299      	uxth	r1, r3
 80037e4:	1903      	adds	r3, r0, r4
 80037e6:	19db      	adds	r3, r3, r7
 80037e8:	1902      	adds	r2, r0, r4
 80037ea:	19d2      	adds	r2, r2, r7
 80037ec:	8812      	ldrh	r2, [r2, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	1902      	adds	r2, r0, r4
 80037f8:	19d2      	adds	r2, r2, r7
 80037fa:	8812      	ldrh	r2, [r2, #0]
 80037fc:	60da      	str	r2, [r3, #12]
 80037fe:	e05e      	b.n	80038be <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003800:	231a      	movs	r3, #26
 8003802:	2220      	movs	r2, #32
 8003804:	189b      	adds	r3, r3, r2
 8003806:	19db      	adds	r3, r3, r7
 8003808:	2201      	movs	r2, #1
 800380a:	701a      	strb	r2, [r3, #0]
 800380c:	e057      	b.n	80038be <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800380e:	231b      	movs	r3, #27
 8003810:	2220      	movs	r2, #32
 8003812:	189b      	adds	r3, r3, r2
 8003814:	19db      	adds	r3, r3, r7
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d015      	beq.n	8003848 <UART_SetConfig+0x4d0>
 800381c:	dc18      	bgt.n	8003850 <UART_SetConfig+0x4d8>
 800381e:	2b04      	cmp	r3, #4
 8003820:	d00d      	beq.n	800383e <UART_SetConfig+0x4c6>
 8003822:	dc15      	bgt.n	8003850 <UART_SetConfig+0x4d8>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <UART_SetConfig+0x4b6>
 8003828:	2b02      	cmp	r3, #2
 800382a:	d005      	beq.n	8003838 <UART_SetConfig+0x4c0>
 800382c:	e010      	b.n	8003850 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800382e:	f7ff fadb 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8003832:	0003      	movs	r3, r0
 8003834:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003836:	e014      	b.n	8003862 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003838:	4b2d      	ldr	r3, [pc, #180]	@ (80038f0 <UART_SetConfig+0x578>)
 800383a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800383c:	e011      	b.n	8003862 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383e:	f7ff fa47 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8003842:	0003      	movs	r3, r0
 8003844:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003846:	e00c      	b.n	8003862 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003848:	2380      	movs	r3, #128	@ 0x80
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800384e:	e008      	b.n	8003862 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003854:	231a      	movs	r3, #26
 8003856:	2220      	movs	r2, #32
 8003858:	189b      	adds	r3, r3, r2
 800385a:	19db      	adds	r3, r3, r7
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
        break;
 8003860:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003864:	2b00      	cmp	r3, #0
 8003866:	d02a      	beq.n	80038be <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800386c:	4b1f      	ldr	r3, [pc, #124]	@ (80038ec <UART_SetConfig+0x574>)
 800386e:	0052      	lsls	r2, r2, #1
 8003870:	5ad3      	ldrh	r3, [r2, r3]
 8003872:	0019      	movs	r1, r3
 8003874:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003876:	f7fc fc4f 	bl	8000118 <__udivsi3>
 800387a:	0003      	movs	r3, r0
 800387c:	001a      	movs	r2, r3
 800387e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	085b      	lsrs	r3, r3, #1
 8003884:	18d2      	adds	r2, r2, r3
 8003886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	0019      	movs	r1, r3
 800388c:	0010      	movs	r0, r2
 800388e:	f7fc fc43 	bl	8000118 <__udivsi3>
 8003892:	0003      	movs	r3, r0
 8003894:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003898:	2b0f      	cmp	r3, #15
 800389a:	d90a      	bls.n	80038b2 <UART_SetConfig+0x53a>
 800389c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800389e:	2380      	movs	r3, #128	@ 0x80
 80038a0:	025b      	lsls	r3, r3, #9
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d205      	bcs.n	80038b2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60da      	str	r2, [r3, #12]
 80038b0:	e005      	b.n	80038be <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80038b2:	231a      	movs	r3, #26
 80038b4:	2220      	movs	r2, #32
 80038b6:	189b      	adds	r3, r3, r2
 80038b8:	19db      	adds	r3, r3, r7
 80038ba:	2201      	movs	r2, #1
 80038bc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	226a      	movs	r2, #106	@ 0x6a
 80038c2:	2101      	movs	r1, #1
 80038c4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c8:	2268      	movs	r2, #104	@ 0x68
 80038ca:	2101      	movs	r1, #1
 80038cc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	2200      	movs	r2, #0
 80038d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80038d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d6:	2200      	movs	r2, #0
 80038d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80038da:	231a      	movs	r3, #26
 80038dc:	2220      	movs	r2, #32
 80038de:	189b      	adds	r3, r3, r2
 80038e0:	19db      	adds	r3, r3, r7
 80038e2:	781b      	ldrb	r3, [r3, #0]
}
 80038e4:	0018      	movs	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b010      	add	sp, #64	@ 0x40
 80038ea:	bdb0      	pop	{r4, r5, r7, pc}
 80038ec:	08004958 	.word	0x08004958
 80038f0:	00f42400 	.word	0x00f42400

080038f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003900:	2208      	movs	r2, #8
 8003902:	4013      	ands	r3, r2
 8003904:	d00b      	beq.n	800391e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4a4a      	ldr	r2, [pc, #296]	@ (8003a38 <UART_AdvFeatureConfig+0x144>)
 800390e:	4013      	ands	r3, r2
 8003910:	0019      	movs	r1, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003922:	2201      	movs	r2, #1
 8003924:	4013      	ands	r3, r2
 8003926:	d00b      	beq.n	8003940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4a43      	ldr	r2, [pc, #268]	@ (8003a3c <UART_AdvFeatureConfig+0x148>)
 8003930:	4013      	ands	r3, r2
 8003932:	0019      	movs	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003944:	2202      	movs	r2, #2
 8003946:	4013      	ands	r3, r2
 8003948:	d00b      	beq.n	8003962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	4a3b      	ldr	r2, [pc, #236]	@ (8003a40 <UART_AdvFeatureConfig+0x14c>)
 8003952:	4013      	ands	r3, r2
 8003954:	0019      	movs	r1, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003966:	2204      	movs	r2, #4
 8003968:	4013      	ands	r3, r2
 800396a:	d00b      	beq.n	8003984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	4a34      	ldr	r2, [pc, #208]	@ (8003a44 <UART_AdvFeatureConfig+0x150>)
 8003974:	4013      	ands	r3, r2
 8003976:	0019      	movs	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003988:	2210      	movs	r2, #16
 800398a:	4013      	ands	r3, r2
 800398c:	d00b      	beq.n	80039a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	4a2c      	ldr	r2, [pc, #176]	@ (8003a48 <UART_AdvFeatureConfig+0x154>)
 8003996:	4013      	ands	r3, r2
 8003998:	0019      	movs	r1, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039aa:	2220      	movs	r2, #32
 80039ac:	4013      	ands	r3, r2
 80039ae:	d00b      	beq.n	80039c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	4a25      	ldr	r2, [pc, #148]	@ (8003a4c <UART_AdvFeatureConfig+0x158>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	0019      	movs	r1, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039cc:	2240      	movs	r2, #64	@ 0x40
 80039ce:	4013      	ands	r3, r2
 80039d0:	d01d      	beq.n	8003a0e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a50 <UART_AdvFeatureConfig+0x15c>)
 80039da:	4013      	ands	r3, r2
 80039dc:	0019      	movs	r1, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039ee:	2380      	movs	r3, #128	@ 0x80
 80039f0:	035b      	lsls	r3, r3, #13
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d10b      	bne.n	8003a0e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4a15      	ldr	r2, [pc, #84]	@ (8003a54 <UART_AdvFeatureConfig+0x160>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	0019      	movs	r1, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a12:	2280      	movs	r2, #128	@ 0x80
 8003a14:	4013      	ands	r3, r2
 8003a16:	d00b      	beq.n	8003a30 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8003a58 <UART_AdvFeatureConfig+0x164>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	0019      	movs	r1, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	605a      	str	r2, [r3, #4]
  }
}
 8003a30:	46c0      	nop			@ (mov r8, r8)
 8003a32:	46bd      	mov	sp, r7
 8003a34:	b002      	add	sp, #8
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	ffff7fff 	.word	0xffff7fff
 8003a3c:	fffdffff 	.word	0xfffdffff
 8003a40:	fffeffff 	.word	0xfffeffff
 8003a44:	fffbffff 	.word	0xfffbffff
 8003a48:	ffffefff 	.word	0xffffefff
 8003a4c:	ffffdfff 	.word	0xffffdfff
 8003a50:	ffefffff 	.word	0xffefffff
 8003a54:	ff9fffff 	.word	0xff9fffff
 8003a58:	fff7ffff 	.word	0xfff7ffff

08003a5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b092      	sub	sp, #72	@ 0x48
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2290      	movs	r2, #144	@ 0x90
 8003a68:	2100      	movs	r1, #0
 8003a6a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a6c:	f7fd f97a 	bl	8000d64 <HAL_GetTick>
 8003a70:	0003      	movs	r3, r0
 8003a72:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2208      	movs	r2, #8
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d12d      	bne.n	8003ade <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a84:	2280      	movs	r2, #128	@ 0x80
 8003a86:	0391      	lsls	r1, r2, #14
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	4a47      	ldr	r2, [pc, #284]	@ (8003ba8 <UART_CheckIdleState+0x14c>)
 8003a8c:	9200      	str	r2, [sp, #0]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f000 f88e 	bl	8003bb0 <UART_WaitOnFlagUntilTimeout>
 8003a94:	1e03      	subs	r3, r0, #0
 8003a96:	d022      	beq.n	8003ade <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a98:	f3ef 8310 	mrs	r3, PRIMASK
 8003a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa8:	f383 8810 	msr	PRIMASK, r3
}
 8003aac:	46c0      	nop			@ (mov r8, r8)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2180      	movs	r1, #128	@ 0x80
 8003aba:	438a      	bics	r2, r1
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac4:	f383 8810 	msr	PRIMASK, r3
}
 8003ac8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2288      	movs	r2, #136	@ 0x88
 8003ace:	2120      	movs	r1, #32
 8003ad0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2284      	movs	r2, #132	@ 0x84
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e060      	b.n	8003ba0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d146      	bne.n	8003b7a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aee:	2280      	movs	r2, #128	@ 0x80
 8003af0:	03d1      	lsls	r1, r2, #15
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	4a2c      	ldr	r2, [pc, #176]	@ (8003ba8 <UART_CheckIdleState+0x14c>)
 8003af6:	9200      	str	r2, [sp, #0]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f000 f859 	bl	8003bb0 <UART_WaitOnFlagUntilTimeout>
 8003afe:	1e03      	subs	r3, r0, #0
 8003b00:	d03b      	beq.n	8003b7a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b02:	f3ef 8310 	mrs	r3, PRIMASK
 8003b06:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b08:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f383 8810 	msr	PRIMASK, r3
}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4922      	ldr	r1, [pc, #136]	@ (8003bac <UART_CheckIdleState+0x150>)
 8003b24:	400a      	ands	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f383 8810 	msr	PRIMASK, r3
}
 8003b32:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b34:	f3ef 8310 	mrs	r3, PRIMASK
 8003b38:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b3a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b3e:	2301      	movs	r3, #1
 8003b40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f383 8810 	msr	PRIMASK, r3
}
 8003b48:	46c0      	nop			@ (mov r8, r8)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2101      	movs	r1, #1
 8003b56:	438a      	bics	r2, r1
 8003b58:	609a      	str	r2, [r3, #8]
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	f383 8810 	msr	PRIMASK, r3
}
 8003b64:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	228c      	movs	r2, #140	@ 0x8c
 8003b6a:	2120      	movs	r1, #32
 8003b6c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2284      	movs	r2, #132	@ 0x84
 8003b72:	2100      	movs	r1, #0
 8003b74:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e012      	b.n	8003ba0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2288      	movs	r2, #136	@ 0x88
 8003b7e:	2120      	movs	r1, #32
 8003b80:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	228c      	movs	r2, #140	@ 0x8c
 8003b86:	2120      	movs	r1, #32
 8003b88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2284      	movs	r2, #132	@ 0x84
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b010      	add	sp, #64	@ 0x40
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	01ffffff 	.word	0x01ffffff
 8003bac:	fffffedf 	.word	0xfffffedf

08003bb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	1dfb      	adds	r3, r7, #7
 8003bbe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc0:	e051      	b.n	8003c66 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	d04e      	beq.n	8003c66 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc8:	f7fd f8cc 	bl	8000d64 <HAL_GetTick>
 8003bcc:	0002      	movs	r2, r0
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d302      	bcc.n	8003bde <UART_WaitOnFlagUntilTimeout+0x2e>
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e051      	b.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2204      	movs	r2, #4
 8003bea:	4013      	ands	r3, r2
 8003bec:	d03b      	beq.n	8003c66 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b80      	cmp	r3, #128	@ 0x80
 8003bf2:	d038      	beq.n	8003c66 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b40      	cmp	r3, #64	@ 0x40
 8003bf8:	d035      	beq.n	8003c66 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	2208      	movs	r2, #8
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d111      	bne.n	8003c2c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	0018      	movs	r0, r3
 8003c14:	f000 f83c 	bl	8003c90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2290      	movs	r2, #144	@ 0x90
 8003c1c:	2108      	movs	r1, #8
 8003c1e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2284      	movs	r2, #132	@ 0x84
 8003c24:	2100      	movs	r1, #0
 8003c26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e02c      	b.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69da      	ldr	r2, [r3, #28]
 8003c32:	2380      	movs	r3, #128	@ 0x80
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	401a      	ands	r2, r3
 8003c38:	2380      	movs	r3, #128	@ 0x80
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d112      	bne.n	8003c66 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2280      	movs	r2, #128	@ 0x80
 8003c46:	0112      	lsls	r2, r2, #4
 8003c48:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f000 f81f 	bl	8003c90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2290      	movs	r2, #144	@ 0x90
 8003c56:	2120      	movs	r1, #32
 8003c58:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2284      	movs	r2, #132	@ 0x84
 8003c5e:	2100      	movs	r1, #0
 8003c60:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e00f      	b.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	425a      	negs	r2, r3
 8003c76:	4153      	adcs	r3, r2
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	001a      	movs	r2, r3
 8003c7c:	1dfb      	adds	r3, r7, #7
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d09e      	beq.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b004      	add	sp, #16
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08e      	sub	sp, #56	@ 0x38
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c98:	f3ef 8310 	mrs	r3, PRIMASK
 8003c9c:	617b      	str	r3, [r7, #20]
  return(result);
 8003c9e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f383 8810 	msr	PRIMASK, r3
}
 8003cac:	46c0      	nop			@ (mov r8, r8)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4926      	ldr	r1, [pc, #152]	@ (8003d54 <UART_EndRxTransfer+0xc4>)
 8003cba:	400a      	ands	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f383 8810 	msr	PRIMASK, r3
}
 8003cc8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cca:	f3ef 8310 	mrs	r3, PRIMASK
 8003cce:	623b      	str	r3, [r7, #32]
  return(result);
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003cd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cda:	f383 8810 	msr	PRIMASK, r3
}
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	491b      	ldr	r1, [pc, #108]	@ (8003d58 <UART_EndRxTransfer+0xc8>)
 8003cec:	400a      	ands	r2, r1
 8003cee:	609a      	str	r2, [r3, #8]
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf6:	f383 8810 	msr	PRIMASK, r3
}
 8003cfa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d118      	bne.n	8003d36 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d04:	f3ef 8310 	mrs	r3, PRIMASK
 8003d08:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d0a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d0e:	2301      	movs	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f383 8810 	msr	PRIMASK, r3
}
 8003d18:	46c0      	nop			@ (mov r8, r8)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2110      	movs	r1, #16
 8003d26:	438a      	bics	r2, r1
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f383 8810 	msr	PRIMASK, r3
}
 8003d34:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	228c      	movs	r2, #140	@ 0x8c
 8003d3a:	2120      	movs	r1, #32
 8003d3c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003d4a:	46c0      	nop			@ (mov r8, r8)
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b00e      	add	sp, #56	@ 0x38
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	fffffedf 	.word	0xfffffedf
 8003d58:	effffffe 	.word	0xeffffffe

08003d5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2284      	movs	r2, #132	@ 0x84
 8003d68:	5c9b      	ldrb	r3, [r3, r2]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_UARTEx_DisableFifoMode+0x16>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e027      	b.n	8003dc2 <HAL_UARTEx_DisableFifoMode+0x66>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2284      	movs	r2, #132	@ 0x84
 8003d76:	2101      	movs	r1, #1
 8003d78:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2288      	movs	r2, #136	@ 0x88
 8003d7e:	2124      	movs	r1, #36	@ 0x24
 8003d80:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2101      	movs	r1, #1
 8003d96:	438a      	bics	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8003dcc <HAL_UARTEx_DisableFifoMode+0x70>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2288      	movs	r2, #136	@ 0x88
 8003db4:	2120      	movs	r1, #32
 8003db6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2284      	movs	r2, #132	@ 0x84
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	b004      	add	sp, #16
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	46c0      	nop			@ (mov r8, r8)
 8003dcc:	dfffffff 	.word	0xdfffffff

08003dd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2284      	movs	r2, #132	@ 0x84
 8003dde:	5c9b      	ldrb	r3, [r3, r2]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e02e      	b.n	8003e46 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2284      	movs	r2, #132	@ 0x84
 8003dec:	2101      	movs	r1, #1
 8003dee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2288      	movs	r2, #136	@ 0x88
 8003df4:	2124      	movs	r1, #36	@ 0x24
 8003df6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	438a      	bics	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	08d9      	lsrs	r1, r3, #3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	0018      	movs	r0, r3
 8003e28:	f000 f854 	bl	8003ed4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2288      	movs	r2, #136	@ 0x88
 8003e38:	2120      	movs	r1, #32
 8003e3a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2284      	movs	r2, #132	@ 0x84
 8003e40:	2100      	movs	r1, #0
 8003e42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	0018      	movs	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	b004      	add	sp, #16
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2284      	movs	r2, #132	@ 0x84
 8003e5e:	5c9b      	ldrb	r3, [r3, r2]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e02f      	b.n	8003ec8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2284      	movs	r2, #132	@ 0x84
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2288      	movs	r2, #136	@ 0x88
 8003e74:	2124      	movs	r1, #36	@ 0x24
 8003e76:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	438a      	bics	r2, r1
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	4a0e      	ldr	r2, [pc, #56]	@ (8003ed0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003e98:	4013      	ands	r3, r2
 8003e9a:	0019      	movs	r1, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f000 f813 	bl	8003ed4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2288      	movs	r2, #136	@ 0x88
 8003eba:	2120      	movs	r1, #32
 8003ebc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2284      	movs	r2, #132	@ 0x84
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	0018      	movs	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b004      	add	sp, #16
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	f1ffffff 	.word	0xf1ffffff

08003ed4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d108      	bne.n	8003ef6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	226a      	movs	r2, #106	@ 0x6a
 8003ee8:	2101      	movs	r1, #1
 8003eea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2268      	movs	r2, #104	@ 0x68
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ef4:	e043      	b.n	8003f7e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ef6:	260f      	movs	r6, #15
 8003ef8:	19bb      	adds	r3, r7, r6
 8003efa:	2208      	movs	r2, #8
 8003efc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003efe:	200e      	movs	r0, #14
 8003f00:	183b      	adds	r3, r7, r0
 8003f02:	2208      	movs	r2, #8
 8003f04:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	0e5b      	lsrs	r3, r3, #25
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	240d      	movs	r4, #13
 8003f12:	193b      	adds	r3, r7, r4
 8003f14:	2107      	movs	r1, #7
 8003f16:	400a      	ands	r2, r1
 8003f18:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	0f5b      	lsrs	r3, r3, #29
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	250c      	movs	r5, #12
 8003f26:	197b      	adds	r3, r7, r5
 8003f28:	2107      	movs	r1, #7
 8003f2a:	400a      	ands	r2, r1
 8003f2c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f2e:	183b      	adds	r3, r7, r0
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	197a      	adds	r2, r7, r5
 8003f34:	7812      	ldrb	r2, [r2, #0]
 8003f36:	4914      	ldr	r1, [pc, #80]	@ (8003f88 <UARTEx_SetNbDataToProcess+0xb4>)
 8003f38:	5c8a      	ldrb	r2, [r1, r2]
 8003f3a:	435a      	muls	r2, r3
 8003f3c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f3e:	197b      	adds	r3, r7, r5
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	4a12      	ldr	r2, [pc, #72]	@ (8003f8c <UARTEx_SetNbDataToProcess+0xb8>)
 8003f44:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f46:	0019      	movs	r1, r3
 8003f48:	f7fc f970 	bl	800022c <__divsi3>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	b299      	uxth	r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	226a      	movs	r2, #106	@ 0x6a
 8003f54:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f56:	19bb      	adds	r3, r7, r6
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	193a      	adds	r2, r7, r4
 8003f5c:	7812      	ldrb	r2, [r2, #0]
 8003f5e:	490a      	ldr	r1, [pc, #40]	@ (8003f88 <UARTEx_SetNbDataToProcess+0xb4>)
 8003f60:	5c8a      	ldrb	r2, [r1, r2]
 8003f62:	435a      	muls	r2, r3
 8003f64:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f66:	193b      	adds	r3, r7, r4
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	4a08      	ldr	r2, [pc, #32]	@ (8003f8c <UARTEx_SetNbDataToProcess+0xb8>)
 8003f6c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f6e:	0019      	movs	r1, r3
 8003f70:	f7fc f95c 	bl	800022c <__divsi3>
 8003f74:	0003      	movs	r3, r0
 8003f76:	b299      	uxth	r1, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2268      	movs	r2, #104	@ 0x68
 8003f7c:	5299      	strh	r1, [r3, r2]
}
 8003f7e:	46c0      	nop			@ (mov r8, r8)
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b005      	add	sp, #20
 8003f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f86:	46c0      	nop			@ (mov r8, r8)
 8003f88:	08004970 	.word	0x08004970
 8003f8c:	08004978 	.word	0x08004978

08003f90 <siprintf>:
 8003f90:	b40e      	push	{r1, r2, r3}
 8003f92:	b500      	push	{lr}
 8003f94:	490b      	ldr	r1, [pc, #44]	@ (8003fc4 <siprintf+0x34>)
 8003f96:	b09c      	sub	sp, #112	@ 0x70
 8003f98:	ab1d      	add	r3, sp, #116	@ 0x74
 8003f9a:	9002      	str	r0, [sp, #8]
 8003f9c:	9006      	str	r0, [sp, #24]
 8003f9e:	9107      	str	r1, [sp, #28]
 8003fa0:	9104      	str	r1, [sp, #16]
 8003fa2:	4809      	ldr	r0, [pc, #36]	@ (8003fc8 <siprintf+0x38>)
 8003fa4:	4909      	ldr	r1, [pc, #36]	@ (8003fcc <siprintf+0x3c>)
 8003fa6:	cb04      	ldmia	r3!, {r2}
 8003fa8:	9105      	str	r1, [sp, #20]
 8003faa:	6800      	ldr	r0, [r0, #0]
 8003fac:	a902      	add	r1, sp, #8
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	f000 f99e 	bl	80042f0 <_svfiprintf_r>
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	9b02      	ldr	r3, [sp, #8]
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	b01c      	add	sp, #112	@ 0x70
 8003fbc:	bc08      	pop	{r3}
 8003fbe:	b003      	add	sp, #12
 8003fc0:	4718      	bx	r3
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	7fffffff 	.word	0x7fffffff
 8003fc8:	2000000c 	.word	0x2000000c
 8003fcc:	ffff0208 	.word	0xffff0208

08003fd0 <memset>:
 8003fd0:	0003      	movs	r3, r0
 8003fd2:	1882      	adds	r2, r0, r2
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d100      	bne.n	8003fda <memset+0xa>
 8003fd8:	4770      	bx	lr
 8003fda:	7019      	strb	r1, [r3, #0]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	e7f9      	b.n	8003fd4 <memset+0x4>

08003fe0 <__errno>:
 8003fe0:	4b01      	ldr	r3, [pc, #4]	@ (8003fe8 <__errno+0x8>)
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	4770      	bx	lr
 8003fe6:	46c0      	nop			@ (mov r8, r8)
 8003fe8:	2000000c 	.word	0x2000000c

08003fec <__libc_init_array>:
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	2600      	movs	r6, #0
 8003ff0:	4c0c      	ldr	r4, [pc, #48]	@ (8004024 <__libc_init_array+0x38>)
 8003ff2:	4d0d      	ldr	r5, [pc, #52]	@ (8004028 <__libc_init_array+0x3c>)
 8003ff4:	1b64      	subs	r4, r4, r5
 8003ff6:	10a4      	asrs	r4, r4, #2
 8003ff8:	42a6      	cmp	r6, r4
 8003ffa:	d109      	bne.n	8004010 <__libc_init_array+0x24>
 8003ffc:	2600      	movs	r6, #0
 8003ffe:	f000 fc65 	bl	80048cc <_init>
 8004002:	4c0a      	ldr	r4, [pc, #40]	@ (800402c <__libc_init_array+0x40>)
 8004004:	4d0a      	ldr	r5, [pc, #40]	@ (8004030 <__libc_init_array+0x44>)
 8004006:	1b64      	subs	r4, r4, r5
 8004008:	10a4      	asrs	r4, r4, #2
 800400a:	42a6      	cmp	r6, r4
 800400c:	d105      	bne.n	800401a <__libc_init_array+0x2e>
 800400e:	bd70      	pop	{r4, r5, r6, pc}
 8004010:	00b3      	lsls	r3, r6, #2
 8004012:	58eb      	ldr	r3, [r5, r3]
 8004014:	4798      	blx	r3
 8004016:	3601      	adds	r6, #1
 8004018:	e7ee      	b.n	8003ff8 <__libc_init_array+0xc>
 800401a:	00b3      	lsls	r3, r6, #2
 800401c:	58eb      	ldr	r3, [r5, r3]
 800401e:	4798      	blx	r3
 8004020:	3601      	adds	r6, #1
 8004022:	e7f2      	b.n	800400a <__libc_init_array+0x1e>
 8004024:	080049bc 	.word	0x080049bc
 8004028:	080049bc 	.word	0x080049bc
 800402c:	080049c0 	.word	0x080049c0
 8004030:	080049bc 	.word	0x080049bc

08004034 <__retarget_lock_acquire_recursive>:
 8004034:	4770      	bx	lr

08004036 <__retarget_lock_release_recursive>:
 8004036:	4770      	bx	lr

08004038 <_free_r>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	0005      	movs	r5, r0
 800403c:	1e0c      	subs	r4, r1, #0
 800403e:	d010      	beq.n	8004062 <_free_r+0x2a>
 8004040:	3c04      	subs	r4, #4
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	da00      	bge.n	800404a <_free_r+0x12>
 8004048:	18e4      	adds	r4, r4, r3
 800404a:	0028      	movs	r0, r5
 800404c:	f000 f8e0 	bl	8004210 <__malloc_lock>
 8004050:	4a1d      	ldr	r2, [pc, #116]	@ (80040c8 <_free_r+0x90>)
 8004052:	6813      	ldr	r3, [r2, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d105      	bne.n	8004064 <_free_r+0x2c>
 8004058:	6063      	str	r3, [r4, #4]
 800405a:	6014      	str	r4, [r2, #0]
 800405c:	0028      	movs	r0, r5
 800405e:	f000 f8df 	bl	8004220 <__malloc_unlock>
 8004062:	bd70      	pop	{r4, r5, r6, pc}
 8004064:	42a3      	cmp	r3, r4
 8004066:	d908      	bls.n	800407a <_free_r+0x42>
 8004068:	6820      	ldr	r0, [r4, #0]
 800406a:	1821      	adds	r1, r4, r0
 800406c:	428b      	cmp	r3, r1
 800406e:	d1f3      	bne.n	8004058 <_free_r+0x20>
 8004070:	6819      	ldr	r1, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	1809      	adds	r1, r1, r0
 8004076:	6021      	str	r1, [r4, #0]
 8004078:	e7ee      	b.n	8004058 <_free_r+0x20>
 800407a:	001a      	movs	r2, r3
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <_free_r+0x4e>
 8004082:	42a3      	cmp	r3, r4
 8004084:	d9f9      	bls.n	800407a <_free_r+0x42>
 8004086:	6811      	ldr	r1, [r2, #0]
 8004088:	1850      	adds	r0, r2, r1
 800408a:	42a0      	cmp	r0, r4
 800408c:	d10b      	bne.n	80040a6 <_free_r+0x6e>
 800408e:	6820      	ldr	r0, [r4, #0]
 8004090:	1809      	adds	r1, r1, r0
 8004092:	1850      	adds	r0, r2, r1
 8004094:	6011      	str	r1, [r2, #0]
 8004096:	4283      	cmp	r3, r0
 8004098:	d1e0      	bne.n	800405c <_free_r+0x24>
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	1841      	adds	r1, r0, r1
 80040a0:	6011      	str	r1, [r2, #0]
 80040a2:	6053      	str	r3, [r2, #4]
 80040a4:	e7da      	b.n	800405c <_free_r+0x24>
 80040a6:	42a0      	cmp	r0, r4
 80040a8:	d902      	bls.n	80040b0 <_free_r+0x78>
 80040aa:	230c      	movs	r3, #12
 80040ac:	602b      	str	r3, [r5, #0]
 80040ae:	e7d5      	b.n	800405c <_free_r+0x24>
 80040b0:	6820      	ldr	r0, [r4, #0]
 80040b2:	1821      	adds	r1, r4, r0
 80040b4:	428b      	cmp	r3, r1
 80040b6:	d103      	bne.n	80040c0 <_free_r+0x88>
 80040b8:	6819      	ldr	r1, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	1809      	adds	r1, r1, r0
 80040be:	6021      	str	r1, [r4, #0]
 80040c0:	6063      	str	r3, [r4, #4]
 80040c2:	6054      	str	r4, [r2, #4]
 80040c4:	e7ca      	b.n	800405c <_free_r+0x24>
 80040c6:	46c0      	nop			@ (mov r8, r8)
 80040c8:	200002bc 	.word	0x200002bc

080040cc <sbrk_aligned>:
 80040cc:	b570      	push	{r4, r5, r6, lr}
 80040ce:	4e0f      	ldr	r6, [pc, #60]	@ (800410c <sbrk_aligned+0x40>)
 80040d0:	000d      	movs	r5, r1
 80040d2:	6831      	ldr	r1, [r6, #0]
 80040d4:	0004      	movs	r4, r0
 80040d6:	2900      	cmp	r1, #0
 80040d8:	d102      	bne.n	80040e0 <sbrk_aligned+0x14>
 80040da:	f000 fb99 	bl	8004810 <_sbrk_r>
 80040de:	6030      	str	r0, [r6, #0]
 80040e0:	0029      	movs	r1, r5
 80040e2:	0020      	movs	r0, r4
 80040e4:	f000 fb94 	bl	8004810 <_sbrk_r>
 80040e8:	1c43      	adds	r3, r0, #1
 80040ea:	d103      	bne.n	80040f4 <sbrk_aligned+0x28>
 80040ec:	2501      	movs	r5, #1
 80040ee:	426d      	negs	r5, r5
 80040f0:	0028      	movs	r0, r5
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
 80040f4:	2303      	movs	r3, #3
 80040f6:	1cc5      	adds	r5, r0, #3
 80040f8:	439d      	bics	r5, r3
 80040fa:	42a8      	cmp	r0, r5
 80040fc:	d0f8      	beq.n	80040f0 <sbrk_aligned+0x24>
 80040fe:	1a29      	subs	r1, r5, r0
 8004100:	0020      	movs	r0, r4
 8004102:	f000 fb85 	bl	8004810 <_sbrk_r>
 8004106:	3001      	adds	r0, #1
 8004108:	d1f2      	bne.n	80040f0 <sbrk_aligned+0x24>
 800410a:	e7ef      	b.n	80040ec <sbrk_aligned+0x20>
 800410c:	200002b8 	.word	0x200002b8

08004110 <_malloc_r>:
 8004110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004112:	2203      	movs	r2, #3
 8004114:	1ccb      	adds	r3, r1, #3
 8004116:	4393      	bics	r3, r2
 8004118:	3308      	adds	r3, #8
 800411a:	0005      	movs	r5, r0
 800411c:	001f      	movs	r7, r3
 800411e:	2b0c      	cmp	r3, #12
 8004120:	d234      	bcs.n	800418c <_malloc_r+0x7c>
 8004122:	270c      	movs	r7, #12
 8004124:	42b9      	cmp	r1, r7
 8004126:	d833      	bhi.n	8004190 <_malloc_r+0x80>
 8004128:	0028      	movs	r0, r5
 800412a:	f000 f871 	bl	8004210 <__malloc_lock>
 800412e:	4e37      	ldr	r6, [pc, #220]	@ (800420c <_malloc_r+0xfc>)
 8004130:	6833      	ldr	r3, [r6, #0]
 8004132:	001c      	movs	r4, r3
 8004134:	2c00      	cmp	r4, #0
 8004136:	d12f      	bne.n	8004198 <_malloc_r+0x88>
 8004138:	0039      	movs	r1, r7
 800413a:	0028      	movs	r0, r5
 800413c:	f7ff ffc6 	bl	80040cc <sbrk_aligned>
 8004140:	0004      	movs	r4, r0
 8004142:	1c43      	adds	r3, r0, #1
 8004144:	d15f      	bne.n	8004206 <_malloc_r+0xf6>
 8004146:	6834      	ldr	r4, [r6, #0]
 8004148:	9400      	str	r4, [sp, #0]
 800414a:	9b00      	ldr	r3, [sp, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d14a      	bne.n	80041e6 <_malloc_r+0xd6>
 8004150:	2c00      	cmp	r4, #0
 8004152:	d052      	beq.n	80041fa <_malloc_r+0xea>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	0028      	movs	r0, r5
 8004158:	18e3      	adds	r3, r4, r3
 800415a:	9900      	ldr	r1, [sp, #0]
 800415c:	9301      	str	r3, [sp, #4]
 800415e:	f000 fb57 	bl	8004810 <_sbrk_r>
 8004162:	9b01      	ldr	r3, [sp, #4]
 8004164:	4283      	cmp	r3, r0
 8004166:	d148      	bne.n	80041fa <_malloc_r+0xea>
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	0028      	movs	r0, r5
 800416c:	1aff      	subs	r7, r7, r3
 800416e:	0039      	movs	r1, r7
 8004170:	f7ff ffac 	bl	80040cc <sbrk_aligned>
 8004174:	3001      	adds	r0, #1
 8004176:	d040      	beq.n	80041fa <_malloc_r+0xea>
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	19db      	adds	r3, r3, r7
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	6833      	ldr	r3, [r6, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	2a00      	cmp	r2, #0
 8004184:	d133      	bne.n	80041ee <_malloc_r+0xde>
 8004186:	9b00      	ldr	r3, [sp, #0]
 8004188:	6033      	str	r3, [r6, #0]
 800418a:	e019      	b.n	80041c0 <_malloc_r+0xb0>
 800418c:	2b00      	cmp	r3, #0
 800418e:	dac9      	bge.n	8004124 <_malloc_r+0x14>
 8004190:	230c      	movs	r3, #12
 8004192:	602b      	str	r3, [r5, #0]
 8004194:	2000      	movs	r0, #0
 8004196:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004198:	6821      	ldr	r1, [r4, #0]
 800419a:	1bc9      	subs	r1, r1, r7
 800419c:	d420      	bmi.n	80041e0 <_malloc_r+0xd0>
 800419e:	290b      	cmp	r1, #11
 80041a0:	d90a      	bls.n	80041b8 <_malloc_r+0xa8>
 80041a2:	19e2      	adds	r2, r4, r7
 80041a4:	6027      	str	r7, [r4, #0]
 80041a6:	42a3      	cmp	r3, r4
 80041a8:	d104      	bne.n	80041b4 <_malloc_r+0xa4>
 80041aa:	6032      	str	r2, [r6, #0]
 80041ac:	6863      	ldr	r3, [r4, #4]
 80041ae:	6011      	str	r1, [r2, #0]
 80041b0:	6053      	str	r3, [r2, #4]
 80041b2:	e005      	b.n	80041c0 <_malloc_r+0xb0>
 80041b4:	605a      	str	r2, [r3, #4]
 80041b6:	e7f9      	b.n	80041ac <_malloc_r+0x9c>
 80041b8:	6862      	ldr	r2, [r4, #4]
 80041ba:	42a3      	cmp	r3, r4
 80041bc:	d10e      	bne.n	80041dc <_malloc_r+0xcc>
 80041be:	6032      	str	r2, [r6, #0]
 80041c0:	0028      	movs	r0, r5
 80041c2:	f000 f82d 	bl	8004220 <__malloc_unlock>
 80041c6:	0020      	movs	r0, r4
 80041c8:	2207      	movs	r2, #7
 80041ca:	300b      	adds	r0, #11
 80041cc:	1d23      	adds	r3, r4, #4
 80041ce:	4390      	bics	r0, r2
 80041d0:	1ac2      	subs	r2, r0, r3
 80041d2:	4298      	cmp	r0, r3
 80041d4:	d0df      	beq.n	8004196 <_malloc_r+0x86>
 80041d6:	1a1b      	subs	r3, r3, r0
 80041d8:	50a3      	str	r3, [r4, r2]
 80041da:	e7dc      	b.n	8004196 <_malloc_r+0x86>
 80041dc:	605a      	str	r2, [r3, #4]
 80041de:	e7ef      	b.n	80041c0 <_malloc_r+0xb0>
 80041e0:	0023      	movs	r3, r4
 80041e2:	6864      	ldr	r4, [r4, #4]
 80041e4:	e7a6      	b.n	8004134 <_malloc_r+0x24>
 80041e6:	9c00      	ldr	r4, [sp, #0]
 80041e8:	6863      	ldr	r3, [r4, #4]
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	e7ad      	b.n	800414a <_malloc_r+0x3a>
 80041ee:	001a      	movs	r2, r3
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	42a3      	cmp	r3, r4
 80041f4:	d1fb      	bne.n	80041ee <_malloc_r+0xde>
 80041f6:	2300      	movs	r3, #0
 80041f8:	e7da      	b.n	80041b0 <_malloc_r+0xa0>
 80041fa:	230c      	movs	r3, #12
 80041fc:	0028      	movs	r0, r5
 80041fe:	602b      	str	r3, [r5, #0]
 8004200:	f000 f80e 	bl	8004220 <__malloc_unlock>
 8004204:	e7c6      	b.n	8004194 <_malloc_r+0x84>
 8004206:	6007      	str	r7, [r0, #0]
 8004208:	e7da      	b.n	80041c0 <_malloc_r+0xb0>
 800420a:	46c0      	nop			@ (mov r8, r8)
 800420c:	200002bc 	.word	0x200002bc

08004210 <__malloc_lock>:
 8004210:	b510      	push	{r4, lr}
 8004212:	4802      	ldr	r0, [pc, #8]	@ (800421c <__malloc_lock+0xc>)
 8004214:	f7ff ff0e 	bl	8004034 <__retarget_lock_acquire_recursive>
 8004218:	bd10      	pop	{r4, pc}
 800421a:	46c0      	nop			@ (mov r8, r8)
 800421c:	200002b4 	.word	0x200002b4

08004220 <__malloc_unlock>:
 8004220:	b510      	push	{r4, lr}
 8004222:	4802      	ldr	r0, [pc, #8]	@ (800422c <__malloc_unlock+0xc>)
 8004224:	f7ff ff07 	bl	8004036 <__retarget_lock_release_recursive>
 8004228:	bd10      	pop	{r4, pc}
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	200002b4 	.word	0x200002b4

08004230 <__ssputs_r>:
 8004230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004232:	688e      	ldr	r6, [r1, #8]
 8004234:	b085      	sub	sp, #20
 8004236:	001f      	movs	r7, r3
 8004238:	000c      	movs	r4, r1
 800423a:	680b      	ldr	r3, [r1, #0]
 800423c:	9002      	str	r0, [sp, #8]
 800423e:	9203      	str	r2, [sp, #12]
 8004240:	42be      	cmp	r6, r7
 8004242:	d830      	bhi.n	80042a6 <__ssputs_r+0x76>
 8004244:	210c      	movs	r1, #12
 8004246:	5e62      	ldrsh	r2, [r4, r1]
 8004248:	2190      	movs	r1, #144	@ 0x90
 800424a:	00c9      	lsls	r1, r1, #3
 800424c:	420a      	tst	r2, r1
 800424e:	d028      	beq.n	80042a2 <__ssputs_r+0x72>
 8004250:	2003      	movs	r0, #3
 8004252:	6921      	ldr	r1, [r4, #16]
 8004254:	1a5b      	subs	r3, r3, r1
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	6963      	ldr	r3, [r4, #20]
 800425a:	4343      	muls	r3, r0
 800425c:	9801      	ldr	r0, [sp, #4]
 800425e:	0fdd      	lsrs	r5, r3, #31
 8004260:	18ed      	adds	r5, r5, r3
 8004262:	1c7b      	adds	r3, r7, #1
 8004264:	181b      	adds	r3, r3, r0
 8004266:	106d      	asrs	r5, r5, #1
 8004268:	42ab      	cmp	r3, r5
 800426a:	d900      	bls.n	800426e <__ssputs_r+0x3e>
 800426c:	001d      	movs	r5, r3
 800426e:	0552      	lsls	r2, r2, #21
 8004270:	d528      	bpl.n	80042c4 <__ssputs_r+0x94>
 8004272:	0029      	movs	r1, r5
 8004274:	9802      	ldr	r0, [sp, #8]
 8004276:	f7ff ff4b 	bl	8004110 <_malloc_r>
 800427a:	1e06      	subs	r6, r0, #0
 800427c:	d02c      	beq.n	80042d8 <__ssputs_r+0xa8>
 800427e:	9a01      	ldr	r2, [sp, #4]
 8004280:	6921      	ldr	r1, [r4, #16]
 8004282:	f000 fae2 	bl	800484a <memcpy>
 8004286:	89a2      	ldrh	r2, [r4, #12]
 8004288:	4b18      	ldr	r3, [pc, #96]	@ (80042ec <__ssputs_r+0xbc>)
 800428a:	401a      	ands	r2, r3
 800428c:	2380      	movs	r3, #128	@ 0x80
 800428e:	4313      	orrs	r3, r2
 8004290:	81a3      	strh	r3, [r4, #12]
 8004292:	9b01      	ldr	r3, [sp, #4]
 8004294:	6126      	str	r6, [r4, #16]
 8004296:	18f6      	adds	r6, r6, r3
 8004298:	6026      	str	r6, [r4, #0]
 800429a:	003e      	movs	r6, r7
 800429c:	6165      	str	r5, [r4, #20]
 800429e:	1aed      	subs	r5, r5, r3
 80042a0:	60a5      	str	r5, [r4, #8]
 80042a2:	42be      	cmp	r6, r7
 80042a4:	d900      	bls.n	80042a8 <__ssputs_r+0x78>
 80042a6:	003e      	movs	r6, r7
 80042a8:	0032      	movs	r2, r6
 80042aa:	9903      	ldr	r1, [sp, #12]
 80042ac:	6820      	ldr	r0, [r4, #0]
 80042ae:	f000 fa9b 	bl	80047e8 <memmove>
 80042b2:	2000      	movs	r0, #0
 80042b4:	68a3      	ldr	r3, [r4, #8]
 80042b6:	1b9b      	subs	r3, r3, r6
 80042b8:	60a3      	str	r3, [r4, #8]
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	199b      	adds	r3, r3, r6
 80042be:	6023      	str	r3, [r4, #0]
 80042c0:	b005      	add	sp, #20
 80042c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c4:	002a      	movs	r2, r5
 80042c6:	9802      	ldr	r0, [sp, #8]
 80042c8:	f000 fac8 	bl	800485c <_realloc_r>
 80042cc:	1e06      	subs	r6, r0, #0
 80042ce:	d1e0      	bne.n	8004292 <__ssputs_r+0x62>
 80042d0:	6921      	ldr	r1, [r4, #16]
 80042d2:	9802      	ldr	r0, [sp, #8]
 80042d4:	f7ff feb0 	bl	8004038 <_free_r>
 80042d8:	230c      	movs	r3, #12
 80042da:	2001      	movs	r0, #1
 80042dc:	9a02      	ldr	r2, [sp, #8]
 80042de:	4240      	negs	r0, r0
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	89a2      	ldrh	r2, [r4, #12]
 80042e4:	3334      	adds	r3, #52	@ 0x34
 80042e6:	4313      	orrs	r3, r2
 80042e8:	81a3      	strh	r3, [r4, #12]
 80042ea:	e7e9      	b.n	80042c0 <__ssputs_r+0x90>
 80042ec:	fffffb7f 	.word	0xfffffb7f

080042f0 <_svfiprintf_r>:
 80042f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042f2:	b0a1      	sub	sp, #132	@ 0x84
 80042f4:	9003      	str	r0, [sp, #12]
 80042f6:	001d      	movs	r5, r3
 80042f8:	898b      	ldrh	r3, [r1, #12]
 80042fa:	000f      	movs	r7, r1
 80042fc:	0016      	movs	r6, r2
 80042fe:	061b      	lsls	r3, r3, #24
 8004300:	d511      	bpl.n	8004326 <_svfiprintf_r+0x36>
 8004302:	690b      	ldr	r3, [r1, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10e      	bne.n	8004326 <_svfiprintf_r+0x36>
 8004308:	2140      	movs	r1, #64	@ 0x40
 800430a:	f7ff ff01 	bl	8004110 <_malloc_r>
 800430e:	6038      	str	r0, [r7, #0]
 8004310:	6138      	str	r0, [r7, #16]
 8004312:	2800      	cmp	r0, #0
 8004314:	d105      	bne.n	8004322 <_svfiprintf_r+0x32>
 8004316:	230c      	movs	r3, #12
 8004318:	9a03      	ldr	r2, [sp, #12]
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	2001      	movs	r0, #1
 800431e:	4240      	negs	r0, r0
 8004320:	e0cf      	b.n	80044c2 <_svfiprintf_r+0x1d2>
 8004322:	2340      	movs	r3, #64	@ 0x40
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	2300      	movs	r3, #0
 8004328:	ac08      	add	r4, sp, #32
 800432a:	6163      	str	r3, [r4, #20]
 800432c:	3320      	adds	r3, #32
 800432e:	7663      	strb	r3, [r4, #25]
 8004330:	3310      	adds	r3, #16
 8004332:	76a3      	strb	r3, [r4, #26]
 8004334:	9507      	str	r5, [sp, #28]
 8004336:	0035      	movs	r5, r6
 8004338:	782b      	ldrb	r3, [r5, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <_svfiprintf_r+0x52>
 800433e:	2b25      	cmp	r3, #37	@ 0x25
 8004340:	d148      	bne.n	80043d4 <_svfiprintf_r+0xe4>
 8004342:	1bab      	subs	r3, r5, r6
 8004344:	9305      	str	r3, [sp, #20]
 8004346:	42b5      	cmp	r5, r6
 8004348:	d00b      	beq.n	8004362 <_svfiprintf_r+0x72>
 800434a:	0032      	movs	r2, r6
 800434c:	0039      	movs	r1, r7
 800434e:	9803      	ldr	r0, [sp, #12]
 8004350:	f7ff ff6e 	bl	8004230 <__ssputs_r>
 8004354:	3001      	adds	r0, #1
 8004356:	d100      	bne.n	800435a <_svfiprintf_r+0x6a>
 8004358:	e0ae      	b.n	80044b8 <_svfiprintf_r+0x1c8>
 800435a:	6963      	ldr	r3, [r4, #20]
 800435c:	9a05      	ldr	r2, [sp, #20]
 800435e:	189b      	adds	r3, r3, r2
 8004360:	6163      	str	r3, [r4, #20]
 8004362:	782b      	ldrb	r3, [r5, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d100      	bne.n	800436a <_svfiprintf_r+0x7a>
 8004368:	e0a6      	b.n	80044b8 <_svfiprintf_r+0x1c8>
 800436a:	2201      	movs	r2, #1
 800436c:	2300      	movs	r3, #0
 800436e:	4252      	negs	r2, r2
 8004370:	6062      	str	r2, [r4, #4]
 8004372:	a904      	add	r1, sp, #16
 8004374:	3254      	adds	r2, #84	@ 0x54
 8004376:	1852      	adds	r2, r2, r1
 8004378:	1c6e      	adds	r6, r5, #1
 800437a:	6023      	str	r3, [r4, #0]
 800437c:	60e3      	str	r3, [r4, #12]
 800437e:	60a3      	str	r3, [r4, #8]
 8004380:	7013      	strb	r3, [r2, #0]
 8004382:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004384:	4b54      	ldr	r3, [pc, #336]	@ (80044d8 <_svfiprintf_r+0x1e8>)
 8004386:	2205      	movs	r2, #5
 8004388:	0018      	movs	r0, r3
 800438a:	7831      	ldrb	r1, [r6, #0]
 800438c:	9305      	str	r3, [sp, #20]
 800438e:	f000 fa51 	bl	8004834 <memchr>
 8004392:	1c75      	adds	r5, r6, #1
 8004394:	2800      	cmp	r0, #0
 8004396:	d11f      	bne.n	80043d8 <_svfiprintf_r+0xe8>
 8004398:	6822      	ldr	r2, [r4, #0]
 800439a:	06d3      	lsls	r3, r2, #27
 800439c:	d504      	bpl.n	80043a8 <_svfiprintf_r+0xb8>
 800439e:	2353      	movs	r3, #83	@ 0x53
 80043a0:	a904      	add	r1, sp, #16
 80043a2:	185b      	adds	r3, r3, r1
 80043a4:	2120      	movs	r1, #32
 80043a6:	7019      	strb	r1, [r3, #0]
 80043a8:	0713      	lsls	r3, r2, #28
 80043aa:	d504      	bpl.n	80043b6 <_svfiprintf_r+0xc6>
 80043ac:	2353      	movs	r3, #83	@ 0x53
 80043ae:	a904      	add	r1, sp, #16
 80043b0:	185b      	adds	r3, r3, r1
 80043b2:	212b      	movs	r1, #43	@ 0x2b
 80043b4:	7019      	strb	r1, [r3, #0]
 80043b6:	7833      	ldrb	r3, [r6, #0]
 80043b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80043ba:	d016      	beq.n	80043ea <_svfiprintf_r+0xfa>
 80043bc:	0035      	movs	r5, r6
 80043be:	2100      	movs	r1, #0
 80043c0:	200a      	movs	r0, #10
 80043c2:	68e3      	ldr	r3, [r4, #12]
 80043c4:	782a      	ldrb	r2, [r5, #0]
 80043c6:	1c6e      	adds	r6, r5, #1
 80043c8:	3a30      	subs	r2, #48	@ 0x30
 80043ca:	2a09      	cmp	r2, #9
 80043cc:	d950      	bls.n	8004470 <_svfiprintf_r+0x180>
 80043ce:	2900      	cmp	r1, #0
 80043d0:	d111      	bne.n	80043f6 <_svfiprintf_r+0x106>
 80043d2:	e017      	b.n	8004404 <_svfiprintf_r+0x114>
 80043d4:	3501      	adds	r5, #1
 80043d6:	e7af      	b.n	8004338 <_svfiprintf_r+0x48>
 80043d8:	9b05      	ldr	r3, [sp, #20]
 80043da:	6822      	ldr	r2, [r4, #0]
 80043dc:	1ac0      	subs	r0, r0, r3
 80043de:	2301      	movs	r3, #1
 80043e0:	4083      	lsls	r3, r0
 80043e2:	4313      	orrs	r3, r2
 80043e4:	002e      	movs	r6, r5
 80043e6:	6023      	str	r3, [r4, #0]
 80043e8:	e7cc      	b.n	8004384 <_svfiprintf_r+0x94>
 80043ea:	9b07      	ldr	r3, [sp, #28]
 80043ec:	1d19      	adds	r1, r3, #4
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	9107      	str	r1, [sp, #28]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	db01      	blt.n	80043fa <_svfiprintf_r+0x10a>
 80043f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043f8:	e004      	b.n	8004404 <_svfiprintf_r+0x114>
 80043fa:	425b      	negs	r3, r3
 80043fc:	60e3      	str	r3, [r4, #12]
 80043fe:	2302      	movs	r3, #2
 8004400:	4313      	orrs	r3, r2
 8004402:	6023      	str	r3, [r4, #0]
 8004404:	782b      	ldrb	r3, [r5, #0]
 8004406:	2b2e      	cmp	r3, #46	@ 0x2e
 8004408:	d10c      	bne.n	8004424 <_svfiprintf_r+0x134>
 800440a:	786b      	ldrb	r3, [r5, #1]
 800440c:	2b2a      	cmp	r3, #42	@ 0x2a
 800440e:	d134      	bne.n	800447a <_svfiprintf_r+0x18a>
 8004410:	9b07      	ldr	r3, [sp, #28]
 8004412:	3502      	adds	r5, #2
 8004414:	1d1a      	adds	r2, r3, #4
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	9207      	str	r2, [sp, #28]
 800441a:	2b00      	cmp	r3, #0
 800441c:	da01      	bge.n	8004422 <_svfiprintf_r+0x132>
 800441e:	2301      	movs	r3, #1
 8004420:	425b      	negs	r3, r3
 8004422:	9309      	str	r3, [sp, #36]	@ 0x24
 8004424:	4e2d      	ldr	r6, [pc, #180]	@ (80044dc <_svfiprintf_r+0x1ec>)
 8004426:	2203      	movs	r2, #3
 8004428:	0030      	movs	r0, r6
 800442a:	7829      	ldrb	r1, [r5, #0]
 800442c:	f000 fa02 	bl	8004834 <memchr>
 8004430:	2800      	cmp	r0, #0
 8004432:	d006      	beq.n	8004442 <_svfiprintf_r+0x152>
 8004434:	2340      	movs	r3, #64	@ 0x40
 8004436:	1b80      	subs	r0, r0, r6
 8004438:	4083      	lsls	r3, r0
 800443a:	6822      	ldr	r2, [r4, #0]
 800443c:	3501      	adds	r5, #1
 800443e:	4313      	orrs	r3, r2
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	7829      	ldrb	r1, [r5, #0]
 8004444:	2206      	movs	r2, #6
 8004446:	4826      	ldr	r0, [pc, #152]	@ (80044e0 <_svfiprintf_r+0x1f0>)
 8004448:	1c6e      	adds	r6, r5, #1
 800444a:	7621      	strb	r1, [r4, #24]
 800444c:	f000 f9f2 	bl	8004834 <memchr>
 8004450:	2800      	cmp	r0, #0
 8004452:	d038      	beq.n	80044c6 <_svfiprintf_r+0x1d6>
 8004454:	4b23      	ldr	r3, [pc, #140]	@ (80044e4 <_svfiprintf_r+0x1f4>)
 8004456:	2b00      	cmp	r3, #0
 8004458:	d122      	bne.n	80044a0 <_svfiprintf_r+0x1b0>
 800445a:	2207      	movs	r2, #7
 800445c:	9b07      	ldr	r3, [sp, #28]
 800445e:	3307      	adds	r3, #7
 8004460:	4393      	bics	r3, r2
 8004462:	3308      	adds	r3, #8
 8004464:	9307      	str	r3, [sp, #28]
 8004466:	6963      	ldr	r3, [r4, #20]
 8004468:	9a04      	ldr	r2, [sp, #16]
 800446a:	189b      	adds	r3, r3, r2
 800446c:	6163      	str	r3, [r4, #20]
 800446e:	e762      	b.n	8004336 <_svfiprintf_r+0x46>
 8004470:	4343      	muls	r3, r0
 8004472:	0035      	movs	r5, r6
 8004474:	2101      	movs	r1, #1
 8004476:	189b      	adds	r3, r3, r2
 8004478:	e7a4      	b.n	80043c4 <_svfiprintf_r+0xd4>
 800447a:	2300      	movs	r3, #0
 800447c:	200a      	movs	r0, #10
 800447e:	0019      	movs	r1, r3
 8004480:	3501      	adds	r5, #1
 8004482:	6063      	str	r3, [r4, #4]
 8004484:	782a      	ldrb	r2, [r5, #0]
 8004486:	1c6e      	adds	r6, r5, #1
 8004488:	3a30      	subs	r2, #48	@ 0x30
 800448a:	2a09      	cmp	r2, #9
 800448c:	d903      	bls.n	8004496 <_svfiprintf_r+0x1a6>
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0c8      	beq.n	8004424 <_svfiprintf_r+0x134>
 8004492:	9109      	str	r1, [sp, #36]	@ 0x24
 8004494:	e7c6      	b.n	8004424 <_svfiprintf_r+0x134>
 8004496:	4341      	muls	r1, r0
 8004498:	0035      	movs	r5, r6
 800449a:	2301      	movs	r3, #1
 800449c:	1889      	adds	r1, r1, r2
 800449e:	e7f1      	b.n	8004484 <_svfiprintf_r+0x194>
 80044a0:	aa07      	add	r2, sp, #28
 80044a2:	9200      	str	r2, [sp, #0]
 80044a4:	0021      	movs	r1, r4
 80044a6:	003a      	movs	r2, r7
 80044a8:	4b0f      	ldr	r3, [pc, #60]	@ (80044e8 <_svfiprintf_r+0x1f8>)
 80044aa:	9803      	ldr	r0, [sp, #12]
 80044ac:	e000      	b.n	80044b0 <_svfiprintf_r+0x1c0>
 80044ae:	bf00      	nop
 80044b0:	9004      	str	r0, [sp, #16]
 80044b2:	9b04      	ldr	r3, [sp, #16]
 80044b4:	3301      	adds	r3, #1
 80044b6:	d1d6      	bne.n	8004466 <_svfiprintf_r+0x176>
 80044b8:	89bb      	ldrh	r3, [r7, #12]
 80044ba:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80044bc:	065b      	lsls	r3, r3, #25
 80044be:	d500      	bpl.n	80044c2 <_svfiprintf_r+0x1d2>
 80044c0:	e72c      	b.n	800431c <_svfiprintf_r+0x2c>
 80044c2:	b021      	add	sp, #132	@ 0x84
 80044c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044c6:	aa07      	add	r2, sp, #28
 80044c8:	9200      	str	r2, [sp, #0]
 80044ca:	0021      	movs	r1, r4
 80044cc:	003a      	movs	r2, r7
 80044ce:	4b06      	ldr	r3, [pc, #24]	@ (80044e8 <_svfiprintf_r+0x1f8>)
 80044d0:	9803      	ldr	r0, [sp, #12]
 80044d2:	f000 f87b 	bl	80045cc <_printf_i>
 80044d6:	e7eb      	b.n	80044b0 <_svfiprintf_r+0x1c0>
 80044d8:	08004980 	.word	0x08004980
 80044dc:	08004986 	.word	0x08004986
 80044e0:	0800498a 	.word	0x0800498a
 80044e4:	00000000 	.word	0x00000000
 80044e8:	08004231 	.word	0x08004231

080044ec <_printf_common>:
 80044ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044ee:	0016      	movs	r6, r2
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	688a      	ldr	r2, [r1, #8]
 80044f4:	690b      	ldr	r3, [r1, #16]
 80044f6:	000c      	movs	r4, r1
 80044f8:	9000      	str	r0, [sp, #0]
 80044fa:	4293      	cmp	r3, r2
 80044fc:	da00      	bge.n	8004500 <_printf_common+0x14>
 80044fe:	0013      	movs	r3, r2
 8004500:	0022      	movs	r2, r4
 8004502:	6033      	str	r3, [r6, #0]
 8004504:	3243      	adds	r2, #67	@ 0x43
 8004506:	7812      	ldrb	r2, [r2, #0]
 8004508:	2a00      	cmp	r2, #0
 800450a:	d001      	beq.n	8004510 <_printf_common+0x24>
 800450c:	3301      	adds	r3, #1
 800450e:	6033      	str	r3, [r6, #0]
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	069b      	lsls	r3, r3, #26
 8004514:	d502      	bpl.n	800451c <_printf_common+0x30>
 8004516:	6833      	ldr	r3, [r6, #0]
 8004518:	3302      	adds	r3, #2
 800451a:	6033      	str	r3, [r6, #0]
 800451c:	6822      	ldr	r2, [r4, #0]
 800451e:	2306      	movs	r3, #6
 8004520:	0015      	movs	r5, r2
 8004522:	401d      	ands	r5, r3
 8004524:	421a      	tst	r2, r3
 8004526:	d027      	beq.n	8004578 <_printf_common+0x8c>
 8004528:	0023      	movs	r3, r4
 800452a:	3343      	adds	r3, #67	@ 0x43
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	1e5a      	subs	r2, r3, #1
 8004530:	4193      	sbcs	r3, r2
 8004532:	6822      	ldr	r2, [r4, #0]
 8004534:	0692      	lsls	r2, r2, #26
 8004536:	d430      	bmi.n	800459a <_printf_common+0xae>
 8004538:	0022      	movs	r2, r4
 800453a:	9901      	ldr	r1, [sp, #4]
 800453c:	9800      	ldr	r0, [sp, #0]
 800453e:	9d08      	ldr	r5, [sp, #32]
 8004540:	3243      	adds	r2, #67	@ 0x43
 8004542:	47a8      	blx	r5
 8004544:	3001      	adds	r0, #1
 8004546:	d025      	beq.n	8004594 <_printf_common+0xa8>
 8004548:	2206      	movs	r2, #6
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	2500      	movs	r5, #0
 800454e:	4013      	ands	r3, r2
 8004550:	2b04      	cmp	r3, #4
 8004552:	d105      	bne.n	8004560 <_printf_common+0x74>
 8004554:	6833      	ldr	r3, [r6, #0]
 8004556:	68e5      	ldr	r5, [r4, #12]
 8004558:	1aed      	subs	r5, r5, r3
 800455a:	43eb      	mvns	r3, r5
 800455c:	17db      	asrs	r3, r3, #31
 800455e:	401d      	ands	r5, r3
 8004560:	68a3      	ldr	r3, [r4, #8]
 8004562:	6922      	ldr	r2, [r4, #16]
 8004564:	4293      	cmp	r3, r2
 8004566:	dd01      	ble.n	800456c <_printf_common+0x80>
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	18ed      	adds	r5, r5, r3
 800456c:	2600      	movs	r6, #0
 800456e:	42b5      	cmp	r5, r6
 8004570:	d120      	bne.n	80045b4 <_printf_common+0xc8>
 8004572:	2000      	movs	r0, #0
 8004574:	e010      	b.n	8004598 <_printf_common+0xac>
 8004576:	3501      	adds	r5, #1
 8004578:	68e3      	ldr	r3, [r4, #12]
 800457a:	6832      	ldr	r2, [r6, #0]
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	42ab      	cmp	r3, r5
 8004580:	ddd2      	ble.n	8004528 <_printf_common+0x3c>
 8004582:	0022      	movs	r2, r4
 8004584:	2301      	movs	r3, #1
 8004586:	9901      	ldr	r1, [sp, #4]
 8004588:	9800      	ldr	r0, [sp, #0]
 800458a:	9f08      	ldr	r7, [sp, #32]
 800458c:	3219      	adds	r2, #25
 800458e:	47b8      	blx	r7
 8004590:	3001      	adds	r0, #1
 8004592:	d1f0      	bne.n	8004576 <_printf_common+0x8a>
 8004594:	2001      	movs	r0, #1
 8004596:	4240      	negs	r0, r0
 8004598:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800459a:	2030      	movs	r0, #48	@ 0x30
 800459c:	18e1      	adds	r1, r4, r3
 800459e:	3143      	adds	r1, #67	@ 0x43
 80045a0:	7008      	strb	r0, [r1, #0]
 80045a2:	0021      	movs	r1, r4
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	3145      	adds	r1, #69	@ 0x45
 80045a8:	7809      	ldrb	r1, [r1, #0]
 80045aa:	18a2      	adds	r2, r4, r2
 80045ac:	3243      	adds	r2, #67	@ 0x43
 80045ae:	3302      	adds	r3, #2
 80045b0:	7011      	strb	r1, [r2, #0]
 80045b2:	e7c1      	b.n	8004538 <_printf_common+0x4c>
 80045b4:	0022      	movs	r2, r4
 80045b6:	2301      	movs	r3, #1
 80045b8:	9901      	ldr	r1, [sp, #4]
 80045ba:	9800      	ldr	r0, [sp, #0]
 80045bc:	9f08      	ldr	r7, [sp, #32]
 80045be:	321a      	adds	r2, #26
 80045c0:	47b8      	blx	r7
 80045c2:	3001      	adds	r0, #1
 80045c4:	d0e6      	beq.n	8004594 <_printf_common+0xa8>
 80045c6:	3601      	adds	r6, #1
 80045c8:	e7d1      	b.n	800456e <_printf_common+0x82>
	...

080045cc <_printf_i>:
 80045cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ce:	b08b      	sub	sp, #44	@ 0x2c
 80045d0:	9206      	str	r2, [sp, #24]
 80045d2:	000a      	movs	r2, r1
 80045d4:	3243      	adds	r2, #67	@ 0x43
 80045d6:	9307      	str	r3, [sp, #28]
 80045d8:	9005      	str	r0, [sp, #20]
 80045da:	9203      	str	r2, [sp, #12]
 80045dc:	7e0a      	ldrb	r2, [r1, #24]
 80045de:	000c      	movs	r4, r1
 80045e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80045e2:	2a78      	cmp	r2, #120	@ 0x78
 80045e4:	d809      	bhi.n	80045fa <_printf_i+0x2e>
 80045e6:	2a62      	cmp	r2, #98	@ 0x62
 80045e8:	d80b      	bhi.n	8004602 <_printf_i+0x36>
 80045ea:	2a00      	cmp	r2, #0
 80045ec:	d100      	bne.n	80045f0 <_printf_i+0x24>
 80045ee:	e0bc      	b.n	800476a <_printf_i+0x19e>
 80045f0:	497b      	ldr	r1, [pc, #492]	@ (80047e0 <_printf_i+0x214>)
 80045f2:	9104      	str	r1, [sp, #16]
 80045f4:	2a58      	cmp	r2, #88	@ 0x58
 80045f6:	d100      	bne.n	80045fa <_printf_i+0x2e>
 80045f8:	e090      	b.n	800471c <_printf_i+0x150>
 80045fa:	0025      	movs	r5, r4
 80045fc:	3542      	adds	r5, #66	@ 0x42
 80045fe:	702a      	strb	r2, [r5, #0]
 8004600:	e022      	b.n	8004648 <_printf_i+0x7c>
 8004602:	0010      	movs	r0, r2
 8004604:	3863      	subs	r0, #99	@ 0x63
 8004606:	2815      	cmp	r0, #21
 8004608:	d8f7      	bhi.n	80045fa <_printf_i+0x2e>
 800460a:	f7fb fd7b 	bl	8000104 <__gnu_thumb1_case_shi>
 800460e:	0016      	.short	0x0016
 8004610:	fff6001f 	.word	0xfff6001f
 8004614:	fff6fff6 	.word	0xfff6fff6
 8004618:	001ffff6 	.word	0x001ffff6
 800461c:	fff6fff6 	.word	0xfff6fff6
 8004620:	fff6fff6 	.word	0xfff6fff6
 8004624:	003600a1 	.word	0x003600a1
 8004628:	fff60080 	.word	0xfff60080
 800462c:	00b2fff6 	.word	0x00b2fff6
 8004630:	0036fff6 	.word	0x0036fff6
 8004634:	fff6fff6 	.word	0xfff6fff6
 8004638:	0084      	.short	0x0084
 800463a:	0025      	movs	r5, r4
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	3542      	adds	r5, #66	@ 0x42
 8004640:	1d11      	adds	r1, r2, #4
 8004642:	6019      	str	r1, [r3, #0]
 8004644:	6813      	ldr	r3, [r2, #0]
 8004646:	702b      	strb	r3, [r5, #0]
 8004648:	2301      	movs	r3, #1
 800464a:	e0a0      	b.n	800478e <_printf_i+0x1c2>
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	6809      	ldr	r1, [r1, #0]
 8004650:	1d02      	adds	r2, r0, #4
 8004652:	060d      	lsls	r5, r1, #24
 8004654:	d50b      	bpl.n	800466e <_printf_i+0xa2>
 8004656:	6806      	ldr	r6, [r0, #0]
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	2e00      	cmp	r6, #0
 800465c:	da03      	bge.n	8004666 <_printf_i+0x9a>
 800465e:	232d      	movs	r3, #45	@ 0x2d
 8004660:	9a03      	ldr	r2, [sp, #12]
 8004662:	4276      	negs	r6, r6
 8004664:	7013      	strb	r3, [r2, #0]
 8004666:	4b5e      	ldr	r3, [pc, #376]	@ (80047e0 <_printf_i+0x214>)
 8004668:	270a      	movs	r7, #10
 800466a:	9304      	str	r3, [sp, #16]
 800466c:	e018      	b.n	80046a0 <_printf_i+0xd4>
 800466e:	6806      	ldr	r6, [r0, #0]
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	0649      	lsls	r1, r1, #25
 8004674:	d5f1      	bpl.n	800465a <_printf_i+0x8e>
 8004676:	b236      	sxth	r6, r6
 8004678:	e7ef      	b.n	800465a <_printf_i+0x8e>
 800467a:	6808      	ldr	r0, [r1, #0]
 800467c:	6819      	ldr	r1, [r3, #0]
 800467e:	c940      	ldmia	r1!, {r6}
 8004680:	0605      	lsls	r5, r0, #24
 8004682:	d402      	bmi.n	800468a <_printf_i+0xbe>
 8004684:	0640      	lsls	r0, r0, #25
 8004686:	d500      	bpl.n	800468a <_printf_i+0xbe>
 8004688:	b2b6      	uxth	r6, r6
 800468a:	6019      	str	r1, [r3, #0]
 800468c:	4b54      	ldr	r3, [pc, #336]	@ (80047e0 <_printf_i+0x214>)
 800468e:	270a      	movs	r7, #10
 8004690:	9304      	str	r3, [sp, #16]
 8004692:	2a6f      	cmp	r2, #111	@ 0x6f
 8004694:	d100      	bne.n	8004698 <_printf_i+0xcc>
 8004696:	3f02      	subs	r7, #2
 8004698:	0023      	movs	r3, r4
 800469a:	2200      	movs	r2, #0
 800469c:	3343      	adds	r3, #67	@ 0x43
 800469e:	701a      	strb	r2, [r3, #0]
 80046a0:	6863      	ldr	r3, [r4, #4]
 80046a2:	60a3      	str	r3, [r4, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	db03      	blt.n	80046b0 <_printf_i+0xe4>
 80046a8:	2104      	movs	r1, #4
 80046aa:	6822      	ldr	r2, [r4, #0]
 80046ac:	438a      	bics	r2, r1
 80046ae:	6022      	str	r2, [r4, #0]
 80046b0:	2e00      	cmp	r6, #0
 80046b2:	d102      	bne.n	80046ba <_printf_i+0xee>
 80046b4:	9d03      	ldr	r5, [sp, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00c      	beq.n	80046d4 <_printf_i+0x108>
 80046ba:	9d03      	ldr	r5, [sp, #12]
 80046bc:	0030      	movs	r0, r6
 80046be:	0039      	movs	r1, r7
 80046c0:	f7fb fdb0 	bl	8000224 <__aeabi_uidivmod>
 80046c4:	9b04      	ldr	r3, [sp, #16]
 80046c6:	3d01      	subs	r5, #1
 80046c8:	5c5b      	ldrb	r3, [r3, r1]
 80046ca:	702b      	strb	r3, [r5, #0]
 80046cc:	0033      	movs	r3, r6
 80046ce:	0006      	movs	r6, r0
 80046d0:	429f      	cmp	r7, r3
 80046d2:	d9f3      	bls.n	80046bc <_printf_i+0xf0>
 80046d4:	2f08      	cmp	r7, #8
 80046d6:	d109      	bne.n	80046ec <_printf_i+0x120>
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	07db      	lsls	r3, r3, #31
 80046dc:	d506      	bpl.n	80046ec <_printf_i+0x120>
 80046de:	6862      	ldr	r2, [r4, #4]
 80046e0:	6923      	ldr	r3, [r4, #16]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	dc02      	bgt.n	80046ec <_printf_i+0x120>
 80046e6:	2330      	movs	r3, #48	@ 0x30
 80046e8:	3d01      	subs	r5, #1
 80046ea:	702b      	strb	r3, [r5, #0]
 80046ec:	9b03      	ldr	r3, [sp, #12]
 80046ee:	1b5b      	subs	r3, r3, r5
 80046f0:	6123      	str	r3, [r4, #16]
 80046f2:	9b07      	ldr	r3, [sp, #28]
 80046f4:	0021      	movs	r1, r4
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	9805      	ldr	r0, [sp, #20]
 80046fa:	9b06      	ldr	r3, [sp, #24]
 80046fc:	aa09      	add	r2, sp, #36	@ 0x24
 80046fe:	f7ff fef5 	bl	80044ec <_printf_common>
 8004702:	3001      	adds	r0, #1
 8004704:	d148      	bne.n	8004798 <_printf_i+0x1cc>
 8004706:	2001      	movs	r0, #1
 8004708:	4240      	negs	r0, r0
 800470a:	b00b      	add	sp, #44	@ 0x2c
 800470c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800470e:	2220      	movs	r2, #32
 8004710:	6809      	ldr	r1, [r1, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	6022      	str	r2, [r4, #0]
 8004716:	2278      	movs	r2, #120	@ 0x78
 8004718:	4932      	ldr	r1, [pc, #200]	@ (80047e4 <_printf_i+0x218>)
 800471a:	9104      	str	r1, [sp, #16]
 800471c:	0021      	movs	r1, r4
 800471e:	3145      	adds	r1, #69	@ 0x45
 8004720:	700a      	strb	r2, [r1, #0]
 8004722:	6819      	ldr	r1, [r3, #0]
 8004724:	6822      	ldr	r2, [r4, #0]
 8004726:	c940      	ldmia	r1!, {r6}
 8004728:	0610      	lsls	r0, r2, #24
 800472a:	d402      	bmi.n	8004732 <_printf_i+0x166>
 800472c:	0650      	lsls	r0, r2, #25
 800472e:	d500      	bpl.n	8004732 <_printf_i+0x166>
 8004730:	b2b6      	uxth	r6, r6
 8004732:	6019      	str	r1, [r3, #0]
 8004734:	07d3      	lsls	r3, r2, #31
 8004736:	d502      	bpl.n	800473e <_printf_i+0x172>
 8004738:	2320      	movs	r3, #32
 800473a:	4313      	orrs	r3, r2
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	2e00      	cmp	r6, #0
 8004740:	d001      	beq.n	8004746 <_printf_i+0x17a>
 8004742:	2710      	movs	r7, #16
 8004744:	e7a8      	b.n	8004698 <_printf_i+0xcc>
 8004746:	2220      	movs	r2, #32
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	4393      	bics	r3, r2
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	e7f8      	b.n	8004742 <_printf_i+0x176>
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	680d      	ldr	r5, [r1, #0]
 8004754:	1d10      	adds	r0, r2, #4
 8004756:	6949      	ldr	r1, [r1, #20]
 8004758:	6018      	str	r0, [r3, #0]
 800475a:	6813      	ldr	r3, [r2, #0]
 800475c:	062e      	lsls	r6, r5, #24
 800475e:	d501      	bpl.n	8004764 <_printf_i+0x198>
 8004760:	6019      	str	r1, [r3, #0]
 8004762:	e002      	b.n	800476a <_printf_i+0x19e>
 8004764:	066d      	lsls	r5, r5, #25
 8004766:	d5fb      	bpl.n	8004760 <_printf_i+0x194>
 8004768:	8019      	strh	r1, [r3, #0]
 800476a:	2300      	movs	r3, #0
 800476c:	9d03      	ldr	r5, [sp, #12]
 800476e:	6123      	str	r3, [r4, #16]
 8004770:	e7bf      	b.n	80046f2 <_printf_i+0x126>
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	1d11      	adds	r1, r2, #4
 8004776:	6019      	str	r1, [r3, #0]
 8004778:	6815      	ldr	r5, [r2, #0]
 800477a:	2100      	movs	r1, #0
 800477c:	0028      	movs	r0, r5
 800477e:	6862      	ldr	r2, [r4, #4]
 8004780:	f000 f858 	bl	8004834 <memchr>
 8004784:	2800      	cmp	r0, #0
 8004786:	d001      	beq.n	800478c <_printf_i+0x1c0>
 8004788:	1b40      	subs	r0, r0, r5
 800478a:	6060      	str	r0, [r4, #4]
 800478c:	6863      	ldr	r3, [r4, #4]
 800478e:	6123      	str	r3, [r4, #16]
 8004790:	2300      	movs	r3, #0
 8004792:	9a03      	ldr	r2, [sp, #12]
 8004794:	7013      	strb	r3, [r2, #0]
 8004796:	e7ac      	b.n	80046f2 <_printf_i+0x126>
 8004798:	002a      	movs	r2, r5
 800479a:	6923      	ldr	r3, [r4, #16]
 800479c:	9906      	ldr	r1, [sp, #24]
 800479e:	9805      	ldr	r0, [sp, #20]
 80047a0:	9d07      	ldr	r5, [sp, #28]
 80047a2:	47a8      	blx	r5
 80047a4:	3001      	adds	r0, #1
 80047a6:	d0ae      	beq.n	8004706 <_printf_i+0x13a>
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	079b      	lsls	r3, r3, #30
 80047ac:	d415      	bmi.n	80047da <_printf_i+0x20e>
 80047ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047b0:	68e0      	ldr	r0, [r4, #12]
 80047b2:	4298      	cmp	r0, r3
 80047b4:	daa9      	bge.n	800470a <_printf_i+0x13e>
 80047b6:	0018      	movs	r0, r3
 80047b8:	e7a7      	b.n	800470a <_printf_i+0x13e>
 80047ba:	0022      	movs	r2, r4
 80047bc:	2301      	movs	r3, #1
 80047be:	9906      	ldr	r1, [sp, #24]
 80047c0:	9805      	ldr	r0, [sp, #20]
 80047c2:	9e07      	ldr	r6, [sp, #28]
 80047c4:	3219      	adds	r2, #25
 80047c6:	47b0      	blx	r6
 80047c8:	3001      	adds	r0, #1
 80047ca:	d09c      	beq.n	8004706 <_printf_i+0x13a>
 80047cc:	3501      	adds	r5, #1
 80047ce:	68e3      	ldr	r3, [r4, #12]
 80047d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	42ab      	cmp	r3, r5
 80047d6:	dcf0      	bgt.n	80047ba <_printf_i+0x1ee>
 80047d8:	e7e9      	b.n	80047ae <_printf_i+0x1e2>
 80047da:	2500      	movs	r5, #0
 80047dc:	e7f7      	b.n	80047ce <_printf_i+0x202>
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	08004991 	.word	0x08004991
 80047e4:	080049a2 	.word	0x080049a2

080047e8 <memmove>:
 80047e8:	b510      	push	{r4, lr}
 80047ea:	4288      	cmp	r0, r1
 80047ec:	d806      	bhi.n	80047fc <memmove+0x14>
 80047ee:	2300      	movs	r3, #0
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d008      	beq.n	8004806 <memmove+0x1e>
 80047f4:	5ccc      	ldrb	r4, [r1, r3]
 80047f6:	54c4      	strb	r4, [r0, r3]
 80047f8:	3301      	adds	r3, #1
 80047fa:	e7f9      	b.n	80047f0 <memmove+0x8>
 80047fc:	188b      	adds	r3, r1, r2
 80047fe:	4298      	cmp	r0, r3
 8004800:	d2f5      	bcs.n	80047ee <memmove+0x6>
 8004802:	3a01      	subs	r2, #1
 8004804:	d200      	bcs.n	8004808 <memmove+0x20>
 8004806:	bd10      	pop	{r4, pc}
 8004808:	5c8b      	ldrb	r3, [r1, r2]
 800480a:	5483      	strb	r3, [r0, r2]
 800480c:	e7f9      	b.n	8004802 <memmove+0x1a>
	...

08004810 <_sbrk_r>:
 8004810:	2300      	movs	r3, #0
 8004812:	b570      	push	{r4, r5, r6, lr}
 8004814:	4d06      	ldr	r5, [pc, #24]	@ (8004830 <_sbrk_r+0x20>)
 8004816:	0004      	movs	r4, r0
 8004818:	0008      	movs	r0, r1
 800481a:	602b      	str	r3, [r5, #0]
 800481c:	f7fc f9c0 	bl	8000ba0 <_sbrk>
 8004820:	1c43      	adds	r3, r0, #1
 8004822:	d103      	bne.n	800482c <_sbrk_r+0x1c>
 8004824:	682b      	ldr	r3, [r5, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d000      	beq.n	800482c <_sbrk_r+0x1c>
 800482a:	6023      	str	r3, [r4, #0]
 800482c:	bd70      	pop	{r4, r5, r6, pc}
 800482e:	46c0      	nop			@ (mov r8, r8)
 8004830:	200002b0 	.word	0x200002b0

08004834 <memchr>:
 8004834:	b2c9      	uxtb	r1, r1
 8004836:	1882      	adds	r2, r0, r2
 8004838:	4290      	cmp	r0, r2
 800483a:	d101      	bne.n	8004840 <memchr+0xc>
 800483c:	2000      	movs	r0, #0
 800483e:	4770      	bx	lr
 8004840:	7803      	ldrb	r3, [r0, #0]
 8004842:	428b      	cmp	r3, r1
 8004844:	d0fb      	beq.n	800483e <memchr+0xa>
 8004846:	3001      	adds	r0, #1
 8004848:	e7f6      	b.n	8004838 <memchr+0x4>

0800484a <memcpy>:
 800484a:	2300      	movs	r3, #0
 800484c:	b510      	push	{r4, lr}
 800484e:	429a      	cmp	r2, r3
 8004850:	d100      	bne.n	8004854 <memcpy+0xa>
 8004852:	bd10      	pop	{r4, pc}
 8004854:	5ccc      	ldrb	r4, [r1, r3]
 8004856:	54c4      	strb	r4, [r0, r3]
 8004858:	3301      	adds	r3, #1
 800485a:	e7f8      	b.n	800484e <memcpy+0x4>

0800485c <_realloc_r>:
 800485c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800485e:	0006      	movs	r6, r0
 8004860:	000c      	movs	r4, r1
 8004862:	0015      	movs	r5, r2
 8004864:	2900      	cmp	r1, #0
 8004866:	d105      	bne.n	8004874 <_realloc_r+0x18>
 8004868:	0011      	movs	r1, r2
 800486a:	f7ff fc51 	bl	8004110 <_malloc_r>
 800486e:	0004      	movs	r4, r0
 8004870:	0020      	movs	r0, r4
 8004872:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004874:	2a00      	cmp	r2, #0
 8004876:	d103      	bne.n	8004880 <_realloc_r+0x24>
 8004878:	f7ff fbde 	bl	8004038 <_free_r>
 800487c:	2400      	movs	r4, #0
 800487e:	e7f7      	b.n	8004870 <_realloc_r+0x14>
 8004880:	f000 f81b 	bl	80048ba <_malloc_usable_size_r>
 8004884:	0007      	movs	r7, r0
 8004886:	4285      	cmp	r5, r0
 8004888:	d802      	bhi.n	8004890 <_realloc_r+0x34>
 800488a:	0843      	lsrs	r3, r0, #1
 800488c:	42ab      	cmp	r3, r5
 800488e:	d3ef      	bcc.n	8004870 <_realloc_r+0x14>
 8004890:	0029      	movs	r1, r5
 8004892:	0030      	movs	r0, r6
 8004894:	f7ff fc3c 	bl	8004110 <_malloc_r>
 8004898:	9001      	str	r0, [sp, #4]
 800489a:	2800      	cmp	r0, #0
 800489c:	d0ee      	beq.n	800487c <_realloc_r+0x20>
 800489e:	002a      	movs	r2, r5
 80048a0:	42bd      	cmp	r5, r7
 80048a2:	d900      	bls.n	80048a6 <_realloc_r+0x4a>
 80048a4:	003a      	movs	r2, r7
 80048a6:	0021      	movs	r1, r4
 80048a8:	9801      	ldr	r0, [sp, #4]
 80048aa:	f7ff ffce 	bl	800484a <memcpy>
 80048ae:	0021      	movs	r1, r4
 80048b0:	0030      	movs	r0, r6
 80048b2:	f7ff fbc1 	bl	8004038 <_free_r>
 80048b6:	9c01      	ldr	r4, [sp, #4]
 80048b8:	e7da      	b.n	8004870 <_realloc_r+0x14>

080048ba <_malloc_usable_size_r>:
 80048ba:	1f0b      	subs	r3, r1, #4
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	1f18      	subs	r0, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	da01      	bge.n	80048c8 <_malloc_usable_size_r+0xe>
 80048c4:	580b      	ldr	r3, [r1, r0]
 80048c6:	18c0      	adds	r0, r0, r3
 80048c8:	4770      	bx	lr
	...

080048cc <_init>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	46c0      	nop			@ (mov r8, r8)
 80048d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d2:	bc08      	pop	{r3}
 80048d4:	469e      	mov	lr, r3
 80048d6:	4770      	bx	lr

080048d8 <_fini>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	46c0      	nop			@ (mov r8, r8)
 80048dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	469e      	mov	lr, r3
 80048e2:	4770      	bx	lr
