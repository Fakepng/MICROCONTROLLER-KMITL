
STM32_COURSE_SOMSIN_3_4_DAC_sinewave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006520  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  080065e0  080065e0  000075e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068c0  080068c0  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  080068c0  080068c0  000078c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068c8  080068c8  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068c8  080068c8  000078c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068cc  080068cc  000078cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080068d0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  080068dc  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  080068dc  000080d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000baba  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ccb  00000000  00000000  00013aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  000157c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ec  00000000  00000000  000160c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172bb  00000000  00000000  000167ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd68  00000000  00000000  0002da67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094877  00000000  00000000  000397cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce046  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024a4  00000000  00000000  000ce08c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000d0530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080065c4 	.word	0x080065c4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080065c4 	.word	0x080065c4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f001 fb41 	bl	8001a88 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f001 fa81 	bl	8001918 <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f001 fb33 	bl	8001a88 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fb29 	bl	8001a88 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 faab 	bl	80019a0 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 faa1 	bl	80019a0 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_uldivmod>:
 800046c:	2b00      	cmp	r3, #0
 800046e:	d111      	bne.n	8000494 <__aeabi_uldivmod+0x28>
 8000470:	2a00      	cmp	r2, #0
 8000472:	d10f      	bne.n	8000494 <__aeabi_uldivmod+0x28>
 8000474:	2900      	cmp	r1, #0
 8000476:	d100      	bne.n	800047a <__aeabi_uldivmod+0xe>
 8000478:	2800      	cmp	r0, #0
 800047a:	d002      	beq.n	8000482 <__aeabi_uldivmod+0x16>
 800047c:	2100      	movs	r1, #0
 800047e:	43c9      	mvns	r1, r1
 8000480:	0008      	movs	r0, r1
 8000482:	b407      	push	{r0, r1, r2}
 8000484:	4802      	ldr	r0, [pc, #8]	@ (8000490 <__aeabi_uldivmod+0x24>)
 8000486:	a102      	add	r1, pc, #8	@ (adr r1, 8000490 <__aeabi_uldivmod+0x24>)
 8000488:	1840      	adds	r0, r0, r1
 800048a:	9002      	str	r0, [sp, #8]
 800048c:	bd03      	pop	{r0, r1, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	ffffff5d 	.word	0xffffff5d
 8000494:	b403      	push	{r0, r1}
 8000496:	4668      	mov	r0, sp
 8000498:	b501      	push	{r0, lr}
 800049a:	9802      	ldr	r0, [sp, #8]
 800049c:	f000 f81e 	bl	80004dc <__udivmoddi4>
 80004a0:	9b01      	ldr	r3, [sp, #4]
 80004a2:	469e      	mov	lr, r3
 80004a4:	b002      	add	sp, #8
 80004a6:	bc0c      	pop	{r2, r3}
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)

080004ac <__aeabi_f2uiz>:
 80004ac:	219e      	movs	r1, #158	@ 0x9e
 80004ae:	b510      	push	{r4, lr}
 80004b0:	05c9      	lsls	r1, r1, #23
 80004b2:	1c04      	adds	r4, r0, #0
 80004b4:	f002 fb24 	bl	8002b00 <__aeabi_fcmpge>
 80004b8:	2800      	cmp	r0, #0
 80004ba:	d103      	bne.n	80004c4 <__aeabi_f2uiz+0x18>
 80004bc:	1c20      	adds	r0, r4, #0
 80004be:	f000 fe65 	bl	800118c <__aeabi_f2iz>
 80004c2:	bd10      	pop	{r4, pc}
 80004c4:	219e      	movs	r1, #158	@ 0x9e
 80004c6:	1c20      	adds	r0, r4, #0
 80004c8:	05c9      	lsls	r1, r1, #23
 80004ca:	f000 fcbb 	bl	8000e44 <__aeabi_fsub>
 80004ce:	f000 fe5d 	bl	800118c <__aeabi_f2iz>
 80004d2:	2380      	movs	r3, #128	@ 0x80
 80004d4:	061b      	lsls	r3, r3, #24
 80004d6:	469c      	mov	ip, r3
 80004d8:	4460      	add	r0, ip
 80004da:	e7f2      	b.n	80004c2 <__aeabi_f2uiz+0x16>

080004dc <__udivmoddi4>:
 80004dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004de:	4657      	mov	r7, sl
 80004e0:	464e      	mov	r6, r9
 80004e2:	4645      	mov	r5, r8
 80004e4:	46de      	mov	lr, fp
 80004e6:	b5e0      	push	{r5, r6, r7, lr}
 80004e8:	0004      	movs	r4, r0
 80004ea:	000d      	movs	r5, r1
 80004ec:	4692      	mov	sl, r2
 80004ee:	4699      	mov	r9, r3
 80004f0:	b083      	sub	sp, #12
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d830      	bhi.n	8000558 <__udivmoddi4+0x7c>
 80004f6:	d02d      	beq.n	8000554 <__udivmoddi4+0x78>
 80004f8:	4649      	mov	r1, r9
 80004fa:	4650      	mov	r0, sl
 80004fc:	f002 fb28 	bl	8002b50 <__clzdi2>
 8000500:	0029      	movs	r1, r5
 8000502:	0006      	movs	r6, r0
 8000504:	0020      	movs	r0, r4
 8000506:	f002 fb23 	bl	8002b50 <__clzdi2>
 800050a:	1a33      	subs	r3, r6, r0
 800050c:	4698      	mov	r8, r3
 800050e:	3b20      	subs	r3, #32
 8000510:	d434      	bmi.n	800057c <__udivmoddi4+0xa0>
 8000512:	469b      	mov	fp, r3
 8000514:	4653      	mov	r3, sl
 8000516:	465a      	mov	r2, fp
 8000518:	4093      	lsls	r3, r2
 800051a:	4642      	mov	r2, r8
 800051c:	001f      	movs	r7, r3
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	001e      	movs	r6, r3
 8000524:	42af      	cmp	r7, r5
 8000526:	d83b      	bhi.n	80005a0 <__udivmoddi4+0xc4>
 8000528:	42af      	cmp	r7, r5
 800052a:	d100      	bne.n	800052e <__udivmoddi4+0x52>
 800052c:	e079      	b.n	8000622 <__udivmoddi4+0x146>
 800052e:	465b      	mov	r3, fp
 8000530:	1ba4      	subs	r4, r4, r6
 8000532:	41bd      	sbcs	r5, r7
 8000534:	2b00      	cmp	r3, #0
 8000536:	da00      	bge.n	800053a <__udivmoddi4+0x5e>
 8000538:	e076      	b.n	8000628 <__udivmoddi4+0x14c>
 800053a:	2200      	movs	r2, #0
 800053c:	2300      	movs	r3, #0
 800053e:	9200      	str	r2, [sp, #0]
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2301      	movs	r3, #1
 8000544:	465a      	mov	r2, fp
 8000546:	4093      	lsls	r3, r2
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	4642      	mov	r2, r8
 800054e:	4093      	lsls	r3, r2
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	e029      	b.n	80005a8 <__udivmoddi4+0xcc>
 8000554:	4282      	cmp	r2, r0
 8000556:	d9cf      	bls.n	80004f8 <__udivmoddi4+0x1c>
 8000558:	2200      	movs	r2, #0
 800055a:	2300      	movs	r3, #0
 800055c:	9200      	str	r2, [sp, #0]
 800055e:	9301      	str	r3, [sp, #4]
 8000560:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <__udivmoddi4+0x8e>
 8000566:	601c      	str	r4, [r3, #0]
 8000568:	605d      	str	r5, [r3, #4]
 800056a:	9800      	ldr	r0, [sp, #0]
 800056c:	9901      	ldr	r1, [sp, #4]
 800056e:	b003      	add	sp, #12
 8000570:	bcf0      	pop	{r4, r5, r6, r7}
 8000572:	46bb      	mov	fp, r7
 8000574:	46b2      	mov	sl, r6
 8000576:	46a9      	mov	r9, r5
 8000578:	46a0      	mov	r8, r4
 800057a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057c:	4642      	mov	r2, r8
 800057e:	469b      	mov	fp, r3
 8000580:	2320      	movs	r3, #32
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	4652      	mov	r2, sl
 8000586:	40da      	lsrs	r2, r3
 8000588:	4641      	mov	r1, r8
 800058a:	0013      	movs	r3, r2
 800058c:	464a      	mov	r2, r9
 800058e:	408a      	lsls	r2, r1
 8000590:	0017      	movs	r7, r2
 8000592:	4642      	mov	r2, r8
 8000594:	431f      	orrs	r7, r3
 8000596:	4653      	mov	r3, sl
 8000598:	4093      	lsls	r3, r2
 800059a:	001e      	movs	r6, r3
 800059c:	42af      	cmp	r7, r5
 800059e:	d9c3      	bls.n	8000528 <__udivmoddi4+0x4c>
 80005a0:	2200      	movs	r2, #0
 80005a2:	2300      	movs	r3, #0
 80005a4:	9200      	str	r2, [sp, #0]
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	4643      	mov	r3, r8
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0d8      	beq.n	8000560 <__udivmoddi4+0x84>
 80005ae:	07fb      	lsls	r3, r7, #31
 80005b0:	0872      	lsrs	r2, r6, #1
 80005b2:	431a      	orrs	r2, r3
 80005b4:	4646      	mov	r6, r8
 80005b6:	087b      	lsrs	r3, r7, #1
 80005b8:	e00e      	b.n	80005d8 <__udivmoddi4+0xfc>
 80005ba:	42ab      	cmp	r3, r5
 80005bc:	d101      	bne.n	80005c2 <__udivmoddi4+0xe6>
 80005be:	42a2      	cmp	r2, r4
 80005c0:	d80c      	bhi.n	80005dc <__udivmoddi4+0x100>
 80005c2:	1aa4      	subs	r4, r4, r2
 80005c4:	419d      	sbcs	r5, r3
 80005c6:	2001      	movs	r0, #1
 80005c8:	1924      	adds	r4, r4, r4
 80005ca:	416d      	adcs	r5, r5
 80005cc:	2100      	movs	r1, #0
 80005ce:	3e01      	subs	r6, #1
 80005d0:	1824      	adds	r4, r4, r0
 80005d2:	414d      	adcs	r5, r1
 80005d4:	2e00      	cmp	r6, #0
 80005d6:	d006      	beq.n	80005e6 <__udivmoddi4+0x10a>
 80005d8:	42ab      	cmp	r3, r5
 80005da:	d9ee      	bls.n	80005ba <__udivmoddi4+0xde>
 80005dc:	3e01      	subs	r6, #1
 80005de:	1924      	adds	r4, r4, r4
 80005e0:	416d      	adcs	r5, r5
 80005e2:	2e00      	cmp	r6, #0
 80005e4:	d1f8      	bne.n	80005d8 <__udivmoddi4+0xfc>
 80005e6:	9800      	ldr	r0, [sp, #0]
 80005e8:	9901      	ldr	r1, [sp, #4]
 80005ea:	465b      	mov	r3, fp
 80005ec:	1900      	adds	r0, r0, r4
 80005ee:	4169      	adcs	r1, r5
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	db24      	blt.n	800063e <__udivmoddi4+0x162>
 80005f4:	002b      	movs	r3, r5
 80005f6:	465a      	mov	r2, fp
 80005f8:	4644      	mov	r4, r8
 80005fa:	40d3      	lsrs	r3, r2
 80005fc:	002a      	movs	r2, r5
 80005fe:	40e2      	lsrs	r2, r4
 8000600:	001c      	movs	r4, r3
 8000602:	465b      	mov	r3, fp
 8000604:	0015      	movs	r5, r2
 8000606:	2b00      	cmp	r3, #0
 8000608:	db2a      	blt.n	8000660 <__udivmoddi4+0x184>
 800060a:	0026      	movs	r6, r4
 800060c:	409e      	lsls	r6, r3
 800060e:	0033      	movs	r3, r6
 8000610:	0026      	movs	r6, r4
 8000612:	4647      	mov	r7, r8
 8000614:	40be      	lsls	r6, r7
 8000616:	0032      	movs	r2, r6
 8000618:	1a80      	subs	r0, r0, r2
 800061a:	4199      	sbcs	r1, r3
 800061c:	9000      	str	r0, [sp, #0]
 800061e:	9101      	str	r1, [sp, #4]
 8000620:	e79e      	b.n	8000560 <__udivmoddi4+0x84>
 8000622:	42a3      	cmp	r3, r4
 8000624:	d8bc      	bhi.n	80005a0 <__udivmoddi4+0xc4>
 8000626:	e782      	b.n	800052e <__udivmoddi4+0x52>
 8000628:	4642      	mov	r2, r8
 800062a:	2320      	movs	r3, #32
 800062c:	2100      	movs	r1, #0
 800062e:	1a9b      	subs	r3, r3, r2
 8000630:	2200      	movs	r2, #0
 8000632:	9100      	str	r1, [sp, #0]
 8000634:	9201      	str	r2, [sp, #4]
 8000636:	2201      	movs	r2, #1
 8000638:	40da      	lsrs	r2, r3
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	e785      	b.n	800054a <__udivmoddi4+0x6e>
 800063e:	4642      	mov	r2, r8
 8000640:	2320      	movs	r3, #32
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	002a      	movs	r2, r5
 8000646:	4646      	mov	r6, r8
 8000648:	409a      	lsls	r2, r3
 800064a:	0023      	movs	r3, r4
 800064c:	40f3      	lsrs	r3, r6
 800064e:	4644      	mov	r4, r8
 8000650:	4313      	orrs	r3, r2
 8000652:	002a      	movs	r2, r5
 8000654:	40e2      	lsrs	r2, r4
 8000656:	001c      	movs	r4, r3
 8000658:	465b      	mov	r3, fp
 800065a:	0015      	movs	r5, r2
 800065c:	2b00      	cmp	r3, #0
 800065e:	dad4      	bge.n	800060a <__udivmoddi4+0x12e>
 8000660:	4642      	mov	r2, r8
 8000662:	002f      	movs	r7, r5
 8000664:	2320      	movs	r3, #32
 8000666:	0026      	movs	r6, r4
 8000668:	4097      	lsls	r7, r2
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	40de      	lsrs	r6, r3
 800066e:	003b      	movs	r3, r7
 8000670:	4333      	orrs	r3, r6
 8000672:	e7cd      	b.n	8000610 <__udivmoddi4+0x134>

08000674 <__aeabi_fadd>:
 8000674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000676:	46ce      	mov	lr, r9
 8000678:	4647      	mov	r7, r8
 800067a:	0243      	lsls	r3, r0, #9
 800067c:	0a5a      	lsrs	r2, r3, #9
 800067e:	024e      	lsls	r6, r1, #9
 8000680:	0045      	lsls	r5, r0, #1
 8000682:	0fc4      	lsrs	r4, r0, #31
 8000684:	0048      	lsls	r0, r1, #1
 8000686:	4691      	mov	r9, r2
 8000688:	0e2d      	lsrs	r5, r5, #24
 800068a:	0a72      	lsrs	r2, r6, #9
 800068c:	0e00      	lsrs	r0, r0, #24
 800068e:	4694      	mov	ip, r2
 8000690:	b580      	push	{r7, lr}
 8000692:	099b      	lsrs	r3, r3, #6
 8000694:	0fc9      	lsrs	r1, r1, #31
 8000696:	09b6      	lsrs	r6, r6, #6
 8000698:	1a2a      	subs	r2, r5, r0
 800069a:	428c      	cmp	r4, r1
 800069c:	d021      	beq.n	80006e2 <__aeabi_fadd+0x6e>
 800069e:	2a00      	cmp	r2, #0
 80006a0:	dd0d      	ble.n	80006be <__aeabi_fadd+0x4a>
 80006a2:	2800      	cmp	r0, #0
 80006a4:	d12d      	bne.n	8000702 <__aeabi_fadd+0x8e>
 80006a6:	2e00      	cmp	r6, #0
 80006a8:	d100      	bne.n	80006ac <__aeabi_fadd+0x38>
 80006aa:	e08d      	b.n	80007c8 <__aeabi_fadd+0x154>
 80006ac:	1e51      	subs	r1, r2, #1
 80006ae:	2a01      	cmp	r2, #1
 80006b0:	d100      	bne.n	80006b4 <__aeabi_fadd+0x40>
 80006b2:	e11d      	b.n	80008f0 <__aeabi_fadd+0x27c>
 80006b4:	2aff      	cmp	r2, #255	@ 0xff
 80006b6:	d100      	bne.n	80006ba <__aeabi_fadd+0x46>
 80006b8:	e0ab      	b.n	8000812 <__aeabi_fadd+0x19e>
 80006ba:	000a      	movs	r2, r1
 80006bc:	e027      	b.n	800070e <__aeabi_fadd+0x9a>
 80006be:	2a00      	cmp	r2, #0
 80006c0:	d04d      	beq.n	800075e <__aeabi_fadd+0xea>
 80006c2:	1b42      	subs	r2, r0, r5
 80006c4:	2d00      	cmp	r5, #0
 80006c6:	d000      	beq.n	80006ca <__aeabi_fadd+0x56>
 80006c8:	e0cc      	b.n	8000864 <__aeabi_fadd+0x1f0>
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d100      	bne.n	80006d0 <__aeabi_fadd+0x5c>
 80006ce:	e079      	b.n	80007c4 <__aeabi_fadd+0x150>
 80006d0:	1e54      	subs	r4, r2, #1
 80006d2:	2a01      	cmp	r2, #1
 80006d4:	d100      	bne.n	80006d8 <__aeabi_fadd+0x64>
 80006d6:	e128      	b.n	800092a <__aeabi_fadd+0x2b6>
 80006d8:	2aff      	cmp	r2, #255	@ 0xff
 80006da:	d100      	bne.n	80006de <__aeabi_fadd+0x6a>
 80006dc:	e097      	b.n	800080e <__aeabi_fadd+0x19a>
 80006de:	0022      	movs	r2, r4
 80006e0:	e0c5      	b.n	800086e <__aeabi_fadd+0x1fa>
 80006e2:	2a00      	cmp	r2, #0
 80006e4:	dc00      	bgt.n	80006e8 <__aeabi_fadd+0x74>
 80006e6:	e096      	b.n	8000816 <__aeabi_fadd+0x1a2>
 80006e8:	2800      	cmp	r0, #0
 80006ea:	d04f      	beq.n	800078c <__aeabi_fadd+0x118>
 80006ec:	2dff      	cmp	r5, #255	@ 0xff
 80006ee:	d100      	bne.n	80006f2 <__aeabi_fadd+0x7e>
 80006f0:	e08f      	b.n	8000812 <__aeabi_fadd+0x19e>
 80006f2:	2180      	movs	r1, #128	@ 0x80
 80006f4:	04c9      	lsls	r1, r1, #19
 80006f6:	430e      	orrs	r6, r1
 80006f8:	2a1b      	cmp	r2, #27
 80006fa:	dd51      	ble.n	80007a0 <__aeabi_fadd+0x12c>
 80006fc:	002a      	movs	r2, r5
 80006fe:	3301      	adds	r3, #1
 8000700:	e018      	b.n	8000734 <__aeabi_fadd+0xc0>
 8000702:	2dff      	cmp	r5, #255	@ 0xff
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0x94>
 8000706:	e084      	b.n	8000812 <__aeabi_fadd+0x19e>
 8000708:	2180      	movs	r1, #128	@ 0x80
 800070a:	04c9      	lsls	r1, r1, #19
 800070c:	430e      	orrs	r6, r1
 800070e:	2101      	movs	r1, #1
 8000710:	2a1b      	cmp	r2, #27
 8000712:	dc08      	bgt.n	8000726 <__aeabi_fadd+0xb2>
 8000714:	0031      	movs	r1, r6
 8000716:	2020      	movs	r0, #32
 8000718:	40d1      	lsrs	r1, r2
 800071a:	1a82      	subs	r2, r0, r2
 800071c:	4096      	lsls	r6, r2
 800071e:	0032      	movs	r2, r6
 8000720:	1e50      	subs	r0, r2, #1
 8000722:	4182      	sbcs	r2, r0
 8000724:	4311      	orrs	r1, r2
 8000726:	1a5b      	subs	r3, r3, r1
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	d459      	bmi.n	80007e0 <__aeabi_fadd+0x16c>
 800072c:	2107      	movs	r1, #7
 800072e:	002a      	movs	r2, r5
 8000730:	4019      	ands	r1, r3
 8000732:	d049      	beq.n	80007c8 <__aeabi_fadd+0x154>
 8000734:	210f      	movs	r1, #15
 8000736:	4019      	ands	r1, r3
 8000738:	2904      	cmp	r1, #4
 800073a:	d000      	beq.n	800073e <__aeabi_fadd+0xca>
 800073c:	3304      	adds	r3, #4
 800073e:	0159      	lsls	r1, r3, #5
 8000740:	d542      	bpl.n	80007c8 <__aeabi_fadd+0x154>
 8000742:	1c50      	adds	r0, r2, #1
 8000744:	2afe      	cmp	r2, #254	@ 0xfe
 8000746:	d03a      	beq.n	80007be <__aeabi_fadd+0x14a>
 8000748:	019b      	lsls	r3, r3, #6
 800074a:	b2c0      	uxtb	r0, r0
 800074c:	0a5b      	lsrs	r3, r3, #9
 800074e:	05c0      	lsls	r0, r0, #23
 8000750:	4318      	orrs	r0, r3
 8000752:	07e4      	lsls	r4, r4, #31
 8000754:	4320      	orrs	r0, r4
 8000756:	bcc0      	pop	{r6, r7}
 8000758:	46b9      	mov	r9, r7
 800075a:	46b0      	mov	r8, r6
 800075c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800075e:	20fe      	movs	r0, #254	@ 0xfe
 8000760:	4680      	mov	r8, r0
 8000762:	1c6f      	adds	r7, r5, #1
 8000764:	0038      	movs	r0, r7
 8000766:	4647      	mov	r7, r8
 8000768:	4207      	tst	r7, r0
 800076a:	d000      	beq.n	800076e <__aeabi_fadd+0xfa>
 800076c:	e08e      	b.n	800088c <__aeabi_fadd+0x218>
 800076e:	2d00      	cmp	r5, #0
 8000770:	d000      	beq.n	8000774 <__aeabi_fadd+0x100>
 8000772:	e0b4      	b.n	80008de <__aeabi_fadd+0x26a>
 8000774:	2b00      	cmp	r3, #0
 8000776:	d100      	bne.n	800077a <__aeabi_fadd+0x106>
 8000778:	e0db      	b.n	8000932 <__aeabi_fadd+0x2be>
 800077a:	2e00      	cmp	r6, #0
 800077c:	d06c      	beq.n	8000858 <__aeabi_fadd+0x1e4>
 800077e:	1b98      	subs	r0, r3, r6
 8000780:	0145      	lsls	r5, r0, #5
 8000782:	d400      	bmi.n	8000786 <__aeabi_fadd+0x112>
 8000784:	e0f7      	b.n	8000976 <__aeabi_fadd+0x302>
 8000786:	000c      	movs	r4, r1
 8000788:	1af3      	subs	r3, r6, r3
 800078a:	e03d      	b.n	8000808 <__aeabi_fadd+0x194>
 800078c:	2e00      	cmp	r6, #0
 800078e:	d01b      	beq.n	80007c8 <__aeabi_fadd+0x154>
 8000790:	1e51      	subs	r1, r2, #1
 8000792:	2a01      	cmp	r2, #1
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x124>
 8000796:	e082      	b.n	800089e <__aeabi_fadd+0x22a>
 8000798:	2aff      	cmp	r2, #255	@ 0xff
 800079a:	d03a      	beq.n	8000812 <__aeabi_fadd+0x19e>
 800079c:	000a      	movs	r2, r1
 800079e:	e7ab      	b.n	80006f8 <__aeabi_fadd+0x84>
 80007a0:	0031      	movs	r1, r6
 80007a2:	2020      	movs	r0, #32
 80007a4:	40d1      	lsrs	r1, r2
 80007a6:	1a82      	subs	r2, r0, r2
 80007a8:	4096      	lsls	r6, r2
 80007aa:	0032      	movs	r2, r6
 80007ac:	1e50      	subs	r0, r2, #1
 80007ae:	4182      	sbcs	r2, r0
 80007b0:	430a      	orrs	r2, r1
 80007b2:	189b      	adds	r3, r3, r2
 80007b4:	015a      	lsls	r2, r3, #5
 80007b6:	d5b9      	bpl.n	800072c <__aeabi_fadd+0xb8>
 80007b8:	1c6a      	adds	r2, r5, #1
 80007ba:	2dfe      	cmp	r5, #254	@ 0xfe
 80007bc:	d175      	bne.n	80008aa <__aeabi_fadd+0x236>
 80007be:	20ff      	movs	r0, #255	@ 0xff
 80007c0:	2300      	movs	r3, #0
 80007c2:	e7c4      	b.n	800074e <__aeabi_fadd+0xda>
 80007c4:	000c      	movs	r4, r1
 80007c6:	0033      	movs	r3, r6
 80007c8:	08db      	lsrs	r3, r3, #3
 80007ca:	2aff      	cmp	r2, #255	@ 0xff
 80007cc:	d146      	bne.n	800085c <__aeabi_fadd+0x1e8>
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d0f5      	beq.n	80007be <__aeabi_fadd+0x14a>
 80007d2:	2280      	movs	r2, #128	@ 0x80
 80007d4:	03d2      	lsls	r2, r2, #15
 80007d6:	4313      	orrs	r3, r2
 80007d8:	025b      	lsls	r3, r3, #9
 80007da:	20ff      	movs	r0, #255	@ 0xff
 80007dc:	0a5b      	lsrs	r3, r3, #9
 80007de:	e7b6      	b.n	800074e <__aeabi_fadd+0xda>
 80007e0:	019f      	lsls	r7, r3, #6
 80007e2:	09bf      	lsrs	r7, r7, #6
 80007e4:	0038      	movs	r0, r7
 80007e6:	f002 f995 	bl	8002b14 <__clzsi2>
 80007ea:	3805      	subs	r0, #5
 80007ec:	4087      	lsls	r7, r0
 80007ee:	4285      	cmp	r5, r0
 80007f0:	dc24      	bgt.n	800083c <__aeabi_fadd+0x1c8>
 80007f2:	003b      	movs	r3, r7
 80007f4:	2120      	movs	r1, #32
 80007f6:	1b42      	subs	r2, r0, r5
 80007f8:	3201      	adds	r2, #1
 80007fa:	40d3      	lsrs	r3, r2
 80007fc:	1a8a      	subs	r2, r1, r2
 80007fe:	4097      	lsls	r7, r2
 8000800:	1e7a      	subs	r2, r7, #1
 8000802:	4197      	sbcs	r7, r2
 8000804:	2200      	movs	r2, #0
 8000806:	433b      	orrs	r3, r7
 8000808:	0759      	lsls	r1, r3, #29
 800080a:	d193      	bne.n	8000734 <__aeabi_fadd+0xc0>
 800080c:	e797      	b.n	800073e <__aeabi_fadd+0xca>
 800080e:	000c      	movs	r4, r1
 8000810:	0033      	movs	r3, r6
 8000812:	08db      	lsrs	r3, r3, #3
 8000814:	e7db      	b.n	80007ce <__aeabi_fadd+0x15a>
 8000816:	2a00      	cmp	r2, #0
 8000818:	d014      	beq.n	8000844 <__aeabi_fadd+0x1d0>
 800081a:	1b42      	subs	r2, r0, r5
 800081c:	2d00      	cmp	r5, #0
 800081e:	d14b      	bne.n	80008b8 <__aeabi_fadd+0x244>
 8000820:	2b00      	cmp	r3, #0
 8000822:	d0d0      	beq.n	80007c6 <__aeabi_fadd+0x152>
 8000824:	1e51      	subs	r1, r2, #1
 8000826:	2a01      	cmp	r2, #1
 8000828:	d100      	bne.n	800082c <__aeabi_fadd+0x1b8>
 800082a:	e09e      	b.n	800096a <__aeabi_fadd+0x2f6>
 800082c:	2aff      	cmp	r2, #255	@ 0xff
 800082e:	d0ef      	beq.n	8000810 <__aeabi_fadd+0x19c>
 8000830:	000a      	movs	r2, r1
 8000832:	2a1b      	cmp	r2, #27
 8000834:	dd5f      	ble.n	80008f6 <__aeabi_fadd+0x282>
 8000836:	0002      	movs	r2, r0
 8000838:	1c73      	adds	r3, r6, #1
 800083a:	e77b      	b.n	8000734 <__aeabi_fadd+0xc0>
 800083c:	4b50      	ldr	r3, [pc, #320]	@ (8000980 <__aeabi_fadd+0x30c>)
 800083e:	1a2a      	subs	r2, r5, r0
 8000840:	403b      	ands	r3, r7
 8000842:	e7e1      	b.n	8000808 <__aeabi_fadd+0x194>
 8000844:	21fe      	movs	r1, #254	@ 0xfe
 8000846:	1c6a      	adds	r2, r5, #1
 8000848:	4211      	tst	r1, r2
 800084a:	d13b      	bne.n	80008c4 <__aeabi_fadd+0x250>
 800084c:	2d00      	cmp	r5, #0
 800084e:	d15d      	bne.n	800090c <__aeabi_fadd+0x298>
 8000850:	2b00      	cmp	r3, #0
 8000852:	d07f      	beq.n	8000954 <__aeabi_fadd+0x2e0>
 8000854:	2e00      	cmp	r6, #0
 8000856:	d17f      	bne.n	8000958 <__aeabi_fadd+0x2e4>
 8000858:	2200      	movs	r2, #0
 800085a:	08db      	lsrs	r3, r3, #3
 800085c:	025b      	lsls	r3, r3, #9
 800085e:	0a5b      	lsrs	r3, r3, #9
 8000860:	b2d0      	uxtb	r0, r2
 8000862:	e774      	b.n	800074e <__aeabi_fadd+0xda>
 8000864:	28ff      	cmp	r0, #255	@ 0xff
 8000866:	d0d2      	beq.n	800080e <__aeabi_fadd+0x19a>
 8000868:	2480      	movs	r4, #128	@ 0x80
 800086a:	04e4      	lsls	r4, r4, #19
 800086c:	4323      	orrs	r3, r4
 800086e:	2401      	movs	r4, #1
 8000870:	2a1b      	cmp	r2, #27
 8000872:	dc07      	bgt.n	8000884 <__aeabi_fadd+0x210>
 8000874:	001c      	movs	r4, r3
 8000876:	2520      	movs	r5, #32
 8000878:	40d4      	lsrs	r4, r2
 800087a:	1aaa      	subs	r2, r5, r2
 800087c:	4093      	lsls	r3, r2
 800087e:	1e5a      	subs	r2, r3, #1
 8000880:	4193      	sbcs	r3, r2
 8000882:	431c      	orrs	r4, r3
 8000884:	1b33      	subs	r3, r6, r4
 8000886:	0005      	movs	r5, r0
 8000888:	000c      	movs	r4, r1
 800088a:	e74d      	b.n	8000728 <__aeabi_fadd+0xb4>
 800088c:	1b9f      	subs	r7, r3, r6
 800088e:	017a      	lsls	r2, r7, #5
 8000890:	d422      	bmi.n	80008d8 <__aeabi_fadd+0x264>
 8000892:	2f00      	cmp	r7, #0
 8000894:	d1a6      	bne.n	80007e4 <__aeabi_fadd+0x170>
 8000896:	2400      	movs	r4, #0
 8000898:	2000      	movs	r0, #0
 800089a:	2300      	movs	r3, #0
 800089c:	e757      	b.n	800074e <__aeabi_fadd+0xda>
 800089e:	199b      	adds	r3, r3, r6
 80008a0:	2501      	movs	r5, #1
 80008a2:	3201      	adds	r2, #1
 80008a4:	0159      	lsls	r1, r3, #5
 80008a6:	d400      	bmi.n	80008aa <__aeabi_fadd+0x236>
 80008a8:	e740      	b.n	800072c <__aeabi_fadd+0xb8>
 80008aa:	2101      	movs	r1, #1
 80008ac:	4835      	ldr	r0, [pc, #212]	@ (8000984 <__aeabi_fadd+0x310>)
 80008ae:	4019      	ands	r1, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	4003      	ands	r3, r0
 80008b4:	430b      	orrs	r3, r1
 80008b6:	e7a7      	b.n	8000808 <__aeabi_fadd+0x194>
 80008b8:	28ff      	cmp	r0, #255	@ 0xff
 80008ba:	d0a9      	beq.n	8000810 <__aeabi_fadd+0x19c>
 80008bc:	2180      	movs	r1, #128	@ 0x80
 80008be:	04c9      	lsls	r1, r1, #19
 80008c0:	430b      	orrs	r3, r1
 80008c2:	e7b6      	b.n	8000832 <__aeabi_fadd+0x1be>
 80008c4:	2aff      	cmp	r2, #255	@ 0xff
 80008c6:	d100      	bne.n	80008ca <__aeabi_fadd+0x256>
 80008c8:	e779      	b.n	80007be <__aeabi_fadd+0x14a>
 80008ca:	199b      	adds	r3, r3, r6
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	0759      	lsls	r1, r3, #29
 80008d0:	d000      	beq.n	80008d4 <__aeabi_fadd+0x260>
 80008d2:	e72f      	b.n	8000734 <__aeabi_fadd+0xc0>
 80008d4:	08db      	lsrs	r3, r3, #3
 80008d6:	e7c1      	b.n	800085c <__aeabi_fadd+0x1e8>
 80008d8:	000c      	movs	r4, r1
 80008da:	1af7      	subs	r7, r6, r3
 80008dc:	e782      	b.n	80007e4 <__aeabi_fadd+0x170>
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d12c      	bne.n	800093c <__aeabi_fadd+0x2c8>
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d193      	bne.n	800080e <__aeabi_fadd+0x19a>
 80008e6:	2380      	movs	r3, #128	@ 0x80
 80008e8:	2400      	movs	r4, #0
 80008ea:	20ff      	movs	r0, #255	@ 0xff
 80008ec:	03db      	lsls	r3, r3, #15
 80008ee:	e72e      	b.n	800074e <__aeabi_fadd+0xda>
 80008f0:	2501      	movs	r5, #1
 80008f2:	1b9b      	subs	r3, r3, r6
 80008f4:	e718      	b.n	8000728 <__aeabi_fadd+0xb4>
 80008f6:	0019      	movs	r1, r3
 80008f8:	2520      	movs	r5, #32
 80008fa:	40d1      	lsrs	r1, r2
 80008fc:	1aaa      	subs	r2, r5, r2
 80008fe:	4093      	lsls	r3, r2
 8000900:	1e5a      	subs	r2, r3, #1
 8000902:	4193      	sbcs	r3, r2
 8000904:	430b      	orrs	r3, r1
 8000906:	0005      	movs	r5, r0
 8000908:	199b      	adds	r3, r3, r6
 800090a:	e753      	b.n	80007b4 <__aeabi_fadd+0x140>
 800090c:	2b00      	cmp	r3, #0
 800090e:	d100      	bne.n	8000912 <__aeabi_fadd+0x29e>
 8000910:	e77e      	b.n	8000810 <__aeabi_fadd+0x19c>
 8000912:	2e00      	cmp	r6, #0
 8000914:	d100      	bne.n	8000918 <__aeabi_fadd+0x2a4>
 8000916:	e77c      	b.n	8000812 <__aeabi_fadd+0x19e>
 8000918:	2280      	movs	r2, #128	@ 0x80
 800091a:	03d2      	lsls	r2, r2, #15
 800091c:	4591      	cmp	r9, r2
 800091e:	d302      	bcc.n	8000926 <__aeabi_fadd+0x2b2>
 8000920:	4594      	cmp	ip, r2
 8000922:	d200      	bcs.n	8000926 <__aeabi_fadd+0x2b2>
 8000924:	0033      	movs	r3, r6
 8000926:	08db      	lsrs	r3, r3, #3
 8000928:	e753      	b.n	80007d2 <__aeabi_fadd+0x15e>
 800092a:	000c      	movs	r4, r1
 800092c:	1af3      	subs	r3, r6, r3
 800092e:	3501      	adds	r5, #1
 8000930:	e6fa      	b.n	8000728 <__aeabi_fadd+0xb4>
 8000932:	2e00      	cmp	r6, #0
 8000934:	d0af      	beq.n	8000896 <__aeabi_fadd+0x222>
 8000936:	000c      	movs	r4, r1
 8000938:	0033      	movs	r3, r6
 800093a:	e78d      	b.n	8000858 <__aeabi_fadd+0x1e4>
 800093c:	2e00      	cmp	r6, #0
 800093e:	d100      	bne.n	8000942 <__aeabi_fadd+0x2ce>
 8000940:	e767      	b.n	8000812 <__aeabi_fadd+0x19e>
 8000942:	2280      	movs	r2, #128	@ 0x80
 8000944:	03d2      	lsls	r2, r2, #15
 8000946:	4591      	cmp	r9, r2
 8000948:	d3ed      	bcc.n	8000926 <__aeabi_fadd+0x2b2>
 800094a:	4594      	cmp	ip, r2
 800094c:	d2eb      	bcs.n	8000926 <__aeabi_fadd+0x2b2>
 800094e:	000c      	movs	r4, r1
 8000950:	0033      	movs	r3, r6
 8000952:	e7e8      	b.n	8000926 <__aeabi_fadd+0x2b2>
 8000954:	0033      	movs	r3, r6
 8000956:	e77f      	b.n	8000858 <__aeabi_fadd+0x1e4>
 8000958:	199b      	adds	r3, r3, r6
 800095a:	2200      	movs	r2, #0
 800095c:	0159      	lsls	r1, r3, #5
 800095e:	d5b9      	bpl.n	80008d4 <__aeabi_fadd+0x260>
 8000960:	4a07      	ldr	r2, [pc, #28]	@ (8000980 <__aeabi_fadd+0x30c>)
 8000962:	4013      	ands	r3, r2
 8000964:	08db      	lsrs	r3, r3, #3
 8000966:	2201      	movs	r2, #1
 8000968:	e778      	b.n	800085c <__aeabi_fadd+0x1e8>
 800096a:	199b      	adds	r3, r3, r6
 800096c:	3201      	adds	r2, #1
 800096e:	3501      	adds	r5, #1
 8000970:	0159      	lsls	r1, r3, #5
 8000972:	d49a      	bmi.n	80008aa <__aeabi_fadd+0x236>
 8000974:	e6da      	b.n	800072c <__aeabi_fadd+0xb8>
 8000976:	1e03      	subs	r3, r0, #0
 8000978:	d08d      	beq.n	8000896 <__aeabi_fadd+0x222>
 800097a:	08db      	lsrs	r3, r3, #3
 800097c:	e76e      	b.n	800085c <__aeabi_fadd+0x1e8>
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	fbffffff 	.word	0xfbffffff
 8000984:	7dffffff 	.word	0x7dffffff

08000988 <__aeabi_fdiv>:
 8000988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098a:	464f      	mov	r7, r9
 800098c:	4646      	mov	r6, r8
 800098e:	46d6      	mov	lr, sl
 8000990:	0244      	lsls	r4, r0, #9
 8000992:	b5c0      	push	{r6, r7, lr}
 8000994:	0047      	lsls	r7, r0, #1
 8000996:	1c0e      	adds	r6, r1, #0
 8000998:	0a64      	lsrs	r4, r4, #9
 800099a:	0e3f      	lsrs	r7, r7, #24
 800099c:	0fc5      	lsrs	r5, r0, #31
 800099e:	2f00      	cmp	r7, #0
 80009a0:	d03c      	beq.n	8000a1c <__aeabi_fdiv+0x94>
 80009a2:	2fff      	cmp	r7, #255	@ 0xff
 80009a4:	d042      	beq.n	8000a2c <__aeabi_fdiv+0xa4>
 80009a6:	2300      	movs	r3, #0
 80009a8:	2280      	movs	r2, #128	@ 0x80
 80009aa:	4699      	mov	r9, r3
 80009ac:	469a      	mov	sl, r3
 80009ae:	00e4      	lsls	r4, r4, #3
 80009b0:	04d2      	lsls	r2, r2, #19
 80009b2:	4314      	orrs	r4, r2
 80009b4:	3f7f      	subs	r7, #127	@ 0x7f
 80009b6:	0273      	lsls	r3, r6, #9
 80009b8:	0a5b      	lsrs	r3, r3, #9
 80009ba:	4698      	mov	r8, r3
 80009bc:	0073      	lsls	r3, r6, #1
 80009be:	0e1b      	lsrs	r3, r3, #24
 80009c0:	0ff6      	lsrs	r6, r6, #31
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d01b      	beq.n	80009fe <__aeabi_fdiv+0x76>
 80009c6:	2bff      	cmp	r3, #255	@ 0xff
 80009c8:	d013      	beq.n	80009f2 <__aeabi_fdiv+0x6a>
 80009ca:	4642      	mov	r2, r8
 80009cc:	2180      	movs	r1, #128	@ 0x80
 80009ce:	00d2      	lsls	r2, r2, #3
 80009d0:	04c9      	lsls	r1, r1, #19
 80009d2:	4311      	orrs	r1, r2
 80009d4:	4688      	mov	r8, r1
 80009d6:	2000      	movs	r0, #0
 80009d8:	3b7f      	subs	r3, #127	@ 0x7f
 80009da:	0029      	movs	r1, r5
 80009dc:	1aff      	subs	r7, r7, r3
 80009de:	464b      	mov	r3, r9
 80009e0:	4071      	eors	r1, r6
 80009e2:	b2c9      	uxtb	r1, r1
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d900      	bls.n	80009ea <__aeabi_fdiv+0x62>
 80009e8:	e0b5      	b.n	8000b56 <__aeabi_fdiv+0x1ce>
 80009ea:	4a74      	ldr	r2, [pc, #464]	@ (8000bbc <__aeabi_fdiv+0x234>)
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	58d3      	ldr	r3, [r2, r3]
 80009f0:	469f      	mov	pc, r3
 80009f2:	4643      	mov	r3, r8
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d13f      	bne.n	8000a78 <__aeabi_fdiv+0xf0>
 80009f8:	3fff      	subs	r7, #255	@ 0xff
 80009fa:	3302      	adds	r3, #2
 80009fc:	e003      	b.n	8000a06 <__aeabi_fdiv+0x7e>
 80009fe:	4643      	mov	r3, r8
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d12d      	bne.n	8000a60 <__aeabi_fdiv+0xd8>
 8000a04:	2301      	movs	r3, #1
 8000a06:	0029      	movs	r1, r5
 8000a08:	464a      	mov	r2, r9
 8000a0a:	4071      	eors	r1, r6
 8000a0c:	b2c9      	uxtb	r1, r1
 8000a0e:	431a      	orrs	r2, r3
 8000a10:	2a0e      	cmp	r2, #14
 8000a12:	d838      	bhi.n	8000a86 <__aeabi_fdiv+0xfe>
 8000a14:	486a      	ldr	r0, [pc, #424]	@ (8000bc0 <__aeabi_fdiv+0x238>)
 8000a16:	0092      	lsls	r2, r2, #2
 8000a18:	5882      	ldr	r2, [r0, r2]
 8000a1a:	4697      	mov	pc, r2
 8000a1c:	2c00      	cmp	r4, #0
 8000a1e:	d113      	bne.n	8000a48 <__aeabi_fdiv+0xc0>
 8000a20:	2304      	movs	r3, #4
 8000a22:	4699      	mov	r9, r3
 8000a24:	3b03      	subs	r3, #3
 8000a26:	2700      	movs	r7, #0
 8000a28:	469a      	mov	sl, r3
 8000a2a:	e7c4      	b.n	80009b6 <__aeabi_fdiv+0x2e>
 8000a2c:	2c00      	cmp	r4, #0
 8000a2e:	d105      	bne.n	8000a3c <__aeabi_fdiv+0xb4>
 8000a30:	2308      	movs	r3, #8
 8000a32:	4699      	mov	r9, r3
 8000a34:	3b06      	subs	r3, #6
 8000a36:	27ff      	movs	r7, #255	@ 0xff
 8000a38:	469a      	mov	sl, r3
 8000a3a:	e7bc      	b.n	80009b6 <__aeabi_fdiv+0x2e>
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	4699      	mov	r9, r3
 8000a40:	3b09      	subs	r3, #9
 8000a42:	27ff      	movs	r7, #255	@ 0xff
 8000a44:	469a      	mov	sl, r3
 8000a46:	e7b6      	b.n	80009b6 <__aeabi_fdiv+0x2e>
 8000a48:	0020      	movs	r0, r4
 8000a4a:	f002 f863 	bl	8002b14 <__clzsi2>
 8000a4e:	2776      	movs	r7, #118	@ 0x76
 8000a50:	1f43      	subs	r3, r0, #5
 8000a52:	409c      	lsls	r4, r3
 8000a54:	2300      	movs	r3, #0
 8000a56:	427f      	negs	r7, r7
 8000a58:	4699      	mov	r9, r3
 8000a5a:	469a      	mov	sl, r3
 8000a5c:	1a3f      	subs	r7, r7, r0
 8000a5e:	e7aa      	b.n	80009b6 <__aeabi_fdiv+0x2e>
 8000a60:	4640      	mov	r0, r8
 8000a62:	f002 f857 	bl	8002b14 <__clzsi2>
 8000a66:	4642      	mov	r2, r8
 8000a68:	1f43      	subs	r3, r0, #5
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	2376      	movs	r3, #118	@ 0x76
 8000a6e:	425b      	negs	r3, r3
 8000a70:	1a1b      	subs	r3, r3, r0
 8000a72:	4690      	mov	r8, r2
 8000a74:	2000      	movs	r0, #0
 8000a76:	e7b0      	b.n	80009da <__aeabi_fdiv+0x52>
 8000a78:	2303      	movs	r3, #3
 8000a7a:	464a      	mov	r2, r9
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	4691      	mov	r9, r2
 8000a80:	2003      	movs	r0, #3
 8000a82:	33fc      	adds	r3, #252	@ 0xfc
 8000a84:	e7a9      	b.n	80009da <__aeabi_fdiv+0x52>
 8000a86:	000d      	movs	r5, r1
 8000a88:	20ff      	movs	r0, #255	@ 0xff
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	05c0      	lsls	r0, r0, #23
 8000a8e:	07ed      	lsls	r5, r5, #31
 8000a90:	4310      	orrs	r0, r2
 8000a92:	4328      	orrs	r0, r5
 8000a94:	bce0      	pop	{r5, r6, r7}
 8000a96:	46ba      	mov	sl, r7
 8000a98:	46b1      	mov	r9, r6
 8000a9a:	46a8      	mov	r8, r5
 8000a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a9e:	000d      	movs	r5, r1
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	e7f2      	b.n	8000a8c <__aeabi_fdiv+0x104>
 8000aa6:	4653      	mov	r3, sl
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d0ed      	beq.n	8000a88 <__aeabi_fdiv+0x100>
 8000aac:	2b03      	cmp	r3, #3
 8000aae:	d033      	beq.n	8000b18 <__aeabi_fdiv+0x190>
 8000ab0:	46a0      	mov	r8, r4
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d105      	bne.n	8000ac2 <__aeabi_fdiv+0x13a>
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	2200      	movs	r2, #0
 8000aba:	e7e7      	b.n	8000a8c <__aeabi_fdiv+0x104>
 8000abc:	0035      	movs	r5, r6
 8000abe:	2803      	cmp	r0, #3
 8000ac0:	d07a      	beq.n	8000bb8 <__aeabi_fdiv+0x230>
 8000ac2:	003b      	movs	r3, r7
 8000ac4:	337f      	adds	r3, #127	@ 0x7f
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	dd2d      	ble.n	8000b26 <__aeabi_fdiv+0x19e>
 8000aca:	4642      	mov	r2, r8
 8000acc:	0752      	lsls	r2, r2, #29
 8000ace:	d007      	beq.n	8000ae0 <__aeabi_fdiv+0x158>
 8000ad0:	220f      	movs	r2, #15
 8000ad2:	4641      	mov	r1, r8
 8000ad4:	400a      	ands	r2, r1
 8000ad6:	2a04      	cmp	r2, #4
 8000ad8:	d002      	beq.n	8000ae0 <__aeabi_fdiv+0x158>
 8000ada:	2204      	movs	r2, #4
 8000adc:	4694      	mov	ip, r2
 8000ade:	44e0      	add	r8, ip
 8000ae0:	4642      	mov	r2, r8
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	d505      	bpl.n	8000af2 <__aeabi_fdiv+0x16a>
 8000ae6:	4642      	mov	r2, r8
 8000ae8:	4b36      	ldr	r3, [pc, #216]	@ (8000bc4 <__aeabi_fdiv+0x23c>)
 8000aea:	401a      	ands	r2, r3
 8000aec:	003b      	movs	r3, r7
 8000aee:	4690      	mov	r8, r2
 8000af0:	3380      	adds	r3, #128	@ 0x80
 8000af2:	2bfe      	cmp	r3, #254	@ 0xfe
 8000af4:	dcc8      	bgt.n	8000a88 <__aeabi_fdiv+0x100>
 8000af6:	4642      	mov	r2, r8
 8000af8:	0192      	lsls	r2, r2, #6
 8000afa:	0a52      	lsrs	r2, r2, #9
 8000afc:	b2d8      	uxtb	r0, r3
 8000afe:	e7c5      	b.n	8000a8c <__aeabi_fdiv+0x104>
 8000b00:	2280      	movs	r2, #128	@ 0x80
 8000b02:	2500      	movs	r5, #0
 8000b04:	20ff      	movs	r0, #255	@ 0xff
 8000b06:	03d2      	lsls	r2, r2, #15
 8000b08:	e7c0      	b.n	8000a8c <__aeabi_fdiv+0x104>
 8000b0a:	2280      	movs	r2, #128	@ 0x80
 8000b0c:	03d2      	lsls	r2, r2, #15
 8000b0e:	4214      	tst	r4, r2
 8000b10:	d002      	beq.n	8000b18 <__aeabi_fdiv+0x190>
 8000b12:	4643      	mov	r3, r8
 8000b14:	4213      	tst	r3, r2
 8000b16:	d049      	beq.n	8000bac <__aeabi_fdiv+0x224>
 8000b18:	2280      	movs	r2, #128	@ 0x80
 8000b1a:	03d2      	lsls	r2, r2, #15
 8000b1c:	4322      	orrs	r2, r4
 8000b1e:	0252      	lsls	r2, r2, #9
 8000b20:	20ff      	movs	r0, #255	@ 0xff
 8000b22:	0a52      	lsrs	r2, r2, #9
 8000b24:	e7b2      	b.n	8000a8c <__aeabi_fdiv+0x104>
 8000b26:	2201      	movs	r2, #1
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	2b1b      	cmp	r3, #27
 8000b2c:	dcc3      	bgt.n	8000ab6 <__aeabi_fdiv+0x12e>
 8000b2e:	4642      	mov	r2, r8
 8000b30:	40da      	lsrs	r2, r3
 8000b32:	4643      	mov	r3, r8
 8000b34:	379e      	adds	r7, #158	@ 0x9e
 8000b36:	40bb      	lsls	r3, r7
 8000b38:	1e59      	subs	r1, r3, #1
 8000b3a:	418b      	sbcs	r3, r1
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	0753      	lsls	r3, r2, #29
 8000b40:	d004      	beq.n	8000b4c <__aeabi_fdiv+0x1c4>
 8000b42:	230f      	movs	r3, #15
 8000b44:	4013      	ands	r3, r2
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	d000      	beq.n	8000b4c <__aeabi_fdiv+0x1c4>
 8000b4a:	3204      	adds	r2, #4
 8000b4c:	0153      	lsls	r3, r2, #5
 8000b4e:	d529      	bpl.n	8000ba4 <__aeabi_fdiv+0x21c>
 8000b50:	2001      	movs	r0, #1
 8000b52:	2200      	movs	r2, #0
 8000b54:	e79a      	b.n	8000a8c <__aeabi_fdiv+0x104>
 8000b56:	4642      	mov	r2, r8
 8000b58:	0163      	lsls	r3, r4, #5
 8000b5a:	0155      	lsls	r5, r2, #5
 8000b5c:	42ab      	cmp	r3, r5
 8000b5e:	d215      	bcs.n	8000b8c <__aeabi_fdiv+0x204>
 8000b60:	201b      	movs	r0, #27
 8000b62:	2200      	movs	r2, #0
 8000b64:	3f01      	subs	r7, #1
 8000b66:	2601      	movs	r6, #1
 8000b68:	001c      	movs	r4, r3
 8000b6a:	0052      	lsls	r2, r2, #1
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	2c00      	cmp	r4, #0
 8000b70:	db01      	blt.n	8000b76 <__aeabi_fdiv+0x1ee>
 8000b72:	429d      	cmp	r5, r3
 8000b74:	d801      	bhi.n	8000b7a <__aeabi_fdiv+0x1f2>
 8000b76:	1b5b      	subs	r3, r3, r5
 8000b78:	4332      	orrs	r2, r6
 8000b7a:	3801      	subs	r0, #1
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	d1f3      	bne.n	8000b68 <__aeabi_fdiv+0x1e0>
 8000b80:	1e58      	subs	r0, r3, #1
 8000b82:	4183      	sbcs	r3, r0
 8000b84:	4313      	orrs	r3, r2
 8000b86:	4698      	mov	r8, r3
 8000b88:	000d      	movs	r5, r1
 8000b8a:	e79a      	b.n	8000ac2 <__aeabi_fdiv+0x13a>
 8000b8c:	201a      	movs	r0, #26
 8000b8e:	2201      	movs	r2, #1
 8000b90:	1b5b      	subs	r3, r3, r5
 8000b92:	e7e8      	b.n	8000b66 <__aeabi_fdiv+0x1de>
 8000b94:	3b02      	subs	r3, #2
 8000b96:	425a      	negs	r2, r3
 8000b98:	4153      	adcs	r3, r2
 8000b9a:	425b      	negs	r3, r3
 8000b9c:	0035      	movs	r5, r6
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	b2d8      	uxtb	r0, r3
 8000ba2:	e773      	b.n	8000a8c <__aeabi_fdiv+0x104>
 8000ba4:	0192      	lsls	r2, r2, #6
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	0a52      	lsrs	r2, r2, #9
 8000baa:	e76f      	b.n	8000a8c <__aeabi_fdiv+0x104>
 8000bac:	431a      	orrs	r2, r3
 8000bae:	0252      	lsls	r2, r2, #9
 8000bb0:	0035      	movs	r5, r6
 8000bb2:	20ff      	movs	r0, #255	@ 0xff
 8000bb4:	0a52      	lsrs	r2, r2, #9
 8000bb6:	e769      	b.n	8000a8c <__aeabi_fdiv+0x104>
 8000bb8:	4644      	mov	r4, r8
 8000bba:	e7ad      	b.n	8000b18 <__aeabi_fdiv+0x190>
 8000bbc:	080065e0 	.word	0x080065e0
 8000bc0:	08006620 	.word	0x08006620
 8000bc4:	f7ffffff 	.word	0xf7ffffff

08000bc8 <__aeabi_fmul>:
 8000bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bca:	464f      	mov	r7, r9
 8000bcc:	4646      	mov	r6, r8
 8000bce:	46d6      	mov	lr, sl
 8000bd0:	0243      	lsls	r3, r0, #9
 8000bd2:	0a5b      	lsrs	r3, r3, #9
 8000bd4:	0045      	lsls	r5, r0, #1
 8000bd6:	b5c0      	push	{r6, r7, lr}
 8000bd8:	4699      	mov	r9, r3
 8000bda:	1c0f      	adds	r7, r1, #0
 8000bdc:	0e2d      	lsrs	r5, r5, #24
 8000bde:	0fc6      	lsrs	r6, r0, #31
 8000be0:	2d00      	cmp	r5, #0
 8000be2:	d100      	bne.n	8000be6 <__aeabi_fmul+0x1e>
 8000be4:	e088      	b.n	8000cf8 <__aeabi_fmul+0x130>
 8000be6:	2dff      	cmp	r5, #255	@ 0xff
 8000be8:	d100      	bne.n	8000bec <__aeabi_fmul+0x24>
 8000bea:	e08d      	b.n	8000d08 <__aeabi_fmul+0x140>
 8000bec:	2280      	movs	r2, #128	@ 0x80
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	04d2      	lsls	r2, r2, #19
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	4691      	mov	r9, r2
 8000bf8:	4698      	mov	r8, r3
 8000bfa:	469a      	mov	sl, r3
 8000bfc:	3d7f      	subs	r5, #127	@ 0x7f
 8000bfe:	027c      	lsls	r4, r7, #9
 8000c00:	007b      	lsls	r3, r7, #1
 8000c02:	0a64      	lsrs	r4, r4, #9
 8000c04:	0e1b      	lsrs	r3, r3, #24
 8000c06:	0fff      	lsrs	r7, r7, #31
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d068      	beq.n	8000cde <__aeabi_fmul+0x116>
 8000c0c:	2bff      	cmp	r3, #255	@ 0xff
 8000c0e:	d021      	beq.n	8000c54 <__aeabi_fmul+0x8c>
 8000c10:	2280      	movs	r2, #128	@ 0x80
 8000c12:	00e4      	lsls	r4, r4, #3
 8000c14:	04d2      	lsls	r2, r2, #19
 8000c16:	4314      	orrs	r4, r2
 8000c18:	4642      	mov	r2, r8
 8000c1a:	3b7f      	subs	r3, #127	@ 0x7f
 8000c1c:	195b      	adds	r3, r3, r5
 8000c1e:	2100      	movs	r1, #0
 8000c20:	1c5d      	adds	r5, r3, #1
 8000c22:	2a0a      	cmp	r2, #10
 8000c24:	dc2e      	bgt.n	8000c84 <__aeabi_fmul+0xbc>
 8000c26:	407e      	eors	r6, r7
 8000c28:	4642      	mov	r2, r8
 8000c2a:	2a02      	cmp	r2, #2
 8000c2c:	dc23      	bgt.n	8000c76 <__aeabi_fmul+0xae>
 8000c2e:	3a01      	subs	r2, #1
 8000c30:	2a01      	cmp	r2, #1
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fmul+0x6e>
 8000c34:	e0bd      	b.n	8000db2 <__aeabi_fmul+0x1ea>
 8000c36:	2902      	cmp	r1, #2
 8000c38:	d06e      	beq.n	8000d18 <__aeabi_fmul+0x150>
 8000c3a:	2901      	cmp	r1, #1
 8000c3c:	d12c      	bne.n	8000c98 <__aeabi_fmul+0xd0>
 8000c3e:	2000      	movs	r0, #0
 8000c40:	2200      	movs	r2, #0
 8000c42:	05c0      	lsls	r0, r0, #23
 8000c44:	07f6      	lsls	r6, r6, #31
 8000c46:	4310      	orrs	r0, r2
 8000c48:	4330      	orrs	r0, r6
 8000c4a:	bce0      	pop	{r5, r6, r7}
 8000c4c:	46ba      	mov	sl, r7
 8000c4e:	46b1      	mov	r9, r6
 8000c50:	46a8      	mov	r8, r5
 8000c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c54:	002b      	movs	r3, r5
 8000c56:	33ff      	adds	r3, #255	@ 0xff
 8000c58:	2c00      	cmp	r4, #0
 8000c5a:	d065      	beq.n	8000d28 <__aeabi_fmul+0x160>
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	4641      	mov	r1, r8
 8000c60:	4311      	orrs	r1, r2
 8000c62:	0032      	movs	r2, r6
 8000c64:	3501      	adds	r5, #1
 8000c66:	4688      	mov	r8, r1
 8000c68:	407a      	eors	r2, r7
 8000c6a:	35ff      	adds	r5, #255	@ 0xff
 8000c6c:	290a      	cmp	r1, #10
 8000c6e:	dd00      	ble.n	8000c72 <__aeabi_fmul+0xaa>
 8000c70:	e0d8      	b.n	8000e24 <__aeabi_fmul+0x25c>
 8000c72:	0016      	movs	r6, r2
 8000c74:	2103      	movs	r1, #3
 8000c76:	4640      	mov	r0, r8
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4082      	lsls	r2, r0
 8000c7c:	20a6      	movs	r0, #166	@ 0xa6
 8000c7e:	00c0      	lsls	r0, r0, #3
 8000c80:	4202      	tst	r2, r0
 8000c82:	d020      	beq.n	8000cc6 <__aeabi_fmul+0xfe>
 8000c84:	4653      	mov	r3, sl
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d046      	beq.n	8000d18 <__aeabi_fmul+0x150>
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_fmul+0xc8>
 8000c8e:	e0bb      	b.n	8000e08 <__aeabi_fmul+0x240>
 8000c90:	4651      	mov	r1, sl
 8000c92:	464c      	mov	r4, r9
 8000c94:	2901      	cmp	r1, #1
 8000c96:	d0d2      	beq.n	8000c3e <__aeabi_fmul+0x76>
 8000c98:	002b      	movs	r3, r5
 8000c9a:	337f      	adds	r3, #127	@ 0x7f
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	dd70      	ble.n	8000d82 <__aeabi_fmul+0x1ba>
 8000ca0:	0762      	lsls	r2, r4, #29
 8000ca2:	d004      	beq.n	8000cae <__aeabi_fmul+0xe6>
 8000ca4:	220f      	movs	r2, #15
 8000ca6:	4022      	ands	r2, r4
 8000ca8:	2a04      	cmp	r2, #4
 8000caa:	d000      	beq.n	8000cae <__aeabi_fmul+0xe6>
 8000cac:	3404      	adds	r4, #4
 8000cae:	0122      	lsls	r2, r4, #4
 8000cb0:	d503      	bpl.n	8000cba <__aeabi_fmul+0xf2>
 8000cb2:	4b63      	ldr	r3, [pc, #396]	@ (8000e40 <__aeabi_fmul+0x278>)
 8000cb4:	401c      	ands	r4, r3
 8000cb6:	002b      	movs	r3, r5
 8000cb8:	3380      	adds	r3, #128	@ 0x80
 8000cba:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cbc:	dc2c      	bgt.n	8000d18 <__aeabi_fmul+0x150>
 8000cbe:	01a2      	lsls	r2, r4, #6
 8000cc0:	0a52      	lsrs	r2, r2, #9
 8000cc2:	b2d8      	uxtb	r0, r3
 8000cc4:	e7bd      	b.n	8000c42 <__aeabi_fmul+0x7a>
 8000cc6:	2090      	movs	r0, #144	@ 0x90
 8000cc8:	0080      	lsls	r0, r0, #2
 8000cca:	4202      	tst	r2, r0
 8000ccc:	d127      	bne.n	8000d1e <__aeabi_fmul+0x156>
 8000cce:	38b9      	subs	r0, #185	@ 0xb9
 8000cd0:	38ff      	subs	r0, #255	@ 0xff
 8000cd2:	4210      	tst	r0, r2
 8000cd4:	d06d      	beq.n	8000db2 <__aeabi_fmul+0x1ea>
 8000cd6:	003e      	movs	r6, r7
 8000cd8:	46a1      	mov	r9, r4
 8000cda:	468a      	mov	sl, r1
 8000cdc:	e7d2      	b.n	8000c84 <__aeabi_fmul+0xbc>
 8000cde:	2c00      	cmp	r4, #0
 8000ce0:	d141      	bne.n	8000d66 <__aeabi_fmul+0x19e>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	4642      	mov	r2, r8
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	4690      	mov	r8, r2
 8000cea:	002b      	movs	r3, r5
 8000cec:	4642      	mov	r2, r8
 8000cee:	2101      	movs	r1, #1
 8000cf0:	1c5d      	adds	r5, r3, #1
 8000cf2:	2a0a      	cmp	r2, #10
 8000cf4:	dd97      	ble.n	8000c26 <__aeabi_fmul+0x5e>
 8000cf6:	e7c5      	b.n	8000c84 <__aeabi_fmul+0xbc>
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d126      	bne.n	8000d4a <__aeabi_fmul+0x182>
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	4698      	mov	r8, r3
 8000d00:	3b03      	subs	r3, #3
 8000d02:	2500      	movs	r5, #0
 8000d04:	469a      	mov	sl, r3
 8000d06:	e77a      	b.n	8000bfe <__aeabi_fmul+0x36>
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d118      	bne.n	8000d3e <__aeabi_fmul+0x176>
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	4698      	mov	r8, r3
 8000d10:	3b06      	subs	r3, #6
 8000d12:	25ff      	movs	r5, #255	@ 0xff
 8000d14:	469a      	mov	sl, r3
 8000d16:	e772      	b.n	8000bfe <__aeabi_fmul+0x36>
 8000d18:	20ff      	movs	r0, #255	@ 0xff
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	e791      	b.n	8000c42 <__aeabi_fmul+0x7a>
 8000d1e:	2280      	movs	r2, #128	@ 0x80
 8000d20:	2600      	movs	r6, #0
 8000d22:	20ff      	movs	r0, #255	@ 0xff
 8000d24:	03d2      	lsls	r2, r2, #15
 8000d26:	e78c      	b.n	8000c42 <__aeabi_fmul+0x7a>
 8000d28:	4641      	mov	r1, r8
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	3501      	adds	r5, #1
 8000d2e:	4311      	orrs	r1, r2
 8000d30:	4688      	mov	r8, r1
 8000d32:	35ff      	adds	r5, #255	@ 0xff
 8000d34:	290a      	cmp	r1, #10
 8000d36:	dca5      	bgt.n	8000c84 <__aeabi_fmul+0xbc>
 8000d38:	2102      	movs	r1, #2
 8000d3a:	407e      	eors	r6, r7
 8000d3c:	e774      	b.n	8000c28 <__aeabi_fmul+0x60>
 8000d3e:	230c      	movs	r3, #12
 8000d40:	4698      	mov	r8, r3
 8000d42:	3b09      	subs	r3, #9
 8000d44:	25ff      	movs	r5, #255	@ 0xff
 8000d46:	469a      	mov	sl, r3
 8000d48:	e759      	b.n	8000bfe <__aeabi_fmul+0x36>
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f001 fee2 	bl	8002b14 <__clzsi2>
 8000d50:	464a      	mov	r2, r9
 8000d52:	1f43      	subs	r3, r0, #5
 8000d54:	2576      	movs	r5, #118	@ 0x76
 8000d56:	409a      	lsls	r2, r3
 8000d58:	2300      	movs	r3, #0
 8000d5a:	426d      	negs	r5, r5
 8000d5c:	4691      	mov	r9, r2
 8000d5e:	4698      	mov	r8, r3
 8000d60:	469a      	mov	sl, r3
 8000d62:	1a2d      	subs	r5, r5, r0
 8000d64:	e74b      	b.n	8000bfe <__aeabi_fmul+0x36>
 8000d66:	0020      	movs	r0, r4
 8000d68:	f001 fed4 	bl	8002b14 <__clzsi2>
 8000d6c:	4642      	mov	r2, r8
 8000d6e:	1f43      	subs	r3, r0, #5
 8000d70:	409c      	lsls	r4, r3
 8000d72:	1a2b      	subs	r3, r5, r0
 8000d74:	3b76      	subs	r3, #118	@ 0x76
 8000d76:	2100      	movs	r1, #0
 8000d78:	1c5d      	adds	r5, r3, #1
 8000d7a:	2a0a      	cmp	r2, #10
 8000d7c:	dc00      	bgt.n	8000d80 <__aeabi_fmul+0x1b8>
 8000d7e:	e752      	b.n	8000c26 <__aeabi_fmul+0x5e>
 8000d80:	e780      	b.n	8000c84 <__aeabi_fmul+0xbc>
 8000d82:	2201      	movs	r2, #1
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b1b      	cmp	r3, #27
 8000d88:	dd00      	ble.n	8000d8c <__aeabi_fmul+0x1c4>
 8000d8a:	e758      	b.n	8000c3e <__aeabi_fmul+0x76>
 8000d8c:	359e      	adds	r5, #158	@ 0x9e
 8000d8e:	0022      	movs	r2, r4
 8000d90:	40ac      	lsls	r4, r5
 8000d92:	40da      	lsrs	r2, r3
 8000d94:	1e63      	subs	r3, r4, #1
 8000d96:	419c      	sbcs	r4, r3
 8000d98:	4322      	orrs	r2, r4
 8000d9a:	0753      	lsls	r3, r2, #29
 8000d9c:	d004      	beq.n	8000da8 <__aeabi_fmul+0x1e0>
 8000d9e:	230f      	movs	r3, #15
 8000da0:	4013      	ands	r3, r2
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d000      	beq.n	8000da8 <__aeabi_fmul+0x1e0>
 8000da6:	3204      	adds	r2, #4
 8000da8:	0153      	lsls	r3, r2, #5
 8000daa:	d537      	bpl.n	8000e1c <__aeabi_fmul+0x254>
 8000dac:	2001      	movs	r0, #1
 8000dae:	2200      	movs	r2, #0
 8000db0:	e747      	b.n	8000c42 <__aeabi_fmul+0x7a>
 8000db2:	0c21      	lsrs	r1, r4, #16
 8000db4:	464a      	mov	r2, r9
 8000db6:	0424      	lsls	r4, r4, #16
 8000db8:	0c24      	lsrs	r4, r4, #16
 8000dba:	0027      	movs	r7, r4
 8000dbc:	0c10      	lsrs	r0, r2, #16
 8000dbe:	0412      	lsls	r2, r2, #16
 8000dc0:	0c12      	lsrs	r2, r2, #16
 8000dc2:	4344      	muls	r4, r0
 8000dc4:	4357      	muls	r7, r2
 8000dc6:	4348      	muls	r0, r1
 8000dc8:	4351      	muls	r1, r2
 8000dca:	0c3a      	lsrs	r2, r7, #16
 8000dcc:	1909      	adds	r1, r1, r4
 8000dce:	1852      	adds	r2, r2, r1
 8000dd0:	4294      	cmp	r4, r2
 8000dd2:	d903      	bls.n	8000ddc <__aeabi_fmul+0x214>
 8000dd4:	2180      	movs	r1, #128	@ 0x80
 8000dd6:	0249      	lsls	r1, r1, #9
 8000dd8:	468c      	mov	ip, r1
 8000dda:	4460      	add	r0, ip
 8000ddc:	043f      	lsls	r7, r7, #16
 8000dde:	0411      	lsls	r1, r2, #16
 8000de0:	0c3f      	lsrs	r7, r7, #16
 8000de2:	19c9      	adds	r1, r1, r7
 8000de4:	018c      	lsls	r4, r1, #6
 8000de6:	1e67      	subs	r7, r4, #1
 8000de8:	41bc      	sbcs	r4, r7
 8000dea:	0c12      	lsrs	r2, r2, #16
 8000dec:	0e89      	lsrs	r1, r1, #26
 8000dee:	1812      	adds	r2, r2, r0
 8000df0:	430c      	orrs	r4, r1
 8000df2:	0192      	lsls	r2, r2, #6
 8000df4:	4314      	orrs	r4, r2
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	d50e      	bpl.n	8000e18 <__aeabi_fmul+0x250>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	0862      	lsrs	r2, r4, #1
 8000dfe:	401c      	ands	r4, r3
 8000e00:	4314      	orrs	r4, r2
 8000e02:	e749      	b.n	8000c98 <__aeabi_fmul+0xd0>
 8000e04:	003e      	movs	r6, r7
 8000e06:	46a1      	mov	r9, r4
 8000e08:	2280      	movs	r2, #128	@ 0x80
 8000e0a:	464b      	mov	r3, r9
 8000e0c:	03d2      	lsls	r2, r2, #15
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	0252      	lsls	r2, r2, #9
 8000e12:	20ff      	movs	r0, #255	@ 0xff
 8000e14:	0a52      	lsrs	r2, r2, #9
 8000e16:	e714      	b.n	8000c42 <__aeabi_fmul+0x7a>
 8000e18:	001d      	movs	r5, r3
 8000e1a:	e73d      	b.n	8000c98 <__aeabi_fmul+0xd0>
 8000e1c:	0192      	lsls	r2, r2, #6
 8000e1e:	2000      	movs	r0, #0
 8000e20:	0a52      	lsrs	r2, r2, #9
 8000e22:	e70e      	b.n	8000c42 <__aeabi_fmul+0x7a>
 8000e24:	290f      	cmp	r1, #15
 8000e26:	d1ed      	bne.n	8000e04 <__aeabi_fmul+0x23c>
 8000e28:	2280      	movs	r2, #128	@ 0x80
 8000e2a:	464b      	mov	r3, r9
 8000e2c:	03d2      	lsls	r2, r2, #15
 8000e2e:	4213      	tst	r3, r2
 8000e30:	d0ea      	beq.n	8000e08 <__aeabi_fmul+0x240>
 8000e32:	4214      	tst	r4, r2
 8000e34:	d1e8      	bne.n	8000e08 <__aeabi_fmul+0x240>
 8000e36:	003e      	movs	r6, r7
 8000e38:	20ff      	movs	r0, #255	@ 0xff
 8000e3a:	4322      	orrs	r2, r4
 8000e3c:	e701      	b.n	8000c42 <__aeabi_fmul+0x7a>
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	f7ffffff 	.word	0xf7ffffff

08000e44 <__aeabi_fsub>:
 8000e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e46:	4647      	mov	r7, r8
 8000e48:	46ce      	mov	lr, r9
 8000e4a:	024e      	lsls	r6, r1, #9
 8000e4c:	0243      	lsls	r3, r0, #9
 8000e4e:	0045      	lsls	r5, r0, #1
 8000e50:	0a72      	lsrs	r2, r6, #9
 8000e52:	0fc4      	lsrs	r4, r0, #31
 8000e54:	0048      	lsls	r0, r1, #1
 8000e56:	b580      	push	{r7, lr}
 8000e58:	4694      	mov	ip, r2
 8000e5a:	0a5f      	lsrs	r7, r3, #9
 8000e5c:	0e2d      	lsrs	r5, r5, #24
 8000e5e:	099b      	lsrs	r3, r3, #6
 8000e60:	0e00      	lsrs	r0, r0, #24
 8000e62:	0fc9      	lsrs	r1, r1, #31
 8000e64:	09b6      	lsrs	r6, r6, #6
 8000e66:	28ff      	cmp	r0, #255	@ 0xff
 8000e68:	d024      	beq.n	8000eb4 <__aeabi_fsub+0x70>
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4051      	eors	r1, r2
 8000e6e:	1a2a      	subs	r2, r5, r0
 8000e70:	428c      	cmp	r4, r1
 8000e72:	d00f      	beq.n	8000e94 <__aeabi_fsub+0x50>
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	dc00      	bgt.n	8000e7a <__aeabi_fsub+0x36>
 8000e78:	e16a      	b.n	8001150 <__aeabi_fsub+0x30c>
 8000e7a:	2800      	cmp	r0, #0
 8000e7c:	d135      	bne.n	8000eea <__aeabi_fsub+0xa6>
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	d100      	bne.n	8000e84 <__aeabi_fsub+0x40>
 8000e82:	e0a2      	b.n	8000fca <__aeabi_fsub+0x186>
 8000e84:	1e51      	subs	r1, r2, #1
 8000e86:	2a01      	cmp	r2, #1
 8000e88:	d100      	bne.n	8000e8c <__aeabi_fsub+0x48>
 8000e8a:	e124      	b.n	80010d6 <__aeabi_fsub+0x292>
 8000e8c:	2aff      	cmp	r2, #255	@ 0xff
 8000e8e:	d021      	beq.n	8000ed4 <__aeabi_fsub+0x90>
 8000e90:	000a      	movs	r2, r1
 8000e92:	e02f      	b.n	8000ef4 <__aeabi_fsub+0xb0>
 8000e94:	2a00      	cmp	r2, #0
 8000e96:	dc00      	bgt.n	8000e9a <__aeabi_fsub+0x56>
 8000e98:	e167      	b.n	800116a <__aeabi_fsub+0x326>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d05e      	beq.n	8000f5c <__aeabi_fsub+0x118>
 8000e9e:	2dff      	cmp	r5, #255	@ 0xff
 8000ea0:	d018      	beq.n	8000ed4 <__aeabi_fsub+0x90>
 8000ea2:	2180      	movs	r1, #128	@ 0x80
 8000ea4:	04c9      	lsls	r1, r1, #19
 8000ea6:	430e      	orrs	r6, r1
 8000ea8:	2a1b      	cmp	r2, #27
 8000eaa:	dc00      	bgt.n	8000eae <__aeabi_fsub+0x6a>
 8000eac:	e076      	b.n	8000f9c <__aeabi_fsub+0x158>
 8000eae:	002a      	movs	r2, r5
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	e032      	b.n	8000f1a <__aeabi_fsub+0xd6>
 8000eb4:	002a      	movs	r2, r5
 8000eb6:	3aff      	subs	r2, #255	@ 0xff
 8000eb8:	4691      	mov	r9, r2
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d042      	beq.n	8000f44 <__aeabi_fsub+0x100>
 8000ebe:	428c      	cmp	r4, r1
 8000ec0:	d055      	beq.n	8000f6e <__aeabi_fsub+0x12a>
 8000ec2:	464a      	mov	r2, r9
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	d100      	bne.n	8000eca <__aeabi_fsub+0x86>
 8000ec8:	e09c      	b.n	8001004 <__aeabi_fsub+0x1c0>
 8000eca:	2d00      	cmp	r5, #0
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_fsub+0x8c>
 8000ece:	e077      	b.n	8000fc0 <__aeabi_fsub+0x17c>
 8000ed0:	000c      	movs	r4, r1
 8000ed2:	0033      	movs	r3, r6
 8000ed4:	08db      	lsrs	r3, r3, #3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d100      	bne.n	8000edc <__aeabi_fsub+0x98>
 8000eda:	e06e      	b.n	8000fba <__aeabi_fsub+0x176>
 8000edc:	2280      	movs	r2, #128	@ 0x80
 8000ede:	03d2      	lsls	r2, r2, #15
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	025b      	lsls	r3, r3, #9
 8000ee4:	20ff      	movs	r0, #255	@ 0xff
 8000ee6:	0a5b      	lsrs	r3, r3, #9
 8000ee8:	e024      	b.n	8000f34 <__aeabi_fsub+0xf0>
 8000eea:	2dff      	cmp	r5, #255	@ 0xff
 8000eec:	d0f2      	beq.n	8000ed4 <__aeabi_fsub+0x90>
 8000eee:	2180      	movs	r1, #128	@ 0x80
 8000ef0:	04c9      	lsls	r1, r1, #19
 8000ef2:	430e      	orrs	r6, r1
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	2a1b      	cmp	r2, #27
 8000ef8:	dc08      	bgt.n	8000f0c <__aeabi_fsub+0xc8>
 8000efa:	0031      	movs	r1, r6
 8000efc:	2020      	movs	r0, #32
 8000efe:	40d1      	lsrs	r1, r2
 8000f00:	1a82      	subs	r2, r0, r2
 8000f02:	4096      	lsls	r6, r2
 8000f04:	0032      	movs	r2, r6
 8000f06:	1e50      	subs	r0, r2, #1
 8000f08:	4182      	sbcs	r2, r0
 8000f0a:	4311      	orrs	r1, r2
 8000f0c:	1a5b      	subs	r3, r3, r1
 8000f0e:	015a      	lsls	r2, r3, #5
 8000f10:	d460      	bmi.n	8000fd4 <__aeabi_fsub+0x190>
 8000f12:	2107      	movs	r1, #7
 8000f14:	002a      	movs	r2, r5
 8000f16:	4019      	ands	r1, r3
 8000f18:	d057      	beq.n	8000fca <__aeabi_fsub+0x186>
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	4019      	ands	r1, r3
 8000f1e:	2904      	cmp	r1, #4
 8000f20:	d000      	beq.n	8000f24 <__aeabi_fsub+0xe0>
 8000f22:	3304      	adds	r3, #4
 8000f24:	0159      	lsls	r1, r3, #5
 8000f26:	d550      	bpl.n	8000fca <__aeabi_fsub+0x186>
 8000f28:	1c50      	adds	r0, r2, #1
 8000f2a:	2afe      	cmp	r2, #254	@ 0xfe
 8000f2c:	d045      	beq.n	8000fba <__aeabi_fsub+0x176>
 8000f2e:	019b      	lsls	r3, r3, #6
 8000f30:	b2c0      	uxtb	r0, r0
 8000f32:	0a5b      	lsrs	r3, r3, #9
 8000f34:	05c0      	lsls	r0, r0, #23
 8000f36:	4318      	orrs	r0, r3
 8000f38:	07e4      	lsls	r4, r4, #31
 8000f3a:	4320      	orrs	r0, r4
 8000f3c:	bcc0      	pop	{r6, r7}
 8000f3e:	46b9      	mov	r9, r7
 8000f40:	46b0      	mov	r8, r6
 8000f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f44:	2201      	movs	r2, #1
 8000f46:	4051      	eors	r1, r2
 8000f48:	428c      	cmp	r4, r1
 8000f4a:	d1ba      	bne.n	8000ec2 <__aeabi_fsub+0x7e>
 8000f4c:	464a      	mov	r2, r9
 8000f4e:	2a00      	cmp	r2, #0
 8000f50:	d010      	beq.n	8000f74 <__aeabi_fsub+0x130>
 8000f52:	2d00      	cmp	r5, #0
 8000f54:	d100      	bne.n	8000f58 <__aeabi_fsub+0x114>
 8000f56:	e098      	b.n	800108a <__aeabi_fsub+0x246>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	e7bb      	b.n	8000ed4 <__aeabi_fsub+0x90>
 8000f5c:	2e00      	cmp	r6, #0
 8000f5e:	d034      	beq.n	8000fca <__aeabi_fsub+0x186>
 8000f60:	1e51      	subs	r1, r2, #1
 8000f62:	2a01      	cmp	r2, #1
 8000f64:	d06e      	beq.n	8001044 <__aeabi_fsub+0x200>
 8000f66:	2aff      	cmp	r2, #255	@ 0xff
 8000f68:	d0b4      	beq.n	8000ed4 <__aeabi_fsub+0x90>
 8000f6a:	000a      	movs	r2, r1
 8000f6c:	e79c      	b.n	8000ea8 <__aeabi_fsub+0x64>
 8000f6e:	2a00      	cmp	r2, #0
 8000f70:	d000      	beq.n	8000f74 <__aeabi_fsub+0x130>
 8000f72:	e088      	b.n	8001086 <__aeabi_fsub+0x242>
 8000f74:	20fe      	movs	r0, #254	@ 0xfe
 8000f76:	1c6a      	adds	r2, r5, #1
 8000f78:	4210      	tst	r0, r2
 8000f7a:	d000      	beq.n	8000f7e <__aeabi_fsub+0x13a>
 8000f7c:	e092      	b.n	80010a4 <__aeabi_fsub+0x260>
 8000f7e:	2d00      	cmp	r5, #0
 8000f80:	d000      	beq.n	8000f84 <__aeabi_fsub+0x140>
 8000f82:	e0a4      	b.n	80010ce <__aeabi_fsub+0x28a>
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d100      	bne.n	8000f8a <__aeabi_fsub+0x146>
 8000f88:	e0cb      	b.n	8001122 <__aeabi_fsub+0x2de>
 8000f8a:	2e00      	cmp	r6, #0
 8000f8c:	d000      	beq.n	8000f90 <__aeabi_fsub+0x14c>
 8000f8e:	e0ca      	b.n	8001126 <__aeabi_fsub+0x2e2>
 8000f90:	2200      	movs	r2, #0
 8000f92:	08db      	lsrs	r3, r3, #3
 8000f94:	025b      	lsls	r3, r3, #9
 8000f96:	0a5b      	lsrs	r3, r3, #9
 8000f98:	b2d0      	uxtb	r0, r2
 8000f9a:	e7cb      	b.n	8000f34 <__aeabi_fsub+0xf0>
 8000f9c:	0031      	movs	r1, r6
 8000f9e:	2020      	movs	r0, #32
 8000fa0:	40d1      	lsrs	r1, r2
 8000fa2:	1a82      	subs	r2, r0, r2
 8000fa4:	4096      	lsls	r6, r2
 8000fa6:	0032      	movs	r2, r6
 8000fa8:	1e50      	subs	r0, r2, #1
 8000faa:	4182      	sbcs	r2, r0
 8000fac:	430a      	orrs	r2, r1
 8000fae:	189b      	adds	r3, r3, r2
 8000fb0:	015a      	lsls	r2, r3, #5
 8000fb2:	d5ae      	bpl.n	8000f12 <__aeabi_fsub+0xce>
 8000fb4:	1c6a      	adds	r2, r5, #1
 8000fb6:	2dfe      	cmp	r5, #254	@ 0xfe
 8000fb8:	d14a      	bne.n	8001050 <__aeabi_fsub+0x20c>
 8000fba:	20ff      	movs	r0, #255	@ 0xff
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e7b9      	b.n	8000f34 <__aeabi_fsub+0xf0>
 8000fc0:	22ff      	movs	r2, #255	@ 0xff
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d14b      	bne.n	800105e <__aeabi_fsub+0x21a>
 8000fc6:	000c      	movs	r4, r1
 8000fc8:	0033      	movs	r3, r6
 8000fca:	08db      	lsrs	r3, r3, #3
 8000fcc:	2aff      	cmp	r2, #255	@ 0xff
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_fsub+0x18e>
 8000fd0:	e781      	b.n	8000ed6 <__aeabi_fsub+0x92>
 8000fd2:	e7df      	b.n	8000f94 <__aeabi_fsub+0x150>
 8000fd4:	019f      	lsls	r7, r3, #6
 8000fd6:	09bf      	lsrs	r7, r7, #6
 8000fd8:	0038      	movs	r0, r7
 8000fda:	f001 fd9b 	bl	8002b14 <__clzsi2>
 8000fde:	3805      	subs	r0, #5
 8000fe0:	4087      	lsls	r7, r0
 8000fe2:	4285      	cmp	r5, r0
 8000fe4:	dc21      	bgt.n	800102a <__aeabi_fsub+0x1e6>
 8000fe6:	003b      	movs	r3, r7
 8000fe8:	2120      	movs	r1, #32
 8000fea:	1b42      	subs	r2, r0, r5
 8000fec:	3201      	adds	r2, #1
 8000fee:	40d3      	lsrs	r3, r2
 8000ff0:	1a8a      	subs	r2, r1, r2
 8000ff2:	4097      	lsls	r7, r2
 8000ff4:	1e7a      	subs	r2, r7, #1
 8000ff6:	4197      	sbcs	r7, r2
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	433b      	orrs	r3, r7
 8000ffc:	0759      	lsls	r1, r3, #29
 8000ffe:	d000      	beq.n	8001002 <__aeabi_fsub+0x1be>
 8001000:	e78b      	b.n	8000f1a <__aeabi_fsub+0xd6>
 8001002:	e78f      	b.n	8000f24 <__aeabi_fsub+0xe0>
 8001004:	20fe      	movs	r0, #254	@ 0xfe
 8001006:	1c6a      	adds	r2, r5, #1
 8001008:	4210      	tst	r0, r2
 800100a:	d112      	bne.n	8001032 <__aeabi_fsub+0x1ee>
 800100c:	2d00      	cmp	r5, #0
 800100e:	d152      	bne.n	80010b6 <__aeabi_fsub+0x272>
 8001010:	2b00      	cmp	r3, #0
 8001012:	d07c      	beq.n	800110e <__aeabi_fsub+0x2ca>
 8001014:	2e00      	cmp	r6, #0
 8001016:	d0bb      	beq.n	8000f90 <__aeabi_fsub+0x14c>
 8001018:	1b9a      	subs	r2, r3, r6
 800101a:	0150      	lsls	r0, r2, #5
 800101c:	d400      	bmi.n	8001020 <__aeabi_fsub+0x1dc>
 800101e:	e08b      	b.n	8001138 <__aeabi_fsub+0x2f4>
 8001020:	2401      	movs	r4, #1
 8001022:	2200      	movs	r2, #0
 8001024:	1af3      	subs	r3, r6, r3
 8001026:	400c      	ands	r4, r1
 8001028:	e7e8      	b.n	8000ffc <__aeabi_fsub+0x1b8>
 800102a:	4b56      	ldr	r3, [pc, #344]	@ (8001184 <__aeabi_fsub+0x340>)
 800102c:	1a2a      	subs	r2, r5, r0
 800102e:	403b      	ands	r3, r7
 8001030:	e7e4      	b.n	8000ffc <__aeabi_fsub+0x1b8>
 8001032:	1b9f      	subs	r7, r3, r6
 8001034:	017a      	lsls	r2, r7, #5
 8001036:	d446      	bmi.n	80010c6 <__aeabi_fsub+0x282>
 8001038:	2f00      	cmp	r7, #0
 800103a:	d1cd      	bne.n	8000fd8 <__aeabi_fsub+0x194>
 800103c:	2400      	movs	r4, #0
 800103e:	2000      	movs	r0, #0
 8001040:	2300      	movs	r3, #0
 8001042:	e777      	b.n	8000f34 <__aeabi_fsub+0xf0>
 8001044:	199b      	adds	r3, r3, r6
 8001046:	2501      	movs	r5, #1
 8001048:	3201      	adds	r2, #1
 800104a:	0159      	lsls	r1, r3, #5
 800104c:	d400      	bmi.n	8001050 <__aeabi_fsub+0x20c>
 800104e:	e760      	b.n	8000f12 <__aeabi_fsub+0xce>
 8001050:	2101      	movs	r1, #1
 8001052:	484d      	ldr	r0, [pc, #308]	@ (8001188 <__aeabi_fsub+0x344>)
 8001054:	4019      	ands	r1, r3
 8001056:	085b      	lsrs	r3, r3, #1
 8001058:	4003      	ands	r3, r0
 800105a:	430b      	orrs	r3, r1
 800105c:	e7ce      	b.n	8000ffc <__aeabi_fsub+0x1b8>
 800105e:	1e57      	subs	r7, r2, #1
 8001060:	2a01      	cmp	r2, #1
 8001062:	d05a      	beq.n	800111a <__aeabi_fsub+0x2d6>
 8001064:	000c      	movs	r4, r1
 8001066:	2aff      	cmp	r2, #255	@ 0xff
 8001068:	d033      	beq.n	80010d2 <__aeabi_fsub+0x28e>
 800106a:	2201      	movs	r2, #1
 800106c:	2f1b      	cmp	r7, #27
 800106e:	dc07      	bgt.n	8001080 <__aeabi_fsub+0x23c>
 8001070:	2120      	movs	r1, #32
 8001072:	1bc9      	subs	r1, r1, r7
 8001074:	001a      	movs	r2, r3
 8001076:	408b      	lsls	r3, r1
 8001078:	40fa      	lsrs	r2, r7
 800107a:	1e59      	subs	r1, r3, #1
 800107c:	418b      	sbcs	r3, r1
 800107e:	431a      	orrs	r2, r3
 8001080:	0005      	movs	r5, r0
 8001082:	1ab3      	subs	r3, r6, r2
 8001084:	e743      	b.n	8000f0e <__aeabi_fsub+0xca>
 8001086:	2d00      	cmp	r5, #0
 8001088:	d123      	bne.n	80010d2 <__aeabi_fsub+0x28e>
 800108a:	22ff      	movs	r2, #255	@ 0xff
 800108c:	2b00      	cmp	r3, #0
 800108e:	d09b      	beq.n	8000fc8 <__aeabi_fsub+0x184>
 8001090:	1e51      	subs	r1, r2, #1
 8001092:	2a01      	cmp	r2, #1
 8001094:	d0d6      	beq.n	8001044 <__aeabi_fsub+0x200>
 8001096:	2aff      	cmp	r2, #255	@ 0xff
 8001098:	d01b      	beq.n	80010d2 <__aeabi_fsub+0x28e>
 800109a:	291b      	cmp	r1, #27
 800109c:	dd2c      	ble.n	80010f8 <__aeabi_fsub+0x2b4>
 800109e:	0002      	movs	r2, r0
 80010a0:	1c73      	adds	r3, r6, #1
 80010a2:	e73a      	b.n	8000f1a <__aeabi_fsub+0xd6>
 80010a4:	2aff      	cmp	r2, #255	@ 0xff
 80010a6:	d088      	beq.n	8000fba <__aeabi_fsub+0x176>
 80010a8:	199b      	adds	r3, r3, r6
 80010aa:	085b      	lsrs	r3, r3, #1
 80010ac:	0759      	lsls	r1, r3, #29
 80010ae:	d000      	beq.n	80010b2 <__aeabi_fsub+0x26e>
 80010b0:	e733      	b.n	8000f1a <__aeabi_fsub+0xd6>
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	e76e      	b.n	8000f94 <__aeabi_fsub+0x150>
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d110      	bne.n	80010dc <__aeabi_fsub+0x298>
 80010ba:	2e00      	cmp	r6, #0
 80010bc:	d043      	beq.n	8001146 <__aeabi_fsub+0x302>
 80010be:	2401      	movs	r4, #1
 80010c0:	0033      	movs	r3, r6
 80010c2:	400c      	ands	r4, r1
 80010c4:	e706      	b.n	8000ed4 <__aeabi_fsub+0x90>
 80010c6:	2401      	movs	r4, #1
 80010c8:	1af7      	subs	r7, r6, r3
 80010ca:	400c      	ands	r4, r1
 80010cc:	e784      	b.n	8000fd8 <__aeabi_fsub+0x194>
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d104      	bne.n	80010dc <__aeabi_fsub+0x298>
 80010d2:	0033      	movs	r3, r6
 80010d4:	e6fe      	b.n	8000ed4 <__aeabi_fsub+0x90>
 80010d6:	2501      	movs	r5, #1
 80010d8:	1b9b      	subs	r3, r3, r6
 80010da:	e718      	b.n	8000f0e <__aeabi_fsub+0xca>
 80010dc:	2e00      	cmp	r6, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_fsub+0x29e>
 80010e0:	e6f8      	b.n	8000ed4 <__aeabi_fsub+0x90>
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	03d2      	lsls	r2, r2, #15
 80010e6:	4297      	cmp	r7, r2
 80010e8:	d304      	bcc.n	80010f4 <__aeabi_fsub+0x2b0>
 80010ea:	4594      	cmp	ip, r2
 80010ec:	d202      	bcs.n	80010f4 <__aeabi_fsub+0x2b0>
 80010ee:	2401      	movs	r4, #1
 80010f0:	0033      	movs	r3, r6
 80010f2:	400c      	ands	r4, r1
 80010f4:	08db      	lsrs	r3, r3, #3
 80010f6:	e6f1      	b.n	8000edc <__aeabi_fsub+0x98>
 80010f8:	001a      	movs	r2, r3
 80010fa:	2520      	movs	r5, #32
 80010fc:	40ca      	lsrs	r2, r1
 80010fe:	1a69      	subs	r1, r5, r1
 8001100:	408b      	lsls	r3, r1
 8001102:	1e59      	subs	r1, r3, #1
 8001104:	418b      	sbcs	r3, r1
 8001106:	4313      	orrs	r3, r2
 8001108:	0005      	movs	r5, r0
 800110a:	199b      	adds	r3, r3, r6
 800110c:	e750      	b.n	8000fb0 <__aeabi_fsub+0x16c>
 800110e:	2e00      	cmp	r6, #0
 8001110:	d094      	beq.n	800103c <__aeabi_fsub+0x1f8>
 8001112:	2401      	movs	r4, #1
 8001114:	0033      	movs	r3, r6
 8001116:	400c      	ands	r4, r1
 8001118:	e73a      	b.n	8000f90 <__aeabi_fsub+0x14c>
 800111a:	000c      	movs	r4, r1
 800111c:	2501      	movs	r5, #1
 800111e:	1af3      	subs	r3, r6, r3
 8001120:	e6f5      	b.n	8000f0e <__aeabi_fsub+0xca>
 8001122:	0033      	movs	r3, r6
 8001124:	e734      	b.n	8000f90 <__aeabi_fsub+0x14c>
 8001126:	199b      	adds	r3, r3, r6
 8001128:	2200      	movs	r2, #0
 800112a:	0159      	lsls	r1, r3, #5
 800112c:	d5c1      	bpl.n	80010b2 <__aeabi_fsub+0x26e>
 800112e:	4a15      	ldr	r2, [pc, #84]	@ (8001184 <__aeabi_fsub+0x340>)
 8001130:	4013      	ands	r3, r2
 8001132:	08db      	lsrs	r3, r3, #3
 8001134:	2201      	movs	r2, #1
 8001136:	e72d      	b.n	8000f94 <__aeabi_fsub+0x150>
 8001138:	2a00      	cmp	r2, #0
 800113a:	d100      	bne.n	800113e <__aeabi_fsub+0x2fa>
 800113c:	e77e      	b.n	800103c <__aeabi_fsub+0x1f8>
 800113e:	0013      	movs	r3, r2
 8001140:	2200      	movs	r2, #0
 8001142:	08db      	lsrs	r3, r3, #3
 8001144:	e726      	b.n	8000f94 <__aeabi_fsub+0x150>
 8001146:	2380      	movs	r3, #128	@ 0x80
 8001148:	2400      	movs	r4, #0
 800114a:	20ff      	movs	r0, #255	@ 0xff
 800114c:	03db      	lsls	r3, r3, #15
 800114e:	e6f1      	b.n	8000f34 <__aeabi_fsub+0xf0>
 8001150:	2a00      	cmp	r2, #0
 8001152:	d100      	bne.n	8001156 <__aeabi_fsub+0x312>
 8001154:	e756      	b.n	8001004 <__aeabi_fsub+0x1c0>
 8001156:	1b47      	subs	r7, r0, r5
 8001158:	003a      	movs	r2, r7
 800115a:	2d00      	cmp	r5, #0
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x31c>
 800115e:	e730      	b.n	8000fc2 <__aeabi_fsub+0x17e>
 8001160:	2280      	movs	r2, #128	@ 0x80
 8001162:	04d2      	lsls	r2, r2, #19
 8001164:	000c      	movs	r4, r1
 8001166:	4313      	orrs	r3, r2
 8001168:	e77f      	b.n	800106a <__aeabi_fsub+0x226>
 800116a:	2a00      	cmp	r2, #0
 800116c:	d100      	bne.n	8001170 <__aeabi_fsub+0x32c>
 800116e:	e701      	b.n	8000f74 <__aeabi_fsub+0x130>
 8001170:	1b41      	subs	r1, r0, r5
 8001172:	2d00      	cmp	r5, #0
 8001174:	d101      	bne.n	800117a <__aeabi_fsub+0x336>
 8001176:	000a      	movs	r2, r1
 8001178:	e788      	b.n	800108c <__aeabi_fsub+0x248>
 800117a:	2280      	movs	r2, #128	@ 0x80
 800117c:	04d2      	lsls	r2, r2, #19
 800117e:	4313      	orrs	r3, r2
 8001180:	e78b      	b.n	800109a <__aeabi_fsub+0x256>
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	fbffffff 	.word	0xfbffffff
 8001188:	7dffffff 	.word	0x7dffffff

0800118c <__aeabi_f2iz>:
 800118c:	0241      	lsls	r1, r0, #9
 800118e:	0042      	lsls	r2, r0, #1
 8001190:	0fc3      	lsrs	r3, r0, #31
 8001192:	0a49      	lsrs	r1, r1, #9
 8001194:	2000      	movs	r0, #0
 8001196:	0e12      	lsrs	r2, r2, #24
 8001198:	2a7e      	cmp	r2, #126	@ 0x7e
 800119a:	dd03      	ble.n	80011a4 <__aeabi_f2iz+0x18>
 800119c:	2a9d      	cmp	r2, #157	@ 0x9d
 800119e:	dd02      	ble.n	80011a6 <__aeabi_f2iz+0x1a>
 80011a0:	4a09      	ldr	r2, [pc, #36]	@ (80011c8 <__aeabi_f2iz+0x3c>)
 80011a2:	1898      	adds	r0, r3, r2
 80011a4:	4770      	bx	lr
 80011a6:	2080      	movs	r0, #128	@ 0x80
 80011a8:	0400      	lsls	r0, r0, #16
 80011aa:	4301      	orrs	r1, r0
 80011ac:	2a95      	cmp	r2, #149	@ 0x95
 80011ae:	dc07      	bgt.n	80011c0 <__aeabi_f2iz+0x34>
 80011b0:	2096      	movs	r0, #150	@ 0x96
 80011b2:	1a82      	subs	r2, r0, r2
 80011b4:	40d1      	lsrs	r1, r2
 80011b6:	4248      	negs	r0, r1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f3      	bne.n	80011a4 <__aeabi_f2iz+0x18>
 80011bc:	0008      	movs	r0, r1
 80011be:	e7f1      	b.n	80011a4 <__aeabi_f2iz+0x18>
 80011c0:	3a96      	subs	r2, #150	@ 0x96
 80011c2:	4091      	lsls	r1, r2
 80011c4:	e7f7      	b.n	80011b6 <__aeabi_f2iz+0x2a>
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	7fffffff 	.word	0x7fffffff

080011cc <__aeabi_ui2f>:
 80011cc:	b570      	push	{r4, r5, r6, lr}
 80011ce:	1e04      	subs	r4, r0, #0
 80011d0:	d00e      	beq.n	80011f0 <__aeabi_ui2f+0x24>
 80011d2:	f001 fc9f 	bl	8002b14 <__clzsi2>
 80011d6:	239e      	movs	r3, #158	@ 0x9e
 80011d8:	0001      	movs	r1, r0
 80011da:	1a1b      	subs	r3, r3, r0
 80011dc:	2b96      	cmp	r3, #150	@ 0x96
 80011de:	dc0c      	bgt.n	80011fa <__aeabi_ui2f+0x2e>
 80011e0:	2808      	cmp	r0, #8
 80011e2:	d02f      	beq.n	8001244 <__aeabi_ui2f+0x78>
 80011e4:	3908      	subs	r1, #8
 80011e6:	408c      	lsls	r4, r1
 80011e8:	0264      	lsls	r4, r4, #9
 80011ea:	0a64      	lsrs	r4, r4, #9
 80011ec:	b2d8      	uxtb	r0, r3
 80011ee:	e001      	b.n	80011f4 <__aeabi_ui2f+0x28>
 80011f0:	2000      	movs	r0, #0
 80011f2:	2400      	movs	r4, #0
 80011f4:	05c0      	lsls	r0, r0, #23
 80011f6:	4320      	orrs	r0, r4
 80011f8:	bd70      	pop	{r4, r5, r6, pc}
 80011fa:	2b99      	cmp	r3, #153	@ 0x99
 80011fc:	dc16      	bgt.n	800122c <__aeabi_ui2f+0x60>
 80011fe:	1f42      	subs	r2, r0, #5
 8001200:	2805      	cmp	r0, #5
 8001202:	d000      	beq.n	8001206 <__aeabi_ui2f+0x3a>
 8001204:	4094      	lsls	r4, r2
 8001206:	0022      	movs	r2, r4
 8001208:	4810      	ldr	r0, [pc, #64]	@ (800124c <__aeabi_ui2f+0x80>)
 800120a:	4002      	ands	r2, r0
 800120c:	0765      	lsls	r5, r4, #29
 800120e:	d009      	beq.n	8001224 <__aeabi_ui2f+0x58>
 8001210:	250f      	movs	r5, #15
 8001212:	402c      	ands	r4, r5
 8001214:	2c04      	cmp	r4, #4
 8001216:	d005      	beq.n	8001224 <__aeabi_ui2f+0x58>
 8001218:	3204      	adds	r2, #4
 800121a:	0154      	lsls	r4, r2, #5
 800121c:	d502      	bpl.n	8001224 <__aeabi_ui2f+0x58>
 800121e:	239f      	movs	r3, #159	@ 0x9f
 8001220:	4002      	ands	r2, r0
 8001222:	1a5b      	subs	r3, r3, r1
 8001224:	0192      	lsls	r2, r2, #6
 8001226:	0a54      	lsrs	r4, r2, #9
 8001228:	b2d8      	uxtb	r0, r3
 800122a:	e7e3      	b.n	80011f4 <__aeabi_ui2f+0x28>
 800122c:	0002      	movs	r2, r0
 800122e:	0020      	movs	r0, r4
 8001230:	321b      	adds	r2, #27
 8001232:	4090      	lsls	r0, r2
 8001234:	0002      	movs	r2, r0
 8001236:	1e50      	subs	r0, r2, #1
 8001238:	4182      	sbcs	r2, r0
 800123a:	2005      	movs	r0, #5
 800123c:	1a40      	subs	r0, r0, r1
 800123e:	40c4      	lsrs	r4, r0
 8001240:	4314      	orrs	r4, r2
 8001242:	e7e0      	b.n	8001206 <__aeabi_ui2f+0x3a>
 8001244:	0264      	lsls	r4, r4, #9
 8001246:	2096      	movs	r0, #150	@ 0x96
 8001248:	0a64      	lsrs	r4, r4, #9
 800124a:	e7d3      	b.n	80011f4 <__aeabi_ui2f+0x28>
 800124c:	fbffffff 	.word	0xfbffffff

08001250 <__aeabi_dadd>:
 8001250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001252:	4657      	mov	r7, sl
 8001254:	464e      	mov	r6, r9
 8001256:	4645      	mov	r5, r8
 8001258:	46de      	mov	lr, fp
 800125a:	b5e0      	push	{r5, r6, r7, lr}
 800125c:	b083      	sub	sp, #12
 800125e:	9000      	str	r0, [sp, #0]
 8001260:	9101      	str	r1, [sp, #4]
 8001262:	030c      	lsls	r4, r1, #12
 8001264:	004f      	lsls	r7, r1, #1
 8001266:	0fce      	lsrs	r6, r1, #31
 8001268:	0a61      	lsrs	r1, r4, #9
 800126a:	9c00      	ldr	r4, [sp, #0]
 800126c:	031d      	lsls	r5, r3, #12
 800126e:	0f64      	lsrs	r4, r4, #29
 8001270:	430c      	orrs	r4, r1
 8001272:	9900      	ldr	r1, [sp, #0]
 8001274:	9200      	str	r2, [sp, #0]
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	00c8      	lsls	r0, r1, #3
 800127a:	0059      	lsls	r1, r3, #1
 800127c:	0d4b      	lsrs	r3, r1, #21
 800127e:	4699      	mov	r9, r3
 8001280:	9a00      	ldr	r2, [sp, #0]
 8001282:	9b01      	ldr	r3, [sp, #4]
 8001284:	0a6d      	lsrs	r5, r5, #9
 8001286:	0fd9      	lsrs	r1, r3, #31
 8001288:	0f53      	lsrs	r3, r2, #29
 800128a:	432b      	orrs	r3, r5
 800128c:	469a      	mov	sl, r3
 800128e:	9b00      	ldr	r3, [sp, #0]
 8001290:	0d7f      	lsrs	r7, r7, #21
 8001292:	00da      	lsls	r2, r3, #3
 8001294:	4694      	mov	ip, r2
 8001296:	464a      	mov	r2, r9
 8001298:	46b0      	mov	r8, r6
 800129a:	1aba      	subs	r2, r7, r2
 800129c:	428e      	cmp	r6, r1
 800129e:	d100      	bne.n	80012a2 <__aeabi_dadd+0x52>
 80012a0:	e0b0      	b.n	8001404 <__aeabi_dadd+0x1b4>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	dc00      	bgt.n	80012a8 <__aeabi_dadd+0x58>
 80012a6:	e078      	b.n	800139a <__aeabi_dadd+0x14a>
 80012a8:	4649      	mov	r1, r9
 80012aa:	2900      	cmp	r1, #0
 80012ac:	d100      	bne.n	80012b0 <__aeabi_dadd+0x60>
 80012ae:	e0e9      	b.n	8001484 <__aeabi_dadd+0x234>
 80012b0:	49c9      	ldr	r1, [pc, #804]	@ (80015d8 <__aeabi_dadd+0x388>)
 80012b2:	428f      	cmp	r7, r1
 80012b4:	d100      	bne.n	80012b8 <__aeabi_dadd+0x68>
 80012b6:	e195      	b.n	80015e4 <__aeabi_dadd+0x394>
 80012b8:	2501      	movs	r5, #1
 80012ba:	2a38      	cmp	r2, #56	@ 0x38
 80012bc:	dc16      	bgt.n	80012ec <__aeabi_dadd+0x9c>
 80012be:	2180      	movs	r1, #128	@ 0x80
 80012c0:	4653      	mov	r3, sl
 80012c2:	0409      	lsls	r1, r1, #16
 80012c4:	430b      	orrs	r3, r1
 80012c6:	469a      	mov	sl, r3
 80012c8:	2a1f      	cmp	r2, #31
 80012ca:	dd00      	ble.n	80012ce <__aeabi_dadd+0x7e>
 80012cc:	e1e7      	b.n	800169e <__aeabi_dadd+0x44e>
 80012ce:	2120      	movs	r1, #32
 80012d0:	4655      	mov	r5, sl
 80012d2:	1a8b      	subs	r3, r1, r2
 80012d4:	4661      	mov	r1, ip
 80012d6:	409d      	lsls	r5, r3
 80012d8:	40d1      	lsrs	r1, r2
 80012da:	430d      	orrs	r5, r1
 80012dc:	4661      	mov	r1, ip
 80012de:	4099      	lsls	r1, r3
 80012e0:	1e4b      	subs	r3, r1, #1
 80012e2:	4199      	sbcs	r1, r3
 80012e4:	4653      	mov	r3, sl
 80012e6:	40d3      	lsrs	r3, r2
 80012e8:	430d      	orrs	r5, r1
 80012ea:	1ae4      	subs	r4, r4, r3
 80012ec:	1b45      	subs	r5, r0, r5
 80012ee:	42a8      	cmp	r0, r5
 80012f0:	4180      	sbcs	r0, r0
 80012f2:	4240      	negs	r0, r0
 80012f4:	1a24      	subs	r4, r4, r0
 80012f6:	0223      	lsls	r3, r4, #8
 80012f8:	d400      	bmi.n	80012fc <__aeabi_dadd+0xac>
 80012fa:	e10f      	b.n	800151c <__aeabi_dadd+0x2cc>
 80012fc:	0264      	lsls	r4, r4, #9
 80012fe:	0a64      	lsrs	r4, r4, #9
 8001300:	2c00      	cmp	r4, #0
 8001302:	d100      	bne.n	8001306 <__aeabi_dadd+0xb6>
 8001304:	e139      	b.n	800157a <__aeabi_dadd+0x32a>
 8001306:	0020      	movs	r0, r4
 8001308:	f001 fc04 	bl	8002b14 <__clzsi2>
 800130c:	0003      	movs	r3, r0
 800130e:	3b08      	subs	r3, #8
 8001310:	2120      	movs	r1, #32
 8001312:	0028      	movs	r0, r5
 8001314:	1aca      	subs	r2, r1, r3
 8001316:	40d0      	lsrs	r0, r2
 8001318:	409c      	lsls	r4, r3
 800131a:	0002      	movs	r2, r0
 800131c:	409d      	lsls	r5, r3
 800131e:	4322      	orrs	r2, r4
 8001320:	429f      	cmp	r7, r3
 8001322:	dd00      	ble.n	8001326 <__aeabi_dadd+0xd6>
 8001324:	e173      	b.n	800160e <__aeabi_dadd+0x3be>
 8001326:	1bd8      	subs	r0, r3, r7
 8001328:	3001      	adds	r0, #1
 800132a:	1a09      	subs	r1, r1, r0
 800132c:	002c      	movs	r4, r5
 800132e:	408d      	lsls	r5, r1
 8001330:	40c4      	lsrs	r4, r0
 8001332:	1e6b      	subs	r3, r5, #1
 8001334:	419d      	sbcs	r5, r3
 8001336:	0013      	movs	r3, r2
 8001338:	40c2      	lsrs	r2, r0
 800133a:	408b      	lsls	r3, r1
 800133c:	4325      	orrs	r5, r4
 800133e:	2700      	movs	r7, #0
 8001340:	0014      	movs	r4, r2
 8001342:	431d      	orrs	r5, r3
 8001344:	076b      	lsls	r3, r5, #29
 8001346:	d009      	beq.n	800135c <__aeabi_dadd+0x10c>
 8001348:	230f      	movs	r3, #15
 800134a:	402b      	ands	r3, r5
 800134c:	2b04      	cmp	r3, #4
 800134e:	d005      	beq.n	800135c <__aeabi_dadd+0x10c>
 8001350:	1d2b      	adds	r3, r5, #4
 8001352:	42ab      	cmp	r3, r5
 8001354:	41ad      	sbcs	r5, r5
 8001356:	426d      	negs	r5, r5
 8001358:	1964      	adds	r4, r4, r5
 800135a:	001d      	movs	r5, r3
 800135c:	0223      	lsls	r3, r4, #8
 800135e:	d400      	bmi.n	8001362 <__aeabi_dadd+0x112>
 8001360:	e12d      	b.n	80015be <__aeabi_dadd+0x36e>
 8001362:	4a9d      	ldr	r2, [pc, #628]	@ (80015d8 <__aeabi_dadd+0x388>)
 8001364:	3701      	adds	r7, #1
 8001366:	4297      	cmp	r7, r2
 8001368:	d100      	bne.n	800136c <__aeabi_dadd+0x11c>
 800136a:	e0d3      	b.n	8001514 <__aeabi_dadd+0x2c4>
 800136c:	4646      	mov	r6, r8
 800136e:	499b      	ldr	r1, [pc, #620]	@ (80015dc <__aeabi_dadd+0x38c>)
 8001370:	08ed      	lsrs	r5, r5, #3
 8001372:	4021      	ands	r1, r4
 8001374:	074a      	lsls	r2, r1, #29
 8001376:	432a      	orrs	r2, r5
 8001378:	057c      	lsls	r4, r7, #21
 800137a:	024d      	lsls	r5, r1, #9
 800137c:	0b2d      	lsrs	r5, r5, #12
 800137e:	0d64      	lsrs	r4, r4, #21
 8001380:	0524      	lsls	r4, r4, #20
 8001382:	432c      	orrs	r4, r5
 8001384:	07f6      	lsls	r6, r6, #31
 8001386:	4334      	orrs	r4, r6
 8001388:	0010      	movs	r0, r2
 800138a:	0021      	movs	r1, r4
 800138c:	b003      	add	sp, #12
 800138e:	bcf0      	pop	{r4, r5, r6, r7}
 8001390:	46bb      	mov	fp, r7
 8001392:	46b2      	mov	sl, r6
 8001394:	46a9      	mov	r9, r5
 8001396:	46a0      	mov	r8, r4
 8001398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139a:	2a00      	cmp	r2, #0
 800139c:	d100      	bne.n	80013a0 <__aeabi_dadd+0x150>
 800139e:	e084      	b.n	80014aa <__aeabi_dadd+0x25a>
 80013a0:	464a      	mov	r2, r9
 80013a2:	1bd2      	subs	r2, r2, r7
 80013a4:	2f00      	cmp	r7, #0
 80013a6:	d000      	beq.n	80013aa <__aeabi_dadd+0x15a>
 80013a8:	e16d      	b.n	8001686 <__aeabi_dadd+0x436>
 80013aa:	0025      	movs	r5, r4
 80013ac:	4305      	orrs	r5, r0
 80013ae:	d100      	bne.n	80013b2 <__aeabi_dadd+0x162>
 80013b0:	e127      	b.n	8001602 <__aeabi_dadd+0x3b2>
 80013b2:	1e56      	subs	r6, r2, #1
 80013b4:	2a01      	cmp	r2, #1
 80013b6:	d100      	bne.n	80013ba <__aeabi_dadd+0x16a>
 80013b8:	e23b      	b.n	8001832 <__aeabi_dadd+0x5e2>
 80013ba:	4d87      	ldr	r5, [pc, #540]	@ (80015d8 <__aeabi_dadd+0x388>)
 80013bc:	42aa      	cmp	r2, r5
 80013be:	d100      	bne.n	80013c2 <__aeabi_dadd+0x172>
 80013c0:	e26a      	b.n	8001898 <__aeabi_dadd+0x648>
 80013c2:	2501      	movs	r5, #1
 80013c4:	2e38      	cmp	r6, #56	@ 0x38
 80013c6:	dc12      	bgt.n	80013ee <__aeabi_dadd+0x19e>
 80013c8:	0032      	movs	r2, r6
 80013ca:	2a1f      	cmp	r2, #31
 80013cc:	dd00      	ble.n	80013d0 <__aeabi_dadd+0x180>
 80013ce:	e1f8      	b.n	80017c2 <__aeabi_dadd+0x572>
 80013d0:	2620      	movs	r6, #32
 80013d2:	0025      	movs	r5, r4
 80013d4:	1ab6      	subs	r6, r6, r2
 80013d6:	0007      	movs	r7, r0
 80013d8:	4653      	mov	r3, sl
 80013da:	40b0      	lsls	r0, r6
 80013dc:	40d4      	lsrs	r4, r2
 80013de:	40b5      	lsls	r5, r6
 80013e0:	40d7      	lsrs	r7, r2
 80013e2:	1e46      	subs	r6, r0, #1
 80013e4:	41b0      	sbcs	r0, r6
 80013e6:	1b1b      	subs	r3, r3, r4
 80013e8:	469a      	mov	sl, r3
 80013ea:	433d      	orrs	r5, r7
 80013ec:	4305      	orrs	r5, r0
 80013ee:	4662      	mov	r2, ip
 80013f0:	1b55      	subs	r5, r2, r5
 80013f2:	45ac      	cmp	ip, r5
 80013f4:	4192      	sbcs	r2, r2
 80013f6:	4653      	mov	r3, sl
 80013f8:	4252      	negs	r2, r2
 80013fa:	000e      	movs	r6, r1
 80013fc:	464f      	mov	r7, r9
 80013fe:	4688      	mov	r8, r1
 8001400:	1a9c      	subs	r4, r3, r2
 8001402:	e778      	b.n	80012f6 <__aeabi_dadd+0xa6>
 8001404:	2a00      	cmp	r2, #0
 8001406:	dc00      	bgt.n	800140a <__aeabi_dadd+0x1ba>
 8001408:	e08e      	b.n	8001528 <__aeabi_dadd+0x2d8>
 800140a:	4649      	mov	r1, r9
 800140c:	2900      	cmp	r1, #0
 800140e:	d175      	bne.n	80014fc <__aeabi_dadd+0x2ac>
 8001410:	4661      	mov	r1, ip
 8001412:	4653      	mov	r3, sl
 8001414:	4319      	orrs	r1, r3
 8001416:	d100      	bne.n	800141a <__aeabi_dadd+0x1ca>
 8001418:	e0f6      	b.n	8001608 <__aeabi_dadd+0x3b8>
 800141a:	1e51      	subs	r1, r2, #1
 800141c:	2a01      	cmp	r2, #1
 800141e:	d100      	bne.n	8001422 <__aeabi_dadd+0x1d2>
 8001420:	e191      	b.n	8001746 <__aeabi_dadd+0x4f6>
 8001422:	4d6d      	ldr	r5, [pc, #436]	@ (80015d8 <__aeabi_dadd+0x388>)
 8001424:	42aa      	cmp	r2, r5
 8001426:	d100      	bne.n	800142a <__aeabi_dadd+0x1da>
 8001428:	e0dc      	b.n	80015e4 <__aeabi_dadd+0x394>
 800142a:	2501      	movs	r5, #1
 800142c:	2938      	cmp	r1, #56	@ 0x38
 800142e:	dc14      	bgt.n	800145a <__aeabi_dadd+0x20a>
 8001430:	000a      	movs	r2, r1
 8001432:	2a1f      	cmp	r2, #31
 8001434:	dd00      	ble.n	8001438 <__aeabi_dadd+0x1e8>
 8001436:	e1a2      	b.n	800177e <__aeabi_dadd+0x52e>
 8001438:	2120      	movs	r1, #32
 800143a:	4653      	mov	r3, sl
 800143c:	1a89      	subs	r1, r1, r2
 800143e:	408b      	lsls	r3, r1
 8001440:	001d      	movs	r5, r3
 8001442:	4663      	mov	r3, ip
 8001444:	40d3      	lsrs	r3, r2
 8001446:	431d      	orrs	r5, r3
 8001448:	4663      	mov	r3, ip
 800144a:	408b      	lsls	r3, r1
 800144c:	0019      	movs	r1, r3
 800144e:	1e4b      	subs	r3, r1, #1
 8001450:	4199      	sbcs	r1, r3
 8001452:	4653      	mov	r3, sl
 8001454:	40d3      	lsrs	r3, r2
 8001456:	430d      	orrs	r5, r1
 8001458:	18e4      	adds	r4, r4, r3
 800145a:	182d      	adds	r5, r5, r0
 800145c:	4285      	cmp	r5, r0
 800145e:	4180      	sbcs	r0, r0
 8001460:	4240      	negs	r0, r0
 8001462:	1824      	adds	r4, r4, r0
 8001464:	0223      	lsls	r3, r4, #8
 8001466:	d559      	bpl.n	800151c <__aeabi_dadd+0x2cc>
 8001468:	4b5b      	ldr	r3, [pc, #364]	@ (80015d8 <__aeabi_dadd+0x388>)
 800146a:	3701      	adds	r7, #1
 800146c:	429f      	cmp	r7, r3
 800146e:	d051      	beq.n	8001514 <__aeabi_dadd+0x2c4>
 8001470:	2101      	movs	r1, #1
 8001472:	4b5a      	ldr	r3, [pc, #360]	@ (80015dc <__aeabi_dadd+0x38c>)
 8001474:	086a      	lsrs	r2, r5, #1
 8001476:	401c      	ands	r4, r3
 8001478:	4029      	ands	r1, r5
 800147a:	430a      	orrs	r2, r1
 800147c:	07e5      	lsls	r5, r4, #31
 800147e:	4315      	orrs	r5, r2
 8001480:	0864      	lsrs	r4, r4, #1
 8001482:	e75f      	b.n	8001344 <__aeabi_dadd+0xf4>
 8001484:	4661      	mov	r1, ip
 8001486:	4653      	mov	r3, sl
 8001488:	4319      	orrs	r1, r3
 800148a:	d100      	bne.n	800148e <__aeabi_dadd+0x23e>
 800148c:	e0bc      	b.n	8001608 <__aeabi_dadd+0x3b8>
 800148e:	1e51      	subs	r1, r2, #1
 8001490:	2a01      	cmp	r2, #1
 8001492:	d100      	bne.n	8001496 <__aeabi_dadd+0x246>
 8001494:	e164      	b.n	8001760 <__aeabi_dadd+0x510>
 8001496:	4d50      	ldr	r5, [pc, #320]	@ (80015d8 <__aeabi_dadd+0x388>)
 8001498:	42aa      	cmp	r2, r5
 800149a:	d100      	bne.n	800149e <__aeabi_dadd+0x24e>
 800149c:	e16a      	b.n	8001774 <__aeabi_dadd+0x524>
 800149e:	2501      	movs	r5, #1
 80014a0:	2938      	cmp	r1, #56	@ 0x38
 80014a2:	dd00      	ble.n	80014a6 <__aeabi_dadd+0x256>
 80014a4:	e722      	b.n	80012ec <__aeabi_dadd+0x9c>
 80014a6:	000a      	movs	r2, r1
 80014a8:	e70e      	b.n	80012c8 <__aeabi_dadd+0x78>
 80014aa:	4a4d      	ldr	r2, [pc, #308]	@ (80015e0 <__aeabi_dadd+0x390>)
 80014ac:	1c7d      	adds	r5, r7, #1
 80014ae:	4215      	tst	r5, r2
 80014b0:	d000      	beq.n	80014b4 <__aeabi_dadd+0x264>
 80014b2:	e0d0      	b.n	8001656 <__aeabi_dadd+0x406>
 80014b4:	0025      	movs	r5, r4
 80014b6:	4662      	mov	r2, ip
 80014b8:	4653      	mov	r3, sl
 80014ba:	4305      	orrs	r5, r0
 80014bc:	431a      	orrs	r2, r3
 80014be:	2f00      	cmp	r7, #0
 80014c0:	d000      	beq.n	80014c4 <__aeabi_dadd+0x274>
 80014c2:	e137      	b.n	8001734 <__aeabi_dadd+0x4e4>
 80014c4:	2d00      	cmp	r5, #0
 80014c6:	d100      	bne.n	80014ca <__aeabi_dadd+0x27a>
 80014c8:	e1a8      	b.n	800181c <__aeabi_dadd+0x5cc>
 80014ca:	2a00      	cmp	r2, #0
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0x280>
 80014ce:	e16a      	b.n	80017a6 <__aeabi_dadd+0x556>
 80014d0:	4663      	mov	r3, ip
 80014d2:	1ac5      	subs	r5, r0, r3
 80014d4:	4653      	mov	r3, sl
 80014d6:	1ae2      	subs	r2, r4, r3
 80014d8:	42a8      	cmp	r0, r5
 80014da:	419b      	sbcs	r3, r3
 80014dc:	425b      	negs	r3, r3
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	021a      	lsls	r2, r3, #8
 80014e2:	d400      	bmi.n	80014e6 <__aeabi_dadd+0x296>
 80014e4:	e203      	b.n	80018ee <__aeabi_dadd+0x69e>
 80014e6:	4663      	mov	r3, ip
 80014e8:	1a1d      	subs	r5, r3, r0
 80014ea:	45ac      	cmp	ip, r5
 80014ec:	4192      	sbcs	r2, r2
 80014ee:	4653      	mov	r3, sl
 80014f0:	4252      	negs	r2, r2
 80014f2:	1b1c      	subs	r4, r3, r4
 80014f4:	000e      	movs	r6, r1
 80014f6:	4688      	mov	r8, r1
 80014f8:	1aa4      	subs	r4, r4, r2
 80014fa:	e723      	b.n	8001344 <__aeabi_dadd+0xf4>
 80014fc:	4936      	ldr	r1, [pc, #216]	@ (80015d8 <__aeabi_dadd+0x388>)
 80014fe:	428f      	cmp	r7, r1
 8001500:	d070      	beq.n	80015e4 <__aeabi_dadd+0x394>
 8001502:	2501      	movs	r5, #1
 8001504:	2a38      	cmp	r2, #56	@ 0x38
 8001506:	dca8      	bgt.n	800145a <__aeabi_dadd+0x20a>
 8001508:	2180      	movs	r1, #128	@ 0x80
 800150a:	4653      	mov	r3, sl
 800150c:	0409      	lsls	r1, r1, #16
 800150e:	430b      	orrs	r3, r1
 8001510:	469a      	mov	sl, r3
 8001512:	e78e      	b.n	8001432 <__aeabi_dadd+0x1e2>
 8001514:	003c      	movs	r4, r7
 8001516:	2500      	movs	r5, #0
 8001518:	2200      	movs	r2, #0
 800151a:	e731      	b.n	8001380 <__aeabi_dadd+0x130>
 800151c:	2307      	movs	r3, #7
 800151e:	402b      	ands	r3, r5
 8001520:	2b00      	cmp	r3, #0
 8001522:	d000      	beq.n	8001526 <__aeabi_dadd+0x2d6>
 8001524:	e710      	b.n	8001348 <__aeabi_dadd+0xf8>
 8001526:	e093      	b.n	8001650 <__aeabi_dadd+0x400>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d074      	beq.n	8001616 <__aeabi_dadd+0x3c6>
 800152c:	464a      	mov	r2, r9
 800152e:	1bd2      	subs	r2, r2, r7
 8001530:	2f00      	cmp	r7, #0
 8001532:	d100      	bne.n	8001536 <__aeabi_dadd+0x2e6>
 8001534:	e0c7      	b.n	80016c6 <__aeabi_dadd+0x476>
 8001536:	4928      	ldr	r1, [pc, #160]	@ (80015d8 <__aeabi_dadd+0x388>)
 8001538:	4589      	cmp	r9, r1
 800153a:	d100      	bne.n	800153e <__aeabi_dadd+0x2ee>
 800153c:	e185      	b.n	800184a <__aeabi_dadd+0x5fa>
 800153e:	2501      	movs	r5, #1
 8001540:	2a38      	cmp	r2, #56	@ 0x38
 8001542:	dc12      	bgt.n	800156a <__aeabi_dadd+0x31a>
 8001544:	2180      	movs	r1, #128	@ 0x80
 8001546:	0409      	lsls	r1, r1, #16
 8001548:	430c      	orrs	r4, r1
 800154a:	2a1f      	cmp	r2, #31
 800154c:	dd00      	ble.n	8001550 <__aeabi_dadd+0x300>
 800154e:	e1ab      	b.n	80018a8 <__aeabi_dadd+0x658>
 8001550:	2120      	movs	r1, #32
 8001552:	0025      	movs	r5, r4
 8001554:	1a89      	subs	r1, r1, r2
 8001556:	0007      	movs	r7, r0
 8001558:	4088      	lsls	r0, r1
 800155a:	408d      	lsls	r5, r1
 800155c:	40d7      	lsrs	r7, r2
 800155e:	1e41      	subs	r1, r0, #1
 8001560:	4188      	sbcs	r0, r1
 8001562:	40d4      	lsrs	r4, r2
 8001564:	433d      	orrs	r5, r7
 8001566:	4305      	orrs	r5, r0
 8001568:	44a2      	add	sl, r4
 800156a:	4465      	add	r5, ip
 800156c:	4565      	cmp	r5, ip
 800156e:	4192      	sbcs	r2, r2
 8001570:	4252      	negs	r2, r2
 8001572:	4452      	add	r2, sl
 8001574:	0014      	movs	r4, r2
 8001576:	464f      	mov	r7, r9
 8001578:	e774      	b.n	8001464 <__aeabi_dadd+0x214>
 800157a:	0028      	movs	r0, r5
 800157c:	f001 faca 	bl	8002b14 <__clzsi2>
 8001580:	0003      	movs	r3, r0
 8001582:	3318      	adds	r3, #24
 8001584:	2b1f      	cmp	r3, #31
 8001586:	dc00      	bgt.n	800158a <__aeabi_dadd+0x33a>
 8001588:	e6c2      	b.n	8001310 <__aeabi_dadd+0xc0>
 800158a:	002a      	movs	r2, r5
 800158c:	3808      	subs	r0, #8
 800158e:	4082      	lsls	r2, r0
 8001590:	429f      	cmp	r7, r3
 8001592:	dd00      	ble.n	8001596 <__aeabi_dadd+0x346>
 8001594:	e0a9      	b.n	80016ea <__aeabi_dadd+0x49a>
 8001596:	1bdb      	subs	r3, r3, r7
 8001598:	1c58      	adds	r0, r3, #1
 800159a:	281f      	cmp	r0, #31
 800159c:	dc00      	bgt.n	80015a0 <__aeabi_dadd+0x350>
 800159e:	e1ac      	b.n	80018fa <__aeabi_dadd+0x6aa>
 80015a0:	0015      	movs	r5, r2
 80015a2:	3b1f      	subs	r3, #31
 80015a4:	40dd      	lsrs	r5, r3
 80015a6:	2820      	cmp	r0, #32
 80015a8:	d005      	beq.n	80015b6 <__aeabi_dadd+0x366>
 80015aa:	2340      	movs	r3, #64	@ 0x40
 80015ac:	1a1b      	subs	r3, r3, r0
 80015ae:	409a      	lsls	r2, r3
 80015b0:	1e53      	subs	r3, r2, #1
 80015b2:	419a      	sbcs	r2, r3
 80015b4:	4315      	orrs	r5, r2
 80015b6:	2307      	movs	r3, #7
 80015b8:	2700      	movs	r7, #0
 80015ba:	402b      	ands	r3, r5
 80015bc:	e7b0      	b.n	8001520 <__aeabi_dadd+0x2d0>
 80015be:	08ed      	lsrs	r5, r5, #3
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <__aeabi_dadd+0x388>)
 80015c2:	0762      	lsls	r2, r4, #29
 80015c4:	432a      	orrs	r2, r5
 80015c6:	08e4      	lsrs	r4, r4, #3
 80015c8:	429f      	cmp	r7, r3
 80015ca:	d00f      	beq.n	80015ec <__aeabi_dadd+0x39c>
 80015cc:	0324      	lsls	r4, r4, #12
 80015ce:	0b25      	lsrs	r5, r4, #12
 80015d0:	057c      	lsls	r4, r7, #21
 80015d2:	0d64      	lsrs	r4, r4, #21
 80015d4:	e6d4      	b.n	8001380 <__aeabi_dadd+0x130>
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	000007ff 	.word	0x000007ff
 80015dc:	ff7fffff 	.word	0xff7fffff
 80015e0:	000007fe 	.word	0x000007fe
 80015e4:	08c0      	lsrs	r0, r0, #3
 80015e6:	0762      	lsls	r2, r4, #29
 80015e8:	4302      	orrs	r2, r0
 80015ea:	08e4      	lsrs	r4, r4, #3
 80015ec:	0013      	movs	r3, r2
 80015ee:	4323      	orrs	r3, r4
 80015f0:	d100      	bne.n	80015f4 <__aeabi_dadd+0x3a4>
 80015f2:	e186      	b.n	8001902 <__aeabi_dadd+0x6b2>
 80015f4:	2580      	movs	r5, #128	@ 0x80
 80015f6:	032d      	lsls	r5, r5, #12
 80015f8:	4325      	orrs	r5, r4
 80015fa:	032d      	lsls	r5, r5, #12
 80015fc:	4cc3      	ldr	r4, [pc, #780]	@ (800190c <__aeabi_dadd+0x6bc>)
 80015fe:	0b2d      	lsrs	r5, r5, #12
 8001600:	e6be      	b.n	8001380 <__aeabi_dadd+0x130>
 8001602:	4660      	mov	r0, ip
 8001604:	4654      	mov	r4, sl
 8001606:	000e      	movs	r6, r1
 8001608:	0017      	movs	r7, r2
 800160a:	08c5      	lsrs	r5, r0, #3
 800160c:	e7d8      	b.n	80015c0 <__aeabi_dadd+0x370>
 800160e:	4cc0      	ldr	r4, [pc, #768]	@ (8001910 <__aeabi_dadd+0x6c0>)
 8001610:	1aff      	subs	r7, r7, r3
 8001612:	4014      	ands	r4, r2
 8001614:	e696      	b.n	8001344 <__aeabi_dadd+0xf4>
 8001616:	4abf      	ldr	r2, [pc, #764]	@ (8001914 <__aeabi_dadd+0x6c4>)
 8001618:	1c79      	adds	r1, r7, #1
 800161a:	4211      	tst	r1, r2
 800161c:	d16b      	bne.n	80016f6 <__aeabi_dadd+0x4a6>
 800161e:	0022      	movs	r2, r4
 8001620:	4302      	orrs	r2, r0
 8001622:	2f00      	cmp	r7, #0
 8001624:	d000      	beq.n	8001628 <__aeabi_dadd+0x3d8>
 8001626:	e0db      	b.n	80017e0 <__aeabi_dadd+0x590>
 8001628:	2a00      	cmp	r2, #0
 800162a:	d100      	bne.n	800162e <__aeabi_dadd+0x3de>
 800162c:	e12d      	b.n	800188a <__aeabi_dadd+0x63a>
 800162e:	4662      	mov	r2, ip
 8001630:	4653      	mov	r3, sl
 8001632:	431a      	orrs	r2, r3
 8001634:	d100      	bne.n	8001638 <__aeabi_dadd+0x3e8>
 8001636:	e0b6      	b.n	80017a6 <__aeabi_dadd+0x556>
 8001638:	4663      	mov	r3, ip
 800163a:	18c5      	adds	r5, r0, r3
 800163c:	4285      	cmp	r5, r0
 800163e:	4180      	sbcs	r0, r0
 8001640:	4454      	add	r4, sl
 8001642:	4240      	negs	r0, r0
 8001644:	1824      	adds	r4, r4, r0
 8001646:	0223      	lsls	r3, r4, #8
 8001648:	d502      	bpl.n	8001650 <__aeabi_dadd+0x400>
 800164a:	000f      	movs	r7, r1
 800164c:	4bb0      	ldr	r3, [pc, #704]	@ (8001910 <__aeabi_dadd+0x6c0>)
 800164e:	401c      	ands	r4, r3
 8001650:	003a      	movs	r2, r7
 8001652:	0028      	movs	r0, r5
 8001654:	e7d8      	b.n	8001608 <__aeabi_dadd+0x3b8>
 8001656:	4662      	mov	r2, ip
 8001658:	1a85      	subs	r5, r0, r2
 800165a:	42a8      	cmp	r0, r5
 800165c:	4192      	sbcs	r2, r2
 800165e:	4653      	mov	r3, sl
 8001660:	4252      	negs	r2, r2
 8001662:	4691      	mov	r9, r2
 8001664:	1ae3      	subs	r3, r4, r3
 8001666:	001a      	movs	r2, r3
 8001668:	464b      	mov	r3, r9
 800166a:	1ad2      	subs	r2, r2, r3
 800166c:	0013      	movs	r3, r2
 800166e:	4691      	mov	r9, r2
 8001670:	021a      	lsls	r2, r3, #8
 8001672:	d454      	bmi.n	800171e <__aeabi_dadd+0x4ce>
 8001674:	464a      	mov	r2, r9
 8001676:	464c      	mov	r4, r9
 8001678:	432a      	orrs	r2, r5
 800167a:	d000      	beq.n	800167e <__aeabi_dadd+0x42e>
 800167c:	e640      	b.n	8001300 <__aeabi_dadd+0xb0>
 800167e:	2600      	movs	r6, #0
 8001680:	2400      	movs	r4, #0
 8001682:	2500      	movs	r5, #0
 8001684:	e67c      	b.n	8001380 <__aeabi_dadd+0x130>
 8001686:	4da1      	ldr	r5, [pc, #644]	@ (800190c <__aeabi_dadd+0x6bc>)
 8001688:	45a9      	cmp	r9, r5
 800168a:	d100      	bne.n	800168e <__aeabi_dadd+0x43e>
 800168c:	e090      	b.n	80017b0 <__aeabi_dadd+0x560>
 800168e:	2501      	movs	r5, #1
 8001690:	2a38      	cmp	r2, #56	@ 0x38
 8001692:	dd00      	ble.n	8001696 <__aeabi_dadd+0x446>
 8001694:	e6ab      	b.n	80013ee <__aeabi_dadd+0x19e>
 8001696:	2580      	movs	r5, #128	@ 0x80
 8001698:	042d      	lsls	r5, r5, #16
 800169a:	432c      	orrs	r4, r5
 800169c:	e695      	b.n	80013ca <__aeabi_dadd+0x17a>
 800169e:	0011      	movs	r1, r2
 80016a0:	4655      	mov	r5, sl
 80016a2:	3920      	subs	r1, #32
 80016a4:	40cd      	lsrs	r5, r1
 80016a6:	46a9      	mov	r9, r5
 80016a8:	2a20      	cmp	r2, #32
 80016aa:	d006      	beq.n	80016ba <__aeabi_dadd+0x46a>
 80016ac:	2140      	movs	r1, #64	@ 0x40
 80016ae:	4653      	mov	r3, sl
 80016b0:	1a8a      	subs	r2, r1, r2
 80016b2:	4093      	lsls	r3, r2
 80016b4:	4662      	mov	r2, ip
 80016b6:	431a      	orrs	r2, r3
 80016b8:	4694      	mov	ip, r2
 80016ba:	4665      	mov	r5, ip
 80016bc:	1e6b      	subs	r3, r5, #1
 80016be:	419d      	sbcs	r5, r3
 80016c0:	464b      	mov	r3, r9
 80016c2:	431d      	orrs	r5, r3
 80016c4:	e612      	b.n	80012ec <__aeabi_dadd+0x9c>
 80016c6:	0021      	movs	r1, r4
 80016c8:	4301      	orrs	r1, r0
 80016ca:	d100      	bne.n	80016ce <__aeabi_dadd+0x47e>
 80016cc:	e0c4      	b.n	8001858 <__aeabi_dadd+0x608>
 80016ce:	1e51      	subs	r1, r2, #1
 80016d0:	2a01      	cmp	r2, #1
 80016d2:	d100      	bne.n	80016d6 <__aeabi_dadd+0x486>
 80016d4:	e0fb      	b.n	80018ce <__aeabi_dadd+0x67e>
 80016d6:	4d8d      	ldr	r5, [pc, #564]	@ (800190c <__aeabi_dadd+0x6bc>)
 80016d8:	42aa      	cmp	r2, r5
 80016da:	d100      	bne.n	80016de <__aeabi_dadd+0x48e>
 80016dc:	e0b5      	b.n	800184a <__aeabi_dadd+0x5fa>
 80016de:	2501      	movs	r5, #1
 80016e0:	2938      	cmp	r1, #56	@ 0x38
 80016e2:	dd00      	ble.n	80016e6 <__aeabi_dadd+0x496>
 80016e4:	e741      	b.n	800156a <__aeabi_dadd+0x31a>
 80016e6:	000a      	movs	r2, r1
 80016e8:	e72f      	b.n	800154a <__aeabi_dadd+0x2fa>
 80016ea:	4c89      	ldr	r4, [pc, #548]	@ (8001910 <__aeabi_dadd+0x6c0>)
 80016ec:	1aff      	subs	r7, r7, r3
 80016ee:	4014      	ands	r4, r2
 80016f0:	0762      	lsls	r2, r4, #29
 80016f2:	08e4      	lsrs	r4, r4, #3
 80016f4:	e76a      	b.n	80015cc <__aeabi_dadd+0x37c>
 80016f6:	4a85      	ldr	r2, [pc, #532]	@ (800190c <__aeabi_dadd+0x6bc>)
 80016f8:	4291      	cmp	r1, r2
 80016fa:	d100      	bne.n	80016fe <__aeabi_dadd+0x4ae>
 80016fc:	e0e3      	b.n	80018c6 <__aeabi_dadd+0x676>
 80016fe:	4663      	mov	r3, ip
 8001700:	18c2      	adds	r2, r0, r3
 8001702:	4282      	cmp	r2, r0
 8001704:	4180      	sbcs	r0, r0
 8001706:	0023      	movs	r3, r4
 8001708:	4240      	negs	r0, r0
 800170a:	4453      	add	r3, sl
 800170c:	181b      	adds	r3, r3, r0
 800170e:	07dd      	lsls	r5, r3, #31
 8001710:	085c      	lsrs	r4, r3, #1
 8001712:	2307      	movs	r3, #7
 8001714:	0852      	lsrs	r2, r2, #1
 8001716:	4315      	orrs	r5, r2
 8001718:	000f      	movs	r7, r1
 800171a:	402b      	ands	r3, r5
 800171c:	e700      	b.n	8001520 <__aeabi_dadd+0x2d0>
 800171e:	4663      	mov	r3, ip
 8001720:	1a1d      	subs	r5, r3, r0
 8001722:	45ac      	cmp	ip, r5
 8001724:	4192      	sbcs	r2, r2
 8001726:	4653      	mov	r3, sl
 8001728:	4252      	negs	r2, r2
 800172a:	1b1c      	subs	r4, r3, r4
 800172c:	000e      	movs	r6, r1
 800172e:	4688      	mov	r8, r1
 8001730:	1aa4      	subs	r4, r4, r2
 8001732:	e5e5      	b.n	8001300 <__aeabi_dadd+0xb0>
 8001734:	2d00      	cmp	r5, #0
 8001736:	d000      	beq.n	800173a <__aeabi_dadd+0x4ea>
 8001738:	e091      	b.n	800185e <__aeabi_dadd+0x60e>
 800173a:	2a00      	cmp	r2, #0
 800173c:	d138      	bne.n	80017b0 <__aeabi_dadd+0x560>
 800173e:	2480      	movs	r4, #128	@ 0x80
 8001740:	2600      	movs	r6, #0
 8001742:	0324      	lsls	r4, r4, #12
 8001744:	e756      	b.n	80015f4 <__aeabi_dadd+0x3a4>
 8001746:	4663      	mov	r3, ip
 8001748:	18c5      	adds	r5, r0, r3
 800174a:	4285      	cmp	r5, r0
 800174c:	4180      	sbcs	r0, r0
 800174e:	4454      	add	r4, sl
 8001750:	4240      	negs	r0, r0
 8001752:	1824      	adds	r4, r4, r0
 8001754:	2701      	movs	r7, #1
 8001756:	0223      	lsls	r3, r4, #8
 8001758:	d400      	bmi.n	800175c <__aeabi_dadd+0x50c>
 800175a:	e6df      	b.n	800151c <__aeabi_dadd+0x2cc>
 800175c:	2702      	movs	r7, #2
 800175e:	e687      	b.n	8001470 <__aeabi_dadd+0x220>
 8001760:	4663      	mov	r3, ip
 8001762:	1ac5      	subs	r5, r0, r3
 8001764:	42a8      	cmp	r0, r5
 8001766:	4180      	sbcs	r0, r0
 8001768:	4653      	mov	r3, sl
 800176a:	4240      	negs	r0, r0
 800176c:	1ae4      	subs	r4, r4, r3
 800176e:	2701      	movs	r7, #1
 8001770:	1a24      	subs	r4, r4, r0
 8001772:	e5c0      	b.n	80012f6 <__aeabi_dadd+0xa6>
 8001774:	0762      	lsls	r2, r4, #29
 8001776:	08c0      	lsrs	r0, r0, #3
 8001778:	4302      	orrs	r2, r0
 800177a:	08e4      	lsrs	r4, r4, #3
 800177c:	e736      	b.n	80015ec <__aeabi_dadd+0x39c>
 800177e:	0011      	movs	r1, r2
 8001780:	4653      	mov	r3, sl
 8001782:	3920      	subs	r1, #32
 8001784:	40cb      	lsrs	r3, r1
 8001786:	4699      	mov	r9, r3
 8001788:	2a20      	cmp	r2, #32
 800178a:	d006      	beq.n	800179a <__aeabi_dadd+0x54a>
 800178c:	2140      	movs	r1, #64	@ 0x40
 800178e:	4653      	mov	r3, sl
 8001790:	1a8a      	subs	r2, r1, r2
 8001792:	4093      	lsls	r3, r2
 8001794:	4662      	mov	r2, ip
 8001796:	431a      	orrs	r2, r3
 8001798:	4694      	mov	ip, r2
 800179a:	4665      	mov	r5, ip
 800179c:	1e6b      	subs	r3, r5, #1
 800179e:	419d      	sbcs	r5, r3
 80017a0:	464b      	mov	r3, r9
 80017a2:	431d      	orrs	r5, r3
 80017a4:	e659      	b.n	800145a <__aeabi_dadd+0x20a>
 80017a6:	0762      	lsls	r2, r4, #29
 80017a8:	08c0      	lsrs	r0, r0, #3
 80017aa:	4302      	orrs	r2, r0
 80017ac:	08e4      	lsrs	r4, r4, #3
 80017ae:	e70d      	b.n	80015cc <__aeabi_dadd+0x37c>
 80017b0:	4653      	mov	r3, sl
 80017b2:	075a      	lsls	r2, r3, #29
 80017b4:	4663      	mov	r3, ip
 80017b6:	08d8      	lsrs	r0, r3, #3
 80017b8:	4653      	mov	r3, sl
 80017ba:	000e      	movs	r6, r1
 80017bc:	4302      	orrs	r2, r0
 80017be:	08dc      	lsrs	r4, r3, #3
 80017c0:	e714      	b.n	80015ec <__aeabi_dadd+0x39c>
 80017c2:	0015      	movs	r5, r2
 80017c4:	0026      	movs	r6, r4
 80017c6:	3d20      	subs	r5, #32
 80017c8:	40ee      	lsrs	r6, r5
 80017ca:	2a20      	cmp	r2, #32
 80017cc:	d003      	beq.n	80017d6 <__aeabi_dadd+0x586>
 80017ce:	2540      	movs	r5, #64	@ 0x40
 80017d0:	1aaa      	subs	r2, r5, r2
 80017d2:	4094      	lsls	r4, r2
 80017d4:	4320      	orrs	r0, r4
 80017d6:	1e42      	subs	r2, r0, #1
 80017d8:	4190      	sbcs	r0, r2
 80017da:	0005      	movs	r5, r0
 80017dc:	4335      	orrs	r5, r6
 80017de:	e606      	b.n	80013ee <__aeabi_dadd+0x19e>
 80017e0:	2a00      	cmp	r2, #0
 80017e2:	d07c      	beq.n	80018de <__aeabi_dadd+0x68e>
 80017e4:	4662      	mov	r2, ip
 80017e6:	4653      	mov	r3, sl
 80017e8:	08c0      	lsrs	r0, r0, #3
 80017ea:	431a      	orrs	r2, r3
 80017ec:	d100      	bne.n	80017f0 <__aeabi_dadd+0x5a0>
 80017ee:	e6fa      	b.n	80015e6 <__aeabi_dadd+0x396>
 80017f0:	0762      	lsls	r2, r4, #29
 80017f2:	4310      	orrs	r0, r2
 80017f4:	2280      	movs	r2, #128	@ 0x80
 80017f6:	08e4      	lsrs	r4, r4, #3
 80017f8:	0312      	lsls	r2, r2, #12
 80017fa:	4214      	tst	r4, r2
 80017fc:	d008      	beq.n	8001810 <__aeabi_dadd+0x5c0>
 80017fe:	08d9      	lsrs	r1, r3, #3
 8001800:	4211      	tst	r1, r2
 8001802:	d105      	bne.n	8001810 <__aeabi_dadd+0x5c0>
 8001804:	4663      	mov	r3, ip
 8001806:	08d8      	lsrs	r0, r3, #3
 8001808:	4653      	mov	r3, sl
 800180a:	000c      	movs	r4, r1
 800180c:	075b      	lsls	r3, r3, #29
 800180e:	4318      	orrs	r0, r3
 8001810:	0f42      	lsrs	r2, r0, #29
 8001812:	00c0      	lsls	r0, r0, #3
 8001814:	08c0      	lsrs	r0, r0, #3
 8001816:	0752      	lsls	r2, r2, #29
 8001818:	4302      	orrs	r2, r0
 800181a:	e6e7      	b.n	80015ec <__aeabi_dadd+0x39c>
 800181c:	2a00      	cmp	r2, #0
 800181e:	d100      	bne.n	8001822 <__aeabi_dadd+0x5d2>
 8001820:	e72d      	b.n	800167e <__aeabi_dadd+0x42e>
 8001822:	4663      	mov	r3, ip
 8001824:	08d8      	lsrs	r0, r3, #3
 8001826:	4653      	mov	r3, sl
 8001828:	075a      	lsls	r2, r3, #29
 800182a:	000e      	movs	r6, r1
 800182c:	4302      	orrs	r2, r0
 800182e:	08dc      	lsrs	r4, r3, #3
 8001830:	e6cc      	b.n	80015cc <__aeabi_dadd+0x37c>
 8001832:	4663      	mov	r3, ip
 8001834:	1a1d      	subs	r5, r3, r0
 8001836:	45ac      	cmp	ip, r5
 8001838:	4192      	sbcs	r2, r2
 800183a:	4653      	mov	r3, sl
 800183c:	4252      	negs	r2, r2
 800183e:	1b1c      	subs	r4, r3, r4
 8001840:	000e      	movs	r6, r1
 8001842:	4688      	mov	r8, r1
 8001844:	1aa4      	subs	r4, r4, r2
 8001846:	3701      	adds	r7, #1
 8001848:	e555      	b.n	80012f6 <__aeabi_dadd+0xa6>
 800184a:	4663      	mov	r3, ip
 800184c:	08d9      	lsrs	r1, r3, #3
 800184e:	4653      	mov	r3, sl
 8001850:	075a      	lsls	r2, r3, #29
 8001852:	430a      	orrs	r2, r1
 8001854:	08dc      	lsrs	r4, r3, #3
 8001856:	e6c9      	b.n	80015ec <__aeabi_dadd+0x39c>
 8001858:	4660      	mov	r0, ip
 800185a:	4654      	mov	r4, sl
 800185c:	e6d4      	b.n	8001608 <__aeabi_dadd+0x3b8>
 800185e:	08c0      	lsrs	r0, r0, #3
 8001860:	2a00      	cmp	r2, #0
 8001862:	d100      	bne.n	8001866 <__aeabi_dadd+0x616>
 8001864:	e6bf      	b.n	80015e6 <__aeabi_dadd+0x396>
 8001866:	0762      	lsls	r2, r4, #29
 8001868:	4310      	orrs	r0, r2
 800186a:	2280      	movs	r2, #128	@ 0x80
 800186c:	08e4      	lsrs	r4, r4, #3
 800186e:	0312      	lsls	r2, r2, #12
 8001870:	4214      	tst	r4, r2
 8001872:	d0cd      	beq.n	8001810 <__aeabi_dadd+0x5c0>
 8001874:	08dd      	lsrs	r5, r3, #3
 8001876:	4215      	tst	r5, r2
 8001878:	d1ca      	bne.n	8001810 <__aeabi_dadd+0x5c0>
 800187a:	4663      	mov	r3, ip
 800187c:	08d8      	lsrs	r0, r3, #3
 800187e:	4653      	mov	r3, sl
 8001880:	075b      	lsls	r3, r3, #29
 8001882:	000e      	movs	r6, r1
 8001884:	002c      	movs	r4, r5
 8001886:	4318      	orrs	r0, r3
 8001888:	e7c2      	b.n	8001810 <__aeabi_dadd+0x5c0>
 800188a:	4663      	mov	r3, ip
 800188c:	08d9      	lsrs	r1, r3, #3
 800188e:	4653      	mov	r3, sl
 8001890:	075a      	lsls	r2, r3, #29
 8001892:	430a      	orrs	r2, r1
 8001894:	08dc      	lsrs	r4, r3, #3
 8001896:	e699      	b.n	80015cc <__aeabi_dadd+0x37c>
 8001898:	4663      	mov	r3, ip
 800189a:	08d8      	lsrs	r0, r3, #3
 800189c:	4653      	mov	r3, sl
 800189e:	075a      	lsls	r2, r3, #29
 80018a0:	000e      	movs	r6, r1
 80018a2:	4302      	orrs	r2, r0
 80018a4:	08dc      	lsrs	r4, r3, #3
 80018a6:	e6a1      	b.n	80015ec <__aeabi_dadd+0x39c>
 80018a8:	0011      	movs	r1, r2
 80018aa:	0027      	movs	r7, r4
 80018ac:	3920      	subs	r1, #32
 80018ae:	40cf      	lsrs	r7, r1
 80018b0:	2a20      	cmp	r2, #32
 80018b2:	d003      	beq.n	80018bc <__aeabi_dadd+0x66c>
 80018b4:	2140      	movs	r1, #64	@ 0x40
 80018b6:	1a8a      	subs	r2, r1, r2
 80018b8:	4094      	lsls	r4, r2
 80018ba:	4320      	orrs	r0, r4
 80018bc:	1e42      	subs	r2, r0, #1
 80018be:	4190      	sbcs	r0, r2
 80018c0:	0005      	movs	r5, r0
 80018c2:	433d      	orrs	r5, r7
 80018c4:	e651      	b.n	800156a <__aeabi_dadd+0x31a>
 80018c6:	000c      	movs	r4, r1
 80018c8:	2500      	movs	r5, #0
 80018ca:	2200      	movs	r2, #0
 80018cc:	e558      	b.n	8001380 <__aeabi_dadd+0x130>
 80018ce:	4460      	add	r0, ip
 80018d0:	4560      	cmp	r0, ip
 80018d2:	4192      	sbcs	r2, r2
 80018d4:	4454      	add	r4, sl
 80018d6:	4252      	negs	r2, r2
 80018d8:	0005      	movs	r5, r0
 80018da:	18a4      	adds	r4, r4, r2
 80018dc:	e73a      	b.n	8001754 <__aeabi_dadd+0x504>
 80018de:	4653      	mov	r3, sl
 80018e0:	075a      	lsls	r2, r3, #29
 80018e2:	4663      	mov	r3, ip
 80018e4:	08d9      	lsrs	r1, r3, #3
 80018e6:	4653      	mov	r3, sl
 80018e8:	430a      	orrs	r2, r1
 80018ea:	08dc      	lsrs	r4, r3, #3
 80018ec:	e67e      	b.n	80015ec <__aeabi_dadd+0x39c>
 80018ee:	001a      	movs	r2, r3
 80018f0:	001c      	movs	r4, r3
 80018f2:	432a      	orrs	r2, r5
 80018f4:	d000      	beq.n	80018f8 <__aeabi_dadd+0x6a8>
 80018f6:	e6ab      	b.n	8001650 <__aeabi_dadd+0x400>
 80018f8:	e6c1      	b.n	800167e <__aeabi_dadd+0x42e>
 80018fa:	2120      	movs	r1, #32
 80018fc:	2500      	movs	r5, #0
 80018fe:	1a09      	subs	r1, r1, r0
 8001900:	e519      	b.n	8001336 <__aeabi_dadd+0xe6>
 8001902:	2200      	movs	r2, #0
 8001904:	2500      	movs	r5, #0
 8001906:	4c01      	ldr	r4, [pc, #4]	@ (800190c <__aeabi_dadd+0x6bc>)
 8001908:	e53a      	b.n	8001380 <__aeabi_dadd+0x130>
 800190a:	46c0      	nop			@ (mov r8, r8)
 800190c:	000007ff 	.word	0x000007ff
 8001910:	ff7fffff 	.word	0xff7fffff
 8001914:	000007fe 	.word	0x000007fe

08001918 <__eqdf2>:
 8001918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800191a:	4657      	mov	r7, sl
 800191c:	46de      	mov	lr, fp
 800191e:	464e      	mov	r6, r9
 8001920:	4645      	mov	r5, r8
 8001922:	b5e0      	push	{r5, r6, r7, lr}
 8001924:	000d      	movs	r5, r1
 8001926:	0004      	movs	r4, r0
 8001928:	0fe8      	lsrs	r0, r5, #31
 800192a:	4683      	mov	fp, r0
 800192c:	0309      	lsls	r1, r1, #12
 800192e:	0fd8      	lsrs	r0, r3, #31
 8001930:	0b09      	lsrs	r1, r1, #12
 8001932:	4682      	mov	sl, r0
 8001934:	4819      	ldr	r0, [pc, #100]	@ (800199c <__eqdf2+0x84>)
 8001936:	468c      	mov	ip, r1
 8001938:	031f      	lsls	r7, r3, #12
 800193a:	0069      	lsls	r1, r5, #1
 800193c:	005e      	lsls	r6, r3, #1
 800193e:	0d49      	lsrs	r1, r1, #21
 8001940:	0b3f      	lsrs	r7, r7, #12
 8001942:	0d76      	lsrs	r6, r6, #21
 8001944:	4281      	cmp	r1, r0
 8001946:	d018      	beq.n	800197a <__eqdf2+0x62>
 8001948:	4286      	cmp	r6, r0
 800194a:	d00f      	beq.n	800196c <__eqdf2+0x54>
 800194c:	2001      	movs	r0, #1
 800194e:	42b1      	cmp	r1, r6
 8001950:	d10d      	bne.n	800196e <__eqdf2+0x56>
 8001952:	45bc      	cmp	ip, r7
 8001954:	d10b      	bne.n	800196e <__eqdf2+0x56>
 8001956:	4294      	cmp	r4, r2
 8001958:	d109      	bne.n	800196e <__eqdf2+0x56>
 800195a:	45d3      	cmp	fp, sl
 800195c:	d01c      	beq.n	8001998 <__eqdf2+0x80>
 800195e:	2900      	cmp	r1, #0
 8001960:	d105      	bne.n	800196e <__eqdf2+0x56>
 8001962:	4660      	mov	r0, ip
 8001964:	4320      	orrs	r0, r4
 8001966:	1e43      	subs	r3, r0, #1
 8001968:	4198      	sbcs	r0, r3
 800196a:	e000      	b.n	800196e <__eqdf2+0x56>
 800196c:	2001      	movs	r0, #1
 800196e:	bcf0      	pop	{r4, r5, r6, r7}
 8001970:	46bb      	mov	fp, r7
 8001972:	46b2      	mov	sl, r6
 8001974:	46a9      	mov	r9, r5
 8001976:	46a0      	mov	r8, r4
 8001978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800197a:	2001      	movs	r0, #1
 800197c:	428e      	cmp	r6, r1
 800197e:	d1f6      	bne.n	800196e <__eqdf2+0x56>
 8001980:	4661      	mov	r1, ip
 8001982:	4339      	orrs	r1, r7
 8001984:	000f      	movs	r7, r1
 8001986:	4317      	orrs	r7, r2
 8001988:	4327      	orrs	r7, r4
 800198a:	d1f0      	bne.n	800196e <__eqdf2+0x56>
 800198c:	465b      	mov	r3, fp
 800198e:	4652      	mov	r2, sl
 8001990:	1a98      	subs	r0, r3, r2
 8001992:	1e43      	subs	r3, r0, #1
 8001994:	4198      	sbcs	r0, r3
 8001996:	e7ea      	b.n	800196e <__eqdf2+0x56>
 8001998:	2000      	movs	r0, #0
 800199a:	e7e8      	b.n	800196e <__eqdf2+0x56>
 800199c:	000007ff 	.word	0x000007ff

080019a0 <__gedf2>:
 80019a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a2:	4657      	mov	r7, sl
 80019a4:	464e      	mov	r6, r9
 80019a6:	4645      	mov	r5, r8
 80019a8:	46de      	mov	lr, fp
 80019aa:	b5e0      	push	{r5, r6, r7, lr}
 80019ac:	000d      	movs	r5, r1
 80019ae:	030f      	lsls	r7, r1, #12
 80019b0:	0b39      	lsrs	r1, r7, #12
 80019b2:	b083      	sub	sp, #12
 80019b4:	0004      	movs	r4, r0
 80019b6:	4680      	mov	r8, r0
 80019b8:	9101      	str	r1, [sp, #4]
 80019ba:	0058      	lsls	r0, r3, #1
 80019bc:	0fe9      	lsrs	r1, r5, #31
 80019be:	4f31      	ldr	r7, [pc, #196]	@ (8001a84 <__gedf2+0xe4>)
 80019c0:	0d40      	lsrs	r0, r0, #21
 80019c2:	468c      	mov	ip, r1
 80019c4:	006e      	lsls	r6, r5, #1
 80019c6:	0319      	lsls	r1, r3, #12
 80019c8:	4682      	mov	sl, r0
 80019ca:	4691      	mov	r9, r2
 80019cc:	0d76      	lsrs	r6, r6, #21
 80019ce:	0b09      	lsrs	r1, r1, #12
 80019d0:	0fd8      	lsrs	r0, r3, #31
 80019d2:	42be      	cmp	r6, r7
 80019d4:	d01f      	beq.n	8001a16 <__gedf2+0x76>
 80019d6:	45ba      	cmp	sl, r7
 80019d8:	d00f      	beq.n	80019fa <__gedf2+0x5a>
 80019da:	2e00      	cmp	r6, #0
 80019dc:	d12f      	bne.n	8001a3e <__gedf2+0x9e>
 80019de:	4655      	mov	r5, sl
 80019e0:	9e01      	ldr	r6, [sp, #4]
 80019e2:	4334      	orrs	r4, r6
 80019e4:	2d00      	cmp	r5, #0
 80019e6:	d127      	bne.n	8001a38 <__gedf2+0x98>
 80019e8:	430a      	orrs	r2, r1
 80019ea:	d03a      	beq.n	8001a62 <__gedf2+0xc2>
 80019ec:	2c00      	cmp	r4, #0
 80019ee:	d145      	bne.n	8001a7c <__gedf2+0xdc>
 80019f0:	2800      	cmp	r0, #0
 80019f2:	d11a      	bne.n	8001a2a <__gedf2+0x8a>
 80019f4:	2001      	movs	r0, #1
 80019f6:	4240      	negs	r0, r0
 80019f8:	e017      	b.n	8001a2a <__gedf2+0x8a>
 80019fa:	4311      	orrs	r1, r2
 80019fc:	d13b      	bne.n	8001a76 <__gedf2+0xd6>
 80019fe:	2e00      	cmp	r6, #0
 8001a00:	d102      	bne.n	8001a08 <__gedf2+0x68>
 8001a02:	9f01      	ldr	r7, [sp, #4]
 8001a04:	4327      	orrs	r7, r4
 8001a06:	d0f3      	beq.n	80019f0 <__gedf2+0x50>
 8001a08:	4584      	cmp	ip, r0
 8001a0a:	d109      	bne.n	8001a20 <__gedf2+0x80>
 8001a0c:	4663      	mov	r3, ip
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <__gedf2+0x54>
 8001a12:	4660      	mov	r0, ip
 8001a14:	e009      	b.n	8001a2a <__gedf2+0x8a>
 8001a16:	9f01      	ldr	r7, [sp, #4]
 8001a18:	4327      	orrs	r7, r4
 8001a1a:	d12c      	bne.n	8001a76 <__gedf2+0xd6>
 8001a1c:	45b2      	cmp	sl, r6
 8001a1e:	d024      	beq.n	8001a6a <__gedf2+0xca>
 8001a20:	4663      	mov	r3, ip
 8001a22:	2002      	movs	r0, #2
 8001a24:	3b01      	subs	r3, #1
 8001a26:	4018      	ands	r0, r3
 8001a28:	3801      	subs	r0, #1
 8001a2a:	b003      	add	sp, #12
 8001a2c:	bcf0      	pop	{r4, r5, r6, r7}
 8001a2e:	46bb      	mov	fp, r7
 8001a30:	46b2      	mov	sl, r6
 8001a32:	46a9      	mov	r9, r5
 8001a34:	46a0      	mov	r8, r4
 8001a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a38:	2c00      	cmp	r4, #0
 8001a3a:	d0d9      	beq.n	80019f0 <__gedf2+0x50>
 8001a3c:	e7e4      	b.n	8001a08 <__gedf2+0x68>
 8001a3e:	4654      	mov	r4, sl
 8001a40:	2c00      	cmp	r4, #0
 8001a42:	d0ed      	beq.n	8001a20 <__gedf2+0x80>
 8001a44:	4584      	cmp	ip, r0
 8001a46:	d1eb      	bne.n	8001a20 <__gedf2+0x80>
 8001a48:	4556      	cmp	r6, sl
 8001a4a:	dce9      	bgt.n	8001a20 <__gedf2+0x80>
 8001a4c:	dbde      	blt.n	8001a0c <__gedf2+0x6c>
 8001a4e:	9b01      	ldr	r3, [sp, #4]
 8001a50:	428b      	cmp	r3, r1
 8001a52:	d8e5      	bhi.n	8001a20 <__gedf2+0x80>
 8001a54:	d1da      	bne.n	8001a0c <__gedf2+0x6c>
 8001a56:	45c8      	cmp	r8, r9
 8001a58:	d8e2      	bhi.n	8001a20 <__gedf2+0x80>
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	45c8      	cmp	r8, r9
 8001a5e:	d2e4      	bcs.n	8001a2a <__gedf2+0x8a>
 8001a60:	e7d4      	b.n	8001a0c <__gedf2+0x6c>
 8001a62:	2000      	movs	r0, #0
 8001a64:	2c00      	cmp	r4, #0
 8001a66:	d0e0      	beq.n	8001a2a <__gedf2+0x8a>
 8001a68:	e7da      	b.n	8001a20 <__gedf2+0x80>
 8001a6a:	4311      	orrs	r1, r2
 8001a6c:	d103      	bne.n	8001a76 <__gedf2+0xd6>
 8001a6e:	4584      	cmp	ip, r0
 8001a70:	d1d6      	bne.n	8001a20 <__gedf2+0x80>
 8001a72:	2000      	movs	r0, #0
 8001a74:	e7d9      	b.n	8001a2a <__gedf2+0x8a>
 8001a76:	2002      	movs	r0, #2
 8001a78:	4240      	negs	r0, r0
 8001a7a:	e7d6      	b.n	8001a2a <__gedf2+0x8a>
 8001a7c:	4584      	cmp	ip, r0
 8001a7e:	d0e6      	beq.n	8001a4e <__gedf2+0xae>
 8001a80:	e7ce      	b.n	8001a20 <__gedf2+0x80>
 8001a82:	46c0      	nop			@ (mov r8, r8)
 8001a84:	000007ff 	.word	0x000007ff

08001a88 <__ledf2>:
 8001a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8a:	4657      	mov	r7, sl
 8001a8c:	464e      	mov	r6, r9
 8001a8e:	4645      	mov	r5, r8
 8001a90:	46de      	mov	lr, fp
 8001a92:	b5e0      	push	{r5, r6, r7, lr}
 8001a94:	000d      	movs	r5, r1
 8001a96:	030f      	lsls	r7, r1, #12
 8001a98:	0004      	movs	r4, r0
 8001a9a:	4680      	mov	r8, r0
 8001a9c:	0fe8      	lsrs	r0, r5, #31
 8001a9e:	0b39      	lsrs	r1, r7, #12
 8001aa0:	4684      	mov	ip, r0
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	0058      	lsls	r0, r3, #1
 8001aa6:	4f30      	ldr	r7, [pc, #192]	@ (8001b68 <__ledf2+0xe0>)
 8001aa8:	0d40      	lsrs	r0, r0, #21
 8001aaa:	9101      	str	r1, [sp, #4]
 8001aac:	031e      	lsls	r6, r3, #12
 8001aae:	0069      	lsls	r1, r5, #1
 8001ab0:	4682      	mov	sl, r0
 8001ab2:	4691      	mov	r9, r2
 8001ab4:	0d49      	lsrs	r1, r1, #21
 8001ab6:	0b36      	lsrs	r6, r6, #12
 8001ab8:	0fd8      	lsrs	r0, r3, #31
 8001aba:	42b9      	cmp	r1, r7
 8001abc:	d020      	beq.n	8001b00 <__ledf2+0x78>
 8001abe:	45ba      	cmp	sl, r7
 8001ac0:	d00f      	beq.n	8001ae2 <__ledf2+0x5a>
 8001ac2:	2900      	cmp	r1, #0
 8001ac4:	d12b      	bne.n	8001b1e <__ledf2+0x96>
 8001ac6:	9901      	ldr	r1, [sp, #4]
 8001ac8:	430c      	orrs	r4, r1
 8001aca:	4651      	mov	r1, sl
 8001acc:	2900      	cmp	r1, #0
 8001ace:	d137      	bne.n	8001b40 <__ledf2+0xb8>
 8001ad0:	4332      	orrs	r2, r6
 8001ad2:	d038      	beq.n	8001b46 <__ledf2+0xbe>
 8001ad4:	2c00      	cmp	r4, #0
 8001ad6:	d144      	bne.n	8001b62 <__ledf2+0xda>
 8001ad8:	2800      	cmp	r0, #0
 8001ada:	d119      	bne.n	8001b10 <__ledf2+0x88>
 8001adc:	2001      	movs	r0, #1
 8001ade:	4240      	negs	r0, r0
 8001ae0:	e016      	b.n	8001b10 <__ledf2+0x88>
 8001ae2:	4316      	orrs	r6, r2
 8001ae4:	d113      	bne.n	8001b0e <__ledf2+0x86>
 8001ae6:	2900      	cmp	r1, #0
 8001ae8:	d102      	bne.n	8001af0 <__ledf2+0x68>
 8001aea:	9f01      	ldr	r7, [sp, #4]
 8001aec:	4327      	orrs	r7, r4
 8001aee:	d0f3      	beq.n	8001ad8 <__ledf2+0x50>
 8001af0:	4584      	cmp	ip, r0
 8001af2:	d020      	beq.n	8001b36 <__ledf2+0xae>
 8001af4:	4663      	mov	r3, ip
 8001af6:	2002      	movs	r0, #2
 8001af8:	3b01      	subs	r3, #1
 8001afa:	4018      	ands	r0, r3
 8001afc:	3801      	subs	r0, #1
 8001afe:	e007      	b.n	8001b10 <__ledf2+0x88>
 8001b00:	9f01      	ldr	r7, [sp, #4]
 8001b02:	4327      	orrs	r7, r4
 8001b04:	d103      	bne.n	8001b0e <__ledf2+0x86>
 8001b06:	458a      	cmp	sl, r1
 8001b08:	d1f4      	bne.n	8001af4 <__ledf2+0x6c>
 8001b0a:	4316      	orrs	r6, r2
 8001b0c:	d01f      	beq.n	8001b4e <__ledf2+0xc6>
 8001b0e:	2002      	movs	r0, #2
 8001b10:	b003      	add	sp, #12
 8001b12:	bcf0      	pop	{r4, r5, r6, r7}
 8001b14:	46bb      	mov	fp, r7
 8001b16:	46b2      	mov	sl, r6
 8001b18:	46a9      	mov	r9, r5
 8001b1a:	46a0      	mov	r8, r4
 8001b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b1e:	4654      	mov	r4, sl
 8001b20:	2c00      	cmp	r4, #0
 8001b22:	d0e7      	beq.n	8001af4 <__ledf2+0x6c>
 8001b24:	4584      	cmp	ip, r0
 8001b26:	d1e5      	bne.n	8001af4 <__ledf2+0x6c>
 8001b28:	4551      	cmp	r1, sl
 8001b2a:	dce3      	bgt.n	8001af4 <__ledf2+0x6c>
 8001b2c:	db03      	blt.n	8001b36 <__ledf2+0xae>
 8001b2e:	9b01      	ldr	r3, [sp, #4]
 8001b30:	42b3      	cmp	r3, r6
 8001b32:	d8df      	bhi.n	8001af4 <__ledf2+0x6c>
 8001b34:	d00f      	beq.n	8001b56 <__ledf2+0xce>
 8001b36:	4663      	mov	r3, ip
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0cf      	beq.n	8001adc <__ledf2+0x54>
 8001b3c:	4660      	mov	r0, ip
 8001b3e:	e7e7      	b.n	8001b10 <__ledf2+0x88>
 8001b40:	2c00      	cmp	r4, #0
 8001b42:	d0c9      	beq.n	8001ad8 <__ledf2+0x50>
 8001b44:	e7d4      	b.n	8001af0 <__ledf2+0x68>
 8001b46:	2000      	movs	r0, #0
 8001b48:	2c00      	cmp	r4, #0
 8001b4a:	d0e1      	beq.n	8001b10 <__ledf2+0x88>
 8001b4c:	e7d2      	b.n	8001af4 <__ledf2+0x6c>
 8001b4e:	4584      	cmp	ip, r0
 8001b50:	d1d0      	bne.n	8001af4 <__ledf2+0x6c>
 8001b52:	2000      	movs	r0, #0
 8001b54:	e7dc      	b.n	8001b10 <__ledf2+0x88>
 8001b56:	45c8      	cmp	r8, r9
 8001b58:	d8cc      	bhi.n	8001af4 <__ledf2+0x6c>
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	45c8      	cmp	r8, r9
 8001b5e:	d2d7      	bcs.n	8001b10 <__ledf2+0x88>
 8001b60:	e7e9      	b.n	8001b36 <__ledf2+0xae>
 8001b62:	4584      	cmp	ip, r0
 8001b64:	d0e3      	beq.n	8001b2e <__ledf2+0xa6>
 8001b66:	e7c5      	b.n	8001af4 <__ledf2+0x6c>
 8001b68:	000007ff 	.word	0x000007ff

08001b6c <__aeabi_dmul>:
 8001b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b6e:	4657      	mov	r7, sl
 8001b70:	46de      	mov	lr, fp
 8001b72:	464e      	mov	r6, r9
 8001b74:	4645      	mov	r5, r8
 8001b76:	b5e0      	push	{r5, r6, r7, lr}
 8001b78:	001f      	movs	r7, r3
 8001b7a:	030b      	lsls	r3, r1, #12
 8001b7c:	0b1b      	lsrs	r3, r3, #12
 8001b7e:	0016      	movs	r6, r2
 8001b80:	469a      	mov	sl, r3
 8001b82:	0fca      	lsrs	r2, r1, #31
 8001b84:	004b      	lsls	r3, r1, #1
 8001b86:	0004      	movs	r4, r0
 8001b88:	4693      	mov	fp, r2
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	0d5b      	lsrs	r3, r3, #21
 8001b8e:	d100      	bne.n	8001b92 <__aeabi_dmul+0x26>
 8001b90:	e0d5      	b.n	8001d3e <__aeabi_dmul+0x1d2>
 8001b92:	4abb      	ldr	r2, [pc, #748]	@ (8001e80 <__aeabi_dmul+0x314>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dmul+0x2e>
 8001b98:	e0f8      	b.n	8001d8c <__aeabi_dmul+0x220>
 8001b9a:	4651      	mov	r1, sl
 8001b9c:	0f42      	lsrs	r2, r0, #29
 8001b9e:	00c9      	lsls	r1, r1, #3
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	2180      	movs	r1, #128	@ 0x80
 8001ba4:	0409      	lsls	r1, r1, #16
 8001ba6:	4311      	orrs	r1, r2
 8001ba8:	00c2      	lsls	r2, r0, #3
 8001baa:	4691      	mov	r9, r2
 8001bac:	4ab5      	ldr	r2, [pc, #724]	@ (8001e84 <__aeabi_dmul+0x318>)
 8001bae:	468a      	mov	sl, r1
 8001bb0:	189d      	adds	r5, r3, r2
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	9302      	str	r3, [sp, #8]
 8001bb8:	033c      	lsls	r4, r7, #12
 8001bba:	007b      	lsls	r3, r7, #1
 8001bbc:	0ffa      	lsrs	r2, r7, #31
 8001bbe:	0030      	movs	r0, r6
 8001bc0:	0b24      	lsrs	r4, r4, #12
 8001bc2:	0d5b      	lsrs	r3, r3, #21
 8001bc4:	9200      	str	r2, [sp, #0]
 8001bc6:	d100      	bne.n	8001bca <__aeabi_dmul+0x5e>
 8001bc8:	e096      	b.n	8001cf8 <__aeabi_dmul+0x18c>
 8001bca:	4aad      	ldr	r2, [pc, #692]	@ (8001e80 <__aeabi_dmul+0x314>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d031      	beq.n	8001c34 <__aeabi_dmul+0xc8>
 8001bd0:	0f72      	lsrs	r2, r6, #29
 8001bd2:	00e4      	lsls	r4, r4, #3
 8001bd4:	4322      	orrs	r2, r4
 8001bd6:	2480      	movs	r4, #128	@ 0x80
 8001bd8:	0424      	lsls	r4, r4, #16
 8001bda:	4314      	orrs	r4, r2
 8001bdc:	4aa9      	ldr	r2, [pc, #676]	@ (8001e84 <__aeabi_dmul+0x318>)
 8001bde:	00f0      	lsls	r0, r6, #3
 8001be0:	4694      	mov	ip, r2
 8001be2:	4463      	add	r3, ip
 8001be4:	195b      	adds	r3, r3, r5
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	9201      	str	r2, [sp, #4]
 8001bea:	4642      	mov	r2, r8
 8001bec:	2600      	movs	r6, #0
 8001bee:	2a0a      	cmp	r2, #10
 8001bf0:	dc42      	bgt.n	8001c78 <__aeabi_dmul+0x10c>
 8001bf2:	465a      	mov	r2, fp
 8001bf4:	9900      	ldr	r1, [sp, #0]
 8001bf6:	404a      	eors	r2, r1
 8001bf8:	4693      	mov	fp, r2
 8001bfa:	4642      	mov	r2, r8
 8001bfc:	2a02      	cmp	r2, #2
 8001bfe:	dc32      	bgt.n	8001c66 <__aeabi_dmul+0xfa>
 8001c00:	3a01      	subs	r2, #1
 8001c02:	2a01      	cmp	r2, #1
 8001c04:	d900      	bls.n	8001c08 <__aeabi_dmul+0x9c>
 8001c06:	e149      	b.n	8001e9c <__aeabi_dmul+0x330>
 8001c08:	2e02      	cmp	r6, #2
 8001c0a:	d100      	bne.n	8001c0e <__aeabi_dmul+0xa2>
 8001c0c:	e0ca      	b.n	8001da4 <__aeabi_dmul+0x238>
 8001c0e:	2e01      	cmp	r6, #1
 8001c10:	d13d      	bne.n	8001c8e <__aeabi_dmul+0x122>
 8001c12:	2300      	movs	r3, #0
 8001c14:	2400      	movs	r4, #0
 8001c16:	2200      	movs	r2, #0
 8001c18:	0010      	movs	r0, r2
 8001c1a:	465a      	mov	r2, fp
 8001c1c:	051b      	lsls	r3, r3, #20
 8001c1e:	4323      	orrs	r3, r4
 8001c20:	07d2      	lsls	r2, r2, #31
 8001c22:	4313      	orrs	r3, r2
 8001c24:	0019      	movs	r1, r3
 8001c26:	b007      	add	sp, #28
 8001c28:	bcf0      	pop	{r4, r5, r6, r7}
 8001c2a:	46bb      	mov	fp, r7
 8001c2c:	46b2      	mov	sl, r6
 8001c2e:	46a9      	mov	r9, r5
 8001c30:	46a0      	mov	r8, r4
 8001c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c34:	4b92      	ldr	r3, [pc, #584]	@ (8001e80 <__aeabi_dmul+0x314>)
 8001c36:	4326      	orrs	r6, r4
 8001c38:	18eb      	adds	r3, r5, r3
 8001c3a:	2e00      	cmp	r6, #0
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dmul+0xd4>
 8001c3e:	e0bb      	b.n	8001db8 <__aeabi_dmul+0x24c>
 8001c40:	2203      	movs	r2, #3
 8001c42:	4641      	mov	r1, r8
 8001c44:	4311      	orrs	r1, r2
 8001c46:	465a      	mov	r2, fp
 8001c48:	4688      	mov	r8, r1
 8001c4a:	9900      	ldr	r1, [sp, #0]
 8001c4c:	404a      	eors	r2, r1
 8001c4e:	2180      	movs	r1, #128	@ 0x80
 8001c50:	0109      	lsls	r1, r1, #4
 8001c52:	468c      	mov	ip, r1
 8001c54:	0029      	movs	r1, r5
 8001c56:	4461      	add	r1, ip
 8001c58:	9101      	str	r1, [sp, #4]
 8001c5a:	4641      	mov	r1, r8
 8001c5c:	290a      	cmp	r1, #10
 8001c5e:	dd00      	ble.n	8001c62 <__aeabi_dmul+0xf6>
 8001c60:	e233      	b.n	80020ca <__aeabi_dmul+0x55e>
 8001c62:	4693      	mov	fp, r2
 8001c64:	2603      	movs	r6, #3
 8001c66:	4642      	mov	r2, r8
 8001c68:	2701      	movs	r7, #1
 8001c6a:	4097      	lsls	r7, r2
 8001c6c:	21a6      	movs	r1, #166	@ 0xa6
 8001c6e:	003a      	movs	r2, r7
 8001c70:	00c9      	lsls	r1, r1, #3
 8001c72:	400a      	ands	r2, r1
 8001c74:	420f      	tst	r7, r1
 8001c76:	d031      	beq.n	8001cdc <__aeabi_dmul+0x170>
 8001c78:	9e02      	ldr	r6, [sp, #8]
 8001c7a:	2e02      	cmp	r6, #2
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_dmul+0x114>
 8001c7e:	e235      	b.n	80020ec <__aeabi_dmul+0x580>
 8001c80:	2e03      	cmp	r6, #3
 8001c82:	d100      	bne.n	8001c86 <__aeabi_dmul+0x11a>
 8001c84:	e1d2      	b.n	800202c <__aeabi_dmul+0x4c0>
 8001c86:	4654      	mov	r4, sl
 8001c88:	4648      	mov	r0, r9
 8001c8a:	2e01      	cmp	r6, #1
 8001c8c:	d0c1      	beq.n	8001c12 <__aeabi_dmul+0xa6>
 8001c8e:	9a01      	ldr	r2, [sp, #4]
 8001c90:	4b7d      	ldr	r3, [pc, #500]	@ (8001e88 <__aeabi_dmul+0x31c>)
 8001c92:	4694      	mov	ip, r2
 8001c94:	4463      	add	r3, ip
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	dc00      	bgt.n	8001c9c <__aeabi_dmul+0x130>
 8001c9a:	e0c0      	b.n	8001e1e <__aeabi_dmul+0x2b2>
 8001c9c:	0742      	lsls	r2, r0, #29
 8001c9e:	d009      	beq.n	8001cb4 <__aeabi_dmul+0x148>
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	4002      	ands	r2, r0
 8001ca4:	2a04      	cmp	r2, #4
 8001ca6:	d005      	beq.n	8001cb4 <__aeabi_dmul+0x148>
 8001ca8:	1d02      	adds	r2, r0, #4
 8001caa:	4282      	cmp	r2, r0
 8001cac:	4180      	sbcs	r0, r0
 8001cae:	4240      	negs	r0, r0
 8001cb0:	1824      	adds	r4, r4, r0
 8001cb2:	0010      	movs	r0, r2
 8001cb4:	01e2      	lsls	r2, r4, #7
 8001cb6:	d506      	bpl.n	8001cc6 <__aeabi_dmul+0x15a>
 8001cb8:	4b74      	ldr	r3, [pc, #464]	@ (8001e8c <__aeabi_dmul+0x320>)
 8001cba:	9a01      	ldr	r2, [sp, #4]
 8001cbc:	401c      	ands	r4, r3
 8001cbe:	2380      	movs	r3, #128	@ 0x80
 8001cc0:	4694      	mov	ip, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4463      	add	r3, ip
 8001cc6:	4a72      	ldr	r2, [pc, #456]	@ (8001e90 <__aeabi_dmul+0x324>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	dc6b      	bgt.n	8001da4 <__aeabi_dmul+0x238>
 8001ccc:	0762      	lsls	r2, r4, #29
 8001cce:	08c0      	lsrs	r0, r0, #3
 8001cd0:	0264      	lsls	r4, r4, #9
 8001cd2:	055b      	lsls	r3, r3, #21
 8001cd4:	4302      	orrs	r2, r0
 8001cd6:	0b24      	lsrs	r4, r4, #12
 8001cd8:	0d5b      	lsrs	r3, r3, #21
 8001cda:	e79d      	b.n	8001c18 <__aeabi_dmul+0xac>
 8001cdc:	2190      	movs	r1, #144	@ 0x90
 8001cde:	0089      	lsls	r1, r1, #2
 8001ce0:	420f      	tst	r7, r1
 8001ce2:	d163      	bne.n	8001dac <__aeabi_dmul+0x240>
 8001ce4:	2288      	movs	r2, #136	@ 0x88
 8001ce6:	423a      	tst	r2, r7
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dmul+0x180>
 8001cea:	e0d7      	b.n	8001e9c <__aeabi_dmul+0x330>
 8001cec:	9b00      	ldr	r3, [sp, #0]
 8001cee:	46a2      	mov	sl, r4
 8001cf0:	469b      	mov	fp, r3
 8001cf2:	4681      	mov	r9, r0
 8001cf4:	9602      	str	r6, [sp, #8]
 8001cf6:	e7bf      	b.n	8001c78 <__aeabi_dmul+0x10c>
 8001cf8:	0023      	movs	r3, r4
 8001cfa:	4333      	orrs	r3, r6
 8001cfc:	d100      	bne.n	8001d00 <__aeabi_dmul+0x194>
 8001cfe:	e07f      	b.n	8001e00 <__aeabi_dmul+0x294>
 8001d00:	2c00      	cmp	r4, #0
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dmul+0x19a>
 8001d04:	e1ad      	b.n	8002062 <__aeabi_dmul+0x4f6>
 8001d06:	0020      	movs	r0, r4
 8001d08:	f000 ff04 	bl	8002b14 <__clzsi2>
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	0003      	movs	r3, r0
 8001d10:	3a0b      	subs	r2, #11
 8001d12:	201d      	movs	r0, #29
 8001d14:	0019      	movs	r1, r3
 8001d16:	1a82      	subs	r2, r0, r2
 8001d18:	0030      	movs	r0, r6
 8001d1a:	3908      	subs	r1, #8
 8001d1c:	40d0      	lsrs	r0, r2
 8001d1e:	408c      	lsls	r4, r1
 8001d20:	4304      	orrs	r4, r0
 8001d22:	0030      	movs	r0, r6
 8001d24:	4088      	lsls	r0, r1
 8001d26:	4a5b      	ldr	r2, [pc, #364]	@ (8001e94 <__aeabi_dmul+0x328>)
 8001d28:	1aeb      	subs	r3, r5, r3
 8001d2a:	4694      	mov	ip, r2
 8001d2c:	4463      	add	r3, ip
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	9201      	str	r2, [sp, #4]
 8001d32:	4642      	mov	r2, r8
 8001d34:	2600      	movs	r6, #0
 8001d36:	2a0a      	cmp	r2, #10
 8001d38:	dc00      	bgt.n	8001d3c <__aeabi_dmul+0x1d0>
 8001d3a:	e75a      	b.n	8001bf2 <__aeabi_dmul+0x86>
 8001d3c:	e79c      	b.n	8001c78 <__aeabi_dmul+0x10c>
 8001d3e:	4653      	mov	r3, sl
 8001d40:	4303      	orrs	r3, r0
 8001d42:	4699      	mov	r9, r3
 8001d44:	d054      	beq.n	8001df0 <__aeabi_dmul+0x284>
 8001d46:	4653      	mov	r3, sl
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d100      	bne.n	8001d4e <__aeabi_dmul+0x1e2>
 8001d4c:	e177      	b.n	800203e <__aeabi_dmul+0x4d2>
 8001d4e:	4650      	mov	r0, sl
 8001d50:	f000 fee0 	bl	8002b14 <__clzsi2>
 8001d54:	230b      	movs	r3, #11
 8001d56:	425b      	negs	r3, r3
 8001d58:	469c      	mov	ip, r3
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	4484      	add	ip, r0
 8001d5e:	0011      	movs	r1, r2
 8001d60:	4650      	mov	r0, sl
 8001d62:	3908      	subs	r1, #8
 8001d64:	4088      	lsls	r0, r1
 8001d66:	231d      	movs	r3, #29
 8001d68:	4680      	mov	r8, r0
 8001d6a:	4660      	mov	r0, ip
 8001d6c:	1a1b      	subs	r3, r3, r0
 8001d6e:	0020      	movs	r0, r4
 8001d70:	40d8      	lsrs	r0, r3
 8001d72:	0003      	movs	r3, r0
 8001d74:	4640      	mov	r0, r8
 8001d76:	4303      	orrs	r3, r0
 8001d78:	469a      	mov	sl, r3
 8001d7a:	0023      	movs	r3, r4
 8001d7c:	408b      	lsls	r3, r1
 8001d7e:	4699      	mov	r9, r3
 8001d80:	2300      	movs	r3, #0
 8001d82:	4d44      	ldr	r5, [pc, #272]	@ (8001e94 <__aeabi_dmul+0x328>)
 8001d84:	4698      	mov	r8, r3
 8001d86:	1aad      	subs	r5, r5, r2
 8001d88:	9302      	str	r3, [sp, #8]
 8001d8a:	e715      	b.n	8001bb8 <__aeabi_dmul+0x4c>
 8001d8c:	4652      	mov	r2, sl
 8001d8e:	4302      	orrs	r2, r0
 8001d90:	4691      	mov	r9, r2
 8001d92:	d126      	bne.n	8001de2 <__aeabi_dmul+0x276>
 8001d94:	2200      	movs	r2, #0
 8001d96:	001d      	movs	r5, r3
 8001d98:	2302      	movs	r3, #2
 8001d9a:	4692      	mov	sl, r2
 8001d9c:	3208      	adds	r2, #8
 8001d9e:	4690      	mov	r8, r2
 8001da0:	9302      	str	r3, [sp, #8]
 8001da2:	e709      	b.n	8001bb8 <__aeabi_dmul+0x4c>
 8001da4:	2400      	movs	r4, #0
 8001da6:	2200      	movs	r2, #0
 8001da8:	4b35      	ldr	r3, [pc, #212]	@ (8001e80 <__aeabi_dmul+0x314>)
 8001daa:	e735      	b.n	8001c18 <__aeabi_dmul+0xac>
 8001dac:	2300      	movs	r3, #0
 8001dae:	2480      	movs	r4, #128	@ 0x80
 8001db0:	469b      	mov	fp, r3
 8001db2:	0324      	lsls	r4, r4, #12
 8001db4:	4b32      	ldr	r3, [pc, #200]	@ (8001e80 <__aeabi_dmul+0x314>)
 8001db6:	e72f      	b.n	8001c18 <__aeabi_dmul+0xac>
 8001db8:	2202      	movs	r2, #2
 8001dba:	4641      	mov	r1, r8
 8001dbc:	4311      	orrs	r1, r2
 8001dbe:	2280      	movs	r2, #128	@ 0x80
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	4694      	mov	ip, r2
 8001dc4:	002a      	movs	r2, r5
 8001dc6:	4462      	add	r2, ip
 8001dc8:	4688      	mov	r8, r1
 8001dca:	9201      	str	r2, [sp, #4]
 8001dcc:	290a      	cmp	r1, #10
 8001dce:	dd00      	ble.n	8001dd2 <__aeabi_dmul+0x266>
 8001dd0:	e752      	b.n	8001c78 <__aeabi_dmul+0x10c>
 8001dd2:	465a      	mov	r2, fp
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	9900      	ldr	r1, [sp, #0]
 8001dd8:	0004      	movs	r4, r0
 8001dda:	404a      	eors	r2, r1
 8001ddc:	4693      	mov	fp, r2
 8001dde:	2602      	movs	r6, #2
 8001de0:	e70b      	b.n	8001bfa <__aeabi_dmul+0x8e>
 8001de2:	220c      	movs	r2, #12
 8001de4:	001d      	movs	r5, r3
 8001de6:	2303      	movs	r3, #3
 8001de8:	4681      	mov	r9, r0
 8001dea:	4690      	mov	r8, r2
 8001dec:	9302      	str	r3, [sp, #8]
 8001dee:	e6e3      	b.n	8001bb8 <__aeabi_dmul+0x4c>
 8001df0:	2300      	movs	r3, #0
 8001df2:	469a      	mov	sl, r3
 8001df4:	3304      	adds	r3, #4
 8001df6:	4698      	mov	r8, r3
 8001df8:	3b03      	subs	r3, #3
 8001dfa:	2500      	movs	r5, #0
 8001dfc:	9302      	str	r3, [sp, #8]
 8001dfe:	e6db      	b.n	8001bb8 <__aeabi_dmul+0x4c>
 8001e00:	4642      	mov	r2, r8
 8001e02:	3301      	adds	r3, #1
 8001e04:	431a      	orrs	r2, r3
 8001e06:	002b      	movs	r3, r5
 8001e08:	4690      	mov	r8, r2
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	9201      	str	r2, [sp, #4]
 8001e0e:	4642      	mov	r2, r8
 8001e10:	2400      	movs	r4, #0
 8001e12:	2000      	movs	r0, #0
 8001e14:	2601      	movs	r6, #1
 8001e16:	2a0a      	cmp	r2, #10
 8001e18:	dc00      	bgt.n	8001e1c <__aeabi_dmul+0x2b0>
 8001e1a:	e6ea      	b.n	8001bf2 <__aeabi_dmul+0x86>
 8001e1c:	e72c      	b.n	8001c78 <__aeabi_dmul+0x10c>
 8001e1e:	2201      	movs	r2, #1
 8001e20:	1ad2      	subs	r2, r2, r3
 8001e22:	2a38      	cmp	r2, #56	@ 0x38
 8001e24:	dd00      	ble.n	8001e28 <__aeabi_dmul+0x2bc>
 8001e26:	e6f4      	b.n	8001c12 <__aeabi_dmul+0xa6>
 8001e28:	2a1f      	cmp	r2, #31
 8001e2a:	dc00      	bgt.n	8001e2e <__aeabi_dmul+0x2c2>
 8001e2c:	e12a      	b.n	8002084 <__aeabi_dmul+0x518>
 8001e2e:	211f      	movs	r1, #31
 8001e30:	4249      	negs	r1, r1
 8001e32:	1acb      	subs	r3, r1, r3
 8001e34:	0021      	movs	r1, r4
 8001e36:	40d9      	lsrs	r1, r3
 8001e38:	000b      	movs	r3, r1
 8001e3a:	2a20      	cmp	r2, #32
 8001e3c:	d005      	beq.n	8001e4a <__aeabi_dmul+0x2de>
 8001e3e:	4a16      	ldr	r2, [pc, #88]	@ (8001e98 <__aeabi_dmul+0x32c>)
 8001e40:	9d01      	ldr	r5, [sp, #4]
 8001e42:	4694      	mov	ip, r2
 8001e44:	4465      	add	r5, ip
 8001e46:	40ac      	lsls	r4, r5
 8001e48:	4320      	orrs	r0, r4
 8001e4a:	1e42      	subs	r2, r0, #1
 8001e4c:	4190      	sbcs	r0, r2
 8001e4e:	4318      	orrs	r0, r3
 8001e50:	2307      	movs	r3, #7
 8001e52:	0019      	movs	r1, r3
 8001e54:	2400      	movs	r4, #0
 8001e56:	4001      	ands	r1, r0
 8001e58:	4203      	tst	r3, r0
 8001e5a:	d00c      	beq.n	8001e76 <__aeabi_dmul+0x30a>
 8001e5c:	230f      	movs	r3, #15
 8001e5e:	4003      	ands	r3, r0
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d100      	bne.n	8001e66 <__aeabi_dmul+0x2fa>
 8001e64:	e140      	b.n	80020e8 <__aeabi_dmul+0x57c>
 8001e66:	1d03      	adds	r3, r0, #4
 8001e68:	4283      	cmp	r3, r0
 8001e6a:	41a4      	sbcs	r4, r4
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	4264      	negs	r4, r4
 8001e70:	0761      	lsls	r1, r4, #29
 8001e72:	0264      	lsls	r4, r4, #9
 8001e74:	0b24      	lsrs	r4, r4, #12
 8001e76:	08c2      	lsrs	r2, r0, #3
 8001e78:	2300      	movs	r3, #0
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	e6cc      	b.n	8001c18 <__aeabi_dmul+0xac>
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	000007ff 	.word	0x000007ff
 8001e84:	fffffc01 	.word	0xfffffc01
 8001e88:	000003ff 	.word	0x000003ff
 8001e8c:	feffffff 	.word	0xfeffffff
 8001e90:	000007fe 	.word	0x000007fe
 8001e94:	fffffc0d 	.word	0xfffffc0d
 8001e98:	0000043e 	.word	0x0000043e
 8001e9c:	4649      	mov	r1, r9
 8001e9e:	464a      	mov	r2, r9
 8001ea0:	0409      	lsls	r1, r1, #16
 8001ea2:	0c09      	lsrs	r1, r1, #16
 8001ea4:	000d      	movs	r5, r1
 8001ea6:	0c16      	lsrs	r6, r2, #16
 8001ea8:	0c02      	lsrs	r2, r0, #16
 8001eaa:	0400      	lsls	r0, r0, #16
 8001eac:	0c00      	lsrs	r0, r0, #16
 8001eae:	4345      	muls	r5, r0
 8001eb0:	46ac      	mov	ip, r5
 8001eb2:	0005      	movs	r5, r0
 8001eb4:	4375      	muls	r5, r6
 8001eb6:	46a8      	mov	r8, r5
 8001eb8:	0015      	movs	r5, r2
 8001eba:	000f      	movs	r7, r1
 8001ebc:	4375      	muls	r5, r6
 8001ebe:	9200      	str	r2, [sp, #0]
 8001ec0:	9502      	str	r5, [sp, #8]
 8001ec2:	002a      	movs	r2, r5
 8001ec4:	9d00      	ldr	r5, [sp, #0]
 8001ec6:	436f      	muls	r7, r5
 8001ec8:	4665      	mov	r5, ip
 8001eca:	0c2d      	lsrs	r5, r5, #16
 8001ecc:	46a9      	mov	r9, r5
 8001ece:	4447      	add	r7, r8
 8001ed0:	444f      	add	r7, r9
 8001ed2:	45b8      	cmp	r8, r7
 8001ed4:	d905      	bls.n	8001ee2 <__aeabi_dmul+0x376>
 8001ed6:	0015      	movs	r5, r2
 8001ed8:	2280      	movs	r2, #128	@ 0x80
 8001eda:	0252      	lsls	r2, r2, #9
 8001edc:	4690      	mov	r8, r2
 8001ede:	4445      	add	r5, r8
 8001ee0:	9502      	str	r5, [sp, #8]
 8001ee2:	0c3d      	lsrs	r5, r7, #16
 8001ee4:	9503      	str	r5, [sp, #12]
 8001ee6:	4665      	mov	r5, ip
 8001ee8:	042d      	lsls	r5, r5, #16
 8001eea:	043f      	lsls	r7, r7, #16
 8001eec:	0c2d      	lsrs	r5, r5, #16
 8001eee:	46ac      	mov	ip, r5
 8001ef0:	003d      	movs	r5, r7
 8001ef2:	4465      	add	r5, ip
 8001ef4:	9504      	str	r5, [sp, #16]
 8001ef6:	0c25      	lsrs	r5, r4, #16
 8001ef8:	0424      	lsls	r4, r4, #16
 8001efa:	0c24      	lsrs	r4, r4, #16
 8001efc:	46ac      	mov	ip, r5
 8001efe:	0025      	movs	r5, r4
 8001f00:	4375      	muls	r5, r6
 8001f02:	46a8      	mov	r8, r5
 8001f04:	4665      	mov	r5, ip
 8001f06:	000f      	movs	r7, r1
 8001f08:	4369      	muls	r1, r5
 8001f0a:	4441      	add	r1, r8
 8001f0c:	4689      	mov	r9, r1
 8001f0e:	4367      	muls	r7, r4
 8001f10:	0c39      	lsrs	r1, r7, #16
 8001f12:	4449      	add	r1, r9
 8001f14:	436e      	muls	r6, r5
 8001f16:	4588      	cmp	r8, r1
 8001f18:	d903      	bls.n	8001f22 <__aeabi_dmul+0x3b6>
 8001f1a:	2280      	movs	r2, #128	@ 0x80
 8001f1c:	0252      	lsls	r2, r2, #9
 8001f1e:	4690      	mov	r8, r2
 8001f20:	4446      	add	r6, r8
 8001f22:	0c0d      	lsrs	r5, r1, #16
 8001f24:	46a8      	mov	r8, r5
 8001f26:	0035      	movs	r5, r6
 8001f28:	4445      	add	r5, r8
 8001f2a:	9505      	str	r5, [sp, #20]
 8001f2c:	9d03      	ldr	r5, [sp, #12]
 8001f2e:	043f      	lsls	r7, r7, #16
 8001f30:	46a8      	mov	r8, r5
 8001f32:	0c3f      	lsrs	r7, r7, #16
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	19c9      	adds	r1, r1, r7
 8001f38:	4488      	add	r8, r1
 8001f3a:	4645      	mov	r5, r8
 8001f3c:	9503      	str	r5, [sp, #12]
 8001f3e:	4655      	mov	r5, sl
 8001f40:	042e      	lsls	r6, r5, #16
 8001f42:	0c36      	lsrs	r6, r6, #16
 8001f44:	0c2f      	lsrs	r7, r5, #16
 8001f46:	0035      	movs	r5, r6
 8001f48:	4345      	muls	r5, r0
 8001f4a:	4378      	muls	r0, r7
 8001f4c:	4681      	mov	r9, r0
 8001f4e:	0038      	movs	r0, r7
 8001f50:	46a8      	mov	r8, r5
 8001f52:	0c2d      	lsrs	r5, r5, #16
 8001f54:	46aa      	mov	sl, r5
 8001f56:	9a00      	ldr	r2, [sp, #0]
 8001f58:	4350      	muls	r0, r2
 8001f5a:	4372      	muls	r2, r6
 8001f5c:	444a      	add	r2, r9
 8001f5e:	4452      	add	r2, sl
 8001f60:	4591      	cmp	r9, r2
 8001f62:	d903      	bls.n	8001f6c <__aeabi_dmul+0x400>
 8001f64:	2580      	movs	r5, #128	@ 0x80
 8001f66:	026d      	lsls	r5, r5, #9
 8001f68:	46a9      	mov	r9, r5
 8001f6a:	4448      	add	r0, r9
 8001f6c:	0c15      	lsrs	r5, r2, #16
 8001f6e:	46a9      	mov	r9, r5
 8001f70:	4645      	mov	r5, r8
 8001f72:	042d      	lsls	r5, r5, #16
 8001f74:	0c2d      	lsrs	r5, r5, #16
 8001f76:	46a8      	mov	r8, r5
 8001f78:	4665      	mov	r5, ip
 8001f7a:	437d      	muls	r5, r7
 8001f7c:	0412      	lsls	r2, r2, #16
 8001f7e:	4448      	add	r0, r9
 8001f80:	4490      	add	r8, r2
 8001f82:	46a9      	mov	r9, r5
 8001f84:	0032      	movs	r2, r6
 8001f86:	4665      	mov	r5, ip
 8001f88:	4362      	muls	r2, r4
 8001f8a:	436e      	muls	r6, r5
 8001f8c:	437c      	muls	r4, r7
 8001f8e:	0c17      	lsrs	r7, r2, #16
 8001f90:	1936      	adds	r6, r6, r4
 8001f92:	19bf      	adds	r7, r7, r6
 8001f94:	42bc      	cmp	r4, r7
 8001f96:	d903      	bls.n	8001fa0 <__aeabi_dmul+0x434>
 8001f98:	2480      	movs	r4, #128	@ 0x80
 8001f9a:	0264      	lsls	r4, r4, #9
 8001f9c:	46a4      	mov	ip, r4
 8001f9e:	44e1      	add	r9, ip
 8001fa0:	9c02      	ldr	r4, [sp, #8]
 8001fa2:	9e03      	ldr	r6, [sp, #12]
 8001fa4:	46a4      	mov	ip, r4
 8001fa6:	9d05      	ldr	r5, [sp, #20]
 8001fa8:	4466      	add	r6, ip
 8001faa:	428e      	cmp	r6, r1
 8001fac:	4189      	sbcs	r1, r1
 8001fae:	46ac      	mov	ip, r5
 8001fb0:	0412      	lsls	r2, r2, #16
 8001fb2:	043c      	lsls	r4, r7, #16
 8001fb4:	0c12      	lsrs	r2, r2, #16
 8001fb6:	18a2      	adds	r2, r4, r2
 8001fb8:	4462      	add	r2, ip
 8001fba:	4249      	negs	r1, r1
 8001fbc:	1854      	adds	r4, r2, r1
 8001fbe:	4446      	add	r6, r8
 8001fc0:	46a4      	mov	ip, r4
 8001fc2:	4546      	cmp	r6, r8
 8001fc4:	41a4      	sbcs	r4, r4
 8001fc6:	4682      	mov	sl, r0
 8001fc8:	4264      	negs	r4, r4
 8001fca:	46a0      	mov	r8, r4
 8001fcc:	42aa      	cmp	r2, r5
 8001fce:	4192      	sbcs	r2, r2
 8001fd0:	458c      	cmp	ip, r1
 8001fd2:	4189      	sbcs	r1, r1
 8001fd4:	44e2      	add	sl, ip
 8001fd6:	44d0      	add	r8, sl
 8001fd8:	4249      	negs	r1, r1
 8001fda:	4252      	negs	r2, r2
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	45a0      	cmp	r8, r4
 8001fe0:	41a4      	sbcs	r4, r4
 8001fe2:	4582      	cmp	sl, r0
 8001fe4:	4189      	sbcs	r1, r1
 8001fe6:	4264      	negs	r4, r4
 8001fe8:	4249      	negs	r1, r1
 8001fea:	430c      	orrs	r4, r1
 8001fec:	4641      	mov	r1, r8
 8001fee:	0c3f      	lsrs	r7, r7, #16
 8001ff0:	19d2      	adds	r2, r2, r7
 8001ff2:	1912      	adds	r2, r2, r4
 8001ff4:	0dcc      	lsrs	r4, r1, #23
 8001ff6:	9904      	ldr	r1, [sp, #16]
 8001ff8:	0270      	lsls	r0, r6, #9
 8001ffa:	4308      	orrs	r0, r1
 8001ffc:	1e41      	subs	r1, r0, #1
 8001ffe:	4188      	sbcs	r0, r1
 8002000:	4641      	mov	r1, r8
 8002002:	444a      	add	r2, r9
 8002004:	0df6      	lsrs	r6, r6, #23
 8002006:	0252      	lsls	r2, r2, #9
 8002008:	4330      	orrs	r0, r6
 800200a:	0249      	lsls	r1, r1, #9
 800200c:	4314      	orrs	r4, r2
 800200e:	4308      	orrs	r0, r1
 8002010:	01d2      	lsls	r2, r2, #7
 8002012:	d535      	bpl.n	8002080 <__aeabi_dmul+0x514>
 8002014:	2201      	movs	r2, #1
 8002016:	0843      	lsrs	r3, r0, #1
 8002018:	4002      	ands	r2, r0
 800201a:	4313      	orrs	r3, r2
 800201c:	07e0      	lsls	r0, r4, #31
 800201e:	4318      	orrs	r0, r3
 8002020:	0864      	lsrs	r4, r4, #1
 8002022:	e634      	b.n	8001c8e <__aeabi_dmul+0x122>
 8002024:	9b00      	ldr	r3, [sp, #0]
 8002026:	46a2      	mov	sl, r4
 8002028:	469b      	mov	fp, r3
 800202a:	4681      	mov	r9, r0
 800202c:	2480      	movs	r4, #128	@ 0x80
 800202e:	4653      	mov	r3, sl
 8002030:	0324      	lsls	r4, r4, #12
 8002032:	431c      	orrs	r4, r3
 8002034:	0324      	lsls	r4, r4, #12
 8002036:	464a      	mov	r2, r9
 8002038:	4b2e      	ldr	r3, [pc, #184]	@ (80020f4 <__aeabi_dmul+0x588>)
 800203a:	0b24      	lsrs	r4, r4, #12
 800203c:	e5ec      	b.n	8001c18 <__aeabi_dmul+0xac>
 800203e:	f000 fd69 	bl	8002b14 <__clzsi2>
 8002042:	2315      	movs	r3, #21
 8002044:	469c      	mov	ip, r3
 8002046:	4484      	add	ip, r0
 8002048:	0002      	movs	r2, r0
 800204a:	4663      	mov	r3, ip
 800204c:	3220      	adds	r2, #32
 800204e:	2b1c      	cmp	r3, #28
 8002050:	dc00      	bgt.n	8002054 <__aeabi_dmul+0x4e8>
 8002052:	e684      	b.n	8001d5e <__aeabi_dmul+0x1f2>
 8002054:	2300      	movs	r3, #0
 8002056:	4699      	mov	r9, r3
 8002058:	0023      	movs	r3, r4
 800205a:	3808      	subs	r0, #8
 800205c:	4083      	lsls	r3, r0
 800205e:	469a      	mov	sl, r3
 8002060:	e68e      	b.n	8001d80 <__aeabi_dmul+0x214>
 8002062:	f000 fd57 	bl	8002b14 <__clzsi2>
 8002066:	0002      	movs	r2, r0
 8002068:	0003      	movs	r3, r0
 800206a:	3215      	adds	r2, #21
 800206c:	3320      	adds	r3, #32
 800206e:	2a1c      	cmp	r2, #28
 8002070:	dc00      	bgt.n	8002074 <__aeabi_dmul+0x508>
 8002072:	e64e      	b.n	8001d12 <__aeabi_dmul+0x1a6>
 8002074:	0002      	movs	r2, r0
 8002076:	0034      	movs	r4, r6
 8002078:	3a08      	subs	r2, #8
 800207a:	2000      	movs	r0, #0
 800207c:	4094      	lsls	r4, r2
 800207e:	e652      	b.n	8001d26 <__aeabi_dmul+0x1ba>
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	e604      	b.n	8001c8e <__aeabi_dmul+0x122>
 8002084:	4b1c      	ldr	r3, [pc, #112]	@ (80020f8 <__aeabi_dmul+0x58c>)
 8002086:	0021      	movs	r1, r4
 8002088:	469c      	mov	ip, r3
 800208a:	0003      	movs	r3, r0
 800208c:	9d01      	ldr	r5, [sp, #4]
 800208e:	40d3      	lsrs	r3, r2
 8002090:	4465      	add	r5, ip
 8002092:	40a9      	lsls	r1, r5
 8002094:	4319      	orrs	r1, r3
 8002096:	0003      	movs	r3, r0
 8002098:	40ab      	lsls	r3, r5
 800209a:	1e58      	subs	r0, r3, #1
 800209c:	4183      	sbcs	r3, r0
 800209e:	4319      	orrs	r1, r3
 80020a0:	0008      	movs	r0, r1
 80020a2:	40d4      	lsrs	r4, r2
 80020a4:	074b      	lsls	r3, r1, #29
 80020a6:	d009      	beq.n	80020bc <__aeabi_dmul+0x550>
 80020a8:	230f      	movs	r3, #15
 80020aa:	400b      	ands	r3, r1
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d005      	beq.n	80020bc <__aeabi_dmul+0x550>
 80020b0:	1d0b      	adds	r3, r1, #4
 80020b2:	428b      	cmp	r3, r1
 80020b4:	4180      	sbcs	r0, r0
 80020b6:	4240      	negs	r0, r0
 80020b8:	1824      	adds	r4, r4, r0
 80020ba:	0018      	movs	r0, r3
 80020bc:	0223      	lsls	r3, r4, #8
 80020be:	d400      	bmi.n	80020c2 <__aeabi_dmul+0x556>
 80020c0:	e6d6      	b.n	8001e70 <__aeabi_dmul+0x304>
 80020c2:	2301      	movs	r3, #1
 80020c4:	2400      	movs	r4, #0
 80020c6:	2200      	movs	r2, #0
 80020c8:	e5a6      	b.n	8001c18 <__aeabi_dmul+0xac>
 80020ca:	290f      	cmp	r1, #15
 80020cc:	d1aa      	bne.n	8002024 <__aeabi_dmul+0x4b8>
 80020ce:	2380      	movs	r3, #128	@ 0x80
 80020d0:	4652      	mov	r2, sl
 80020d2:	031b      	lsls	r3, r3, #12
 80020d4:	421a      	tst	r2, r3
 80020d6:	d0a9      	beq.n	800202c <__aeabi_dmul+0x4c0>
 80020d8:	421c      	tst	r4, r3
 80020da:	d1a7      	bne.n	800202c <__aeabi_dmul+0x4c0>
 80020dc:	431c      	orrs	r4, r3
 80020de:	9b00      	ldr	r3, [sp, #0]
 80020e0:	0002      	movs	r2, r0
 80020e2:	469b      	mov	fp, r3
 80020e4:	4b03      	ldr	r3, [pc, #12]	@ (80020f4 <__aeabi_dmul+0x588>)
 80020e6:	e597      	b.n	8001c18 <__aeabi_dmul+0xac>
 80020e8:	2400      	movs	r4, #0
 80020ea:	e6c1      	b.n	8001e70 <__aeabi_dmul+0x304>
 80020ec:	2400      	movs	r4, #0
 80020ee:	4b01      	ldr	r3, [pc, #4]	@ (80020f4 <__aeabi_dmul+0x588>)
 80020f0:	0022      	movs	r2, r4
 80020f2:	e591      	b.n	8001c18 <__aeabi_dmul+0xac>
 80020f4:	000007ff 	.word	0x000007ff
 80020f8:	0000041e 	.word	0x0000041e

080020fc <__aeabi_dsub>:
 80020fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fe:	464e      	mov	r6, r9
 8002100:	4645      	mov	r5, r8
 8002102:	46de      	mov	lr, fp
 8002104:	4657      	mov	r7, sl
 8002106:	b5e0      	push	{r5, r6, r7, lr}
 8002108:	b085      	sub	sp, #20
 800210a:	9000      	str	r0, [sp, #0]
 800210c:	9101      	str	r1, [sp, #4]
 800210e:	030c      	lsls	r4, r1, #12
 8002110:	004f      	lsls	r7, r1, #1
 8002112:	0fce      	lsrs	r6, r1, #31
 8002114:	0a61      	lsrs	r1, r4, #9
 8002116:	9c00      	ldr	r4, [sp, #0]
 8002118:	46b0      	mov	r8, r6
 800211a:	0f64      	lsrs	r4, r4, #29
 800211c:	430c      	orrs	r4, r1
 800211e:	9900      	ldr	r1, [sp, #0]
 8002120:	0d7f      	lsrs	r7, r7, #21
 8002122:	00c8      	lsls	r0, r1, #3
 8002124:	0011      	movs	r1, r2
 8002126:	001a      	movs	r2, r3
 8002128:	031b      	lsls	r3, r3, #12
 800212a:	469c      	mov	ip, r3
 800212c:	9100      	str	r1, [sp, #0]
 800212e:	9201      	str	r2, [sp, #4]
 8002130:	0051      	lsls	r1, r2, #1
 8002132:	0d4b      	lsrs	r3, r1, #21
 8002134:	4699      	mov	r9, r3
 8002136:	9b01      	ldr	r3, [sp, #4]
 8002138:	9d00      	ldr	r5, [sp, #0]
 800213a:	0fd9      	lsrs	r1, r3, #31
 800213c:	4663      	mov	r3, ip
 800213e:	0f6a      	lsrs	r2, r5, #29
 8002140:	0a5b      	lsrs	r3, r3, #9
 8002142:	4313      	orrs	r3, r2
 8002144:	00ea      	lsls	r2, r5, #3
 8002146:	4694      	mov	ip, r2
 8002148:	4693      	mov	fp, r2
 800214a:	4ac1      	ldr	r2, [pc, #772]	@ (8002450 <__aeabi_dsub+0x354>)
 800214c:	9003      	str	r0, [sp, #12]
 800214e:	9302      	str	r3, [sp, #8]
 8002150:	4591      	cmp	r9, r2
 8002152:	d100      	bne.n	8002156 <__aeabi_dsub+0x5a>
 8002154:	e0cd      	b.n	80022f2 <__aeabi_dsub+0x1f6>
 8002156:	2501      	movs	r5, #1
 8002158:	4069      	eors	r1, r5
 800215a:	464d      	mov	r5, r9
 800215c:	1b7d      	subs	r5, r7, r5
 800215e:	46aa      	mov	sl, r5
 8002160:	428e      	cmp	r6, r1
 8002162:	d100      	bne.n	8002166 <__aeabi_dsub+0x6a>
 8002164:	e080      	b.n	8002268 <__aeabi_dsub+0x16c>
 8002166:	2d00      	cmp	r5, #0
 8002168:	dc00      	bgt.n	800216c <__aeabi_dsub+0x70>
 800216a:	e335      	b.n	80027d8 <__aeabi_dsub+0x6dc>
 800216c:	4649      	mov	r1, r9
 800216e:	2900      	cmp	r1, #0
 8002170:	d100      	bne.n	8002174 <__aeabi_dsub+0x78>
 8002172:	e0df      	b.n	8002334 <__aeabi_dsub+0x238>
 8002174:	4297      	cmp	r7, r2
 8002176:	d100      	bne.n	800217a <__aeabi_dsub+0x7e>
 8002178:	e194      	b.n	80024a4 <__aeabi_dsub+0x3a8>
 800217a:	4652      	mov	r2, sl
 800217c:	2501      	movs	r5, #1
 800217e:	2a38      	cmp	r2, #56	@ 0x38
 8002180:	dc19      	bgt.n	80021b6 <__aeabi_dsub+0xba>
 8002182:	2280      	movs	r2, #128	@ 0x80
 8002184:	9b02      	ldr	r3, [sp, #8]
 8002186:	0412      	lsls	r2, r2, #16
 8002188:	4313      	orrs	r3, r2
 800218a:	9302      	str	r3, [sp, #8]
 800218c:	4652      	mov	r2, sl
 800218e:	2a1f      	cmp	r2, #31
 8002190:	dd00      	ble.n	8002194 <__aeabi_dsub+0x98>
 8002192:	e1e3      	b.n	800255c <__aeabi_dsub+0x460>
 8002194:	4653      	mov	r3, sl
 8002196:	2220      	movs	r2, #32
 8002198:	4661      	mov	r1, ip
 800219a:	9d02      	ldr	r5, [sp, #8]
 800219c:	1ad2      	subs	r2, r2, r3
 800219e:	4095      	lsls	r5, r2
 80021a0:	40d9      	lsrs	r1, r3
 80021a2:	430d      	orrs	r5, r1
 80021a4:	4661      	mov	r1, ip
 80021a6:	4091      	lsls	r1, r2
 80021a8:	000a      	movs	r2, r1
 80021aa:	1e51      	subs	r1, r2, #1
 80021ac:	418a      	sbcs	r2, r1
 80021ae:	4315      	orrs	r5, r2
 80021b0:	9a02      	ldr	r2, [sp, #8]
 80021b2:	40da      	lsrs	r2, r3
 80021b4:	1aa4      	subs	r4, r4, r2
 80021b6:	1b45      	subs	r5, r0, r5
 80021b8:	42a8      	cmp	r0, r5
 80021ba:	4180      	sbcs	r0, r0
 80021bc:	4240      	negs	r0, r0
 80021be:	1a24      	subs	r4, r4, r0
 80021c0:	0223      	lsls	r3, r4, #8
 80021c2:	d400      	bmi.n	80021c6 <__aeabi_dsub+0xca>
 80021c4:	e13d      	b.n	8002442 <__aeabi_dsub+0x346>
 80021c6:	0264      	lsls	r4, r4, #9
 80021c8:	0a64      	lsrs	r4, r4, #9
 80021ca:	2c00      	cmp	r4, #0
 80021cc:	d100      	bne.n	80021d0 <__aeabi_dsub+0xd4>
 80021ce:	e147      	b.n	8002460 <__aeabi_dsub+0x364>
 80021d0:	0020      	movs	r0, r4
 80021d2:	f000 fc9f 	bl	8002b14 <__clzsi2>
 80021d6:	0003      	movs	r3, r0
 80021d8:	3b08      	subs	r3, #8
 80021da:	2120      	movs	r1, #32
 80021dc:	0028      	movs	r0, r5
 80021de:	1aca      	subs	r2, r1, r3
 80021e0:	40d0      	lsrs	r0, r2
 80021e2:	409c      	lsls	r4, r3
 80021e4:	0002      	movs	r2, r0
 80021e6:	409d      	lsls	r5, r3
 80021e8:	4322      	orrs	r2, r4
 80021ea:	429f      	cmp	r7, r3
 80021ec:	dd00      	ble.n	80021f0 <__aeabi_dsub+0xf4>
 80021ee:	e177      	b.n	80024e0 <__aeabi_dsub+0x3e4>
 80021f0:	1bd8      	subs	r0, r3, r7
 80021f2:	3001      	adds	r0, #1
 80021f4:	1a09      	subs	r1, r1, r0
 80021f6:	002c      	movs	r4, r5
 80021f8:	408d      	lsls	r5, r1
 80021fa:	40c4      	lsrs	r4, r0
 80021fc:	1e6b      	subs	r3, r5, #1
 80021fe:	419d      	sbcs	r5, r3
 8002200:	0013      	movs	r3, r2
 8002202:	40c2      	lsrs	r2, r0
 8002204:	408b      	lsls	r3, r1
 8002206:	4325      	orrs	r5, r4
 8002208:	2700      	movs	r7, #0
 800220a:	0014      	movs	r4, r2
 800220c:	431d      	orrs	r5, r3
 800220e:	076b      	lsls	r3, r5, #29
 8002210:	d009      	beq.n	8002226 <__aeabi_dsub+0x12a>
 8002212:	230f      	movs	r3, #15
 8002214:	402b      	ands	r3, r5
 8002216:	2b04      	cmp	r3, #4
 8002218:	d005      	beq.n	8002226 <__aeabi_dsub+0x12a>
 800221a:	1d2b      	adds	r3, r5, #4
 800221c:	42ab      	cmp	r3, r5
 800221e:	41ad      	sbcs	r5, r5
 8002220:	426d      	negs	r5, r5
 8002222:	1964      	adds	r4, r4, r5
 8002224:	001d      	movs	r5, r3
 8002226:	0223      	lsls	r3, r4, #8
 8002228:	d400      	bmi.n	800222c <__aeabi_dsub+0x130>
 800222a:	e140      	b.n	80024ae <__aeabi_dsub+0x3b2>
 800222c:	4a88      	ldr	r2, [pc, #544]	@ (8002450 <__aeabi_dsub+0x354>)
 800222e:	3701      	adds	r7, #1
 8002230:	4297      	cmp	r7, r2
 8002232:	d100      	bne.n	8002236 <__aeabi_dsub+0x13a>
 8002234:	e101      	b.n	800243a <__aeabi_dsub+0x33e>
 8002236:	2601      	movs	r6, #1
 8002238:	4643      	mov	r3, r8
 800223a:	4986      	ldr	r1, [pc, #536]	@ (8002454 <__aeabi_dsub+0x358>)
 800223c:	08ed      	lsrs	r5, r5, #3
 800223e:	4021      	ands	r1, r4
 8002240:	074a      	lsls	r2, r1, #29
 8002242:	432a      	orrs	r2, r5
 8002244:	057c      	lsls	r4, r7, #21
 8002246:	024d      	lsls	r5, r1, #9
 8002248:	0b2d      	lsrs	r5, r5, #12
 800224a:	0d64      	lsrs	r4, r4, #21
 800224c:	401e      	ands	r6, r3
 800224e:	0524      	lsls	r4, r4, #20
 8002250:	432c      	orrs	r4, r5
 8002252:	07f6      	lsls	r6, r6, #31
 8002254:	4334      	orrs	r4, r6
 8002256:	0010      	movs	r0, r2
 8002258:	0021      	movs	r1, r4
 800225a:	b005      	add	sp, #20
 800225c:	bcf0      	pop	{r4, r5, r6, r7}
 800225e:	46bb      	mov	fp, r7
 8002260:	46b2      	mov	sl, r6
 8002262:	46a9      	mov	r9, r5
 8002264:	46a0      	mov	r8, r4
 8002266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002268:	2d00      	cmp	r5, #0
 800226a:	dc00      	bgt.n	800226e <__aeabi_dsub+0x172>
 800226c:	e2d0      	b.n	8002810 <__aeabi_dsub+0x714>
 800226e:	4649      	mov	r1, r9
 8002270:	2900      	cmp	r1, #0
 8002272:	d000      	beq.n	8002276 <__aeabi_dsub+0x17a>
 8002274:	e0d4      	b.n	8002420 <__aeabi_dsub+0x324>
 8002276:	4661      	mov	r1, ip
 8002278:	9b02      	ldr	r3, [sp, #8]
 800227a:	4319      	orrs	r1, r3
 800227c:	d100      	bne.n	8002280 <__aeabi_dsub+0x184>
 800227e:	e12b      	b.n	80024d8 <__aeabi_dsub+0x3dc>
 8002280:	1e69      	subs	r1, r5, #1
 8002282:	2d01      	cmp	r5, #1
 8002284:	d100      	bne.n	8002288 <__aeabi_dsub+0x18c>
 8002286:	e1d9      	b.n	800263c <__aeabi_dsub+0x540>
 8002288:	4295      	cmp	r5, r2
 800228a:	d100      	bne.n	800228e <__aeabi_dsub+0x192>
 800228c:	e10a      	b.n	80024a4 <__aeabi_dsub+0x3a8>
 800228e:	2501      	movs	r5, #1
 8002290:	2938      	cmp	r1, #56	@ 0x38
 8002292:	dc17      	bgt.n	80022c4 <__aeabi_dsub+0x1c8>
 8002294:	468a      	mov	sl, r1
 8002296:	4653      	mov	r3, sl
 8002298:	2b1f      	cmp	r3, #31
 800229a:	dd00      	ble.n	800229e <__aeabi_dsub+0x1a2>
 800229c:	e1e7      	b.n	800266e <__aeabi_dsub+0x572>
 800229e:	2220      	movs	r2, #32
 80022a0:	1ad2      	subs	r2, r2, r3
 80022a2:	9b02      	ldr	r3, [sp, #8]
 80022a4:	4661      	mov	r1, ip
 80022a6:	4093      	lsls	r3, r2
 80022a8:	001d      	movs	r5, r3
 80022aa:	4653      	mov	r3, sl
 80022ac:	40d9      	lsrs	r1, r3
 80022ae:	4663      	mov	r3, ip
 80022b0:	4093      	lsls	r3, r2
 80022b2:	001a      	movs	r2, r3
 80022b4:	430d      	orrs	r5, r1
 80022b6:	1e51      	subs	r1, r2, #1
 80022b8:	418a      	sbcs	r2, r1
 80022ba:	4653      	mov	r3, sl
 80022bc:	4315      	orrs	r5, r2
 80022be:	9a02      	ldr	r2, [sp, #8]
 80022c0:	40da      	lsrs	r2, r3
 80022c2:	18a4      	adds	r4, r4, r2
 80022c4:	182d      	adds	r5, r5, r0
 80022c6:	4285      	cmp	r5, r0
 80022c8:	4180      	sbcs	r0, r0
 80022ca:	4240      	negs	r0, r0
 80022cc:	1824      	adds	r4, r4, r0
 80022ce:	0223      	lsls	r3, r4, #8
 80022d0:	d400      	bmi.n	80022d4 <__aeabi_dsub+0x1d8>
 80022d2:	e0b6      	b.n	8002442 <__aeabi_dsub+0x346>
 80022d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002450 <__aeabi_dsub+0x354>)
 80022d6:	3701      	adds	r7, #1
 80022d8:	429f      	cmp	r7, r3
 80022da:	d100      	bne.n	80022de <__aeabi_dsub+0x1e2>
 80022dc:	e0ad      	b.n	800243a <__aeabi_dsub+0x33e>
 80022de:	2101      	movs	r1, #1
 80022e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002454 <__aeabi_dsub+0x358>)
 80022e2:	086a      	lsrs	r2, r5, #1
 80022e4:	401c      	ands	r4, r3
 80022e6:	4029      	ands	r1, r5
 80022e8:	430a      	orrs	r2, r1
 80022ea:	07e5      	lsls	r5, r4, #31
 80022ec:	4315      	orrs	r5, r2
 80022ee:	0864      	lsrs	r4, r4, #1
 80022f0:	e78d      	b.n	800220e <__aeabi_dsub+0x112>
 80022f2:	4a59      	ldr	r2, [pc, #356]	@ (8002458 <__aeabi_dsub+0x35c>)
 80022f4:	9b02      	ldr	r3, [sp, #8]
 80022f6:	4692      	mov	sl, r2
 80022f8:	4662      	mov	r2, ip
 80022fa:	44ba      	add	sl, r7
 80022fc:	431a      	orrs	r2, r3
 80022fe:	d02c      	beq.n	800235a <__aeabi_dsub+0x25e>
 8002300:	428e      	cmp	r6, r1
 8002302:	d02e      	beq.n	8002362 <__aeabi_dsub+0x266>
 8002304:	4652      	mov	r2, sl
 8002306:	2a00      	cmp	r2, #0
 8002308:	d060      	beq.n	80023cc <__aeabi_dsub+0x2d0>
 800230a:	2f00      	cmp	r7, #0
 800230c:	d100      	bne.n	8002310 <__aeabi_dsub+0x214>
 800230e:	e0db      	b.n	80024c8 <__aeabi_dsub+0x3cc>
 8002310:	4663      	mov	r3, ip
 8002312:	000e      	movs	r6, r1
 8002314:	9c02      	ldr	r4, [sp, #8]
 8002316:	08d8      	lsrs	r0, r3, #3
 8002318:	0762      	lsls	r2, r4, #29
 800231a:	4302      	orrs	r2, r0
 800231c:	08e4      	lsrs	r4, r4, #3
 800231e:	0013      	movs	r3, r2
 8002320:	4323      	orrs	r3, r4
 8002322:	d100      	bne.n	8002326 <__aeabi_dsub+0x22a>
 8002324:	e254      	b.n	80027d0 <__aeabi_dsub+0x6d4>
 8002326:	2580      	movs	r5, #128	@ 0x80
 8002328:	032d      	lsls	r5, r5, #12
 800232a:	4325      	orrs	r5, r4
 800232c:	032d      	lsls	r5, r5, #12
 800232e:	4c48      	ldr	r4, [pc, #288]	@ (8002450 <__aeabi_dsub+0x354>)
 8002330:	0b2d      	lsrs	r5, r5, #12
 8002332:	e78c      	b.n	800224e <__aeabi_dsub+0x152>
 8002334:	4661      	mov	r1, ip
 8002336:	9b02      	ldr	r3, [sp, #8]
 8002338:	4319      	orrs	r1, r3
 800233a:	d100      	bne.n	800233e <__aeabi_dsub+0x242>
 800233c:	e0cc      	b.n	80024d8 <__aeabi_dsub+0x3dc>
 800233e:	0029      	movs	r1, r5
 8002340:	3901      	subs	r1, #1
 8002342:	2d01      	cmp	r5, #1
 8002344:	d100      	bne.n	8002348 <__aeabi_dsub+0x24c>
 8002346:	e188      	b.n	800265a <__aeabi_dsub+0x55e>
 8002348:	4295      	cmp	r5, r2
 800234a:	d100      	bne.n	800234e <__aeabi_dsub+0x252>
 800234c:	e0aa      	b.n	80024a4 <__aeabi_dsub+0x3a8>
 800234e:	2501      	movs	r5, #1
 8002350:	2938      	cmp	r1, #56	@ 0x38
 8002352:	dd00      	ble.n	8002356 <__aeabi_dsub+0x25a>
 8002354:	e72f      	b.n	80021b6 <__aeabi_dsub+0xba>
 8002356:	468a      	mov	sl, r1
 8002358:	e718      	b.n	800218c <__aeabi_dsub+0x90>
 800235a:	2201      	movs	r2, #1
 800235c:	4051      	eors	r1, r2
 800235e:	428e      	cmp	r6, r1
 8002360:	d1d0      	bne.n	8002304 <__aeabi_dsub+0x208>
 8002362:	4653      	mov	r3, sl
 8002364:	2b00      	cmp	r3, #0
 8002366:	d100      	bne.n	800236a <__aeabi_dsub+0x26e>
 8002368:	e0be      	b.n	80024e8 <__aeabi_dsub+0x3ec>
 800236a:	2f00      	cmp	r7, #0
 800236c:	d000      	beq.n	8002370 <__aeabi_dsub+0x274>
 800236e:	e138      	b.n	80025e2 <__aeabi_dsub+0x4e6>
 8002370:	46ca      	mov	sl, r9
 8002372:	0022      	movs	r2, r4
 8002374:	4302      	orrs	r2, r0
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x27e>
 8002378:	e1e2      	b.n	8002740 <__aeabi_dsub+0x644>
 800237a:	4653      	mov	r3, sl
 800237c:	1e59      	subs	r1, r3, #1
 800237e:	2b01      	cmp	r3, #1
 8002380:	d100      	bne.n	8002384 <__aeabi_dsub+0x288>
 8002382:	e20d      	b.n	80027a0 <__aeabi_dsub+0x6a4>
 8002384:	4a32      	ldr	r2, [pc, #200]	@ (8002450 <__aeabi_dsub+0x354>)
 8002386:	4592      	cmp	sl, r2
 8002388:	d100      	bne.n	800238c <__aeabi_dsub+0x290>
 800238a:	e1d2      	b.n	8002732 <__aeabi_dsub+0x636>
 800238c:	2701      	movs	r7, #1
 800238e:	2938      	cmp	r1, #56	@ 0x38
 8002390:	dc13      	bgt.n	80023ba <__aeabi_dsub+0x2be>
 8002392:	291f      	cmp	r1, #31
 8002394:	dd00      	ble.n	8002398 <__aeabi_dsub+0x29c>
 8002396:	e1ee      	b.n	8002776 <__aeabi_dsub+0x67a>
 8002398:	2220      	movs	r2, #32
 800239a:	9b02      	ldr	r3, [sp, #8]
 800239c:	1a52      	subs	r2, r2, r1
 800239e:	0025      	movs	r5, r4
 80023a0:	0007      	movs	r7, r0
 80023a2:	469a      	mov	sl, r3
 80023a4:	40cc      	lsrs	r4, r1
 80023a6:	4090      	lsls	r0, r2
 80023a8:	4095      	lsls	r5, r2
 80023aa:	40cf      	lsrs	r7, r1
 80023ac:	44a2      	add	sl, r4
 80023ae:	1e42      	subs	r2, r0, #1
 80023b0:	4190      	sbcs	r0, r2
 80023b2:	4653      	mov	r3, sl
 80023b4:	432f      	orrs	r7, r5
 80023b6:	4307      	orrs	r7, r0
 80023b8:	9302      	str	r3, [sp, #8]
 80023ba:	003d      	movs	r5, r7
 80023bc:	4465      	add	r5, ip
 80023be:	4565      	cmp	r5, ip
 80023c0:	4192      	sbcs	r2, r2
 80023c2:	9b02      	ldr	r3, [sp, #8]
 80023c4:	4252      	negs	r2, r2
 80023c6:	464f      	mov	r7, r9
 80023c8:	18d4      	adds	r4, r2, r3
 80023ca:	e780      	b.n	80022ce <__aeabi_dsub+0x1d2>
 80023cc:	4a23      	ldr	r2, [pc, #140]	@ (800245c <__aeabi_dsub+0x360>)
 80023ce:	1c7d      	adds	r5, r7, #1
 80023d0:	4215      	tst	r5, r2
 80023d2:	d000      	beq.n	80023d6 <__aeabi_dsub+0x2da>
 80023d4:	e0aa      	b.n	800252c <__aeabi_dsub+0x430>
 80023d6:	4662      	mov	r2, ip
 80023d8:	0025      	movs	r5, r4
 80023da:	9b02      	ldr	r3, [sp, #8]
 80023dc:	4305      	orrs	r5, r0
 80023de:	431a      	orrs	r2, r3
 80023e0:	2f00      	cmp	r7, #0
 80023e2:	d000      	beq.n	80023e6 <__aeabi_dsub+0x2ea>
 80023e4:	e0f5      	b.n	80025d2 <__aeabi_dsub+0x4d6>
 80023e6:	2d00      	cmp	r5, #0
 80023e8:	d100      	bne.n	80023ec <__aeabi_dsub+0x2f0>
 80023ea:	e16b      	b.n	80026c4 <__aeabi_dsub+0x5c8>
 80023ec:	2a00      	cmp	r2, #0
 80023ee:	d100      	bne.n	80023f2 <__aeabi_dsub+0x2f6>
 80023f0:	e152      	b.n	8002698 <__aeabi_dsub+0x59c>
 80023f2:	4663      	mov	r3, ip
 80023f4:	1ac5      	subs	r5, r0, r3
 80023f6:	9b02      	ldr	r3, [sp, #8]
 80023f8:	1ae2      	subs	r2, r4, r3
 80023fa:	42a8      	cmp	r0, r5
 80023fc:	419b      	sbcs	r3, r3
 80023fe:	425b      	negs	r3, r3
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	021a      	lsls	r2, r3, #8
 8002404:	d400      	bmi.n	8002408 <__aeabi_dsub+0x30c>
 8002406:	e1d5      	b.n	80027b4 <__aeabi_dsub+0x6b8>
 8002408:	4663      	mov	r3, ip
 800240a:	1a1d      	subs	r5, r3, r0
 800240c:	45ac      	cmp	ip, r5
 800240e:	4192      	sbcs	r2, r2
 8002410:	2601      	movs	r6, #1
 8002412:	9b02      	ldr	r3, [sp, #8]
 8002414:	4252      	negs	r2, r2
 8002416:	1b1c      	subs	r4, r3, r4
 8002418:	4688      	mov	r8, r1
 800241a:	1aa4      	subs	r4, r4, r2
 800241c:	400e      	ands	r6, r1
 800241e:	e6f6      	b.n	800220e <__aeabi_dsub+0x112>
 8002420:	4297      	cmp	r7, r2
 8002422:	d03f      	beq.n	80024a4 <__aeabi_dsub+0x3a8>
 8002424:	4652      	mov	r2, sl
 8002426:	2501      	movs	r5, #1
 8002428:	2a38      	cmp	r2, #56	@ 0x38
 800242a:	dd00      	ble.n	800242e <__aeabi_dsub+0x332>
 800242c:	e74a      	b.n	80022c4 <__aeabi_dsub+0x1c8>
 800242e:	2280      	movs	r2, #128	@ 0x80
 8002430:	9b02      	ldr	r3, [sp, #8]
 8002432:	0412      	lsls	r2, r2, #16
 8002434:	4313      	orrs	r3, r2
 8002436:	9302      	str	r3, [sp, #8]
 8002438:	e72d      	b.n	8002296 <__aeabi_dsub+0x19a>
 800243a:	003c      	movs	r4, r7
 800243c:	2500      	movs	r5, #0
 800243e:	2200      	movs	r2, #0
 8002440:	e705      	b.n	800224e <__aeabi_dsub+0x152>
 8002442:	2307      	movs	r3, #7
 8002444:	402b      	ands	r3, r5
 8002446:	2b00      	cmp	r3, #0
 8002448:	d000      	beq.n	800244c <__aeabi_dsub+0x350>
 800244a:	e6e2      	b.n	8002212 <__aeabi_dsub+0x116>
 800244c:	e06b      	b.n	8002526 <__aeabi_dsub+0x42a>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff
 8002454:	ff7fffff 	.word	0xff7fffff
 8002458:	fffff801 	.word	0xfffff801
 800245c:	000007fe 	.word	0x000007fe
 8002460:	0028      	movs	r0, r5
 8002462:	f000 fb57 	bl	8002b14 <__clzsi2>
 8002466:	0003      	movs	r3, r0
 8002468:	3318      	adds	r3, #24
 800246a:	2b1f      	cmp	r3, #31
 800246c:	dc00      	bgt.n	8002470 <__aeabi_dsub+0x374>
 800246e:	e6b4      	b.n	80021da <__aeabi_dsub+0xde>
 8002470:	002a      	movs	r2, r5
 8002472:	3808      	subs	r0, #8
 8002474:	4082      	lsls	r2, r0
 8002476:	429f      	cmp	r7, r3
 8002478:	dd00      	ble.n	800247c <__aeabi_dsub+0x380>
 800247a:	e0b9      	b.n	80025f0 <__aeabi_dsub+0x4f4>
 800247c:	1bdb      	subs	r3, r3, r7
 800247e:	1c58      	adds	r0, r3, #1
 8002480:	281f      	cmp	r0, #31
 8002482:	dc00      	bgt.n	8002486 <__aeabi_dsub+0x38a>
 8002484:	e1a0      	b.n	80027c8 <__aeabi_dsub+0x6cc>
 8002486:	0015      	movs	r5, r2
 8002488:	3b1f      	subs	r3, #31
 800248a:	40dd      	lsrs	r5, r3
 800248c:	2820      	cmp	r0, #32
 800248e:	d005      	beq.n	800249c <__aeabi_dsub+0x3a0>
 8002490:	2340      	movs	r3, #64	@ 0x40
 8002492:	1a1b      	subs	r3, r3, r0
 8002494:	409a      	lsls	r2, r3
 8002496:	1e53      	subs	r3, r2, #1
 8002498:	419a      	sbcs	r2, r3
 800249a:	4315      	orrs	r5, r2
 800249c:	2307      	movs	r3, #7
 800249e:	2700      	movs	r7, #0
 80024a0:	402b      	ands	r3, r5
 80024a2:	e7d0      	b.n	8002446 <__aeabi_dsub+0x34a>
 80024a4:	08c0      	lsrs	r0, r0, #3
 80024a6:	0762      	lsls	r2, r4, #29
 80024a8:	4302      	orrs	r2, r0
 80024aa:	08e4      	lsrs	r4, r4, #3
 80024ac:	e737      	b.n	800231e <__aeabi_dsub+0x222>
 80024ae:	08ea      	lsrs	r2, r5, #3
 80024b0:	0763      	lsls	r3, r4, #29
 80024b2:	431a      	orrs	r2, r3
 80024b4:	4bd3      	ldr	r3, [pc, #844]	@ (8002804 <__aeabi_dsub+0x708>)
 80024b6:	08e4      	lsrs	r4, r4, #3
 80024b8:	429f      	cmp	r7, r3
 80024ba:	d100      	bne.n	80024be <__aeabi_dsub+0x3c2>
 80024bc:	e72f      	b.n	800231e <__aeabi_dsub+0x222>
 80024be:	0324      	lsls	r4, r4, #12
 80024c0:	0b25      	lsrs	r5, r4, #12
 80024c2:	057c      	lsls	r4, r7, #21
 80024c4:	0d64      	lsrs	r4, r4, #21
 80024c6:	e6c2      	b.n	800224e <__aeabi_dsub+0x152>
 80024c8:	46ca      	mov	sl, r9
 80024ca:	0022      	movs	r2, r4
 80024cc:	4302      	orrs	r2, r0
 80024ce:	d158      	bne.n	8002582 <__aeabi_dsub+0x486>
 80024d0:	4663      	mov	r3, ip
 80024d2:	000e      	movs	r6, r1
 80024d4:	9c02      	ldr	r4, [sp, #8]
 80024d6:	9303      	str	r3, [sp, #12]
 80024d8:	9b03      	ldr	r3, [sp, #12]
 80024da:	4657      	mov	r7, sl
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	e7e7      	b.n	80024b0 <__aeabi_dsub+0x3b4>
 80024e0:	4cc9      	ldr	r4, [pc, #804]	@ (8002808 <__aeabi_dsub+0x70c>)
 80024e2:	1aff      	subs	r7, r7, r3
 80024e4:	4014      	ands	r4, r2
 80024e6:	e692      	b.n	800220e <__aeabi_dsub+0x112>
 80024e8:	4dc8      	ldr	r5, [pc, #800]	@ (800280c <__aeabi_dsub+0x710>)
 80024ea:	1c7a      	adds	r2, r7, #1
 80024ec:	422a      	tst	r2, r5
 80024ee:	d000      	beq.n	80024f2 <__aeabi_dsub+0x3f6>
 80024f0:	e084      	b.n	80025fc <__aeabi_dsub+0x500>
 80024f2:	0022      	movs	r2, r4
 80024f4:	4302      	orrs	r2, r0
 80024f6:	2f00      	cmp	r7, #0
 80024f8:	d000      	beq.n	80024fc <__aeabi_dsub+0x400>
 80024fa:	e0ef      	b.n	80026dc <__aeabi_dsub+0x5e0>
 80024fc:	2a00      	cmp	r2, #0
 80024fe:	d100      	bne.n	8002502 <__aeabi_dsub+0x406>
 8002500:	e0e5      	b.n	80026ce <__aeabi_dsub+0x5d2>
 8002502:	4662      	mov	r2, ip
 8002504:	9902      	ldr	r1, [sp, #8]
 8002506:	430a      	orrs	r2, r1
 8002508:	d100      	bne.n	800250c <__aeabi_dsub+0x410>
 800250a:	e0c5      	b.n	8002698 <__aeabi_dsub+0x59c>
 800250c:	4663      	mov	r3, ip
 800250e:	18c5      	adds	r5, r0, r3
 8002510:	468c      	mov	ip, r1
 8002512:	4285      	cmp	r5, r0
 8002514:	4180      	sbcs	r0, r0
 8002516:	4464      	add	r4, ip
 8002518:	4240      	negs	r0, r0
 800251a:	1824      	adds	r4, r4, r0
 800251c:	0223      	lsls	r3, r4, #8
 800251e:	d502      	bpl.n	8002526 <__aeabi_dsub+0x42a>
 8002520:	4bb9      	ldr	r3, [pc, #740]	@ (8002808 <__aeabi_dsub+0x70c>)
 8002522:	3701      	adds	r7, #1
 8002524:	401c      	ands	r4, r3
 8002526:	46ba      	mov	sl, r7
 8002528:	9503      	str	r5, [sp, #12]
 800252a:	e7d5      	b.n	80024d8 <__aeabi_dsub+0x3dc>
 800252c:	4662      	mov	r2, ip
 800252e:	1a85      	subs	r5, r0, r2
 8002530:	42a8      	cmp	r0, r5
 8002532:	4192      	sbcs	r2, r2
 8002534:	4252      	negs	r2, r2
 8002536:	4691      	mov	r9, r2
 8002538:	9b02      	ldr	r3, [sp, #8]
 800253a:	1ae3      	subs	r3, r4, r3
 800253c:	001a      	movs	r2, r3
 800253e:	464b      	mov	r3, r9
 8002540:	1ad2      	subs	r2, r2, r3
 8002542:	0013      	movs	r3, r2
 8002544:	4691      	mov	r9, r2
 8002546:	021a      	lsls	r2, r3, #8
 8002548:	d46c      	bmi.n	8002624 <__aeabi_dsub+0x528>
 800254a:	464a      	mov	r2, r9
 800254c:	464c      	mov	r4, r9
 800254e:	432a      	orrs	r2, r5
 8002550:	d000      	beq.n	8002554 <__aeabi_dsub+0x458>
 8002552:	e63a      	b.n	80021ca <__aeabi_dsub+0xce>
 8002554:	2600      	movs	r6, #0
 8002556:	2400      	movs	r4, #0
 8002558:	2500      	movs	r5, #0
 800255a:	e678      	b.n	800224e <__aeabi_dsub+0x152>
 800255c:	9902      	ldr	r1, [sp, #8]
 800255e:	4653      	mov	r3, sl
 8002560:	000d      	movs	r5, r1
 8002562:	3a20      	subs	r2, #32
 8002564:	40d5      	lsrs	r5, r2
 8002566:	2b20      	cmp	r3, #32
 8002568:	d006      	beq.n	8002578 <__aeabi_dsub+0x47c>
 800256a:	2240      	movs	r2, #64	@ 0x40
 800256c:	1ad2      	subs	r2, r2, r3
 800256e:	000b      	movs	r3, r1
 8002570:	4093      	lsls	r3, r2
 8002572:	4662      	mov	r2, ip
 8002574:	431a      	orrs	r2, r3
 8002576:	4693      	mov	fp, r2
 8002578:	465b      	mov	r3, fp
 800257a:	1e5a      	subs	r2, r3, #1
 800257c:	4193      	sbcs	r3, r2
 800257e:	431d      	orrs	r5, r3
 8002580:	e619      	b.n	80021b6 <__aeabi_dsub+0xba>
 8002582:	4653      	mov	r3, sl
 8002584:	1e5a      	subs	r2, r3, #1
 8002586:	2b01      	cmp	r3, #1
 8002588:	d100      	bne.n	800258c <__aeabi_dsub+0x490>
 800258a:	e0c6      	b.n	800271a <__aeabi_dsub+0x61e>
 800258c:	4e9d      	ldr	r6, [pc, #628]	@ (8002804 <__aeabi_dsub+0x708>)
 800258e:	45b2      	cmp	sl, r6
 8002590:	d100      	bne.n	8002594 <__aeabi_dsub+0x498>
 8002592:	e6bd      	b.n	8002310 <__aeabi_dsub+0x214>
 8002594:	4688      	mov	r8, r1
 8002596:	000e      	movs	r6, r1
 8002598:	2501      	movs	r5, #1
 800259a:	2a38      	cmp	r2, #56	@ 0x38
 800259c:	dc10      	bgt.n	80025c0 <__aeabi_dsub+0x4c4>
 800259e:	2a1f      	cmp	r2, #31
 80025a0:	dc7f      	bgt.n	80026a2 <__aeabi_dsub+0x5a6>
 80025a2:	2120      	movs	r1, #32
 80025a4:	0025      	movs	r5, r4
 80025a6:	1a89      	subs	r1, r1, r2
 80025a8:	0007      	movs	r7, r0
 80025aa:	4088      	lsls	r0, r1
 80025ac:	408d      	lsls	r5, r1
 80025ae:	40d7      	lsrs	r7, r2
 80025b0:	40d4      	lsrs	r4, r2
 80025b2:	1e41      	subs	r1, r0, #1
 80025b4:	4188      	sbcs	r0, r1
 80025b6:	9b02      	ldr	r3, [sp, #8]
 80025b8:	433d      	orrs	r5, r7
 80025ba:	1b1b      	subs	r3, r3, r4
 80025bc:	4305      	orrs	r5, r0
 80025be:	9302      	str	r3, [sp, #8]
 80025c0:	4662      	mov	r2, ip
 80025c2:	1b55      	subs	r5, r2, r5
 80025c4:	45ac      	cmp	ip, r5
 80025c6:	4192      	sbcs	r2, r2
 80025c8:	9b02      	ldr	r3, [sp, #8]
 80025ca:	4252      	negs	r2, r2
 80025cc:	464f      	mov	r7, r9
 80025ce:	1a9c      	subs	r4, r3, r2
 80025d0:	e5f6      	b.n	80021c0 <__aeabi_dsub+0xc4>
 80025d2:	2d00      	cmp	r5, #0
 80025d4:	d000      	beq.n	80025d8 <__aeabi_dsub+0x4dc>
 80025d6:	e0b7      	b.n	8002748 <__aeabi_dsub+0x64c>
 80025d8:	2a00      	cmp	r2, #0
 80025da:	d100      	bne.n	80025de <__aeabi_dsub+0x4e2>
 80025dc:	e0f0      	b.n	80027c0 <__aeabi_dsub+0x6c4>
 80025de:	2601      	movs	r6, #1
 80025e0:	400e      	ands	r6, r1
 80025e2:	4663      	mov	r3, ip
 80025e4:	9802      	ldr	r0, [sp, #8]
 80025e6:	08d9      	lsrs	r1, r3, #3
 80025e8:	0742      	lsls	r2, r0, #29
 80025ea:	430a      	orrs	r2, r1
 80025ec:	08c4      	lsrs	r4, r0, #3
 80025ee:	e696      	b.n	800231e <__aeabi_dsub+0x222>
 80025f0:	4c85      	ldr	r4, [pc, #532]	@ (8002808 <__aeabi_dsub+0x70c>)
 80025f2:	1aff      	subs	r7, r7, r3
 80025f4:	4014      	ands	r4, r2
 80025f6:	0762      	lsls	r2, r4, #29
 80025f8:	08e4      	lsrs	r4, r4, #3
 80025fa:	e760      	b.n	80024be <__aeabi_dsub+0x3c2>
 80025fc:	4981      	ldr	r1, [pc, #516]	@ (8002804 <__aeabi_dsub+0x708>)
 80025fe:	428a      	cmp	r2, r1
 8002600:	d100      	bne.n	8002604 <__aeabi_dsub+0x508>
 8002602:	e0c9      	b.n	8002798 <__aeabi_dsub+0x69c>
 8002604:	4663      	mov	r3, ip
 8002606:	18c1      	adds	r1, r0, r3
 8002608:	4281      	cmp	r1, r0
 800260a:	4180      	sbcs	r0, r0
 800260c:	9b02      	ldr	r3, [sp, #8]
 800260e:	4240      	negs	r0, r0
 8002610:	18e3      	adds	r3, r4, r3
 8002612:	181b      	adds	r3, r3, r0
 8002614:	07dd      	lsls	r5, r3, #31
 8002616:	085c      	lsrs	r4, r3, #1
 8002618:	2307      	movs	r3, #7
 800261a:	0849      	lsrs	r1, r1, #1
 800261c:	430d      	orrs	r5, r1
 800261e:	0017      	movs	r7, r2
 8002620:	402b      	ands	r3, r5
 8002622:	e710      	b.n	8002446 <__aeabi_dsub+0x34a>
 8002624:	4663      	mov	r3, ip
 8002626:	1a1d      	subs	r5, r3, r0
 8002628:	45ac      	cmp	ip, r5
 800262a:	4192      	sbcs	r2, r2
 800262c:	2601      	movs	r6, #1
 800262e:	9b02      	ldr	r3, [sp, #8]
 8002630:	4252      	negs	r2, r2
 8002632:	1b1c      	subs	r4, r3, r4
 8002634:	4688      	mov	r8, r1
 8002636:	1aa4      	subs	r4, r4, r2
 8002638:	400e      	ands	r6, r1
 800263a:	e5c6      	b.n	80021ca <__aeabi_dsub+0xce>
 800263c:	4663      	mov	r3, ip
 800263e:	18c5      	adds	r5, r0, r3
 8002640:	9b02      	ldr	r3, [sp, #8]
 8002642:	4285      	cmp	r5, r0
 8002644:	4180      	sbcs	r0, r0
 8002646:	469c      	mov	ip, r3
 8002648:	4240      	negs	r0, r0
 800264a:	4464      	add	r4, ip
 800264c:	1824      	adds	r4, r4, r0
 800264e:	2701      	movs	r7, #1
 8002650:	0223      	lsls	r3, r4, #8
 8002652:	d400      	bmi.n	8002656 <__aeabi_dsub+0x55a>
 8002654:	e6f5      	b.n	8002442 <__aeabi_dsub+0x346>
 8002656:	2702      	movs	r7, #2
 8002658:	e641      	b.n	80022de <__aeabi_dsub+0x1e2>
 800265a:	4663      	mov	r3, ip
 800265c:	1ac5      	subs	r5, r0, r3
 800265e:	42a8      	cmp	r0, r5
 8002660:	4180      	sbcs	r0, r0
 8002662:	9b02      	ldr	r3, [sp, #8]
 8002664:	4240      	negs	r0, r0
 8002666:	1ae4      	subs	r4, r4, r3
 8002668:	2701      	movs	r7, #1
 800266a:	1a24      	subs	r4, r4, r0
 800266c:	e5a8      	b.n	80021c0 <__aeabi_dsub+0xc4>
 800266e:	9d02      	ldr	r5, [sp, #8]
 8002670:	4652      	mov	r2, sl
 8002672:	002b      	movs	r3, r5
 8002674:	3a20      	subs	r2, #32
 8002676:	40d3      	lsrs	r3, r2
 8002678:	0019      	movs	r1, r3
 800267a:	4653      	mov	r3, sl
 800267c:	2b20      	cmp	r3, #32
 800267e:	d006      	beq.n	800268e <__aeabi_dsub+0x592>
 8002680:	2240      	movs	r2, #64	@ 0x40
 8002682:	1ad2      	subs	r2, r2, r3
 8002684:	002b      	movs	r3, r5
 8002686:	4093      	lsls	r3, r2
 8002688:	4662      	mov	r2, ip
 800268a:	431a      	orrs	r2, r3
 800268c:	4693      	mov	fp, r2
 800268e:	465d      	mov	r5, fp
 8002690:	1e6b      	subs	r3, r5, #1
 8002692:	419d      	sbcs	r5, r3
 8002694:	430d      	orrs	r5, r1
 8002696:	e615      	b.n	80022c4 <__aeabi_dsub+0x1c8>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	4302      	orrs	r2, r0
 800269e:	08e4      	lsrs	r4, r4, #3
 80026a0:	e70d      	b.n	80024be <__aeabi_dsub+0x3c2>
 80026a2:	0011      	movs	r1, r2
 80026a4:	0027      	movs	r7, r4
 80026a6:	3920      	subs	r1, #32
 80026a8:	40cf      	lsrs	r7, r1
 80026aa:	2a20      	cmp	r2, #32
 80026ac:	d005      	beq.n	80026ba <__aeabi_dsub+0x5be>
 80026ae:	2140      	movs	r1, #64	@ 0x40
 80026b0:	1a8a      	subs	r2, r1, r2
 80026b2:	4094      	lsls	r4, r2
 80026b4:	0025      	movs	r5, r4
 80026b6:	4305      	orrs	r5, r0
 80026b8:	9503      	str	r5, [sp, #12]
 80026ba:	9d03      	ldr	r5, [sp, #12]
 80026bc:	1e6a      	subs	r2, r5, #1
 80026be:	4195      	sbcs	r5, r2
 80026c0:	433d      	orrs	r5, r7
 80026c2:	e77d      	b.n	80025c0 <__aeabi_dsub+0x4c4>
 80026c4:	2a00      	cmp	r2, #0
 80026c6:	d100      	bne.n	80026ca <__aeabi_dsub+0x5ce>
 80026c8:	e744      	b.n	8002554 <__aeabi_dsub+0x458>
 80026ca:	2601      	movs	r6, #1
 80026cc:	400e      	ands	r6, r1
 80026ce:	4663      	mov	r3, ip
 80026d0:	08d9      	lsrs	r1, r3, #3
 80026d2:	9b02      	ldr	r3, [sp, #8]
 80026d4:	075a      	lsls	r2, r3, #29
 80026d6:	430a      	orrs	r2, r1
 80026d8:	08dc      	lsrs	r4, r3, #3
 80026da:	e6f0      	b.n	80024be <__aeabi_dsub+0x3c2>
 80026dc:	2a00      	cmp	r2, #0
 80026de:	d028      	beq.n	8002732 <__aeabi_dsub+0x636>
 80026e0:	4662      	mov	r2, ip
 80026e2:	9f02      	ldr	r7, [sp, #8]
 80026e4:	08c0      	lsrs	r0, r0, #3
 80026e6:	433a      	orrs	r2, r7
 80026e8:	d100      	bne.n	80026ec <__aeabi_dsub+0x5f0>
 80026ea:	e6dc      	b.n	80024a6 <__aeabi_dsub+0x3aa>
 80026ec:	0762      	lsls	r2, r4, #29
 80026ee:	4310      	orrs	r0, r2
 80026f0:	2280      	movs	r2, #128	@ 0x80
 80026f2:	08e4      	lsrs	r4, r4, #3
 80026f4:	0312      	lsls	r2, r2, #12
 80026f6:	4214      	tst	r4, r2
 80026f8:	d009      	beq.n	800270e <__aeabi_dsub+0x612>
 80026fa:	08fd      	lsrs	r5, r7, #3
 80026fc:	4215      	tst	r5, r2
 80026fe:	d106      	bne.n	800270e <__aeabi_dsub+0x612>
 8002700:	4663      	mov	r3, ip
 8002702:	2601      	movs	r6, #1
 8002704:	002c      	movs	r4, r5
 8002706:	08d8      	lsrs	r0, r3, #3
 8002708:	077b      	lsls	r3, r7, #29
 800270a:	4318      	orrs	r0, r3
 800270c:	400e      	ands	r6, r1
 800270e:	0f42      	lsrs	r2, r0, #29
 8002710:	00c0      	lsls	r0, r0, #3
 8002712:	08c0      	lsrs	r0, r0, #3
 8002714:	0752      	lsls	r2, r2, #29
 8002716:	4302      	orrs	r2, r0
 8002718:	e601      	b.n	800231e <__aeabi_dsub+0x222>
 800271a:	4663      	mov	r3, ip
 800271c:	1a1d      	subs	r5, r3, r0
 800271e:	45ac      	cmp	ip, r5
 8002720:	4192      	sbcs	r2, r2
 8002722:	9b02      	ldr	r3, [sp, #8]
 8002724:	4252      	negs	r2, r2
 8002726:	1b1c      	subs	r4, r3, r4
 8002728:	000e      	movs	r6, r1
 800272a:	4688      	mov	r8, r1
 800272c:	2701      	movs	r7, #1
 800272e:	1aa4      	subs	r4, r4, r2
 8002730:	e546      	b.n	80021c0 <__aeabi_dsub+0xc4>
 8002732:	4663      	mov	r3, ip
 8002734:	08d9      	lsrs	r1, r3, #3
 8002736:	9b02      	ldr	r3, [sp, #8]
 8002738:	075a      	lsls	r2, r3, #29
 800273a:	430a      	orrs	r2, r1
 800273c:	08dc      	lsrs	r4, r3, #3
 800273e:	e5ee      	b.n	800231e <__aeabi_dsub+0x222>
 8002740:	4663      	mov	r3, ip
 8002742:	9c02      	ldr	r4, [sp, #8]
 8002744:	9303      	str	r3, [sp, #12]
 8002746:	e6c7      	b.n	80024d8 <__aeabi_dsub+0x3dc>
 8002748:	08c0      	lsrs	r0, r0, #3
 800274a:	2a00      	cmp	r2, #0
 800274c:	d100      	bne.n	8002750 <__aeabi_dsub+0x654>
 800274e:	e6aa      	b.n	80024a6 <__aeabi_dsub+0x3aa>
 8002750:	0762      	lsls	r2, r4, #29
 8002752:	4310      	orrs	r0, r2
 8002754:	2280      	movs	r2, #128	@ 0x80
 8002756:	08e4      	lsrs	r4, r4, #3
 8002758:	0312      	lsls	r2, r2, #12
 800275a:	4214      	tst	r4, r2
 800275c:	d0d7      	beq.n	800270e <__aeabi_dsub+0x612>
 800275e:	9f02      	ldr	r7, [sp, #8]
 8002760:	08fd      	lsrs	r5, r7, #3
 8002762:	4215      	tst	r5, r2
 8002764:	d1d3      	bne.n	800270e <__aeabi_dsub+0x612>
 8002766:	4663      	mov	r3, ip
 8002768:	2601      	movs	r6, #1
 800276a:	08d8      	lsrs	r0, r3, #3
 800276c:	077b      	lsls	r3, r7, #29
 800276e:	002c      	movs	r4, r5
 8002770:	4318      	orrs	r0, r3
 8002772:	400e      	ands	r6, r1
 8002774:	e7cb      	b.n	800270e <__aeabi_dsub+0x612>
 8002776:	000a      	movs	r2, r1
 8002778:	0027      	movs	r7, r4
 800277a:	3a20      	subs	r2, #32
 800277c:	40d7      	lsrs	r7, r2
 800277e:	2920      	cmp	r1, #32
 8002780:	d005      	beq.n	800278e <__aeabi_dsub+0x692>
 8002782:	2240      	movs	r2, #64	@ 0x40
 8002784:	1a52      	subs	r2, r2, r1
 8002786:	4094      	lsls	r4, r2
 8002788:	0025      	movs	r5, r4
 800278a:	4305      	orrs	r5, r0
 800278c:	9503      	str	r5, [sp, #12]
 800278e:	9d03      	ldr	r5, [sp, #12]
 8002790:	1e6a      	subs	r2, r5, #1
 8002792:	4195      	sbcs	r5, r2
 8002794:	432f      	orrs	r7, r5
 8002796:	e610      	b.n	80023ba <__aeabi_dsub+0x2be>
 8002798:	0014      	movs	r4, r2
 800279a:	2500      	movs	r5, #0
 800279c:	2200      	movs	r2, #0
 800279e:	e556      	b.n	800224e <__aeabi_dsub+0x152>
 80027a0:	9b02      	ldr	r3, [sp, #8]
 80027a2:	4460      	add	r0, ip
 80027a4:	4699      	mov	r9, r3
 80027a6:	4560      	cmp	r0, ip
 80027a8:	4192      	sbcs	r2, r2
 80027aa:	444c      	add	r4, r9
 80027ac:	4252      	negs	r2, r2
 80027ae:	0005      	movs	r5, r0
 80027b0:	18a4      	adds	r4, r4, r2
 80027b2:	e74c      	b.n	800264e <__aeabi_dsub+0x552>
 80027b4:	001a      	movs	r2, r3
 80027b6:	001c      	movs	r4, r3
 80027b8:	432a      	orrs	r2, r5
 80027ba:	d000      	beq.n	80027be <__aeabi_dsub+0x6c2>
 80027bc:	e6b3      	b.n	8002526 <__aeabi_dsub+0x42a>
 80027be:	e6c9      	b.n	8002554 <__aeabi_dsub+0x458>
 80027c0:	2480      	movs	r4, #128	@ 0x80
 80027c2:	2600      	movs	r6, #0
 80027c4:	0324      	lsls	r4, r4, #12
 80027c6:	e5ae      	b.n	8002326 <__aeabi_dsub+0x22a>
 80027c8:	2120      	movs	r1, #32
 80027ca:	2500      	movs	r5, #0
 80027cc:	1a09      	subs	r1, r1, r0
 80027ce:	e517      	b.n	8002200 <__aeabi_dsub+0x104>
 80027d0:	2200      	movs	r2, #0
 80027d2:	2500      	movs	r5, #0
 80027d4:	4c0b      	ldr	r4, [pc, #44]	@ (8002804 <__aeabi_dsub+0x708>)
 80027d6:	e53a      	b.n	800224e <__aeabi_dsub+0x152>
 80027d8:	2d00      	cmp	r5, #0
 80027da:	d100      	bne.n	80027de <__aeabi_dsub+0x6e2>
 80027dc:	e5f6      	b.n	80023cc <__aeabi_dsub+0x2d0>
 80027de:	464b      	mov	r3, r9
 80027e0:	1bda      	subs	r2, r3, r7
 80027e2:	4692      	mov	sl, r2
 80027e4:	2f00      	cmp	r7, #0
 80027e6:	d100      	bne.n	80027ea <__aeabi_dsub+0x6ee>
 80027e8:	e66f      	b.n	80024ca <__aeabi_dsub+0x3ce>
 80027ea:	2a38      	cmp	r2, #56	@ 0x38
 80027ec:	dc05      	bgt.n	80027fa <__aeabi_dsub+0x6fe>
 80027ee:	2680      	movs	r6, #128	@ 0x80
 80027f0:	0436      	lsls	r6, r6, #16
 80027f2:	4334      	orrs	r4, r6
 80027f4:	4688      	mov	r8, r1
 80027f6:	000e      	movs	r6, r1
 80027f8:	e6d1      	b.n	800259e <__aeabi_dsub+0x4a2>
 80027fa:	4688      	mov	r8, r1
 80027fc:	000e      	movs	r6, r1
 80027fe:	2501      	movs	r5, #1
 8002800:	e6de      	b.n	80025c0 <__aeabi_dsub+0x4c4>
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	000007ff 	.word	0x000007ff
 8002808:	ff7fffff 	.word	0xff7fffff
 800280c:	000007fe 	.word	0x000007fe
 8002810:	2d00      	cmp	r5, #0
 8002812:	d100      	bne.n	8002816 <__aeabi_dsub+0x71a>
 8002814:	e668      	b.n	80024e8 <__aeabi_dsub+0x3ec>
 8002816:	464b      	mov	r3, r9
 8002818:	1bd9      	subs	r1, r3, r7
 800281a:	2f00      	cmp	r7, #0
 800281c:	d101      	bne.n	8002822 <__aeabi_dsub+0x726>
 800281e:	468a      	mov	sl, r1
 8002820:	e5a7      	b.n	8002372 <__aeabi_dsub+0x276>
 8002822:	2701      	movs	r7, #1
 8002824:	2938      	cmp	r1, #56	@ 0x38
 8002826:	dd00      	ble.n	800282a <__aeabi_dsub+0x72e>
 8002828:	e5c7      	b.n	80023ba <__aeabi_dsub+0x2be>
 800282a:	2280      	movs	r2, #128	@ 0x80
 800282c:	0412      	lsls	r2, r2, #16
 800282e:	4314      	orrs	r4, r2
 8002830:	e5af      	b.n	8002392 <__aeabi_dsub+0x296>
 8002832:	46c0      	nop			@ (mov r8, r8)

08002834 <__aeabi_d2iz>:
 8002834:	000b      	movs	r3, r1
 8002836:	0002      	movs	r2, r0
 8002838:	b570      	push	{r4, r5, r6, lr}
 800283a:	4d16      	ldr	r5, [pc, #88]	@ (8002894 <__aeabi_d2iz+0x60>)
 800283c:	030c      	lsls	r4, r1, #12
 800283e:	b082      	sub	sp, #8
 8002840:	0049      	lsls	r1, r1, #1
 8002842:	2000      	movs	r0, #0
 8002844:	9200      	str	r2, [sp, #0]
 8002846:	9301      	str	r3, [sp, #4]
 8002848:	0b24      	lsrs	r4, r4, #12
 800284a:	0d49      	lsrs	r1, r1, #21
 800284c:	0fde      	lsrs	r6, r3, #31
 800284e:	42a9      	cmp	r1, r5
 8002850:	dd04      	ble.n	800285c <__aeabi_d2iz+0x28>
 8002852:	4811      	ldr	r0, [pc, #68]	@ (8002898 <__aeabi_d2iz+0x64>)
 8002854:	4281      	cmp	r1, r0
 8002856:	dd03      	ble.n	8002860 <__aeabi_d2iz+0x2c>
 8002858:	4b10      	ldr	r3, [pc, #64]	@ (800289c <__aeabi_d2iz+0x68>)
 800285a:	18f0      	adds	r0, r6, r3
 800285c:	b002      	add	sp, #8
 800285e:	bd70      	pop	{r4, r5, r6, pc}
 8002860:	2080      	movs	r0, #128	@ 0x80
 8002862:	0340      	lsls	r0, r0, #13
 8002864:	4320      	orrs	r0, r4
 8002866:	4c0e      	ldr	r4, [pc, #56]	@ (80028a0 <__aeabi_d2iz+0x6c>)
 8002868:	1a64      	subs	r4, r4, r1
 800286a:	2c1f      	cmp	r4, #31
 800286c:	dd08      	ble.n	8002880 <__aeabi_d2iz+0x4c>
 800286e:	4b0d      	ldr	r3, [pc, #52]	@ (80028a4 <__aeabi_d2iz+0x70>)
 8002870:	1a5b      	subs	r3, r3, r1
 8002872:	40d8      	lsrs	r0, r3
 8002874:	0003      	movs	r3, r0
 8002876:	4258      	negs	r0, r3
 8002878:	2e00      	cmp	r6, #0
 800287a:	d1ef      	bne.n	800285c <__aeabi_d2iz+0x28>
 800287c:	0018      	movs	r0, r3
 800287e:	e7ed      	b.n	800285c <__aeabi_d2iz+0x28>
 8002880:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <__aeabi_d2iz+0x74>)
 8002882:	9a00      	ldr	r2, [sp, #0]
 8002884:	469c      	mov	ip, r3
 8002886:	0003      	movs	r3, r0
 8002888:	4461      	add	r1, ip
 800288a:	408b      	lsls	r3, r1
 800288c:	40e2      	lsrs	r2, r4
 800288e:	4313      	orrs	r3, r2
 8002890:	e7f1      	b.n	8002876 <__aeabi_d2iz+0x42>
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	000003fe 	.word	0x000003fe
 8002898:	0000041d 	.word	0x0000041d
 800289c:	7fffffff 	.word	0x7fffffff
 80028a0:	00000433 	.word	0x00000433
 80028a4:	00000413 	.word	0x00000413
 80028a8:	fffffbed 	.word	0xfffffbed

080028ac <__aeabi_i2d>:
 80028ac:	b570      	push	{r4, r5, r6, lr}
 80028ae:	2800      	cmp	r0, #0
 80028b0:	d016      	beq.n	80028e0 <__aeabi_i2d+0x34>
 80028b2:	17c3      	asrs	r3, r0, #31
 80028b4:	18c5      	adds	r5, r0, r3
 80028b6:	405d      	eors	r5, r3
 80028b8:	0fc4      	lsrs	r4, r0, #31
 80028ba:	0028      	movs	r0, r5
 80028bc:	f000 f92a 	bl	8002b14 <__clzsi2>
 80028c0:	4b10      	ldr	r3, [pc, #64]	@ (8002904 <__aeabi_i2d+0x58>)
 80028c2:	1a1b      	subs	r3, r3, r0
 80028c4:	055b      	lsls	r3, r3, #21
 80028c6:	0d5b      	lsrs	r3, r3, #21
 80028c8:	280a      	cmp	r0, #10
 80028ca:	dc14      	bgt.n	80028f6 <__aeabi_i2d+0x4a>
 80028cc:	0002      	movs	r2, r0
 80028ce:	002e      	movs	r6, r5
 80028d0:	3215      	adds	r2, #21
 80028d2:	4096      	lsls	r6, r2
 80028d4:	220b      	movs	r2, #11
 80028d6:	1a12      	subs	r2, r2, r0
 80028d8:	40d5      	lsrs	r5, r2
 80028da:	032d      	lsls	r5, r5, #12
 80028dc:	0b2d      	lsrs	r5, r5, #12
 80028de:	e003      	b.n	80028e8 <__aeabi_i2d+0x3c>
 80028e0:	2400      	movs	r4, #0
 80028e2:	2300      	movs	r3, #0
 80028e4:	2500      	movs	r5, #0
 80028e6:	2600      	movs	r6, #0
 80028e8:	051b      	lsls	r3, r3, #20
 80028ea:	432b      	orrs	r3, r5
 80028ec:	07e4      	lsls	r4, r4, #31
 80028ee:	4323      	orrs	r3, r4
 80028f0:	0030      	movs	r0, r6
 80028f2:	0019      	movs	r1, r3
 80028f4:	bd70      	pop	{r4, r5, r6, pc}
 80028f6:	380b      	subs	r0, #11
 80028f8:	4085      	lsls	r5, r0
 80028fa:	032d      	lsls	r5, r5, #12
 80028fc:	2600      	movs	r6, #0
 80028fe:	0b2d      	lsrs	r5, r5, #12
 8002900:	e7f2      	b.n	80028e8 <__aeabi_i2d+0x3c>
 8002902:	46c0      	nop			@ (mov r8, r8)
 8002904:	0000041e 	.word	0x0000041e

08002908 <__aeabi_f2d>:
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	0242      	lsls	r2, r0, #9
 800290c:	0043      	lsls	r3, r0, #1
 800290e:	0fc4      	lsrs	r4, r0, #31
 8002910:	20fe      	movs	r0, #254	@ 0xfe
 8002912:	0e1b      	lsrs	r3, r3, #24
 8002914:	1c59      	adds	r1, r3, #1
 8002916:	0a55      	lsrs	r5, r2, #9
 8002918:	4208      	tst	r0, r1
 800291a:	d00c      	beq.n	8002936 <__aeabi_f2d+0x2e>
 800291c:	21e0      	movs	r1, #224	@ 0xe0
 800291e:	0089      	lsls	r1, r1, #2
 8002920:	468c      	mov	ip, r1
 8002922:	076d      	lsls	r5, r5, #29
 8002924:	0b12      	lsrs	r2, r2, #12
 8002926:	4463      	add	r3, ip
 8002928:	051b      	lsls	r3, r3, #20
 800292a:	4313      	orrs	r3, r2
 800292c:	07e4      	lsls	r4, r4, #31
 800292e:	4323      	orrs	r3, r4
 8002930:	0028      	movs	r0, r5
 8002932:	0019      	movs	r1, r3
 8002934:	bd70      	pop	{r4, r5, r6, pc}
 8002936:	2b00      	cmp	r3, #0
 8002938:	d114      	bne.n	8002964 <__aeabi_f2d+0x5c>
 800293a:	2d00      	cmp	r5, #0
 800293c:	d01b      	beq.n	8002976 <__aeabi_f2d+0x6e>
 800293e:	0028      	movs	r0, r5
 8002940:	f000 f8e8 	bl	8002b14 <__clzsi2>
 8002944:	280a      	cmp	r0, #10
 8002946:	dc1c      	bgt.n	8002982 <__aeabi_f2d+0x7a>
 8002948:	230b      	movs	r3, #11
 800294a:	002a      	movs	r2, r5
 800294c:	1a1b      	subs	r3, r3, r0
 800294e:	40da      	lsrs	r2, r3
 8002950:	0003      	movs	r3, r0
 8002952:	3315      	adds	r3, #21
 8002954:	409d      	lsls	r5, r3
 8002956:	4b0e      	ldr	r3, [pc, #56]	@ (8002990 <__aeabi_f2d+0x88>)
 8002958:	0312      	lsls	r2, r2, #12
 800295a:	1a1b      	subs	r3, r3, r0
 800295c:	055b      	lsls	r3, r3, #21
 800295e:	0b12      	lsrs	r2, r2, #12
 8002960:	0d5b      	lsrs	r3, r3, #21
 8002962:	e7e1      	b.n	8002928 <__aeabi_f2d+0x20>
 8002964:	2d00      	cmp	r5, #0
 8002966:	d009      	beq.n	800297c <__aeabi_f2d+0x74>
 8002968:	0b13      	lsrs	r3, r2, #12
 800296a:	2280      	movs	r2, #128	@ 0x80
 800296c:	0312      	lsls	r2, r2, #12
 800296e:	431a      	orrs	r2, r3
 8002970:	076d      	lsls	r5, r5, #29
 8002972:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <__aeabi_f2d+0x8c>)
 8002974:	e7d8      	b.n	8002928 <__aeabi_f2d+0x20>
 8002976:	2300      	movs	r3, #0
 8002978:	2200      	movs	r2, #0
 800297a:	e7d5      	b.n	8002928 <__aeabi_f2d+0x20>
 800297c:	2200      	movs	r2, #0
 800297e:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <__aeabi_f2d+0x8c>)
 8002980:	e7d2      	b.n	8002928 <__aeabi_f2d+0x20>
 8002982:	0003      	movs	r3, r0
 8002984:	002a      	movs	r2, r5
 8002986:	3b0b      	subs	r3, #11
 8002988:	409a      	lsls	r2, r3
 800298a:	2500      	movs	r5, #0
 800298c:	e7e3      	b.n	8002956 <__aeabi_f2d+0x4e>
 800298e:	46c0      	nop			@ (mov r8, r8)
 8002990:	00000389 	.word	0x00000389
 8002994:	000007ff 	.word	0x000007ff

08002998 <__aeabi_d2f>:
 8002998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299a:	004b      	lsls	r3, r1, #1
 800299c:	030f      	lsls	r7, r1, #12
 800299e:	0d5b      	lsrs	r3, r3, #21
 80029a0:	4c3b      	ldr	r4, [pc, #236]	@ (8002a90 <__aeabi_d2f+0xf8>)
 80029a2:	0f45      	lsrs	r5, r0, #29
 80029a4:	b083      	sub	sp, #12
 80029a6:	0a7f      	lsrs	r7, r7, #9
 80029a8:	1c5e      	adds	r6, r3, #1
 80029aa:	432f      	orrs	r7, r5
 80029ac:	9000      	str	r0, [sp, #0]
 80029ae:	9101      	str	r1, [sp, #4]
 80029b0:	0fca      	lsrs	r2, r1, #31
 80029b2:	00c5      	lsls	r5, r0, #3
 80029b4:	4226      	tst	r6, r4
 80029b6:	d00b      	beq.n	80029d0 <__aeabi_d2f+0x38>
 80029b8:	4936      	ldr	r1, [pc, #216]	@ (8002a94 <__aeabi_d2f+0xfc>)
 80029ba:	185c      	adds	r4, r3, r1
 80029bc:	2cfe      	cmp	r4, #254	@ 0xfe
 80029be:	dd13      	ble.n	80029e8 <__aeabi_d2f+0x50>
 80029c0:	20ff      	movs	r0, #255	@ 0xff
 80029c2:	2300      	movs	r3, #0
 80029c4:	05c0      	lsls	r0, r0, #23
 80029c6:	4318      	orrs	r0, r3
 80029c8:	07d2      	lsls	r2, r2, #31
 80029ca:	4310      	orrs	r0, r2
 80029cc:	b003      	add	sp, #12
 80029ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d102      	bne.n	80029da <__aeabi_d2f+0x42>
 80029d4:	2000      	movs	r0, #0
 80029d6:	2300      	movs	r3, #0
 80029d8:	e7f4      	b.n	80029c4 <__aeabi_d2f+0x2c>
 80029da:	433d      	orrs	r5, r7
 80029dc:	d0f0      	beq.n	80029c0 <__aeabi_d2f+0x28>
 80029de:	2380      	movs	r3, #128	@ 0x80
 80029e0:	03db      	lsls	r3, r3, #15
 80029e2:	20ff      	movs	r0, #255	@ 0xff
 80029e4:	433b      	orrs	r3, r7
 80029e6:	e7ed      	b.n	80029c4 <__aeabi_d2f+0x2c>
 80029e8:	2c00      	cmp	r4, #0
 80029ea:	dd14      	ble.n	8002a16 <__aeabi_d2f+0x7e>
 80029ec:	9b00      	ldr	r3, [sp, #0]
 80029ee:	00ff      	lsls	r7, r7, #3
 80029f0:	019b      	lsls	r3, r3, #6
 80029f2:	1e58      	subs	r0, r3, #1
 80029f4:	4183      	sbcs	r3, r0
 80029f6:	0f69      	lsrs	r1, r5, #29
 80029f8:	433b      	orrs	r3, r7
 80029fa:	430b      	orrs	r3, r1
 80029fc:	0759      	lsls	r1, r3, #29
 80029fe:	d041      	beq.n	8002a84 <__aeabi_d2f+0xec>
 8002a00:	210f      	movs	r1, #15
 8002a02:	4019      	ands	r1, r3
 8002a04:	2904      	cmp	r1, #4
 8002a06:	d028      	beq.n	8002a5a <__aeabi_d2f+0xc2>
 8002a08:	3304      	adds	r3, #4
 8002a0a:	0159      	lsls	r1, r3, #5
 8002a0c:	d525      	bpl.n	8002a5a <__aeabi_d2f+0xc2>
 8002a0e:	3401      	adds	r4, #1
 8002a10:	2300      	movs	r3, #0
 8002a12:	b2e0      	uxtb	r0, r4
 8002a14:	e7d6      	b.n	80029c4 <__aeabi_d2f+0x2c>
 8002a16:	0021      	movs	r1, r4
 8002a18:	3117      	adds	r1, #23
 8002a1a:	dbdb      	blt.n	80029d4 <__aeabi_d2f+0x3c>
 8002a1c:	2180      	movs	r1, #128	@ 0x80
 8002a1e:	201e      	movs	r0, #30
 8002a20:	0409      	lsls	r1, r1, #16
 8002a22:	4339      	orrs	r1, r7
 8002a24:	1b00      	subs	r0, r0, r4
 8002a26:	281f      	cmp	r0, #31
 8002a28:	dd1b      	ble.n	8002a62 <__aeabi_d2f+0xca>
 8002a2a:	2602      	movs	r6, #2
 8002a2c:	4276      	negs	r6, r6
 8002a2e:	1b34      	subs	r4, r6, r4
 8002a30:	000e      	movs	r6, r1
 8002a32:	40e6      	lsrs	r6, r4
 8002a34:	0034      	movs	r4, r6
 8002a36:	2820      	cmp	r0, #32
 8002a38:	d004      	beq.n	8002a44 <__aeabi_d2f+0xac>
 8002a3a:	4817      	ldr	r0, [pc, #92]	@ (8002a98 <__aeabi_d2f+0x100>)
 8002a3c:	4684      	mov	ip, r0
 8002a3e:	4463      	add	r3, ip
 8002a40:	4099      	lsls	r1, r3
 8002a42:	430d      	orrs	r5, r1
 8002a44:	002b      	movs	r3, r5
 8002a46:	1e59      	subs	r1, r3, #1
 8002a48:	418b      	sbcs	r3, r1
 8002a4a:	4323      	orrs	r3, r4
 8002a4c:	0759      	lsls	r1, r3, #29
 8002a4e:	d015      	beq.n	8002a7c <__aeabi_d2f+0xe4>
 8002a50:	210f      	movs	r1, #15
 8002a52:	2400      	movs	r4, #0
 8002a54:	4019      	ands	r1, r3
 8002a56:	2904      	cmp	r1, #4
 8002a58:	d117      	bne.n	8002a8a <__aeabi_d2f+0xf2>
 8002a5a:	019b      	lsls	r3, r3, #6
 8002a5c:	0a5b      	lsrs	r3, r3, #9
 8002a5e:	b2e0      	uxtb	r0, r4
 8002a60:	e7b0      	b.n	80029c4 <__aeabi_d2f+0x2c>
 8002a62:	4c0e      	ldr	r4, [pc, #56]	@ (8002a9c <__aeabi_d2f+0x104>)
 8002a64:	191c      	adds	r4, r3, r4
 8002a66:	002b      	movs	r3, r5
 8002a68:	40a5      	lsls	r5, r4
 8002a6a:	40c3      	lsrs	r3, r0
 8002a6c:	40a1      	lsls	r1, r4
 8002a6e:	1e68      	subs	r0, r5, #1
 8002a70:	4185      	sbcs	r5, r0
 8002a72:	4329      	orrs	r1, r5
 8002a74:	430b      	orrs	r3, r1
 8002a76:	2400      	movs	r4, #0
 8002a78:	0759      	lsls	r1, r3, #29
 8002a7a:	d1c1      	bne.n	8002a00 <__aeabi_d2f+0x68>
 8002a7c:	019b      	lsls	r3, r3, #6
 8002a7e:	2000      	movs	r0, #0
 8002a80:	0a5b      	lsrs	r3, r3, #9
 8002a82:	e79f      	b.n	80029c4 <__aeabi_d2f+0x2c>
 8002a84:	08db      	lsrs	r3, r3, #3
 8002a86:	b2e0      	uxtb	r0, r4
 8002a88:	e79c      	b.n	80029c4 <__aeabi_d2f+0x2c>
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	e7e5      	b.n	8002a5a <__aeabi_d2f+0xc2>
 8002a8e:	46c0      	nop			@ (mov r8, r8)
 8002a90:	000007fe 	.word	0x000007fe
 8002a94:	fffffc80 	.word	0xfffffc80
 8002a98:	fffffca2 	.word	0xfffffca2
 8002a9c:	fffffc82 	.word	0xfffffc82

08002aa0 <__aeabi_cfrcmple>:
 8002aa0:	4684      	mov	ip, r0
 8002aa2:	0008      	movs	r0, r1
 8002aa4:	4661      	mov	r1, ip
 8002aa6:	e7ff      	b.n	8002aa8 <__aeabi_cfcmpeq>

08002aa8 <__aeabi_cfcmpeq>:
 8002aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002aaa:	f000 f8d5 	bl	8002c58 <__lesf2>
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d401      	bmi.n	8002ab6 <__aeabi_cfcmpeq+0xe>
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	42c8      	cmn	r0, r1
 8002ab6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002ab8 <__aeabi_fcmpeq>:
 8002ab8:	b510      	push	{r4, lr}
 8002aba:	f000 f855 	bl	8002b68 <__eqsf2>
 8002abe:	4240      	negs	r0, r0
 8002ac0:	3001      	adds	r0, #1
 8002ac2:	bd10      	pop	{r4, pc}

08002ac4 <__aeabi_fcmplt>:
 8002ac4:	b510      	push	{r4, lr}
 8002ac6:	f000 f8c7 	bl	8002c58 <__lesf2>
 8002aca:	2800      	cmp	r0, #0
 8002acc:	db01      	blt.n	8002ad2 <__aeabi_fcmplt+0xe>
 8002ace:	2000      	movs	r0, #0
 8002ad0:	bd10      	pop	{r4, pc}
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	bd10      	pop	{r4, pc}
 8002ad6:	46c0      	nop			@ (mov r8, r8)

08002ad8 <__aeabi_fcmple>:
 8002ad8:	b510      	push	{r4, lr}
 8002ada:	f000 f8bd 	bl	8002c58 <__lesf2>
 8002ade:	2800      	cmp	r0, #0
 8002ae0:	dd01      	ble.n	8002ae6 <__aeabi_fcmple+0xe>
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	bd10      	pop	{r4, pc}
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	bd10      	pop	{r4, pc}
 8002aea:	46c0      	nop			@ (mov r8, r8)

08002aec <__aeabi_fcmpgt>:
 8002aec:	b510      	push	{r4, lr}
 8002aee:	f000 f863 	bl	8002bb8 <__gesf2>
 8002af2:	2800      	cmp	r0, #0
 8002af4:	dc01      	bgt.n	8002afa <__aeabi_fcmpgt+0xe>
 8002af6:	2000      	movs	r0, #0
 8002af8:	bd10      	pop	{r4, pc}
 8002afa:	2001      	movs	r0, #1
 8002afc:	bd10      	pop	{r4, pc}
 8002afe:	46c0      	nop			@ (mov r8, r8)

08002b00 <__aeabi_fcmpge>:
 8002b00:	b510      	push	{r4, lr}
 8002b02:	f000 f859 	bl	8002bb8 <__gesf2>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	da01      	bge.n	8002b0e <__aeabi_fcmpge+0xe>
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	bd10      	pop	{r4, pc}
 8002b0e:	2001      	movs	r0, #1
 8002b10:	bd10      	pop	{r4, pc}
 8002b12:	46c0      	nop			@ (mov r8, r8)

08002b14 <__clzsi2>:
 8002b14:	211c      	movs	r1, #28
 8002b16:	2301      	movs	r3, #1
 8002b18:	041b      	lsls	r3, r3, #16
 8002b1a:	4298      	cmp	r0, r3
 8002b1c:	d301      	bcc.n	8002b22 <__clzsi2+0xe>
 8002b1e:	0c00      	lsrs	r0, r0, #16
 8002b20:	3910      	subs	r1, #16
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	4298      	cmp	r0, r3
 8002b26:	d301      	bcc.n	8002b2c <__clzsi2+0x18>
 8002b28:	0a00      	lsrs	r0, r0, #8
 8002b2a:	3908      	subs	r1, #8
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	4298      	cmp	r0, r3
 8002b30:	d301      	bcc.n	8002b36 <__clzsi2+0x22>
 8002b32:	0900      	lsrs	r0, r0, #4
 8002b34:	3904      	subs	r1, #4
 8002b36:	a202      	add	r2, pc, #8	@ (adr r2, 8002b40 <__clzsi2+0x2c>)
 8002b38:	5c10      	ldrb	r0, [r2, r0]
 8002b3a:	1840      	adds	r0, r0, r1
 8002b3c:	4770      	bx	lr
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	02020304 	.word	0x02020304
 8002b44:	01010101 	.word	0x01010101
	...

08002b50 <__clzdi2>:
 8002b50:	b510      	push	{r4, lr}
 8002b52:	2900      	cmp	r1, #0
 8002b54:	d103      	bne.n	8002b5e <__clzdi2+0xe>
 8002b56:	f7ff ffdd 	bl	8002b14 <__clzsi2>
 8002b5a:	3020      	adds	r0, #32
 8002b5c:	e002      	b.n	8002b64 <__clzdi2+0x14>
 8002b5e:	0008      	movs	r0, r1
 8002b60:	f7ff ffd8 	bl	8002b14 <__clzsi2>
 8002b64:	bd10      	pop	{r4, pc}
 8002b66:	46c0      	nop			@ (mov r8, r8)

08002b68 <__eqsf2>:
 8002b68:	b570      	push	{r4, r5, r6, lr}
 8002b6a:	0042      	lsls	r2, r0, #1
 8002b6c:	024e      	lsls	r6, r1, #9
 8002b6e:	004c      	lsls	r4, r1, #1
 8002b70:	0245      	lsls	r5, r0, #9
 8002b72:	0a6d      	lsrs	r5, r5, #9
 8002b74:	0e12      	lsrs	r2, r2, #24
 8002b76:	0fc3      	lsrs	r3, r0, #31
 8002b78:	0a76      	lsrs	r6, r6, #9
 8002b7a:	0e24      	lsrs	r4, r4, #24
 8002b7c:	0fc9      	lsrs	r1, r1, #31
 8002b7e:	2aff      	cmp	r2, #255	@ 0xff
 8002b80:	d010      	beq.n	8002ba4 <__eqsf2+0x3c>
 8002b82:	2cff      	cmp	r4, #255	@ 0xff
 8002b84:	d00c      	beq.n	8002ba0 <__eqsf2+0x38>
 8002b86:	2001      	movs	r0, #1
 8002b88:	42a2      	cmp	r2, r4
 8002b8a:	d10a      	bne.n	8002ba2 <__eqsf2+0x3a>
 8002b8c:	42b5      	cmp	r5, r6
 8002b8e:	d108      	bne.n	8002ba2 <__eqsf2+0x3a>
 8002b90:	428b      	cmp	r3, r1
 8002b92:	d00f      	beq.n	8002bb4 <__eqsf2+0x4c>
 8002b94:	2a00      	cmp	r2, #0
 8002b96:	d104      	bne.n	8002ba2 <__eqsf2+0x3a>
 8002b98:	0028      	movs	r0, r5
 8002b9a:	1e43      	subs	r3, r0, #1
 8002b9c:	4198      	sbcs	r0, r3
 8002b9e:	e000      	b.n	8002ba2 <__eqsf2+0x3a>
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	bd70      	pop	{r4, r5, r6, pc}
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	2cff      	cmp	r4, #255	@ 0xff
 8002ba8:	d1fb      	bne.n	8002ba2 <__eqsf2+0x3a>
 8002baa:	4335      	orrs	r5, r6
 8002bac:	d1f9      	bne.n	8002ba2 <__eqsf2+0x3a>
 8002bae:	404b      	eors	r3, r1
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	e7f6      	b.n	8002ba2 <__eqsf2+0x3a>
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	e7f4      	b.n	8002ba2 <__eqsf2+0x3a>

08002bb8 <__gesf2>:
 8002bb8:	b530      	push	{r4, r5, lr}
 8002bba:	0042      	lsls	r2, r0, #1
 8002bbc:	0244      	lsls	r4, r0, #9
 8002bbe:	024d      	lsls	r5, r1, #9
 8002bc0:	0fc3      	lsrs	r3, r0, #31
 8002bc2:	0048      	lsls	r0, r1, #1
 8002bc4:	0a64      	lsrs	r4, r4, #9
 8002bc6:	0e12      	lsrs	r2, r2, #24
 8002bc8:	0a6d      	lsrs	r5, r5, #9
 8002bca:	0e00      	lsrs	r0, r0, #24
 8002bcc:	0fc9      	lsrs	r1, r1, #31
 8002bce:	2aff      	cmp	r2, #255	@ 0xff
 8002bd0:	d019      	beq.n	8002c06 <__gesf2+0x4e>
 8002bd2:	28ff      	cmp	r0, #255	@ 0xff
 8002bd4:	d00b      	beq.n	8002bee <__gesf2+0x36>
 8002bd6:	2a00      	cmp	r2, #0
 8002bd8:	d11e      	bne.n	8002c18 <__gesf2+0x60>
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	d10b      	bne.n	8002bf6 <__gesf2+0x3e>
 8002bde:	2d00      	cmp	r5, #0
 8002be0:	d027      	beq.n	8002c32 <__gesf2+0x7a>
 8002be2:	2c00      	cmp	r4, #0
 8002be4:	d134      	bne.n	8002c50 <__gesf2+0x98>
 8002be6:	2900      	cmp	r1, #0
 8002be8:	d02f      	beq.n	8002c4a <__gesf2+0x92>
 8002bea:	0008      	movs	r0, r1
 8002bec:	bd30      	pop	{r4, r5, pc}
 8002bee:	2d00      	cmp	r5, #0
 8002bf0:	d128      	bne.n	8002c44 <__gesf2+0x8c>
 8002bf2:	2a00      	cmp	r2, #0
 8002bf4:	d101      	bne.n	8002bfa <__gesf2+0x42>
 8002bf6:	2c00      	cmp	r4, #0
 8002bf8:	d0f5      	beq.n	8002be6 <__gesf2+0x2e>
 8002bfa:	428b      	cmp	r3, r1
 8002bfc:	d107      	bne.n	8002c0e <__gesf2+0x56>
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d023      	beq.n	8002c4a <__gesf2+0x92>
 8002c02:	0018      	movs	r0, r3
 8002c04:	e7f2      	b.n	8002bec <__gesf2+0x34>
 8002c06:	2c00      	cmp	r4, #0
 8002c08:	d11c      	bne.n	8002c44 <__gesf2+0x8c>
 8002c0a:	28ff      	cmp	r0, #255	@ 0xff
 8002c0c:	d014      	beq.n	8002c38 <__gesf2+0x80>
 8002c0e:	1e58      	subs	r0, r3, #1
 8002c10:	2302      	movs	r3, #2
 8002c12:	4018      	ands	r0, r3
 8002c14:	3801      	subs	r0, #1
 8002c16:	e7e9      	b.n	8002bec <__gesf2+0x34>
 8002c18:	2800      	cmp	r0, #0
 8002c1a:	d0f8      	beq.n	8002c0e <__gesf2+0x56>
 8002c1c:	428b      	cmp	r3, r1
 8002c1e:	d1f6      	bne.n	8002c0e <__gesf2+0x56>
 8002c20:	4282      	cmp	r2, r0
 8002c22:	dcf4      	bgt.n	8002c0e <__gesf2+0x56>
 8002c24:	dbeb      	blt.n	8002bfe <__gesf2+0x46>
 8002c26:	42ac      	cmp	r4, r5
 8002c28:	d8f1      	bhi.n	8002c0e <__gesf2+0x56>
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	42ac      	cmp	r4, r5
 8002c2e:	d2dd      	bcs.n	8002bec <__gesf2+0x34>
 8002c30:	e7e5      	b.n	8002bfe <__gesf2+0x46>
 8002c32:	2c00      	cmp	r4, #0
 8002c34:	d0da      	beq.n	8002bec <__gesf2+0x34>
 8002c36:	e7ea      	b.n	8002c0e <__gesf2+0x56>
 8002c38:	2d00      	cmp	r5, #0
 8002c3a:	d103      	bne.n	8002c44 <__gesf2+0x8c>
 8002c3c:	428b      	cmp	r3, r1
 8002c3e:	d1e6      	bne.n	8002c0e <__gesf2+0x56>
 8002c40:	2000      	movs	r0, #0
 8002c42:	e7d3      	b.n	8002bec <__gesf2+0x34>
 8002c44:	2002      	movs	r0, #2
 8002c46:	4240      	negs	r0, r0
 8002c48:	e7d0      	b.n	8002bec <__gesf2+0x34>
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	4240      	negs	r0, r0
 8002c4e:	e7cd      	b.n	8002bec <__gesf2+0x34>
 8002c50:	428b      	cmp	r3, r1
 8002c52:	d0e8      	beq.n	8002c26 <__gesf2+0x6e>
 8002c54:	e7db      	b.n	8002c0e <__gesf2+0x56>
 8002c56:	46c0      	nop			@ (mov r8, r8)

08002c58 <__lesf2>:
 8002c58:	b530      	push	{r4, r5, lr}
 8002c5a:	0042      	lsls	r2, r0, #1
 8002c5c:	0244      	lsls	r4, r0, #9
 8002c5e:	024d      	lsls	r5, r1, #9
 8002c60:	0fc3      	lsrs	r3, r0, #31
 8002c62:	0048      	lsls	r0, r1, #1
 8002c64:	0a64      	lsrs	r4, r4, #9
 8002c66:	0e12      	lsrs	r2, r2, #24
 8002c68:	0a6d      	lsrs	r5, r5, #9
 8002c6a:	0e00      	lsrs	r0, r0, #24
 8002c6c:	0fc9      	lsrs	r1, r1, #31
 8002c6e:	2aff      	cmp	r2, #255	@ 0xff
 8002c70:	d01a      	beq.n	8002ca8 <__lesf2+0x50>
 8002c72:	28ff      	cmp	r0, #255	@ 0xff
 8002c74:	d00e      	beq.n	8002c94 <__lesf2+0x3c>
 8002c76:	2a00      	cmp	r2, #0
 8002c78:	d11e      	bne.n	8002cb8 <__lesf2+0x60>
 8002c7a:	2800      	cmp	r0, #0
 8002c7c:	d10e      	bne.n	8002c9c <__lesf2+0x44>
 8002c7e:	2d00      	cmp	r5, #0
 8002c80:	d02a      	beq.n	8002cd8 <__lesf2+0x80>
 8002c82:	2c00      	cmp	r4, #0
 8002c84:	d00c      	beq.n	8002ca0 <__lesf2+0x48>
 8002c86:	428b      	cmp	r3, r1
 8002c88:	d01d      	beq.n	8002cc6 <__lesf2+0x6e>
 8002c8a:	1e58      	subs	r0, r3, #1
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	4018      	ands	r0, r3
 8002c90:	3801      	subs	r0, #1
 8002c92:	e010      	b.n	8002cb6 <__lesf2+0x5e>
 8002c94:	2d00      	cmp	r5, #0
 8002c96:	d10d      	bne.n	8002cb4 <__lesf2+0x5c>
 8002c98:	2a00      	cmp	r2, #0
 8002c9a:	d120      	bne.n	8002cde <__lesf2+0x86>
 8002c9c:	2c00      	cmp	r4, #0
 8002c9e:	d11e      	bne.n	8002cde <__lesf2+0x86>
 8002ca0:	2900      	cmp	r1, #0
 8002ca2:	d023      	beq.n	8002cec <__lesf2+0x94>
 8002ca4:	0008      	movs	r0, r1
 8002ca6:	e006      	b.n	8002cb6 <__lesf2+0x5e>
 8002ca8:	2c00      	cmp	r4, #0
 8002caa:	d103      	bne.n	8002cb4 <__lesf2+0x5c>
 8002cac:	28ff      	cmp	r0, #255	@ 0xff
 8002cae:	d1ec      	bne.n	8002c8a <__lesf2+0x32>
 8002cb0:	2d00      	cmp	r5, #0
 8002cb2:	d017      	beq.n	8002ce4 <__lesf2+0x8c>
 8002cb4:	2002      	movs	r0, #2
 8002cb6:	bd30      	pop	{r4, r5, pc}
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	d0e6      	beq.n	8002c8a <__lesf2+0x32>
 8002cbc:	428b      	cmp	r3, r1
 8002cbe:	d1e4      	bne.n	8002c8a <__lesf2+0x32>
 8002cc0:	4282      	cmp	r2, r0
 8002cc2:	dce2      	bgt.n	8002c8a <__lesf2+0x32>
 8002cc4:	db04      	blt.n	8002cd0 <__lesf2+0x78>
 8002cc6:	42ac      	cmp	r4, r5
 8002cc8:	d8df      	bhi.n	8002c8a <__lesf2+0x32>
 8002cca:	2000      	movs	r0, #0
 8002ccc:	42ac      	cmp	r4, r5
 8002cce:	d2f2      	bcs.n	8002cb6 <__lesf2+0x5e>
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00b      	beq.n	8002cec <__lesf2+0x94>
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	e7ee      	b.n	8002cb6 <__lesf2+0x5e>
 8002cd8:	2c00      	cmp	r4, #0
 8002cda:	d0ec      	beq.n	8002cb6 <__lesf2+0x5e>
 8002cdc:	e7d5      	b.n	8002c8a <__lesf2+0x32>
 8002cde:	428b      	cmp	r3, r1
 8002ce0:	d1d3      	bne.n	8002c8a <__lesf2+0x32>
 8002ce2:	e7f5      	b.n	8002cd0 <__lesf2+0x78>
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	428b      	cmp	r3, r1
 8002ce8:	d0e5      	beq.n	8002cb6 <__lesf2+0x5e>
 8002cea:	e7ce      	b.n	8002c8a <__lesf2+0x32>
 8002cec:	2001      	movs	r0, #1
 8002cee:	4240      	negs	r0, r0
 8002cf0:	e7e1      	b.n	8002cb6 <__lesf2+0x5e>
 8002cf2:	46c0      	nop			@ (mov r8, r8)

08002cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cfa:	f000 faa1 	bl	8003240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cfe:	f000 f853 	bl	8002da8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d02:	f000 f933 	bl	8002f6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002d06:	f000 f8e3 	bl	8002ed0 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8002d0a:	f000 f8ab 	bl	8002e64 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002d0e:	4b23      	ldr	r3, [pc, #140]	@ (8002d9c <main+0xa8>)
 8002d10:	2100      	movs	r1, #0
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 fc07 	bl	8003526 <HAL_DAC_Start>
  uint32_t time = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	float value = sin((float)time / (float)1000 * ((float)3.14159 * 2));
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7fe fa55 	bl	80011cc <__aeabi_ui2f>
 8002d22:	1c03      	adds	r3, r0, #0
 8002d24:	491e      	ldr	r1, [pc, #120]	@ (8002da0 <main+0xac>)
 8002d26:	1c18      	adds	r0, r3, #0
 8002d28:	f7fd fe2e 	bl	8000988 <__aeabi_fdiv>
 8002d2c:	1c03      	adds	r3, r0, #0
 8002d2e:	491d      	ldr	r1, [pc, #116]	@ (8002da4 <main+0xb0>)
 8002d30:	1c18      	adds	r0, r3, #0
 8002d32:	f7fd ff49 	bl	8000bc8 <__aeabi_fmul>
 8002d36:	1c03      	adds	r3, r0, #0
 8002d38:	1c18      	adds	r0, r3, #0
 8002d3a:	f7ff fde5 	bl	8002908 <__aeabi_f2d>
 8002d3e:	0002      	movs	r2, r0
 8002d40:	000b      	movs	r3, r1
 8002d42:	0010      	movs	r0, r2
 8002d44:	0019      	movs	r1, r3
 8002d46:	f002 fc73 	bl	8005630 <sin>
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	000b      	movs	r3, r1
 8002d4e:	0010      	movs	r0, r2
 8002d50:	0019      	movs	r1, r3
 8002d52:	f7ff fe21 	bl	8002998 <__aeabi_d2f>
 8002d56:	1c03      	adds	r3, r0, #0
 8002d58:	603b      	str	r3, [r7, #0]
	//float value = (float)time / (float)1000;
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048 + (value * 2048));
 8002d5a:	218a      	movs	r1, #138	@ 0x8a
 8002d5c:	05c9      	lsls	r1, r1, #23
 8002d5e:	6838      	ldr	r0, [r7, #0]
 8002d60:	f7fd ff32 	bl	8000bc8 <__aeabi_fmul>
 8002d64:	1c03      	adds	r3, r0, #0
 8002d66:	218a      	movs	r1, #138	@ 0x8a
 8002d68:	05c9      	lsls	r1, r1, #23
 8002d6a:	1c18      	adds	r0, r3, #0
 8002d6c:	f7fd fc82 	bl	8000674 <__aeabi_fadd>
 8002d70:	1c03      	adds	r3, r0, #0
 8002d72:	1c18      	adds	r0, r3, #0
 8002d74:	f7fd fb9a 	bl	80004ac <__aeabi_f2uiz>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	4808      	ldr	r0, [pc, #32]	@ (8002d9c <main+0xa8>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2100      	movs	r1, #0
 8002d80:	f000 fc27 	bl	80035d2 <HAL_DAC_SetValue>

	time++;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3301      	adds	r3, #1
 8002d88:	607b      	str	r3, [r7, #4]
	if(time >= 1000){
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	23fa      	movs	r3, #250	@ 0xfa
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d3c3      	bcc.n	8002d1c <main+0x28>
		time = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	607b      	str	r3, [r7, #4]
  {
 8002d98:	e7c0      	b.n	8002d1c <main+0x28>
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	20000028 	.word	0x20000028
 8002da0:	447a0000 	.word	0x447a0000
 8002da4:	40c90fd0 	.word	0x40c90fd0

08002da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b093      	sub	sp, #76	@ 0x4c
 8002dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dae:	2410      	movs	r4, #16
 8002db0:	193b      	adds	r3, r7, r4
 8002db2:	0018      	movs	r0, r3
 8002db4:	2338      	movs	r3, #56	@ 0x38
 8002db6:	001a      	movs	r2, r3
 8002db8:	2100      	movs	r1, #0
 8002dba:	f002 fc0d 	bl	80055d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dbe:	003b      	movs	r3, r7
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	2310      	movs	r3, #16
 8002dc4:	001a      	movs	r2, r3
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	f002 fc06 	bl	80055d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dcc:	2380      	movs	r3, #128	@ 0x80
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f000 fed7 	bl	8003b84 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dd6:	193b      	adds	r3, r7, r4
 8002dd8:	2202      	movs	r2, #2
 8002dda:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ddc:	193b      	adds	r3, r7, r4
 8002dde:	2280      	movs	r2, #128	@ 0x80
 8002de0:	0052      	lsls	r2, r2, #1
 8002de2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002de4:	0021      	movs	r1, r4
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	2200      	movs	r2, #0
 8002dea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002dec:	187b      	adds	r3, r7, r1
 8002dee:	2240      	movs	r2, #64	@ 0x40
 8002df0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	2202      	movs	r2, #2
 8002df6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	2200      	movs	r2, #0
 8002e02:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002e04:	187b      	adds	r3, r7, r1
 8002e06:	2208      	movs	r2, #8
 8002e08:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e0a:	187b      	adds	r3, r7, r1
 8002e0c:	2280      	movs	r2, #128	@ 0x80
 8002e0e:	0292      	lsls	r2, r2, #10
 8002e10:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002e12:	187b      	adds	r3, r7, r1
 8002e14:	2280      	movs	r2, #128	@ 0x80
 8002e16:	0492      	lsls	r2, r2, #18
 8002e18:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002e1a:	187b      	adds	r3, r7, r1
 8002e1c:	2280      	movs	r2, #128	@ 0x80
 8002e1e:	0592      	lsls	r2, r2, #22
 8002e20:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e22:	187b      	adds	r3, r7, r1
 8002e24:	0018      	movs	r0, r3
 8002e26:	f000 fef9 	bl	8003c1c <HAL_RCC_OscConfig>
 8002e2a:	1e03      	subs	r3, r0, #0
 8002e2c:	d001      	beq.n	8002e32 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002e2e:	f000 f8ed 	bl	800300c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e32:	003b      	movs	r3, r7
 8002e34:	2207      	movs	r2, #7
 8002e36:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e38:	003b      	movs	r3, r7
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e3e:	003b      	movs	r3, r7
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e44:	003b      	movs	r3, r7
 8002e46:	2200      	movs	r2, #0
 8002e48:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e4a:	003b      	movs	r3, r7
 8002e4c:	2102      	movs	r1, #2
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f001 f9fe 	bl	8004250 <HAL_RCC_ClockConfig>
 8002e54:	1e03      	subs	r3, r0, #0
 8002e56:	d001      	beq.n	8002e5c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002e58:	f000 f8d8 	bl	800300c <Error_Handler>
  }
}
 8002e5c:	46c0      	nop			@ (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b013      	add	sp, #76	@ 0x4c
 8002e62:	bd90      	pop	{r4, r7, pc}

08002e64 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	@ 0x28
 8002e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002e6a:	1d3b      	adds	r3, r7, #4
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	2324      	movs	r3, #36	@ 0x24
 8002e70:	001a      	movs	r2, r3
 8002e72:	2100      	movs	r1, #0
 8002e74:	f002 fbb0 	bl	80055d8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002e78:	4b13      	ldr	r3, [pc, #76]	@ (8002ec8 <MX_DAC1_Init+0x64>)
 8002e7a:	4a14      	ldr	r2, [pc, #80]	@ (8002ecc <MX_DAC1_Init+0x68>)
 8002e7c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002e7e:	4b12      	ldr	r3, [pc, #72]	@ (8002ec8 <MX_DAC1_Init+0x64>)
 8002e80:	0018      	movs	r0, r3
 8002e82:	f000 fb2d 	bl	80034e0 <HAL_DAC_Init>
 8002e86:	1e03      	subs	r3, r0, #0
 8002e88:	d001      	beq.n	8002e8e <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 8002e8a:	f000 f8bf 	bl	800300c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002e8e:	1d3b      	adds	r3, r7, #4
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	2200      	movs	r2, #0
 8002e98:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002eac:	1d39      	adds	r1, r7, #4
 8002eae:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <MX_DAC1_Init+0x64>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f000 fbb4 	bl	8003620 <HAL_DAC_ConfigChannel>
 8002eb8:	1e03      	subs	r3, r0, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8002ebc:	f000 f8a6 	bl	800300c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002ec0:	46c0      	nop			@ (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b00a      	add	sp, #40	@ 0x28
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000028 	.word	0x20000028
 8002ecc:	40007400 	.word	0x40007400

08002ed0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ed4:	4b23      	ldr	r3, [pc, #140]	@ (8002f64 <MX_USART2_UART_Init+0x94>)
 8002ed6:	4a24      	ldr	r2, [pc, #144]	@ (8002f68 <MX_USART2_UART_Init+0x98>)
 8002ed8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002eda:	4b22      	ldr	r3, [pc, #136]	@ (8002f64 <MX_USART2_UART_Init+0x94>)
 8002edc:	22e1      	movs	r2, #225	@ 0xe1
 8002ede:	0252      	lsls	r2, r2, #9
 8002ee0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ee2:	4b20      	ldr	r3, [pc, #128]	@ (8002f64 <MX_USART2_UART_Init+0x94>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f64 <MX_USART2_UART_Init+0x94>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002eee:	4b1d      	ldr	r3, [pc, #116]	@ (8002f64 <MX_USART2_UART_Init+0x94>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f64 <MX_USART2_UART_Init+0x94>)
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002efa:	4b1a      	ldr	r3, [pc, #104]	@ (8002f64 <MX_USART2_UART_Init+0x94>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f00:	4b18      	ldr	r3, [pc, #96]	@ (8002f64 <MX_USART2_UART_Init+0x94>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f06:	4b17      	ldr	r3, [pc, #92]	@ (8002f64 <MX_USART2_UART_Init+0x94>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f0c:	4b15      	ldr	r3, [pc, #84]	@ (8002f64 <MX_USART2_UART_Init+0x94>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f12:	4b14      	ldr	r3, [pc, #80]	@ (8002f64 <MX_USART2_UART_Init+0x94>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f18:	4b12      	ldr	r3, [pc, #72]	@ (8002f64 <MX_USART2_UART_Init+0x94>)
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f001 fcfa 	bl	8004914 <HAL_UART_Init>
 8002f20:	1e03      	subs	r3, r0, #0
 8002f22:	d001      	beq.n	8002f28 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002f24:	f000 f872 	bl	800300c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f28:	4b0e      	ldr	r3, [pc, #56]	@ (8002f64 <MX_USART2_UART_Init+0x94>)
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f002 fa73 	bl	8005418 <HAL_UARTEx_SetTxFifoThreshold>
 8002f32:	1e03      	subs	r3, r0, #0
 8002f34:	d001      	beq.n	8002f3a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002f36:	f000 f869 	bl	800300c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f64 <MX_USART2_UART_Init+0x94>)
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f002 faaa 	bl	8005498 <HAL_UARTEx_SetRxFifoThreshold>
 8002f44:	1e03      	subs	r3, r0, #0
 8002f46:	d001      	beq.n	8002f4c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002f48:	f000 f860 	bl	800300c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002f4c:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <MX_USART2_UART_Init+0x94>)
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f002 fa28 	bl	80053a4 <HAL_UARTEx_DisableFifoMode>
 8002f54:	1e03      	subs	r3, r0, #0
 8002f56:	d001      	beq.n	8002f5c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002f58:	f000 f858 	bl	800300c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f5c:	46c0      	nop			@ (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			@ (mov r8, r8)
 8002f64:	2000003c 	.word	0x2000003c
 8002f68:	40004400 	.word	0x40004400

08002f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f6c:	b590      	push	{r4, r7, lr}
 8002f6e:	b089      	sub	sp, #36	@ 0x24
 8002f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f72:	240c      	movs	r4, #12
 8002f74:	193b      	adds	r3, r7, r4
 8002f76:	0018      	movs	r0, r3
 8002f78:	2314      	movs	r3, #20
 8002f7a:	001a      	movs	r2, r3
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	f002 fb2b 	bl	80055d8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f82:	4b21      	ldr	r3, [pc, #132]	@ (8003008 <MX_GPIO_Init+0x9c>)
 8002f84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f86:	4b20      	ldr	r3, [pc, #128]	@ (8003008 <MX_GPIO_Init+0x9c>)
 8002f88:	2104      	movs	r1, #4
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003008 <MX_GPIO_Init+0x9c>)
 8002f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f92:	2204      	movs	r2, #4
 8002f94:	4013      	ands	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003008 <MX_GPIO_Init+0x9c>)
 8002f9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003008 <MX_GPIO_Init+0x9c>)
 8002fa0:	2120      	movs	r1, #32
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fa6:	4b18      	ldr	r3, [pc, #96]	@ (8003008 <MX_GPIO_Init+0x9c>)
 8002fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002faa:	2220      	movs	r2, #32
 8002fac:	4013      	ands	r3, r2
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb2:	4b15      	ldr	r3, [pc, #84]	@ (8003008 <MX_GPIO_Init+0x9c>)
 8002fb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fb6:	4b14      	ldr	r3, [pc, #80]	@ (8003008 <MX_GPIO_Init+0x9c>)
 8002fb8:	2101      	movs	r1, #1
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fbe:	4b12      	ldr	r3, [pc, #72]	@ (8003008 <MX_GPIO_Init+0x9c>)
 8002fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002fca:	23a0      	movs	r3, #160	@ 0xa0
 8002fcc:	05db      	lsls	r3, r3, #23
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2120      	movs	r1, #32
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f000 fdb8 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002fd8:	0021      	movs	r1, r4
 8002fda:	187b      	adds	r3, r7, r1
 8002fdc:	2220      	movs	r2, #32
 8002fde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe0:	187b      	adds	r3, r7, r1
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	187b      	adds	r3, r7, r1
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	2202      	movs	r2, #2
 8002ff0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002ff2:	187a      	adds	r2, r7, r1
 8002ff4:	23a0      	movs	r3, #160	@ 0xa0
 8002ff6:	05db      	lsls	r3, r3, #23
 8002ff8:	0011      	movs	r1, r2
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 fc40 	bl	8003880 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003000:	46c0      	nop			@ (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	b009      	add	sp, #36	@ 0x24
 8003006:	bd90      	pop	{r4, r7, pc}
 8003008:	40021000 	.word	0x40021000

0800300c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003010:	b672      	cpsid	i
}
 8003012:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003014:	46c0      	nop			@ (mov r8, r8)
 8003016:	e7fd      	b.n	8003014 <Error_Handler+0x8>

08003018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800301e:	4b11      	ldr	r3, [pc, #68]	@ (8003064 <HAL_MspInit+0x4c>)
 8003020:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003022:	4b10      	ldr	r3, [pc, #64]	@ (8003064 <HAL_MspInit+0x4c>)
 8003024:	2101      	movs	r1, #1
 8003026:	430a      	orrs	r2, r1
 8003028:	641a      	str	r2, [r3, #64]	@ 0x40
 800302a:	4b0e      	ldr	r3, [pc, #56]	@ (8003064 <HAL_MspInit+0x4c>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	2201      	movs	r2, #1
 8003030:	4013      	ands	r3, r2
 8003032:	607b      	str	r3, [r7, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003036:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <HAL_MspInit+0x4c>)
 8003038:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800303a:	4b0a      	ldr	r3, [pc, #40]	@ (8003064 <HAL_MspInit+0x4c>)
 800303c:	2180      	movs	r1, #128	@ 0x80
 800303e:	0549      	lsls	r1, r1, #21
 8003040:	430a      	orrs	r2, r1
 8003042:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003044:	4b07      	ldr	r3, [pc, #28]	@ (8003064 <HAL_MspInit+0x4c>)
 8003046:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003048:	2380      	movs	r3, #128	@ 0x80
 800304a:	055b      	lsls	r3, r3, #21
 800304c:	4013      	ands	r3, r2
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003052:	23c0      	movs	r3, #192	@ 0xc0
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	0018      	movs	r0, r3
 8003058:	f000 f978 	bl	800334c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800305c:	46c0      	nop			@ (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	b002      	add	sp, #8
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000

08003068 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b08b      	sub	sp, #44	@ 0x2c
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003070:	2414      	movs	r4, #20
 8003072:	193b      	adds	r3, r7, r4
 8003074:	0018      	movs	r0, r3
 8003076:	2314      	movs	r3, #20
 8003078:	001a      	movs	r2, r3
 800307a:	2100      	movs	r1, #0
 800307c:	f002 faac 	bl	80055d8 <memset>
  if(hdac->Instance==DAC1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a18      	ldr	r2, [pc, #96]	@ (80030e8 <HAL_DAC_MspInit+0x80>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d129      	bne.n	80030de <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800308a:	4b18      	ldr	r3, [pc, #96]	@ (80030ec <HAL_DAC_MspInit+0x84>)
 800308c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800308e:	4b17      	ldr	r3, [pc, #92]	@ (80030ec <HAL_DAC_MspInit+0x84>)
 8003090:	2180      	movs	r1, #128	@ 0x80
 8003092:	0589      	lsls	r1, r1, #22
 8003094:	430a      	orrs	r2, r1
 8003096:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003098:	4b14      	ldr	r3, [pc, #80]	@ (80030ec <HAL_DAC_MspInit+0x84>)
 800309a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800309c:	2380      	movs	r3, #128	@ 0x80
 800309e:	059b      	lsls	r3, r3, #22
 80030a0:	4013      	ands	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a6:	4b11      	ldr	r3, [pc, #68]	@ (80030ec <HAL_DAC_MspInit+0x84>)
 80030a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030aa:	4b10      	ldr	r3, [pc, #64]	@ (80030ec <HAL_DAC_MspInit+0x84>)
 80030ac:	2101      	movs	r1, #1
 80030ae:	430a      	orrs	r2, r1
 80030b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80030b2:	4b0e      	ldr	r3, [pc, #56]	@ (80030ec <HAL_DAC_MspInit+0x84>)
 80030b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b6:	2201      	movs	r2, #1
 80030b8:	4013      	ands	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030be:	193b      	adds	r3, r7, r4
 80030c0:	2210      	movs	r2, #16
 80030c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030c4:	193b      	adds	r3, r7, r4
 80030c6:	2203      	movs	r2, #3
 80030c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ca:	193b      	adds	r3, r7, r4
 80030cc:	2200      	movs	r2, #0
 80030ce:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d0:	193a      	adds	r2, r7, r4
 80030d2:	23a0      	movs	r3, #160	@ 0xa0
 80030d4:	05db      	lsls	r3, r3, #23
 80030d6:	0011      	movs	r1, r2
 80030d8:	0018      	movs	r0, r3
 80030da:	f000 fbd1 	bl	8003880 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b00b      	add	sp, #44	@ 0x2c
 80030e4:	bd90      	pop	{r4, r7, pc}
 80030e6:	46c0      	nop			@ (mov r8, r8)
 80030e8:	40007400 	.word	0x40007400
 80030ec:	40021000 	.word	0x40021000

080030f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b097      	sub	sp, #92	@ 0x5c
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f8:	2344      	movs	r3, #68	@ 0x44
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	0018      	movs	r0, r3
 80030fe:	2314      	movs	r3, #20
 8003100:	001a      	movs	r2, r3
 8003102:	2100      	movs	r1, #0
 8003104:	f002 fa68 	bl	80055d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003108:	2410      	movs	r4, #16
 800310a:	193b      	adds	r3, r7, r4
 800310c:	0018      	movs	r0, r3
 800310e:	2334      	movs	r3, #52	@ 0x34
 8003110:	001a      	movs	r2, r3
 8003112:	2100      	movs	r1, #0
 8003114:	f002 fa60 	bl	80055d8 <memset>
  if(huart->Instance==USART2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a22      	ldr	r2, [pc, #136]	@ (80031a8 <HAL_UART_MspInit+0xb8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d13e      	bne.n	80031a0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003122:	193b      	adds	r3, r7, r4
 8003124:	2202      	movs	r2, #2
 8003126:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003128:	193b      	adds	r3, r7, r4
 800312a:	2200      	movs	r2, #0
 800312c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800312e:	193b      	adds	r3, r7, r4
 8003130:	0018      	movs	r0, r3
 8003132:	f001 fa37 	bl	80045a4 <HAL_RCCEx_PeriphCLKConfig>
 8003136:	1e03      	subs	r3, r0, #0
 8003138:	d001      	beq.n	800313e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800313a:	f7ff ff67 	bl	800300c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800313e:	4b1b      	ldr	r3, [pc, #108]	@ (80031ac <HAL_UART_MspInit+0xbc>)
 8003140:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003142:	4b1a      	ldr	r3, [pc, #104]	@ (80031ac <HAL_UART_MspInit+0xbc>)
 8003144:	2180      	movs	r1, #128	@ 0x80
 8003146:	0289      	lsls	r1, r1, #10
 8003148:	430a      	orrs	r2, r1
 800314a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800314c:	4b17      	ldr	r3, [pc, #92]	@ (80031ac <HAL_UART_MspInit+0xbc>)
 800314e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003150:	2380      	movs	r3, #128	@ 0x80
 8003152:	029b      	lsls	r3, r3, #10
 8003154:	4013      	ands	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315a:	4b14      	ldr	r3, [pc, #80]	@ (80031ac <HAL_UART_MspInit+0xbc>)
 800315c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800315e:	4b13      	ldr	r3, [pc, #76]	@ (80031ac <HAL_UART_MspInit+0xbc>)
 8003160:	2101      	movs	r1, #1
 8003162:	430a      	orrs	r2, r1
 8003164:	635a      	str	r2, [r3, #52]	@ 0x34
 8003166:	4b11      	ldr	r3, [pc, #68]	@ (80031ac <HAL_UART_MspInit+0xbc>)
 8003168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800316a:	2201      	movs	r2, #1
 800316c:	4013      	ands	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8003172:	2144      	movs	r1, #68	@ 0x44
 8003174:	187b      	adds	r3, r7, r1
 8003176:	220c      	movs	r2, #12
 8003178:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317a:	187b      	adds	r3, r7, r1
 800317c:	2202      	movs	r2, #2
 800317e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003180:	187b      	adds	r3, r7, r1
 8003182:	2201      	movs	r2, #1
 8003184:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003186:	187b      	adds	r3, r7, r1
 8003188:	2200      	movs	r2, #0
 800318a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800318c:	187b      	adds	r3, r7, r1
 800318e:	2201      	movs	r2, #1
 8003190:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003192:	187a      	adds	r2, r7, r1
 8003194:	23a0      	movs	r3, #160	@ 0xa0
 8003196:	05db      	lsls	r3, r3, #23
 8003198:	0011      	movs	r1, r2
 800319a:	0018      	movs	r0, r3
 800319c:	f000 fb70 	bl	8003880 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031a0:	46c0      	nop			@ (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b017      	add	sp, #92	@ 0x5c
 80031a6:	bd90      	pop	{r4, r7, pc}
 80031a8:	40004400 	.word	0x40004400
 80031ac:	40021000 	.word	0x40021000

080031b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031b4:	46c0      	nop			@ (mov r8, r8)
 80031b6:	e7fd      	b.n	80031b4 <NMI_Handler+0x4>

080031b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031bc:	46c0      	nop			@ (mov r8, r8)
 80031be:	e7fd      	b.n	80031bc <HardFault_Handler+0x4>

080031c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80031c4:	46c0      	nop			@ (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031d8:	f000 f89c 	bl	8003314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031dc:	46c0      	nop			@ (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031e6:	46c0      	nop			@ (mov r8, r8)
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031ec:	480d      	ldr	r0, [pc, #52]	@ (8003224 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80031f0:	f7ff fff7 	bl	80031e2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031f4:	480c      	ldr	r0, [pc, #48]	@ (8003228 <LoopForever+0x6>)
  ldr r1, =_edata
 80031f6:	490d      	ldr	r1, [pc, #52]	@ (800322c <LoopForever+0xa>)
  ldr r2, =_sidata
 80031f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003230 <LoopForever+0xe>)
  movs r3, #0
 80031fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031fc:	e002      	b.n	8003204 <LoopCopyDataInit>

080031fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003202:	3304      	adds	r3, #4

08003204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003208:	d3f9      	bcc.n	80031fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800320a:	4a0a      	ldr	r2, [pc, #40]	@ (8003234 <LoopForever+0x12>)
  ldr r4, =_ebss
 800320c:	4c0a      	ldr	r4, [pc, #40]	@ (8003238 <LoopForever+0x16>)
  movs r3, #0
 800320e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003210:	e001      	b.n	8003216 <LoopFillZerobss>

08003212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003214:	3204      	adds	r2, #4

08003216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003218:	d3fb      	bcc.n	8003212 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800321a:	f002 f9e5 	bl	80055e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800321e:	f7ff fd69 	bl	8002cf4 <main>

08003222 <LoopForever>:

LoopForever:
  b LoopForever
 8003222:	e7fe      	b.n	8003222 <LoopForever>
  ldr   r0, =_estack
 8003224:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800322c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003230:	080068d0 	.word	0x080068d0
  ldr r2, =_sbss
 8003234:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003238:	200000d4 	.word	0x200000d4

0800323c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800323c:	e7fe      	b.n	800323c <ADC1_COMP_IRQHandler>
	...

08003240 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003246:	1dfb      	adds	r3, r7, #7
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800324c:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <HAL_Init+0x3c>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b0a      	ldr	r3, [pc, #40]	@ (800327c <HAL_Init+0x3c>)
 8003252:	2180      	movs	r1, #128	@ 0x80
 8003254:	0049      	lsls	r1, r1, #1
 8003256:	430a      	orrs	r2, r1
 8003258:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800325a:	2000      	movs	r0, #0
 800325c:	f000 f810 	bl	8003280 <HAL_InitTick>
 8003260:	1e03      	subs	r3, r0, #0
 8003262:	d003      	beq.n	800326c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003264:	1dfb      	adds	r3, r7, #7
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	e001      	b.n	8003270 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800326c:	f7ff fed4 	bl	8003018 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003270:	1dfb      	adds	r3, r7, #7
 8003272:	781b      	ldrb	r3, [r3, #0]
}
 8003274:	0018      	movs	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	b002      	add	sp, #8
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40022000 	.word	0x40022000

08003280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003288:	230f      	movs	r3, #15
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003290:	4b1d      	ldr	r3, [pc, #116]	@ (8003308 <HAL_InitTick+0x88>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d02b      	beq.n	80032f0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003298:	4b1c      	ldr	r3, [pc, #112]	@ (800330c <HAL_InitTick+0x8c>)
 800329a:	681c      	ldr	r4, [r3, #0]
 800329c:	4b1a      	ldr	r3, [pc, #104]	@ (8003308 <HAL_InitTick+0x88>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	0019      	movs	r1, r3
 80032a2:	23fa      	movs	r3, #250	@ 0xfa
 80032a4:	0098      	lsls	r0, r3, #2
 80032a6:	f7fc ff2d 	bl	8000104 <__udivsi3>
 80032aa:	0003      	movs	r3, r0
 80032ac:	0019      	movs	r1, r3
 80032ae:	0020      	movs	r0, r4
 80032b0:	f7fc ff28 	bl	8000104 <__udivsi3>
 80032b4:	0003      	movs	r3, r0
 80032b6:	0018      	movs	r0, r3
 80032b8:	f000 f905 	bl	80034c6 <HAL_SYSTICK_Config>
 80032bc:	1e03      	subs	r3, r0, #0
 80032be:	d112      	bne.n	80032e6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d80a      	bhi.n	80032dc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	2301      	movs	r3, #1
 80032ca:	425b      	negs	r3, r3
 80032cc:	2200      	movs	r2, #0
 80032ce:	0018      	movs	r0, r3
 80032d0:	f000 f8e4 	bl	800349c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003310 <HAL_InitTick+0x90>)
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	e00d      	b.n	80032f8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80032dc:	230f      	movs	r3, #15
 80032de:	18fb      	adds	r3, r7, r3
 80032e0:	2201      	movs	r2, #1
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	e008      	b.n	80032f8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032e6:	230f      	movs	r3, #15
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	e003      	b.n	80032f8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032f0:	230f      	movs	r3, #15
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	2201      	movs	r2, #1
 80032f6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80032f8:	230f      	movs	r3, #15
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	781b      	ldrb	r3, [r3, #0]
}
 80032fe:	0018      	movs	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	b005      	add	sp, #20
 8003304:	bd90      	pop	{r4, r7, pc}
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	20000008 	.word	0x20000008
 800330c:	20000000 	.word	0x20000000
 8003310:	20000004 	.word	0x20000004

08003314 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003318:	4b05      	ldr	r3, [pc, #20]	@ (8003330 <HAL_IncTick+0x1c>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	001a      	movs	r2, r3
 800331e:	4b05      	ldr	r3, [pc, #20]	@ (8003334 <HAL_IncTick+0x20>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	18d2      	adds	r2, r2, r3
 8003324:	4b03      	ldr	r3, [pc, #12]	@ (8003334 <HAL_IncTick+0x20>)
 8003326:	601a      	str	r2, [r3, #0]
}
 8003328:	46c0      	nop			@ (mov r8, r8)
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	20000008 	.word	0x20000008
 8003334:	200000d0 	.word	0x200000d0

08003338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  return uwTick;
 800333c:	4b02      	ldr	r3, [pc, #8]	@ (8003348 <HAL_GetTick+0x10>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	0018      	movs	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	200000d0 	.word	0x200000d0

0800334c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003354:	4b06      	ldr	r3, [pc, #24]	@ (8003370 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a06      	ldr	r2, [pc, #24]	@ (8003374 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800335a:	4013      	ands	r3, r2
 800335c:	0019      	movs	r1, r3
 800335e:	4b04      	ldr	r3, [pc, #16]	@ (8003370 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	430a      	orrs	r2, r1
 8003364:	601a      	str	r2, [r3, #0]
}
 8003366:	46c0      	nop			@ (mov r8, r8)
 8003368:	46bd      	mov	sp, r7
 800336a:	b002      	add	sp, #8
 800336c:	bd80      	pop	{r7, pc}
 800336e:	46c0      	nop			@ (mov r8, r8)
 8003370:	40010000 	.word	0x40010000
 8003374:	fffff9ff 	.word	0xfffff9ff

08003378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	0002      	movs	r2, r0
 8003380:	6039      	str	r1, [r7, #0]
 8003382:	1dfb      	adds	r3, r7, #7
 8003384:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003386:	1dfb      	adds	r3, r7, #7
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b7f      	cmp	r3, #127	@ 0x7f
 800338c:	d828      	bhi.n	80033e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800338e:	4a2f      	ldr	r2, [pc, #188]	@ (800344c <__NVIC_SetPriority+0xd4>)
 8003390:	1dfb      	adds	r3, r7, #7
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	b25b      	sxtb	r3, r3
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	33c0      	adds	r3, #192	@ 0xc0
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	589b      	ldr	r3, [r3, r2]
 800339e:	1dfa      	adds	r2, r7, #7
 80033a0:	7812      	ldrb	r2, [r2, #0]
 80033a2:	0011      	movs	r1, r2
 80033a4:	2203      	movs	r2, #3
 80033a6:	400a      	ands	r2, r1
 80033a8:	00d2      	lsls	r2, r2, #3
 80033aa:	21ff      	movs	r1, #255	@ 0xff
 80033ac:	4091      	lsls	r1, r2
 80033ae:	000a      	movs	r2, r1
 80033b0:	43d2      	mvns	r2, r2
 80033b2:	401a      	ands	r2, r3
 80033b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	019b      	lsls	r3, r3, #6
 80033ba:	22ff      	movs	r2, #255	@ 0xff
 80033bc:	401a      	ands	r2, r3
 80033be:	1dfb      	adds	r3, r7, #7
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	0018      	movs	r0, r3
 80033c4:	2303      	movs	r3, #3
 80033c6:	4003      	ands	r3, r0
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033cc:	481f      	ldr	r0, [pc, #124]	@ (800344c <__NVIC_SetPriority+0xd4>)
 80033ce:	1dfb      	adds	r3, r7, #7
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	b25b      	sxtb	r3, r3
 80033d4:	089b      	lsrs	r3, r3, #2
 80033d6:	430a      	orrs	r2, r1
 80033d8:	33c0      	adds	r3, #192	@ 0xc0
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80033de:	e031      	b.n	8003444 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003450 <__NVIC_SetPriority+0xd8>)
 80033e2:	1dfb      	adds	r3, r7, #7
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	0019      	movs	r1, r3
 80033e8:	230f      	movs	r3, #15
 80033ea:	400b      	ands	r3, r1
 80033ec:	3b08      	subs	r3, #8
 80033ee:	089b      	lsrs	r3, r3, #2
 80033f0:	3306      	adds	r3, #6
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	18d3      	adds	r3, r2, r3
 80033f6:	3304      	adds	r3, #4
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	1dfa      	adds	r2, r7, #7
 80033fc:	7812      	ldrb	r2, [r2, #0]
 80033fe:	0011      	movs	r1, r2
 8003400:	2203      	movs	r2, #3
 8003402:	400a      	ands	r2, r1
 8003404:	00d2      	lsls	r2, r2, #3
 8003406:	21ff      	movs	r1, #255	@ 0xff
 8003408:	4091      	lsls	r1, r2
 800340a:	000a      	movs	r2, r1
 800340c:	43d2      	mvns	r2, r2
 800340e:	401a      	ands	r2, r3
 8003410:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	019b      	lsls	r3, r3, #6
 8003416:	22ff      	movs	r2, #255	@ 0xff
 8003418:	401a      	ands	r2, r3
 800341a:	1dfb      	adds	r3, r7, #7
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	0018      	movs	r0, r3
 8003420:	2303      	movs	r3, #3
 8003422:	4003      	ands	r3, r0
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003428:	4809      	ldr	r0, [pc, #36]	@ (8003450 <__NVIC_SetPriority+0xd8>)
 800342a:	1dfb      	adds	r3, r7, #7
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	001c      	movs	r4, r3
 8003430:	230f      	movs	r3, #15
 8003432:	4023      	ands	r3, r4
 8003434:	3b08      	subs	r3, #8
 8003436:	089b      	lsrs	r3, r3, #2
 8003438:	430a      	orrs	r2, r1
 800343a:	3306      	adds	r3, #6
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	18c3      	adds	r3, r0, r3
 8003440:	3304      	adds	r3, #4
 8003442:	601a      	str	r2, [r3, #0]
}
 8003444:	46c0      	nop			@ (mov r8, r8)
 8003446:	46bd      	mov	sp, r7
 8003448:	b003      	add	sp, #12
 800344a:	bd90      	pop	{r4, r7, pc}
 800344c:	e000e100 	.word	0xe000e100
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	1e5a      	subs	r2, r3, #1
 8003460:	2380      	movs	r3, #128	@ 0x80
 8003462:	045b      	lsls	r3, r3, #17
 8003464:	429a      	cmp	r2, r3
 8003466:	d301      	bcc.n	800346c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003468:	2301      	movs	r3, #1
 800346a:	e010      	b.n	800348e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346c:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <SysTick_Config+0x44>)
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	3a01      	subs	r2, #1
 8003472:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003474:	2301      	movs	r3, #1
 8003476:	425b      	negs	r3, r3
 8003478:	2103      	movs	r1, #3
 800347a:	0018      	movs	r0, r3
 800347c:	f7ff ff7c 	bl	8003378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003480:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <SysTick_Config+0x44>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003486:	4b04      	ldr	r3, [pc, #16]	@ (8003498 <SysTick_Config+0x44>)
 8003488:	2207      	movs	r2, #7
 800348a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800348c:	2300      	movs	r3, #0
}
 800348e:	0018      	movs	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	b002      	add	sp, #8
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	e000e010 	.word	0xe000e010

0800349c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	210f      	movs	r1, #15
 80034a8:	187b      	adds	r3, r7, r1
 80034aa:	1c02      	adds	r2, r0, #0
 80034ac:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	b25b      	sxtb	r3, r3
 80034b6:	0011      	movs	r1, r2
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7ff ff5d 	bl	8003378 <__NVIC_SetPriority>
}
 80034be:	46c0      	nop			@ (mov r8, r8)
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b004      	add	sp, #16
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7ff ffbf 	bl	8003454 <SysTick_Config>
 80034d6:	0003      	movs	r3, r0
}
 80034d8:	0018      	movs	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	b002      	add	sp, #8
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e015      	b.n	800351e <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	791b      	ldrb	r3, [r3, #4]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	0018      	movs	r0, r3
 8003506:	f7ff fdaf 	bl	8003068 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	0018      	movs	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	b002      	add	sp, #8
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e047      	b.n	80035ca <HAL_DAC_Start+0xa4>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	795b      	ldrb	r3, [r3, #5]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_DAC_Start+0x20>
 8003542:	2302      	movs	r3, #2
 8003544:	e041      	b.n	80035ca <HAL_DAC_Start+0xa4>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6819      	ldr	r1, [r3, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	2210      	movs	r2, #16
 800355c:	4013      	ands	r3, r2
 800355e:	2201      	movs	r2, #1
 8003560:	409a      	lsls	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10f      	bne.n	8003590 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	223e      	movs	r2, #62	@ 0x3e
 8003578:	4013      	ands	r3, r2
 800357a:	2b02      	cmp	r3, #2
 800357c:	d11e      	bne.n	80035bc <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2101      	movs	r1, #1
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	e015      	b.n	80035bc <HAL_DAC_Start+0x96>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	23f8      	movs	r3, #248	@ 0xf8
 8003598:	039b      	lsls	r3, r3, #14
 800359a:	401a      	ands	r2, r3
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2110      	movs	r1, #16
 80035a0:	400b      	ands	r3, r1
 80035a2:	2102      	movs	r1, #2
 80035a4:	4099      	lsls	r1, r3
 80035a6:	000b      	movs	r3, r1
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d107      	bne.n	80035bc <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2102      	movs	r1, #2
 80035b8:	430a      	orrs	r2, r1
 80035ba:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	0018      	movs	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b002      	add	sp, #8
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e014      	b.n	8003618 <HAL_DAC_SetValue+0x46>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d105      	bne.n	8003606 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	18d3      	adds	r3, r2, r3
 8003600:	3308      	adds	r3, #8
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	e004      	b.n	8003610 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	18d3      	adds	r3, r2, r3
 800360c:	3314      	adds	r3, #20
 800360e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	0018      	movs	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	b006      	add	sp, #24
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800362c:	231f      	movs	r3, #31
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_DAC_ConfigChannel+0x20>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e115      	b.n	8003870 <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	795b      	ldrb	r3, [r3, #5]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_DAC_ConfigChannel+0x30>
 800364c:	2302      	movs	r3, #2
 800364e:	e10f      	b.n	8003870 <HAL_DAC_ConfigChannel+0x250>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2202      	movs	r2, #2
 800365a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b04      	cmp	r3, #4
 8003662:	d000      	beq.n	8003666 <HAL_DAC_ConfigChannel+0x46>
 8003664:	e07a      	b.n	800375c <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003666:	f7ff fe67 	bl	8003338 <HAL_GetTick>
 800366a:	0003      	movs	r3, r0
 800366c:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d13d      	bne.n	80036f0 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003674:	e018      	b.n	80036a8 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003676:	f7ff fe5f 	bl	8003338 <HAL_GetTick>
 800367a:	0002      	movs	r2, r0
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	d911      	bls.n	80036a8 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800368a:	2380      	movs	r3, #128	@ 0x80
 800368c:	021b      	lsls	r3, r3, #8
 800368e:	4013      	ands	r3, r2
 8003690:	d00a      	beq.n	80036a8 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2208      	movs	r2, #8
 8003698:	431a      	orrs	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2203      	movs	r2, #3
 80036a2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e0e3      	b.n	8003870 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036ae:	2380      	movs	r3, #128	@ 0x80
 80036b0:	021b      	lsls	r3, r3, #8
 80036b2:	4013      	ands	r3, r2
 80036b4:	d1df      	bne.n	8003676 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	6992      	ldr	r2, [r2, #24]
 80036be:	641a      	str	r2, [r3, #64]	@ 0x40
 80036c0:	e020      	b.n	8003704 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80036c2:	f7ff fe39 	bl	8003338 <HAL_GetTick>
 80036c6:	0002      	movs	r2, r0
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d90f      	bls.n	80036f0 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	da0a      	bge.n	80036f0 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2208      	movs	r2, #8
 80036e0:	431a      	orrs	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2203      	movs	r2, #3
 80036ea:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e0bf      	b.n	8003870 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	dbe3      	blt.n	80036c2 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	6992      	ldr	r2, [r2, #24]
 8003702:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	2110      	movs	r1, #16
 800370e:	400a      	ands	r2, r1
 8003710:	4959      	ldr	r1, [pc, #356]	@ (8003878 <HAL_DAC_ConfigChannel+0x258>)
 8003712:	4091      	lsls	r1, r2
 8003714:	000a      	movs	r2, r1
 8003716:	43d2      	mvns	r2, r2
 8003718:	401a      	ands	r2, r3
 800371a:	0011      	movs	r1, r2
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2010      	movs	r0, #16
 8003724:	4003      	ands	r3, r0
 8003726:	409a      	lsls	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	2110      	movs	r1, #16
 800373a:	400a      	ands	r2, r1
 800373c:	21ff      	movs	r1, #255	@ 0xff
 800373e:	4091      	lsls	r1, r2
 8003740:	000a      	movs	r2, r1
 8003742:	43d2      	mvns	r2, r2
 8003744:	401a      	ands	r2, r3
 8003746:	0011      	movs	r1, r2
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	6a1a      	ldr	r2, [r3, #32]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2010      	movs	r0, #16
 8003750:	4003      	ands	r3, r0
 8003752:	409a      	lsls	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d11d      	bne.n	80037a0 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376a:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2210      	movs	r2, #16
 8003770:	4013      	ands	r3, r2
 8003772:	221f      	movs	r2, #31
 8003774:	409a      	lsls	r2, r3
 8003776:	0013      	movs	r3, r2
 8003778:	43da      	mvns	r2, r3
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	4013      	ands	r3, r2
 800377e:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2210      	movs	r2, #16
 800378a:	4013      	ands	r3, r2
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	409a      	lsls	r2, r3
 8003790:	0013      	movs	r3, r2
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	4313      	orrs	r3, r2
 8003796:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2210      	movs	r2, #16
 80037ac:	4013      	ands	r3, r2
 80037ae:	2207      	movs	r2, #7
 80037b0:	409a      	lsls	r2, r3
 80037b2:	0013      	movs	r3, r2
 80037b4:	43da      	mvns	r2, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	4013      	ands	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	431a      	orrs	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2210      	movs	r2, #16
 80037d2:	4013      	ands	r3, r2
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	409a      	lsls	r2, r3
 80037d8:	0013      	movs	r3, r2
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2110      	movs	r1, #16
 80037f2:	400b      	ands	r3, r1
 80037f4:	2180      	movs	r1, #128	@ 0x80
 80037f6:	01c9      	lsls	r1, r1, #7
 80037f8:	4099      	lsls	r1, r3
 80037fa:	000b      	movs	r3, r1
 80037fc:	43d9      	mvns	r1, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	400a      	ands	r2, r1
 8003804:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2210      	movs	r2, #16
 8003812:	4013      	ands	r3, r2
 8003814:	4a19      	ldr	r2, [pc, #100]	@ (800387c <HAL_DAC_ConfigChannel+0x25c>)
 8003816:	409a      	lsls	r2, r3
 8003818:	0013      	movs	r3, r2
 800381a:	43da      	mvns	r2, r3
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	4013      	ands	r3, r2
 8003820:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2210      	movs	r2, #16
 800382c:	4013      	ands	r3, r2
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	409a      	lsls	r2, r3
 8003832:	0013      	movs	r3, r2
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2110      	movs	r1, #16
 800384c:	400b      	ands	r3, r1
 800384e:	21c0      	movs	r1, #192	@ 0xc0
 8003850:	4099      	lsls	r1, r3
 8003852:	000b      	movs	r3, r1
 8003854:	43d9      	mvns	r1, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	400a      	ands	r2, r1
 800385c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800386a:	231f      	movs	r3, #31
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	781b      	ldrb	r3, [r3, #0]
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b008      	add	sp, #32
 8003876:	bd80      	pop	{r7, pc}
 8003878:	000003ff 	.word	0x000003ff
 800387c:	00000ffe 	.word	0x00000ffe

08003880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800388e:	e147      	b.n	8003b20 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2101      	movs	r1, #1
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4091      	lsls	r1, r2
 800389a:	000a      	movs	r2, r1
 800389c:	4013      	ands	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d100      	bne.n	80038a8 <HAL_GPIO_Init+0x28>
 80038a6:	e138      	b.n	8003b1a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2203      	movs	r2, #3
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d005      	beq.n	80038c0 <HAL_GPIO_Init+0x40>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2203      	movs	r2, #3
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d130      	bne.n	8003922 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	2203      	movs	r2, #3
 80038cc:	409a      	lsls	r2, r3
 80038ce:	0013      	movs	r3, r2
 80038d0:	43da      	mvns	r2, r3
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4013      	ands	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	409a      	lsls	r2, r3
 80038e2:	0013      	movs	r3, r2
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038f6:	2201      	movs	r2, #1
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	409a      	lsls	r2, r3
 80038fc:	0013      	movs	r3, r2
 80038fe:	43da      	mvns	r2, r3
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	4013      	ands	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	091b      	lsrs	r3, r3, #4
 800390c:	2201      	movs	r2, #1
 800390e:	401a      	ands	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	409a      	lsls	r2, r3
 8003914:	0013      	movs	r3, r2
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2203      	movs	r2, #3
 8003928:	4013      	ands	r3, r2
 800392a:	2b03      	cmp	r3, #3
 800392c:	d017      	beq.n	800395e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	2203      	movs	r2, #3
 800393a:	409a      	lsls	r2, r3
 800393c:	0013      	movs	r3, r2
 800393e:	43da      	mvns	r2, r3
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	409a      	lsls	r2, r3
 8003950:	0013      	movs	r3, r2
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2203      	movs	r2, #3
 8003964:	4013      	ands	r3, r2
 8003966:	2b02      	cmp	r3, #2
 8003968:	d123      	bne.n	80039b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	08da      	lsrs	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3208      	adds	r2, #8
 8003972:	0092      	lsls	r2, r2, #2
 8003974:	58d3      	ldr	r3, [r2, r3]
 8003976:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2207      	movs	r2, #7
 800397c:	4013      	ands	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	220f      	movs	r2, #15
 8003982:	409a      	lsls	r2, r3
 8003984:	0013      	movs	r3, r2
 8003986:	43da      	mvns	r2, r3
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4013      	ands	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2107      	movs	r1, #7
 8003996:	400b      	ands	r3, r1
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	409a      	lsls	r2, r3
 800399c:	0013      	movs	r3, r2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	08da      	lsrs	r2, r3, #3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3208      	adds	r2, #8
 80039ac:	0092      	lsls	r2, r2, #2
 80039ae:	6939      	ldr	r1, [r7, #16]
 80039b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	2203      	movs	r2, #3
 80039be:	409a      	lsls	r2, r3
 80039c0:	0013      	movs	r3, r2
 80039c2:	43da      	mvns	r2, r3
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2203      	movs	r2, #3
 80039d0:	401a      	ands	r2, r3
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	409a      	lsls	r2, r3
 80039d8:	0013      	movs	r3, r2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	23c0      	movs	r3, #192	@ 0xc0
 80039ec:	029b      	lsls	r3, r3, #10
 80039ee:	4013      	ands	r3, r2
 80039f0:	d100      	bne.n	80039f4 <HAL_GPIO_Init+0x174>
 80039f2:	e092      	b.n	8003b1a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80039f4:	4a50      	ldr	r2, [pc, #320]	@ (8003b38 <HAL_GPIO_Init+0x2b8>)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	089b      	lsrs	r3, r3, #2
 80039fa:	3318      	adds	r3, #24
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	589b      	ldr	r3, [r3, r2]
 8003a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2203      	movs	r2, #3
 8003a06:	4013      	ands	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	220f      	movs	r2, #15
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	0013      	movs	r3, r2
 8003a10:	43da      	mvns	r2, r3
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	23a0      	movs	r3, #160	@ 0xa0
 8003a1c:	05db      	lsls	r3, r3, #23
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d013      	beq.n	8003a4a <HAL_GPIO_Init+0x1ca>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a45      	ldr	r2, [pc, #276]	@ (8003b3c <HAL_GPIO_Init+0x2bc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00d      	beq.n	8003a46 <HAL_GPIO_Init+0x1c6>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a44      	ldr	r2, [pc, #272]	@ (8003b40 <HAL_GPIO_Init+0x2c0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d007      	beq.n	8003a42 <HAL_GPIO_Init+0x1c2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a43      	ldr	r2, [pc, #268]	@ (8003b44 <HAL_GPIO_Init+0x2c4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <HAL_GPIO_Init+0x1be>
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e006      	b.n	8003a4c <HAL_GPIO_Init+0x1cc>
 8003a3e:	2305      	movs	r3, #5
 8003a40:	e004      	b.n	8003a4c <HAL_GPIO_Init+0x1cc>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e002      	b.n	8003a4c <HAL_GPIO_Init+0x1cc>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <HAL_GPIO_Init+0x1cc>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	2103      	movs	r1, #3
 8003a50:	400a      	ands	r2, r1
 8003a52:	00d2      	lsls	r2, r2, #3
 8003a54:	4093      	lsls	r3, r2
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003a5c:	4936      	ldr	r1, [pc, #216]	@ (8003b38 <HAL_GPIO_Init+0x2b8>)
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	089b      	lsrs	r3, r3, #2
 8003a62:	3318      	adds	r3, #24
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a6a:	4b33      	ldr	r3, [pc, #204]	@ (8003b38 <HAL_GPIO_Init+0x2b8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	43da      	mvns	r2, r3
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	2380      	movs	r3, #128	@ 0x80
 8003a80:	035b      	lsls	r3, r3, #13
 8003a82:	4013      	ands	r3, r2
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8003b38 <HAL_GPIO_Init+0x2b8>)
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003a94:	4b28      	ldr	r3, [pc, #160]	@ (8003b38 <HAL_GPIO_Init+0x2b8>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	43da      	mvns	r2, r3
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	2380      	movs	r3, #128	@ 0x80
 8003aaa:	039b      	lsls	r3, r3, #14
 8003aac:	4013      	ands	r3, r2
 8003aae:	d003      	beq.n	8003ab8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b38 <HAL_GPIO_Init+0x2b8>)
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003abe:	4a1e      	ldr	r2, [pc, #120]	@ (8003b38 <HAL_GPIO_Init+0x2b8>)
 8003ac0:	2384      	movs	r3, #132	@ 0x84
 8003ac2:	58d3      	ldr	r3, [r2, r3]
 8003ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	43da      	mvns	r2, r3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4013      	ands	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	2380      	movs	r3, #128	@ 0x80
 8003ad6:	029b      	lsls	r3, r3, #10
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d003      	beq.n	8003ae4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ae4:	4914      	ldr	r1, [pc, #80]	@ (8003b38 <HAL_GPIO_Init+0x2b8>)
 8003ae6:	2284      	movs	r2, #132	@ 0x84
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003aec:	4a12      	ldr	r2, [pc, #72]	@ (8003b38 <HAL_GPIO_Init+0x2b8>)
 8003aee:	2380      	movs	r3, #128	@ 0x80
 8003af0:	58d3      	ldr	r3, [r2, r3]
 8003af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	43da      	mvns	r2, r3
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	2380      	movs	r3, #128	@ 0x80
 8003b04:	025b      	lsls	r3, r3, #9
 8003b06:	4013      	ands	r3, r2
 8003b08:	d003      	beq.n	8003b12 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b12:	4909      	ldr	r1, [pc, #36]	@ (8003b38 <HAL_GPIO_Init+0x2b8>)
 8003b14:	2280      	movs	r2, #128	@ 0x80
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	40da      	lsrs	r2, r3
 8003b28:	1e13      	subs	r3, r2, #0
 8003b2a:	d000      	beq.n	8003b2e <HAL_GPIO_Init+0x2ae>
 8003b2c:	e6b0      	b.n	8003890 <HAL_GPIO_Init+0x10>
  }
}
 8003b2e:	46c0      	nop			@ (mov r8, r8)
 8003b30:	46c0      	nop			@ (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b006      	add	sp, #24
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021800 	.word	0x40021800
 8003b3c:	50000400 	.word	0x50000400
 8003b40:	50000800 	.word	0x50000800
 8003b44:	50000c00 	.word	0x50000c00

08003b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	0008      	movs	r0, r1
 8003b52:	0011      	movs	r1, r2
 8003b54:	1cbb      	adds	r3, r7, #2
 8003b56:	1c02      	adds	r2, r0, #0
 8003b58:	801a      	strh	r2, [r3, #0]
 8003b5a:	1c7b      	adds	r3, r7, #1
 8003b5c:	1c0a      	adds	r2, r1, #0
 8003b5e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b60:	1c7b      	adds	r3, r7, #1
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d004      	beq.n	8003b72 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b68:	1cbb      	adds	r3, r7, #2
 8003b6a:	881a      	ldrh	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b70:	e003      	b.n	8003b7a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b72:	1cbb      	adds	r3, r7, #2
 8003b74:	881a      	ldrh	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	b002      	add	sp, #8
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003b8c:	4b19      	ldr	r3, [pc, #100]	@ (8003bf4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a19      	ldr	r2, [pc, #100]	@ (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	0019      	movs	r1, r3
 8003b96:	4b17      	ldr	r3, [pc, #92]	@ (8003bf4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	2380      	movs	r3, #128	@ 0x80
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d11f      	bne.n	8003be8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003ba8:	4b14      	ldr	r3, [pc, #80]	@ (8003bfc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	0013      	movs	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	189b      	adds	r3, r3, r2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4912      	ldr	r1, [pc, #72]	@ (8003c00 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f7fc faa4 	bl	8000104 <__udivsi3>
 8003bbc:	0003      	movs	r3, r0
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bc2:	e008      	b.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e001      	b.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e009      	b.n	8003bea <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bd6:	4b07      	ldr	r3, [pc, #28]	@ (8003bf4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	2380      	movs	r3, #128	@ 0x80
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	401a      	ands	r2, r3
 8003be0:	2380      	movs	r3, #128	@ 0x80
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d0ed      	beq.n	8003bc4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	0018      	movs	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b004      	add	sp, #16
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	46c0      	nop			@ (mov r8, r8)
 8003bf4:	40007000 	.word	0x40007000
 8003bf8:	fffff9ff 	.word	0xfffff9ff
 8003bfc:	20000000 	.word	0x20000000
 8003c00:	000f4240 	.word	0x000f4240

08003c04 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003c08:	4b03      	ldr	r3, [pc, #12]	@ (8003c18 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	23e0      	movs	r3, #224	@ 0xe0
 8003c0e:	01db      	lsls	r3, r3, #7
 8003c10:	4013      	ands	r3, r2
}
 8003c12:	0018      	movs	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40021000 	.word	0x40021000

08003c1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e2fe      	b.n	800422c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2201      	movs	r2, #1
 8003c34:	4013      	ands	r3, r2
 8003c36:	d100      	bne.n	8003c3a <HAL_RCC_OscConfig+0x1e>
 8003c38:	e07c      	b.n	8003d34 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c3a:	4bc3      	ldr	r3, [pc, #780]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2238      	movs	r2, #56	@ 0x38
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c44:	4bc0      	ldr	r3, [pc, #768]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2203      	movs	r2, #3
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d102      	bne.n	8003c5a <HAL_RCC_OscConfig+0x3e>
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d002      	beq.n	8003c60 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d10b      	bne.n	8003c78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c60:	4bb9      	ldr	r3, [pc, #740]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	2380      	movs	r3, #128	@ 0x80
 8003c66:	029b      	lsls	r3, r3, #10
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d062      	beq.n	8003d32 <HAL_RCC_OscConfig+0x116>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d15e      	bne.n	8003d32 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e2d9      	b.n	800422c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	2380      	movs	r3, #128	@ 0x80
 8003c7e:	025b      	lsls	r3, r3, #9
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d107      	bne.n	8003c94 <HAL_RCC_OscConfig+0x78>
 8003c84:	4bb0      	ldr	r3, [pc, #704]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	4baf      	ldr	r3, [pc, #700]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003c8a:	2180      	movs	r1, #128	@ 0x80
 8003c8c:	0249      	lsls	r1, r1, #9
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	e020      	b.n	8003cd6 <HAL_RCC_OscConfig+0xba>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	23a0      	movs	r3, #160	@ 0xa0
 8003c9a:	02db      	lsls	r3, r3, #11
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d10e      	bne.n	8003cbe <HAL_RCC_OscConfig+0xa2>
 8003ca0:	4ba9      	ldr	r3, [pc, #676]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4ba8      	ldr	r3, [pc, #672]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003ca6:	2180      	movs	r1, #128	@ 0x80
 8003ca8:	02c9      	lsls	r1, r1, #11
 8003caa:	430a      	orrs	r2, r1
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	4ba6      	ldr	r3, [pc, #664]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4ba5      	ldr	r3, [pc, #660]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003cb4:	2180      	movs	r1, #128	@ 0x80
 8003cb6:	0249      	lsls	r1, r1, #9
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e00b      	b.n	8003cd6 <HAL_RCC_OscConfig+0xba>
 8003cbe:	4ba2      	ldr	r3, [pc, #648]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	4ba1      	ldr	r3, [pc, #644]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003cc4:	49a1      	ldr	r1, [pc, #644]	@ (8003f4c <HAL_RCC_OscConfig+0x330>)
 8003cc6:	400a      	ands	r2, r1
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	4b9f      	ldr	r3, [pc, #636]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4b9e      	ldr	r3, [pc, #632]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003cd0:	499f      	ldr	r1, [pc, #636]	@ (8003f50 <HAL_RCC_OscConfig+0x334>)
 8003cd2:	400a      	ands	r2, r1
 8003cd4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d014      	beq.n	8003d08 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cde:	f7ff fb2b 	bl	8003338 <HAL_GetTick>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce8:	f7ff fb26 	bl	8003338 <HAL_GetTick>
 8003cec:	0002      	movs	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	@ 0x64
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e298      	b.n	800422c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cfa:	4b93      	ldr	r3, [pc, #588]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	2380      	movs	r3, #128	@ 0x80
 8003d00:	029b      	lsls	r3, r3, #10
 8003d02:	4013      	ands	r3, r2
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0xcc>
 8003d06:	e015      	b.n	8003d34 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7ff fb16 	bl	8003338 <HAL_GetTick>
 8003d0c:	0003      	movs	r3, r0
 8003d0e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d12:	f7ff fb11 	bl	8003338 <HAL_GetTick>
 8003d16:	0002      	movs	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b64      	cmp	r3, #100	@ 0x64
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e283      	b.n	800422c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d24:	4b88      	ldr	r3, [pc, #544]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	2380      	movs	r3, #128	@ 0x80
 8003d2a:	029b      	lsls	r3, r3, #10
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d1f0      	bne.n	8003d12 <HAL_RCC_OscConfig+0xf6>
 8003d30:	e000      	b.n	8003d34 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d32:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2202      	movs	r2, #2
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d100      	bne.n	8003d40 <HAL_RCC_OscConfig+0x124>
 8003d3e:	e099      	b.n	8003e74 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d40:	4b81      	ldr	r3, [pc, #516]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2238      	movs	r2, #56	@ 0x38
 8003d46:	4013      	ands	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d4a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2203      	movs	r2, #3
 8003d50:	4013      	ands	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2b10      	cmp	r3, #16
 8003d58:	d102      	bne.n	8003d60 <HAL_RCC_OscConfig+0x144>
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d002      	beq.n	8003d66 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d135      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d66:	4b78      	ldr	r3, [pc, #480]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	2380      	movs	r3, #128	@ 0x80
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d005      	beq.n	8003d7e <HAL_RCC_OscConfig+0x162>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e256      	b.n	800422c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7e:	4b72      	ldr	r3, [pc, #456]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4a74      	ldr	r2, [pc, #464]	@ (8003f54 <HAL_RCC_OscConfig+0x338>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	0019      	movs	r1, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	021a      	lsls	r2, r3, #8
 8003d8e:	4b6e      	ldr	r3, [pc, #440]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003d90:	430a      	orrs	r2, r1
 8003d92:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d112      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d9a:	4b6b      	ldr	r3, [pc, #428]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a6e      	ldr	r2, [pc, #440]	@ (8003f58 <HAL_RCC_OscConfig+0x33c>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	0019      	movs	r1, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	4b67      	ldr	r3, [pc, #412]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003daa:	430a      	orrs	r2, r1
 8003dac:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003dae:	4b66      	ldr	r3, [pc, #408]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	0adb      	lsrs	r3, r3, #11
 8003db4:	2207      	movs	r2, #7
 8003db6:	4013      	ands	r3, r2
 8003db8:	4a68      	ldr	r2, [pc, #416]	@ (8003f5c <HAL_RCC_OscConfig+0x340>)
 8003dba:	40da      	lsrs	r2, r3
 8003dbc:	4b68      	ldr	r3, [pc, #416]	@ (8003f60 <HAL_RCC_OscConfig+0x344>)
 8003dbe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003dc0:	4b68      	ldr	r3, [pc, #416]	@ (8003f64 <HAL_RCC_OscConfig+0x348>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7ff fa5b 	bl	8003280 <HAL_InitTick>
 8003dca:	1e03      	subs	r3, r0, #0
 8003dcc:	d051      	beq.n	8003e72 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e22c      	b.n	800422c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d030      	beq.n	8003e3c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003dda:	4b5b      	ldr	r3, [pc, #364]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a5e      	ldr	r2, [pc, #376]	@ (8003f58 <HAL_RCC_OscConfig+0x33c>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	0019      	movs	r1, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	4b57      	ldr	r3, [pc, #348]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003dea:	430a      	orrs	r2, r1
 8003dec:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003dee:	4b56      	ldr	r3, [pc, #344]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4b55      	ldr	r3, [pc, #340]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003df4:	2180      	movs	r1, #128	@ 0x80
 8003df6:	0049      	lsls	r1, r1, #1
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7ff fa9c 	bl	8003338 <HAL_GetTick>
 8003e00:	0003      	movs	r3, r0
 8003e02:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e06:	f7ff fa97 	bl	8003338 <HAL_GetTick>
 8003e0a:	0002      	movs	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e209      	b.n	800422c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e18:	4b4b      	ldr	r3, [pc, #300]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	2380      	movs	r3, #128	@ 0x80
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4013      	ands	r3, r2
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e24:	4b48      	ldr	r3, [pc, #288]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	4a4a      	ldr	r2, [pc, #296]	@ (8003f54 <HAL_RCC_OscConfig+0x338>)
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	0019      	movs	r1, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	021a      	lsls	r2, r3, #8
 8003e34:	4b44      	ldr	r3, [pc, #272]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	e01b      	b.n	8003e74 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003e3c:	4b42      	ldr	r3, [pc, #264]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b41      	ldr	r3, [pc, #260]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003e42:	4949      	ldr	r1, [pc, #292]	@ (8003f68 <HAL_RCC_OscConfig+0x34c>)
 8003e44:	400a      	ands	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7ff fa76 	bl	8003338 <HAL_GetTick>
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e52:	f7ff fa71 	bl	8003338 <HAL_GetTick>
 8003e56:	0002      	movs	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e1e3      	b.n	800422c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e64:	4b38      	ldr	r3, [pc, #224]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	2380      	movs	r3, #128	@ 0x80
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d1f0      	bne.n	8003e52 <HAL_RCC_OscConfig+0x236>
 8003e70:	e000      	b.n	8003e74 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e72:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2208      	movs	r2, #8
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d047      	beq.n	8003f0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003e7e:	4b32      	ldr	r3, [pc, #200]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2238      	movs	r2, #56	@ 0x38
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b18      	cmp	r3, #24
 8003e88:	d10a      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e8e:	2202      	movs	r2, #2
 8003e90:	4013      	ands	r3, r2
 8003e92:	d03c      	beq.n	8003f0e <HAL_RCC_OscConfig+0x2f2>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d138      	bne.n	8003f0e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e1c5      	b.n	800422c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d019      	beq.n	8003edc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003ea8:	4b27      	ldr	r3, [pc, #156]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003eaa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003eac:	4b26      	ldr	r3, [pc, #152]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003eae:	2101      	movs	r1, #1
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7ff fa40 	bl	8003338 <HAL_GetTick>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ebe:	f7ff fa3b 	bl	8003338 <HAL_GetTick>
 8003ec2:	0002      	movs	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e1ad      	b.n	800422c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d0f1      	beq.n	8003ebe <HAL_RCC_OscConfig+0x2a2>
 8003eda:	e018      	b.n	8003f0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003edc:	4b1a      	ldr	r3, [pc, #104]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003ede:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ee0:	4b19      	ldr	r3, [pc, #100]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	438a      	bics	r2, r1
 8003ee6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee8:	f7ff fa26 	bl	8003338 <HAL_GetTick>
 8003eec:	0003      	movs	r3, r0
 8003eee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef2:	f7ff fa21 	bl	8003338 <HAL_GetTick>
 8003ef6:	0002      	movs	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e193      	b.n	800422c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f04:	4b10      	ldr	r3, [pc, #64]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f08:	2202      	movs	r2, #2
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d1f1      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2204      	movs	r2, #4
 8003f14:	4013      	ands	r3, r2
 8003f16:	d100      	bne.n	8003f1a <HAL_RCC_OscConfig+0x2fe>
 8003f18:	e0c6      	b.n	80040a8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f1a:	231f      	movs	r3, #31
 8003f1c:	18fb      	adds	r3, r7, r3
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f22:	4b09      	ldr	r3, [pc, #36]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2238      	movs	r2, #56	@ 0x38
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d11e      	bne.n	8003f6c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003f2e:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <HAL_RCC_OscConfig+0x32c>)
 8003f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f32:	2202      	movs	r2, #2
 8003f34:	4013      	ands	r3, r2
 8003f36:	d100      	bne.n	8003f3a <HAL_RCC_OscConfig+0x31e>
 8003f38:	e0b6      	b.n	80040a8 <HAL_RCC_OscConfig+0x48c>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d000      	beq.n	8003f44 <HAL_RCC_OscConfig+0x328>
 8003f42:	e0b1      	b.n	80040a8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e171      	b.n	800422c <HAL_RCC_OscConfig+0x610>
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	fffeffff 	.word	0xfffeffff
 8003f50:	fffbffff 	.word	0xfffbffff
 8003f54:	ffff80ff 	.word	0xffff80ff
 8003f58:	ffffc7ff 	.word	0xffffc7ff
 8003f5c:	00f42400 	.word	0x00f42400
 8003f60:	20000000 	.word	0x20000000
 8003f64:	20000004 	.word	0x20000004
 8003f68:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f6c:	4bb1      	ldr	r3, [pc, #708]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 8003f6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f70:	2380      	movs	r3, #128	@ 0x80
 8003f72:	055b      	lsls	r3, r3, #21
 8003f74:	4013      	ands	r3, r2
 8003f76:	d101      	bne.n	8003f7c <HAL_RCC_OscConfig+0x360>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <HAL_RCC_OscConfig+0x362>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d011      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003f82:	4bac      	ldr	r3, [pc, #688]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 8003f84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f86:	4bab      	ldr	r3, [pc, #684]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 8003f88:	2180      	movs	r1, #128	@ 0x80
 8003f8a:	0549      	lsls	r1, r1, #21
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f90:	4ba8      	ldr	r3, [pc, #672]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 8003f92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f94:	2380      	movs	r3, #128	@ 0x80
 8003f96:	055b      	lsls	r3, r3, #21
 8003f98:	4013      	ands	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003f9e:	231f      	movs	r3, #31
 8003fa0:	18fb      	adds	r3, r7, r3
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa6:	4ba4      	ldr	r3, [pc, #656]	@ (8004238 <HAL_RCC_OscConfig+0x61c>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	2380      	movs	r3, #128	@ 0x80
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d11a      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fb2:	4ba1      	ldr	r3, [pc, #644]	@ (8004238 <HAL_RCC_OscConfig+0x61c>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4ba0      	ldr	r3, [pc, #640]	@ (8004238 <HAL_RCC_OscConfig+0x61c>)
 8003fb8:	2180      	movs	r1, #128	@ 0x80
 8003fba:	0049      	lsls	r1, r1, #1
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003fc0:	f7ff f9ba 	bl	8003338 <HAL_GetTick>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fca:	f7ff f9b5 	bl	8003338 <HAL_GetTick>
 8003fce:	0002      	movs	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e127      	b.n	800422c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fdc:	4b96      	ldr	r3, [pc, #600]	@ (8004238 <HAL_RCC_OscConfig+0x61c>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	2380      	movs	r3, #128	@ 0x80
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d0f0      	beq.n	8003fca <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d106      	bne.n	8003ffe <HAL_RCC_OscConfig+0x3e2>
 8003ff0:	4b90      	ldr	r3, [pc, #576]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 8003ff2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ff4:	4b8f      	ldr	r3, [pc, #572]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ffc:	e01c      	b.n	8004038 <HAL_RCC_OscConfig+0x41c>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b05      	cmp	r3, #5
 8004004:	d10c      	bne.n	8004020 <HAL_RCC_OscConfig+0x404>
 8004006:	4b8b      	ldr	r3, [pc, #556]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 8004008:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800400a:	4b8a      	ldr	r3, [pc, #552]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 800400c:	2104      	movs	r1, #4
 800400e:	430a      	orrs	r2, r1
 8004010:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004012:	4b88      	ldr	r3, [pc, #544]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 8004014:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004016:	4b87      	ldr	r3, [pc, #540]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 8004018:	2101      	movs	r1, #1
 800401a:	430a      	orrs	r2, r1
 800401c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800401e:	e00b      	b.n	8004038 <HAL_RCC_OscConfig+0x41c>
 8004020:	4b84      	ldr	r3, [pc, #528]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 8004022:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004024:	4b83      	ldr	r3, [pc, #524]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 8004026:	2101      	movs	r1, #1
 8004028:	438a      	bics	r2, r1
 800402a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800402c:	4b81      	ldr	r3, [pc, #516]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 800402e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004030:	4b80      	ldr	r3, [pc, #512]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 8004032:	2104      	movs	r1, #4
 8004034:	438a      	bics	r2, r1
 8004036:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d014      	beq.n	800406a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7ff f97a 	bl	8003338 <HAL_GetTick>
 8004044:	0003      	movs	r3, r0
 8004046:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004048:	e009      	b.n	800405e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7ff f975 	bl	8003338 <HAL_GetTick>
 800404e:	0002      	movs	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	4a79      	ldr	r2, [pc, #484]	@ (800423c <HAL_RCC_OscConfig+0x620>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e0e6      	b.n	800422c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800405e:	4b75      	ldr	r3, [pc, #468]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 8004060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004062:	2202      	movs	r2, #2
 8004064:	4013      	ands	r3, r2
 8004066:	d0f0      	beq.n	800404a <HAL_RCC_OscConfig+0x42e>
 8004068:	e013      	b.n	8004092 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406a:	f7ff f965 	bl	8003338 <HAL_GetTick>
 800406e:	0003      	movs	r3, r0
 8004070:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004072:	e009      	b.n	8004088 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004074:	f7ff f960 	bl	8003338 <HAL_GetTick>
 8004078:	0002      	movs	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	4a6f      	ldr	r2, [pc, #444]	@ (800423c <HAL_RCC_OscConfig+0x620>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0d1      	b.n	800422c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004088:	4b6a      	ldr	r3, [pc, #424]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 800408a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408c:	2202      	movs	r2, #2
 800408e:	4013      	ands	r3, r2
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004092:	231f      	movs	r3, #31
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d105      	bne.n	80040a8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800409c:	4b65      	ldr	r3, [pc, #404]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 800409e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040a0:	4b64      	ldr	r3, [pc, #400]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 80040a2:	4967      	ldr	r1, [pc, #412]	@ (8004240 <HAL_RCC_OscConfig+0x624>)
 80040a4:	400a      	ands	r2, r1
 80040a6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d100      	bne.n	80040b2 <HAL_RCC_OscConfig+0x496>
 80040b0:	e0bb      	b.n	800422a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b2:	4b60      	ldr	r3, [pc, #384]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2238      	movs	r2, #56	@ 0x38
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b10      	cmp	r3, #16
 80040bc:	d100      	bne.n	80040c0 <HAL_RCC_OscConfig+0x4a4>
 80040be:	e07b      	b.n	80041b8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d156      	bne.n	8004176 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c8:	4b5a      	ldr	r3, [pc, #360]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	4b59      	ldr	r3, [pc, #356]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 80040ce:	495d      	ldr	r1, [pc, #372]	@ (8004244 <HAL_RCC_OscConfig+0x628>)
 80040d0:	400a      	ands	r2, r1
 80040d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7ff f930 	bl	8003338 <HAL_GetTick>
 80040d8:	0003      	movs	r3, r0
 80040da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040de:	f7ff f92b 	bl	8003338 <HAL_GetTick>
 80040e2:	0002      	movs	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e09d      	b.n	800422c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f0:	4b50      	ldr	r3, [pc, #320]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	2380      	movs	r3, #128	@ 0x80
 80040f6:	049b      	lsls	r3, r3, #18
 80040f8:	4013      	ands	r3, r2
 80040fa:	d1f0      	bne.n	80040de <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040fc:	4b4d      	ldr	r3, [pc, #308]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	4a51      	ldr	r2, [pc, #324]	@ (8004248 <HAL_RCC_OscConfig+0x62c>)
 8004102:	4013      	ands	r3, r2
 8004104:	0019      	movs	r1, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1a      	ldr	r2, [r3, #32]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004114:	021b      	lsls	r3, r3, #8
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004128:	431a      	orrs	r2, r3
 800412a:	4b42      	ldr	r3, [pc, #264]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 800412c:	430a      	orrs	r2, r1
 800412e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004130:	4b40      	ldr	r3, [pc, #256]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	4b3f      	ldr	r3, [pc, #252]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 8004136:	2180      	movs	r1, #128	@ 0x80
 8004138:	0449      	lsls	r1, r1, #17
 800413a:	430a      	orrs	r2, r1
 800413c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800413e:	4b3d      	ldr	r3, [pc, #244]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	4b3c      	ldr	r3, [pc, #240]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 8004144:	2180      	movs	r1, #128	@ 0x80
 8004146:	0549      	lsls	r1, r1, #21
 8004148:	430a      	orrs	r2, r1
 800414a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7ff f8f4 	bl	8003338 <HAL_GetTick>
 8004150:	0003      	movs	r3, r0
 8004152:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004156:	f7ff f8ef 	bl	8003338 <HAL_GetTick>
 800415a:	0002      	movs	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e061      	b.n	800422c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004168:	4b32      	ldr	r3, [pc, #200]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	2380      	movs	r3, #128	@ 0x80
 800416e:	049b      	lsls	r3, r3, #18
 8004170:	4013      	ands	r3, r2
 8004172:	d0f0      	beq.n	8004156 <HAL_RCC_OscConfig+0x53a>
 8004174:	e059      	b.n	800422a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004176:	4b2f      	ldr	r3, [pc, #188]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4b2e      	ldr	r3, [pc, #184]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 800417c:	4931      	ldr	r1, [pc, #196]	@ (8004244 <HAL_RCC_OscConfig+0x628>)
 800417e:	400a      	ands	r2, r1
 8004180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004182:	f7ff f8d9 	bl	8003338 <HAL_GetTick>
 8004186:	0003      	movs	r3, r0
 8004188:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800418c:	f7ff f8d4 	bl	8003338 <HAL_GetTick>
 8004190:	0002      	movs	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e046      	b.n	800422c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800419e:	4b25      	ldr	r3, [pc, #148]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	2380      	movs	r3, #128	@ 0x80
 80041a4:	049b      	lsls	r3, r3, #18
 80041a6:	4013      	ands	r3, r2
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80041aa:	4b22      	ldr	r3, [pc, #136]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	4b21      	ldr	r3, [pc, #132]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 80041b0:	4926      	ldr	r1, [pc, #152]	@ (800424c <HAL_RCC_OscConfig+0x630>)
 80041b2:	400a      	ands	r2, r1
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	e038      	b.n	800422a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e033      	b.n	800422c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80041c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004234 <HAL_RCC_OscConfig+0x618>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2203      	movs	r2, #3
 80041ce:	401a      	ands	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d126      	bne.n	8004226 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2270      	movs	r2, #112	@ 0x70
 80041dc:	401a      	ands	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d11f      	bne.n	8004226 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	23fe      	movs	r3, #254	@ 0xfe
 80041ea:	01db      	lsls	r3, r3, #7
 80041ec:	401a      	ands	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d116      	bne.n	8004226 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	23f8      	movs	r3, #248	@ 0xf8
 80041fc:	039b      	lsls	r3, r3, #14
 80041fe:	401a      	ands	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004204:	429a      	cmp	r2, r3
 8004206:	d10e      	bne.n	8004226 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	23e0      	movs	r3, #224	@ 0xe0
 800420c:	051b      	lsls	r3, r3, #20
 800420e:	401a      	ands	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004214:	429a      	cmp	r2, r3
 8004216:	d106      	bne.n	8004226 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	0f5b      	lsrs	r3, r3, #29
 800421c:	075a      	lsls	r2, r3, #29
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004222:	429a      	cmp	r2, r3
 8004224:	d001      	beq.n	800422a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	0018      	movs	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	b008      	add	sp, #32
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40021000 	.word	0x40021000
 8004238:	40007000 	.word	0x40007000
 800423c:	00001388 	.word	0x00001388
 8004240:	efffffff 	.word	0xefffffff
 8004244:	feffffff 	.word	0xfeffffff
 8004248:	11c1808c 	.word	0x11c1808c
 800424c:	eefefffc 	.word	0xeefefffc

08004250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0e9      	b.n	8004438 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004264:	4b76      	ldr	r3, [pc, #472]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2207      	movs	r2, #7
 800426a:	4013      	ands	r3, r2
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d91e      	bls.n	80042b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b73      	ldr	r3, [pc, #460]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2207      	movs	r2, #7
 8004278:	4393      	bics	r3, r2
 800427a:	0019      	movs	r1, r3
 800427c:	4b70      	ldr	r3, [pc, #448]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004284:	f7ff f858 	bl	8003338 <HAL_GetTick>
 8004288:	0003      	movs	r3, r0
 800428a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800428c:	e009      	b.n	80042a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800428e:	f7ff f853 	bl	8003338 <HAL_GetTick>
 8004292:	0002      	movs	r2, r0
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	4a6a      	ldr	r2, [pc, #424]	@ (8004444 <HAL_RCC_ClockConfig+0x1f4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e0ca      	b.n	8004438 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042a2:	4b67      	ldr	r3, [pc, #412]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2207      	movs	r2, #7
 80042a8:	4013      	ands	r3, r2
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d1ee      	bne.n	800428e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2202      	movs	r2, #2
 80042b6:	4013      	ands	r3, r2
 80042b8:	d015      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2204      	movs	r2, #4
 80042c0:	4013      	ands	r3, r2
 80042c2:	d006      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80042c4:	4b60      	ldr	r3, [pc, #384]	@ (8004448 <HAL_RCC_ClockConfig+0x1f8>)
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	4b5f      	ldr	r3, [pc, #380]	@ (8004448 <HAL_RCC_ClockConfig+0x1f8>)
 80042ca:	21e0      	movs	r1, #224	@ 0xe0
 80042cc:	01c9      	lsls	r1, r1, #7
 80042ce:	430a      	orrs	r2, r1
 80042d0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d2:	4b5d      	ldr	r3, [pc, #372]	@ (8004448 <HAL_RCC_ClockConfig+0x1f8>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	4a5d      	ldr	r2, [pc, #372]	@ (800444c <HAL_RCC_ClockConfig+0x1fc>)
 80042d8:	4013      	ands	r3, r2
 80042da:	0019      	movs	r1, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	4b59      	ldr	r3, [pc, #356]	@ (8004448 <HAL_RCC_ClockConfig+0x1f8>)
 80042e2:	430a      	orrs	r2, r1
 80042e4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2201      	movs	r2, #1
 80042ec:	4013      	ands	r3, r2
 80042ee:	d057      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d107      	bne.n	8004308 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f8:	4b53      	ldr	r3, [pc, #332]	@ (8004448 <HAL_RCC_ClockConfig+0x1f8>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	2380      	movs	r3, #128	@ 0x80
 80042fe:	029b      	lsls	r3, r3, #10
 8004300:	4013      	ands	r3, r2
 8004302:	d12b      	bne.n	800435c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e097      	b.n	8004438 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d107      	bne.n	8004320 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004310:	4b4d      	ldr	r3, [pc, #308]	@ (8004448 <HAL_RCC_ClockConfig+0x1f8>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	2380      	movs	r3, #128	@ 0x80
 8004316:	049b      	lsls	r3, r3, #18
 8004318:	4013      	ands	r3, r2
 800431a:	d11f      	bne.n	800435c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e08b      	b.n	8004438 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d107      	bne.n	8004338 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004328:	4b47      	ldr	r3, [pc, #284]	@ (8004448 <HAL_RCC_ClockConfig+0x1f8>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	2380      	movs	r3, #128	@ 0x80
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4013      	ands	r3, r2
 8004332:	d113      	bne.n	800435c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e07f      	b.n	8004438 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b03      	cmp	r3, #3
 800433e:	d106      	bne.n	800434e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004340:	4b41      	ldr	r3, [pc, #260]	@ (8004448 <HAL_RCC_ClockConfig+0x1f8>)
 8004342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004344:	2202      	movs	r2, #2
 8004346:	4013      	ands	r3, r2
 8004348:	d108      	bne.n	800435c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e074      	b.n	8004438 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800434e:	4b3e      	ldr	r3, [pc, #248]	@ (8004448 <HAL_RCC_ClockConfig+0x1f8>)
 8004350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004352:	2202      	movs	r2, #2
 8004354:	4013      	ands	r3, r2
 8004356:	d101      	bne.n	800435c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e06d      	b.n	8004438 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800435c:	4b3a      	ldr	r3, [pc, #232]	@ (8004448 <HAL_RCC_ClockConfig+0x1f8>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2207      	movs	r2, #7
 8004362:	4393      	bics	r3, r2
 8004364:	0019      	movs	r1, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	4b37      	ldr	r3, [pc, #220]	@ (8004448 <HAL_RCC_ClockConfig+0x1f8>)
 800436c:	430a      	orrs	r2, r1
 800436e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004370:	f7fe ffe2 	bl	8003338 <HAL_GetTick>
 8004374:	0003      	movs	r3, r0
 8004376:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004378:	e009      	b.n	800438e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800437a:	f7fe ffdd 	bl	8003338 <HAL_GetTick>
 800437e:	0002      	movs	r2, r0
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	4a2f      	ldr	r2, [pc, #188]	@ (8004444 <HAL_RCC_ClockConfig+0x1f4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e054      	b.n	8004438 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438e:	4b2e      	ldr	r3, [pc, #184]	@ (8004448 <HAL_RCC_ClockConfig+0x1f8>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2238      	movs	r2, #56	@ 0x38
 8004394:	401a      	ands	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	429a      	cmp	r2, r3
 800439e:	d1ec      	bne.n	800437a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043a0:	4b27      	ldr	r3, [pc, #156]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2207      	movs	r2, #7
 80043a6:	4013      	ands	r3, r2
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d21e      	bcs.n	80043ec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ae:	4b24      	ldr	r3, [pc, #144]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2207      	movs	r2, #7
 80043b4:	4393      	bics	r3, r2
 80043b6:	0019      	movs	r1, r3
 80043b8:	4b21      	ldr	r3, [pc, #132]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043c0:	f7fe ffba 	bl	8003338 <HAL_GetTick>
 80043c4:	0003      	movs	r3, r0
 80043c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043c8:	e009      	b.n	80043de <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ca:	f7fe ffb5 	bl	8003338 <HAL_GetTick>
 80043ce:	0002      	movs	r2, r0
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004444 <HAL_RCC_ClockConfig+0x1f4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e02c      	b.n	8004438 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043de:	4b18      	ldr	r3, [pc, #96]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2207      	movs	r2, #7
 80043e4:	4013      	ands	r3, r2
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d1ee      	bne.n	80043ca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2204      	movs	r2, #4
 80043f2:	4013      	ands	r3, r2
 80043f4:	d009      	beq.n	800440a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80043f6:	4b14      	ldr	r3, [pc, #80]	@ (8004448 <HAL_RCC_ClockConfig+0x1f8>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	4a15      	ldr	r2, [pc, #84]	@ (8004450 <HAL_RCC_ClockConfig+0x200>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	0019      	movs	r1, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	4b10      	ldr	r3, [pc, #64]	@ (8004448 <HAL_RCC_ClockConfig+0x1f8>)
 8004406:	430a      	orrs	r2, r1
 8004408:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800440a:	f000 f829 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 800440e:	0001      	movs	r1, r0
 8004410:	4b0d      	ldr	r3, [pc, #52]	@ (8004448 <HAL_RCC_ClockConfig+0x1f8>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	0a1b      	lsrs	r3, r3, #8
 8004416:	220f      	movs	r2, #15
 8004418:	401a      	ands	r2, r3
 800441a:	4b0e      	ldr	r3, [pc, #56]	@ (8004454 <HAL_RCC_ClockConfig+0x204>)
 800441c:	0092      	lsls	r2, r2, #2
 800441e:	58d3      	ldr	r3, [r2, r3]
 8004420:	221f      	movs	r2, #31
 8004422:	4013      	ands	r3, r2
 8004424:	000a      	movs	r2, r1
 8004426:	40da      	lsrs	r2, r3
 8004428:	4b0b      	ldr	r3, [pc, #44]	@ (8004458 <HAL_RCC_ClockConfig+0x208>)
 800442a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800442c:	4b0b      	ldr	r3, [pc, #44]	@ (800445c <HAL_RCC_ClockConfig+0x20c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	0018      	movs	r0, r3
 8004432:	f7fe ff25 	bl	8003280 <HAL_InitTick>
 8004436:	0003      	movs	r3, r0
}
 8004438:	0018      	movs	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	b004      	add	sp, #16
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40022000 	.word	0x40022000
 8004444:	00001388 	.word	0x00001388
 8004448:	40021000 	.word	0x40021000
 800444c:	fffff0ff 	.word	0xfffff0ff
 8004450:	ffff8fff 	.word	0xffff8fff
 8004454:	0800665c 	.word	0x0800665c
 8004458:	20000000 	.word	0x20000000
 800445c:	20000004 	.word	0x20000004

08004460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004466:	4b3c      	ldr	r3, [pc, #240]	@ (8004558 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2238      	movs	r2, #56	@ 0x38
 800446c:	4013      	ands	r3, r2
 800446e:	d10f      	bne.n	8004490 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004470:	4b39      	ldr	r3, [pc, #228]	@ (8004558 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	0adb      	lsrs	r3, r3, #11
 8004476:	2207      	movs	r2, #7
 8004478:	4013      	ands	r3, r2
 800447a:	2201      	movs	r2, #1
 800447c:	409a      	lsls	r2, r3
 800447e:	0013      	movs	r3, r2
 8004480:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004482:	6839      	ldr	r1, [r7, #0]
 8004484:	4835      	ldr	r0, [pc, #212]	@ (800455c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004486:	f7fb fe3d 	bl	8000104 <__udivsi3>
 800448a:	0003      	movs	r3, r0
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	e05d      	b.n	800454c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004490:	4b31      	ldr	r3, [pc, #196]	@ (8004558 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2238      	movs	r2, #56	@ 0x38
 8004496:	4013      	ands	r3, r2
 8004498:	2b08      	cmp	r3, #8
 800449a:	d102      	bne.n	80044a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800449c:	4b30      	ldr	r3, [pc, #192]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x100>)
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	e054      	b.n	800454c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004558 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2238      	movs	r2, #56	@ 0x38
 80044a8:	4013      	ands	r3, r2
 80044aa:	2b10      	cmp	r3, #16
 80044ac:	d138      	bne.n	8004520 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80044ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004558 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2203      	movs	r2, #3
 80044b4:	4013      	ands	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044b8:	4b27      	ldr	r3, [pc, #156]	@ (8004558 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	091b      	lsrs	r3, r3, #4
 80044be:	2207      	movs	r2, #7
 80044c0:	4013      	ands	r3, r2
 80044c2:	3301      	adds	r3, #1
 80044c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d10d      	bne.n	80044e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	4824      	ldr	r0, [pc, #144]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x100>)
 80044d0:	f7fb fe18 	bl	8000104 <__udivsi3>
 80044d4:	0003      	movs	r3, r0
 80044d6:	0019      	movs	r1, r3
 80044d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004558 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	0a1b      	lsrs	r3, r3, #8
 80044de:	227f      	movs	r2, #127	@ 0x7f
 80044e0:	4013      	ands	r3, r2
 80044e2:	434b      	muls	r3, r1
 80044e4:	617b      	str	r3, [r7, #20]
        break;
 80044e6:	e00d      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	481c      	ldr	r0, [pc, #112]	@ (800455c <HAL_RCC_GetSysClockFreq+0xfc>)
 80044ec:	f7fb fe0a 	bl	8000104 <__udivsi3>
 80044f0:	0003      	movs	r3, r0
 80044f2:	0019      	movs	r1, r3
 80044f4:	4b18      	ldr	r3, [pc, #96]	@ (8004558 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	227f      	movs	r2, #127	@ 0x7f
 80044fc:	4013      	ands	r3, r2
 80044fe:	434b      	muls	r3, r1
 8004500:	617b      	str	r3, [r7, #20]
        break;
 8004502:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004504:	4b14      	ldr	r3, [pc, #80]	@ (8004558 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	0f5b      	lsrs	r3, r3, #29
 800450a:	2207      	movs	r2, #7
 800450c:	4013      	ands	r3, r2
 800450e:	3301      	adds	r3, #1
 8004510:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	6978      	ldr	r0, [r7, #20]
 8004516:	f7fb fdf5 	bl	8000104 <__udivsi3>
 800451a:	0003      	movs	r3, r0
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	e015      	b.n	800454c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004520:	4b0d      	ldr	r3, [pc, #52]	@ (8004558 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2238      	movs	r2, #56	@ 0x38
 8004526:	4013      	ands	r3, r2
 8004528:	2b20      	cmp	r3, #32
 800452a:	d103      	bne.n	8004534 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800452c:	2380      	movs	r3, #128	@ 0x80
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	e00b      	b.n	800454c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004534:	4b08      	ldr	r3, [pc, #32]	@ (8004558 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2238      	movs	r2, #56	@ 0x38
 800453a:	4013      	ands	r3, r2
 800453c:	2b18      	cmp	r3, #24
 800453e:	d103      	bne.n	8004548 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004540:	23fa      	movs	r3, #250	@ 0xfa
 8004542:	01db      	lsls	r3, r3, #7
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	e001      	b.n	800454c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800454c:	693b      	ldr	r3, [r7, #16]
}
 800454e:	0018      	movs	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	b006      	add	sp, #24
 8004554:	bd80      	pop	{r7, pc}
 8004556:	46c0      	nop			@ (mov r8, r8)
 8004558:	40021000 	.word	0x40021000
 800455c:	00f42400 	.word	0x00f42400
 8004560:	007a1200 	.word	0x007a1200

08004564 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004568:	4b02      	ldr	r3, [pc, #8]	@ (8004574 <HAL_RCC_GetHCLKFreq+0x10>)
 800456a:	681b      	ldr	r3, [r3, #0]
}
 800456c:	0018      	movs	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	46c0      	nop			@ (mov r8, r8)
 8004574:	20000000 	.word	0x20000000

08004578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004578:	b5b0      	push	{r4, r5, r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800457c:	f7ff fff2 	bl	8004564 <HAL_RCC_GetHCLKFreq>
 8004580:	0004      	movs	r4, r0
 8004582:	f7ff fb3f 	bl	8003c04 <LL_RCC_GetAPB1Prescaler>
 8004586:	0003      	movs	r3, r0
 8004588:	0b1a      	lsrs	r2, r3, #12
 800458a:	4b05      	ldr	r3, [pc, #20]	@ (80045a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800458c:	0092      	lsls	r2, r2, #2
 800458e:	58d3      	ldr	r3, [r2, r3]
 8004590:	221f      	movs	r2, #31
 8004592:	4013      	ands	r3, r2
 8004594:	40dc      	lsrs	r4, r3
 8004596:	0023      	movs	r3, r4
}
 8004598:	0018      	movs	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	bdb0      	pop	{r4, r5, r7, pc}
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	0800669c 	.word	0x0800669c

080045a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80045ac:	2313      	movs	r3, #19
 80045ae:	18fb      	adds	r3, r7, r3
 80045b0:	2200      	movs	r2, #0
 80045b2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045b4:	2312      	movs	r3, #18
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	2380      	movs	r3, #128	@ 0x80
 80045c2:	029b      	lsls	r3, r3, #10
 80045c4:	4013      	ands	r3, r2
 80045c6:	d100      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x26>
 80045c8:	e0a3      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ca:	2011      	movs	r0, #17
 80045cc:	183b      	adds	r3, r7, r0
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045d2:	4bc3      	ldr	r3, [pc, #780]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045d6:	2380      	movs	r3, #128	@ 0x80
 80045d8:	055b      	lsls	r3, r3, #21
 80045da:	4013      	ands	r3, r2
 80045dc:	d110      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045de:	4bc0      	ldr	r3, [pc, #768]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045e2:	4bbf      	ldr	r3, [pc, #764]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045e4:	2180      	movs	r1, #128	@ 0x80
 80045e6:	0549      	lsls	r1, r1, #21
 80045e8:	430a      	orrs	r2, r1
 80045ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80045ec:	4bbc      	ldr	r3, [pc, #752]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045f0:	2380      	movs	r3, #128	@ 0x80
 80045f2:	055b      	lsls	r3, r3, #21
 80045f4:	4013      	ands	r3, r2
 80045f6:	60bb      	str	r3, [r7, #8]
 80045f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045fa:	183b      	adds	r3, r7, r0
 80045fc:	2201      	movs	r2, #1
 80045fe:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004600:	4bb8      	ldr	r3, [pc, #736]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4bb7      	ldr	r3, [pc, #732]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004606:	2180      	movs	r1, #128	@ 0x80
 8004608:	0049      	lsls	r1, r1, #1
 800460a:	430a      	orrs	r2, r1
 800460c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800460e:	f7fe fe93 	bl	8003338 <HAL_GetTick>
 8004612:	0003      	movs	r3, r0
 8004614:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004616:	e00b      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004618:	f7fe fe8e 	bl	8003338 <HAL_GetTick>
 800461c:	0002      	movs	r2, r0
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d904      	bls.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004626:	2313      	movs	r3, #19
 8004628:	18fb      	adds	r3, r7, r3
 800462a:	2203      	movs	r2, #3
 800462c:	701a      	strb	r2, [r3, #0]
        break;
 800462e:	e005      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004630:	4bac      	ldr	r3, [pc, #688]	@ (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	2380      	movs	r3, #128	@ 0x80
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	4013      	ands	r3, r2
 800463a:	d0ed      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800463c:	2313      	movs	r3, #19
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d154      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004646:	4ba6      	ldr	r3, [pc, #664]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004648:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800464a:	23c0      	movs	r3, #192	@ 0xc0
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4013      	ands	r3, r2
 8004650:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d019      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	429a      	cmp	r2, r3
 8004660:	d014      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004662:	4b9f      	ldr	r3, [pc, #636]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004666:	4aa0      	ldr	r2, [pc, #640]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004668:	4013      	ands	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800466c:	4b9c      	ldr	r3, [pc, #624]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800466e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004670:	4b9b      	ldr	r3, [pc, #620]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004672:	2180      	movs	r1, #128	@ 0x80
 8004674:	0249      	lsls	r1, r1, #9
 8004676:	430a      	orrs	r2, r1
 8004678:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800467a:	4b99      	ldr	r3, [pc, #612]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800467c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800467e:	4b98      	ldr	r3, [pc, #608]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004680:	499a      	ldr	r1, [pc, #616]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004682:	400a      	ands	r2, r1
 8004684:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004686:	4b96      	ldr	r3, [pc, #600]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2201      	movs	r2, #1
 8004690:	4013      	ands	r3, r2
 8004692:	d016      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004694:	f7fe fe50 	bl	8003338 <HAL_GetTick>
 8004698:	0003      	movs	r3, r0
 800469a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800469c:	e00c      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469e:	f7fe fe4b 	bl	8003338 <HAL_GetTick>
 80046a2:	0002      	movs	r2, r0
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	4a91      	ldr	r2, [pc, #580]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d904      	bls.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80046ae:	2313      	movs	r3, #19
 80046b0:	18fb      	adds	r3, r7, r3
 80046b2:	2203      	movs	r2, #3
 80046b4:	701a      	strb	r2, [r3, #0]
            break;
 80046b6:	e004      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046b8:	4b89      	ldr	r3, [pc, #548]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046bc:	2202      	movs	r2, #2
 80046be:	4013      	ands	r3, r2
 80046c0:	d0ed      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80046c2:	2313      	movs	r3, #19
 80046c4:	18fb      	adds	r3, r7, r3
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10a      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046cc:	4b84      	ldr	r3, [pc, #528]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d0:	4a85      	ldr	r2, [pc, #532]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	0019      	movs	r1, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046da:	4b81      	ldr	r3, [pc, #516]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046dc:	430a      	orrs	r2, r1
 80046de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046e0:	e00c      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046e2:	2312      	movs	r3, #18
 80046e4:	18fb      	adds	r3, r7, r3
 80046e6:	2213      	movs	r2, #19
 80046e8:	18ba      	adds	r2, r7, r2
 80046ea:	7812      	ldrb	r2, [r2, #0]
 80046ec:	701a      	strb	r2, [r3, #0]
 80046ee:	e005      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f0:	2312      	movs	r3, #18
 80046f2:	18fb      	adds	r3, r7, r3
 80046f4:	2213      	movs	r2, #19
 80046f6:	18ba      	adds	r2, r7, r2
 80046f8:	7812      	ldrb	r2, [r2, #0]
 80046fa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046fc:	2311      	movs	r3, #17
 80046fe:	18fb      	adds	r3, r7, r3
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d105      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004706:	4b76      	ldr	r3, [pc, #472]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004708:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800470a:	4b75      	ldr	r3, [pc, #468]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800470c:	4979      	ldr	r1, [pc, #484]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800470e:	400a      	ands	r2, r1
 8004710:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2201      	movs	r2, #1
 8004718:	4013      	ands	r3, r2
 800471a:	d009      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800471c:	4b70      	ldr	r3, [pc, #448]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800471e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004720:	2203      	movs	r2, #3
 8004722:	4393      	bics	r3, r2
 8004724:	0019      	movs	r1, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	4b6d      	ldr	r3, [pc, #436]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800472c:	430a      	orrs	r2, r1
 800472e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2202      	movs	r2, #2
 8004736:	4013      	ands	r3, r2
 8004738:	d009      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800473a:	4b69      	ldr	r3, [pc, #420]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800473c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473e:	220c      	movs	r2, #12
 8004740:	4393      	bics	r3, r2
 8004742:	0019      	movs	r1, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	4b65      	ldr	r3, [pc, #404]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800474a:	430a      	orrs	r2, r1
 800474c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2210      	movs	r2, #16
 8004754:	4013      	ands	r3, r2
 8004756:	d009      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004758:	4b61      	ldr	r3, [pc, #388]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800475a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475c:	4a66      	ldr	r2, [pc, #408]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800475e:	4013      	ands	r3, r2
 8004760:	0019      	movs	r1, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	4b5e      	ldr	r3, [pc, #376]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004768:	430a      	orrs	r2, r1
 800476a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	2380      	movs	r3, #128	@ 0x80
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4013      	ands	r3, r2
 8004776:	d009      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004778:	4b59      	ldr	r3, [pc, #356]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800477a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800477c:	4a5f      	ldr	r2, [pc, #380]	@ (80048fc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800477e:	4013      	ands	r3, r2
 8004780:	0019      	movs	r1, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	4b56      	ldr	r3, [pc, #344]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004788:	430a      	orrs	r2, r1
 800478a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	2380      	movs	r3, #128	@ 0x80
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4013      	ands	r3, r2
 8004796:	d009      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004798:	4b51      	ldr	r3, [pc, #324]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800479a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479c:	4a58      	ldr	r2, [pc, #352]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800479e:	4013      	ands	r3, r2
 80047a0:	0019      	movs	r1, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69da      	ldr	r2, [r3, #28]
 80047a6:	4b4e      	ldr	r3, [pc, #312]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047a8:	430a      	orrs	r2, r1
 80047aa:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2220      	movs	r2, #32
 80047b2:	4013      	ands	r3, r2
 80047b4:	d009      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047b6:	4b4a      	ldr	r3, [pc, #296]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ba:	4a52      	ldr	r2, [pc, #328]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80047bc:	4013      	ands	r3, r2
 80047be:	0019      	movs	r1, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	4b46      	ldr	r3, [pc, #280]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047c6:	430a      	orrs	r2, r1
 80047c8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	2380      	movs	r3, #128	@ 0x80
 80047d0:	01db      	lsls	r3, r3, #7
 80047d2:	4013      	ands	r3, r2
 80047d4:	d015      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047d6:	4b42      	ldr	r3, [pc, #264]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	0899      	lsrs	r1, r3, #2
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1a      	ldr	r2, [r3, #32]
 80047e2:	4b3f      	ldr	r3, [pc, #252]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047e4:	430a      	orrs	r2, r1
 80047e6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1a      	ldr	r2, [r3, #32]
 80047ec:	2380      	movs	r3, #128	@ 0x80
 80047ee:	05db      	lsls	r3, r3, #23
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d106      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80047f4:	4b3a      	ldr	r3, [pc, #232]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	4b39      	ldr	r3, [pc, #228]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047fa:	2180      	movs	r1, #128	@ 0x80
 80047fc:	0249      	lsls	r1, r1, #9
 80047fe:	430a      	orrs	r2, r1
 8004800:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	2380      	movs	r3, #128	@ 0x80
 8004808:	031b      	lsls	r3, r3, #12
 800480a:	4013      	ands	r3, r2
 800480c:	d009      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800480e:	4b34      	ldr	r3, [pc, #208]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004812:	2240      	movs	r2, #64	@ 0x40
 8004814:	4393      	bics	r3, r2
 8004816:	0019      	movs	r1, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800481c:	4b30      	ldr	r3, [pc, #192]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800481e:	430a      	orrs	r2, r1
 8004820:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	2380      	movs	r3, #128	@ 0x80
 8004828:	039b      	lsls	r3, r3, #14
 800482a:	4013      	ands	r3, r2
 800482c:	d016      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800482e:	4b2c      	ldr	r3, [pc, #176]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004832:	4a35      	ldr	r2, [pc, #212]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004834:	4013      	ands	r3, r2
 8004836:	0019      	movs	r1, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800483c:	4b28      	ldr	r3, [pc, #160]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800483e:	430a      	orrs	r2, r1
 8004840:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004846:	2380      	movs	r3, #128	@ 0x80
 8004848:	03db      	lsls	r3, r3, #15
 800484a:	429a      	cmp	r2, r3
 800484c:	d106      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800484e:	4b24      	ldr	r3, [pc, #144]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	4b23      	ldr	r3, [pc, #140]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004854:	2180      	movs	r1, #128	@ 0x80
 8004856:	0449      	lsls	r1, r1, #17
 8004858:	430a      	orrs	r2, r1
 800485a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	2380      	movs	r3, #128	@ 0x80
 8004862:	03db      	lsls	r3, r3, #15
 8004864:	4013      	ands	r3, r2
 8004866:	d016      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004868:	4b1d      	ldr	r3, [pc, #116]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800486a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486c:	4a27      	ldr	r2, [pc, #156]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800486e:	4013      	ands	r3, r2
 8004870:	0019      	movs	r1, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004876:	4b1a      	ldr	r3, [pc, #104]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004878:	430a      	orrs	r2, r1
 800487a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004880:	2380      	movs	r3, #128	@ 0x80
 8004882:	045b      	lsls	r3, r3, #17
 8004884:	429a      	cmp	r2, r3
 8004886:	d106      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004888:	4b15      	ldr	r3, [pc, #84]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	4b14      	ldr	r3, [pc, #80]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800488e:	2180      	movs	r1, #128	@ 0x80
 8004890:	0449      	lsls	r1, r1, #17
 8004892:	430a      	orrs	r2, r1
 8004894:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	2380      	movs	r3, #128	@ 0x80
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	4013      	ands	r3, r2
 80048a0:	d016      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80048a2:	4b0f      	ldr	r3, [pc, #60]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	0019      	movs	r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	695a      	ldr	r2, [r3, #20]
 80048b0:	4b0b      	ldr	r3, [pc, #44]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048b2:	430a      	orrs	r2, r1
 80048b4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	2380      	movs	r3, #128	@ 0x80
 80048bc:	01db      	lsls	r3, r3, #7
 80048be:	429a      	cmp	r2, r3
 80048c0:	d106      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80048c2:	4b07      	ldr	r3, [pc, #28]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	4b06      	ldr	r3, [pc, #24]	@ (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048c8:	2180      	movs	r1, #128	@ 0x80
 80048ca:	0249      	lsls	r1, r1, #9
 80048cc:	430a      	orrs	r2, r1
 80048ce:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80048d0:	2312      	movs	r3, #18
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	781b      	ldrb	r3, [r3, #0]
}
 80048d6:	0018      	movs	r0, r3
 80048d8:	46bd      	mov	sp, r7
 80048da:	b006      	add	sp, #24
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	46c0      	nop			@ (mov r8, r8)
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40007000 	.word	0x40007000
 80048e8:	fffffcff 	.word	0xfffffcff
 80048ec:	fffeffff 	.word	0xfffeffff
 80048f0:	00001388 	.word	0x00001388
 80048f4:	efffffff 	.word	0xefffffff
 80048f8:	fffff3ff 	.word	0xfffff3ff
 80048fc:	fff3ffff 	.word	0xfff3ffff
 8004900:	ffcfffff 	.word	0xffcfffff
 8004904:	ffffcfff 	.word	0xffffcfff
 8004908:	ffbfffff 	.word	0xffbfffff
 800490c:	feffffff 	.word	0xfeffffff
 8004910:	ffff3fff 	.word	0xffff3fff

08004914 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e046      	b.n	80049b4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2288      	movs	r2, #136	@ 0x88
 800492a:	589b      	ldr	r3, [r3, r2]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d107      	bne.n	8004940 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2284      	movs	r2, #132	@ 0x84
 8004934:	2100      	movs	r1, #0
 8004936:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	0018      	movs	r0, r3
 800493c:	f7fe fbd8 	bl	80030f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2288      	movs	r2, #136	@ 0x88
 8004944:	2124      	movs	r1, #36	@ 0x24
 8004946:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2101      	movs	r1, #1
 8004954:	438a      	bics	r2, r1
 8004956:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	0018      	movs	r0, r3
 8004964:	f000 faea 	bl	8004f3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	0018      	movs	r0, r3
 800496c:	f000 f828 	bl	80049c0 <UART_SetConfig>
 8004970:	0003      	movs	r3, r0
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e01c      	b.n	80049b4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	490d      	ldr	r1, [pc, #52]	@ (80049bc <HAL_UART_Init+0xa8>)
 8004986:	400a      	ands	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	212a      	movs	r1, #42	@ 0x2a
 8004996:	438a      	bics	r2, r1
 8004998:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2101      	movs	r1, #1
 80049a6:	430a      	orrs	r2, r1
 80049a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	0018      	movs	r0, r3
 80049ae:	f000 fb79 	bl	80050a4 <UART_CheckIdleState>
 80049b2:	0003      	movs	r3, r0
}
 80049b4:	0018      	movs	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b002      	add	sp, #8
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	ffffb7ff 	.word	0xffffb7ff

080049c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c0:	b5b0      	push	{r4, r5, r7, lr}
 80049c2:	b090      	sub	sp, #64	@ 0x40
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049c8:	231a      	movs	r3, #26
 80049ca:	2220      	movs	r2, #32
 80049cc:	189b      	adds	r3, r3, r2
 80049ce:	19db      	adds	r3, r3, r7
 80049d0:	2200      	movs	r2, #0
 80049d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	431a      	orrs	r2, r3
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4aaf      	ldr	r2, [pc, #700]	@ (8004cb0 <UART_SetConfig+0x2f0>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	0019      	movs	r1, r3
 80049f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049fe:	430b      	orrs	r3, r1
 8004a00:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4aaa      	ldr	r2, [pc, #680]	@ (8004cb4 <UART_SetConfig+0x2f4>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	68d9      	ldr	r1, [r3, #12]
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	0003      	movs	r3, r0
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4aa4      	ldr	r2, [pc, #656]	@ (8004cb8 <UART_SetConfig+0x2f8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a32:	4313      	orrs	r3, r2
 8004a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	4a9f      	ldr	r2, [pc, #636]	@ (8004cbc <UART_SetConfig+0x2fc>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	0019      	movs	r1, r3
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a52:	220f      	movs	r2, #15
 8004a54:	4393      	bics	r3, r2
 8004a56:	0018      	movs	r0, r3
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	0003      	movs	r3, r0
 8004a62:	430b      	orrs	r3, r1
 8004a64:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a95      	ldr	r2, [pc, #596]	@ (8004cc0 <UART_SetConfig+0x300>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d131      	bne.n	8004ad4 <UART_SetConfig+0x114>
 8004a70:	4b94      	ldr	r3, [pc, #592]	@ (8004cc4 <UART_SetConfig+0x304>)
 8004a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a74:	2203      	movs	r2, #3
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d01d      	beq.n	8004ab8 <UART_SetConfig+0xf8>
 8004a7c:	d823      	bhi.n	8004ac6 <UART_SetConfig+0x106>
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d00c      	beq.n	8004a9c <UART_SetConfig+0xdc>
 8004a82:	d820      	bhi.n	8004ac6 <UART_SetConfig+0x106>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <UART_SetConfig+0xce>
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d00e      	beq.n	8004aaa <UART_SetConfig+0xea>
 8004a8c:	e01b      	b.n	8004ac6 <UART_SetConfig+0x106>
 8004a8e:	231b      	movs	r3, #27
 8004a90:	2220      	movs	r2, #32
 8004a92:	189b      	adds	r3, r3, r2
 8004a94:	19db      	adds	r3, r3, r7
 8004a96:	2200      	movs	r2, #0
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	e0b4      	b.n	8004c06 <UART_SetConfig+0x246>
 8004a9c:	231b      	movs	r3, #27
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	189b      	adds	r3, r3, r2
 8004aa2:	19db      	adds	r3, r3, r7
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	701a      	strb	r2, [r3, #0]
 8004aa8:	e0ad      	b.n	8004c06 <UART_SetConfig+0x246>
 8004aaa:	231b      	movs	r3, #27
 8004aac:	2220      	movs	r2, #32
 8004aae:	189b      	adds	r3, r3, r2
 8004ab0:	19db      	adds	r3, r3, r7
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	701a      	strb	r2, [r3, #0]
 8004ab6:	e0a6      	b.n	8004c06 <UART_SetConfig+0x246>
 8004ab8:	231b      	movs	r3, #27
 8004aba:	2220      	movs	r2, #32
 8004abc:	189b      	adds	r3, r3, r2
 8004abe:	19db      	adds	r3, r3, r7
 8004ac0:	2208      	movs	r2, #8
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	e09f      	b.n	8004c06 <UART_SetConfig+0x246>
 8004ac6:	231b      	movs	r3, #27
 8004ac8:	2220      	movs	r2, #32
 8004aca:	189b      	adds	r3, r3, r2
 8004acc:	19db      	adds	r3, r3, r7
 8004ace:	2210      	movs	r2, #16
 8004ad0:	701a      	strb	r2, [r3, #0]
 8004ad2:	e098      	b.n	8004c06 <UART_SetConfig+0x246>
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a7b      	ldr	r2, [pc, #492]	@ (8004cc8 <UART_SetConfig+0x308>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d131      	bne.n	8004b42 <UART_SetConfig+0x182>
 8004ade:	4b79      	ldr	r3, [pc, #484]	@ (8004cc4 <UART_SetConfig+0x304>)
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae2:	220c      	movs	r2, #12
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b0c      	cmp	r3, #12
 8004ae8:	d01d      	beq.n	8004b26 <UART_SetConfig+0x166>
 8004aea:	d823      	bhi.n	8004b34 <UART_SetConfig+0x174>
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d00c      	beq.n	8004b0a <UART_SetConfig+0x14a>
 8004af0:	d820      	bhi.n	8004b34 <UART_SetConfig+0x174>
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <UART_SetConfig+0x13c>
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d00e      	beq.n	8004b18 <UART_SetConfig+0x158>
 8004afa:	e01b      	b.n	8004b34 <UART_SetConfig+0x174>
 8004afc:	231b      	movs	r3, #27
 8004afe:	2220      	movs	r2, #32
 8004b00:	189b      	adds	r3, r3, r2
 8004b02:	19db      	adds	r3, r3, r7
 8004b04:	2200      	movs	r2, #0
 8004b06:	701a      	strb	r2, [r3, #0]
 8004b08:	e07d      	b.n	8004c06 <UART_SetConfig+0x246>
 8004b0a:	231b      	movs	r3, #27
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	189b      	adds	r3, r3, r2
 8004b10:	19db      	adds	r3, r3, r7
 8004b12:	2202      	movs	r2, #2
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	e076      	b.n	8004c06 <UART_SetConfig+0x246>
 8004b18:	231b      	movs	r3, #27
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	189b      	adds	r3, r3, r2
 8004b1e:	19db      	adds	r3, r3, r7
 8004b20:	2204      	movs	r2, #4
 8004b22:	701a      	strb	r2, [r3, #0]
 8004b24:	e06f      	b.n	8004c06 <UART_SetConfig+0x246>
 8004b26:	231b      	movs	r3, #27
 8004b28:	2220      	movs	r2, #32
 8004b2a:	189b      	adds	r3, r3, r2
 8004b2c:	19db      	adds	r3, r3, r7
 8004b2e:	2208      	movs	r2, #8
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	e068      	b.n	8004c06 <UART_SetConfig+0x246>
 8004b34:	231b      	movs	r3, #27
 8004b36:	2220      	movs	r2, #32
 8004b38:	189b      	adds	r3, r3, r2
 8004b3a:	19db      	adds	r3, r3, r7
 8004b3c:	2210      	movs	r2, #16
 8004b3e:	701a      	strb	r2, [r3, #0]
 8004b40:	e061      	b.n	8004c06 <UART_SetConfig+0x246>
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a61      	ldr	r2, [pc, #388]	@ (8004ccc <UART_SetConfig+0x30c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d106      	bne.n	8004b5a <UART_SetConfig+0x19a>
 8004b4c:	231b      	movs	r3, #27
 8004b4e:	2220      	movs	r2, #32
 8004b50:	189b      	adds	r3, r3, r2
 8004b52:	19db      	adds	r3, r3, r7
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]
 8004b58:	e055      	b.n	8004c06 <UART_SetConfig+0x246>
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a5c      	ldr	r2, [pc, #368]	@ (8004cd0 <UART_SetConfig+0x310>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d106      	bne.n	8004b72 <UART_SetConfig+0x1b2>
 8004b64:	231b      	movs	r3, #27
 8004b66:	2220      	movs	r2, #32
 8004b68:	189b      	adds	r3, r3, r2
 8004b6a:	19db      	adds	r3, r3, r7
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	701a      	strb	r2, [r3, #0]
 8004b70:	e049      	b.n	8004c06 <UART_SetConfig+0x246>
 8004b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a50      	ldr	r2, [pc, #320]	@ (8004cb8 <UART_SetConfig+0x2f8>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d13e      	bne.n	8004bfa <UART_SetConfig+0x23a>
 8004b7c:	4b51      	ldr	r3, [pc, #324]	@ (8004cc4 <UART_SetConfig+0x304>)
 8004b7e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b80:	23c0      	movs	r3, #192	@ 0xc0
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	4013      	ands	r3, r2
 8004b86:	22c0      	movs	r2, #192	@ 0xc0
 8004b88:	0112      	lsls	r2, r2, #4
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d027      	beq.n	8004bde <UART_SetConfig+0x21e>
 8004b8e:	22c0      	movs	r2, #192	@ 0xc0
 8004b90:	0112      	lsls	r2, r2, #4
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d82a      	bhi.n	8004bec <UART_SetConfig+0x22c>
 8004b96:	2280      	movs	r2, #128	@ 0x80
 8004b98:	0112      	lsls	r2, r2, #4
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d011      	beq.n	8004bc2 <UART_SetConfig+0x202>
 8004b9e:	2280      	movs	r2, #128	@ 0x80
 8004ba0:	0112      	lsls	r2, r2, #4
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d822      	bhi.n	8004bec <UART_SetConfig+0x22c>
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d004      	beq.n	8004bb4 <UART_SetConfig+0x1f4>
 8004baa:	2280      	movs	r2, #128	@ 0x80
 8004bac:	00d2      	lsls	r2, r2, #3
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00e      	beq.n	8004bd0 <UART_SetConfig+0x210>
 8004bb2:	e01b      	b.n	8004bec <UART_SetConfig+0x22c>
 8004bb4:	231b      	movs	r3, #27
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	189b      	adds	r3, r3, r2
 8004bba:	19db      	adds	r3, r3, r7
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	e021      	b.n	8004c06 <UART_SetConfig+0x246>
 8004bc2:	231b      	movs	r3, #27
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	189b      	adds	r3, r3, r2
 8004bc8:	19db      	adds	r3, r3, r7
 8004bca:	2202      	movs	r2, #2
 8004bcc:	701a      	strb	r2, [r3, #0]
 8004bce:	e01a      	b.n	8004c06 <UART_SetConfig+0x246>
 8004bd0:	231b      	movs	r3, #27
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	189b      	adds	r3, r3, r2
 8004bd6:	19db      	adds	r3, r3, r7
 8004bd8:	2204      	movs	r2, #4
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	e013      	b.n	8004c06 <UART_SetConfig+0x246>
 8004bde:	231b      	movs	r3, #27
 8004be0:	2220      	movs	r2, #32
 8004be2:	189b      	adds	r3, r3, r2
 8004be4:	19db      	adds	r3, r3, r7
 8004be6:	2208      	movs	r2, #8
 8004be8:	701a      	strb	r2, [r3, #0]
 8004bea:	e00c      	b.n	8004c06 <UART_SetConfig+0x246>
 8004bec:	231b      	movs	r3, #27
 8004bee:	2220      	movs	r2, #32
 8004bf0:	189b      	adds	r3, r3, r2
 8004bf2:	19db      	adds	r3, r3, r7
 8004bf4:	2210      	movs	r2, #16
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	e005      	b.n	8004c06 <UART_SetConfig+0x246>
 8004bfa:	231b      	movs	r3, #27
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	189b      	adds	r3, r3, r2
 8004c00:	19db      	adds	r3, r3, r7
 8004c02:	2210      	movs	r2, #16
 8004c04:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a2b      	ldr	r2, [pc, #172]	@ (8004cb8 <UART_SetConfig+0x2f8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d000      	beq.n	8004c12 <UART_SetConfig+0x252>
 8004c10:	e0a9      	b.n	8004d66 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c12:	231b      	movs	r3, #27
 8004c14:	2220      	movs	r2, #32
 8004c16:	189b      	adds	r3, r3, r2
 8004c18:	19db      	adds	r3, r3, r7
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d015      	beq.n	8004c4c <UART_SetConfig+0x28c>
 8004c20:	dc18      	bgt.n	8004c54 <UART_SetConfig+0x294>
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d00d      	beq.n	8004c42 <UART_SetConfig+0x282>
 8004c26:	dc15      	bgt.n	8004c54 <UART_SetConfig+0x294>
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <UART_SetConfig+0x272>
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d005      	beq.n	8004c3c <UART_SetConfig+0x27c>
 8004c30:	e010      	b.n	8004c54 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c32:	f7ff fca1 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 8004c36:	0003      	movs	r3, r0
 8004c38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c3a:	e014      	b.n	8004c66 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c3c:	4b25      	ldr	r3, [pc, #148]	@ (8004cd4 <UART_SetConfig+0x314>)
 8004c3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c40:	e011      	b.n	8004c66 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c42:	f7ff fc0d 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 8004c46:	0003      	movs	r3, r0
 8004c48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c4a:	e00c      	b.n	8004c66 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c4c:	2380      	movs	r3, #128	@ 0x80
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c52:	e008      	b.n	8004c66 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004c58:	231a      	movs	r3, #26
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	189b      	adds	r3, r3, r2
 8004c5e:	19db      	adds	r3, r3, r7
 8004c60:	2201      	movs	r2, #1
 8004c62:	701a      	strb	r2, [r3, #0]
        break;
 8004c64:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d100      	bne.n	8004c6e <UART_SetConfig+0x2ae>
 8004c6c:	e14b      	b.n	8004f06 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c72:	4b19      	ldr	r3, [pc, #100]	@ (8004cd8 <UART_SetConfig+0x318>)
 8004c74:	0052      	lsls	r2, r2, #1
 8004c76:	5ad3      	ldrh	r3, [r2, r3]
 8004c78:	0019      	movs	r1, r3
 8004c7a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004c7c:	f7fb fa42 	bl	8000104 <__udivsi3>
 8004c80:	0003      	movs	r3, r0
 8004c82:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	0013      	movs	r3, r2
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	189b      	adds	r3, r3, r2
 8004c8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d305      	bcc.n	8004ca0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d91d      	bls.n	8004cdc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004ca0:	231a      	movs	r3, #26
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	189b      	adds	r3, r3, r2
 8004ca6:	19db      	adds	r3, r3, r7
 8004ca8:	2201      	movs	r2, #1
 8004caa:	701a      	strb	r2, [r3, #0]
 8004cac:	e12b      	b.n	8004f06 <UART_SetConfig+0x546>
 8004cae:	46c0      	nop			@ (mov r8, r8)
 8004cb0:	cfff69f3 	.word	0xcfff69f3
 8004cb4:	ffffcfff 	.word	0xffffcfff
 8004cb8:	40008000 	.word	0x40008000
 8004cbc:	11fff4ff 	.word	0x11fff4ff
 8004cc0:	40013800 	.word	0x40013800
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	40004400 	.word	0x40004400
 8004ccc:	40004800 	.word	0x40004800
 8004cd0:	40004c00 	.word	0x40004c00
 8004cd4:	00f42400 	.word	0x00f42400
 8004cd8:	080066bc 	.word	0x080066bc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cde:	61bb      	str	r3, [r7, #24]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ce8:	4b92      	ldr	r3, [pc, #584]	@ (8004f34 <UART_SetConfig+0x574>)
 8004cea:	0052      	lsls	r2, r2, #1
 8004cec:	5ad3      	ldrh	r3, [r2, r3]
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	69b8      	ldr	r0, [r7, #24]
 8004cfa:	69f9      	ldr	r1, [r7, #28]
 8004cfc:	f7fb fbb6 	bl	800046c <__aeabi_uldivmod>
 8004d00:	0002      	movs	r2, r0
 8004d02:	000b      	movs	r3, r1
 8004d04:	0e11      	lsrs	r1, r2, #24
 8004d06:	021d      	lsls	r5, r3, #8
 8004d08:	430d      	orrs	r5, r1
 8004d0a:	0214      	lsls	r4, r2, #8
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	085b      	lsrs	r3, r3, #1
 8004d12:	60bb      	str	r3, [r7, #8]
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	68b8      	ldr	r0, [r7, #8]
 8004d1a:	68f9      	ldr	r1, [r7, #12]
 8004d1c:	1900      	adds	r0, r0, r4
 8004d1e:	4169      	adcs	r1, r5
 8004d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	603b      	str	r3, [r7, #0]
 8004d26:	2300      	movs	r3, #0
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f7fb fb9d 	bl	800046c <__aeabi_uldivmod>
 8004d32:	0002      	movs	r2, r0
 8004d34:	000b      	movs	r3, r1
 8004d36:	0013      	movs	r3, r2
 8004d38:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d3c:	23c0      	movs	r3, #192	@ 0xc0
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d309      	bcc.n	8004d58 <UART_SetConfig+0x398>
 8004d44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d46:	2380      	movs	r3, #128	@ 0x80
 8004d48:	035b      	lsls	r3, r3, #13
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d204      	bcs.n	8004d58 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d54:	60da      	str	r2, [r3, #12]
 8004d56:	e0d6      	b.n	8004f06 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004d58:	231a      	movs	r3, #26
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	189b      	adds	r3, r3, r2
 8004d5e:	19db      	adds	r3, r3, r7
 8004d60:	2201      	movs	r2, #1
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	e0cf      	b.n	8004f06 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	69da      	ldr	r2, [r3, #28]
 8004d6a:	2380      	movs	r3, #128	@ 0x80
 8004d6c:	021b      	lsls	r3, r3, #8
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d000      	beq.n	8004d74 <UART_SetConfig+0x3b4>
 8004d72:	e070      	b.n	8004e56 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004d74:	231b      	movs	r3, #27
 8004d76:	2220      	movs	r2, #32
 8004d78:	189b      	adds	r3, r3, r2
 8004d7a:	19db      	adds	r3, r3, r7
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d015      	beq.n	8004dae <UART_SetConfig+0x3ee>
 8004d82:	dc18      	bgt.n	8004db6 <UART_SetConfig+0x3f6>
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d00d      	beq.n	8004da4 <UART_SetConfig+0x3e4>
 8004d88:	dc15      	bgt.n	8004db6 <UART_SetConfig+0x3f6>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <UART_SetConfig+0x3d4>
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d005      	beq.n	8004d9e <UART_SetConfig+0x3de>
 8004d92:	e010      	b.n	8004db6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d94:	f7ff fbf0 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d9c:	e014      	b.n	8004dc8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d9e:	4b66      	ldr	r3, [pc, #408]	@ (8004f38 <UART_SetConfig+0x578>)
 8004da0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004da2:	e011      	b.n	8004dc8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004da4:	f7ff fb5c 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 8004da8:	0003      	movs	r3, r0
 8004daa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dac:	e00c      	b.n	8004dc8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dae:	2380      	movs	r3, #128	@ 0x80
 8004db0:	021b      	lsls	r3, r3, #8
 8004db2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004db4:	e008      	b.n	8004dc8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004dba:	231a      	movs	r3, #26
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	189b      	adds	r3, r3, r2
 8004dc0:	19db      	adds	r3, r3, r7
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	701a      	strb	r2, [r3, #0]
        break;
 8004dc6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d100      	bne.n	8004dd0 <UART_SetConfig+0x410>
 8004dce:	e09a      	b.n	8004f06 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dd4:	4b57      	ldr	r3, [pc, #348]	@ (8004f34 <UART_SetConfig+0x574>)
 8004dd6:	0052      	lsls	r2, r2, #1
 8004dd8:	5ad3      	ldrh	r3, [r2, r3]
 8004dda:	0019      	movs	r1, r3
 8004ddc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004dde:	f7fb f991 	bl	8000104 <__udivsi3>
 8004de2:	0003      	movs	r3, r0
 8004de4:	005a      	lsls	r2, r3, #1
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	085b      	lsrs	r3, r3, #1
 8004dec:	18d2      	adds	r2, r2, r3
 8004dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	0019      	movs	r1, r3
 8004df4:	0010      	movs	r0, r2
 8004df6:	f7fb f985 	bl	8000104 <__udivsi3>
 8004dfa:	0003      	movs	r3, r0
 8004dfc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e00:	2b0f      	cmp	r3, #15
 8004e02:	d921      	bls.n	8004e48 <UART_SetConfig+0x488>
 8004e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e06:	2380      	movs	r3, #128	@ 0x80
 8004e08:	025b      	lsls	r3, r3, #9
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d21c      	bcs.n	8004e48 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	200e      	movs	r0, #14
 8004e14:	2420      	movs	r4, #32
 8004e16:	1903      	adds	r3, r0, r4
 8004e18:	19db      	adds	r3, r3, r7
 8004e1a:	210f      	movs	r1, #15
 8004e1c:	438a      	bics	r2, r1
 8004e1e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e22:	085b      	lsrs	r3, r3, #1
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2207      	movs	r2, #7
 8004e28:	4013      	ands	r3, r2
 8004e2a:	b299      	uxth	r1, r3
 8004e2c:	1903      	adds	r3, r0, r4
 8004e2e:	19db      	adds	r3, r3, r7
 8004e30:	1902      	adds	r2, r0, r4
 8004e32:	19d2      	adds	r2, r2, r7
 8004e34:	8812      	ldrh	r2, [r2, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	1902      	adds	r2, r0, r4
 8004e40:	19d2      	adds	r2, r2, r7
 8004e42:	8812      	ldrh	r2, [r2, #0]
 8004e44:	60da      	str	r2, [r3, #12]
 8004e46:	e05e      	b.n	8004f06 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004e48:	231a      	movs	r3, #26
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	189b      	adds	r3, r3, r2
 8004e4e:	19db      	adds	r3, r3, r7
 8004e50:	2201      	movs	r2, #1
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	e057      	b.n	8004f06 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e56:	231b      	movs	r3, #27
 8004e58:	2220      	movs	r2, #32
 8004e5a:	189b      	adds	r3, r3, r2
 8004e5c:	19db      	adds	r3, r3, r7
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d015      	beq.n	8004e90 <UART_SetConfig+0x4d0>
 8004e64:	dc18      	bgt.n	8004e98 <UART_SetConfig+0x4d8>
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d00d      	beq.n	8004e86 <UART_SetConfig+0x4c6>
 8004e6a:	dc15      	bgt.n	8004e98 <UART_SetConfig+0x4d8>
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <UART_SetConfig+0x4b6>
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d005      	beq.n	8004e80 <UART_SetConfig+0x4c0>
 8004e74:	e010      	b.n	8004e98 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e76:	f7ff fb7f 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 8004e7a:	0003      	movs	r3, r0
 8004e7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e7e:	e014      	b.n	8004eaa <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e80:	4b2d      	ldr	r3, [pc, #180]	@ (8004f38 <UART_SetConfig+0x578>)
 8004e82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e84:	e011      	b.n	8004eaa <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e86:	f7ff faeb 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 8004e8a:	0003      	movs	r3, r0
 8004e8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e8e:	e00c      	b.n	8004eaa <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e90:	2380      	movs	r3, #128	@ 0x80
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e96:	e008      	b.n	8004eaa <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004e9c:	231a      	movs	r3, #26
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	189b      	adds	r3, r3, r2
 8004ea2:	19db      	adds	r3, r3, r7
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	701a      	strb	r2, [r3, #0]
        break;
 8004ea8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d02a      	beq.n	8004f06 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8004f34 <UART_SetConfig+0x574>)
 8004eb6:	0052      	lsls	r2, r2, #1
 8004eb8:	5ad3      	ldrh	r3, [r2, r3]
 8004eba:	0019      	movs	r1, r3
 8004ebc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004ebe:	f7fb f921 	bl	8000104 <__udivsi3>
 8004ec2:	0003      	movs	r3, r0
 8004ec4:	001a      	movs	r2, r3
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	085b      	lsrs	r3, r3, #1
 8004ecc:	18d2      	adds	r2, r2, r3
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	0019      	movs	r1, r3
 8004ed4:	0010      	movs	r0, r2
 8004ed6:	f7fb f915 	bl	8000104 <__udivsi3>
 8004eda:	0003      	movs	r3, r0
 8004edc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee0:	2b0f      	cmp	r3, #15
 8004ee2:	d90a      	bls.n	8004efa <UART_SetConfig+0x53a>
 8004ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ee6:	2380      	movs	r3, #128	@ 0x80
 8004ee8:	025b      	lsls	r3, r3, #9
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d205      	bcs.n	8004efa <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60da      	str	r2, [r3, #12]
 8004ef8:	e005      	b.n	8004f06 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004efa:	231a      	movs	r3, #26
 8004efc:	2220      	movs	r2, #32
 8004efe:	189b      	adds	r3, r3, r2
 8004f00:	19db      	adds	r3, r3, r7
 8004f02:	2201      	movs	r2, #1
 8004f04:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f08:	226a      	movs	r2, #106	@ 0x6a
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	2268      	movs	r2, #104	@ 0x68
 8004f12:	2101      	movs	r1, #1
 8004f14:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	2200      	movs	r2, #0
 8004f1a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1e:	2200      	movs	r2, #0
 8004f20:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004f22:	231a      	movs	r3, #26
 8004f24:	2220      	movs	r2, #32
 8004f26:	189b      	adds	r3, r3, r2
 8004f28:	19db      	adds	r3, r3, r7
 8004f2a:	781b      	ldrb	r3, [r3, #0]
}
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b010      	add	sp, #64	@ 0x40
 8004f32:	bdb0      	pop	{r4, r5, r7, pc}
 8004f34:	080066bc 	.word	0x080066bc
 8004f38:	00f42400 	.word	0x00f42400

08004f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f48:	2208      	movs	r2, #8
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	d00b      	beq.n	8004f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4a4a      	ldr	r2, [pc, #296]	@ (8005080 <UART_AdvFeatureConfig+0x144>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	0019      	movs	r1, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	d00b      	beq.n	8004f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	4a43      	ldr	r2, [pc, #268]	@ (8005084 <UART_AdvFeatureConfig+0x148>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	0019      	movs	r1, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d00b      	beq.n	8004faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4a3b      	ldr	r2, [pc, #236]	@ (8005088 <UART_AdvFeatureConfig+0x14c>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	0019      	movs	r1, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fae:	2204      	movs	r2, #4
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d00b      	beq.n	8004fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4a34      	ldr	r2, [pc, #208]	@ (800508c <UART_AdvFeatureConfig+0x150>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	0019      	movs	r1, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd0:	2210      	movs	r2, #16
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d00b      	beq.n	8004fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	4a2c      	ldr	r2, [pc, #176]	@ (8005090 <UART_AdvFeatureConfig+0x154>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	0019      	movs	r1, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d00b      	beq.n	8005010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	4a25      	ldr	r2, [pc, #148]	@ (8005094 <UART_AdvFeatureConfig+0x158>)
 8005000:	4013      	ands	r3, r2
 8005002:	0019      	movs	r1, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005014:	2240      	movs	r2, #64	@ 0x40
 8005016:	4013      	ands	r3, r2
 8005018:	d01d      	beq.n	8005056 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	4a1d      	ldr	r2, [pc, #116]	@ (8005098 <UART_AdvFeatureConfig+0x15c>)
 8005022:	4013      	ands	r3, r2
 8005024:	0019      	movs	r1, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005036:	2380      	movs	r3, #128	@ 0x80
 8005038:	035b      	lsls	r3, r3, #13
 800503a:	429a      	cmp	r2, r3
 800503c:	d10b      	bne.n	8005056 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	4a15      	ldr	r2, [pc, #84]	@ (800509c <UART_AdvFeatureConfig+0x160>)
 8005046:	4013      	ands	r3, r2
 8005048:	0019      	movs	r1, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505a:	2280      	movs	r2, #128	@ 0x80
 800505c:	4013      	ands	r3, r2
 800505e:	d00b      	beq.n	8005078 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4a0e      	ldr	r2, [pc, #56]	@ (80050a0 <UART_AdvFeatureConfig+0x164>)
 8005068:	4013      	ands	r3, r2
 800506a:	0019      	movs	r1, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	605a      	str	r2, [r3, #4]
  }
}
 8005078:	46c0      	nop			@ (mov r8, r8)
 800507a:	46bd      	mov	sp, r7
 800507c:	b002      	add	sp, #8
 800507e:	bd80      	pop	{r7, pc}
 8005080:	ffff7fff 	.word	0xffff7fff
 8005084:	fffdffff 	.word	0xfffdffff
 8005088:	fffeffff 	.word	0xfffeffff
 800508c:	fffbffff 	.word	0xfffbffff
 8005090:	ffffefff 	.word	0xffffefff
 8005094:	ffffdfff 	.word	0xffffdfff
 8005098:	ffefffff 	.word	0xffefffff
 800509c:	ff9fffff 	.word	0xff9fffff
 80050a0:	fff7ffff 	.word	0xfff7ffff

080050a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b092      	sub	sp, #72	@ 0x48
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2290      	movs	r2, #144	@ 0x90
 80050b0:	2100      	movs	r1, #0
 80050b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050b4:	f7fe f940 	bl	8003338 <HAL_GetTick>
 80050b8:	0003      	movs	r3, r0
 80050ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2208      	movs	r2, #8
 80050c4:	4013      	ands	r3, r2
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d12d      	bne.n	8005126 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050cc:	2280      	movs	r2, #128	@ 0x80
 80050ce:	0391      	lsls	r1, r2, #14
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	4a47      	ldr	r2, [pc, #284]	@ (80051f0 <UART_CheckIdleState+0x14c>)
 80050d4:	9200      	str	r2, [sp, #0]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f000 f88e 	bl	80051f8 <UART_WaitOnFlagUntilTimeout>
 80050dc:	1e03      	subs	r3, r0, #0
 80050de:	d022      	beq.n	8005126 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e0:	f3ef 8310 	mrs	r3, PRIMASK
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80050e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050ea:	2301      	movs	r3, #1
 80050ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f0:	f383 8810 	msr	PRIMASK, r3
}
 80050f4:	46c0      	nop			@ (mov r8, r8)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2180      	movs	r1, #128	@ 0x80
 8005102:	438a      	bics	r2, r1
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005108:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800510a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510c:	f383 8810 	msr	PRIMASK, r3
}
 8005110:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2288      	movs	r2, #136	@ 0x88
 8005116:	2120      	movs	r1, #32
 8005118:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2284      	movs	r2, #132	@ 0x84
 800511e:	2100      	movs	r1, #0
 8005120:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e060      	b.n	80051e8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2204      	movs	r2, #4
 800512e:	4013      	ands	r3, r2
 8005130:	2b04      	cmp	r3, #4
 8005132:	d146      	bne.n	80051c2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005136:	2280      	movs	r2, #128	@ 0x80
 8005138:	03d1      	lsls	r1, r2, #15
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	4a2c      	ldr	r2, [pc, #176]	@ (80051f0 <UART_CheckIdleState+0x14c>)
 800513e:	9200      	str	r2, [sp, #0]
 8005140:	2200      	movs	r2, #0
 8005142:	f000 f859 	bl	80051f8 <UART_WaitOnFlagUntilTimeout>
 8005146:	1e03      	subs	r3, r0, #0
 8005148:	d03b      	beq.n	80051c2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800514a:	f3ef 8310 	mrs	r3, PRIMASK
 800514e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005150:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005152:	637b      	str	r3, [r7, #52]	@ 0x34
 8005154:	2301      	movs	r3, #1
 8005156:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f383 8810 	msr	PRIMASK, r3
}
 800515e:	46c0      	nop			@ (mov r8, r8)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4922      	ldr	r1, [pc, #136]	@ (80051f4 <UART_CheckIdleState+0x150>)
 800516c:	400a      	ands	r2, r1
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005172:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f383 8810 	msr	PRIMASK, r3
}
 800517a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800517c:	f3ef 8310 	mrs	r3, PRIMASK
 8005180:	61bb      	str	r3, [r7, #24]
  return(result);
 8005182:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005184:	633b      	str	r3, [r7, #48]	@ 0x30
 8005186:	2301      	movs	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	f383 8810 	msr	PRIMASK, r3
}
 8005190:	46c0      	nop			@ (mov r8, r8)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2101      	movs	r1, #1
 800519e:	438a      	bics	r2, r1
 80051a0:	609a      	str	r2, [r3, #8]
 80051a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	f383 8810 	msr	PRIMASK, r3
}
 80051ac:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	228c      	movs	r2, #140	@ 0x8c
 80051b2:	2120      	movs	r1, #32
 80051b4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2284      	movs	r2, #132	@ 0x84
 80051ba:	2100      	movs	r1, #0
 80051bc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e012      	b.n	80051e8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2288      	movs	r2, #136	@ 0x88
 80051c6:	2120      	movs	r1, #32
 80051c8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	228c      	movs	r2, #140	@ 0x8c
 80051ce:	2120      	movs	r1, #32
 80051d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2284      	movs	r2, #132	@ 0x84
 80051e2:	2100      	movs	r1, #0
 80051e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	0018      	movs	r0, r3
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b010      	add	sp, #64	@ 0x40
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	01ffffff 	.word	0x01ffffff
 80051f4:	fffffedf 	.word	0xfffffedf

080051f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	1dfb      	adds	r3, r7, #7
 8005206:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005208:	e051      	b.n	80052ae <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	3301      	adds	r3, #1
 800520e:	d04e      	beq.n	80052ae <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005210:	f7fe f892 	bl	8003338 <HAL_GetTick>
 8005214:	0002      	movs	r2, r0
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	429a      	cmp	r2, r3
 800521e:	d302      	bcc.n	8005226 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e051      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2204      	movs	r2, #4
 8005232:	4013      	ands	r3, r2
 8005234:	d03b      	beq.n	80052ae <UART_WaitOnFlagUntilTimeout+0xb6>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b80      	cmp	r3, #128	@ 0x80
 800523a:	d038      	beq.n	80052ae <UART_WaitOnFlagUntilTimeout+0xb6>
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b40      	cmp	r3, #64	@ 0x40
 8005240:	d035      	beq.n	80052ae <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	2208      	movs	r2, #8
 800524a:	4013      	ands	r3, r2
 800524c:	2b08      	cmp	r3, #8
 800524e:	d111      	bne.n	8005274 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2208      	movs	r2, #8
 8005256:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	0018      	movs	r0, r3
 800525c:	f000 f83c 	bl	80052d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2290      	movs	r2, #144	@ 0x90
 8005264:	2108      	movs	r1, #8
 8005266:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2284      	movs	r2, #132	@ 0x84
 800526c:	2100      	movs	r1, #0
 800526e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e02c      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	69da      	ldr	r2, [r3, #28]
 800527a:	2380      	movs	r3, #128	@ 0x80
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	401a      	ands	r2, r3
 8005280:	2380      	movs	r3, #128	@ 0x80
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	429a      	cmp	r2, r3
 8005286:	d112      	bne.n	80052ae <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2280      	movs	r2, #128	@ 0x80
 800528e:	0112      	lsls	r2, r2, #4
 8005290:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	0018      	movs	r0, r3
 8005296:	f000 f81f 	bl	80052d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2290      	movs	r2, #144	@ 0x90
 800529e:	2120      	movs	r1, #32
 80052a0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2284      	movs	r2, #132	@ 0x84
 80052a6:	2100      	movs	r1, #0
 80052a8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e00f      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	4013      	ands	r3, r2
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	425a      	negs	r2, r3
 80052be:	4153      	adcs	r3, r2
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	001a      	movs	r2, r3
 80052c4:	1dfb      	adds	r3, r7, #7
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d09e      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	0018      	movs	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	b004      	add	sp, #16
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08e      	sub	sp, #56	@ 0x38
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e0:	f3ef 8310 	mrs	r3, PRIMASK
 80052e4:	617b      	str	r3, [r7, #20]
  return(result);
 80052e6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ea:	2301      	movs	r3, #1
 80052ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	f383 8810 	msr	PRIMASK, r3
}
 80052f4:	46c0      	nop			@ (mov r8, r8)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4926      	ldr	r1, [pc, #152]	@ (800539c <UART_EndRxTransfer+0xc4>)
 8005302:	400a      	ands	r2, r1
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005308:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	f383 8810 	msr	PRIMASK, r3
}
 8005310:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005312:	f3ef 8310 	mrs	r3, PRIMASK
 8005316:	623b      	str	r3, [r7, #32]
  return(result);
 8005318:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800531a:	633b      	str	r3, [r7, #48]	@ 0x30
 800531c:	2301      	movs	r3, #1
 800531e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005322:	f383 8810 	msr	PRIMASK, r3
}
 8005326:	46c0      	nop			@ (mov r8, r8)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	491b      	ldr	r1, [pc, #108]	@ (80053a0 <UART_EndRxTransfer+0xc8>)
 8005334:	400a      	ands	r2, r1
 8005336:	609a      	str	r2, [r3, #8]
 8005338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800533c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533e:	f383 8810 	msr	PRIMASK, r3
}
 8005342:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005348:	2b01      	cmp	r3, #1
 800534a:	d118      	bne.n	800537e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800534c:	f3ef 8310 	mrs	r3, PRIMASK
 8005350:	60bb      	str	r3, [r7, #8]
  return(result);
 8005352:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005354:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005356:	2301      	movs	r3, #1
 8005358:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f383 8810 	msr	PRIMASK, r3
}
 8005360:	46c0      	nop			@ (mov r8, r8)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2110      	movs	r1, #16
 800536e:	438a      	bics	r2, r1
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005374:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f383 8810 	msr	PRIMASK, r3
}
 800537c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	228c      	movs	r2, #140	@ 0x8c
 8005382:	2120      	movs	r1, #32
 8005384:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005392:	46c0      	nop			@ (mov r8, r8)
 8005394:	46bd      	mov	sp, r7
 8005396:	b00e      	add	sp, #56	@ 0x38
 8005398:	bd80      	pop	{r7, pc}
 800539a:	46c0      	nop			@ (mov r8, r8)
 800539c:	fffffedf 	.word	0xfffffedf
 80053a0:	effffffe 	.word	0xeffffffe

080053a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2284      	movs	r2, #132	@ 0x84
 80053b0:	5c9b      	ldrb	r3, [r3, r2]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_UARTEx_DisableFifoMode+0x16>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e027      	b.n	800540a <HAL_UARTEx_DisableFifoMode+0x66>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2284      	movs	r2, #132	@ 0x84
 80053be:	2101      	movs	r1, #1
 80053c0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2288      	movs	r2, #136	@ 0x88
 80053c6:	2124      	movs	r1, #36	@ 0x24
 80053c8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2101      	movs	r1, #1
 80053de:	438a      	bics	r2, r1
 80053e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4a0b      	ldr	r2, [pc, #44]	@ (8005414 <HAL_UARTEx_DisableFifoMode+0x70>)
 80053e6:	4013      	ands	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2288      	movs	r2, #136	@ 0x88
 80053fc:	2120      	movs	r1, #32
 80053fe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2284      	movs	r2, #132	@ 0x84
 8005404:	2100      	movs	r1, #0
 8005406:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	0018      	movs	r0, r3
 800540c:	46bd      	mov	sp, r7
 800540e:	b004      	add	sp, #16
 8005410:	bd80      	pop	{r7, pc}
 8005412:	46c0      	nop			@ (mov r8, r8)
 8005414:	dfffffff 	.word	0xdfffffff

08005418 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2284      	movs	r2, #132	@ 0x84
 8005426:	5c9b      	ldrb	r3, [r3, r2]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800542c:	2302      	movs	r3, #2
 800542e:	e02e      	b.n	800548e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2284      	movs	r2, #132	@ 0x84
 8005434:	2101      	movs	r1, #1
 8005436:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2288      	movs	r2, #136	@ 0x88
 800543c:	2124      	movs	r1, #36	@ 0x24
 800543e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2101      	movs	r1, #1
 8005454:	438a      	bics	r2, r1
 8005456:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	08d9      	lsrs	r1, r3, #3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	0018      	movs	r0, r3
 8005470:	f000 f854 	bl	800551c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2288      	movs	r2, #136	@ 0x88
 8005480:	2120      	movs	r1, #32
 8005482:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2284      	movs	r2, #132	@ 0x84
 8005488:	2100      	movs	r1, #0
 800548a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	0018      	movs	r0, r3
 8005490:	46bd      	mov	sp, r7
 8005492:	b004      	add	sp, #16
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2284      	movs	r2, #132	@ 0x84
 80054a6:	5c9b      	ldrb	r3, [r3, r2]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e02f      	b.n	8005510 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2284      	movs	r2, #132	@ 0x84
 80054b4:	2101      	movs	r1, #1
 80054b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2288      	movs	r2, #136	@ 0x88
 80054bc:	2124      	movs	r1, #36	@ 0x24
 80054be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2101      	movs	r1, #1
 80054d4:	438a      	bics	r2, r1
 80054d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	4a0e      	ldr	r2, [pc, #56]	@ (8005518 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	0019      	movs	r1, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	0018      	movs	r0, r3
 80054f2:	f000 f813 	bl	800551c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2288      	movs	r2, #136	@ 0x88
 8005502:	2120      	movs	r1, #32
 8005504:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2284      	movs	r2, #132	@ 0x84
 800550a:	2100      	movs	r1, #0
 800550c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	0018      	movs	r0, r3
 8005512:	46bd      	mov	sp, r7
 8005514:	b004      	add	sp, #16
 8005516:	bd80      	pop	{r7, pc}
 8005518:	f1ffffff 	.word	0xf1ffffff

0800551c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800551c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005528:	2b00      	cmp	r3, #0
 800552a:	d108      	bne.n	800553e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	226a      	movs	r2, #106	@ 0x6a
 8005530:	2101      	movs	r1, #1
 8005532:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2268      	movs	r2, #104	@ 0x68
 8005538:	2101      	movs	r1, #1
 800553a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800553c:	e043      	b.n	80055c6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800553e:	260f      	movs	r6, #15
 8005540:	19bb      	adds	r3, r7, r6
 8005542:	2208      	movs	r2, #8
 8005544:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005546:	200e      	movs	r0, #14
 8005548:	183b      	adds	r3, r7, r0
 800554a:	2208      	movs	r2, #8
 800554c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	0e5b      	lsrs	r3, r3, #25
 8005556:	b2da      	uxtb	r2, r3
 8005558:	240d      	movs	r4, #13
 800555a:	193b      	adds	r3, r7, r4
 800555c:	2107      	movs	r1, #7
 800555e:	400a      	ands	r2, r1
 8005560:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	0f5b      	lsrs	r3, r3, #29
 800556a:	b2da      	uxtb	r2, r3
 800556c:	250c      	movs	r5, #12
 800556e:	197b      	adds	r3, r7, r5
 8005570:	2107      	movs	r1, #7
 8005572:	400a      	ands	r2, r1
 8005574:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005576:	183b      	adds	r3, r7, r0
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	197a      	adds	r2, r7, r5
 800557c:	7812      	ldrb	r2, [r2, #0]
 800557e:	4914      	ldr	r1, [pc, #80]	@ (80055d0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005580:	5c8a      	ldrb	r2, [r1, r2]
 8005582:	435a      	muls	r2, r3
 8005584:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005586:	197b      	adds	r3, r7, r5
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	4a12      	ldr	r2, [pc, #72]	@ (80055d4 <UARTEx_SetNbDataToProcess+0xb8>)
 800558c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800558e:	0019      	movs	r1, r3
 8005590:	f7fa fe42 	bl	8000218 <__divsi3>
 8005594:	0003      	movs	r3, r0
 8005596:	b299      	uxth	r1, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	226a      	movs	r2, #106	@ 0x6a
 800559c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800559e:	19bb      	adds	r3, r7, r6
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	193a      	adds	r2, r7, r4
 80055a4:	7812      	ldrb	r2, [r2, #0]
 80055a6:	490a      	ldr	r1, [pc, #40]	@ (80055d0 <UARTEx_SetNbDataToProcess+0xb4>)
 80055a8:	5c8a      	ldrb	r2, [r1, r2]
 80055aa:	435a      	muls	r2, r3
 80055ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80055ae:	193b      	adds	r3, r7, r4
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	4a08      	ldr	r2, [pc, #32]	@ (80055d4 <UARTEx_SetNbDataToProcess+0xb8>)
 80055b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055b6:	0019      	movs	r1, r3
 80055b8:	f7fa fe2e 	bl	8000218 <__divsi3>
 80055bc:	0003      	movs	r3, r0
 80055be:	b299      	uxth	r1, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2268      	movs	r2, #104	@ 0x68
 80055c4:	5299      	strh	r1, [r3, r2]
}
 80055c6:	46c0      	nop			@ (mov r8, r8)
 80055c8:	46bd      	mov	sp, r7
 80055ca:	b005      	add	sp, #20
 80055cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ce:	46c0      	nop			@ (mov r8, r8)
 80055d0:	080066d4 	.word	0x080066d4
 80055d4:	080066dc 	.word	0x080066dc

080055d8 <memset>:
 80055d8:	0003      	movs	r3, r0
 80055da:	1882      	adds	r2, r0, r2
 80055dc:	4293      	cmp	r3, r2
 80055de:	d100      	bne.n	80055e2 <memset+0xa>
 80055e0:	4770      	bx	lr
 80055e2:	7019      	strb	r1, [r3, #0]
 80055e4:	3301      	adds	r3, #1
 80055e6:	e7f9      	b.n	80055dc <memset+0x4>

080055e8 <__libc_init_array>:
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	2600      	movs	r6, #0
 80055ec:	4c0c      	ldr	r4, [pc, #48]	@ (8005620 <__libc_init_array+0x38>)
 80055ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005624 <__libc_init_array+0x3c>)
 80055f0:	1b64      	subs	r4, r4, r5
 80055f2:	10a4      	asrs	r4, r4, #2
 80055f4:	42a6      	cmp	r6, r4
 80055f6:	d109      	bne.n	800560c <__libc_init_array+0x24>
 80055f8:	2600      	movs	r6, #0
 80055fa:	f000 ffe3 	bl	80065c4 <_init>
 80055fe:	4c0a      	ldr	r4, [pc, #40]	@ (8005628 <__libc_init_array+0x40>)
 8005600:	4d0a      	ldr	r5, [pc, #40]	@ (800562c <__libc_init_array+0x44>)
 8005602:	1b64      	subs	r4, r4, r5
 8005604:	10a4      	asrs	r4, r4, #2
 8005606:	42a6      	cmp	r6, r4
 8005608:	d105      	bne.n	8005616 <__libc_init_array+0x2e>
 800560a:	bd70      	pop	{r4, r5, r6, pc}
 800560c:	00b3      	lsls	r3, r6, #2
 800560e:	58eb      	ldr	r3, [r5, r3]
 8005610:	4798      	blx	r3
 8005612:	3601      	adds	r6, #1
 8005614:	e7ee      	b.n	80055f4 <__libc_init_array+0xc>
 8005616:	00b3      	lsls	r3, r6, #2
 8005618:	58eb      	ldr	r3, [r5, r3]
 800561a:	4798      	blx	r3
 800561c:	3601      	adds	r6, #1
 800561e:	e7f2      	b.n	8005606 <__libc_init_array+0x1e>
 8005620:	080068c8 	.word	0x080068c8
 8005624:	080068c8 	.word	0x080068c8
 8005628:	080068cc 	.word	0x080068cc
 800562c:	080068c8 	.word	0x080068c8

08005630 <sin>:
 8005630:	b530      	push	{r4, r5, lr}
 8005632:	4a1f      	ldr	r2, [pc, #124]	@ (80056b0 <sin+0x80>)
 8005634:	004b      	lsls	r3, r1, #1
 8005636:	b087      	sub	sp, #28
 8005638:	085b      	lsrs	r3, r3, #1
 800563a:	4293      	cmp	r3, r2
 800563c:	d806      	bhi.n	800564c <sin+0x1c>
 800563e:	2300      	movs	r3, #0
 8005640:	2200      	movs	r2, #0
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	2300      	movs	r3, #0
 8005646:	f000 f8f7 	bl	8005838 <__kernel_sin>
 800564a:	e006      	b.n	800565a <sin+0x2a>
 800564c:	4a19      	ldr	r2, [pc, #100]	@ (80056b4 <sin+0x84>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d905      	bls.n	800565e <sin+0x2e>
 8005652:	0002      	movs	r2, r0
 8005654:	000b      	movs	r3, r1
 8005656:	f7fc fd51 	bl	80020fc <__aeabi_dsub>
 800565a:	b007      	add	sp, #28
 800565c:	bd30      	pop	{r4, r5, pc}
 800565e:	aa02      	add	r2, sp, #8
 8005660:	f000 f996 	bl	8005990 <__ieee754_rem_pio2>
 8005664:	9c04      	ldr	r4, [sp, #16]
 8005666:	9d05      	ldr	r5, [sp, #20]
 8005668:	2303      	movs	r3, #3
 800566a:	4003      	ands	r3, r0
 800566c:	9802      	ldr	r0, [sp, #8]
 800566e:	9903      	ldr	r1, [sp, #12]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d008      	beq.n	8005686 <sin+0x56>
 8005674:	2b02      	cmp	r3, #2
 8005676:	d00b      	beq.n	8005690 <sin+0x60>
 8005678:	2b00      	cmp	r3, #0
 800567a:	d113      	bne.n	80056a4 <sin+0x74>
 800567c:	3301      	adds	r3, #1
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	0022      	movs	r2, r4
 8005682:	002b      	movs	r3, r5
 8005684:	e7df      	b.n	8005646 <sin+0x16>
 8005686:	0022      	movs	r2, r4
 8005688:	002b      	movs	r3, r5
 800568a:	f000 f815 	bl	80056b8 <__kernel_cos>
 800568e:	e7e4      	b.n	800565a <sin+0x2a>
 8005690:	2301      	movs	r3, #1
 8005692:	0022      	movs	r2, r4
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	002b      	movs	r3, r5
 8005698:	f000 f8ce 	bl	8005838 <__kernel_sin>
 800569c:	2380      	movs	r3, #128	@ 0x80
 800569e:	061b      	lsls	r3, r3, #24
 80056a0:	18c9      	adds	r1, r1, r3
 80056a2:	e7da      	b.n	800565a <sin+0x2a>
 80056a4:	0022      	movs	r2, r4
 80056a6:	002b      	movs	r3, r5
 80056a8:	f000 f806 	bl	80056b8 <__kernel_cos>
 80056ac:	e7f6      	b.n	800569c <sin+0x6c>
 80056ae:	46c0      	nop			@ (mov r8, r8)
 80056b0:	3fe921fb 	.word	0x3fe921fb
 80056b4:	7fefffff 	.word	0x7fefffff

080056b8 <__kernel_cos>:
 80056b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ba:	b087      	sub	sp, #28
 80056bc:	9204      	str	r2, [sp, #16]
 80056be:	9305      	str	r3, [sp, #20]
 80056c0:	004b      	lsls	r3, r1, #1
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	9301      	str	r3, [sp, #4]
 80056c6:	23f9      	movs	r3, #249	@ 0xf9
 80056c8:	9a01      	ldr	r2, [sp, #4]
 80056ca:	0004      	movs	r4, r0
 80056cc:	000d      	movs	r5, r1
 80056ce:	059b      	lsls	r3, r3, #22
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d204      	bcs.n	80056de <__kernel_cos+0x26>
 80056d4:	f7fd f8ae 	bl	8002834 <__aeabi_d2iz>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d100      	bne.n	80056de <__kernel_cos+0x26>
 80056dc:	e084      	b.n	80057e8 <__kernel_cos+0x130>
 80056de:	0022      	movs	r2, r4
 80056e0:	002b      	movs	r3, r5
 80056e2:	0020      	movs	r0, r4
 80056e4:	0029      	movs	r1, r5
 80056e6:	f7fc fa41 	bl	8001b6c <__aeabi_dmul>
 80056ea:	2200      	movs	r2, #0
 80056ec:	4b40      	ldr	r3, [pc, #256]	@ (80057f0 <__kernel_cos+0x138>)
 80056ee:	0006      	movs	r6, r0
 80056f0:	000f      	movs	r7, r1
 80056f2:	f7fc fa3b 	bl	8001b6c <__aeabi_dmul>
 80056f6:	4a3f      	ldr	r2, [pc, #252]	@ (80057f4 <__kernel_cos+0x13c>)
 80056f8:	9002      	str	r0, [sp, #8]
 80056fa:	9103      	str	r1, [sp, #12]
 80056fc:	4b3e      	ldr	r3, [pc, #248]	@ (80057f8 <__kernel_cos+0x140>)
 80056fe:	0030      	movs	r0, r6
 8005700:	0039      	movs	r1, r7
 8005702:	f7fc fa33 	bl	8001b6c <__aeabi_dmul>
 8005706:	4a3d      	ldr	r2, [pc, #244]	@ (80057fc <__kernel_cos+0x144>)
 8005708:	4b3d      	ldr	r3, [pc, #244]	@ (8005800 <__kernel_cos+0x148>)
 800570a:	f7fb fda1 	bl	8001250 <__aeabi_dadd>
 800570e:	0032      	movs	r2, r6
 8005710:	003b      	movs	r3, r7
 8005712:	f7fc fa2b 	bl	8001b6c <__aeabi_dmul>
 8005716:	4a3b      	ldr	r2, [pc, #236]	@ (8005804 <__kernel_cos+0x14c>)
 8005718:	4b3b      	ldr	r3, [pc, #236]	@ (8005808 <__kernel_cos+0x150>)
 800571a:	f7fc fcef 	bl	80020fc <__aeabi_dsub>
 800571e:	0032      	movs	r2, r6
 8005720:	003b      	movs	r3, r7
 8005722:	f7fc fa23 	bl	8001b6c <__aeabi_dmul>
 8005726:	4a39      	ldr	r2, [pc, #228]	@ (800580c <__kernel_cos+0x154>)
 8005728:	4b39      	ldr	r3, [pc, #228]	@ (8005810 <__kernel_cos+0x158>)
 800572a:	f7fb fd91 	bl	8001250 <__aeabi_dadd>
 800572e:	0032      	movs	r2, r6
 8005730:	003b      	movs	r3, r7
 8005732:	f7fc fa1b 	bl	8001b6c <__aeabi_dmul>
 8005736:	4a37      	ldr	r2, [pc, #220]	@ (8005814 <__kernel_cos+0x15c>)
 8005738:	4b37      	ldr	r3, [pc, #220]	@ (8005818 <__kernel_cos+0x160>)
 800573a:	f7fc fcdf 	bl	80020fc <__aeabi_dsub>
 800573e:	0032      	movs	r2, r6
 8005740:	003b      	movs	r3, r7
 8005742:	f7fc fa13 	bl	8001b6c <__aeabi_dmul>
 8005746:	4a35      	ldr	r2, [pc, #212]	@ (800581c <__kernel_cos+0x164>)
 8005748:	4b35      	ldr	r3, [pc, #212]	@ (8005820 <__kernel_cos+0x168>)
 800574a:	f7fb fd81 	bl	8001250 <__aeabi_dadd>
 800574e:	0032      	movs	r2, r6
 8005750:	003b      	movs	r3, r7
 8005752:	f7fc fa0b 	bl	8001b6c <__aeabi_dmul>
 8005756:	0032      	movs	r2, r6
 8005758:	003b      	movs	r3, r7
 800575a:	f7fc fa07 	bl	8001b6c <__aeabi_dmul>
 800575e:	9a04      	ldr	r2, [sp, #16]
 8005760:	9b05      	ldr	r3, [sp, #20]
 8005762:	0006      	movs	r6, r0
 8005764:	000f      	movs	r7, r1
 8005766:	0020      	movs	r0, r4
 8005768:	0029      	movs	r1, r5
 800576a:	f7fc f9ff 	bl	8001b6c <__aeabi_dmul>
 800576e:	0002      	movs	r2, r0
 8005770:	000b      	movs	r3, r1
 8005772:	0030      	movs	r0, r6
 8005774:	0039      	movs	r1, r7
 8005776:	f7fc fcc1 	bl	80020fc <__aeabi_dsub>
 800577a:	4b2a      	ldr	r3, [pc, #168]	@ (8005824 <__kernel_cos+0x16c>)
 800577c:	9a01      	ldr	r2, [sp, #4]
 800577e:	9004      	str	r0, [sp, #16]
 8005780:	9105      	str	r1, [sp, #20]
 8005782:	429a      	cmp	r2, r3
 8005784:	d80d      	bhi.n	80057a2 <__kernel_cos+0xea>
 8005786:	0002      	movs	r2, r0
 8005788:	000b      	movs	r3, r1
 800578a:	9802      	ldr	r0, [sp, #8]
 800578c:	9903      	ldr	r1, [sp, #12]
 800578e:	f7fc fcb5 	bl	80020fc <__aeabi_dsub>
 8005792:	0002      	movs	r2, r0
 8005794:	2000      	movs	r0, #0
 8005796:	000b      	movs	r3, r1
 8005798:	4923      	ldr	r1, [pc, #140]	@ (8005828 <__kernel_cos+0x170>)
 800579a:	f7fc fcaf 	bl	80020fc <__aeabi_dsub>
 800579e:	b007      	add	sp, #28
 80057a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057a2:	4b22      	ldr	r3, [pc, #136]	@ (800582c <__kernel_cos+0x174>)
 80057a4:	9a01      	ldr	r2, [sp, #4]
 80057a6:	2600      	movs	r6, #0
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d81b      	bhi.n	80057e4 <__kernel_cos+0x12c>
 80057ac:	0013      	movs	r3, r2
 80057ae:	4a20      	ldr	r2, [pc, #128]	@ (8005830 <__kernel_cos+0x178>)
 80057b0:	4694      	mov	ip, r2
 80057b2:	4463      	add	r3, ip
 80057b4:	001f      	movs	r7, r3
 80057b6:	0032      	movs	r2, r6
 80057b8:	003b      	movs	r3, r7
 80057ba:	2000      	movs	r0, #0
 80057bc:	491a      	ldr	r1, [pc, #104]	@ (8005828 <__kernel_cos+0x170>)
 80057be:	f7fc fc9d 	bl	80020fc <__aeabi_dsub>
 80057c2:	0032      	movs	r2, r6
 80057c4:	0004      	movs	r4, r0
 80057c6:	000d      	movs	r5, r1
 80057c8:	9802      	ldr	r0, [sp, #8]
 80057ca:	9903      	ldr	r1, [sp, #12]
 80057cc:	003b      	movs	r3, r7
 80057ce:	f7fc fc95 	bl	80020fc <__aeabi_dsub>
 80057d2:	9a04      	ldr	r2, [sp, #16]
 80057d4:	9b05      	ldr	r3, [sp, #20]
 80057d6:	f7fc fc91 	bl	80020fc <__aeabi_dsub>
 80057da:	0002      	movs	r2, r0
 80057dc:	000b      	movs	r3, r1
 80057de:	0020      	movs	r0, r4
 80057e0:	0029      	movs	r1, r5
 80057e2:	e7da      	b.n	800579a <__kernel_cos+0xe2>
 80057e4:	4f13      	ldr	r7, [pc, #76]	@ (8005834 <__kernel_cos+0x17c>)
 80057e6:	e7e6      	b.n	80057b6 <__kernel_cos+0xfe>
 80057e8:	2000      	movs	r0, #0
 80057ea:	490f      	ldr	r1, [pc, #60]	@ (8005828 <__kernel_cos+0x170>)
 80057ec:	e7d7      	b.n	800579e <__kernel_cos+0xe6>
 80057ee:	46c0      	nop			@ (mov r8, r8)
 80057f0:	3fe00000 	.word	0x3fe00000
 80057f4:	be8838d4 	.word	0xbe8838d4
 80057f8:	bda8fae9 	.word	0xbda8fae9
 80057fc:	bdb4b1c4 	.word	0xbdb4b1c4
 8005800:	3e21ee9e 	.word	0x3e21ee9e
 8005804:	809c52ad 	.word	0x809c52ad
 8005808:	3e927e4f 	.word	0x3e927e4f
 800580c:	19cb1590 	.word	0x19cb1590
 8005810:	3efa01a0 	.word	0x3efa01a0
 8005814:	16c15177 	.word	0x16c15177
 8005818:	3f56c16c 	.word	0x3f56c16c
 800581c:	5555554c 	.word	0x5555554c
 8005820:	3fa55555 	.word	0x3fa55555
 8005824:	3fd33332 	.word	0x3fd33332
 8005828:	3ff00000 	.word	0x3ff00000
 800582c:	3fe90000 	.word	0x3fe90000
 8005830:	ffe00000 	.word	0xffe00000
 8005834:	3fd20000 	.word	0x3fd20000

08005838 <__kernel_sin>:
 8005838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800583a:	b089      	sub	sp, #36	@ 0x24
 800583c:	9202      	str	r2, [sp, #8]
 800583e:	9303      	str	r3, [sp, #12]
 8005840:	22f9      	movs	r2, #249	@ 0xf9
 8005842:	004b      	lsls	r3, r1, #1
 8005844:	0006      	movs	r6, r0
 8005846:	000f      	movs	r7, r1
 8005848:	085b      	lsrs	r3, r3, #1
 800584a:	0592      	lsls	r2, r2, #22
 800584c:	4293      	cmp	r3, r2
 800584e:	d203      	bcs.n	8005858 <__kernel_sin+0x20>
 8005850:	f7fc fff0 	bl	8002834 <__aeabi_d2iz>
 8005854:	2800      	cmp	r0, #0
 8005856:	d04c      	beq.n	80058f2 <__kernel_sin+0xba>
 8005858:	0032      	movs	r2, r6
 800585a:	003b      	movs	r3, r7
 800585c:	0030      	movs	r0, r6
 800585e:	0039      	movs	r1, r7
 8005860:	f7fc f984 	bl	8001b6c <__aeabi_dmul>
 8005864:	0004      	movs	r4, r0
 8005866:	000d      	movs	r5, r1
 8005868:	0002      	movs	r2, r0
 800586a:	000b      	movs	r3, r1
 800586c:	0030      	movs	r0, r6
 800586e:	0039      	movs	r1, r7
 8005870:	f7fc f97c 	bl	8001b6c <__aeabi_dmul>
 8005874:	4a39      	ldr	r2, [pc, #228]	@ (800595c <__kernel_sin+0x124>)
 8005876:	9000      	str	r0, [sp, #0]
 8005878:	9101      	str	r1, [sp, #4]
 800587a:	4b39      	ldr	r3, [pc, #228]	@ (8005960 <__kernel_sin+0x128>)
 800587c:	0020      	movs	r0, r4
 800587e:	0029      	movs	r1, r5
 8005880:	f7fc f974 	bl	8001b6c <__aeabi_dmul>
 8005884:	4a37      	ldr	r2, [pc, #220]	@ (8005964 <__kernel_sin+0x12c>)
 8005886:	4b38      	ldr	r3, [pc, #224]	@ (8005968 <__kernel_sin+0x130>)
 8005888:	f7fc fc38 	bl	80020fc <__aeabi_dsub>
 800588c:	0022      	movs	r2, r4
 800588e:	002b      	movs	r3, r5
 8005890:	f7fc f96c 	bl	8001b6c <__aeabi_dmul>
 8005894:	4a35      	ldr	r2, [pc, #212]	@ (800596c <__kernel_sin+0x134>)
 8005896:	4b36      	ldr	r3, [pc, #216]	@ (8005970 <__kernel_sin+0x138>)
 8005898:	f7fb fcda 	bl	8001250 <__aeabi_dadd>
 800589c:	0022      	movs	r2, r4
 800589e:	002b      	movs	r3, r5
 80058a0:	f7fc f964 	bl	8001b6c <__aeabi_dmul>
 80058a4:	4a33      	ldr	r2, [pc, #204]	@ (8005974 <__kernel_sin+0x13c>)
 80058a6:	4b34      	ldr	r3, [pc, #208]	@ (8005978 <__kernel_sin+0x140>)
 80058a8:	f7fc fc28 	bl	80020fc <__aeabi_dsub>
 80058ac:	0022      	movs	r2, r4
 80058ae:	002b      	movs	r3, r5
 80058b0:	f7fc f95c 	bl	8001b6c <__aeabi_dmul>
 80058b4:	4b31      	ldr	r3, [pc, #196]	@ (800597c <__kernel_sin+0x144>)
 80058b6:	4a32      	ldr	r2, [pc, #200]	@ (8005980 <__kernel_sin+0x148>)
 80058b8:	f7fb fcca 	bl	8001250 <__aeabi_dadd>
 80058bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058be:	9004      	str	r0, [sp, #16]
 80058c0:	9105      	str	r1, [sp, #20]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d119      	bne.n	80058fa <__kernel_sin+0xc2>
 80058c6:	0002      	movs	r2, r0
 80058c8:	000b      	movs	r3, r1
 80058ca:	0020      	movs	r0, r4
 80058cc:	0029      	movs	r1, r5
 80058ce:	f7fc f94d 	bl	8001b6c <__aeabi_dmul>
 80058d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005984 <__kernel_sin+0x14c>)
 80058d4:	4b2c      	ldr	r3, [pc, #176]	@ (8005988 <__kernel_sin+0x150>)
 80058d6:	f7fc fc11 	bl	80020fc <__aeabi_dsub>
 80058da:	9a00      	ldr	r2, [sp, #0]
 80058dc:	9b01      	ldr	r3, [sp, #4]
 80058de:	f7fc f945 	bl	8001b6c <__aeabi_dmul>
 80058e2:	0002      	movs	r2, r0
 80058e4:	000b      	movs	r3, r1
 80058e6:	0030      	movs	r0, r6
 80058e8:	0039      	movs	r1, r7
 80058ea:	f7fb fcb1 	bl	8001250 <__aeabi_dadd>
 80058ee:	0006      	movs	r6, r0
 80058f0:	000f      	movs	r7, r1
 80058f2:	0030      	movs	r0, r6
 80058f4:	0039      	movs	r1, r7
 80058f6:	b009      	add	sp, #36	@ 0x24
 80058f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058fa:	2200      	movs	r2, #0
 80058fc:	9802      	ldr	r0, [sp, #8]
 80058fe:	9903      	ldr	r1, [sp, #12]
 8005900:	4b22      	ldr	r3, [pc, #136]	@ (800598c <__kernel_sin+0x154>)
 8005902:	f7fc f933 	bl	8001b6c <__aeabi_dmul>
 8005906:	9a04      	ldr	r2, [sp, #16]
 8005908:	9b05      	ldr	r3, [sp, #20]
 800590a:	9006      	str	r0, [sp, #24]
 800590c:	9107      	str	r1, [sp, #28]
 800590e:	9800      	ldr	r0, [sp, #0]
 8005910:	9901      	ldr	r1, [sp, #4]
 8005912:	f7fc f92b 	bl	8001b6c <__aeabi_dmul>
 8005916:	0002      	movs	r2, r0
 8005918:	000b      	movs	r3, r1
 800591a:	9806      	ldr	r0, [sp, #24]
 800591c:	9907      	ldr	r1, [sp, #28]
 800591e:	f7fc fbed 	bl	80020fc <__aeabi_dsub>
 8005922:	0022      	movs	r2, r4
 8005924:	002b      	movs	r3, r5
 8005926:	f7fc f921 	bl	8001b6c <__aeabi_dmul>
 800592a:	9a02      	ldr	r2, [sp, #8]
 800592c:	9b03      	ldr	r3, [sp, #12]
 800592e:	f7fc fbe5 	bl	80020fc <__aeabi_dsub>
 8005932:	4a14      	ldr	r2, [pc, #80]	@ (8005984 <__kernel_sin+0x14c>)
 8005934:	0004      	movs	r4, r0
 8005936:	000d      	movs	r5, r1
 8005938:	9800      	ldr	r0, [sp, #0]
 800593a:	9901      	ldr	r1, [sp, #4]
 800593c:	4b12      	ldr	r3, [pc, #72]	@ (8005988 <__kernel_sin+0x150>)
 800593e:	f7fc f915 	bl	8001b6c <__aeabi_dmul>
 8005942:	0002      	movs	r2, r0
 8005944:	000b      	movs	r3, r1
 8005946:	0020      	movs	r0, r4
 8005948:	0029      	movs	r1, r5
 800594a:	f7fb fc81 	bl	8001250 <__aeabi_dadd>
 800594e:	0002      	movs	r2, r0
 8005950:	000b      	movs	r3, r1
 8005952:	0030      	movs	r0, r6
 8005954:	0039      	movs	r1, r7
 8005956:	f7fc fbd1 	bl	80020fc <__aeabi_dsub>
 800595a:	e7c8      	b.n	80058ee <__kernel_sin+0xb6>
 800595c:	5acfd57c 	.word	0x5acfd57c
 8005960:	3de5d93a 	.word	0x3de5d93a
 8005964:	8a2b9ceb 	.word	0x8a2b9ceb
 8005968:	3e5ae5e6 	.word	0x3e5ae5e6
 800596c:	57b1fe7d 	.word	0x57b1fe7d
 8005970:	3ec71de3 	.word	0x3ec71de3
 8005974:	19c161d5 	.word	0x19c161d5
 8005978:	3f2a01a0 	.word	0x3f2a01a0
 800597c:	3f811111 	.word	0x3f811111
 8005980:	1110f8a6 	.word	0x1110f8a6
 8005984:	55555549 	.word	0x55555549
 8005988:	3fc55555 	.word	0x3fc55555
 800598c:	3fe00000 	.word	0x3fe00000

08005990 <__ieee754_rem_pio2>:
 8005990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005992:	4baf      	ldr	r3, [pc, #700]	@ (8005c50 <__ieee754_rem_pio2+0x2c0>)
 8005994:	b095      	sub	sp, #84	@ 0x54
 8005996:	004d      	lsls	r5, r1, #1
 8005998:	0017      	movs	r7, r2
 800599a:	910d      	str	r1, [sp, #52]	@ 0x34
 800599c:	086d      	lsrs	r5, r5, #1
 800599e:	429d      	cmp	r5, r3
 80059a0:	d807      	bhi.n	80059b2 <__ieee754_rem_pio2+0x22>
 80059a2:	6010      	str	r0, [r2, #0]
 80059a4:	6051      	str	r1, [r2, #4]
 80059a6:	2300      	movs	r3, #0
 80059a8:	2200      	movs	r2, #0
 80059aa:	60ba      	str	r2, [r7, #8]
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	2300      	movs	r3, #0
 80059b0:	e024      	b.n	80059fc <__ieee754_rem_pio2+0x6c>
 80059b2:	4ba8      	ldr	r3, [pc, #672]	@ (8005c54 <__ieee754_rem_pio2+0x2c4>)
 80059b4:	429d      	cmp	r5, r3
 80059b6:	d900      	bls.n	80059ba <__ieee754_rem_pio2+0x2a>
 80059b8:	e072      	b.n	8005aa0 <__ieee754_rem_pio2+0x110>
 80059ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80059bc:	4ca6      	ldr	r4, [pc, #664]	@ (8005c58 <__ieee754_rem_pio2+0x2c8>)
 80059be:	4aa7      	ldr	r2, [pc, #668]	@ (8005c5c <__ieee754_rem_pio2+0x2cc>)
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	dd37      	ble.n	8005a34 <__ieee754_rem_pio2+0xa4>
 80059c4:	4ba4      	ldr	r3, [pc, #656]	@ (8005c58 <__ieee754_rem_pio2+0x2c8>)
 80059c6:	f7fc fb99 	bl	80020fc <__aeabi_dsub>
 80059ca:	9002      	str	r0, [sp, #8]
 80059cc:	9103      	str	r1, [sp, #12]
 80059ce:	42a5      	cmp	r5, r4
 80059d0:	d018      	beq.n	8005a04 <__ieee754_rem_pio2+0x74>
 80059d2:	4aa3      	ldr	r2, [pc, #652]	@ (8005c60 <__ieee754_rem_pio2+0x2d0>)
 80059d4:	4ba3      	ldr	r3, [pc, #652]	@ (8005c64 <__ieee754_rem_pio2+0x2d4>)
 80059d6:	f7fc fb91 	bl	80020fc <__aeabi_dsub>
 80059da:	0002      	movs	r2, r0
 80059dc:	000b      	movs	r3, r1
 80059de:	0004      	movs	r4, r0
 80059e0:	000d      	movs	r5, r1
 80059e2:	9802      	ldr	r0, [sp, #8]
 80059e4:	9903      	ldr	r1, [sp, #12]
 80059e6:	f7fc fb89 	bl	80020fc <__aeabi_dsub>
 80059ea:	4a9d      	ldr	r2, [pc, #628]	@ (8005c60 <__ieee754_rem_pio2+0x2d0>)
 80059ec:	4b9d      	ldr	r3, [pc, #628]	@ (8005c64 <__ieee754_rem_pio2+0x2d4>)
 80059ee:	f7fc fb85 	bl	80020fc <__aeabi_dsub>
 80059f2:	2301      	movs	r3, #1
 80059f4:	603c      	str	r4, [r7, #0]
 80059f6:	607d      	str	r5, [r7, #4]
 80059f8:	60b8      	str	r0, [r7, #8]
 80059fa:	60f9      	str	r1, [r7, #12]
 80059fc:	9302      	str	r3, [sp, #8]
 80059fe:	9802      	ldr	r0, [sp, #8]
 8005a00:	b015      	add	sp, #84	@ 0x54
 8005a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a04:	22d3      	movs	r2, #211	@ 0xd3
 8005a06:	9802      	ldr	r0, [sp, #8]
 8005a08:	9903      	ldr	r1, [sp, #12]
 8005a0a:	4b96      	ldr	r3, [pc, #600]	@ (8005c64 <__ieee754_rem_pio2+0x2d4>)
 8005a0c:	0552      	lsls	r2, r2, #21
 8005a0e:	f7fc fb75 	bl	80020fc <__aeabi_dsub>
 8005a12:	4a95      	ldr	r2, [pc, #596]	@ (8005c68 <__ieee754_rem_pio2+0x2d8>)
 8005a14:	4b95      	ldr	r3, [pc, #596]	@ (8005c6c <__ieee754_rem_pio2+0x2dc>)
 8005a16:	9002      	str	r0, [sp, #8]
 8005a18:	9103      	str	r1, [sp, #12]
 8005a1a:	f7fc fb6f 	bl	80020fc <__aeabi_dsub>
 8005a1e:	0002      	movs	r2, r0
 8005a20:	000b      	movs	r3, r1
 8005a22:	0004      	movs	r4, r0
 8005a24:	000d      	movs	r5, r1
 8005a26:	9802      	ldr	r0, [sp, #8]
 8005a28:	9903      	ldr	r1, [sp, #12]
 8005a2a:	f7fc fb67 	bl	80020fc <__aeabi_dsub>
 8005a2e:	4a8e      	ldr	r2, [pc, #568]	@ (8005c68 <__ieee754_rem_pio2+0x2d8>)
 8005a30:	4b8e      	ldr	r3, [pc, #568]	@ (8005c6c <__ieee754_rem_pio2+0x2dc>)
 8005a32:	e7dc      	b.n	80059ee <__ieee754_rem_pio2+0x5e>
 8005a34:	4b88      	ldr	r3, [pc, #544]	@ (8005c58 <__ieee754_rem_pio2+0x2c8>)
 8005a36:	f7fb fc0b 	bl	8001250 <__aeabi_dadd>
 8005a3a:	9002      	str	r0, [sp, #8]
 8005a3c:	9103      	str	r1, [sp, #12]
 8005a3e:	42a5      	cmp	r5, r4
 8005a40:	d016      	beq.n	8005a70 <__ieee754_rem_pio2+0xe0>
 8005a42:	4a87      	ldr	r2, [pc, #540]	@ (8005c60 <__ieee754_rem_pio2+0x2d0>)
 8005a44:	4b87      	ldr	r3, [pc, #540]	@ (8005c64 <__ieee754_rem_pio2+0x2d4>)
 8005a46:	f7fb fc03 	bl	8001250 <__aeabi_dadd>
 8005a4a:	0002      	movs	r2, r0
 8005a4c:	000b      	movs	r3, r1
 8005a4e:	0004      	movs	r4, r0
 8005a50:	000d      	movs	r5, r1
 8005a52:	9802      	ldr	r0, [sp, #8]
 8005a54:	9903      	ldr	r1, [sp, #12]
 8005a56:	f7fc fb51 	bl	80020fc <__aeabi_dsub>
 8005a5a:	4a81      	ldr	r2, [pc, #516]	@ (8005c60 <__ieee754_rem_pio2+0x2d0>)
 8005a5c:	4b81      	ldr	r3, [pc, #516]	@ (8005c64 <__ieee754_rem_pio2+0x2d4>)
 8005a5e:	f7fb fbf7 	bl	8001250 <__aeabi_dadd>
 8005a62:	2301      	movs	r3, #1
 8005a64:	603c      	str	r4, [r7, #0]
 8005a66:	607d      	str	r5, [r7, #4]
 8005a68:	60b8      	str	r0, [r7, #8]
 8005a6a:	60f9      	str	r1, [r7, #12]
 8005a6c:	425b      	negs	r3, r3
 8005a6e:	e7c5      	b.n	80059fc <__ieee754_rem_pio2+0x6c>
 8005a70:	22d3      	movs	r2, #211	@ 0xd3
 8005a72:	9802      	ldr	r0, [sp, #8]
 8005a74:	9903      	ldr	r1, [sp, #12]
 8005a76:	4b7b      	ldr	r3, [pc, #492]	@ (8005c64 <__ieee754_rem_pio2+0x2d4>)
 8005a78:	0552      	lsls	r2, r2, #21
 8005a7a:	f7fb fbe9 	bl	8001250 <__aeabi_dadd>
 8005a7e:	4a7a      	ldr	r2, [pc, #488]	@ (8005c68 <__ieee754_rem_pio2+0x2d8>)
 8005a80:	4b7a      	ldr	r3, [pc, #488]	@ (8005c6c <__ieee754_rem_pio2+0x2dc>)
 8005a82:	9002      	str	r0, [sp, #8]
 8005a84:	9103      	str	r1, [sp, #12]
 8005a86:	f7fb fbe3 	bl	8001250 <__aeabi_dadd>
 8005a8a:	0002      	movs	r2, r0
 8005a8c:	000b      	movs	r3, r1
 8005a8e:	0004      	movs	r4, r0
 8005a90:	000d      	movs	r5, r1
 8005a92:	9802      	ldr	r0, [sp, #8]
 8005a94:	9903      	ldr	r1, [sp, #12]
 8005a96:	f7fc fb31 	bl	80020fc <__aeabi_dsub>
 8005a9a:	4a73      	ldr	r2, [pc, #460]	@ (8005c68 <__ieee754_rem_pio2+0x2d8>)
 8005a9c:	4b73      	ldr	r3, [pc, #460]	@ (8005c6c <__ieee754_rem_pio2+0x2dc>)
 8005a9e:	e7de      	b.n	8005a5e <__ieee754_rem_pio2+0xce>
 8005aa0:	4b73      	ldr	r3, [pc, #460]	@ (8005c70 <__ieee754_rem_pio2+0x2e0>)
 8005aa2:	429d      	cmp	r5, r3
 8005aa4:	d900      	bls.n	8005aa8 <__ieee754_rem_pio2+0x118>
 8005aa6:	e0c6      	b.n	8005c36 <__ieee754_rem_pio2+0x2a6>
 8005aa8:	f000 f94e 	bl	8005d48 <fabs>
 8005aac:	4a71      	ldr	r2, [pc, #452]	@ (8005c74 <__ieee754_rem_pio2+0x2e4>)
 8005aae:	4b72      	ldr	r3, [pc, #456]	@ (8005c78 <__ieee754_rem_pio2+0x2e8>)
 8005ab0:	9004      	str	r0, [sp, #16]
 8005ab2:	9105      	str	r1, [sp, #20]
 8005ab4:	f7fc f85a 	bl	8001b6c <__aeabi_dmul>
 8005ab8:	2200      	movs	r2, #0
 8005aba:	4b70      	ldr	r3, [pc, #448]	@ (8005c7c <__ieee754_rem_pio2+0x2ec>)
 8005abc:	f7fb fbc8 	bl	8001250 <__aeabi_dadd>
 8005ac0:	f7fc feb8 	bl	8002834 <__aeabi_d2iz>
 8005ac4:	9002      	str	r0, [sp, #8]
 8005ac6:	f7fc fef1 	bl	80028ac <__aeabi_i2d>
 8005aca:	4a64      	ldr	r2, [pc, #400]	@ (8005c5c <__ieee754_rem_pio2+0x2cc>)
 8005acc:	4b62      	ldr	r3, [pc, #392]	@ (8005c58 <__ieee754_rem_pio2+0x2c8>)
 8005ace:	9008      	str	r0, [sp, #32]
 8005ad0:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ad2:	f7fc f84b 	bl	8001b6c <__aeabi_dmul>
 8005ad6:	0002      	movs	r2, r0
 8005ad8:	000b      	movs	r3, r1
 8005ada:	9804      	ldr	r0, [sp, #16]
 8005adc:	9905      	ldr	r1, [sp, #20]
 8005ade:	f7fc fb0d 	bl	80020fc <__aeabi_dsub>
 8005ae2:	4b60      	ldr	r3, [pc, #384]	@ (8005c64 <__ieee754_rem_pio2+0x2d4>)
 8005ae4:	9004      	str	r0, [sp, #16]
 8005ae6:	9105      	str	r1, [sp, #20]
 8005ae8:	9808      	ldr	r0, [sp, #32]
 8005aea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005aec:	4a5c      	ldr	r2, [pc, #368]	@ (8005c60 <__ieee754_rem_pio2+0x2d0>)
 8005aee:	f7fc f83d 	bl	8001b6c <__aeabi_dmul>
 8005af2:	9b02      	ldr	r3, [sp, #8]
 8005af4:	9006      	str	r0, [sp, #24]
 8005af6:	9107      	str	r1, [sp, #28]
 8005af8:	2b1f      	cmp	r3, #31
 8005afa:	dc0d      	bgt.n	8005b18 <__ieee754_rem_pio2+0x188>
 8005afc:	9a02      	ldr	r2, [sp, #8]
 8005afe:	4b60      	ldr	r3, [pc, #384]	@ (8005c80 <__ieee754_rem_pio2+0x2f0>)
 8005b00:	3a01      	subs	r2, #1
 8005b02:	0092      	lsls	r2, r2, #2
 8005b04:	58d3      	ldr	r3, [r2, r3]
 8005b06:	42ab      	cmp	r3, r5
 8005b08:	d006      	beq.n	8005b18 <__ieee754_rem_pio2+0x188>
 8005b0a:	0002      	movs	r2, r0
 8005b0c:	000b      	movs	r3, r1
 8005b0e:	9804      	ldr	r0, [sp, #16]
 8005b10:	9905      	ldr	r1, [sp, #20]
 8005b12:	f7fc faf3 	bl	80020fc <__aeabi_dsub>
 8005b16:	e00b      	b.n	8005b30 <__ieee754_rem_pio2+0x1a0>
 8005b18:	9a06      	ldr	r2, [sp, #24]
 8005b1a:	9b07      	ldr	r3, [sp, #28]
 8005b1c:	9804      	ldr	r0, [sp, #16]
 8005b1e:	9905      	ldr	r1, [sp, #20]
 8005b20:	f7fc faec 	bl	80020fc <__aeabi_dsub>
 8005b24:	004b      	lsls	r3, r1, #1
 8005b26:	152e      	asrs	r6, r5, #20
 8005b28:	0d5b      	lsrs	r3, r3, #21
 8005b2a:	1af3      	subs	r3, r6, r3
 8005b2c:	2b10      	cmp	r3, #16
 8005b2e:	dc02      	bgt.n	8005b36 <__ieee754_rem_pio2+0x1a6>
 8005b30:	6038      	str	r0, [r7, #0]
 8005b32:	6079      	str	r1, [r7, #4]
 8005b34:	e039      	b.n	8005baa <__ieee754_rem_pio2+0x21a>
 8005b36:	22d3      	movs	r2, #211	@ 0xd3
 8005b38:	9808      	ldr	r0, [sp, #32]
 8005b3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b3c:	4b49      	ldr	r3, [pc, #292]	@ (8005c64 <__ieee754_rem_pio2+0x2d4>)
 8005b3e:	0552      	lsls	r2, r2, #21
 8005b40:	f7fc f814 	bl	8001b6c <__aeabi_dmul>
 8005b44:	0004      	movs	r4, r0
 8005b46:	000d      	movs	r5, r1
 8005b48:	0002      	movs	r2, r0
 8005b4a:	000b      	movs	r3, r1
 8005b4c:	9804      	ldr	r0, [sp, #16]
 8005b4e:	9905      	ldr	r1, [sp, #20]
 8005b50:	f7fc fad4 	bl	80020fc <__aeabi_dsub>
 8005b54:	0002      	movs	r2, r0
 8005b56:	000b      	movs	r3, r1
 8005b58:	900a      	str	r0, [sp, #40]	@ 0x28
 8005b5a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005b5c:	9804      	ldr	r0, [sp, #16]
 8005b5e:	9905      	ldr	r1, [sp, #20]
 8005b60:	f7fc facc 	bl	80020fc <__aeabi_dsub>
 8005b64:	0022      	movs	r2, r4
 8005b66:	002b      	movs	r3, r5
 8005b68:	f7fc fac8 	bl	80020fc <__aeabi_dsub>
 8005b6c:	0004      	movs	r4, r0
 8005b6e:	000d      	movs	r5, r1
 8005b70:	9808      	ldr	r0, [sp, #32]
 8005b72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b74:	4a3c      	ldr	r2, [pc, #240]	@ (8005c68 <__ieee754_rem_pio2+0x2d8>)
 8005b76:	4b3d      	ldr	r3, [pc, #244]	@ (8005c6c <__ieee754_rem_pio2+0x2dc>)
 8005b78:	f7fb fff8 	bl	8001b6c <__aeabi_dmul>
 8005b7c:	0022      	movs	r2, r4
 8005b7e:	002b      	movs	r3, r5
 8005b80:	f7fc fabc 	bl	80020fc <__aeabi_dsub>
 8005b84:	000b      	movs	r3, r1
 8005b86:	0002      	movs	r2, r0
 8005b88:	9006      	str	r0, [sp, #24]
 8005b8a:	9107      	str	r1, [sp, #28]
 8005b8c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005b8e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b90:	f7fc fab4 	bl	80020fc <__aeabi_dsub>
 8005b94:	004b      	lsls	r3, r1, #1
 8005b96:	0d5b      	lsrs	r3, r3, #21
 8005b98:	1af3      	subs	r3, r6, r3
 8005b9a:	2b31      	cmp	r3, #49	@ 0x31
 8005b9c:	dc21      	bgt.n	8005be2 <__ieee754_rem_pio2+0x252>
 8005b9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ba0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005ba2:	6038      	str	r0, [r7, #0]
 8005ba4:	6079      	str	r1, [r7, #4]
 8005ba6:	9304      	str	r3, [sp, #16]
 8005ba8:	9405      	str	r4, [sp, #20]
 8005baa:	683c      	ldr	r4, [r7, #0]
 8005bac:	687d      	ldr	r5, [r7, #4]
 8005bae:	9804      	ldr	r0, [sp, #16]
 8005bb0:	9905      	ldr	r1, [sp, #20]
 8005bb2:	0022      	movs	r2, r4
 8005bb4:	002b      	movs	r3, r5
 8005bb6:	f7fc faa1 	bl	80020fc <__aeabi_dsub>
 8005bba:	9a06      	ldr	r2, [sp, #24]
 8005bbc:	9b07      	ldr	r3, [sp, #28]
 8005bbe:	f7fc fa9d 	bl	80020fc <__aeabi_dsub>
 8005bc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bc4:	60b8      	str	r0, [r7, #8]
 8005bc6:	60f9      	str	r1, [r7, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	db00      	blt.n	8005bce <__ieee754_rem_pio2+0x23e>
 8005bcc:	e717      	b.n	80059fe <__ieee754_rem_pio2+0x6e>
 8005bce:	2280      	movs	r2, #128	@ 0x80
 8005bd0:	0612      	lsls	r2, r2, #24
 8005bd2:	18ab      	adds	r3, r5, r2
 8005bd4:	607b      	str	r3, [r7, #4]
 8005bd6:	188b      	adds	r3, r1, r2
 8005bd8:	603c      	str	r4, [r7, #0]
 8005bda:	60b8      	str	r0, [r7, #8]
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	9b02      	ldr	r3, [sp, #8]
 8005be0:	e744      	b.n	8005a6c <__ieee754_rem_pio2+0xdc>
 8005be2:	22b8      	movs	r2, #184	@ 0xb8
 8005be4:	9808      	ldr	r0, [sp, #32]
 8005be6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005be8:	4b20      	ldr	r3, [pc, #128]	@ (8005c6c <__ieee754_rem_pio2+0x2dc>)
 8005bea:	0592      	lsls	r2, r2, #22
 8005bec:	f7fb ffbe 	bl	8001b6c <__aeabi_dmul>
 8005bf0:	0004      	movs	r4, r0
 8005bf2:	000d      	movs	r5, r1
 8005bf4:	0002      	movs	r2, r0
 8005bf6:	000b      	movs	r3, r1
 8005bf8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005bfa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005bfc:	f7fc fa7e 	bl	80020fc <__aeabi_dsub>
 8005c00:	0002      	movs	r2, r0
 8005c02:	000b      	movs	r3, r1
 8005c04:	9004      	str	r0, [sp, #16]
 8005c06:	9105      	str	r1, [sp, #20]
 8005c08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005c0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c0c:	f7fc fa76 	bl	80020fc <__aeabi_dsub>
 8005c10:	0022      	movs	r2, r4
 8005c12:	002b      	movs	r3, r5
 8005c14:	f7fc fa72 	bl	80020fc <__aeabi_dsub>
 8005c18:	0004      	movs	r4, r0
 8005c1a:	000d      	movs	r5, r1
 8005c1c:	9808      	ldr	r0, [sp, #32]
 8005c1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c20:	4a18      	ldr	r2, [pc, #96]	@ (8005c84 <__ieee754_rem_pio2+0x2f4>)
 8005c22:	4b19      	ldr	r3, [pc, #100]	@ (8005c88 <__ieee754_rem_pio2+0x2f8>)
 8005c24:	f7fb ffa2 	bl	8001b6c <__aeabi_dmul>
 8005c28:	0022      	movs	r2, r4
 8005c2a:	002b      	movs	r3, r5
 8005c2c:	f7fc fa66 	bl	80020fc <__aeabi_dsub>
 8005c30:	9006      	str	r0, [sp, #24]
 8005c32:	9107      	str	r1, [sp, #28]
 8005c34:	e769      	b.n	8005b0a <__ieee754_rem_pio2+0x17a>
 8005c36:	4b15      	ldr	r3, [pc, #84]	@ (8005c8c <__ieee754_rem_pio2+0x2fc>)
 8005c38:	429d      	cmp	r5, r3
 8005c3a:	d929      	bls.n	8005c90 <__ieee754_rem_pio2+0x300>
 8005c3c:	0002      	movs	r2, r0
 8005c3e:	000b      	movs	r3, r1
 8005c40:	f7fc fa5c 	bl	80020fc <__aeabi_dsub>
 8005c44:	60b8      	str	r0, [r7, #8]
 8005c46:	60f9      	str	r1, [r7, #12]
 8005c48:	6038      	str	r0, [r7, #0]
 8005c4a:	6079      	str	r1, [r7, #4]
 8005c4c:	e6af      	b.n	80059ae <__ieee754_rem_pio2+0x1e>
 8005c4e:	46c0      	nop			@ (mov r8, r8)
 8005c50:	3fe921fb 	.word	0x3fe921fb
 8005c54:	4002d97b 	.word	0x4002d97b
 8005c58:	3ff921fb 	.word	0x3ff921fb
 8005c5c:	54400000 	.word	0x54400000
 8005c60:	1a626331 	.word	0x1a626331
 8005c64:	3dd0b461 	.word	0x3dd0b461
 8005c68:	2e037073 	.word	0x2e037073
 8005c6c:	3ba3198a 	.word	0x3ba3198a
 8005c70:	413921fb 	.word	0x413921fb
 8005c74:	6dc9c883 	.word	0x6dc9c883
 8005c78:	3fe45f30 	.word	0x3fe45f30
 8005c7c:	3fe00000 	.word	0x3fe00000
 8005c80:	080066e4 	.word	0x080066e4
 8005c84:	252049c1 	.word	0x252049c1
 8005c88:	397b839a 	.word	0x397b839a
 8005c8c:	7fefffff 	.word	0x7fefffff
 8005c90:	4b2a      	ldr	r3, [pc, #168]	@ (8005d3c <__ieee754_rem_pio2+0x3ac>)
 8005c92:	152e      	asrs	r6, r5, #20
 8005c94:	18f6      	adds	r6, r6, r3
 8005c96:	0531      	lsls	r1, r6, #20
 8005c98:	1a6b      	subs	r3, r5, r1
 8005c9a:	0019      	movs	r1, r3
 8005c9c:	001d      	movs	r5, r3
 8005c9e:	0004      	movs	r4, r0
 8005ca0:	f7fc fdc8 	bl	8002834 <__aeabi_d2iz>
 8005ca4:	f7fc fe02 	bl	80028ac <__aeabi_i2d>
 8005ca8:	0002      	movs	r2, r0
 8005caa:	000b      	movs	r3, r1
 8005cac:	0020      	movs	r0, r4
 8005cae:	0029      	movs	r1, r5
 8005cb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8005cb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005cb4:	f7fc fa22 	bl	80020fc <__aeabi_dsub>
 8005cb8:	2200      	movs	r2, #0
 8005cba:	4b21      	ldr	r3, [pc, #132]	@ (8005d40 <__ieee754_rem_pio2+0x3b0>)
 8005cbc:	f7fb ff56 	bl	8001b6c <__aeabi_dmul>
 8005cc0:	000d      	movs	r5, r1
 8005cc2:	0004      	movs	r4, r0
 8005cc4:	f7fc fdb6 	bl	8002834 <__aeabi_d2iz>
 8005cc8:	f7fc fdf0 	bl	80028ac <__aeabi_i2d>
 8005ccc:	0002      	movs	r2, r0
 8005cce:	000b      	movs	r3, r1
 8005cd0:	0020      	movs	r0, r4
 8005cd2:	0029      	movs	r1, r5
 8005cd4:	9210      	str	r2, [sp, #64]	@ 0x40
 8005cd6:	9311      	str	r3, [sp, #68]	@ 0x44
 8005cd8:	f7fc fa10 	bl	80020fc <__aeabi_dsub>
 8005cdc:	2200      	movs	r2, #0
 8005cde:	4b18      	ldr	r3, [pc, #96]	@ (8005d40 <__ieee754_rem_pio2+0x3b0>)
 8005ce0:	f7fb ff44 	bl	8001b6c <__aeabi_dmul>
 8005ce4:	2503      	movs	r5, #3
 8005ce6:	9012      	str	r0, [sp, #72]	@ 0x48
 8005ce8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005cea:	ac0e      	add	r4, sp, #56	@ 0x38
 8005cec:	2200      	movs	r2, #0
 8005cee:	6920      	ldr	r0, [r4, #16]
 8005cf0:	6961      	ldr	r1, [r4, #20]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	9502      	str	r5, [sp, #8]
 8005cf6:	3c08      	subs	r4, #8
 8005cf8:	3d01      	subs	r5, #1
 8005cfa:	f7fa fb89 	bl	8000410 <__aeabi_dcmpeq>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d1f4      	bne.n	8005cec <__ieee754_rem_pio2+0x35c>
 8005d02:	4b10      	ldr	r3, [pc, #64]	@ (8005d44 <__ieee754_rem_pio2+0x3b4>)
 8005d04:	0032      	movs	r2, r6
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	2302      	movs	r3, #2
 8005d0a:	0039      	movs	r1, r7
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	a80e      	add	r0, sp, #56	@ 0x38
 8005d10:	9b02      	ldr	r3, [sp, #8]
 8005d12:	f000 f81d 	bl	8005d50 <__kernel_rem_pio2>
 8005d16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d18:	9002      	str	r0, [sp, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	db00      	blt.n	8005d20 <__ieee754_rem_pio2+0x390>
 8005d1e:	e66e      	b.n	80059fe <__ieee754_rem_pio2+0x6e>
 8005d20:	2080      	movs	r0, #128	@ 0x80
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	0600      	lsls	r0, r0, #24
 8005d28:	180b      	adds	r3, r1, r0
 8005d2a:	68f9      	ldr	r1, [r7, #12]
 8005d2c:	603a      	str	r2, [r7, #0]
 8005d2e:	607b      	str	r3, [r7, #4]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	180b      	adds	r3, r1, r0
 8005d34:	60ba      	str	r2, [r7, #8]
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	e751      	b.n	8005bde <__ieee754_rem_pio2+0x24e>
 8005d3a:	46c0      	nop			@ (mov r8, r8)
 8005d3c:	fffffbea 	.word	0xfffffbea
 8005d40:	41700000 	.word	0x41700000
 8005d44:	08006764 	.word	0x08006764

08005d48 <fabs>:
 8005d48:	0049      	lsls	r1, r1, #1
 8005d4a:	084b      	lsrs	r3, r1, #1
 8005d4c:	0019      	movs	r1, r3
 8005d4e:	4770      	bx	lr

08005d50 <__kernel_rem_pio2>:
 8005d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d52:	4cc6      	ldr	r4, [pc, #792]	@ (800606c <__kernel_rem_pio2+0x31c>)
 8005d54:	44a5      	add	sp, r4
 8005d56:	0014      	movs	r4, r2
 8005d58:	9aa4      	ldr	r2, [sp, #656]	@ 0x290
 8005d5a:	930e      	str	r3, [sp, #56]	@ 0x38
 8005d5c:	4bc4      	ldr	r3, [pc, #784]	@ (8006070 <__kernel_rem_pio2+0x320>)
 8005d5e:	0092      	lsls	r2, r2, #2
 8005d60:	58d3      	ldr	r3, [r2, r3]
 8005d62:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005d64:	9308      	str	r3, [sp, #32]
 8005d66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d68:	9105      	str	r1, [sp, #20]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	930d      	str	r3, [sp, #52]	@ 0x34
 8005d6e:	2300      	movs	r3, #0
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	0023      	movs	r3, r4
 8005d74:	3314      	adds	r3, #20
 8005d76:	db04      	blt.n	8005d82 <__kernel_rem_pio2+0x32>
 8005d78:	2118      	movs	r1, #24
 8005d7a:	1ee0      	subs	r0, r4, #3
 8005d7c:	f7fa fa4c 	bl	8000218 <__divsi3>
 8005d80:	9000      	str	r0, [sp, #0]
 8005d82:	9b00      	ldr	r3, [sp, #0]
 8005d84:	ae26      	add	r6, sp, #152	@ 0x98
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	2318      	movs	r3, #24
 8005d8a:	425b      	negs	r3, r3
 8005d8c:	4353      	muls	r3, r2
 8005d8e:	191b      	adds	r3, r3, r4
 8005d90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005d92:	9302      	str	r3, [sp, #8]
 8005d94:	9b00      	ldr	r3, [sp, #0]
 8005d96:	1a9d      	subs	r5, r3, r2
 8005d98:	002c      	movs	r4, r5
 8005d9a:	9b08      	ldr	r3, [sp, #32]
 8005d9c:	189f      	adds	r7, r3, r2
 8005d9e:	1b63      	subs	r3, r4, r5
 8005da0:	429f      	cmp	r7, r3
 8005da2:	da0f      	bge.n	8005dc4 <__kernel_rem_pio2+0x74>
 8005da4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8005da6:	af76      	add	r7, sp, #472	@ 0x1d8
 8005da8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005daa:	9a08      	ldr	r2, [sp, #32]
 8005dac:	1aeb      	subs	r3, r5, r3
 8005dae:	429a      	cmp	r2, r3
 8005db0:	db30      	blt.n	8005e14 <__kernel_rem_pio2+0xc4>
 8005db2:	00eb      	lsls	r3, r5, #3
 8005db4:	aa26      	add	r2, sp, #152	@ 0x98
 8005db6:	2400      	movs	r4, #0
 8005db8:	189e      	adds	r6, r3, r2
 8005dba:	2300      	movs	r3, #0
 8005dbc:	9306      	str	r3, [sp, #24]
 8005dbe:	9407      	str	r4, [sp, #28]
 8005dc0:	2400      	movs	r4, #0
 8005dc2:	e01e      	b.n	8005e02 <__kernel_rem_pio2+0xb2>
 8005dc4:	2c00      	cmp	r4, #0
 8005dc6:	db07      	blt.n	8005dd8 <__kernel_rem_pio2+0x88>
 8005dc8:	9aa5      	ldr	r2, [sp, #660]	@ 0x294
 8005dca:	00a3      	lsls	r3, r4, #2
 8005dcc:	58d0      	ldr	r0, [r2, r3]
 8005dce:	f7fc fd6d 	bl	80028ac <__aeabi_i2d>
 8005dd2:	c603      	stmia	r6!, {r0, r1}
 8005dd4:	3401      	adds	r4, #1
 8005dd6:	e7e2      	b.n	8005d9e <__kernel_rem_pio2+0x4e>
 8005dd8:	2000      	movs	r0, #0
 8005dda:	2100      	movs	r1, #0
 8005ddc:	e7f9      	b.n	8005dd2 <__kernel_rem_pio2+0x82>
 8005dde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005de0:	00e1      	lsls	r1, r4, #3
 8005de2:	1859      	adds	r1, r3, r1
 8005de4:	6808      	ldr	r0, [r1, #0]
 8005de6:	6849      	ldr	r1, [r1, #4]
 8005de8:	6832      	ldr	r2, [r6, #0]
 8005dea:	6873      	ldr	r3, [r6, #4]
 8005dec:	f7fb febe 	bl	8001b6c <__aeabi_dmul>
 8005df0:	0002      	movs	r2, r0
 8005df2:	000b      	movs	r3, r1
 8005df4:	9806      	ldr	r0, [sp, #24]
 8005df6:	9907      	ldr	r1, [sp, #28]
 8005df8:	f7fb fa2a 	bl	8001250 <__aeabi_dadd>
 8005dfc:	9006      	str	r0, [sp, #24]
 8005dfe:	9107      	str	r1, [sp, #28]
 8005e00:	3401      	adds	r4, #1
 8005e02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e04:	3e08      	subs	r6, #8
 8005e06:	429c      	cmp	r4, r3
 8005e08:	dde9      	ble.n	8005dde <__kernel_rem_pio2+0x8e>
 8005e0a:	9b06      	ldr	r3, [sp, #24]
 8005e0c:	9c07      	ldr	r4, [sp, #28]
 8005e0e:	3501      	adds	r5, #1
 8005e10:	c718      	stmia	r7!, {r3, r4}
 8005e12:	e7c9      	b.n	8005da8 <__kernel_rem_pio2+0x58>
 8005e14:	9b08      	ldr	r3, [sp, #32]
 8005e16:	aa12      	add	r2, sp, #72	@ 0x48
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	189b      	adds	r3, r3, r2
 8005e1c:	9311      	str	r3, [sp, #68]	@ 0x44
 8005e1e:	9b00      	ldr	r3, [sp, #0]
 8005e20:	9aa5      	ldr	r2, [sp, #660]	@ 0x294
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	18d3      	adds	r3, r2, r3
 8005e26:	9310      	str	r3, [sp, #64]	@ 0x40
 8005e28:	9b08      	ldr	r3, [sp, #32]
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	9b00      	ldr	r3, [sp, #0]
 8005e2e:	aa76      	add	r2, sp, #472	@ 0x1d8
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	18d3      	adds	r3, r2, r3
 8005e34:	681e      	ldr	r6, [r3, #0]
 8005e36:	685f      	ldr	r7, [r3, #4]
 8005e38:	ab12      	add	r3, sp, #72	@ 0x48
 8005e3a:	001d      	movs	r5, r3
 8005e3c:	9c00      	ldr	r4, [sp, #0]
 8005e3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e40:	2c00      	cmp	r4, #0
 8005e42:	dc73      	bgt.n	8005f2c <__kernel_rem_pio2+0x1dc>
 8005e44:	0030      	movs	r0, r6
 8005e46:	0039      	movs	r1, r7
 8005e48:	9a02      	ldr	r2, [sp, #8]
 8005e4a:	f000 fad3 	bl	80063f4 <scalbn>
 8005e4e:	23ff      	movs	r3, #255	@ 0xff
 8005e50:	2200      	movs	r2, #0
 8005e52:	059b      	lsls	r3, r3, #22
 8005e54:	0004      	movs	r4, r0
 8005e56:	000d      	movs	r5, r1
 8005e58:	f7fb fe88 	bl	8001b6c <__aeabi_dmul>
 8005e5c:	f000 fb36 	bl	80064cc <floor>
 8005e60:	2200      	movs	r2, #0
 8005e62:	4b84      	ldr	r3, [pc, #528]	@ (8006074 <__kernel_rem_pio2+0x324>)
 8005e64:	f7fb fe82 	bl	8001b6c <__aeabi_dmul>
 8005e68:	0002      	movs	r2, r0
 8005e6a:	000b      	movs	r3, r1
 8005e6c:	0020      	movs	r0, r4
 8005e6e:	0029      	movs	r1, r5
 8005e70:	f7fc f944 	bl	80020fc <__aeabi_dsub>
 8005e74:	000d      	movs	r5, r1
 8005e76:	0004      	movs	r4, r0
 8005e78:	f7fc fcdc 	bl	8002834 <__aeabi_d2iz>
 8005e7c:	900c      	str	r0, [sp, #48]	@ 0x30
 8005e7e:	f7fc fd15 	bl	80028ac <__aeabi_i2d>
 8005e82:	000b      	movs	r3, r1
 8005e84:	0002      	movs	r2, r0
 8005e86:	0029      	movs	r1, r5
 8005e88:	0020      	movs	r0, r4
 8005e8a:	f7fc f937 	bl	80020fc <__aeabi_dsub>
 8005e8e:	9b02      	ldr	r3, [sp, #8]
 8005e90:	0006      	movs	r6, r0
 8005e92:	000f      	movs	r7, r1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	dd6f      	ble.n	8005f78 <__kernel_rem_pio2+0x228>
 8005e98:	2018      	movs	r0, #24
 8005e9a:	9b00      	ldr	r3, [sp, #0]
 8005e9c:	aa12      	add	r2, sp, #72	@ 0x48
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	589a      	ldr	r2, [r3, r2]
 8005ea4:	9902      	ldr	r1, [sp, #8]
 8005ea6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005ea8:	1a40      	subs	r0, r0, r1
 8005eaa:	0011      	movs	r1, r2
 8005eac:	4101      	asrs	r1, r0
 8005eae:	1864      	adds	r4, r4, r1
 8005eb0:	4081      	lsls	r1, r0
 8005eb2:	1a52      	subs	r2, r2, r1
 8005eb4:	a912      	add	r1, sp, #72	@ 0x48
 8005eb6:	505a      	str	r2, [r3, r1]
 8005eb8:	2317      	movs	r3, #23
 8005eba:	9902      	ldr	r1, [sp, #8]
 8005ebc:	940c      	str	r4, [sp, #48]	@ 0x30
 8005ebe:	1a5b      	subs	r3, r3, r1
 8005ec0:	411a      	asrs	r2, r3
 8005ec2:	9206      	str	r2, [sp, #24]
 8005ec4:	9b06      	ldr	r3, [sp, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	dd68      	ble.n	8005f9c <__kernel_rem_pio2+0x24c>
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2580      	movs	r5, #128	@ 0x80
 8005ece:	0014      	movs	r4, r2
 8005ed0:	2001      	movs	r0, #1
 8005ed2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ed4:	4968      	ldr	r1, [pc, #416]	@ (8006078 <__kernel_rem_pio2+0x328>)
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	930c      	str	r3, [sp, #48]	@ 0x30
 8005eda:	046d      	lsls	r5, r5, #17
 8005edc:	9b00      	ldr	r3, [sp, #0]
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	dd00      	ble.n	8005ee4 <__kernel_rem_pio2+0x194>
 8005ee2:	e098      	b.n	8006016 <__kernel_rem_pio2+0x2c6>
 8005ee4:	9b02      	ldr	r3, [sp, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	dd05      	ble.n	8005ef6 <__kernel_rem_pio2+0x1a6>
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d100      	bne.n	8005ef0 <__kernel_rem_pio2+0x1a0>
 8005eee:	e0a4      	b.n	800603a <__kernel_rem_pio2+0x2ea>
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d100      	bne.n	8005ef6 <__kernel_rem_pio2+0x1a6>
 8005ef4:	e0ab      	b.n	800604e <__kernel_rem_pio2+0x2fe>
 8005ef6:	9b06      	ldr	r3, [sp, #24]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d14f      	bne.n	8005f9c <__kernel_rem_pio2+0x24c>
 8005efc:	0032      	movs	r2, r6
 8005efe:	003b      	movs	r3, r7
 8005f00:	2000      	movs	r0, #0
 8005f02:	495e      	ldr	r1, [pc, #376]	@ (800607c <__kernel_rem_pio2+0x32c>)
 8005f04:	f7fc f8fa 	bl	80020fc <__aeabi_dsub>
 8005f08:	0006      	movs	r6, r0
 8005f0a:	000f      	movs	r7, r1
 8005f0c:	2c00      	cmp	r4, #0
 8005f0e:	d045      	beq.n	8005f9c <__kernel_rem_pio2+0x24c>
 8005f10:	9a02      	ldr	r2, [sp, #8]
 8005f12:	2000      	movs	r0, #0
 8005f14:	4959      	ldr	r1, [pc, #356]	@ (800607c <__kernel_rem_pio2+0x32c>)
 8005f16:	f000 fa6d 	bl	80063f4 <scalbn>
 8005f1a:	0002      	movs	r2, r0
 8005f1c:	000b      	movs	r3, r1
 8005f1e:	0030      	movs	r0, r6
 8005f20:	0039      	movs	r1, r7
 8005f22:	f7fc f8eb 	bl	80020fc <__aeabi_dsub>
 8005f26:	0006      	movs	r6, r0
 8005f28:	000f      	movs	r7, r1
 8005f2a:	e037      	b.n	8005f9c <__kernel_rem_pio2+0x24c>
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	4b54      	ldr	r3, [pc, #336]	@ (8006080 <__kernel_rem_pio2+0x330>)
 8005f30:	0030      	movs	r0, r6
 8005f32:	0039      	movs	r1, r7
 8005f34:	f7fb fe1a 	bl	8001b6c <__aeabi_dmul>
 8005f38:	f7fc fc7c 	bl	8002834 <__aeabi_d2iz>
 8005f3c:	f7fc fcb6 	bl	80028ac <__aeabi_i2d>
 8005f40:	2200      	movs	r2, #0
 8005f42:	4b50      	ldr	r3, [pc, #320]	@ (8006084 <__kernel_rem_pio2+0x334>)
 8005f44:	9006      	str	r0, [sp, #24]
 8005f46:	9107      	str	r1, [sp, #28]
 8005f48:	f7fb fe10 	bl	8001b6c <__aeabi_dmul>
 8005f4c:	0002      	movs	r2, r0
 8005f4e:	000b      	movs	r3, r1
 8005f50:	0030      	movs	r0, r6
 8005f52:	0039      	movs	r1, r7
 8005f54:	f7fc f8d2 	bl	80020fc <__aeabi_dsub>
 8005f58:	f7fc fc6c 	bl	8002834 <__aeabi_d2iz>
 8005f5c:	3c01      	subs	r4, #1
 8005f5e:	aa76      	add	r2, sp, #472	@ 0x1d8
 8005f60:	00e3      	lsls	r3, r4, #3
 8005f62:	18d3      	adds	r3, r2, r3
 8005f64:	c501      	stmia	r5!, {r0}
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	9806      	ldr	r0, [sp, #24]
 8005f6c:	9907      	ldr	r1, [sp, #28]
 8005f6e:	f7fb f96f 	bl	8001250 <__aeabi_dadd>
 8005f72:	0006      	movs	r6, r0
 8005f74:	000f      	movs	r7, r1
 8005f76:	e763      	b.n	8005e40 <__kernel_rem_pio2+0xf0>
 8005f78:	9b02      	ldr	r3, [sp, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d107      	bne.n	8005f8e <__kernel_rem_pio2+0x23e>
 8005f7e:	9b00      	ldr	r3, [sp, #0]
 8005f80:	aa12      	add	r2, sp, #72	@ 0x48
 8005f82:	3b01      	subs	r3, #1
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	589b      	ldr	r3, [r3, r2]
 8005f88:	15db      	asrs	r3, r3, #23
 8005f8a:	9306      	str	r3, [sp, #24]
 8005f8c:	e79a      	b.n	8005ec4 <__kernel_rem_pio2+0x174>
 8005f8e:	2200      	movs	r2, #0
 8005f90:	4b3d      	ldr	r3, [pc, #244]	@ (8006088 <__kernel_rem_pio2+0x338>)
 8005f92:	f7fa fa61 	bl	8000458 <__aeabi_dcmpge>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d13a      	bne.n	8006010 <__kernel_rem_pio2+0x2c0>
 8005f9a:	9006      	str	r0, [sp, #24]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	0030      	movs	r0, r6
 8005fa2:	0039      	movs	r1, r7
 8005fa4:	f7fa fa34 	bl	8000410 <__aeabi_dcmpeq>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	d100      	bne.n	8005fae <__kernel_rem_pio2+0x25e>
 8005fac:	e0b5      	b.n	800611a <__kernel_rem_pio2+0x3ca>
 8005fae:	2200      	movs	r2, #0
 8005fb0:	9b00      	ldr	r3, [sp, #0]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	9908      	ldr	r1, [sp, #32]
 8005fb6:	428b      	cmp	r3, r1
 8005fb8:	da51      	bge.n	800605e <__kernel_rem_pio2+0x30e>
 8005fba:	2a00      	cmp	r2, #0
 8005fbc:	d100      	bne.n	8005fc0 <__kernel_rem_pio2+0x270>
 8005fbe:	e096      	b.n	80060ee <__kernel_rem_pio2+0x39e>
 8005fc0:	9b00      	ldr	r3, [sp, #0]
 8005fc2:	aa12      	add	r2, sp, #72	@ 0x48
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	9b02      	ldr	r3, [sp, #8]
 8005fca:	3b18      	subs	r3, #24
 8005fcc:	9302      	str	r3, [sp, #8]
 8005fce:	9b00      	ldr	r3, [sp, #0]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	589b      	ldr	r3, [r3, r2]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0f3      	beq.n	8005fc0 <__kernel_rem_pio2+0x270>
 8005fd8:	2000      	movs	r0, #0
 8005fda:	9a02      	ldr	r2, [sp, #8]
 8005fdc:	4927      	ldr	r1, [pc, #156]	@ (800607c <__kernel_rem_pio2+0x32c>)
 8005fde:	f000 fa09 	bl	80063f4 <scalbn>
 8005fe2:	0004      	movs	r4, r0
 8005fe4:	000d      	movs	r5, r1
 8005fe6:	9e00      	ldr	r6, [sp, #0]
 8005fe8:	2e00      	cmp	r6, #0
 8005fea:	db00      	blt.n	8005fee <__kernel_rem_pio2+0x29e>
 8005fec:	e0d2      	b.n	8006194 <__kernel_rem_pio2+0x444>
 8005fee:	4b27      	ldr	r3, [pc, #156]	@ (800608c <__kernel_rem_pio2+0x33c>)
 8005ff0:	9c00      	ldr	r4, [sp, #0]
 8005ff2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ff4:	2c00      	cmp	r4, #0
 8005ff6:	da00      	bge.n	8005ffa <__kernel_rem_pio2+0x2aa>
 8005ff8:	e103      	b.n	8006202 <__kernel_rem_pio2+0x4b2>
 8005ffa:	00e3      	lsls	r3, r4, #3
 8005ffc:	aa76      	add	r2, sp, #472	@ 0x1d8
 8005ffe:	189f      	adds	r7, r3, r2
 8006000:	2300      	movs	r3, #0
 8006002:	2200      	movs	r2, #0
 8006004:	9202      	str	r2, [sp, #8]
 8006006:	9303      	str	r3, [sp, #12]
 8006008:	9b00      	ldr	r3, [sp, #0]
 800600a:	2500      	movs	r5, #0
 800600c:	1b1e      	subs	r6, r3, r4
 800600e:	e0ea      	b.n	80061e6 <__kernel_rem_pio2+0x496>
 8006010:	2302      	movs	r3, #2
 8006012:	9306      	str	r3, [sp, #24]
 8006014:	e759      	b.n	8005eca <__kernel_rem_pio2+0x17a>
 8006016:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2c00      	cmp	r4, #0
 800601c:	d10b      	bne.n	8006036 <__kernel_rem_pio2+0x2e6>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <__kernel_rem_pio2+0x2da>
 8006022:	1aeb      	subs	r3, r5, r3
 8006024:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006026:	6023      	str	r3, [r4, #0]
 8006028:	0003      	movs	r3, r0
 800602a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800602c:	3201      	adds	r2, #1
 800602e:	3404      	adds	r4, #4
 8006030:	940a      	str	r4, [sp, #40]	@ 0x28
 8006032:	001c      	movs	r4, r3
 8006034:	e752      	b.n	8005edc <__kernel_rem_pio2+0x18c>
 8006036:	1acb      	subs	r3, r1, r3
 8006038:	e7f4      	b.n	8006024 <__kernel_rem_pio2+0x2d4>
 800603a:	9b00      	ldr	r3, [sp, #0]
 800603c:	aa12      	add	r2, sp, #72	@ 0x48
 800603e:	3b01      	subs	r3, #1
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	589a      	ldr	r2, [r3, r2]
 8006044:	0252      	lsls	r2, r2, #9
 8006046:	0a52      	lsrs	r2, r2, #9
 8006048:	a912      	add	r1, sp, #72	@ 0x48
 800604a:	505a      	str	r2, [r3, r1]
 800604c:	e753      	b.n	8005ef6 <__kernel_rem_pio2+0x1a6>
 800604e:	9b00      	ldr	r3, [sp, #0]
 8006050:	aa12      	add	r2, sp, #72	@ 0x48
 8006052:	3b01      	subs	r3, #1
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	589a      	ldr	r2, [r3, r2]
 8006058:	0292      	lsls	r2, r2, #10
 800605a:	0a92      	lsrs	r2, r2, #10
 800605c:	e7f4      	b.n	8006048 <__kernel_rem_pio2+0x2f8>
 800605e:	0099      	lsls	r1, r3, #2
 8006060:	a812      	add	r0, sp, #72	@ 0x48
 8006062:	5809      	ldr	r1, [r1, r0]
 8006064:	3b01      	subs	r3, #1
 8006066:	430a      	orrs	r2, r1
 8006068:	e7a4      	b.n	8005fb4 <__kernel_rem_pio2+0x264>
 800606a:	46c0      	nop			@ (mov r8, r8)
 800606c:	fffffd84 	.word	0xfffffd84
 8006070:	080068b0 	.word	0x080068b0
 8006074:	40200000 	.word	0x40200000
 8006078:	00ffffff 	.word	0x00ffffff
 800607c:	3ff00000 	.word	0x3ff00000
 8006080:	3e700000 	.word	0x3e700000
 8006084:	41700000 	.word	0x41700000
 8006088:	3fe00000 	.word	0x3fe00000
 800608c:	08006870 	.word	0x08006870
 8006090:	3301      	adds	r3, #1
 8006092:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006094:	009a      	lsls	r2, r3, #2
 8006096:	4252      	negs	r2, r2
 8006098:	588a      	ldr	r2, [r1, r2]
 800609a:	2a00      	cmp	r2, #0
 800609c:	d0f8      	beq.n	8006090 <__kernel_rem_pio2+0x340>
 800609e:	9a00      	ldr	r2, [sp, #0]
 80060a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80060a2:	1c55      	adds	r5, r2, #1
 80060a4:	1852      	adds	r2, r2, r1
 80060a6:	00d2      	lsls	r2, r2, #3
 80060a8:	a926      	add	r1, sp, #152	@ 0x98
 80060aa:	188c      	adds	r4, r1, r2
 80060ac:	9a00      	ldr	r2, [sp, #0]
 80060ae:	18d3      	adds	r3, r2, r3
 80060b0:	9306      	str	r3, [sp, #24]
 80060b2:	9b06      	ldr	r3, [sp, #24]
 80060b4:	42ab      	cmp	r3, r5
 80060b6:	da00      	bge.n	80060ba <__kernel_rem_pio2+0x36a>
 80060b8:	e6b7      	b.n	8005e2a <__kernel_rem_pio2+0xda>
 80060ba:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80060bc:	00ab      	lsls	r3, r5, #2
 80060be:	58d0      	ldr	r0, [r2, r3]
 80060c0:	f7fc fbf4 	bl	80028ac <__aeabi_i2d>
 80060c4:	2200      	movs	r2, #0
 80060c6:	2300      	movs	r3, #0
 80060c8:	0027      	movs	r7, r4
 80060ca:	2600      	movs	r6, #0
 80060cc:	6020      	str	r0, [r4, #0]
 80060ce:	6061      	str	r1, [r4, #4]
 80060d0:	9200      	str	r2, [sp, #0]
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060d6:	429e      	cmp	r6, r3
 80060d8:	dd0b      	ble.n	80060f2 <__kernel_rem_pio2+0x3a2>
 80060da:	00eb      	lsls	r3, r5, #3
 80060dc:	aa76      	add	r2, sp, #472	@ 0x1d8
 80060de:	18d3      	adds	r3, r2, r3
 80060e0:	3501      	adds	r5, #1
 80060e2:	9900      	ldr	r1, [sp, #0]
 80060e4:	9a01      	ldr	r2, [sp, #4]
 80060e6:	3408      	adds	r4, #8
 80060e8:	6019      	str	r1, [r3, #0]
 80060ea:	605a      	str	r2, [r3, #4]
 80060ec:	e7e1      	b.n	80060b2 <__kernel_rem_pio2+0x362>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e7cf      	b.n	8006092 <__kernel_rem_pio2+0x342>
 80060f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060f4:	00f1      	lsls	r1, r6, #3
 80060f6:	1859      	adds	r1, r3, r1
 80060f8:	6808      	ldr	r0, [r1, #0]
 80060fa:	6849      	ldr	r1, [r1, #4]
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f7fb fd34 	bl	8001b6c <__aeabi_dmul>
 8006104:	0002      	movs	r2, r0
 8006106:	000b      	movs	r3, r1
 8006108:	9800      	ldr	r0, [sp, #0]
 800610a:	9901      	ldr	r1, [sp, #4]
 800610c:	f7fb f8a0 	bl	8001250 <__aeabi_dadd>
 8006110:	3601      	adds	r6, #1
 8006112:	9000      	str	r0, [sp, #0]
 8006114:	9101      	str	r1, [sp, #4]
 8006116:	3f08      	subs	r7, #8
 8006118:	e7dc      	b.n	80060d4 <__kernel_rem_pio2+0x384>
 800611a:	9b02      	ldr	r3, [sp, #8]
 800611c:	0030      	movs	r0, r6
 800611e:	425a      	negs	r2, r3
 8006120:	0039      	movs	r1, r7
 8006122:	f000 f967 	bl	80063f4 <scalbn>
 8006126:	2200      	movs	r2, #0
 8006128:	4bb0      	ldr	r3, [pc, #704]	@ (80063ec <__kernel_rem_pio2+0x69c>)
 800612a:	0006      	movs	r6, r0
 800612c:	000f      	movs	r7, r1
 800612e:	f7fa f993 	bl	8000458 <__aeabi_dcmpge>
 8006132:	2800      	cmp	r0, #0
 8006134:	d025      	beq.n	8006182 <__kernel_rem_pio2+0x432>
 8006136:	2200      	movs	r2, #0
 8006138:	4bad      	ldr	r3, [pc, #692]	@ (80063f0 <__kernel_rem_pio2+0x6a0>)
 800613a:	0030      	movs	r0, r6
 800613c:	0039      	movs	r1, r7
 800613e:	f7fb fd15 	bl	8001b6c <__aeabi_dmul>
 8006142:	f7fc fb77 	bl	8002834 <__aeabi_d2iz>
 8006146:	9b00      	ldr	r3, [sp, #0]
 8006148:	0004      	movs	r4, r0
 800614a:	009d      	lsls	r5, r3, #2
 800614c:	f7fc fbae 	bl	80028ac <__aeabi_i2d>
 8006150:	2200      	movs	r2, #0
 8006152:	4ba6      	ldr	r3, [pc, #664]	@ (80063ec <__kernel_rem_pio2+0x69c>)
 8006154:	f7fb fd0a 	bl	8001b6c <__aeabi_dmul>
 8006158:	0002      	movs	r2, r0
 800615a:	000b      	movs	r3, r1
 800615c:	0030      	movs	r0, r6
 800615e:	0039      	movs	r1, r7
 8006160:	f7fb ffcc 	bl	80020fc <__aeabi_dsub>
 8006164:	f7fc fb66 	bl	8002834 <__aeabi_d2iz>
 8006168:	ab12      	add	r3, sp, #72	@ 0x48
 800616a:	5158      	str	r0, [r3, r5]
 800616c:	9b00      	ldr	r3, [sp, #0]
 800616e:	aa12      	add	r2, sp, #72	@ 0x48
 8006170:	3301      	adds	r3, #1
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	9b02      	ldr	r3, [sp, #8]
 8006176:	3318      	adds	r3, #24
 8006178:	9302      	str	r3, [sp, #8]
 800617a:	9b00      	ldr	r3, [sp, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	509c      	str	r4, [r3, r2]
 8006180:	e72a      	b.n	8005fd8 <__kernel_rem_pio2+0x288>
 8006182:	9b00      	ldr	r3, [sp, #0]
 8006184:	0030      	movs	r0, r6
 8006186:	0039      	movs	r1, r7
 8006188:	009c      	lsls	r4, r3, #2
 800618a:	f7fc fb53 	bl	8002834 <__aeabi_d2iz>
 800618e:	ab12      	add	r3, sp, #72	@ 0x48
 8006190:	5118      	str	r0, [r3, r4]
 8006192:	e721      	b.n	8005fd8 <__kernel_rem_pio2+0x288>
 8006194:	00f3      	lsls	r3, r6, #3
 8006196:	aa76      	add	r2, sp, #472	@ 0x1d8
 8006198:	18d7      	adds	r7, r2, r3
 800619a:	00b3      	lsls	r3, r6, #2
 800619c:	aa12      	add	r2, sp, #72	@ 0x48
 800619e:	5898      	ldr	r0, [r3, r2]
 80061a0:	f7fc fb84 	bl	80028ac <__aeabi_i2d>
 80061a4:	0022      	movs	r2, r4
 80061a6:	002b      	movs	r3, r5
 80061a8:	f7fb fce0 	bl	8001b6c <__aeabi_dmul>
 80061ac:	2200      	movs	r2, #0
 80061ae:	6038      	str	r0, [r7, #0]
 80061b0:	6079      	str	r1, [r7, #4]
 80061b2:	4b8f      	ldr	r3, [pc, #572]	@ (80063f0 <__kernel_rem_pio2+0x6a0>)
 80061b4:	0020      	movs	r0, r4
 80061b6:	0029      	movs	r1, r5
 80061b8:	f7fb fcd8 	bl	8001b6c <__aeabi_dmul>
 80061bc:	3e01      	subs	r6, #1
 80061be:	0004      	movs	r4, r0
 80061c0:	000d      	movs	r5, r1
 80061c2:	e711      	b.n	8005fe8 <__kernel_rem_pio2+0x298>
 80061c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061c6:	00e9      	lsls	r1, r5, #3
 80061c8:	18c9      	adds	r1, r1, r3
 80061ca:	6808      	ldr	r0, [r1, #0]
 80061cc:	6849      	ldr	r1, [r1, #4]
 80061ce:	cf0c      	ldmia	r7!, {r2, r3}
 80061d0:	f7fb fccc 	bl	8001b6c <__aeabi_dmul>
 80061d4:	0002      	movs	r2, r0
 80061d6:	000b      	movs	r3, r1
 80061d8:	9802      	ldr	r0, [sp, #8]
 80061da:	9903      	ldr	r1, [sp, #12]
 80061dc:	f7fb f838 	bl	8001250 <__aeabi_dadd>
 80061e0:	9002      	str	r0, [sp, #8]
 80061e2:	9103      	str	r1, [sp, #12]
 80061e4:	3501      	adds	r5, #1
 80061e6:	9b08      	ldr	r3, [sp, #32]
 80061e8:	429d      	cmp	r5, r3
 80061ea:	dc01      	bgt.n	80061f0 <__kernel_rem_pio2+0x4a0>
 80061ec:	42ae      	cmp	r6, r5
 80061ee:	dae9      	bge.n	80061c4 <__kernel_rem_pio2+0x474>
 80061f0:	00f6      	lsls	r6, r6, #3
 80061f2:	ab4e      	add	r3, sp, #312	@ 0x138
 80061f4:	199b      	adds	r3, r3, r6
 80061f6:	9902      	ldr	r1, [sp, #8]
 80061f8:	9a03      	ldr	r2, [sp, #12]
 80061fa:	3c01      	subs	r4, #1
 80061fc:	6019      	str	r1, [r3, #0]
 80061fe:	605a      	str	r2, [r3, #4]
 8006200:	e6f8      	b.n	8005ff4 <__kernel_rem_pio2+0x2a4>
 8006202:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006204:	2b02      	cmp	r3, #2
 8006206:	dc0b      	bgt.n	8006220 <__kernel_rem_pio2+0x4d0>
 8006208:	2b00      	cmp	r3, #0
 800620a:	dd00      	ble.n	800620e <__kernel_rem_pio2+0x4be>
 800620c:	e084      	b.n	8006318 <__kernel_rem_pio2+0x5c8>
 800620e:	d052      	beq.n	80062b6 <__kernel_rem_pio2+0x566>
 8006210:	2007      	movs	r0, #7
 8006212:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006214:	4003      	ands	r3, r0
 8006216:	0018      	movs	r0, r3
 8006218:	239f      	movs	r3, #159	@ 0x9f
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	449d      	add	sp, r3
 800621e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006220:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006222:	2b03      	cmp	r3, #3
 8006224:	d1f4      	bne.n	8006210 <__kernel_rem_pio2+0x4c0>
 8006226:	9b00      	ldr	r3, [sp, #0]
 8006228:	aa4e      	add	r2, sp, #312	@ 0x138
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	18d4      	adds	r4, r2, r3
 800622e:	0025      	movs	r5, r4
 8006230:	9b00      	ldr	r3, [sp, #0]
 8006232:	9302      	str	r3, [sp, #8]
 8006234:	9b02      	ldr	r3, [sp, #8]
 8006236:	3d08      	subs	r5, #8
 8006238:	2b00      	cmp	r3, #0
 800623a:	dd00      	ble.n	800623e <__kernel_rem_pio2+0x4ee>
 800623c:	e07a      	b.n	8006334 <__kernel_rem_pio2+0x5e4>
 800623e:	9d00      	ldr	r5, [sp, #0]
 8006240:	3c08      	subs	r4, #8
 8006242:	2d01      	cmp	r5, #1
 8006244:	dd00      	ble.n	8006248 <__kernel_rem_pio2+0x4f8>
 8006246:	e095      	b.n	8006374 <__kernel_rem_pio2+0x624>
 8006248:	2000      	movs	r0, #0
 800624a:	2100      	movs	r1, #0
 800624c:	9b00      	ldr	r3, [sp, #0]
 800624e:	2b01      	cmp	r3, #1
 8006250:	dd00      	ble.n	8006254 <__kernel_rem_pio2+0x504>
 8006252:	e0ad      	b.n	80063b0 <__kernel_rem_pio2+0x660>
 8006254:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8006256:	9c4f      	ldr	r4, [sp, #316]	@ 0x13c
 8006258:	9e50      	ldr	r6, [sp, #320]	@ 0x140
 800625a:	9f51      	ldr	r7, [sp, #324]	@ 0x144
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	9401      	str	r4, [sp, #4]
 8006260:	9b06      	ldr	r3, [sp, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d000      	beq.n	8006268 <__kernel_rem_pio2+0x518>
 8006266:	e0af      	b.n	80063c8 <__kernel_rem_pio2+0x678>
 8006268:	9c00      	ldr	r4, [sp, #0]
 800626a:	9d01      	ldr	r5, [sp, #4]
 800626c:	9b05      	ldr	r3, [sp, #20]
 800626e:	601c      	str	r4, [r3, #0]
 8006270:	605d      	str	r5, [r3, #4]
 8006272:	609e      	str	r6, [r3, #8]
 8006274:	60df      	str	r7, [r3, #12]
 8006276:	6118      	str	r0, [r3, #16]
 8006278:	6159      	str	r1, [r3, #20]
 800627a:	e7c9      	b.n	8006210 <__kernel_rem_pio2+0x4c0>
 800627c:	9b00      	ldr	r3, [sp, #0]
 800627e:	aa4e      	add	r2, sp, #312	@ 0x138
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	18d3      	adds	r3, r2, r3
 8006284:	0020      	movs	r0, r4
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	0029      	movs	r1, r5
 800628c:	f7fa ffe0 	bl	8001250 <__aeabi_dadd>
 8006290:	0004      	movs	r4, r0
 8006292:	000d      	movs	r5, r1
 8006294:	9b00      	ldr	r3, [sp, #0]
 8006296:	3b01      	subs	r3, #1
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	9b00      	ldr	r3, [sp, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	daed      	bge.n	800627c <__kernel_rem_pio2+0x52c>
 80062a0:	9b06      	ldr	r3, [sp, #24]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <__kernel_rem_pio2+0x55e>
 80062a6:	2180      	movs	r1, #128	@ 0x80
 80062a8:	0609      	lsls	r1, r1, #24
 80062aa:	186b      	adds	r3, r5, r1
 80062ac:	001d      	movs	r5, r3
 80062ae:	9b05      	ldr	r3, [sp, #20]
 80062b0:	601c      	str	r4, [r3, #0]
 80062b2:	605d      	str	r5, [r3, #4]
 80062b4:	e7ac      	b.n	8006210 <__kernel_rem_pio2+0x4c0>
 80062b6:	2400      	movs	r4, #0
 80062b8:	2500      	movs	r5, #0
 80062ba:	e7ee      	b.n	800629a <__kernel_rem_pio2+0x54a>
 80062bc:	00e3      	lsls	r3, r4, #3
 80062be:	aa4e      	add	r2, sp, #312	@ 0x138
 80062c0:	18d3      	adds	r3, r2, r3
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f7fa ffc3 	bl	8001250 <__aeabi_dadd>
 80062ca:	3c01      	subs	r4, #1
 80062cc:	2c00      	cmp	r4, #0
 80062ce:	daf5      	bge.n	80062bc <__kernel_rem_pio2+0x56c>
 80062d0:	9c06      	ldr	r4, [sp, #24]
 80062d2:	0002      	movs	r2, r0
 80062d4:	000b      	movs	r3, r1
 80062d6:	2c00      	cmp	r4, #0
 80062d8:	d002      	beq.n	80062e0 <__kernel_rem_pio2+0x590>
 80062da:	2480      	movs	r4, #128	@ 0x80
 80062dc:	0624      	lsls	r4, r4, #24
 80062de:	190b      	adds	r3, r1, r4
 80062e0:	9c05      	ldr	r4, [sp, #20]
 80062e2:	2501      	movs	r5, #1
 80062e4:	6022      	str	r2, [r4, #0]
 80062e6:	6063      	str	r3, [r4, #4]
 80062e8:	0002      	movs	r2, r0
 80062ea:	000b      	movs	r3, r1
 80062ec:	984e      	ldr	r0, [sp, #312]	@ 0x138
 80062ee:	994f      	ldr	r1, [sp, #316]	@ 0x13c
 80062f0:	f7fb ff04 	bl	80020fc <__aeabi_dsub>
 80062f4:	0006      	movs	r6, r0
 80062f6:	000f      	movs	r7, r1
 80062f8:	ac4e      	add	r4, sp, #312	@ 0x138
 80062fa:	9b00      	ldr	r3, [sp, #0]
 80062fc:	3408      	adds	r4, #8
 80062fe:	42ab      	cmp	r3, r5
 8006300:	da0e      	bge.n	8006320 <__kernel_rem_pio2+0x5d0>
 8006302:	9b06      	ldr	r3, [sp, #24]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <__kernel_rem_pio2+0x5c0>
 8006308:	2180      	movs	r1, #128	@ 0x80
 800630a:	0609      	lsls	r1, r1, #24
 800630c:	187b      	adds	r3, r7, r1
 800630e:	001f      	movs	r7, r3
 8006310:	9b05      	ldr	r3, [sp, #20]
 8006312:	609e      	str	r6, [r3, #8]
 8006314:	60df      	str	r7, [r3, #12]
 8006316:	e77b      	b.n	8006210 <__kernel_rem_pio2+0x4c0>
 8006318:	2000      	movs	r0, #0
 800631a:	2100      	movs	r1, #0
 800631c:	9c00      	ldr	r4, [sp, #0]
 800631e:	e7d5      	b.n	80062cc <__kernel_rem_pio2+0x57c>
 8006320:	0030      	movs	r0, r6
 8006322:	6822      	ldr	r2, [r4, #0]
 8006324:	6863      	ldr	r3, [r4, #4]
 8006326:	0039      	movs	r1, r7
 8006328:	f7fa ff92 	bl	8001250 <__aeabi_dadd>
 800632c:	3501      	adds	r5, #1
 800632e:	0006      	movs	r6, r0
 8006330:	000f      	movs	r7, r1
 8006332:	e7e2      	b.n	80062fa <__kernel_rem_pio2+0x5aa>
 8006334:	9b02      	ldr	r3, [sp, #8]
 8006336:	3b01      	subs	r3, #1
 8006338:	9302      	str	r3, [sp, #8]
 800633a:	682a      	ldr	r2, [r5, #0]
 800633c:	686b      	ldr	r3, [r5, #4]
 800633e:	9208      	str	r2, [sp, #32]
 8006340:	9309      	str	r3, [sp, #36]	@ 0x24
 8006342:	9808      	ldr	r0, [sp, #32]
 8006344:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006346:	68aa      	ldr	r2, [r5, #8]
 8006348:	68eb      	ldr	r3, [r5, #12]
 800634a:	920a      	str	r2, [sp, #40]	@ 0x28
 800634c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800634e:	f7fa ff7f 	bl	8001250 <__aeabi_dadd>
 8006352:	0002      	movs	r2, r0
 8006354:	000b      	movs	r3, r1
 8006356:	0006      	movs	r6, r0
 8006358:	000f      	movs	r7, r1
 800635a:	9808      	ldr	r0, [sp, #32]
 800635c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800635e:	f7fb fecd 	bl	80020fc <__aeabi_dsub>
 8006362:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006364:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006366:	f7fa ff73 	bl	8001250 <__aeabi_dadd>
 800636a:	602e      	str	r6, [r5, #0]
 800636c:	606f      	str	r7, [r5, #4]
 800636e:	60a8      	str	r0, [r5, #8]
 8006370:	60e9      	str	r1, [r5, #12]
 8006372:	e75f      	b.n	8006234 <__kernel_rem_pio2+0x4e4>
 8006374:	6822      	ldr	r2, [r4, #0]
 8006376:	6863      	ldr	r3, [r4, #4]
 8006378:	9202      	str	r2, [sp, #8]
 800637a:	9303      	str	r3, [sp, #12]
 800637c:	9802      	ldr	r0, [sp, #8]
 800637e:	9903      	ldr	r1, [sp, #12]
 8006380:	68a2      	ldr	r2, [r4, #8]
 8006382:	68e3      	ldr	r3, [r4, #12]
 8006384:	9208      	str	r2, [sp, #32]
 8006386:	9309      	str	r3, [sp, #36]	@ 0x24
 8006388:	f7fa ff62 	bl	8001250 <__aeabi_dadd>
 800638c:	0002      	movs	r2, r0
 800638e:	000b      	movs	r3, r1
 8006390:	0006      	movs	r6, r0
 8006392:	000f      	movs	r7, r1
 8006394:	9802      	ldr	r0, [sp, #8]
 8006396:	9903      	ldr	r1, [sp, #12]
 8006398:	f7fb feb0 	bl	80020fc <__aeabi_dsub>
 800639c:	9a08      	ldr	r2, [sp, #32]
 800639e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063a0:	f7fa ff56 	bl	8001250 <__aeabi_dadd>
 80063a4:	3d01      	subs	r5, #1
 80063a6:	60a0      	str	r0, [r4, #8]
 80063a8:	60e1      	str	r1, [r4, #12]
 80063aa:	6026      	str	r6, [r4, #0]
 80063ac:	6067      	str	r7, [r4, #4]
 80063ae:	e747      	b.n	8006240 <__kernel_rem_pio2+0x4f0>
 80063b0:	9b00      	ldr	r3, [sp, #0]
 80063b2:	aa4e      	add	r2, sp, #312	@ 0x138
 80063b4:	00db      	lsls	r3, r3, #3
 80063b6:	18d3      	adds	r3, r2, r3
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f7fa ff48 	bl	8001250 <__aeabi_dadd>
 80063c0:	9b00      	ldr	r3, [sp, #0]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	e741      	b.n	800624c <__kernel_rem_pio2+0x4fc>
 80063c8:	9c00      	ldr	r4, [sp, #0]
 80063ca:	9b05      	ldr	r3, [sp, #20]
 80063cc:	9a01      	ldr	r2, [sp, #4]
 80063ce:	601c      	str	r4, [r3, #0]
 80063d0:	2380      	movs	r3, #128	@ 0x80
 80063d2:	061b      	lsls	r3, r3, #24
 80063d4:	18d4      	adds	r4, r2, r3
 80063d6:	9a05      	ldr	r2, [sp, #20]
 80063d8:	6054      	str	r4, [r2, #4]
 80063da:	001a      	movs	r2, r3
 80063dc:	9c05      	ldr	r4, [sp, #20]
 80063de:	18fb      	adds	r3, r7, r3
 80063e0:	60e3      	str	r3, [r4, #12]
 80063e2:	188b      	adds	r3, r1, r2
 80063e4:	60a6      	str	r6, [r4, #8]
 80063e6:	6120      	str	r0, [r4, #16]
 80063e8:	6163      	str	r3, [r4, #20]
 80063ea:	e711      	b.n	8006210 <__kernel_rem_pio2+0x4c0>
 80063ec:	41700000 	.word	0x41700000
 80063f0:	3e700000 	.word	0x3e700000

080063f4 <scalbn>:
 80063f4:	004b      	lsls	r3, r1, #1
 80063f6:	b570      	push	{r4, r5, r6, lr}
 80063f8:	0d5b      	lsrs	r3, r3, #21
 80063fa:	0014      	movs	r4, r2
 80063fc:	000d      	movs	r5, r1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10f      	bne.n	8006422 <scalbn+0x2e>
 8006402:	004b      	lsls	r3, r1, #1
 8006404:	085b      	lsrs	r3, r3, #1
 8006406:	4303      	orrs	r3, r0
 8006408:	d012      	beq.n	8006430 <scalbn+0x3c>
 800640a:	4b23      	ldr	r3, [pc, #140]	@ (8006498 <scalbn+0xa4>)
 800640c:	2200      	movs	r2, #0
 800640e:	f7fb fbad 	bl	8001b6c <__aeabi_dmul>
 8006412:	4b22      	ldr	r3, [pc, #136]	@ (800649c <scalbn+0xa8>)
 8006414:	429c      	cmp	r4, r3
 8006416:	da0c      	bge.n	8006432 <scalbn+0x3e>
 8006418:	4a21      	ldr	r2, [pc, #132]	@ (80064a0 <scalbn+0xac>)
 800641a:	4b22      	ldr	r3, [pc, #136]	@ (80064a4 <scalbn+0xb0>)
 800641c:	f7fb fba6 	bl	8001b6c <__aeabi_dmul>
 8006420:	e006      	b.n	8006430 <scalbn+0x3c>
 8006422:	4a21      	ldr	r2, [pc, #132]	@ (80064a8 <scalbn+0xb4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d108      	bne.n	800643a <scalbn+0x46>
 8006428:	0002      	movs	r2, r0
 800642a:	000b      	movs	r3, r1
 800642c:	f7fa ff10 	bl	8001250 <__aeabi_dadd>
 8006430:	bd70      	pop	{r4, r5, r6, pc}
 8006432:	000d      	movs	r5, r1
 8006434:	004b      	lsls	r3, r1, #1
 8006436:	0d5b      	lsrs	r3, r3, #21
 8006438:	3b36      	subs	r3, #54	@ 0x36
 800643a:	4a1c      	ldr	r2, [pc, #112]	@ (80064ac <scalbn+0xb8>)
 800643c:	4294      	cmp	r4, r2
 800643e:	dd0a      	ble.n	8006456 <scalbn+0x62>
 8006440:	4c1b      	ldr	r4, [pc, #108]	@ (80064b0 <scalbn+0xbc>)
 8006442:	4d1c      	ldr	r5, [pc, #112]	@ (80064b4 <scalbn+0xc0>)
 8006444:	2900      	cmp	r1, #0
 8006446:	da01      	bge.n	800644c <scalbn+0x58>
 8006448:	4c19      	ldr	r4, [pc, #100]	@ (80064b0 <scalbn+0xbc>)
 800644a:	4d1b      	ldr	r5, [pc, #108]	@ (80064b8 <scalbn+0xc4>)
 800644c:	4a18      	ldr	r2, [pc, #96]	@ (80064b0 <scalbn+0xbc>)
 800644e:	4b19      	ldr	r3, [pc, #100]	@ (80064b4 <scalbn+0xc0>)
 8006450:	0020      	movs	r0, r4
 8006452:	0029      	movs	r1, r5
 8006454:	e7e2      	b.n	800641c <scalbn+0x28>
 8006456:	18e2      	adds	r2, r4, r3
 8006458:	4b18      	ldr	r3, [pc, #96]	@ (80064bc <scalbn+0xc8>)
 800645a:	429a      	cmp	r2, r3
 800645c:	dcf0      	bgt.n	8006440 <scalbn+0x4c>
 800645e:	2a00      	cmp	r2, #0
 8006460:	dd05      	ble.n	800646e <scalbn+0x7a>
 8006462:	4b17      	ldr	r3, [pc, #92]	@ (80064c0 <scalbn+0xcc>)
 8006464:	0512      	lsls	r2, r2, #20
 8006466:	402b      	ands	r3, r5
 8006468:	431a      	orrs	r2, r3
 800646a:	0011      	movs	r1, r2
 800646c:	e7e0      	b.n	8006430 <scalbn+0x3c>
 800646e:	0013      	movs	r3, r2
 8006470:	3335      	adds	r3, #53	@ 0x35
 8006472:	da08      	bge.n	8006486 <scalbn+0x92>
 8006474:	4c0a      	ldr	r4, [pc, #40]	@ (80064a0 <scalbn+0xac>)
 8006476:	4d0b      	ldr	r5, [pc, #44]	@ (80064a4 <scalbn+0xb0>)
 8006478:	2900      	cmp	r1, #0
 800647a:	da01      	bge.n	8006480 <scalbn+0x8c>
 800647c:	4c08      	ldr	r4, [pc, #32]	@ (80064a0 <scalbn+0xac>)
 800647e:	4d11      	ldr	r5, [pc, #68]	@ (80064c4 <scalbn+0xd0>)
 8006480:	4a07      	ldr	r2, [pc, #28]	@ (80064a0 <scalbn+0xac>)
 8006482:	4b08      	ldr	r3, [pc, #32]	@ (80064a4 <scalbn+0xb0>)
 8006484:	e7e4      	b.n	8006450 <scalbn+0x5c>
 8006486:	4b0e      	ldr	r3, [pc, #56]	@ (80064c0 <scalbn+0xcc>)
 8006488:	3236      	adds	r2, #54	@ 0x36
 800648a:	401d      	ands	r5, r3
 800648c:	0512      	lsls	r2, r2, #20
 800648e:	432a      	orrs	r2, r5
 8006490:	0011      	movs	r1, r2
 8006492:	4b0d      	ldr	r3, [pc, #52]	@ (80064c8 <scalbn+0xd4>)
 8006494:	2200      	movs	r2, #0
 8006496:	e7c1      	b.n	800641c <scalbn+0x28>
 8006498:	43500000 	.word	0x43500000
 800649c:	ffff3cb0 	.word	0xffff3cb0
 80064a0:	c2f8f359 	.word	0xc2f8f359
 80064a4:	01a56e1f 	.word	0x01a56e1f
 80064a8:	000007ff 	.word	0x000007ff
 80064ac:	0000c350 	.word	0x0000c350
 80064b0:	8800759c 	.word	0x8800759c
 80064b4:	7e37e43c 	.word	0x7e37e43c
 80064b8:	fe37e43c 	.word	0xfe37e43c
 80064bc:	000007fe 	.word	0x000007fe
 80064c0:	800fffff 	.word	0x800fffff
 80064c4:	81a56e1f 	.word	0x81a56e1f
 80064c8:	3c900000 	.word	0x3c900000

080064cc <floor>:
 80064cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064ce:	004b      	lsls	r3, r1, #1
 80064d0:	4a36      	ldr	r2, [pc, #216]	@ (80065ac <floor+0xe0>)
 80064d2:	0d5b      	lsrs	r3, r3, #21
 80064d4:	189e      	adds	r6, r3, r2
 80064d6:	000c      	movs	r4, r1
 80064d8:	0005      	movs	r5, r0
 80064da:	9001      	str	r0, [sp, #4]
 80064dc:	2e13      	cmp	r6, #19
 80064de:	dc2f      	bgt.n	8006540 <floor+0x74>
 80064e0:	2e00      	cmp	r6, #0
 80064e2:	da14      	bge.n	800650e <floor+0x42>
 80064e4:	4a32      	ldr	r2, [pc, #200]	@ (80065b0 <floor+0xe4>)
 80064e6:	4b33      	ldr	r3, [pc, #204]	@ (80065b4 <floor+0xe8>)
 80064e8:	f7fa feb2 	bl	8001250 <__aeabi_dadd>
 80064ec:	2200      	movs	r2, #0
 80064ee:	2300      	movs	r3, #0
 80064f0:	f7f9 ffa8 	bl	8000444 <__aeabi_dcmpgt>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d007      	beq.n	8006508 <floor+0x3c>
 80064f8:	2c00      	cmp	r4, #0
 80064fa:	da50      	bge.n	800659e <floor+0xd2>
 80064fc:	0064      	lsls	r4, r4, #1
 80064fe:	0864      	lsrs	r4, r4, #1
 8006500:	4325      	orrs	r5, r4
 8006502:	d14f      	bne.n	80065a4 <floor+0xd8>
 8006504:	2480      	movs	r4, #128	@ 0x80
 8006506:	0624      	lsls	r4, r4, #24
 8006508:	0021      	movs	r1, r4
 800650a:	0028      	movs	r0, r5
 800650c:	e022      	b.n	8006554 <floor+0x88>
 800650e:	4f2a      	ldr	r7, [pc, #168]	@ (80065b8 <floor+0xec>)
 8006510:	4137      	asrs	r7, r6
 8006512:	003b      	movs	r3, r7
 8006514:	400b      	ands	r3, r1
 8006516:	4303      	orrs	r3, r0
 8006518:	d01c      	beq.n	8006554 <floor+0x88>
 800651a:	4a25      	ldr	r2, [pc, #148]	@ (80065b0 <floor+0xe4>)
 800651c:	4b25      	ldr	r3, [pc, #148]	@ (80065b4 <floor+0xe8>)
 800651e:	f7fa fe97 	bl	8001250 <__aeabi_dadd>
 8006522:	2200      	movs	r2, #0
 8006524:	2300      	movs	r3, #0
 8006526:	f7f9 ff8d 	bl	8000444 <__aeabi_dcmpgt>
 800652a:	2800      	cmp	r0, #0
 800652c:	d0ec      	beq.n	8006508 <floor+0x3c>
 800652e:	2c00      	cmp	r4, #0
 8006530:	da03      	bge.n	800653a <floor+0x6e>
 8006532:	2380      	movs	r3, #128	@ 0x80
 8006534:	035b      	lsls	r3, r3, #13
 8006536:	4133      	asrs	r3, r6
 8006538:	18e4      	adds	r4, r4, r3
 800653a:	2500      	movs	r5, #0
 800653c:	43bc      	bics	r4, r7
 800653e:	e7e3      	b.n	8006508 <floor+0x3c>
 8006540:	2e33      	cmp	r6, #51	@ 0x33
 8006542:	dd09      	ble.n	8006558 <floor+0x8c>
 8006544:	2380      	movs	r3, #128	@ 0x80
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	429e      	cmp	r6, r3
 800654a:	d103      	bne.n	8006554 <floor+0x88>
 800654c:	0002      	movs	r2, r0
 800654e:	000b      	movs	r3, r1
 8006550:	f7fa fe7e 	bl	8001250 <__aeabi_dadd>
 8006554:	b003      	add	sp, #12
 8006556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006558:	2701      	movs	r7, #1
 800655a:	4a18      	ldr	r2, [pc, #96]	@ (80065bc <floor+0xf0>)
 800655c:	427f      	negs	r7, r7
 800655e:	189b      	adds	r3, r3, r2
 8006560:	40df      	lsrs	r7, r3
 8006562:	4238      	tst	r0, r7
 8006564:	d0f6      	beq.n	8006554 <floor+0x88>
 8006566:	4a12      	ldr	r2, [pc, #72]	@ (80065b0 <floor+0xe4>)
 8006568:	4b12      	ldr	r3, [pc, #72]	@ (80065b4 <floor+0xe8>)
 800656a:	f7fa fe71 	bl	8001250 <__aeabi_dadd>
 800656e:	2200      	movs	r2, #0
 8006570:	2300      	movs	r3, #0
 8006572:	f7f9 ff67 	bl	8000444 <__aeabi_dcmpgt>
 8006576:	2800      	cmp	r0, #0
 8006578:	d0c6      	beq.n	8006508 <floor+0x3c>
 800657a:	2c00      	cmp	r4, #0
 800657c:	da02      	bge.n	8006584 <floor+0xb8>
 800657e:	2e14      	cmp	r6, #20
 8006580:	d102      	bne.n	8006588 <floor+0xbc>
 8006582:	3401      	adds	r4, #1
 8006584:	43bd      	bics	r5, r7
 8006586:	e7bf      	b.n	8006508 <floor+0x3c>
 8006588:	2234      	movs	r2, #52	@ 0x34
 800658a:	2301      	movs	r3, #1
 800658c:	1b92      	subs	r2, r2, r6
 800658e:	4093      	lsls	r3, r2
 8006590:	18ed      	adds	r5, r5, r3
 8006592:	9b01      	ldr	r3, [sp, #4]
 8006594:	429d      	cmp	r5, r3
 8006596:	419b      	sbcs	r3, r3
 8006598:	425b      	negs	r3, r3
 800659a:	18e4      	adds	r4, r4, r3
 800659c:	e7f2      	b.n	8006584 <floor+0xb8>
 800659e:	2500      	movs	r5, #0
 80065a0:	002c      	movs	r4, r5
 80065a2:	e7b1      	b.n	8006508 <floor+0x3c>
 80065a4:	2500      	movs	r5, #0
 80065a6:	4c06      	ldr	r4, [pc, #24]	@ (80065c0 <floor+0xf4>)
 80065a8:	e7ae      	b.n	8006508 <floor+0x3c>
 80065aa:	46c0      	nop			@ (mov r8, r8)
 80065ac:	fffffc01 	.word	0xfffffc01
 80065b0:	8800759c 	.word	0x8800759c
 80065b4:	7e37e43c 	.word	0x7e37e43c
 80065b8:	000fffff 	.word	0x000fffff
 80065bc:	fffffbed 	.word	0xfffffbed
 80065c0:	bff00000 	.word	0xbff00000

080065c4 <_init>:
 80065c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c6:	46c0      	nop			@ (mov r8, r8)
 80065c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ca:	bc08      	pop	{r3}
 80065cc:	469e      	mov	lr, r3
 80065ce:	4770      	bx	lr

080065d0 <_fini>:
 80065d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d2:	46c0      	nop			@ (mov r8, r8)
 80065d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d6:	bc08      	pop	{r3}
 80065d8:	469e      	mov	lr, r3
 80065da:	4770      	bx	lr
