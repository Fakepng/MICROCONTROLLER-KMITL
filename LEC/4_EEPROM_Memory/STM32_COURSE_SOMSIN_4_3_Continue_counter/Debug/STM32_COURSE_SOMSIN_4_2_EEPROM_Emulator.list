
STM32_COURSE_SOMSIN_4_2_EEPROM_Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005968  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005a28  08005a28  00006a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b18  08005b18  000070e8  2**0
                  CONTENTS
  4 .ARM          00000008  08005b18  08005b18  00006b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b20  08005b20  000070e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b20  08005b20  00006b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b24  08005b24  00006b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20000000  08005b28  00007000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          0000024c  200000e8  08005c10  000070e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08005c10  00007334  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000070e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db9a  00000000  00000000  00007110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000284e  00000000  00000000  00014caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  000174f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ce  00000000  00000000  00018088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000acb3  00000000  00000000  00018956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003bde  00000000  00000000  00023609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000271e7  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002cac  00000000  00000000  0002722c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000007b  00000000  00000000  00029ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000e8 	.word	0x200000e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005a00 	.word	0x08005a00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000ec 	.word	0x200000ec
 8000104:	08005a00 	.word	0x08005a00

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	@ (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	@ (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f806 	bl	8000448 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__udivmoddi4>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	4657      	mov	r7, sl
 800044c:	464e      	mov	r6, r9
 800044e:	4645      	mov	r5, r8
 8000450:	46de      	mov	lr, fp
 8000452:	b5e0      	push	{r5, r6, r7, lr}
 8000454:	0004      	movs	r4, r0
 8000456:	000d      	movs	r5, r1
 8000458:	4692      	mov	sl, r2
 800045a:	4699      	mov	r9, r3
 800045c:	b083      	sub	sp, #12
 800045e:	428b      	cmp	r3, r1
 8000460:	d830      	bhi.n	80004c4 <__udivmoddi4+0x7c>
 8000462:	d02d      	beq.n	80004c0 <__udivmoddi4+0x78>
 8000464:	4649      	mov	r1, r9
 8000466:	4650      	mov	r0, sl
 8000468:	f000 f8ba 	bl	80005e0 <__clzdi2>
 800046c:	0029      	movs	r1, r5
 800046e:	0006      	movs	r6, r0
 8000470:	0020      	movs	r0, r4
 8000472:	f000 f8b5 	bl	80005e0 <__clzdi2>
 8000476:	1a33      	subs	r3, r6, r0
 8000478:	4698      	mov	r8, r3
 800047a:	3b20      	subs	r3, #32
 800047c:	d434      	bmi.n	80004e8 <__udivmoddi4+0xa0>
 800047e:	469b      	mov	fp, r3
 8000480:	4653      	mov	r3, sl
 8000482:	465a      	mov	r2, fp
 8000484:	4093      	lsls	r3, r2
 8000486:	4642      	mov	r2, r8
 8000488:	001f      	movs	r7, r3
 800048a:	4653      	mov	r3, sl
 800048c:	4093      	lsls	r3, r2
 800048e:	001e      	movs	r6, r3
 8000490:	42af      	cmp	r7, r5
 8000492:	d83b      	bhi.n	800050c <__udivmoddi4+0xc4>
 8000494:	42af      	cmp	r7, r5
 8000496:	d100      	bne.n	800049a <__udivmoddi4+0x52>
 8000498:	e079      	b.n	800058e <__udivmoddi4+0x146>
 800049a:	465b      	mov	r3, fp
 800049c:	1ba4      	subs	r4, r4, r6
 800049e:	41bd      	sbcs	r5, r7
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	da00      	bge.n	80004a6 <__udivmoddi4+0x5e>
 80004a4:	e076      	b.n	8000594 <__udivmoddi4+0x14c>
 80004a6:	2200      	movs	r2, #0
 80004a8:	2300      	movs	r3, #0
 80004aa:	9200      	str	r2, [sp, #0]
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	465a      	mov	r2, fp
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9301      	str	r3, [sp, #4]
 80004b6:	2301      	movs	r3, #1
 80004b8:	4642      	mov	r2, r8
 80004ba:	4093      	lsls	r3, r2
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	e029      	b.n	8000514 <__udivmoddi4+0xcc>
 80004c0:	4282      	cmp	r2, r0
 80004c2:	d9cf      	bls.n	8000464 <__udivmoddi4+0x1c>
 80004c4:	2200      	movs	r2, #0
 80004c6:	2300      	movs	r3, #0
 80004c8:	9200      	str	r2, [sp, #0]
 80004ca:	9301      	str	r3, [sp, #4]
 80004cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <__udivmoddi4+0x8e>
 80004d2:	601c      	str	r4, [r3, #0]
 80004d4:	605d      	str	r5, [r3, #4]
 80004d6:	9800      	ldr	r0, [sp, #0]
 80004d8:	9901      	ldr	r1, [sp, #4]
 80004da:	b003      	add	sp, #12
 80004dc:	bcf0      	pop	{r4, r5, r6, r7}
 80004de:	46bb      	mov	fp, r7
 80004e0:	46b2      	mov	sl, r6
 80004e2:	46a9      	mov	r9, r5
 80004e4:	46a0      	mov	r8, r4
 80004e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e8:	4642      	mov	r2, r8
 80004ea:	469b      	mov	fp, r3
 80004ec:	2320      	movs	r3, #32
 80004ee:	1a9b      	subs	r3, r3, r2
 80004f0:	4652      	mov	r2, sl
 80004f2:	40da      	lsrs	r2, r3
 80004f4:	4641      	mov	r1, r8
 80004f6:	0013      	movs	r3, r2
 80004f8:	464a      	mov	r2, r9
 80004fa:	408a      	lsls	r2, r1
 80004fc:	0017      	movs	r7, r2
 80004fe:	4642      	mov	r2, r8
 8000500:	431f      	orrs	r7, r3
 8000502:	4653      	mov	r3, sl
 8000504:	4093      	lsls	r3, r2
 8000506:	001e      	movs	r6, r3
 8000508:	42af      	cmp	r7, r5
 800050a:	d9c3      	bls.n	8000494 <__udivmoddi4+0x4c>
 800050c:	2200      	movs	r2, #0
 800050e:	2300      	movs	r3, #0
 8000510:	9200      	str	r2, [sp, #0]
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	4643      	mov	r3, r8
 8000516:	2b00      	cmp	r3, #0
 8000518:	d0d8      	beq.n	80004cc <__udivmoddi4+0x84>
 800051a:	07fb      	lsls	r3, r7, #31
 800051c:	0872      	lsrs	r2, r6, #1
 800051e:	431a      	orrs	r2, r3
 8000520:	4646      	mov	r6, r8
 8000522:	087b      	lsrs	r3, r7, #1
 8000524:	e00e      	b.n	8000544 <__udivmoddi4+0xfc>
 8000526:	42ab      	cmp	r3, r5
 8000528:	d101      	bne.n	800052e <__udivmoddi4+0xe6>
 800052a:	42a2      	cmp	r2, r4
 800052c:	d80c      	bhi.n	8000548 <__udivmoddi4+0x100>
 800052e:	1aa4      	subs	r4, r4, r2
 8000530:	419d      	sbcs	r5, r3
 8000532:	2001      	movs	r0, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2100      	movs	r1, #0
 800053a:	3e01      	subs	r6, #1
 800053c:	1824      	adds	r4, r4, r0
 800053e:	414d      	adcs	r5, r1
 8000540:	2e00      	cmp	r6, #0
 8000542:	d006      	beq.n	8000552 <__udivmoddi4+0x10a>
 8000544:	42ab      	cmp	r3, r5
 8000546:	d9ee      	bls.n	8000526 <__udivmoddi4+0xde>
 8000548:	3e01      	subs	r6, #1
 800054a:	1924      	adds	r4, r4, r4
 800054c:	416d      	adcs	r5, r5
 800054e:	2e00      	cmp	r6, #0
 8000550:	d1f8      	bne.n	8000544 <__udivmoddi4+0xfc>
 8000552:	9800      	ldr	r0, [sp, #0]
 8000554:	9901      	ldr	r1, [sp, #4]
 8000556:	465b      	mov	r3, fp
 8000558:	1900      	adds	r0, r0, r4
 800055a:	4169      	adcs	r1, r5
 800055c:	2b00      	cmp	r3, #0
 800055e:	db24      	blt.n	80005aa <__udivmoddi4+0x162>
 8000560:	002b      	movs	r3, r5
 8000562:	465a      	mov	r2, fp
 8000564:	4644      	mov	r4, r8
 8000566:	40d3      	lsrs	r3, r2
 8000568:	002a      	movs	r2, r5
 800056a:	40e2      	lsrs	r2, r4
 800056c:	001c      	movs	r4, r3
 800056e:	465b      	mov	r3, fp
 8000570:	0015      	movs	r5, r2
 8000572:	2b00      	cmp	r3, #0
 8000574:	db2a      	blt.n	80005cc <__udivmoddi4+0x184>
 8000576:	0026      	movs	r6, r4
 8000578:	409e      	lsls	r6, r3
 800057a:	0033      	movs	r3, r6
 800057c:	0026      	movs	r6, r4
 800057e:	4647      	mov	r7, r8
 8000580:	40be      	lsls	r6, r7
 8000582:	0032      	movs	r2, r6
 8000584:	1a80      	subs	r0, r0, r2
 8000586:	4199      	sbcs	r1, r3
 8000588:	9000      	str	r0, [sp, #0]
 800058a:	9101      	str	r1, [sp, #4]
 800058c:	e79e      	b.n	80004cc <__udivmoddi4+0x84>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d8bc      	bhi.n	800050c <__udivmoddi4+0xc4>
 8000592:	e782      	b.n	800049a <__udivmoddi4+0x52>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	2100      	movs	r1, #0
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	2200      	movs	r2, #0
 800059e:	9100      	str	r1, [sp, #0]
 80005a0:	9201      	str	r2, [sp, #4]
 80005a2:	2201      	movs	r2, #1
 80005a4:	40da      	lsrs	r2, r3
 80005a6:	9201      	str	r2, [sp, #4]
 80005a8:	e785      	b.n	80004b6 <__udivmoddi4+0x6e>
 80005aa:	4642      	mov	r2, r8
 80005ac:	2320      	movs	r3, #32
 80005ae:	1a9b      	subs	r3, r3, r2
 80005b0:	002a      	movs	r2, r5
 80005b2:	4646      	mov	r6, r8
 80005b4:	409a      	lsls	r2, r3
 80005b6:	0023      	movs	r3, r4
 80005b8:	40f3      	lsrs	r3, r6
 80005ba:	4644      	mov	r4, r8
 80005bc:	4313      	orrs	r3, r2
 80005be:	002a      	movs	r2, r5
 80005c0:	40e2      	lsrs	r2, r4
 80005c2:	001c      	movs	r4, r3
 80005c4:	465b      	mov	r3, fp
 80005c6:	0015      	movs	r5, r2
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	dad4      	bge.n	8000576 <__udivmoddi4+0x12e>
 80005cc:	4642      	mov	r2, r8
 80005ce:	002f      	movs	r7, r5
 80005d0:	2320      	movs	r3, #32
 80005d2:	0026      	movs	r6, r4
 80005d4:	4097      	lsls	r7, r2
 80005d6:	1a9b      	subs	r3, r3, r2
 80005d8:	40de      	lsrs	r6, r3
 80005da:	003b      	movs	r3, r7
 80005dc:	4333      	orrs	r3, r6
 80005de:	e7cd      	b.n	800057c <__udivmoddi4+0x134>

080005e0 <__clzdi2>:
 80005e0:	b510      	push	{r4, lr}
 80005e2:	2900      	cmp	r1, #0
 80005e4:	d103      	bne.n	80005ee <__clzdi2+0xe>
 80005e6:	f000 f807 	bl	80005f8 <__clzsi2>
 80005ea:	3020      	adds	r0, #32
 80005ec:	e002      	b.n	80005f4 <__clzdi2+0x14>
 80005ee:	0008      	movs	r0, r1
 80005f0:	f000 f802 	bl	80005f8 <__clzsi2>
 80005f4:	bd10      	pop	{r4, pc}
 80005f6:	46c0      	nop			@ (mov r8, r8)

080005f8 <__clzsi2>:
 80005f8:	211c      	movs	r1, #28
 80005fa:	2301      	movs	r3, #1
 80005fc:	041b      	lsls	r3, r3, #16
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0xe>
 8000602:	0c00      	lsrs	r0, r0, #16
 8000604:	3910      	subs	r1, #16
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	4298      	cmp	r0, r3
 800060a:	d301      	bcc.n	8000610 <__clzsi2+0x18>
 800060c:	0a00      	lsrs	r0, r0, #8
 800060e:	3908      	subs	r1, #8
 8000610:	091b      	lsrs	r3, r3, #4
 8000612:	4298      	cmp	r0, r3
 8000614:	d301      	bcc.n	800061a <__clzsi2+0x22>
 8000616:	0900      	lsrs	r0, r0, #4
 8000618:	3904      	subs	r1, #4
 800061a:	a202      	add	r2, pc, #8	@ (adr r2, 8000624 <__clzsi2+0x2c>)
 800061c:	5c10      	ldrb	r0, [r2, r0]
 800061e:	1840      	adds	r0, r0, r1
 8000620:	4770      	bx	lr
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	02020304 	.word	0x02020304
 8000628:	01010101 	.word	0x01010101
	...

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000636:	46c6      	mov	lr, r8
 8000638:	b500      	push	{lr}
 800063a:	b09a      	sub	sp, #104	@ 0x68
 800063c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f002 fa01 	bl	8002a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f8a7 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 f975 	bl	8000934 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800064a:	f000 f925 	bl	8000898 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800064e:	f000 f8ff 	bl	8000850 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  HAL_FLASH_Unlock();
 8000652:	f002 fc95 	bl	8002f80 <HAL_FLASH_Unlock>
  /* EEPROM Init */
  HAL_Delay(2000);
 8000656:	23fa      	movs	r3, #250	@ 0xfa
 8000658:	00db      	lsls	r3, r3, #3
 800065a:	0018      	movs	r0, r3
 800065c:	f002 fa78 	bl	8002b50 <HAL_Delay>
  EE_Init(EE_FORCED_ERASE);
 8000660:	2000      	movs	r0, #0
 8000662:	f000 fb61 	bl	8000d28 <EE_Init>

  unsigned char string_buffer[50];
  int string_buffer_size = -1;
 8000666:	2301      	movs	r3, #1
 8000668:	425b      	negs	r3, r3
 800066a:	64bb      	str	r3, [r7, #72]	@ 0x48

  HAL_UART_Transmit(&huart2, (uint8_t *)"haruhi\r\n", 8, 1000);
 800066c:	23fa      	movs	r3, #250	@ 0xfa
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4943      	ldr	r1, [pc, #268]	@ (8000780 <main+0x14c>)
 8000672:	4844      	ldr	r0, [pc, #272]	@ (8000784 <main+0x150>)
 8000674:	2208      	movs	r2, #8
 8000676:	f003 fe75 	bl	8004364 <HAL_UART_Transmit>

  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 0){ // If User Button is Pressed the Write EEPROM
 800067a:	2380      	movs	r3, #128	@ 0x80
 800067c:	019b      	lsls	r3, r3, #6
 800067e:	4a42      	ldr	r2, [pc, #264]	@ (8000788 <main+0x154>)
 8000680:	0019      	movs	r1, r3
 8000682:	0010      	movs	r0, r2
 8000684:	f002 ff16 	bl	80034b4 <HAL_GPIO_ReadPin>
 8000688:	1e03      	subs	r3, r0, #0
 800068a:	d11c      	bne.n	80006c6 <main+0x92>
	  char write_word[20] = "hatsune miku\r\nr";
 800068c:	0039      	movs	r1, r7
 800068e:	4a3f      	ldr	r2, [pc, #252]	@ (800078c <main+0x158>)
 8000690:	000b      	movs	r3, r1
 8000692:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000694:	c331      	stmia	r3!, {r0, r4, r5}
 8000696:	6812      	ldr	r2, [r2, #0]
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	2300      	movs	r3, #0
 800069c:	610b      	str	r3, [r1, #16]
	  //char write_word[20] = "Asahina Mikuru\r\nr";
	  //char write_word[20] = "Nagato Yuki\r\nrr";
	  //char write_word[20] = "Itsuki Koizumi\r\n";
	  for(int i=0;i<15;i++){
 800069e:	2300      	movs	r3, #0
 80006a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80006a2:	e00d      	b.n	80006c0 <main+0x8c>
		  EE_WriteVariable8bits(20 + i, write_word[i]);
 80006a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	3314      	adds	r3, #20
 80006aa:	b298      	uxth	r0, r3
 80006ac:	003a      	movs	r2, r7
 80006ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80006b0:	18d3      	adds	r3, r2, r3
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	0019      	movs	r1, r3
 80006b6:	f001 f9b9 	bl	8001a2c <EE_WriteVariable8bits>
	  for(int i=0;i<15;i++){
 80006ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80006bc:	3301      	adds	r3, #1
 80006be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80006c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80006c2:	2b0e      	cmp	r3, #14
 80006c4:	ddee      	ble.n	80006a4 <main+0x70>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// read data from eeprom
	EE_ReadVariable8bits(20, &string_buffer[0]);
 80006c6:	2414      	movs	r4, #20
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	0019      	movs	r1, r3
 80006cc:	2014      	movs	r0, #20
 80006ce:	f001 f97d 	bl	80019cc <EE_ReadVariable8bits>
	EE_ReadVariable8bits(21, &string_buffer[1]);
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	3301      	adds	r3, #1
 80006d6:	0019      	movs	r1, r3
 80006d8:	2015      	movs	r0, #21
 80006da:	f001 f977 	bl	80019cc <EE_ReadVariable8bits>
	EE_ReadVariable8bits(22, &string_buffer[2]);
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	3302      	adds	r3, #2
 80006e2:	0019      	movs	r1, r3
 80006e4:	2016      	movs	r0, #22
 80006e6:	f001 f971 	bl	80019cc <EE_ReadVariable8bits>
	EE_ReadVariable8bits(23, &string_buffer[3]);
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	3303      	adds	r3, #3
 80006ee:	0019      	movs	r1, r3
 80006f0:	2017      	movs	r0, #23
 80006f2:	f001 f96b 	bl	80019cc <EE_ReadVariable8bits>
	EE_ReadVariable8bits(24, &string_buffer[4]);
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	3304      	adds	r3, #4
 80006fa:	0019      	movs	r1, r3
 80006fc:	2018      	movs	r0, #24
 80006fe:	f001 f965 	bl	80019cc <EE_ReadVariable8bits>
	EE_ReadVariable8bits(25, &string_buffer[5]);
 8000702:	193b      	adds	r3, r7, r4
 8000704:	3305      	adds	r3, #5
 8000706:	0019      	movs	r1, r3
 8000708:	2019      	movs	r0, #25
 800070a:	f001 f95f 	bl	80019cc <EE_ReadVariable8bits>
	EE_ReadVariable8bits(26, &string_buffer[6]);
 800070e:	193b      	adds	r3, r7, r4
 8000710:	3306      	adds	r3, #6
 8000712:	0019      	movs	r1, r3
 8000714:	201a      	movs	r0, #26
 8000716:	f001 f959 	bl	80019cc <EE_ReadVariable8bits>

	//string_buffer_size = sprintf(string_buffer,"%s",string_buffer);
	string_buffer_size = sprintf(string_buffer,"%c%c%c%c%c%c%c%c\r\n",string_buffer[0],string_buffer[1],string_buffer[2],string_buffer[3],string_buffer[4],string_buffer[5],string_buffer[6]);
 800071a:	0020      	movs	r0, r4
 800071c:	183b      	adds	r3, r7, r0
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	469c      	mov	ip, r3
 8000722:	183b      	adds	r3, r7, r0
 8000724:	785b      	ldrb	r3, [r3, #1]
 8000726:	4698      	mov	r8, r3
 8000728:	183b      	adds	r3, r7, r0
 800072a:	789b      	ldrb	r3, [r3, #2]
 800072c:	001a      	movs	r2, r3
 800072e:	183b      	adds	r3, r7, r0
 8000730:	78db      	ldrb	r3, [r3, #3]
 8000732:	001c      	movs	r4, r3
 8000734:	183b      	adds	r3, r7, r0
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	001d      	movs	r5, r3
 800073a:	183b      	adds	r3, r7, r0
 800073c:	795b      	ldrb	r3, [r3, #5]
 800073e:	001e      	movs	r6, r3
 8000740:	183b      	adds	r3, r7, r0
 8000742:	799b      	ldrb	r3, [r3, #6]
 8000744:	4912      	ldr	r1, [pc, #72]	@ (8000790 <main+0x15c>)
 8000746:	1838      	adds	r0, r7, r0
 8000748:	9304      	str	r3, [sp, #16]
 800074a:	9603      	str	r6, [sp, #12]
 800074c:	9502      	str	r5, [sp, #8]
 800074e:	9401      	str	r4, [sp, #4]
 8000750:	9200      	str	r2, [sp, #0]
 8000752:	4643      	mov	r3, r8
 8000754:	4662      	mov	r2, ip
 8000756:	f004 fcb5 	bl	80050c4 <siprintf>
 800075a:	0003      	movs	r3, r0
 800075c:	64bb      	str	r3, [r7, #72]	@ 0x48
	HAL_UART_Transmit(&huart2, string_buffer, string_buffer_size, 1000);
 800075e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000760:	b29a      	uxth	r2, r3
 8000762:	23fa      	movs	r3, #250	@ 0xfa
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	2014      	movs	r0, #20
 8000768:	1839      	adds	r1, r7, r0
 800076a:	4806      	ldr	r0, [pc, #24]	@ (8000784 <main+0x150>)
 800076c:	f003 fdfa 	bl	8004364 <HAL_UART_Transmit>

	HAL_Delay (1000);
 8000770:	23fa      	movs	r3, #250	@ 0xfa
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	0018      	movs	r0, r3
 8000776:	f002 f9eb 	bl	8002b50 <HAL_Delay>
  {
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	e7a3      	b.n	80006c6 <main+0x92>
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	08005a28 	.word	0x08005a28
 8000784:	20000128 	.word	0x20000128
 8000788:	50000800 	.word	0x50000800
 800078c:	08005a48 	.word	0x08005a48
 8000790:	08005a34 	.word	0x08005a34

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b093      	sub	sp, #76	@ 0x4c
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	2410      	movs	r4, #16
 800079c:	193b      	adds	r3, r7, r4
 800079e:	0018      	movs	r0, r3
 80007a0:	2338      	movs	r3, #56	@ 0x38
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f004 fcad 	bl	8005104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007aa:	003b      	movs	r3, r7
 80007ac:	0018      	movs	r0, r3
 80007ae:	2310      	movs	r3, #16
 80007b0:	001a      	movs	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	f004 fca6 	bl	8005104 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2380      	movs	r3, #128	@ 0x80
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	0018      	movs	r0, r3
 80007be:	f002 feb3 	bl	8003528 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2202      	movs	r2, #2
 80007c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	2280      	movs	r2, #128	@ 0x80
 80007cc:	0052      	lsls	r2, r2, #1
 80007ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007d0:	0021      	movs	r1, r4
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2240      	movs	r2, #64	@ 0x40
 80007dc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2202      	movs	r2, #2
 80007e2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2202      	movs	r2, #2
 80007e8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2208      	movs	r2, #8
 80007f4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2280      	movs	r2, #128	@ 0x80
 80007fa:	0292      	lsls	r2, r2, #10
 80007fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2280      	movs	r2, #128	@ 0x80
 8000802:	0492      	lsls	r2, r2, #18
 8000804:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	0592      	lsls	r2, r2, #22
 800080c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080e:	187b      	adds	r3, r7, r1
 8000810:	0018      	movs	r0, r3
 8000812:	f002 fed5 	bl	80035c0 <HAL_RCC_OscConfig>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800081a:	f000 f8ed 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081e:	003b      	movs	r3, r7
 8000820:	2207      	movs	r2, #7
 8000822:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	003b      	movs	r3, r7
 8000826:	2202      	movs	r2, #2
 8000828:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082a:	003b      	movs	r3, r7
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000830:	003b      	movs	r3, r7
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000836:	003b      	movs	r3, r7
 8000838:	2102      	movs	r1, #2
 800083a:	0018      	movs	r0, r3
 800083c:	f003 f9da 	bl	8003bf4 <HAL_RCC_ClockConfig>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000844:	f000 f8d8 	bl	80009f8 <Error_Handler>
  }
}
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b013      	add	sp, #76	@ 0x4c
 800084e:	bd90      	pop	{r4, r7, pc}

08000850 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000854:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_CRC_Init+0x40>)
 8000856:	4a0f      	ldr	r2, [pc, #60]	@ (8000894 <MX_CRC_Init+0x44>)
 8000858:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800085a:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <MX_CRC_Init+0x40>)
 800085c:	2200      	movs	r2, #0
 800085e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000860:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <MX_CRC_Init+0x40>)
 8000862:	2200      	movs	r2, #0
 8000864:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000866:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <MX_CRC_Init+0x40>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800086c:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <MX_CRC_Init+0x40>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000872:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <MX_CRC_Init+0x40>)
 8000874:	2201      	movs	r2, #1
 8000876:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <MX_CRC_Init+0x40>)
 800087a:	0018      	movs	r0, r3
 800087c:	f002 fa56 	bl	8002d2c <HAL_CRC_Init>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d001      	beq.n	8000888 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000884:	f000 f8b8 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000888:	46c0      	nop			@ (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	20000104 	.word	0x20000104
 8000894:	40023000 	.word	0x40023000

08000898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800089c:	4b23      	ldr	r3, [pc, #140]	@ (800092c <MX_USART2_UART_Init+0x94>)
 800089e:	4a24      	ldr	r2, [pc, #144]	@ (8000930 <MX_USART2_UART_Init+0x98>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a2:	4b22      	ldr	r3, [pc, #136]	@ (800092c <MX_USART2_UART_Init+0x94>)
 80008a4:	22e1      	movs	r2, #225	@ 0xe1
 80008a6:	0252      	lsls	r2, r2, #9
 80008a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b20      	ldr	r3, [pc, #128]	@ (800092c <MX_USART2_UART_Init+0x94>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <MX_USART2_UART_Init+0x94>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	@ (800092c <MX_USART2_UART_Init+0x94>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <MX_USART2_UART_Init+0x94>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <MX_USART2_UART_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b18      	ldr	r3, [pc, #96]	@ (800092c <MX_USART2_UART_Init+0x94>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b17      	ldr	r3, [pc, #92]	@ (800092c <MX_USART2_UART_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d4:	4b15      	ldr	r3, [pc, #84]	@ (800092c <MX_USART2_UART_Init+0x94>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008da:	4b14      	ldr	r3, [pc, #80]	@ (800092c <MX_USART2_UART_Init+0x94>)
 80008dc:	2200      	movs	r2, #0
 80008de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_USART2_UART_Init+0x94>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f003 fce8 	bl	80042b8 <HAL_UART_Init>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008ec:	f000 f884 	bl	80009f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f0:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <MX_USART2_UART_Init+0x94>)
 80008f2:	2100      	movs	r1, #0
 80008f4:	0018      	movs	r0, r3
 80008f6:	f004 fb05 	bl	8004f04 <HAL_UARTEx_SetTxFifoThreshold>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008fe:	f000 f87b 	bl	80009f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000902:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <MX_USART2_UART_Init+0x94>)
 8000904:	2100      	movs	r1, #0
 8000906:	0018      	movs	r0, r3
 8000908:	f004 fb3c 	bl	8004f84 <HAL_UARTEx_SetRxFifoThreshold>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000910:	f000 f872 	bl	80009f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <MX_USART2_UART_Init+0x94>)
 8000916:	0018      	movs	r0, r3
 8000918:	f004 faba 	bl	8004e90 <HAL_UARTEx_DisableFifoMode>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000920:	f000 f86a 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000924:	46c0      	nop			@ (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	20000128 	.word	0x20000128
 8000930:	40004400 	.word	0x40004400

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b089      	sub	sp, #36	@ 0x24
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	240c      	movs	r4, #12
 800093c:	193b      	adds	r3, r7, r4
 800093e:	0018      	movs	r0, r3
 8000940:	2314      	movs	r3, #20
 8000942:	001a      	movs	r2, r3
 8000944:	2100      	movs	r1, #0
 8000946:	f004 fbdd 	bl	8005104 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	4b29      	ldr	r3, [pc, #164]	@ (80009f0 <MX_GPIO_Init+0xbc>)
 800094c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800094e:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <MX_GPIO_Init+0xbc>)
 8000950:	2104      	movs	r1, #4
 8000952:	430a      	orrs	r2, r1
 8000954:	635a      	str	r2, [r3, #52]	@ 0x34
 8000956:	4b26      	ldr	r3, [pc, #152]	@ (80009f0 <MX_GPIO_Init+0xbc>)
 8000958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800095a:	2204      	movs	r2, #4
 800095c:	4013      	ands	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000962:	4b23      	ldr	r3, [pc, #140]	@ (80009f0 <MX_GPIO_Init+0xbc>)
 8000964:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000966:	4b22      	ldr	r3, [pc, #136]	@ (80009f0 <MX_GPIO_Init+0xbc>)
 8000968:	2120      	movs	r1, #32
 800096a:	430a      	orrs	r2, r1
 800096c:	635a      	str	r2, [r3, #52]	@ 0x34
 800096e:	4b20      	ldr	r3, [pc, #128]	@ (80009f0 <MX_GPIO_Init+0xbc>)
 8000970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000972:	2220      	movs	r2, #32
 8000974:	4013      	ands	r3, r2
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <MX_GPIO_Init+0xbc>)
 800097c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800097e:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_GPIO_Init+0xbc>)
 8000980:	2101      	movs	r1, #1
 8000982:	430a      	orrs	r2, r1
 8000984:	635a      	str	r2, [r3, #52]	@ 0x34
 8000986:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <MX_GPIO_Init+0xbc>)
 8000988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800098a:	2201      	movs	r2, #1
 800098c:	4013      	ands	r3, r2
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000992:	23a0      	movs	r3, #160	@ 0xa0
 8000994:	05db      	lsls	r3, r3, #23
 8000996:	2200      	movs	r2, #0
 8000998:	2120      	movs	r1, #32
 800099a:	0018      	movs	r0, r3
 800099c:	f002 fda7 	bl	80034ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	2280      	movs	r2, #128	@ 0x80
 80009a4:	0192      	lsls	r2, r2, #6
 80009a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2200      	movs	r2, #0
 80009ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	4a0f      	ldr	r2, [pc, #60]	@ (80009f4 <MX_GPIO_Init+0xc0>)
 80009b8:	0019      	movs	r1, r3
 80009ba:	0010      	movs	r0, r2
 80009bc:	f002 fc16 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80009c0:	0021      	movs	r1, r4
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2220      	movs	r2, #32
 80009c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2201      	movs	r2, #1
 80009cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2202      	movs	r2, #2
 80009d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80009da:	187a      	adds	r2, r7, r1
 80009dc:	23a0      	movs	r3, #160	@ 0xa0
 80009de:	05db      	lsls	r3, r3, #23
 80009e0:	0011      	movs	r1, r2
 80009e2:	0018      	movs	r0, r3
 80009e4:	f002 fc02 	bl	80031ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e8:	46c0      	nop			@ (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b009      	add	sp, #36	@ 0x24
 80009ee:	bd90      	pop	{r4, r7, pc}
 80009f0:	40021000 	.word	0x40021000
 80009f4:	50000800 	.word	0x50000800

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	e7fd      	b.n	8000a00 <Error_Handler+0x8>

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a10:	2101      	movs	r1, #1
 8000a12:	430a      	orrs	r2, r1
 8000a14:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a26:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a28:	2180      	movs	r1, #128	@ 0x80
 8000a2a:	0549      	lsls	r1, r1, #21
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a30:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a34:	2380      	movs	r3, #128	@ 0x80
 8000a36:	055b      	lsls	r3, r3, #21
 8000a38:	4013      	ands	r3, r2
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000a3e:	23c0      	movs	r3, #192	@ 0xc0
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	0018      	movs	r0, r3
 8000a44:	f002 f8a8 	bl	8002b98 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a48:	46c0      	nop			@ (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40021000 	.word	0x40021000

08000a54 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <HAL_CRC_MspInit+0x38>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d10d      	bne.n	8000a82 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a66:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <HAL_CRC_MspInit+0x3c>)
 8000a68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <HAL_CRC_MspInit+0x3c>)
 8000a6c:	2180      	movs	r1, #128	@ 0x80
 8000a6e:	0149      	lsls	r1, r1, #5
 8000a70:	430a      	orrs	r2, r1
 8000a72:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_CRC_MspInit+0x3c>)
 8000a76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a78:	2380      	movs	r3, #128	@ 0x80
 8000a7a:	015b      	lsls	r3, r3, #5
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b004      	add	sp, #16
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	40023000 	.word	0x40023000
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b097      	sub	sp, #92	@ 0x5c
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	2344      	movs	r3, #68	@ 0x44
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	2314      	movs	r3, #20
 8000aa4:	001a      	movs	r2, r3
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	f004 fb2c 	bl	8005104 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aac:	2410      	movs	r4, #16
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	2334      	movs	r3, #52	@ 0x34
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	f004 fb24 	bl	8005104 <memset>
  if(huart->Instance==USART2)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a22      	ldr	r2, [pc, #136]	@ (8000b4c <HAL_UART_MspInit+0xb8>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d13e      	bne.n	8000b44 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	2202      	movs	r2, #2
 8000aca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f003 fa37 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 8000ada:	1e03      	subs	r3, r0, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ade:	f7ff ff8b 	bl	80009f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <HAL_UART_MspInit+0xbc>)
 8000ae4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <HAL_UART_MspInit+0xbc>)
 8000ae8:	2180      	movs	r1, #128	@ 0x80
 8000aea:	0289      	lsls	r1, r1, #10
 8000aec:	430a      	orrs	r2, r1
 8000aee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000af0:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <HAL_UART_MspInit+0xbc>)
 8000af2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000af4:	2380      	movs	r3, #128	@ 0x80
 8000af6:	029b      	lsls	r3, r3, #10
 8000af8:	4013      	ands	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <HAL_UART_MspInit+0xbc>)
 8000b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b02:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <HAL_UART_MspInit+0xbc>)
 8000b04:	2101      	movs	r1, #1
 8000b06:	430a      	orrs	r2, r1
 8000b08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b0a:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <HAL_UART_MspInit+0xbc>)
 8000b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b16:	2144      	movs	r1, #68	@ 0x44
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2202      	movs	r2, #2
 8000b22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2201      	movs	r2, #1
 8000b28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2201      	movs	r2, #1
 8000b34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	187a      	adds	r2, r7, r1
 8000b38:	23a0      	movs	r3, #160	@ 0xa0
 8000b3a:	05db      	lsls	r3, r3, #23
 8000b3c:	0011      	movs	r1, r2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f002 fb54 	bl	80031ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b44:	46c0      	nop			@ (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b017      	add	sp, #92	@ 0x5c
 8000b4a:	bd90      	pop	{r4, r7, pc}
 8000b4c:	40004400 	.word	0x40004400
 8000b50:	40021000 	.word	0x40021000

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b58:	46c0      	nop			@ (mov r8, r8)
 8000b5a:	e7fd      	b.n	8000b58 <NMI_Handler+0x4>

08000b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b60:	46c0      	nop			@ (mov r8, r8)
 8000b62:	e7fd      	b.n	8000b60 <HardFault_Handler+0x4>

08000b64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b68:	46c0      	nop			@ (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7c:	f001 ffcc 	bl	8002b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b90:	4a14      	ldr	r2, [pc, #80]	@ (8000be4 <_sbrk+0x5c>)
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <_sbrk+0x60>)
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b9c:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <_sbrk+0x64>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <_sbrk+0x68>)
 8000ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	18d3      	adds	r3, r2, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d207      	bcs.n	8000bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb8:	f004 faac 	bl	8005114 <__errno>
 8000bbc:	0003      	movs	r3, r0
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	425b      	negs	r3, r3
 8000bc6:	e009      	b.n	8000bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bce:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	18d2      	adds	r2, r2, r3
 8000bd6:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <_sbrk+0x64>)
 8000bd8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bda:	68fb      	ldr	r3, [r7, #12]
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b006      	add	sp, #24
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20009000 	.word	0x20009000
 8000be8:	00000400 	.word	0x00000400
 8000bec:	200001bc 	.word	0x200001bc
 8000bf0:	20000338 	.word	0x20000338

08000bf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	46c0      	nop			@ (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c00:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c04:	f7ff fff6 	bl	8000bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	@ (8000c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c44 <LoopForever+0xe>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	@ (8000c4c <LoopForever+0x16>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c2e:	f004 fa77 	bl	8005120 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c32:	f7ff fcff 	bl	8000634 <main>

08000c36 <LoopForever>:

LoopForever:
  b LoopForever
 8000c36:	e7fe      	b.n	8000c36 <LoopForever>
  ldr   r0, =_estack
 8000c38:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8000c44:	08005b28 	.word	0x08005b28
  ldr r2, =_sbss
 8000c48:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8000c4c:	20000334 	.word	0x20000334

08000c50 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC1_COMP_IRQHandler>

08000c52 <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	431a      	orrs	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	609a      	str	r2, [r3, #8]
}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b002      	add	sp, #8
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	2218      	movs	r2, #24
 8000c7e:	4393      	bics	r3, r2
 8000c80:	001a      	movs	r2, r3
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	431a      	orrs	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	609a      	str	r2, [r3, #8]
}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	615a      	str	r2, [r3, #20]
}
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b002      	add	sp, #8
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	601a      	str	r2, [r3, #0]
}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <LL_CRC_FeedData16>:
  * @param  CRCx CRC Instance
  * @param  InData 16 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	000a      	movs	r2, r1
 8000ccc:	1cbb      	adds	r3, r7, #2
 8000cce:	801a      	strh	r2, [r3, #0]
  __IO uint16_t *pReg;

  pReg = (__IO uint16_t *)(__IO void *)(&CRCx->DR);                             /* Derogation MisraC2012 R.11.5 */
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	60fb      	str	r3, [r7, #12]
  *pReg = InData;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	1cba      	adds	r2, r7, #2
 8000cd8:	8812      	ldrh	r2, [r2, #0]
 8000cda:	801a      	strh	r2, [r3, #0]
}
 8000cdc:	46c0      	nop			@ (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b004      	add	sp, #16
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(const CRC_TypeDef *CRCx)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	b29b      	uxth	r3, r3
}
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_RNG  (*)
  * @note   (*) RNG & CRYP Peripherals available only on STM32G081xx
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000d04:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000d06:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000d10:	4b04      	ldr	r3, [pc, #16]	@ (8000d24 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	4013      	ands	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	46c0      	nop			@ (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b004      	add	sp, #16
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40021000 	.word	0x40021000

08000d28 <EE_Init>:
  * @retval EE_Status
  *           - EE_OK in case of success
  *           - EE error code in case of error
  */
EE_Status EE_Init(EE_Erase_type EraseType)
{
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b090      	sub	sp, #64	@ 0x40
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	0002      	movs	r2, r0
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	701a      	strb	r2, [r3, #0]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8000d34:	231a      	movs	r3, #26
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	2205      	movs	r2, #5
 8000d3a:	701a      	strb	r2, [r3, #0]
  uint32_t page = 0U, pageaddress = 0U, varidx = 0U,
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d40:	2300      	movs	r3, #0
 8000d42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000d44:	2300      	movs	r3, #0
 8000d46:	637b      	str	r3, [r7, #52]	@ 0x34
           nbactivepage = 0U, nbactivereceivepage = 0U, nbvalidpage = 0U,
 8000d48:	2300      	movs	r3, #0
 8000d4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
           lastvalidpage = 0U, firstvalidpage = 0U,
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
           recoverytransfer = 0U;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8000d60:	2200      	movs	r2, #0
 8000d62:	2300      	movs	r3, #0
 8000d64:	613a      	str	r2, [r7, #16]
 8000d66:	617b      	str	r3, [r7, #20]
#ifdef FLASH_LINES_128B
  uint32_t Address = 0U;
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  EE_DATA_TYPE dummy_data[2] = {0, 0};
#endif
  EE_State_Reliability pagestate = STATE_RELIABLE;
 8000d68:	231b      	movs	r3, #27
 8000d6a:	18fb      	adds	r3, r7, r3
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]

  EE_Status status = EE_OK;
 8000d70:	230e      	movs	r3, #14
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	2200      	movs	r2, #0
 8000d76:	801a      	strh	r2, [r3, #0]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 8000d78:	f001 fe5d 	bl	8002a36 <FI_CheckBankConfig>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d002      	beq.n	8000d86 <EE_Init+0x5e>
  {
    return EE_INVALID_BANK_CFG;
 8000d80:	230e      	movs	r3, #14
 8000d82:	f000 fd72 	bl	800186a <EE_Init+0xb42>
  /***************************************************************************/
  /* Step 0: Perform initial configuration     */
  /***************************************************************************/
  /* Configure CRC peripheral for eeprom emulation usage */

  ConfigureCrc();
 8000d86:	f001 fdd7 	bl	8002938 <ConfigureCrc>
  /* Step 1: Read all lines of the flash pages of eeprom emulation to        */
  /*         delete corrupted lines detectable through NMI                   */
  /***************************************************************************/
  /* We set the flag indicating the cleanup phase is operating to 1 */

  CleanupPhase = 1;
 8000d8a:	4baa      	ldr	r3, [pc, #680]	@ (8001034 <EE_Init+0x30c>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
  
#ifndef STM32C031xx
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8000d90:	4ba9      	ldr	r3, [pc, #676]	@ (8001038 <EE_Init+0x310>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	029a      	lsls	r2, r3, #10
 8000d96:	23ff      	movs	r3, #255	@ 0xff
 8000d98:	029b      	lsls	r3, r3, #10
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	2380      	movs	r3, #128	@ 0x80
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	0011      	movs	r1, r2
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff fa40 	bl	8000228 <__aeabi_uidivmod>
 8000da8:	000b      	movs	r3, r1
 8000daa:	0adb      	lsrs	r3, r3, #11
 8000dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000dae:	e035      	b.n	8000e1c <EE_Init+0xf4>
  {
    pageaddress = PAGE_ADDRESS(page);
 8000db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000db2:	2280      	movs	r2, #128	@ 0x80
 8000db4:	0252      	lsls	r2, r2, #9
 8000db6:	4694      	mov	ip, r2
 8000db8:	4463      	add	r3, ip
 8000dba:	02dc      	lsls	r4, r3, #11
 8000dbc:	4b9e      	ldr	r3, [pc, #632]	@ (8001038 <EE_Init+0x310>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	029a      	lsls	r2, r3, #10
 8000dc2:	23ff      	movs	r3, #255	@ 0xff
 8000dc4:	029b      	lsls	r3, r3, #10
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	0019      	movs	r1, r3
 8000dca:	2380      	movs	r3, #128	@ 0x80
 8000dcc:	0218      	lsls	r0, r3, #8
 8000dce:	f7ff f9a5 	bl	800011c <__udivsi3>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	4b98      	ldr	r3, [pc, #608]	@ (8001038 <EE_Init+0x310>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	029a      	lsls	r2, r3, #10
 8000ddc:	23ff      	movs	r3, #255	@ 0xff
 8000dde:	029b      	lsls	r3, r3, #10
 8000de0:	4013      	ands	r3, r2
 8000de2:	434b      	muls	r3, r1
 8000de4:	18e3      	adds	r3, r4, r3
 8000de6:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8000de8:	2300      	movs	r3, #0
 8000dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8000dec:	e00e      	b.n	8000e0c <EE_Init+0xe4>
        we save the address read to set its content to 0 in case it triggered an NMI (see NMI_Handler in stm32lxxx_it.c).
        In the rest of the program, we do nothing in case a NMI is triggers by a reading because no NMI should be triggered
        since we have cleanup the EEPROM emulated. By the way, there is still the CRC code associated to each EEPROM line
        that allows to verify its valid state.
      */
      AddressRead = pageaddress + varidx;
 8000dee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000df2:	18d2      	adds	r2, r2, r3
 8000df4:	4b91      	ldr	r3, [pc, #580]	@ (800103c <EE_Init+0x314>)
 8000df6:	601a      	str	r2, [r3, #0]
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + varidx));
 8000df8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dfc:	18d3      	adds	r3, r2, r3
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	613a      	str	r2, [r7, #16]
 8000e04:	617b      	str	r3, [r7, #20]
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8000e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e08:	3308      	adds	r3, #8
 8000e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e0e:	2380      	movs	r3, #128	@ 0x80
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d3eb      	bcc.n	8000dee <EE_Init+0xc6>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8000e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e18:	3301      	adds	r3, #1
 8000e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e1c:	4b86      	ldr	r3, [pc, #536]	@ (8001038 <EE_Init+0x310>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	029a      	lsls	r2, r3, #10
 8000e22:	23ff      	movs	r3, #255	@ 0xff
 8000e24:	029b      	lsls	r3, r3, #10
 8000e26:	401a      	ands	r2, r3
 8000e28:	2380      	movs	r3, #128	@ 0x80
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	0011      	movs	r1, r2
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f7ff f9fa 	bl	8000228 <__aeabi_uidivmod>
 8000e34:	000b      	movs	r3, r1
 8000e36:	0adb      	lsrs	r3, r3, #11
 8000e38:	330a      	adds	r3, #10
 8000e3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d3b7      	bcc.n	8000db0 <EE_Init+0x88>
     EE_DeleteCorruptedFlashAddress(Address);     //Delete corrupted address  
  }
#endif
#endif
  /* We set the flag indicating the cleanup phase is operating to 0 because it just ended */
  CleanupPhase = 0;
 8000e40:	4b7c      	ldr	r3, [pc, #496]	@ (8001034 <EE_Init+0x30c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
  /*         present, by setting missing receive page state                  */
  /***************************************************************************/
  /* Check if no active page and no receive page present */
  /* Browse all pages */

  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8000e46:	4b7c      	ldr	r3, [pc, #496]	@ (8001038 <EE_Init+0x310>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	029a      	lsls	r2, r3, #10
 8000e4c:	23ff      	movs	r3, #255	@ 0xff
 8000e4e:	029b      	lsls	r3, r3, #10
 8000e50:	401a      	ands	r2, r3
 8000e52:	2380      	movs	r3, #128	@ 0x80
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff f9e5 	bl	8000228 <__aeabi_uidivmod>
 8000e5e:	000b      	movs	r3, r1
 8000e60:	0adb      	lsrs	r3, r3, #11
 8000e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e64:	e041      	b.n	8000eea <EE_Init+0x1c2>
  {
    pageaddress = PAGE_ADDRESS(page);
 8000e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e68:	2280      	movs	r2, #128	@ 0x80
 8000e6a:	0252      	lsls	r2, r2, #9
 8000e6c:	4694      	mov	ip, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	02dc      	lsls	r4, r3, #11
 8000e72:	4b71      	ldr	r3, [pc, #452]	@ (8001038 <EE_Init+0x310>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	029a      	lsls	r2, r3, #10
 8000e78:	23ff      	movs	r3, #255	@ 0xff
 8000e7a:	029b      	lsls	r3, r3, #10
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	0019      	movs	r1, r3
 8000e80:	2380      	movs	r3, #128	@ 0x80
 8000e82:	0218      	lsls	r0, r3, #8
 8000e84:	f7ff f94a 	bl	800011c <__udivsi3>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8001038 <EE_Init+0x310>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	029a      	lsls	r2, r3, #10
 8000e92:	23ff      	movs	r3, #255	@ 0xff
 8000e94:	029b      	lsls	r3, r3, #10
 8000e96:	4013      	ands	r3, r2
 8000e98:	434b      	muls	r3, r1
 8000e9a:	18e3      	adds	r3, r4, r3
 8000e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8000e9e:	251a      	movs	r5, #26
 8000ea0:	197c      	adds	r4, r7, r5
 8000ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f001 fcf7 	bl	8002898 <GetPageState>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	7023      	strb	r3, [r4, #0]

    /* Search for active and receive page */
    if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_RECEIVE))
 8000eae:	197b      	adds	r3, r7, r5
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d003      	beq.n	8000ebe <EE_Init+0x196>
 8000eb6:	197b      	adds	r3, r7, r5
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d103      	bne.n	8000ec6 <EE_Init+0x19e>
    {
      nbactivereceivepage++;
 8000ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ec4:	e00e      	b.n	8000ee4 <EE_Init+0x1bc>
    }
    /* Keep index of first valid page, and last valid page */
    else if (pagestatus == STATE_PAGE_VALID)
 8000ec6:	231a      	movs	r3, #26
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d109      	bne.n	8000ee4 <EE_Init+0x1bc>
    {
      if (nbvalidpage == 0U)
 8000ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <EE_Init+0x1b2>
      {
        firstvalidpage = page;
 8000ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ed8:	623b      	str	r3, [r7, #32]
      }
      lastvalidpage = page;
 8000eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
      nbvalidpage++;
 8000ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8000ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000eea:	4b53      	ldr	r3, [pc, #332]	@ (8001038 <EE_Init+0x310>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	029a      	lsls	r2, r3, #10
 8000ef0:	23ff      	movs	r3, #255	@ 0xff
 8000ef2:	029b      	lsls	r3, r3, #10
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	2380      	movs	r3, #128	@ 0x80
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	0011      	movs	r1, r2
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff f993 	bl	8000228 <__aeabi_uidivmod>
 8000f02:	000b      	movs	r3, r1
 8000f04:	0adb      	lsrs	r3, r3, #11
 8000f06:	330a      	adds	r3, #10
 8000f08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d3ab      	bcc.n	8000e66 <EE_Init+0x13e>
    }
  }

  /* Check if no active and no receive page have been detected */
  if (nbactivereceivepage == 0U)
 8000f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d000      	beq.n	8000f16 <EE_Init+0x1ee>
 8000f14:	e07d      	b.n	8001012 <EE_Init+0x2ea>
  {
    /* Check if valid pages have been detected */
    if (nbvalidpage > 0U)
 8000f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d074      	beq.n	8001006 <EE_Init+0x2de>
    {
      /* Check state of page just before first valid page.
      If it is erasing page, then page after last valid page shall be set
      to receiving state */
      if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(firstvalidpage))) == STATE_PAGE_ERASING)
 8000f1c:	4b46      	ldr	r3, [pc, #280]	@ (8001038 <EE_Init+0x310>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	029a      	lsls	r2, r3, #10
 8000f22:	23ff      	movs	r3, #255	@ 0xff
 8000f24:	029b      	lsls	r3, r3, #10
 8000f26:	401a      	ands	r2, r3
 8000f28:	2380      	movs	r3, #128	@ 0x80
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	0011      	movs	r1, r2
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f7ff f97a 	bl	8000228 <__aeabi_uidivmod>
 8000f34:	000b      	movs	r3, r1
 8000f36:	0adb      	lsrs	r3, r3, #11
 8000f38:	6a3a      	ldr	r2, [r7, #32]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	3309      	adds	r3, #9
 8000f3e:	210a      	movs	r1, #10
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff f971 	bl	8000228 <__aeabi_uidivmod>
 8000f46:	000b      	movs	r3, r1
 8000f48:	001c      	movs	r4, r3
 8000f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001038 <EE_Init+0x310>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	029a      	lsls	r2, r3, #10
 8000f50:	23ff      	movs	r3, #255	@ 0xff
 8000f52:	029b      	lsls	r3, r3, #10
 8000f54:	401a      	ands	r2, r3
 8000f56:	2380      	movs	r3, #128	@ 0x80
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	0011      	movs	r1, r2
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f7ff f963 	bl	8000228 <__aeabi_uidivmod>
 8000f62:	000b      	movs	r3, r1
 8000f64:	0adb      	lsrs	r3, r3, #11
 8000f66:	18e3      	adds	r3, r4, r3
 8000f68:	2280      	movs	r2, #128	@ 0x80
 8000f6a:	0252      	lsls	r2, r2, #9
 8000f6c:	4694      	mov	ip, r2
 8000f6e:	4463      	add	r3, ip
 8000f70:	02dc      	lsls	r4, r3, #11
 8000f72:	4b31      	ldr	r3, [pc, #196]	@ (8001038 <EE_Init+0x310>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	029a      	lsls	r2, r3, #10
 8000f78:	23ff      	movs	r3, #255	@ 0xff
 8000f7a:	029b      	lsls	r3, r3, #10
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	0019      	movs	r1, r3
 8000f80:	2380      	movs	r3, #128	@ 0x80
 8000f82:	0218      	lsls	r0, r3, #8
 8000f84:	f7ff f8ca 	bl	800011c <__udivsi3>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001038 <EE_Init+0x310>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	029a      	lsls	r2, r3, #10
 8000f92:	23ff      	movs	r3, #255	@ 0xff
 8000f94:	029b      	lsls	r3, r3, #10
 8000f96:	4013      	ands	r3, r2
 8000f98:	434b      	muls	r3, r1
 8000f9a:	18e3      	adds	r3, r4, r3
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f001 fc7b 	bl	8002898 <GetPageState>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d134      	bne.n	8001012 <EE_Init+0x2ea>
      {
        if (SetPageState(FOLLOWING_PAGE(lastvalidpage), STATE_PAGE_RECEIVE) != EE_OK)
 8000fa8:	4b23      	ldr	r3, [pc, #140]	@ (8001038 <EE_Init+0x310>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	029a      	lsls	r2, r3, #10
 8000fae:	23ff      	movs	r3, #255	@ 0xff
 8000fb0:	029b      	lsls	r3, r3, #10
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	2380      	movs	r3, #128	@ 0x80
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	0011      	movs	r1, r2
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f7ff f934 	bl	8000228 <__aeabi_uidivmod>
 8000fc0:	000b      	movs	r3, r1
 8000fc2:	0adb      	lsrs	r3, r3, #11
 8000fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	3301      	adds	r3, #1
 8000fca:	210a      	movs	r1, #10
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff f92b 	bl	8000228 <__aeabi_uidivmod>
 8000fd2:	000b      	movs	r3, r1
 8000fd4:	001c      	movs	r4, r3
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <EE_Init+0x310>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	029a      	lsls	r2, r3, #10
 8000fdc:	23ff      	movs	r3, #255	@ 0xff
 8000fde:	029b      	lsls	r3, r3, #10
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	2380      	movs	r3, #128	@ 0x80
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	0011      	movs	r1, r2
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f7ff f91d 	bl	8000228 <__aeabi_uidivmod>
 8000fee:	000b      	movs	r3, r1
 8000ff0:	0adb      	lsrs	r3, r3, #11
 8000ff2:	18e3      	adds	r3, r4, r3
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f001 fb7c 	bl	80026f4 <SetPageState>
 8000ffc:	1e03      	subs	r3, r0, #0
 8000ffe:	d008      	beq.n	8001012 <EE_Init+0x2ea>
        {
          return EE_WRITE_ERROR;
 8001000:	2302      	movs	r3, #2
 8001002:	f000 fc32 	bl	800186a <EE_Init+0xb42>
      }
    }
    /* Format flash pages used for eeprom emulation in case no active, no receive, no valid pages are found */
    else
    {
      return EE_Format(EE_FORCED_ERASE);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 fc36 	bl	8001878 <EE_Format>
 800100c:	0003      	movs	r3, r0
 800100e:	f000 fc2c 	bl	800186a <EE_Init+0xb42>
  /* Step 3: Handle case of reset during transfer, by performing       */
  /*         transfer recovery                                         */
  /*********************************************************************/

  /* Browse all pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <EE_Init+0x310>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	029a      	lsls	r2, r3, #10
 8001018:	23ff      	movs	r3, #255	@ 0xff
 800101a:	029b      	lsls	r3, r3, #10
 800101c:	401a      	ands	r2, r3
 800101e:	2380      	movs	r3, #128	@ 0x80
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	0011      	movs	r1, r2
 8001024:	0018      	movs	r0, r3
 8001026:	f7ff f8ff 	bl	8000228 <__aeabi_uidivmod>
 800102a:	000b      	movs	r3, r1
 800102c:	0adb      	lsrs	r3, r3, #11
 800102e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001030:	e10c      	b.n	800124c <EE_Init+0x524>
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	200001c8 	.word	0x200001c8
 8001038:	1fff75e0 	.word	0x1fff75e0
 800103c:	200001c4 	.word	0x200001c4
  {
    pageaddress = PAGE_ADDRESS(page);
 8001040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001042:	2280      	movs	r2, #128	@ 0x80
 8001044:	0252      	lsls	r2, r2, #9
 8001046:	4694      	mov	ip, r2
 8001048:	4463      	add	r3, ip
 800104a:	02dc      	lsls	r4, r3, #11
 800104c:	4be0      	ldr	r3, [pc, #896]	@ (80013d0 <EE_Init+0x6a8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	029a      	lsls	r2, r3, #10
 8001052:	23ff      	movs	r3, #255	@ 0xff
 8001054:	029b      	lsls	r3, r3, #10
 8001056:	4013      	ands	r3, r2
 8001058:	0019      	movs	r1, r3
 800105a:	2380      	movs	r3, #128	@ 0x80
 800105c:	0218      	lsls	r0, r3, #8
 800105e:	f7ff f85d 	bl	800011c <__udivsi3>
 8001062:	0003      	movs	r3, r0
 8001064:	0019      	movs	r1, r3
 8001066:	4bda      	ldr	r3, [pc, #872]	@ (80013d0 <EE_Init+0x6a8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	029a      	lsls	r2, r3, #10
 800106c:	23ff      	movs	r3, #255	@ 0xff
 800106e:	029b      	lsls	r3, r3, #10
 8001070:	4013      	ands	r3, r2
 8001072:	434b      	muls	r3, r1
 8001074:	18e3      	adds	r3, r4, r3
 8001076:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8001078:	251a      	movs	r5, #26
 800107a:	197c      	adds	r4, r7, r5
 800107c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800107e:	0018      	movs	r0, r3
 8001080:	f001 fc0a 	bl	8002898 <GetPageState>
 8001084:	0003      	movs	r3, r0
 8001086:	7023      	strb	r3, [r4, #0]

    /* Check if there is receive page, meaning transfer has been interrupted */
    if (pagestatus == STATE_PAGE_RECEIVE)
 8001088:	197b      	adds	r3, r7, r5
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d000      	beq.n	8001092 <EE_Init+0x36a>
 8001090:	e0d9      	b.n	8001246 <EE_Init+0x51e>
    {
      /* Verify that receive page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8001092:	4bcf      	ldr	r3, [pc, #828]	@ (80013d0 <EE_Init+0x6a8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	029a      	lsls	r2, r3, #10
 8001098:	23ff      	movs	r3, #255	@ 0xff
 800109a:	029b      	lsls	r3, r3, #10
 800109c:	401a      	ands	r2, r3
 800109e:	2380      	movs	r3, #128	@ 0x80
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	0011      	movs	r1, r2
 80010a4:	0018      	movs	r0, r3
 80010a6:	f7ff f8bf 	bl	8000228 <__aeabi_uidivmod>
 80010aa:	000b      	movs	r3, r1
 80010ac:	0adb      	lsrs	r3, r3, #11
 80010ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d061      	beq.n	8001178 <EE_Init+0x450>
 80010b4:	4bc6      	ldr	r3, [pc, #792]	@ (80013d0 <EE_Init+0x6a8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	029a      	lsls	r2, r3, #10
 80010ba:	23ff      	movs	r3, #255	@ 0xff
 80010bc:	029b      	lsls	r3, r3, #10
 80010be:	401a      	ands	r2, r3
 80010c0:	2380      	movs	r3, #128	@ 0x80
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	0011      	movs	r1, r2
 80010c6:	0018      	movs	r0, r3
 80010c8:	f7ff f8ae 	bl	8000228 <__aeabi_uidivmod>
 80010cc:	000b      	movs	r3, r1
 80010ce:	0adb      	lsrs	r3, r3, #11
 80010d0:	3305      	adds	r3, #5
 80010d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d04f      	beq.n	8001178 <EE_Init+0x450>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 80010d8:	4bbd      	ldr	r3, [pc, #756]	@ (80013d0 <EE_Init+0x6a8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	029a      	lsls	r2, r3, #10
 80010de:	23ff      	movs	r3, #255	@ 0xff
 80010e0:	029b      	lsls	r3, r3, #10
 80010e2:	401a      	ands	r2, r3
 80010e4:	2380      	movs	r3, #128	@ 0x80
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	0011      	movs	r1, r2
 80010ea:	0018      	movs	r0, r3
 80010ec:	f7ff f89c 	bl	8000228 <__aeabi_uidivmod>
 80010f0:	000b      	movs	r3, r1
 80010f2:	0adb      	lsrs	r3, r3, #11
 80010f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	3309      	adds	r3, #9
 80010fa:	210a      	movs	r1, #10
 80010fc:	0018      	movs	r0, r3
 80010fe:	f7ff f893 	bl	8000228 <__aeabi_uidivmod>
 8001102:	000b      	movs	r3, r1
 8001104:	001c      	movs	r4, r3
 8001106:	4bb2      	ldr	r3, [pc, #712]	@ (80013d0 <EE_Init+0x6a8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	029a      	lsls	r2, r3, #10
 800110c:	23ff      	movs	r3, #255	@ 0xff
 800110e:	029b      	lsls	r3, r3, #10
 8001110:	401a      	ands	r2, r3
 8001112:	2380      	movs	r3, #128	@ 0x80
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	0011      	movs	r1, r2
 8001118:	0018      	movs	r0, r3
 800111a:	f7ff f885 	bl	8000228 <__aeabi_uidivmod>
 800111e:	000b      	movs	r3, r1
 8001120:	0adb      	lsrs	r3, r3, #11
 8001122:	18e3      	adds	r3, r4, r3
 8001124:	2280      	movs	r2, #128	@ 0x80
 8001126:	0252      	lsls	r2, r2, #9
 8001128:	4694      	mov	ip, r2
 800112a:	4463      	add	r3, ip
 800112c:	02dc      	lsls	r4, r3, #11
 800112e:	4ba8      	ldr	r3, [pc, #672]	@ (80013d0 <EE_Init+0x6a8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	029a      	lsls	r2, r3, #10
 8001134:	23ff      	movs	r3, #255	@ 0xff
 8001136:	029b      	lsls	r3, r3, #10
 8001138:	4013      	ands	r3, r2
 800113a:	0019      	movs	r1, r3
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	0218      	lsls	r0, r3, #8
 8001140:	f7fe ffec 	bl	800011c <__udivsi3>
 8001144:	0003      	movs	r3, r0
 8001146:	0019      	movs	r1, r3
 8001148:	4ba1      	ldr	r3, [pc, #644]	@ (80013d0 <EE_Init+0x6a8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	029a      	lsls	r2, r3, #10
 800114e:	23ff      	movs	r3, #255	@ 0xff
 8001150:	029b      	lsls	r3, r3, #10
 8001152:	4013      	ands	r3, r2
 8001154:	434b      	muls	r3, r1
 8001156:	18e3      	adds	r3, r4, r3
 8001158:	0018      	movs	r0, r3
 800115a:	f001 fb9d 	bl	8002898 <GetPageState>
 800115e:	0003      	movs	r3, r0
 8001160:	2b03      	cmp	r3, #3
 8001162:	d104      	bne.n	800116e <EE_Init+0x446>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8001164:	231b      	movs	r3, #27
 8001166:	18fb      	adds	r3, r7, r3
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800116c:	e052      	b.n	8001214 <EE_Init+0x4ec>
        }
        else /* Previous page is not valid state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800116e:	231b      	movs	r3, #27
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8001176:	e04d      	b.n	8001214 <EE_Init+0x4ec>
        }
      }
      else /* The receive page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8001178:	4b95      	ldr	r3, [pc, #596]	@ (80013d0 <EE_Init+0x6a8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	029a      	lsls	r2, r3, #10
 800117e:	23ff      	movs	r3, #255	@ 0xff
 8001180:	029b      	lsls	r3, r3, #10
 8001182:	401a      	ands	r2, r3
 8001184:	2380      	movs	r3, #128	@ 0x80
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	0011      	movs	r1, r2
 800118a:	0018      	movs	r0, r3
 800118c:	f7ff f84c 	bl	8000228 <__aeabi_uidivmod>
 8001190:	000b      	movs	r3, r1
 8001192:	0adb      	lsrs	r3, r3, #11
 8001194:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	3301      	adds	r3, #1
 800119a:	210a      	movs	r1, #10
 800119c:	0018      	movs	r0, r3
 800119e:	f7ff f843 	bl	8000228 <__aeabi_uidivmod>
 80011a2:	000b      	movs	r3, r1
 80011a4:	001c      	movs	r4, r3
 80011a6:	4b8a      	ldr	r3, [pc, #552]	@ (80013d0 <EE_Init+0x6a8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	029a      	lsls	r2, r3, #10
 80011ac:	23ff      	movs	r3, #255	@ 0xff
 80011ae:	029b      	lsls	r3, r3, #10
 80011b0:	401a      	ands	r2, r3
 80011b2:	2380      	movs	r3, #128	@ 0x80
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	0011      	movs	r1, r2
 80011b8:	0018      	movs	r0, r3
 80011ba:	f7ff f835 	bl	8000228 <__aeabi_uidivmod>
 80011be:	000b      	movs	r3, r1
 80011c0:	0adb      	lsrs	r3, r3, #11
 80011c2:	18e3      	adds	r3, r4, r3
 80011c4:	2280      	movs	r2, #128	@ 0x80
 80011c6:	0252      	lsls	r2, r2, #9
 80011c8:	4694      	mov	ip, r2
 80011ca:	4463      	add	r3, ip
 80011cc:	02dc      	lsls	r4, r3, #11
 80011ce:	4b80      	ldr	r3, [pc, #512]	@ (80013d0 <EE_Init+0x6a8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	029a      	lsls	r2, r3, #10
 80011d4:	23ff      	movs	r3, #255	@ 0xff
 80011d6:	029b      	lsls	r3, r3, #10
 80011d8:	4013      	ands	r3, r2
 80011da:	0019      	movs	r1, r3
 80011dc:	2380      	movs	r3, #128	@ 0x80
 80011de:	0218      	lsls	r0, r3, #8
 80011e0:	f7fe ff9c 	bl	800011c <__udivsi3>
 80011e4:	0003      	movs	r3, r0
 80011e6:	0019      	movs	r1, r3
 80011e8:	4b79      	ldr	r3, [pc, #484]	@ (80013d0 <EE_Init+0x6a8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	029a      	lsls	r2, r3, #10
 80011ee:	23ff      	movs	r3, #255	@ 0xff
 80011f0:	029b      	lsls	r3, r3, #10
 80011f2:	4013      	ands	r3, r2
 80011f4:	434b      	muls	r3, r1
 80011f6:	18e3      	adds	r3, r4, r3
 80011f8:	0018      	movs	r0, r3
 80011fa:	f001 fb4d 	bl	8002898 <GetPageState>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d104      	bne.n	800120c <EE_Init+0x4e4>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8001202:	231b      	movs	r3, #27
 8001204:	18fb      	adds	r3, r7, r3
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	e003      	b.n	8001214 <EE_Init+0x4ec>
        }
        else /* Following page is not erased state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800120c:	231b      	movs	r3, #27
 800120e:	18fb      	adds	r3, r7, r3
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
        }
      }

      /* If the receive page is a true receive page, resume pages transfer */
      if (pagestate == STATE_RELIABLE)
 8001214:	231b      	movs	r3, #27
 8001216:	18fb      	adds	r3, r7, r3
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d113      	bne.n	8001246 <EE_Init+0x51e>
      {
        /* Initialize current active page */
        ubCurrentActivePage = page;
 800121e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b6c      	ldr	r3, [pc, #432]	@ (80013d4 <EE_Init+0x6ac>)
 8001224:	701a      	strb	r2, [r3, #0]

        /* Resume the interrupted page transfer, using dummy new data */
#ifndef FLASH_LINES_128B  
        if (PagesTransfer(0U, 0U, EE_TRANSFER_RECOVER) != EE_CLEANUP_REQUIRED)
 8001226:	2201      	movs	r2, #1
 8001228:	2100      	movs	r1, #0
 800122a:	2000      	movs	r0, #0
 800122c:	f000 ff52 	bl	80020d4 <PagesTransfer>
 8001230:	0003      	movs	r3, r0
 8001232:	001a      	movs	r2, r3
 8001234:	2380      	movs	r3, #128	@ 0x80
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	429a      	cmp	r2, r3
 800123a:	d001      	beq.n	8001240 <EE_Init+0x518>
        {
          return EE_TRANSFER_ERROR;
 800123c:	230c      	movs	r3, #12
 800123e:	e314      	b.n	800186a <EE_Init+0xb42>
        {
          return EE_TRANSFER_ERROR;
        }
#endif
        /* Memorize transfer recovery occured */
        recoverytransfer = 1U;
 8001240:	2301      	movs	r3, #1
 8001242:	61fb      	str	r3, [r7, #28]

        /* transfer recovery is done, then stop searching receive page */
        break;
 8001244:	e015      	b.n	8001272 <EE_Init+0x54a>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8001246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001248:	3301      	adds	r3, #1
 800124a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800124c:	4b60      	ldr	r3, [pc, #384]	@ (80013d0 <EE_Init+0x6a8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	029a      	lsls	r2, r3, #10
 8001252:	23ff      	movs	r3, #255	@ 0xff
 8001254:	029b      	lsls	r3, r3, #10
 8001256:	401a      	ands	r2, r3
 8001258:	2380      	movs	r3, #128	@ 0x80
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	0011      	movs	r1, r2
 800125e:	0018      	movs	r0, r3
 8001260:	f7fe ffe2 	bl	8000228 <__aeabi_uidivmod>
 8001264:	000b      	movs	r3, r1
 8001266:	0adb      	lsrs	r3, r3, #11
 8001268:	330a      	adds	r3, #10
 800126a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800126c:	429a      	cmp	r2, r3
 800126e:	d200      	bcs.n	8001272 <EE_Init+0x54a>
 8001270:	e6e6      	b.n	8001040 <EE_Init+0x318>
  /*         If more than one active page, raise error                 */
  /*         If no active page present, set missing active page        */
  /*********************************************************************/

  /* Browse all pages to search for active pages */
  nbactivepage = 0U;
 8001272:	2300      	movs	r3, #0
 8001274:	633b      	str	r3, [r7, #48]	@ 0x30
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8001276:	4b56      	ldr	r3, [pc, #344]	@ (80013d0 <EE_Init+0x6a8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	029a      	lsls	r2, r3, #10
 800127c:	23ff      	movs	r3, #255	@ 0xff
 800127e:	029b      	lsls	r3, r3, #10
 8001280:	401a      	ands	r2, r3
 8001282:	2380      	movs	r3, #128	@ 0x80
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	0011      	movs	r1, r2
 8001288:	0018      	movs	r0, r3
 800128a:	f7fe ffcd 	bl	8000228 <__aeabi_uidivmod>
 800128e:	000b      	movs	r3, r1
 8001290:	0adb      	lsrs	r3, r3, #11
 8001292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001294:	e10a      	b.n	80014ac <EE_Init+0x784>
  {
    pageaddress = PAGE_ADDRESS(page);
 8001296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001298:	2280      	movs	r2, #128	@ 0x80
 800129a:	0252      	lsls	r2, r2, #9
 800129c:	4694      	mov	ip, r2
 800129e:	4463      	add	r3, ip
 80012a0:	02dc      	lsls	r4, r3, #11
 80012a2:	4b4b      	ldr	r3, [pc, #300]	@ (80013d0 <EE_Init+0x6a8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	029a      	lsls	r2, r3, #10
 80012a8:	23ff      	movs	r3, #255	@ 0xff
 80012aa:	029b      	lsls	r3, r3, #10
 80012ac:	4013      	ands	r3, r2
 80012ae:	0019      	movs	r1, r3
 80012b0:	2380      	movs	r3, #128	@ 0x80
 80012b2:	0218      	lsls	r0, r3, #8
 80012b4:	f7fe ff32 	bl	800011c <__udivsi3>
 80012b8:	0003      	movs	r3, r0
 80012ba:	0019      	movs	r1, r3
 80012bc:	4b44      	ldr	r3, [pc, #272]	@ (80013d0 <EE_Init+0x6a8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	029a      	lsls	r2, r3, #10
 80012c2:	23ff      	movs	r3, #255	@ 0xff
 80012c4:	029b      	lsls	r3, r3, #10
 80012c6:	4013      	ands	r3, r2
 80012c8:	434b      	muls	r3, r1
 80012ca:	18e3      	adds	r3, r4, r3
 80012cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 80012ce:	251a      	movs	r5, #26
 80012d0:	197c      	adds	r4, r7, r5
 80012d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012d4:	0018      	movs	r0, r3
 80012d6:	f001 fadf 	bl	8002898 <GetPageState>
 80012da:	0003      	movs	r3, r0
 80012dc:	7023      	strb	r3, [r4, #0]

    /* Search for active page */
    if (pagestatus == STATE_PAGE_ACTIVE)
 80012de:	197b      	adds	r3, r7, r5
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d000      	beq.n	80012e8 <EE_Init+0x5c0>
 80012e6:	e0d7      	b.n	8001498 <EE_Init+0x770>
    {
      /* Verify that active page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 80012e8:	4b39      	ldr	r3, [pc, #228]	@ (80013d0 <EE_Init+0x6a8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	029a      	lsls	r2, r3, #10
 80012ee:	23ff      	movs	r3, #255	@ 0xff
 80012f0:	029b      	lsls	r3, r3, #10
 80012f2:	401a      	ands	r2, r3
 80012f4:	2380      	movs	r3, #128	@ 0x80
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	0011      	movs	r1, r2
 80012fa:	0018      	movs	r0, r3
 80012fc:	f7fe ff94 	bl	8000228 <__aeabi_uidivmod>
 8001300:	000b      	movs	r3, r1
 8001302:	0adb      	lsrs	r3, r3, #11
 8001304:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001306:	429a      	cmp	r2, r3
 8001308:	d066      	beq.n	80013d8 <EE_Init+0x6b0>
 800130a:	4b31      	ldr	r3, [pc, #196]	@ (80013d0 <EE_Init+0x6a8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	029a      	lsls	r2, r3, #10
 8001310:	23ff      	movs	r3, #255	@ 0xff
 8001312:	029b      	lsls	r3, r3, #10
 8001314:	401a      	ands	r2, r3
 8001316:	2380      	movs	r3, #128	@ 0x80
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	0011      	movs	r1, r2
 800131c:	0018      	movs	r0, r3
 800131e:	f7fe ff83 	bl	8000228 <__aeabi_uidivmod>
 8001322:	000b      	movs	r3, r1
 8001324:	0adb      	lsrs	r3, r3, #11
 8001326:	3305      	adds	r3, #5
 8001328:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800132a:	429a      	cmp	r2, r3
 800132c:	d054      	beq.n	80013d8 <EE_Init+0x6b0>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800132e:	4b28      	ldr	r3, [pc, #160]	@ (80013d0 <EE_Init+0x6a8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	029a      	lsls	r2, r3, #10
 8001334:	23ff      	movs	r3, #255	@ 0xff
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	401a      	ands	r2, r3
 800133a:	2380      	movs	r3, #128	@ 0x80
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	0011      	movs	r1, r2
 8001340:	0018      	movs	r0, r3
 8001342:	f7fe ff71 	bl	8000228 <__aeabi_uidivmod>
 8001346:	000b      	movs	r3, r1
 8001348:	0adb      	lsrs	r3, r3, #11
 800134a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	3309      	adds	r3, #9
 8001350:	210a      	movs	r1, #10
 8001352:	0018      	movs	r0, r3
 8001354:	f7fe ff68 	bl	8000228 <__aeabi_uidivmod>
 8001358:	000b      	movs	r3, r1
 800135a:	001c      	movs	r4, r3
 800135c:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <EE_Init+0x6a8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	029a      	lsls	r2, r3, #10
 8001362:	23ff      	movs	r3, #255	@ 0xff
 8001364:	029b      	lsls	r3, r3, #10
 8001366:	401a      	ands	r2, r3
 8001368:	2380      	movs	r3, #128	@ 0x80
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	0011      	movs	r1, r2
 800136e:	0018      	movs	r0, r3
 8001370:	f7fe ff5a 	bl	8000228 <__aeabi_uidivmod>
 8001374:	000b      	movs	r3, r1
 8001376:	0adb      	lsrs	r3, r3, #11
 8001378:	18e3      	adds	r3, r4, r3
 800137a:	2280      	movs	r2, #128	@ 0x80
 800137c:	0252      	lsls	r2, r2, #9
 800137e:	4694      	mov	ip, r2
 8001380:	4463      	add	r3, ip
 8001382:	02dc      	lsls	r4, r3, #11
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <EE_Init+0x6a8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	029a      	lsls	r2, r3, #10
 800138a:	23ff      	movs	r3, #255	@ 0xff
 800138c:	029b      	lsls	r3, r3, #10
 800138e:	4013      	ands	r3, r2
 8001390:	0019      	movs	r1, r3
 8001392:	2380      	movs	r3, #128	@ 0x80
 8001394:	0218      	lsls	r0, r3, #8
 8001396:	f7fe fec1 	bl	800011c <__udivsi3>
 800139a:	0003      	movs	r3, r0
 800139c:	0019      	movs	r1, r3
 800139e:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <EE_Init+0x6a8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	029a      	lsls	r2, r3, #10
 80013a4:	23ff      	movs	r3, #255	@ 0xff
 80013a6:	029b      	lsls	r3, r3, #10
 80013a8:	4013      	ands	r3, r2
 80013aa:	434b      	muls	r3, r1
 80013ac:	18e3      	adds	r3, r4, r3
 80013ae:	0018      	movs	r0, r3
 80013b0:	f001 fa72 	bl	8002898 <GetPageState>
 80013b4:	0003      	movs	r3, r0
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d104      	bne.n	80013c4 <EE_Init+0x69c>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 80013ba:	231b      	movs	r3, #27
 80013bc:	18fb      	adds	r3, r7, r3
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 80013c2:	e057      	b.n	8001474 <EE_Init+0x74c>
        }
        else /* Previous page is not valid state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 80013c4:	231b      	movs	r3, #27
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 80013cc:	e052      	b.n	8001474 <EE_Init+0x74c>
 80013ce:	46c0      	nop			@ (mov r8, r8)
 80013d0:	1fff75e0 	.word	0x1fff75e0
 80013d4:	200001c2 	.word	0x200001c2
        }
      }
      else /* The active page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 80013d8:	4be0      	ldr	r3, [pc, #896]	@ (800175c <EE_Init+0xa34>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	029a      	lsls	r2, r3, #10
 80013de:	23ff      	movs	r3, #255	@ 0xff
 80013e0:	029b      	lsls	r3, r3, #10
 80013e2:	401a      	ands	r2, r3
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	0011      	movs	r1, r2
 80013ea:	0018      	movs	r0, r3
 80013ec:	f7fe ff1c 	bl	8000228 <__aeabi_uidivmod>
 80013f0:	000b      	movs	r3, r1
 80013f2:	0adb      	lsrs	r3, r3, #11
 80013f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	3301      	adds	r3, #1
 80013fa:	210a      	movs	r1, #10
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7fe ff13 	bl	8000228 <__aeabi_uidivmod>
 8001402:	000b      	movs	r3, r1
 8001404:	001c      	movs	r4, r3
 8001406:	4bd5      	ldr	r3, [pc, #852]	@ (800175c <EE_Init+0xa34>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	029a      	lsls	r2, r3, #10
 800140c:	23ff      	movs	r3, #255	@ 0xff
 800140e:	029b      	lsls	r3, r3, #10
 8001410:	401a      	ands	r2, r3
 8001412:	2380      	movs	r3, #128	@ 0x80
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	0011      	movs	r1, r2
 8001418:	0018      	movs	r0, r3
 800141a:	f7fe ff05 	bl	8000228 <__aeabi_uidivmod>
 800141e:	000b      	movs	r3, r1
 8001420:	0adb      	lsrs	r3, r3, #11
 8001422:	18e3      	adds	r3, r4, r3
 8001424:	2280      	movs	r2, #128	@ 0x80
 8001426:	0252      	lsls	r2, r2, #9
 8001428:	4694      	mov	ip, r2
 800142a:	4463      	add	r3, ip
 800142c:	02dc      	lsls	r4, r3, #11
 800142e:	4bcb      	ldr	r3, [pc, #812]	@ (800175c <EE_Init+0xa34>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	029a      	lsls	r2, r3, #10
 8001434:	23ff      	movs	r3, #255	@ 0xff
 8001436:	029b      	lsls	r3, r3, #10
 8001438:	4013      	ands	r3, r2
 800143a:	0019      	movs	r1, r3
 800143c:	2380      	movs	r3, #128	@ 0x80
 800143e:	0218      	lsls	r0, r3, #8
 8001440:	f7fe fe6c 	bl	800011c <__udivsi3>
 8001444:	0003      	movs	r3, r0
 8001446:	0019      	movs	r1, r3
 8001448:	4bc4      	ldr	r3, [pc, #784]	@ (800175c <EE_Init+0xa34>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	029a      	lsls	r2, r3, #10
 800144e:	23ff      	movs	r3, #255	@ 0xff
 8001450:	029b      	lsls	r3, r3, #10
 8001452:	4013      	ands	r3, r2
 8001454:	434b      	muls	r3, r1
 8001456:	18e3      	adds	r3, r4, r3
 8001458:	0018      	movs	r0, r3
 800145a:	f001 fa1d 	bl	8002898 <GetPageState>
 800145e:	1e03      	subs	r3, r0, #0
 8001460:	d104      	bne.n	800146c <EE_Init+0x744>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 8001462:	231b      	movs	r3, #27
 8001464:	18fb      	adds	r3, r7, r3
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	e003      	b.n	8001474 <EE_Init+0x74c>
        }
        else /* Following page is not erased state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800146c:	231b      	movs	r3, #27
 800146e:	18fb      	adds	r3, r7, r3
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
        }
      }

      /* If the active page is a true active page, initialize global variables */
      if (pagestate == STATE_RELIABLE)
 8001474:	231b      	movs	r3, #27
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d113      	bne.n	80014a6 <EE_Init+0x77e>
      {
        if (nbactivepage == 0U)
 800147e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001480:	2b00      	cmp	r3, #0
 8001482:	d107      	bne.n	8001494 <EE_Init+0x76c>
        {
          ubCurrentActivePage = page;
 8001484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4bb5      	ldr	r3, [pc, #724]	@ (8001760 <EE_Init+0xa38>)
 800148a:	701a      	strb	r2, [r3, #0]
          nbactivepage++;
 800148c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800148e:	3301      	adds	r3, #1
 8001490:	633b      	str	r3, [r7, #48]	@ 0x30
 8001492:	e008      	b.n	80014a6 <EE_Init+0x77e>
        }
        else
        {
          /* Error: More than one reliable active page is present */
          return EE_INVALID_PAGE_SEQUENCE;
 8001494:	230a      	movs	r3, #10
 8001496:	e1e8      	b.n	800186a <EE_Init+0xb42>
        }
      }
    }
    /* Keep index of last valid page, will be required in case no active page is found */
    else if (pagestatus == STATE_PAGE_VALID)
 8001498:	231a      	movs	r3, #26
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d101      	bne.n	80014a6 <EE_Init+0x77e>
    {
      lastvalidpage = page;
 80014a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80014a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014a8:	3301      	adds	r3, #1
 80014aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014ac:	4bab      	ldr	r3, [pc, #684]	@ (800175c <EE_Init+0xa34>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	029a      	lsls	r2, r3, #10
 80014b2:	23ff      	movs	r3, #255	@ 0xff
 80014b4:	029b      	lsls	r3, r3, #10
 80014b6:	401a      	ands	r2, r3
 80014b8:	2380      	movs	r3, #128	@ 0x80
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	0011      	movs	r1, r2
 80014be:	0018      	movs	r0, r3
 80014c0:	f7fe feb2 	bl	8000228 <__aeabi_uidivmod>
 80014c4:	000b      	movs	r3, r1
 80014c6:	0adb      	lsrs	r3, r3, #11
 80014c8:	330a      	adds	r3, #10
 80014ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d200      	bcs.n	80014d2 <EE_Init+0x7aa>
 80014d0:	e6e1      	b.n	8001296 <EE_Init+0x56e>
    }
  }

  /* In case no active page is found, set page after last valid page to active state */
  if (nbactivepage == 0U)
 80014d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d133      	bne.n	8001540 <EE_Init+0x818>
  {
    ubCurrentActivePage = FOLLOWING_PAGE(lastvalidpage);
 80014d8:	4ba0      	ldr	r3, [pc, #640]	@ (800175c <EE_Init+0xa34>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	029a      	lsls	r2, r3, #10
 80014de:	23ff      	movs	r3, #255	@ 0xff
 80014e0:	029b      	lsls	r3, r3, #10
 80014e2:	401a      	ands	r2, r3
 80014e4:	2380      	movs	r3, #128	@ 0x80
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	0011      	movs	r1, r2
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7fe fe9c 	bl	8000228 <__aeabi_uidivmod>
 80014f0:	000b      	movs	r3, r1
 80014f2:	0adb      	lsrs	r3, r3, #11
 80014f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	210a      	movs	r1, #10
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7fe fe93 	bl	8000228 <__aeabi_uidivmod>
 8001502:	000b      	movs	r3, r1
 8001504:	b2dc      	uxtb	r4, r3
 8001506:	4b95      	ldr	r3, [pc, #596]	@ (800175c <EE_Init+0xa34>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	029a      	lsls	r2, r3, #10
 800150c:	23ff      	movs	r3, #255	@ 0xff
 800150e:	029b      	lsls	r3, r3, #10
 8001510:	401a      	ands	r2, r3
 8001512:	2380      	movs	r3, #128	@ 0x80
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	0011      	movs	r1, r2
 8001518:	0018      	movs	r0, r3
 800151a:	f7fe fe85 	bl	8000228 <__aeabi_uidivmod>
 800151e:	000b      	movs	r3, r1
 8001520:	0adb      	lsrs	r3, r3, #11
 8001522:	b2db      	uxtb	r3, r3
 8001524:	18e3      	adds	r3, r4, r3
 8001526:	b2da      	uxtb	r2, r3
 8001528:	4b8d      	ldr	r3, [pc, #564]	@ (8001760 <EE_Init+0xa38>)
 800152a:	701a      	strb	r2, [r3, #0]
    if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 800152c:	4b8c      	ldr	r3, [pc, #560]	@ (8001760 <EE_Init+0xa38>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2102      	movs	r1, #2
 8001532:	0018      	movs	r0, r3
 8001534:	f001 f8de 	bl	80026f4 <SetPageState>
 8001538:	1e03      	subs	r3, r0, #0
 800153a:	d001      	beq.n	8001540 <EE_Init+0x818>
    {
      return EE_WRITE_ERROR;
 800153c:	2302      	movs	r3, #2
 800153e:	e194      	b.n	800186a <EE_Init+0xb42>
  /* Step 5: Initialize eeprom emulation global variables relative     */
  /*         to active page                                            */
  /*********************************************************************/

  /* Initialize global variables, with elements detected in active page */
  uhNbWrittenElements = 0U;
 8001540:	4b88      	ldr	r3, [pc, #544]	@ (8001764 <EE_Init+0xa3c>)
 8001542:	2200      	movs	r2, #0
 8001544:	801a      	strh	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8001546:	4b88      	ldr	r3, [pc, #544]	@ (8001768 <EE_Init+0xa40>)
 8001548:	2220      	movs	r2, #32
 800154a:	601a      	str	r2, [r3, #0]

  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800154c:	2320      	movs	r3, #32
 800154e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001550:	e037      	b.n	80015c2 <EE_Init+0x89a>
  {
    /* Check elements present in active page */
    addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 8001552:	4b83      	ldr	r3, [pc, #524]	@ (8001760 <EE_Init+0xa38>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2280      	movs	r2, #128	@ 0x80
 8001558:	0252      	lsls	r2, r2, #9
 800155a:	4694      	mov	ip, r2
 800155c:	4463      	add	r3, ip
 800155e:	02dc      	lsls	r4, r3, #11
 8001560:	4b7e      	ldr	r3, [pc, #504]	@ (800175c <EE_Init+0xa34>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	029a      	lsls	r2, r3, #10
 8001566:	23ff      	movs	r3, #255	@ 0xff
 8001568:	029b      	lsls	r3, r3, #10
 800156a:	4013      	ands	r3, r2
 800156c:	0019      	movs	r1, r3
 800156e:	2380      	movs	r3, #128	@ 0x80
 8001570:	0218      	lsls	r0, r3, #8
 8001572:	f7fe fdd3 	bl	800011c <__udivsi3>
 8001576:	0003      	movs	r3, r0
 8001578:	0019      	movs	r1, r3
 800157a:	4b78      	ldr	r3, [pc, #480]	@ (800175c <EE_Init+0xa34>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	029a      	lsls	r2, r3, #10
 8001580:	23ff      	movs	r3, #255	@ 0xff
 8001582:	029b      	lsls	r3, r3, #10
 8001584:	4013      	ands	r3, r2
 8001586:	434b      	muls	r3, r1
 8001588:	18e2      	adds	r2, r4, r3
 800158a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800158c:	18d3      	adds	r3, r2, r3
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	613a      	str	r2, [r7, #16]
 8001594:	617b      	str	r3, [r7, #20]
#ifdef FLASH_LINES_128B
    addressvalue2 = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx + 8));
    if ((addressvalue != EE_MASK_FULL) || (addressvalue2 != EE_MASK_FULL))
#else
    if (addressvalue != EE_MASK_FULL)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	3301      	adds	r3, #1
 800159a:	d103      	bne.n	80015a4 <EE_Init+0x87c>
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	3301      	adds	r3, #1
 80015a0:	d100      	bne.n	80015a4 <EE_Init+0x87c>
      uhNbWrittenElements++;
      uwAddressNextWrite += EE_ELEMENT_SIZE;
    }
    else /* no more element in the page */
    {
      break;
 80015a2:	e013      	b.n	80015cc <EE_Init+0x8a4>
      uhNbWrittenElements++;
 80015a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001764 <EE_Init+0xa3c>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	3301      	adds	r3, #1
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	4b6d      	ldr	r3, [pc, #436]	@ (8001764 <EE_Init+0xa3c>)
 80015ae:	801a      	strh	r2, [r3, #0]
      uwAddressNextWrite += EE_ELEMENT_SIZE;
 80015b0:	4b6d      	ldr	r3, [pc, #436]	@ (8001768 <EE_Init+0xa40>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3308      	adds	r3, #8
 80015b6:	001a      	movs	r2, r3
 80015b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001768 <EE_Init+0xa40>)
 80015ba:	601a      	str	r2, [r3, #0]
  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 80015bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015be:	3308      	adds	r3, #8
 80015c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80015c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d3c2      	bcc.n	8001552 <EE_Init+0x82a>
  /*         to valid pages, and check consistency of pages sequence   */
  /*********************************************************************/

  /* Check consistency of pages sequence: one active page, optionnally some valid pages before */
  /* Update global variable uhNbWrittenElements if valid pages are found */
  page = ubCurrentActivePage;
 80015cc:	4b64      	ldr	r3, [pc, #400]	@ (8001760 <EE_Init+0xa38>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  firstvalidpage = ubCurrentActivePage;
 80015d2:	4b63      	ldr	r3, [pc, #396]	@ (8001760 <EE_Init+0xa38>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	623b      	str	r3, [r7, #32]
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 80015d8:	e057      	b.n	800168a <EE_Init+0x962>
  {
    /* Decrement page index among circular pages list */
    page = PREVIOUS_PAGE(page);
 80015da:	4b60      	ldr	r3, [pc, #384]	@ (800175c <EE_Init+0xa34>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	029a      	lsls	r2, r3, #10
 80015e0:	23ff      	movs	r3, #255	@ 0xff
 80015e2:	029b      	lsls	r3, r3, #10
 80015e4:	401a      	ands	r2, r3
 80015e6:	2380      	movs	r3, #128	@ 0x80
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	0011      	movs	r1, r2
 80015ec:	0018      	movs	r0, r3
 80015ee:	f7fe fe1b 	bl	8000228 <__aeabi_uidivmod>
 80015f2:	000b      	movs	r3, r1
 80015f4:	0adb      	lsrs	r3, r3, #11
 80015f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	3309      	adds	r3, #9
 80015fc:	210a      	movs	r1, #10
 80015fe:	0018      	movs	r0, r3
 8001600:	f7fe fe12 	bl	8000228 <__aeabi_uidivmod>
 8001604:	000b      	movs	r3, r1
 8001606:	001c      	movs	r4, r3
 8001608:	4b54      	ldr	r3, [pc, #336]	@ (800175c <EE_Init+0xa34>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	029a      	lsls	r2, r3, #10
 800160e:	23ff      	movs	r3, #255	@ 0xff
 8001610:	029b      	lsls	r3, r3, #10
 8001612:	401a      	ands	r2, r3
 8001614:	2380      	movs	r3, #128	@ 0x80
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	0011      	movs	r1, r2
 800161a:	0018      	movs	r0, r3
 800161c:	f7fe fe04 	bl	8000228 <__aeabi_uidivmod>
 8001620:	000b      	movs	r3, r1
 8001622:	0adb      	lsrs	r3, r3, #11
 8001624:	18e3      	adds	r3, r4, r3
 8001626:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pagestatus = GetPageState(PAGE_ADDRESS(page));
 8001628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800162a:	2280      	movs	r2, #128	@ 0x80
 800162c:	0252      	lsls	r2, r2, #9
 800162e:	4694      	mov	ip, r2
 8001630:	4463      	add	r3, ip
 8001632:	02dc      	lsls	r4, r3, #11
 8001634:	4b49      	ldr	r3, [pc, #292]	@ (800175c <EE_Init+0xa34>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	029a      	lsls	r2, r3, #10
 800163a:	23ff      	movs	r3, #255	@ 0xff
 800163c:	029b      	lsls	r3, r3, #10
 800163e:	4013      	ands	r3, r2
 8001640:	0019      	movs	r1, r3
 8001642:	2380      	movs	r3, #128	@ 0x80
 8001644:	0218      	lsls	r0, r3, #8
 8001646:	f7fe fd69 	bl	800011c <__udivsi3>
 800164a:	0003      	movs	r3, r0
 800164c:	0019      	movs	r1, r3
 800164e:	4b43      	ldr	r3, [pc, #268]	@ (800175c <EE_Init+0xa34>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	029a      	lsls	r2, r3, #10
 8001654:	23ff      	movs	r3, #255	@ 0xff
 8001656:	029b      	lsls	r3, r3, #10
 8001658:	4013      	ands	r3, r2
 800165a:	434b      	muls	r3, r1
 800165c:	18e3      	adds	r3, r4, r3
 800165e:	251a      	movs	r5, #26
 8001660:	197c      	adds	r4, r7, r5
 8001662:	0018      	movs	r0, r3
 8001664:	f001 f918 	bl	8002898 <GetPageState>
 8001668:	0003      	movs	r3, r0
 800166a:	7023      	strb	r3, [r4, #0]

    /* Check if page is valid state */
    if (pagestatus == STATE_PAGE_VALID)
 800166c:	197b      	adds	r3, r7, r5
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d108      	bne.n	8001686 <EE_Init+0x95e>
    {
      /* Update uhNbWrittenElements with number of elements in full page */
      uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 8001674:	4b3b      	ldr	r3, [pc, #236]	@ (8001764 <EE_Init+0xa3c>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	33fc      	adds	r3, #252	@ 0xfc
 800167a:	b29a      	uxth	r2, r3
 800167c:	4b39      	ldr	r3, [pc, #228]	@ (8001764 <EE_Init+0xa3c>)
 800167e:	801a      	strh	r2, [r3, #0]

      /* Keep index of first valid page */
      firstvalidpage = page;
 8001680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001682:	623b      	str	r3, [r7, #32]
 8001684:	e001      	b.n	800168a <EE_Init+0x962>
    }
    else
    {
      /* Error: Pages sequence is not consistent */
      return EE_INVALID_PAGE_SEQUENCE;
 8001686:	230a      	movs	r3, #10
 8001688:	e0ef      	b.n	800186a <EE_Init+0xb42>
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800168a:	4b34      	ldr	r3, [pc, #208]	@ (800175c <EE_Init+0xa34>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	029a      	lsls	r2, r3, #10
 8001690:	23ff      	movs	r3, #255	@ 0xff
 8001692:	029b      	lsls	r3, r3, #10
 8001694:	401a      	ands	r2, r3
 8001696:	2380      	movs	r3, #128	@ 0x80
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	0011      	movs	r1, r2
 800169c:	0018      	movs	r0, r3
 800169e:	f7fe fdc3 	bl	8000228 <__aeabi_uidivmod>
 80016a2:	000b      	movs	r3, r1
 80016a4:	0adb      	lsrs	r3, r3, #11
 80016a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d011      	beq.n	80016d0 <EE_Init+0x9a8>
 80016ac:	4b2b      	ldr	r3, [pc, #172]	@ (800175c <EE_Init+0xa34>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	029a      	lsls	r2, r3, #10
 80016b2:	23ff      	movs	r3, #255	@ 0xff
 80016b4:	029b      	lsls	r3, r3, #10
 80016b6:	401a      	ands	r2, r3
 80016b8:	2380      	movs	r3, #128	@ 0x80
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	0011      	movs	r1, r2
 80016be:	0018      	movs	r0, r3
 80016c0:	f7fe fdb2 	bl	8000228 <__aeabi_uidivmod>
 80016c4:	000b      	movs	r3, r1
 80016c6:	0adb      	lsrs	r3, r3, #11
 80016c8:	3305      	adds	r3, #5
 80016ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d184      	bne.n	80015da <EE_Init+0x8b2>
  /*********************************************************************/
  /* Step 7: Ensure empty pages are erased                             */
  /*********************************************************************/

  /* Ensure all pages after active page, until first valid page, are erased */
  page = FOLLOWING_PAGE(ubCurrentActivePage);
 80016d0:	4b23      	ldr	r3, [pc, #140]	@ (8001760 <EE_Init+0xa38>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	001c      	movs	r4, r3
 80016d6:	4b21      	ldr	r3, [pc, #132]	@ (800175c <EE_Init+0xa34>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	029a      	lsls	r2, r3, #10
 80016dc:	23ff      	movs	r3, #255	@ 0xff
 80016de:	029b      	lsls	r3, r3, #10
 80016e0:	401a      	ands	r2, r3
 80016e2:	2380      	movs	r3, #128	@ 0x80
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	0011      	movs	r1, r2
 80016e8:	0018      	movs	r0, r3
 80016ea:	f7fe fd9d 	bl	8000228 <__aeabi_uidivmod>
 80016ee:	000b      	movs	r3, r1
 80016f0:	0adb      	lsrs	r3, r3, #11
 80016f2:	1ae3      	subs	r3, r4, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	210a      	movs	r1, #10
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7fe fd95 	bl	8000228 <__aeabi_uidivmod>
 80016fe:	000b      	movs	r3, r1
 8001700:	001c      	movs	r4, r3
 8001702:	4b16      	ldr	r3, [pc, #88]	@ (800175c <EE_Init+0xa34>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	029a      	lsls	r2, r3, #10
 8001708:	23ff      	movs	r3, #255	@ 0xff
 800170a:	029b      	lsls	r3, r3, #10
 800170c:	401a      	ands	r2, r3
 800170e:	2380      	movs	r3, #128	@ 0x80
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	0011      	movs	r1, r2
 8001714:	0018      	movs	r0, r3
 8001716:	f7fe fd87 	bl	8000228 <__aeabi_uidivmod>
 800171a:	000b      	movs	r3, r1
 800171c:	0adb      	lsrs	r3, r3, #11
 800171e:	18e3      	adds	r3, r4, r3
 8001720:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pageaddress = PAGE_ADDRESS(page);
 8001722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001724:	2280      	movs	r2, #128	@ 0x80
 8001726:	0252      	lsls	r2, r2, #9
 8001728:	4694      	mov	ip, r2
 800172a:	4463      	add	r3, ip
 800172c:	02dc      	lsls	r4, r3, #11
 800172e:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <EE_Init+0xa34>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	029a      	lsls	r2, r3, #10
 8001734:	23ff      	movs	r3, #255	@ 0xff
 8001736:	029b      	lsls	r3, r3, #10
 8001738:	4013      	ands	r3, r2
 800173a:	0019      	movs	r1, r3
 800173c:	2380      	movs	r3, #128	@ 0x80
 800173e:	0218      	lsls	r0, r3, #8
 8001740:	f7fe fcec 	bl	800011c <__udivsi3>
 8001744:	0003      	movs	r3, r0
 8001746:	0019      	movs	r1, r3
 8001748:	4b04      	ldr	r3, [pc, #16]	@ (800175c <EE_Init+0xa34>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	029a      	lsls	r2, r3, #10
 800174e:	23ff      	movs	r3, #255	@ 0xff
 8001750:	029b      	lsls	r3, r3, #10
 8001752:	4013      	ands	r3, r2
 8001754:	434b      	muls	r3, r1
 8001756:	18e3      	adds	r3, r4, r3
 8001758:	63bb      	str	r3, [r7, #56]	@ 0x38

  while (page != firstvalidpage)
 800175a:	e06a      	b.n	8001832 <EE_Init+0xb0a>
 800175c:	1fff75e0 	.word	0x1fff75e0
 8001760:	200001c2 	.word	0x200001c2
 8001764:	200001c0 	.word	0x200001c0
 8001768:	20000004 	.word	0x20000004
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800176c:	1dfb      	adds	r3, r7, #7
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d108      	bne.n	8001786 <EE_Init+0xa5e>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 8001774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001776:	2101      	movs	r1, #1
 8001778:	0018      	movs	r0, r3
 800177a:	f001 f92c 	bl	80029d6 <FI_PageErase>
 800177e:	1e03      	subs	r3, r0, #0
 8001780:	d014      	beq.n	80017ac <EE_Init+0xa84>
      {
        return EE_ERASE_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e071      	b.n	800186a <EE_Init+0xb42>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if page is fully erased */
      if (VerifyPageFullyErased(pageaddress, PAGE_SIZE) == EE_PAGE_NOTERASED)
 8001786:	2380      	movs	r3, #128	@ 0x80
 8001788:	011a      	lsls	r2, r3, #4
 800178a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800178c:	0011      	movs	r1, r2
 800178e:	0018      	movs	r0, r3
 8001790:	f000 fb37 	bl	8001e02 <VerifyPageFullyErased>
 8001794:	0003      	movs	r3, r0
 8001796:	2b10      	cmp	r3, #16
 8001798:	d108      	bne.n	80017ac <EE_Init+0xa84>
      {
        /* Erase pages if not fully erased */
        if (FI_PageErase(page, 1U) != EE_OK)
 800179a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800179c:	2101      	movs	r1, #1
 800179e:	0018      	movs	r0, r3
 80017a0:	f001 f919 	bl	80029d6 <FI_PageErase>
 80017a4:	1e03      	subs	r3, r0, #0
 80017a6:	d001      	beq.n	80017ac <EE_Init+0xa84>
        {
          return EE_ERASE_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e05e      	b.n	800186a <EE_Init+0xb42>
        }
      }
    }

    /* Increment page index among circular pages list, to get first page to erased */
    page = FOLLOWING_PAGE(page);
 80017ac:	4b31      	ldr	r3, [pc, #196]	@ (8001874 <EE_Init+0xb4c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	029a      	lsls	r2, r3, #10
 80017b2:	23ff      	movs	r3, #255	@ 0xff
 80017b4:	029b      	lsls	r3, r3, #10
 80017b6:	401a      	ands	r2, r3
 80017b8:	2380      	movs	r3, #128	@ 0x80
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	0011      	movs	r1, r2
 80017be:	0018      	movs	r0, r3
 80017c0:	f7fe fd32 	bl	8000228 <__aeabi_uidivmod>
 80017c4:	000b      	movs	r3, r1
 80017c6:	0adb      	lsrs	r3, r3, #11
 80017c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	3301      	adds	r3, #1
 80017ce:	210a      	movs	r1, #10
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7fe fd29 	bl	8000228 <__aeabi_uidivmod>
 80017d6:	000b      	movs	r3, r1
 80017d8:	001c      	movs	r4, r3
 80017da:	4b26      	ldr	r3, [pc, #152]	@ (8001874 <EE_Init+0xb4c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	029a      	lsls	r2, r3, #10
 80017e0:	23ff      	movs	r3, #255	@ 0xff
 80017e2:	029b      	lsls	r3, r3, #10
 80017e4:	401a      	ands	r2, r3
 80017e6:	2380      	movs	r3, #128	@ 0x80
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	0011      	movs	r1, r2
 80017ec:	0018      	movs	r0, r3
 80017ee:	f7fe fd1b 	bl	8000228 <__aeabi_uidivmod>
 80017f2:	000b      	movs	r3, r1
 80017f4:	0adb      	lsrs	r3, r3, #11
 80017f6:	18e3      	adds	r3, r4, r3
 80017f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pageaddress = PAGE_ADDRESS(page);
 80017fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017fc:	2280      	movs	r2, #128	@ 0x80
 80017fe:	0252      	lsls	r2, r2, #9
 8001800:	4694      	mov	ip, r2
 8001802:	4463      	add	r3, ip
 8001804:	02dc      	lsls	r4, r3, #11
 8001806:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <EE_Init+0xb4c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	029a      	lsls	r2, r3, #10
 800180c:	23ff      	movs	r3, #255	@ 0xff
 800180e:	029b      	lsls	r3, r3, #10
 8001810:	4013      	ands	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	2380      	movs	r3, #128	@ 0x80
 8001816:	0218      	lsls	r0, r3, #8
 8001818:	f7fe fc80 	bl	800011c <__udivsi3>
 800181c:	0003      	movs	r3, r0
 800181e:	0019      	movs	r1, r3
 8001820:	4b14      	ldr	r3, [pc, #80]	@ (8001874 <EE_Init+0xb4c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	029a      	lsls	r2, r3, #10
 8001826:	23ff      	movs	r3, #255	@ 0xff
 8001828:	029b      	lsls	r3, r3, #10
 800182a:	4013      	ands	r3, r2
 800182c:	434b      	muls	r3, r1
 800182e:	18e3      	adds	r3, r4, r3
 8001830:	63bb      	str	r3, [r7, #56]	@ 0x38
  while (page != firstvalidpage)
 8001832:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	429a      	cmp	r2, r3
 8001838:	d198      	bne.n	800176c <EE_Init+0xa44>
  }
 
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800183a:	f001 f8f7 	bl	8002a2c <FI_CacheFlush>
  /*         instability of line value 0xFFFFFFFF consecutive to a     */
  /*         reset during write here                                   */
  /*         Only needed if recovery transfer did not occured          */
  /*********************************************************************/

if (recoverytransfer == 0U)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d111      	bne.n	8001868 <EE_Init+0xb40>
#else
#ifdef FLASH_LINES_128B
    uint64_t to_write[2] = {0};
    status = VerifyPagesFullWriteVariable(0U, to_write, EE_INIT_WRITE);
#else
    status = VerifyPagesFullWriteVariable(0U, 0U);
 8001844:	250e      	movs	r5, #14
 8001846:	197c      	adds	r4, r7, r5
 8001848:	2100      	movs	r1, #0
 800184a:	2000      	movs	r0, #0
 800184c:	f000 feb8 	bl	80025c0 <VerifyPagesFullWriteVariable>
 8001850:	0003      	movs	r3, r0
 8001852:	8023      	strh	r3, [r4, #0]
#endif
    // The dummy write can be skipped in case pages are full
     //  because in this case potential instability can not happen 
    if ((status != EE_OK) && (status != EE_PAGE_FULL))
 8001854:	197b      	adds	r3, r7, r5
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <EE_Init+0xb40>
 800185c:	197b      	adds	r3, r7, r5
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	2b12      	cmp	r3, #18
 8001862:	d001      	beq.n	8001868 <EE_Init+0xb40>
    {
      return EE_WRITE_ERROR;
 8001864:	2302      	movs	r3, #2
 8001866:	e000      	b.n	800186a <EE_Init+0xb42>
    }
#endif
  }

  return EE_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	0018      	movs	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	b010      	add	sp, #64	@ 0x40
 8001870:	bdb0      	pop	{r4, r5, r7, pc}
 8001872:	46c0      	nop			@ (mov r8, r8)
 8001874:	1fff75e0 	.word	0x1fff75e0

08001878 <EE_Format>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status EE_Format(EE_Erase_type EraseType)
{
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	0002      	movs	r2, r0
 8001880:	1dfb      	adds	r3, r7, #7
 8001882:	701a      	strb	r2, [r3, #0]
  uint32_t page = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 8001888:	f001 f8d5 	bl	8002a36 <FI_CheckBankConfig>
 800188c:	1e03      	subs	r3, r0, #0
 800188e:	d001      	beq.n	8001894 <EE_Format+0x1c>
  {
    return EE_INVALID_BANK_CFG;
 8001890:	230e      	movs	r3, #14
 8001892:	e08e      	b.n	80019b2 <EE_Format+0x13a>
  /* Inform CPU2 about Erase Activity */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
  
  /* Erase All Pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8001894:	4b49      	ldr	r3, [pc, #292]	@ (80019bc <EE_Format+0x144>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	029a      	lsls	r2, r3, #10
 800189a:	23ff      	movs	r3, #255	@ 0xff
 800189c:	029b      	lsls	r3, r3, #10
 800189e:	401a      	ands	r2, r3
 80018a0:	2380      	movs	r3, #128	@ 0x80
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	0011      	movs	r1, r2
 80018a6:	0018      	movs	r0, r3
 80018a8:	f7fe fcbe 	bl	8000228 <__aeabi_uidivmod>
 80018ac:	000b      	movs	r3, r1
 80018ae:	0adb      	lsrs	r3, r3, #11
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	e03c      	b.n	800192e <EE_Format+0xb6>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 80018b4:	1dfb      	adds	r3, r7, #7
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d108      	bne.n	80018ce <EE_Format+0x56>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2101      	movs	r1, #1
 80018c0:	0018      	movs	r0, r3
 80018c2:	f001 f888 	bl	80029d6 <FI_PageErase>
 80018c6:	1e03      	subs	r3, r0, #0
 80018c8:	d02e      	beq.n	8001928 <EE_Format+0xb0>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e071      	b.n	80019b2 <EE_Format+0x13a>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if Page is not yet fully erased */
      if (VerifyPageFullyErased(PAGE_ADDRESS(page), PAGE_SIZE) == EE_PAGE_NOTERASED)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2280      	movs	r2, #128	@ 0x80
 80018d2:	0252      	lsls	r2, r2, #9
 80018d4:	4694      	mov	ip, r2
 80018d6:	4463      	add	r3, ip
 80018d8:	02dc      	lsls	r4, r3, #11
 80018da:	4b38      	ldr	r3, [pc, #224]	@ (80019bc <EE_Format+0x144>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	029a      	lsls	r2, r3, #10
 80018e0:	23ff      	movs	r3, #255	@ 0xff
 80018e2:	029b      	lsls	r3, r3, #10
 80018e4:	4013      	ands	r3, r2
 80018e6:	0019      	movs	r1, r3
 80018e8:	2380      	movs	r3, #128	@ 0x80
 80018ea:	0218      	lsls	r0, r3, #8
 80018ec:	f7fe fc16 	bl	800011c <__udivsi3>
 80018f0:	0003      	movs	r3, r0
 80018f2:	0019      	movs	r1, r3
 80018f4:	4b31      	ldr	r3, [pc, #196]	@ (80019bc <EE_Format+0x144>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	029a      	lsls	r2, r3, #10
 80018fa:	23ff      	movs	r3, #255	@ 0xff
 80018fc:	029b      	lsls	r3, r3, #10
 80018fe:	4013      	ands	r3, r2
 8001900:	434b      	muls	r3, r1
 8001902:	18e3      	adds	r3, r4, r3
 8001904:	2280      	movs	r2, #128	@ 0x80
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	0011      	movs	r1, r2
 800190a:	0018      	movs	r0, r3
 800190c:	f000 fa79 	bl	8001e02 <VerifyPageFullyErased>
 8001910:	0003      	movs	r3, r0
 8001912:	2b10      	cmp	r3, #16
 8001914:	d108      	bne.n	8001928 <EE_Format+0xb0>
      {
        /* Erase the page */
        /* If Erase operation was failed, a Flash error code is returned */
        if (FI_PageErase(page, 1U) != EE_OK)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2101      	movs	r1, #1
 800191a:	0018      	movs	r0, r3
 800191c:	f001 f85b 	bl	80029d6 <FI_PageErase>
 8001920:	1e03      	subs	r3, r0, #0
 8001922:	d001      	beq.n	8001928 <EE_Format+0xb0>
        {
#ifdef DUALCORE_FLASH_SHARING
          /* Inform CPU2 about end of Erase Activity */
          SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
          return EE_ERASE_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e044      	b.n	80019b2 <EE_Format+0x13a>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3301      	adds	r3, #1
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b23      	ldr	r3, [pc, #140]	@ (80019bc <EE_Format+0x144>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	029a      	lsls	r2, r3, #10
 8001934:	23ff      	movs	r3, #255	@ 0xff
 8001936:	029b      	lsls	r3, r3, #10
 8001938:	401a      	ands	r2, r3
 800193a:	2380      	movs	r3, #128	@ 0x80
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	0011      	movs	r1, r2
 8001940:	0018      	movs	r0, r3
 8001942:	f7fe fc71 	bl	8000228 <__aeabi_uidivmod>
 8001946:	000b      	movs	r3, r1
 8001948:	0adb      	lsrs	r3, r3, #11
 800194a:	330a      	adds	r3, #10
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	429a      	cmp	r2, r3
 8001950:	d3b0      	bcc.n	80018b4 <EE_Format+0x3c>
      }
    }
  }
  
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 8001952:	f001 f86b 	bl	8002a2c <FI_CacheFlush>
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif

  /* Set first Page in Active State */
  /* If program operation was failed, a Flash error code is returned */
  if (SetPageState(START_PAGE, STATE_PAGE_ACTIVE) != EE_OK)
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <EE_Format+0x144>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	029a      	lsls	r2, r3, #10
 800195c:	23ff      	movs	r3, #255	@ 0xff
 800195e:	029b      	lsls	r3, r3, #10
 8001960:	401a      	ands	r2, r3
 8001962:	2380      	movs	r3, #128	@ 0x80
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	0011      	movs	r1, r2
 8001968:	0018      	movs	r0, r3
 800196a:	f7fe fc5d 	bl	8000228 <__aeabi_uidivmod>
 800196e:	000b      	movs	r3, r1
 8001970:	0adb      	lsrs	r3, r3, #11
 8001972:	2102      	movs	r1, #2
 8001974:	0018      	movs	r0, r3
 8001976:	f000 febd 	bl	80026f4 <SetPageState>
 800197a:	1e03      	subs	r3, r0, #0
 800197c:	d001      	beq.n	8001982 <EE_Format+0x10a>
  {
    return EE_WRITE_ERROR;
 800197e:	2302      	movs	r3, #2
 8001980:	e017      	b.n	80019b2 <EE_Format+0x13a>
  }

  /* Reset global variables */
  uhNbWrittenElements = (uint16_t)0U;
 8001982:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <EE_Format+0x148>)
 8001984:	2200      	movs	r2, #0
 8001986:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = START_PAGE;
 8001988:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <EE_Format+0x144>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	029a      	lsls	r2, r3, #10
 800198e:	23ff      	movs	r3, #255	@ 0xff
 8001990:	029b      	lsls	r3, r3, #10
 8001992:	401a      	ands	r2, r3
 8001994:	2380      	movs	r3, #128	@ 0x80
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	0011      	movs	r1, r2
 800199a:	0018      	movs	r0, r3
 800199c:	f7fe fc44 	bl	8000228 <__aeabi_uidivmod>
 80019a0:	000b      	movs	r3, r1
 80019a2:	0adb      	lsrs	r3, r3, #11
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <EE_Format+0x14c>)
 80019a8:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE; /* Initialize write position just after page header */
 80019aa:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <EE_Format+0x150>)
 80019ac:	2220      	movs	r2, #32
 80019ae:	601a      	str	r2, [r3, #0]

  return EE_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	0018      	movs	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b005      	add	sp, #20
 80019b8:	bd90      	pop	{r4, r7, pc}
 80019ba:	46c0      	nop			@ (mov r8, r8)
 80019bc:	1fff75e0 	.word	0x1fff75e0
 80019c0:	200001c0 	.word	0x200001c0
 80019c4:	200001c2 	.word	0x200001c2
 80019c8:	20000004 	.word	0x20000004

080019cc <EE_ReadVariable8bits>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
EE_Status EE_ReadVariable8bits(uint16_t VirtAddress, uint8_t* pData)
{
 80019cc:	b5b0      	push	{r4, r5, r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	0002      	movs	r2, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	1dbb      	adds	r3, r7, #6
 80019d8:	801a      	strh	r2, [r3, #0]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 80019da:	1dbb      	adds	r3, r7, #6
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d01c      	beq.n	8001a1c <EE_ReadVariable8bits+0x50>
 80019e2:	1dbb      	adds	r3, r7, #6
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	4a10      	ldr	r2, [pc, #64]	@ (8001a28 <EE_ReadVariable8bits+0x5c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d017      	beq.n	8001a1c <EE_ReadVariable8bits+0x50>
  {
    EE_DATA_TYPE datatmp = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
    EE_Status status = EE_OK;
 80019f0:	250e      	movs	r5, #14
 80019f2:	197b      	adds	r3, r7, r5
 80019f4:	2200      	movs	r2, #0
 80019f6:	801a      	strh	r2, [r3, #0]

    /* Read variable of size EE_DATA_TYPE, then cast it to 8bits */
    status = ReadVariable(VirtAddress, &datatmp);
 80019f8:	197c      	adds	r4, r7, r5
 80019fa:	2308      	movs	r3, #8
 80019fc:	18fa      	adds	r2, r7, r3
 80019fe:	1dbb      	adds	r3, r7, #6
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	0011      	movs	r1, r2
 8001a04:	0018      	movs	r0, r3
 8001a06:	f000 f8db 	bl	8001bc0 <ReadVariable>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	8023      	strh	r3, [r4, #0]
    *pData = (uint8_t) datatmp;
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	701a      	strb	r2, [r3, #0]

    return status;
 8001a16:	197b      	adds	r3, r7, r5
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	e000      	b.n	8001a1e <EE_ReadVariable8bits+0x52>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 8001a1c:	2308      	movs	r3, #8
  } 
}
 8001a1e:	0018      	movs	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b004      	add	sp, #16
 8001a24:	bdb0      	pop	{r4, r5, r7, pc}
 8001a26:	46c0      	nop			@ (mov r8, r8)
 8001a28:	0000ffff 	.word	0x0000ffff

08001a2c <EE_WriteVariable8bits>:
  *           - EE_OK: on success
  *           - EE_CLEANUP_REQUIRED: success and user has to trig flash pages cleanup
  *           - EE error code: if an error occurs
  */
EE_Status EE_WriteVariable8bits(uint16_t VirtAddress, uint8_t Data)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	0002      	movs	r2, r0
 8001a34:	1dbb      	adds	r3, r7, #6
 8001a36:	801a      	strh	r2, [r3, #0]
 8001a38:	1d7b      	adds	r3, r7, #5
 8001a3a:	1c0a      	adds	r2, r1, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 8001a3e:	1dbb      	adds	r3, r7, #6
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00e      	beq.n	8001a64 <EE_WriteVariable8bits+0x38>
 8001a46:	1dbb      	adds	r3, r7, #6
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	4a09      	ldr	r2, [pc, #36]	@ (8001a70 <EE_WriteVariable8bits+0x44>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d009      	beq.n	8001a64 <EE_WriteVariable8bits+0x38>
  {
#ifndef FLASH_LINES_128B
    return WriteVariable(VirtAddress, (EE_DATA_TYPE) Data);
 8001a50:	1d7b      	adds	r3, r7, #5
 8001a52:	781a      	ldrb	r2, [r3, #0]
 8001a54:	1dbb      	adds	r3, r7, #6
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	0011      	movs	r1, r2
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f000 f9a8 	bl	8001db0 <WriteVariable>
 8001a60:	0003      	movs	r3, r0
 8001a62:	e000      	b.n	8001a66 <EE_WriteVariable8bits+0x3a>
    return WriteVariable(VirtAddress, (EE_DATA_TYPE*) &Data);
#endif
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 8001a64:	2308      	movs	r3, #8
  } 
}
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b002      	add	sp, #8
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			@ (mov r8, r8)
 8001a70:	0000ffff 	.word	0x0000ffff

08001a74 <EE_CleanUp>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp(void)
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	2205      	movs	r2, #5
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	1dbb      	adds	r3, r7, #6
 8001a92:	2205      	movs	r2, #5
 8001a94:	701a      	strb	r2, [r3, #0]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 8001a96:	4b49      	ldr	r3, [pc, #292]	@ (8001bbc <EE_CleanUp+0x148>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	029a      	lsls	r2, r3, #10
 8001a9c:	23ff      	movs	r3, #255	@ 0xff
 8001a9e:	029b      	lsls	r3, r3, #10
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	2380      	movs	r3, #128	@ 0x80
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	0011      	movs	r1, r2
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f7fe fbbd 	bl	8000228 <__aeabi_uidivmod>
 8001aae:	000b      	movs	r3, r1
 8001ab0:	0adb      	lsrs	r3, r3, #11
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e06b      	b.n	8001b8e <EE_CleanUp+0x11a>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2280      	movs	r2, #128	@ 0x80
 8001aba:	0252      	lsls	r2, r2, #9
 8001abc:	4694      	mov	ip, r2
 8001abe:	4463      	add	r3, ip
 8001ac0:	02dc      	lsls	r4, r3, #11
 8001ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bbc <EE_CleanUp+0x148>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	029a      	lsls	r2, r3, #10
 8001ac8:	23ff      	movs	r3, #255	@ 0xff
 8001aca:	029b      	lsls	r3, r3, #10
 8001acc:	4013      	ands	r3, r2
 8001ace:	0019      	movs	r1, r3
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	0218      	lsls	r0, r3, #8
 8001ad4:	f7fe fb22 	bl	800011c <__udivsi3>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	0019      	movs	r1, r3
 8001adc:	4b37      	ldr	r3, [pc, #220]	@ (8001bbc <EE_CleanUp+0x148>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	029a      	lsls	r2, r3, #10
 8001ae2:	23ff      	movs	r3, #255	@ 0xff
 8001ae4:	029b      	lsls	r3, r3, #10
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	434b      	muls	r3, r1
 8001aea:	18e3      	adds	r3, r4, r3
 8001aec:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 8001aee:	1dfc      	adds	r4, r7, #7
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	0018      	movs	r0, r3
 8001af4:	f000 fed0 	bl	8002898 <GetPageState>
 8001af8:	0003      	movs	r3, r0
 8001afa:	7023      	strb	r3, [r4, #0]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 8001afc:	1dfb      	adds	r3, r7, #7
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d141      	bne.n	8001b88 <EE_CleanUp+0x114>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	e02b      	b.n	8001b64 <EE_CleanUp+0xf0>
      {
        pageaddress = PAGE_ADDRESS(page);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	2280      	movs	r2, #128	@ 0x80
 8001b10:	0252      	lsls	r2, r2, #9
 8001b12:	4694      	mov	ip, r2
 8001b14:	4463      	add	r3, ip
 8001b16:	02dc      	lsls	r4, r3, #11
 8001b18:	4b28      	ldr	r3, [pc, #160]	@ (8001bbc <EE_CleanUp+0x148>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	029a      	lsls	r2, r3, #10
 8001b1e:	23ff      	movs	r3, #255	@ 0xff
 8001b20:	029b      	lsls	r3, r3, #10
 8001b22:	4013      	ands	r3, r2
 8001b24:	0019      	movs	r1, r3
 8001b26:	2380      	movs	r3, #128	@ 0x80
 8001b28:	0218      	lsls	r0, r3, #8
 8001b2a:	f7fe faf7 	bl	800011c <__udivsi3>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	0019      	movs	r1, r3
 8001b32:	4b22      	ldr	r3, [pc, #136]	@ (8001bbc <EE_CleanUp+0x148>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	029a      	lsls	r2, r3, #10
 8001b38:	23ff      	movs	r3, #255	@ 0xff
 8001b3a:	029b      	lsls	r3, r3, #10
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	434b      	muls	r3, r1
 8001b40:	18e3      	adds	r3, r4, r3
 8001b42:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 8001b44:	1dbc      	adds	r4, r7, #6
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f000 fea5 	bl	8002898 <GetPageState>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	7023      	strb	r3, [r4, #0]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 8001b52:	1dbb      	adds	r3, r7, #6
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d001      	beq.n	8001b5e <EE_CleanUp+0xea>
        {
          return EE_ERROR_NOERASING_PAGE;
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	e02a      	b.n	8001bb4 <EE_CleanUp+0x140>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	3301      	adds	r3, #1
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3305      	adds	r3, #5
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d3ce      	bcc.n	8001b0c <EE_CleanUp+0x98>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif

      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2105      	movs	r1, #5
 8001b72:	0018      	movs	r0, r3
 8001b74:	f000 ff2f 	bl	80029d6 <FI_PageErase>
 8001b78:	1e03      	subs	r3, r0, #0
 8001b7a:	d001      	beq.n	8001b80 <EE_CleanUp+0x10c>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e019      	b.n	8001bb4 <EE_CleanUp+0x140>
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 8001b80:	f000 ff54 	bl	8002a2c <FI_CacheFlush>
        
        return EE_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e015      	b.n	8001bb4 <EE_CleanUp+0x140>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	3305      	adds	r3, #5
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <EE_CleanUp+0x148>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	029a      	lsls	r2, r3, #10
 8001b94:	23ff      	movs	r3, #255	@ 0xff
 8001b96:	029b      	lsls	r3, r3, #10
 8001b98:	401a      	ands	r2, r3
 8001b9a:	2380      	movs	r3, #128	@ 0x80
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f7fe fb41 	bl	8000228 <__aeabi_uidivmod>
 8001ba6:	000b      	movs	r3, r1
 8001ba8:	0adb      	lsrs	r3, r3, #11
 8001baa:	330a      	adds	r3, #10
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d381      	bcc.n	8001ab6 <EE_CleanUp+0x42>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 8001bb2:	2305      	movs	r3, #5
}
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b007      	add	sp, #28
 8001bba:	bd90      	pop	{r4, r7, pc}
 8001bbc:	1fff75e0 	.word	0x1fff75e0

08001bc0 <ReadVariable>:
#ifndef FLASH_LINES_128B
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#else
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#endif
{
 8001bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc2:	b08f      	sub	sp, #60	@ 0x3c
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	6139      	str	r1, [r7, #16]
 8001bca:	2316      	movs	r3, #22
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	801a      	strh	r2, [r3, #0]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	623a      	str	r2, [r7, #32]
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
#endif
  uint32_t page = 0U, pageaddress = 0U, counter = 0U, crc = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bdc:	2300      	movs	r3, #0
 8001bde:	633b      	str	r3, [r7, #48]	@ 0x30
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
  EE_State_type pagestate = STATE_PAGE_INVALID;
 8001be8:	231b      	movs	r3, #27
 8001bea:	2210      	movs	r2, #16
 8001bec:	189b      	adds	r3, r3, r2
 8001bee:	19db      	adds	r3, r3, r7
 8001bf0:	2205      	movs	r2, #5
 8001bf2:	701a      	strb	r2, [r3, #0]

  /* Get active Page for read operation */
  page = FindPage(FIND_READ_PAGE);
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f000 f92b 	bl	8001e50 <FindPage>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Check if there is no active page */
  if (page == EE_NO_PAGE_FOUND)
 8001bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c00:	3301      	adds	r3, #1
 8001c02:	d101      	bne.n	8001c08 <ReadVariable+0x48>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e0cd      	b.n	8001da4 <ReadVariable+0x1e4>
  }
  pageaddress = PAGE_ADDRESS(page);
 8001c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c0a:	2280      	movs	r2, #128	@ 0x80
 8001c0c:	0252      	lsls	r2, r2, #9
 8001c0e:	4694      	mov	ip, r2
 8001c10:	4463      	add	r3, ip
 8001c12:	02de      	lsls	r6, r3, #11
 8001c14:	4b65      	ldr	r3, [pc, #404]	@ (8001dac <ReadVariable+0x1ec>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	029a      	lsls	r2, r3, #10
 8001c1a:	23ff      	movs	r3, #255	@ 0xff
 8001c1c:	029b      	lsls	r3, r3, #10
 8001c1e:	4013      	ands	r3, r2
 8001c20:	0019      	movs	r1, r3
 8001c22:	2380      	movs	r3, #128	@ 0x80
 8001c24:	0218      	lsls	r0, r3, #8
 8001c26:	f7fe fa79 	bl	800011c <__udivsi3>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	4b5f      	ldr	r3, [pc, #380]	@ (8001dac <ReadVariable+0x1ec>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	029a      	lsls	r2, r3, #10
 8001c34:	23ff      	movs	r3, #255	@ 0xff
 8001c36:	029b      	lsls	r3, r3, #10
 8001c38:	4013      	ands	r3, r2
 8001c3a:	434b      	muls	r3, r1
 8001c3c:	18f3      	adds	r3, r6, r3
 8001c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  pagestate = GetPageState(pageaddress);
 8001c40:	231b      	movs	r3, #27
 8001c42:	2210      	movs	r2, #16
 8001c44:	189b      	adds	r3, r3, r2
 8001c46:	19de      	adds	r6, r3, r7
 8001c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f000 fe24 	bl	8002898 <GetPageState>
 8001c50:	0003      	movs	r3, r0
 8001c52:	7033      	strb	r3, [r6, #0]

  /* Search variable in active page and valid pages until erased page is found
     or in erasing pages until erased page is found */
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 8001c54:	e091      	b.n	8001d7a <ReadVariable+0x1ba>
  {
    /* Set counter index to last element position in the page */
    counter = PAGE_SIZE - EE_ELEMENT_SIZE;
 8001c56:	23ff      	movs	r3, #255	@ 0xff
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Check each page address starting from end */
    while (counter >= PAGE_HEADER_SIZE)
 8001c5c:	e03d      	b.n	8001cda <ReadVariable+0x11a>
    {
      /* Get the current location content to be compared with virtual address */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + counter));
 8001c5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c62:	18d3      	adds	r3, r2, r3
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	623a      	str	r2, [r7, #32]
 8001c6a:	627b      	str	r3, [r7, #36]	@ 0x24
#ifndef FLASH_LINES_128B
      if (addressvalue != EE_PAGESTAT_ERASED)
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	d102      	bne.n	8001c78 <ReadVariable+0xb8>
 8001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c74:	3301      	adds	r3, #1
 8001c76:	d02d      	beq.n	8001cd4 <ReadVariable+0x114>
      {
        /* Compare the read address with the virtual address */
        if (EE_VIRTUALADDRESS_VALUE(addressvalue) == VirtAddress)
 8001c78:	6a3a      	ldr	r2, [r7, #32]
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7c:	1c13      	adds	r3, r2, #0
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	2216      	movs	r2, #22
 8001c82:	18ba      	adds	r2, r7, r2
 8001c84:	8812      	ldrh	r2, [r2, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d124      	bne.n	8001cd4 <ReadVariable+0x114>
        {
          /* Calculate crc of variable data and virtual address */
          crc = CalculateCrc(EE_DATA_VALUE(addressvalue), EE_VIRTUALADDRESS_VALUE(addressvalue));
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	001b      	movs	r3, r3
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68b8      	ldr	r0, [r7, #8]
 8001c96:	6a3a      	ldr	r2, [r7, #32]
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	1c13      	adds	r3, r2, #0
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	f000 fe64 	bl	800296c <CalculateCrc>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	61fb      	str	r3, [r7, #28]
          
          /* if crc verification pass, data is correct and is returned.
             if crc verification fails, data is corrupted and has to be skip */
          if (crc == EE_CRC_VALUE(addressvalue))
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001caa:	041b      	lsls	r3, r3, #16
 8001cac:	6a3a      	ldr	r2, [r7, #32]
 8001cae:	0c14      	lsrs	r4, r2, #16
 8001cb0:	431c      	orrs	r4, r3
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	0c1d      	lsrs	r5, r3, #16
 8001cb6:	b2a3      	uxth	r3, r4
 8001cb8:	001a      	movs	r2, r3
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d109      	bne.n	8001cd4 <ReadVariable+0x114>
          {
            /* Get content of variable value */
            *pData = EE_DATA_VALUE(addressvalue);
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc2:	001b      	movs	r3, r3
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	601a      	str	r2, [r3, #0]

            return EE_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e067      	b.n	8001da4 <ReadVariable+0x1e4>
          }
        }
      }
#endif
      /* Next address location */
      counter -= EE_ELEMENT_SIZE;
 8001cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cd6:	3b08      	subs	r3, #8
 8001cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (counter >= PAGE_HEADER_SIZE)
 8001cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cdc:	2b1f      	cmp	r3, #31
 8001cde:	d8be      	bhi.n	8001c5e <ReadVariable+0x9e>
    }

    /* Decrement page index circularly, among pages allocated to eeprom emulation */
    page = PREVIOUS_PAGE(page);
 8001ce0:	4b32      	ldr	r3, [pc, #200]	@ (8001dac <ReadVariable+0x1ec>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	029a      	lsls	r2, r3, #10
 8001ce6:	23ff      	movs	r3, #255	@ 0xff
 8001ce8:	029b      	lsls	r3, r3, #10
 8001cea:	401a      	ands	r2, r3
 8001cec:	2380      	movs	r3, #128	@ 0x80
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	0011      	movs	r1, r2
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f7fe fa98 	bl	8000228 <__aeabi_uidivmod>
 8001cf8:	000b      	movs	r3, r1
 8001cfa:	0adb      	lsrs	r3, r3, #11
 8001cfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	3309      	adds	r3, #9
 8001d02:	210a      	movs	r1, #10
 8001d04:	0018      	movs	r0, r3
 8001d06:	f7fe fa8f 	bl	8000228 <__aeabi_uidivmod>
 8001d0a:	000b      	movs	r3, r1
 8001d0c:	001e      	movs	r6, r3
 8001d0e:	4b27      	ldr	r3, [pc, #156]	@ (8001dac <ReadVariable+0x1ec>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	029a      	lsls	r2, r3, #10
 8001d14:	23ff      	movs	r3, #255	@ 0xff
 8001d16:	029b      	lsls	r3, r3, #10
 8001d18:	401a      	ands	r2, r3
 8001d1a:	2380      	movs	r3, #128	@ 0x80
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	0011      	movs	r1, r2
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7fe fa81 	bl	8000228 <__aeabi_uidivmod>
 8001d26:	000b      	movs	r3, r1
 8001d28:	0adb      	lsrs	r3, r3, #11
 8001d2a:	18f3      	adds	r3, r6, r3
 8001d2c:	637b      	str	r3, [r7, #52]	@ 0x34
    pageaddress = PAGE_ADDRESS(page);
 8001d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d30:	2280      	movs	r2, #128	@ 0x80
 8001d32:	0252      	lsls	r2, r2, #9
 8001d34:	4694      	mov	ip, r2
 8001d36:	4463      	add	r3, ip
 8001d38:	02de      	lsls	r6, r3, #11
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dac <ReadVariable+0x1ec>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	029a      	lsls	r2, r3, #10
 8001d40:	23ff      	movs	r3, #255	@ 0xff
 8001d42:	029b      	lsls	r3, r3, #10
 8001d44:	4013      	ands	r3, r2
 8001d46:	0019      	movs	r1, r3
 8001d48:	2380      	movs	r3, #128	@ 0x80
 8001d4a:	0218      	lsls	r0, r3, #8
 8001d4c:	f7fe f9e6 	bl	800011c <__udivsi3>
 8001d50:	0003      	movs	r3, r0
 8001d52:	0019      	movs	r1, r3
 8001d54:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <ReadVariable+0x1ec>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	029a      	lsls	r2, r3, #10
 8001d5a:	23ff      	movs	r3, #255	@ 0xff
 8001d5c:	029b      	lsls	r3, r3, #10
 8001d5e:	4013      	ands	r3, r2
 8001d60:	434b      	muls	r3, r1
 8001d62:	18f3      	adds	r3, r6, r3
 8001d64:	633b      	str	r3, [r7, #48]	@ 0x30
    pagestate = GetPageState(pageaddress);
 8001d66:	231b      	movs	r3, #27
 8001d68:	2210      	movs	r2, #16
 8001d6a:	189b      	adds	r3, r3, r2
 8001d6c:	19de      	adds	r6, r3, r7
 8001d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d70:	0018      	movs	r0, r3
 8001d72:	f000 fd91 	bl	8002898 <GetPageState>
 8001d76:	0003      	movs	r3, r0
 8001d78:	7033      	strb	r3, [r6, #0]
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 8001d7a:	221b      	movs	r2, #27
 8001d7c:	2110      	movs	r1, #16
 8001d7e:	1853      	adds	r3, r2, r1
 8001d80:	19db      	adds	r3, r3, r7
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d100      	bne.n	8001d8a <ReadVariable+0x1ca>
 8001d88:	e765      	b.n	8001c56 <ReadVariable+0x96>
 8001d8a:	1853      	adds	r3, r2, r1
 8001d8c:	19db      	adds	r3, r3, r7
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d100      	bne.n	8001d96 <ReadVariable+0x1d6>
 8001d94:	e75f      	b.n	8001c56 <ReadVariable+0x96>
 8001d96:	1853      	adds	r3, r2, r1
 8001d98:	19db      	adds	r3, r3, r7
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d100      	bne.n	8001da2 <ReadVariable+0x1e2>
 8001da0:	e759      	b.n	8001c56 <ReadVariable+0x96>
  }

  /* Variable is not found */
  return EE_NO_DATA;
 8001da2:	2307      	movs	r3, #7
}
 8001da4:	0018      	movs	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b00f      	add	sp, #60	@ 0x3c
 8001daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dac:	1fff75e0 	.word	0x1fff75e0

08001db0 <WriteVariable>:
#ifndef FLASH_LINES_128B
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#else
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data)
#endif
{
 8001db0:	b5b0      	push	{r4, r5, r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	0002      	movs	r2, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	1dbb      	adds	r3, r7, #6
 8001dbc:	801a      	strh	r2, [r3, #0]
  EE_Status status = EE_OK;
 8001dbe:	250e      	movs	r5, #14
 8001dc0:	197b      	adds	r3, r7, r5
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	801a      	strh	r2, [r3, #0]

  /* Write the variable virtual address and value in the EEPROM, if not full */
#if defined (DUALCORE_FLASH_SHARING) || defined (FLASH_LINES_128B)
  status = VerifyPagesFullWriteVariable(VirtAddress, Data, EE_SIMPLE_WRITE);
#else
  status = VerifyPagesFullWriteVariable(VirtAddress, Data);
 8001dc6:	197c      	adds	r4, r7, r5
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	1dbb      	adds	r3, r7, #6
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	0011      	movs	r1, r2
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f000 fbf5 	bl	80025c0 <VerifyPagesFullWriteVariable>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	8023      	strh	r3, [r4, #0]
#endif
  if (status == EE_PAGE_FULL)
 8001dda:	197b      	adds	r3, r7, r5
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	2b12      	cmp	r3, #18
 8001de0:	d108      	bne.n	8001df4 <WriteVariable+0x44>
  {
    /* In case the EEPROM pages are full, perform Pages transfer */
    return PagesTransfer(VirtAddress, Data, EE_TRANSFER_NORMAL);
 8001de2:	6839      	ldr	r1, [r7, #0]
 8001de4:	1dbb      	adds	r3, r7, #6
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	2200      	movs	r2, #0
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 f972 	bl	80020d4 <PagesTransfer>
 8001df0:	0003      	movs	r3, r0
 8001df2:	e002      	b.n	8001dfa <WriteVariable+0x4a>
  }

  /* Return last operation status */
  return status;
 8001df4:	230e      	movs	r3, #14
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	881b      	ldrh	r3, [r3, #0]
}
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b004      	add	sp, #16
 8001e00:	bdb0      	pop	{r4, r5, r7, pc}

08001e02 <VerifyPageFullyErased>:
  * @retval EE_Status
  *           - EE_PAGE_NOTERASED : if Page not erased
  *           - EE_PAGE_ERASED    : if Page erased
  */
static EE_Status VerifyPageFullyErased(uint32_t Address, uint32_t PageSize)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	6039      	str	r1, [r7, #0]
  EE_Status readstatus = EE_PAGE_ERASED;
 8001e0c:	230e      	movs	r3, #14
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	2211      	movs	r2, #17
 8001e12:	801a      	strh	r2, [r3, #0]
  uint32_t counter = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]

  /* Check each element in the page */
  while (counter < PageSize)
 8001e18:	e00f      	b.n	8001e3a <VerifyPageFullyErased+0x38>
  {
    /* Compare the read address with the virtual address */
#ifndef FLASH_LINES_128B    
	if ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED)
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	18d3      	adds	r3, r2, r3
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	1c51      	adds	r1, r2, #1
 8001e26:	d101      	bne.n	8001e2c <VerifyPageFullyErased+0x2a>
 8001e28:	3301      	adds	r3, #1
 8001e2a:	d003      	beq.n	8001e34 <VerifyPageFullyErased+0x32>
#else
	if ( ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED) && ((*(__IO EE_ELEMENT_TYPE*)(Address+counter+8U)) != EE_PAGESTAT_ERASED) )
#endif    
	{
      /* In case one element is not erased, reset readstatus flag */
      readstatus = EE_PAGE_NOTERASED;
 8001e2c:	230e      	movs	r3, #14
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	2210      	movs	r2, #16
 8001e32:	801a      	strh	r2, [r3, #0]
    }
    /* Next address location */
    counter = counter + EE_ELEMENT_SIZE;
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	3308      	adds	r3, #8
 8001e38:	60bb      	str	r3, [r7, #8]
  while (counter < PageSize)
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d3eb      	bcc.n	8001e1a <VerifyPageFullyErased+0x18>
  }

  /* Return readstatus value */
  return readstatus;
 8001e42:	230e      	movs	r3, #14
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	881b      	ldrh	r3, [r3, #0]
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b004      	add	sp, #16
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <FindPage>:
  * @retval Page_Index
  *           - Page Index: on success
  *           - @ref EE_NO_PAGE_FOUND : if an error occurs
  */
static uint32_t FindPage(EE_Find_type Operation)
{
 8001e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	0002      	movs	r2, r0
 8001e58:	1dfb      	adds	r3, r7, #7
 8001e5a:	701a      	strb	r2, [r3, #0]
  EE_State_type currentpagestatus = STATE_PAGE_INVALID, followingpagestatus = STATE_PAGE_INVALID;
 8001e5c:	2517      	movs	r5, #23
 8001e5e:	197b      	adds	r3, r7, r5
 8001e60:	2205      	movs	r2, #5
 8001e62:	701a      	strb	r2, [r3, #0]
 8001e64:	2616      	movs	r6, #22
 8001e66:	19bb      	adds	r3, r7, r6
 8001e68:	2205      	movs	r2, #5
 8001e6a:	701a      	strb	r2, [r3, #0]
  uint32_t currentpage = 0U, followingpage = 0U, previouspage = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]

  /* Get currentpage status */
  currentpage = ubCurrentActivePage;
 8001e78:	4b93      	ldr	r3, [pc, #588]	@ (80020c8 <FindPage+0x278>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	613b      	str	r3, [r7, #16]
  currentpagestatus = GetPageState(PAGE_ADDRESS(currentpage));
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	2280      	movs	r2, #128	@ 0x80
 8001e82:	0252      	lsls	r2, r2, #9
 8001e84:	4694      	mov	ip, r2
 8001e86:	4463      	add	r3, ip
 8001e88:	02dc      	lsls	r4, r3, #11
 8001e8a:	4b90      	ldr	r3, [pc, #576]	@ (80020cc <FindPage+0x27c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	029a      	lsls	r2, r3, #10
 8001e90:	23ff      	movs	r3, #255	@ 0xff
 8001e92:	029b      	lsls	r3, r3, #10
 8001e94:	4013      	ands	r3, r2
 8001e96:	0019      	movs	r1, r3
 8001e98:	2380      	movs	r3, #128	@ 0x80
 8001e9a:	0218      	lsls	r0, r3, #8
 8001e9c:	f7fe f93e 	bl	800011c <__udivsi3>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	0019      	movs	r1, r3
 8001ea4:	4b89      	ldr	r3, [pc, #548]	@ (80020cc <FindPage+0x27c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	029a      	lsls	r2, r3, #10
 8001eaa:	23ff      	movs	r3, #255	@ 0xff
 8001eac:	029b      	lsls	r3, r3, #10
 8001eae:	4013      	ands	r3, r2
 8001eb0:	434b      	muls	r3, r1
 8001eb2:	18e3      	adds	r3, r4, r3
 8001eb4:	197c      	adds	r4, r7, r5
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f000 fcee 	bl	8002898 <GetPageState>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	7023      	strb	r3, [r4, #0]

  /* Get followingpage status */
  followingpage = FOLLOWING_PAGE(currentpage);
 8001ec0:	4b82      	ldr	r3, [pc, #520]	@ (80020cc <FindPage+0x27c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	029a      	lsls	r2, r3, #10
 8001ec6:	23ff      	movs	r3, #255	@ 0xff
 8001ec8:	029b      	lsls	r3, r3, #10
 8001eca:	401a      	ands	r2, r3
 8001ecc:	2380      	movs	r3, #128	@ 0x80
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	0011      	movs	r1, r2
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f7fe f9a8 	bl	8000228 <__aeabi_uidivmod>
 8001ed8:	000b      	movs	r3, r1
 8001eda:	0adb      	lsrs	r3, r3, #11
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	210a      	movs	r1, #10
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7fe f99f 	bl	8000228 <__aeabi_uidivmod>
 8001eea:	000b      	movs	r3, r1
 8001eec:	001c      	movs	r4, r3
 8001eee:	4b77      	ldr	r3, [pc, #476]	@ (80020cc <FindPage+0x27c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	029a      	lsls	r2, r3, #10
 8001ef4:	23ff      	movs	r3, #255	@ 0xff
 8001ef6:	029b      	lsls	r3, r3, #10
 8001ef8:	401a      	ands	r2, r3
 8001efa:	2380      	movs	r3, #128	@ 0x80
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	0011      	movs	r1, r2
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7fe f991 	bl	8000228 <__aeabi_uidivmod>
 8001f06:	000b      	movs	r3, r1
 8001f08:	0adb      	lsrs	r3, r3, #11
 8001f0a:	18e3      	adds	r3, r4, r3
 8001f0c:	60fb      	str	r3, [r7, #12]
  followingpagestatus = GetPageState(PAGE_ADDRESS(followingpage));
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2280      	movs	r2, #128	@ 0x80
 8001f12:	0252      	lsls	r2, r2, #9
 8001f14:	4694      	mov	ip, r2
 8001f16:	4463      	add	r3, ip
 8001f18:	02dc      	lsls	r4, r3, #11
 8001f1a:	4b6c      	ldr	r3, [pc, #432]	@ (80020cc <FindPage+0x27c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	029a      	lsls	r2, r3, #10
 8001f20:	23ff      	movs	r3, #255	@ 0xff
 8001f22:	029b      	lsls	r3, r3, #10
 8001f24:	4013      	ands	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	2380      	movs	r3, #128	@ 0x80
 8001f2a:	0218      	lsls	r0, r3, #8
 8001f2c:	f7fe f8f6 	bl	800011c <__udivsi3>
 8001f30:	0003      	movs	r3, r0
 8001f32:	0019      	movs	r1, r3
 8001f34:	4b65      	ldr	r3, [pc, #404]	@ (80020cc <FindPage+0x27c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	029a      	lsls	r2, r3, #10
 8001f3a:	23ff      	movs	r3, #255	@ 0xff
 8001f3c:	029b      	lsls	r3, r3, #10
 8001f3e:	4013      	ands	r3, r2
 8001f40:	434b      	muls	r3, r1
 8001f42:	18e3      	adds	r3, r4, r3
 8001f44:	19bc      	adds	r4, r7, r6
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 fca6 	bl	8002898 <GetPageState>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	7023      	strb	r3, [r4, #0]

  /* Get previouspage status */
  previouspage = PREVIOUS_PAGE(currentpage);
 8001f50:	4b5e      	ldr	r3, [pc, #376]	@ (80020cc <FindPage+0x27c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	029a      	lsls	r2, r3, #10
 8001f56:	23ff      	movs	r3, #255	@ 0xff
 8001f58:	029b      	lsls	r3, r3, #10
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	0011      	movs	r1, r2
 8001f62:	0018      	movs	r0, r3
 8001f64:	f7fe f960 	bl	8000228 <__aeabi_uidivmod>
 8001f68:	000b      	movs	r3, r1
 8001f6a:	0adb      	lsrs	r3, r3, #11
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	3309      	adds	r3, #9
 8001f72:	210a      	movs	r1, #10
 8001f74:	0018      	movs	r0, r3
 8001f76:	f7fe f957 	bl	8000228 <__aeabi_uidivmod>
 8001f7a:	000b      	movs	r3, r1
 8001f7c:	001c      	movs	r4, r3
 8001f7e:	4b53      	ldr	r3, [pc, #332]	@ (80020cc <FindPage+0x27c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	029a      	lsls	r2, r3, #10
 8001f84:	23ff      	movs	r3, #255	@ 0xff
 8001f86:	029b      	lsls	r3, r3, #10
 8001f88:	401a      	ands	r2, r3
 8001f8a:	2380      	movs	r3, #128	@ 0x80
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	0011      	movs	r1, r2
 8001f90:	0018      	movs	r0, r3
 8001f92:	f7fe f949 	bl	8000228 <__aeabi_uidivmod>
 8001f96:	000b      	movs	r3, r1
 8001f98:	0adb      	lsrs	r3, r3, #11
 8001f9a:	18e3      	adds	r3, r4, r3
 8001f9c:	60bb      	str	r3, [r7, #8]

  /* Write, read or erase operation */
  switch (Operation)
 8001f9e:	1dfb      	adds	r3, r7, #7
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d100      	bne.n	8001fa8 <FindPage+0x158>
 8001fa6:	e07e      	b.n	80020a6 <FindPage+0x256>
 8001fa8:	dd00      	ble.n	8001fac <FindPage+0x15c>
 8001faa:	e086      	b.n	80020ba <FindPage+0x26a>
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d100      	bne.n	8001fb2 <FindPage+0x162>
 8001fb0:	e068      	b.n	8002084 <FindPage+0x234>
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d000      	beq.n	8001fb8 <FindPage+0x168>
 8001fb6:	e080      	b.n	80020ba <FindPage+0x26a>
  {
    case FIND_WRITE_PAGE:   /* ---- Write operation ---- */
      /* Normal operation, no page transfer on going */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8001fb8:	197b      	adds	r3, r7, r5
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d12c      	bne.n	800201a <FindPage+0x1ca>
      {
        /* Check if active page is not full */
        if (uwAddressNextWrite < PAGE_SIZE)
 8001fc0:	4b43      	ldr	r3, [pc, #268]	@ (80020d0 <FindPage+0x280>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2380      	movs	r3, #128	@ 0x80
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d201      	bcs.n	8001fd0 <FindPage+0x180>
        {
          /* Return current Active page */
          return currentpage;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	e076      	b.n	80020be <FindPage+0x26e>
        }
        else
        /* No more space in current active page */
        {
          /* Check if following page is erasing state */
          if (followingpagestatus == STATE_PAGE_ERASING)
 8001fd0:	2316      	movs	r3, #22
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d106      	bne.n	8001fe8 <FindPage+0x198>
          {
            /* Force Cleanup, as not yet performed by user */
            if (EE_CleanUp() != EE_OK)
 8001fda:	f7ff fd4b 	bl	8001a74 <EE_CleanUp>
 8001fde:	1e03      	subs	r3, r0, #0
 8001fe0:	d002      	beq.n	8001fe8 <FindPage+0x198>
            {
              return EE_NO_PAGE_FOUND;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	425b      	negs	r3, r3
 8001fe6:	e06a      	b.n	80020be <FindPage+0x26e>
            }
          }

          /* Set current active page in valid state */
          if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	2103      	movs	r1, #3
 8001fec:	0018      	movs	r0, r3
 8001fee:	f000 fb81 	bl	80026f4 <SetPageState>
 8001ff2:	1e03      	subs	r3, r0, #0
 8001ff4:	d002      	beq.n	8001ffc <FindPage+0x1ac>
          {
            return EE_NO_PAGE_FOUND;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	425b      	negs	r3, r3
 8001ffa:	e060      	b.n	80020be <FindPage+0x26e>
          }

          /* Set following page as active */
          if (SetPageState(followingpage, STATE_PAGE_ACTIVE) != EE_OK)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2102      	movs	r1, #2
 8002000:	0018      	movs	r0, r3
 8002002:	f000 fb77 	bl	80026f4 <SetPageState>
 8002006:	1e03      	subs	r3, r0, #0
 8002008:	d002      	beq.n	8002010 <FindPage+0x1c0>
          {
            return EE_NO_PAGE_FOUND;
 800200a:	2301      	movs	r3, #1
 800200c:	425b      	negs	r3, r3
 800200e:	e056      	b.n	80020be <FindPage+0x26e>
          }
          uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8002010:	4b2f      	ldr	r3, [pc, #188]	@ (80020d0 <FindPage+0x280>)
 8002012:	2220      	movs	r2, #32
 8002014:	601a      	str	r2, [r3, #0]
          return followingpage;         /* Following page is now active one */
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	e051      	b.n	80020be <FindPage+0x26e>
        }
      }
      /* Transfer is on going, page receiving data */
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 800201a:	2317      	movs	r3, #23
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d12c      	bne.n	800207e <FindPage+0x22e>
        {
          /* Check if receive page is not full */
          if (uwAddressNextWrite < PAGE_SIZE)
 8002024:	4b2a      	ldr	r3, [pc, #168]	@ (80020d0 <FindPage+0x280>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	429a      	cmp	r2, r3
 800202e:	d201      	bcs.n	8002034 <FindPage+0x1e4>
          {
            /* Return current receive page */
            return currentpage;
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	e044      	b.n	80020be <FindPage+0x26e>
          }
          else
          /* No more space in current receive page */
          {
            /* Check if following page is erasing state */
            if (followingpagestatus == STATE_PAGE_ERASING)
 8002034:	2316      	movs	r3, #22
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b04      	cmp	r3, #4
 800203c:	d106      	bne.n	800204c <FindPage+0x1fc>
            {
              /* Force Cleanup, as not yet performed by user */
              if (EE_CleanUp() != EE_OK)
 800203e:	f7ff fd19 	bl	8001a74 <EE_CleanUp>
 8002042:	1e03      	subs	r3, r0, #0
 8002044:	d002      	beq.n	800204c <FindPage+0x1fc>
              {
                return EE_NO_PAGE_FOUND;
 8002046:	2301      	movs	r3, #1
 8002048:	425b      	negs	r3, r3
 800204a:	e038      	b.n	80020be <FindPage+0x26e>
              }
            }

            /* Set current receive page in valid state */
            if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	2103      	movs	r1, #3
 8002050:	0018      	movs	r0, r3
 8002052:	f000 fb4f 	bl	80026f4 <SetPageState>
 8002056:	1e03      	subs	r3, r0, #0
 8002058:	d002      	beq.n	8002060 <FindPage+0x210>
            {
              return EE_NO_PAGE_FOUND;
 800205a:	2301      	movs	r3, #1
 800205c:	425b      	negs	r3, r3
 800205e:	e02e      	b.n	80020be <FindPage+0x26e>
            }

            /* Set following page as receive */
            if (SetPageState(followingpage, STATE_PAGE_RECEIVE) != EE_OK)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2101      	movs	r1, #1
 8002064:	0018      	movs	r0, r3
 8002066:	f000 fb45 	bl	80026f4 <SetPageState>
 800206a:	1e03      	subs	r3, r0, #0
 800206c:	d002      	beq.n	8002074 <FindPage+0x224>
            {
              return EE_NO_PAGE_FOUND;
 800206e:	2301      	movs	r3, #1
 8002070:	425b      	negs	r3, r3
 8002072:	e024      	b.n	80020be <FindPage+0x26e>
            }
            uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8002074:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <FindPage+0x280>)
 8002076:	2220      	movs	r2, #32
 8002078:	601a      	str	r2, [r3, #0]
            return followingpage;         /* Following page is now active one */
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	e01f      	b.n	80020be <FindPage+0x26e>
          }
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 800207e:	2301      	movs	r3, #1
 8002080:	425b      	negs	r3, r3
 8002082:	e01c      	b.n	80020be <FindPage+0x26e>
        }
      }

    case FIND_READ_PAGE:  /* ---- Read operation ---- */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8002084:	2317      	movs	r3, #23
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d101      	bne.n	8002092 <FindPage+0x242>
      {
        return currentpage;
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	e015      	b.n	80020be <FindPage+0x26e>
      }
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8002092:	2317      	movs	r3, #23
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <FindPage+0x250>
        {
          return previouspage;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	e00e      	b.n	80020be <FindPage+0x26e>
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 80020a0:	2301      	movs	r3, #1
 80020a2:	425b      	negs	r3, r3
 80020a4:	e00b      	b.n	80020be <FindPage+0x26e>
        }
      }

    case FIND_ERASE_PAGE: /* ---- Return the erased page */
      if (followingpagestatus == STATE_PAGE_ERASED)
 80020a6:	2316      	movs	r3, #22
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <FindPage+0x264>
      {
        return followingpage;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	e004      	b.n	80020be <FindPage+0x26e>
      }
      else
      {
        return EE_NO_PAGE_FOUND;  /* No erased Page */
 80020b4:	2301      	movs	r3, #1
 80020b6:	425b      	negs	r3, r3
 80020b8:	e001      	b.n	80020be <FindPage+0x26e>

    default:
      ;
  }

  return EE_NO_PAGE_FOUND;
 80020ba:	2301      	movs	r3, #1
 80020bc:	425b      	negs	r3, r3
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b007      	add	sp, #28
 80020c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	200001c2 	.word	0x200001c2
 80020cc:	1fff75e0 	.word	0x1fff75e0
 80020d0:	20000004 	.word	0x20000004

080020d4 <PagesTransfer>:
#ifndef FLASH_LINES_128B
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE Data, EE_Transfer_type Type)
#else
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Transfer_type Type)
#endif
{
 80020d4:	b5b0      	push	{r4, r5, r7, lr}
 80020d6:	b08a      	sub	sp, #40	@ 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6039      	str	r1, [r7, #0]
 80020dc:	0011      	movs	r1, r2
 80020de:	1dbb      	adds	r3, r7, #6
 80020e0:	1c02      	adds	r2, r0, #0
 80020e2:	801a      	strh	r2, [r3, #0]
 80020e4:	1d7b      	adds	r3, r7, #5
 80020e6:	1c0a      	adds	r2, r1, #0
 80020e8:	701a      	strb	r2, [r3, #0]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 80020ea:	2327      	movs	r3, #39	@ 0x27
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	2205      	movs	r2, #5
 80020f0:	701a      	strb	r2, [r3, #0]
  uint32_t pageaddress = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
  uint32_t page = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	623b      	str	r3, [r7, #32]
  uint32_t varidx = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 80020fe:	2200      	movs	r2, #0
 8002100:	2300      	movs	r3, #0
 8002102:	613a      	str	r2, [r7, #16]
 8002104:	617b      	str	r3, [r7, #20]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  uint16_t nb_dummy_lines=0U;
#endif
  EE_Status status = EE_OK;
 8002106:	230e      	movs	r3, #14
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	2200      	movs	r2, #0
 800210c:	801a      	strh	r2, [r3, #0]
  EE_DATA_TYPE DataValue = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]

    
  /* Get receive Page for transfer operation */
  page = FindPage((Type == EE_TRANSFER_NORMAL?FIND_ERASE_PAGE:FIND_WRITE_PAGE));
 8002112:	1d7b      	adds	r3, r7, #5
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <PagesTransfer+0x4a>
 800211a:	2302      	movs	r3, #2
 800211c:	e000      	b.n	8002120 <PagesTransfer+0x4c>
 800211e:	2301      	movs	r3, #1
 8002120:	0018      	movs	r0, r3
 8002122:	f7ff fe95 	bl	8001e50 <FindPage>
 8002126:	0003      	movs	r3, r0
 8002128:	623b      	str	r3, [r7, #32]
  if (page == EE_NO_PAGE_FOUND)
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	3301      	adds	r3, #1
 800212e:	d101      	bne.n	8002134 <PagesTransfer+0x60>
  {
    return EE_ERROR_NOERASE_PAGE;
 8002130:	2304      	movs	r3, #4
 8002132:	e23a      	b.n	80025aa <PagesTransfer+0x4d6>
  }

  /* Reinitialize number of data written in the pages, and current active page */
  uhNbWrittenElements = 0U;
 8002134:	4bbe      	ldr	r3, [pc, #760]	@ (8002430 <PagesTransfer+0x35c>)
 8002136:	2200      	movs	r2, #0
 8002138:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = page;
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4bbd      	ldr	r3, [pc, #756]	@ (8002434 <PagesTransfer+0x360>)
 8002140:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8002142:	4bbd      	ldr	r3, [pc, #756]	@ (8002438 <PagesTransfer+0x364>)
 8002144:	2220      	movs	r2, #32
 8002146:	601a      	str	r2, [r3, #0]

  /* Mark the erased page at receive state in case of normal transfer */
  /* It is already the case in recover transfer case */
  /* If program operation was failed, a Flash error code is returned */
  if (Type == EE_TRANSFER_NORMAL)
 8002148:	1d7b      	adds	r3, r7, #5
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d108      	bne.n	8002162 <PagesTransfer+0x8e>
  {
    if (SetPageState(page, STATE_PAGE_RECEIVE) != EE_OK)
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	2101      	movs	r1, #1
 8002154:	0018      	movs	r0, r3
 8002156:	f000 facd 	bl	80026f4 <SetPageState>
 800215a:	1e03      	subs	r3, r0, #0
 800215c:	d001      	beq.n	8002162 <PagesTransfer+0x8e>
    {
      return EE_WRITE_ERROR;
 800215e:	2302      	movs	r3, #2
 8002160:	e223      	b.n	80025aa <PagesTransfer+0x4d6>
    }
  }

  /* Set the previous active page and all previous valid pages to erasing state */
  /* In case of recover transfer, some of these pages may already be marked erasing */
  page = PREVIOUS_PAGE(page);
 8002162:	4bb6      	ldr	r3, [pc, #728]	@ (800243c <PagesTransfer+0x368>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	029a      	lsls	r2, r3, #10
 8002168:	23ff      	movs	r3, #255	@ 0xff
 800216a:	029b      	lsls	r3, r3, #10
 800216c:	401a      	ands	r2, r3
 800216e:	2380      	movs	r3, #128	@ 0x80
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	0011      	movs	r1, r2
 8002174:	0018      	movs	r0, r3
 8002176:	f7fe f857 	bl	8000228 <__aeabi_uidivmod>
 800217a:	000b      	movs	r3, r1
 800217c:	0adb      	lsrs	r3, r3, #11
 800217e:	6a3a      	ldr	r2, [r7, #32]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	3309      	adds	r3, #9
 8002184:	210a      	movs	r1, #10
 8002186:	0018      	movs	r0, r3
 8002188:	f7fe f84e 	bl	8000228 <__aeabi_uidivmod>
 800218c:	000b      	movs	r3, r1
 800218e:	001c      	movs	r4, r3
 8002190:	4baa      	ldr	r3, [pc, #680]	@ (800243c <PagesTransfer+0x368>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	029a      	lsls	r2, r3, #10
 8002196:	23ff      	movs	r3, #255	@ 0xff
 8002198:	029b      	lsls	r3, r3, #10
 800219a:	401a      	ands	r2, r3
 800219c:	2380      	movs	r3, #128	@ 0x80
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	0011      	movs	r1, r2
 80021a2:	0018      	movs	r0, r3
 80021a4:	f7fe f840 	bl	8000228 <__aeabi_uidivmod>
 80021a8:	000b      	movs	r3, r1
 80021aa:	0adb      	lsrs	r3, r3, #11
 80021ac:	18e3      	adds	r3, r4, r3
 80021ae:	623b      	str	r3, [r7, #32]
  pageaddress = PAGE_ADDRESS(page);
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	2280      	movs	r2, #128	@ 0x80
 80021b4:	0252      	lsls	r2, r2, #9
 80021b6:	4694      	mov	ip, r2
 80021b8:	4463      	add	r3, ip
 80021ba:	02dc      	lsls	r4, r3, #11
 80021bc:	4b9f      	ldr	r3, [pc, #636]	@ (800243c <PagesTransfer+0x368>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	029a      	lsls	r2, r3, #10
 80021c2:	23ff      	movs	r3, #255	@ 0xff
 80021c4:	029b      	lsls	r3, r3, #10
 80021c6:	4013      	ands	r3, r2
 80021c8:	0019      	movs	r1, r3
 80021ca:	2380      	movs	r3, #128	@ 0x80
 80021cc:	0218      	lsls	r0, r3, #8
 80021ce:	f7fd ffa5 	bl	800011c <__udivsi3>
 80021d2:	0003      	movs	r3, r0
 80021d4:	0019      	movs	r1, r3
 80021d6:	4b99      	ldr	r3, [pc, #612]	@ (800243c <PagesTransfer+0x368>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	029a      	lsls	r2, r3, #10
 80021dc:	23ff      	movs	r3, #255	@ 0xff
 80021de:	029b      	lsls	r3, r3, #10
 80021e0:	4013      	ands	r3, r2
 80021e2:	434b      	muls	r3, r1
 80021e4:	18e3      	adds	r3, r4, r3
 80021e6:	61bb      	str	r3, [r7, #24]
  pagestatus = GetPageState(pageaddress);
 80021e8:	2527      	movs	r5, #39	@ 0x27
 80021ea:	197c      	adds	r4, r7, r5
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	0018      	movs	r0, r3
 80021f0:	f000 fb52 	bl	8002898 <GetPageState>
 80021f4:	0003      	movs	r3, r0
 80021f6:	7023      	strb	r3, [r4, #0]

  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 80021f8:	197b      	adds	r3, r7, r5
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d004      	beq.n	800220a <PagesTransfer+0x136>
 8002200:	197b      	adds	r3, r7, r5
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b04      	cmp	r3, #4
 8002206:	d000      	beq.n	800220a <PagesTransfer+0x136>
 8002208:	e0bc      	b.n	8002384 <PagesTransfer+0x2b0>
  {
    /* Set active page to erasing */
    if (pagestatus == STATE_PAGE_ACTIVE)
 800220a:	2327      	movs	r3, #39	@ 0x27
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d108      	bne.n	8002226 <PagesTransfer+0x152>
    {
      if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	2104      	movs	r1, #4
 8002218:	0018      	movs	r0, r3
 800221a:	f000 fa6b 	bl	80026f4 <SetPageState>
 800221e:	1e03      	subs	r3, r0, #0
 8002220:	d001      	beq.n	8002226 <PagesTransfer+0x152>
      {
        return EE_WRITE_ERROR;
 8002222:	2302      	movs	r3, #2
 8002224:	e1c1      	b.n	80025aa <PagesTransfer+0x4d6>
      }
    }

    /* Inspect the previous pages to set all valid pages to erasing state */
    /* In case of recover, some valid pages may be already erasing state */
    page = PREVIOUS_PAGE(page);
 8002226:	4b85      	ldr	r3, [pc, #532]	@ (800243c <PagesTransfer+0x368>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	029a      	lsls	r2, r3, #10
 800222c:	23ff      	movs	r3, #255	@ 0xff
 800222e:	029b      	lsls	r3, r3, #10
 8002230:	401a      	ands	r2, r3
 8002232:	2380      	movs	r3, #128	@ 0x80
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	0011      	movs	r1, r2
 8002238:	0018      	movs	r0, r3
 800223a:	f7fd fff5 	bl	8000228 <__aeabi_uidivmod>
 800223e:	000b      	movs	r3, r1
 8002240:	0adb      	lsrs	r3, r3, #11
 8002242:	6a3a      	ldr	r2, [r7, #32]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	3309      	adds	r3, #9
 8002248:	210a      	movs	r1, #10
 800224a:	0018      	movs	r0, r3
 800224c:	f7fd ffec 	bl	8000228 <__aeabi_uidivmod>
 8002250:	000b      	movs	r3, r1
 8002252:	001c      	movs	r4, r3
 8002254:	4b79      	ldr	r3, [pc, #484]	@ (800243c <PagesTransfer+0x368>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	029a      	lsls	r2, r3, #10
 800225a:	23ff      	movs	r3, #255	@ 0xff
 800225c:	029b      	lsls	r3, r3, #10
 800225e:	401a      	ands	r2, r3
 8002260:	2380      	movs	r3, #128	@ 0x80
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	0011      	movs	r1, r2
 8002266:	0018      	movs	r0, r3
 8002268:	f7fd ffde 	bl	8000228 <__aeabi_uidivmod>
 800226c:	000b      	movs	r3, r1
 800226e:	0adb      	lsrs	r3, r3, #11
 8002270:	18e3      	adds	r3, r4, r3
 8002272:	623b      	str	r3, [r7, #32]
    pageaddress = PAGE_ADDRESS(page);
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	2280      	movs	r2, #128	@ 0x80
 8002278:	0252      	lsls	r2, r2, #9
 800227a:	4694      	mov	ip, r2
 800227c:	4463      	add	r3, ip
 800227e:	02dc      	lsls	r4, r3, #11
 8002280:	4b6e      	ldr	r3, [pc, #440]	@ (800243c <PagesTransfer+0x368>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	029a      	lsls	r2, r3, #10
 8002286:	23ff      	movs	r3, #255	@ 0xff
 8002288:	029b      	lsls	r3, r3, #10
 800228a:	4013      	ands	r3, r2
 800228c:	0019      	movs	r1, r3
 800228e:	2380      	movs	r3, #128	@ 0x80
 8002290:	0218      	lsls	r0, r3, #8
 8002292:	f7fd ff43 	bl	800011c <__udivsi3>
 8002296:	0003      	movs	r3, r0
 8002298:	0019      	movs	r1, r3
 800229a:	4b68      	ldr	r3, [pc, #416]	@ (800243c <PagesTransfer+0x368>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	029a      	lsls	r2, r3, #10
 80022a0:	23ff      	movs	r3, #255	@ 0xff
 80022a2:	029b      	lsls	r3, r3, #10
 80022a4:	4013      	ands	r3, r2
 80022a6:	434b      	muls	r3, r1
 80022a8:	18e3      	adds	r3, r4, r3
 80022aa:	61bb      	str	r3, [r7, #24]
    pagestatus = GetPageState(pageaddress);
 80022ac:	2327      	movs	r3, #39	@ 0x27
 80022ae:	18fc      	adds	r4, r7, r3
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	0018      	movs	r0, r3
 80022b4:	f000 faf0 	bl	8002898 <GetPageState>
 80022b8:	0003      	movs	r3, r0
 80022ba:	7023      	strb	r3, [r4, #0]

    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 80022bc:	e058      	b.n	8002370 <PagesTransfer+0x29c>
    {
      /* Set valid page to erasing */
      if (pagestatus == STATE_PAGE_VALID)
 80022be:	2327      	movs	r3, #39	@ 0x27
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d108      	bne.n	80022da <PagesTransfer+0x206>
      {
        if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	2104      	movs	r1, #4
 80022cc:	0018      	movs	r0, r3
 80022ce:	f000 fa11 	bl	80026f4 <SetPageState>
 80022d2:	1e03      	subs	r3, r0, #0
 80022d4:	d001      	beq.n	80022da <PagesTransfer+0x206>
        {
          return EE_WRITE_ERROR;
 80022d6:	2302      	movs	r3, #2
 80022d8:	e167      	b.n	80025aa <PagesTransfer+0x4d6>
        }
      }

      /* decrement page index */
      page = PREVIOUS_PAGE(page);
 80022da:	4b58      	ldr	r3, [pc, #352]	@ (800243c <PagesTransfer+0x368>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	029a      	lsls	r2, r3, #10
 80022e0:	23ff      	movs	r3, #255	@ 0xff
 80022e2:	029b      	lsls	r3, r3, #10
 80022e4:	401a      	ands	r2, r3
 80022e6:	2380      	movs	r3, #128	@ 0x80
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	0011      	movs	r1, r2
 80022ec:	0018      	movs	r0, r3
 80022ee:	f7fd ff9b 	bl	8000228 <__aeabi_uidivmod>
 80022f2:	000b      	movs	r3, r1
 80022f4:	0adb      	lsrs	r3, r3, #11
 80022f6:	6a3a      	ldr	r2, [r7, #32]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	3309      	adds	r3, #9
 80022fc:	210a      	movs	r1, #10
 80022fe:	0018      	movs	r0, r3
 8002300:	f7fd ff92 	bl	8000228 <__aeabi_uidivmod>
 8002304:	000b      	movs	r3, r1
 8002306:	001c      	movs	r4, r3
 8002308:	4b4c      	ldr	r3, [pc, #304]	@ (800243c <PagesTransfer+0x368>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	029a      	lsls	r2, r3, #10
 800230e:	23ff      	movs	r3, #255	@ 0xff
 8002310:	029b      	lsls	r3, r3, #10
 8002312:	401a      	ands	r2, r3
 8002314:	2380      	movs	r3, #128	@ 0x80
 8002316:	021b      	lsls	r3, r3, #8
 8002318:	0011      	movs	r1, r2
 800231a:	0018      	movs	r0, r3
 800231c:	f7fd ff84 	bl	8000228 <__aeabi_uidivmod>
 8002320:	000b      	movs	r3, r1
 8002322:	0adb      	lsrs	r3, r3, #11
 8002324:	18e3      	adds	r3, r4, r3
 8002326:	623b      	str	r3, [r7, #32]
      pageaddress = PAGE_ADDRESS(page);
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	2280      	movs	r2, #128	@ 0x80
 800232c:	0252      	lsls	r2, r2, #9
 800232e:	4694      	mov	ip, r2
 8002330:	4463      	add	r3, ip
 8002332:	02dc      	lsls	r4, r3, #11
 8002334:	4b41      	ldr	r3, [pc, #260]	@ (800243c <PagesTransfer+0x368>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	029a      	lsls	r2, r3, #10
 800233a:	23ff      	movs	r3, #255	@ 0xff
 800233c:	029b      	lsls	r3, r3, #10
 800233e:	4013      	ands	r3, r2
 8002340:	0019      	movs	r1, r3
 8002342:	2380      	movs	r3, #128	@ 0x80
 8002344:	0218      	lsls	r0, r3, #8
 8002346:	f7fd fee9 	bl	800011c <__udivsi3>
 800234a:	0003      	movs	r3, r0
 800234c:	0019      	movs	r1, r3
 800234e:	4b3b      	ldr	r3, [pc, #236]	@ (800243c <PagesTransfer+0x368>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	029a      	lsls	r2, r3, #10
 8002354:	23ff      	movs	r3, #255	@ 0xff
 8002356:	029b      	lsls	r3, r3, #10
 8002358:	4013      	ands	r3, r2
 800235a:	434b      	muls	r3, r1
 800235c:	18e3      	adds	r3, r4, r3
 800235e:	61bb      	str	r3, [r7, #24]
      pagestatus = GetPageState(pageaddress);
 8002360:	2327      	movs	r3, #39	@ 0x27
 8002362:	18fc      	adds	r4, r7, r3
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	0018      	movs	r0, r3
 8002368:	f000 fa96 	bl	8002898 <GetPageState>
 800236c:	0003      	movs	r3, r0
 800236e:	7023      	strb	r3, [r4, #0]
    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8002370:	2227      	movs	r2, #39	@ 0x27
 8002372:	18bb      	adds	r3, r7, r2
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d0a1      	beq.n	80022be <PagesTransfer+0x1ea>
 800237a:	18bb      	adds	r3, r7, r2
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b04      	cmp	r3, #4
 8002380:	d09d      	beq.n	80022be <PagesTransfer+0x1ea>
  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8002382:	e00a      	b.n	800239a <PagesTransfer+0x2c6>
    }
  }
  else
  {
    if ((Type == EE_TRANSFER_RECOVER) && (pagestatus == STATE_PAGE_VALID))
 8002384:	1d7b      	adds	r3, r7, #5
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d104      	bne.n	8002396 <PagesTransfer+0x2c2>
 800238c:	2327      	movs	r3, #39	@ 0x27
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b03      	cmp	r3, #3
 8002394:	d001      	beq.n	800239a <PagesTransfer+0x2c6>
      /* (valid state). Then erasing state marking was already completed */
    }
    else
    {
      /* Inconsistent previous page state */
      return EE_INVALID_PAGE_SEQUENCE;
 8002396:	230a      	movs	r3, #10
 8002398:	e107      	b.n	80025aa <PagesTransfer+0x4d6>
    }
  }

  /* In case of recover transfer, transfer must be resumed where it has been stopped */
  /* Update global variables to reflect current transfer status */
  if (Type == EE_TRANSFER_RECOVER)
 800239a:	1d7b      	adds	r3, r7, #5
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d000      	beq.n	80023a4 <PagesTransfer+0x2d0>
 80023a2:	e0a8      	b.n	80024f6 <PagesTransfer+0x422>
  {
#ifdef FLASH_LINES_128B
    nb_dummy_lines=0;
#endif
    /* Count number of elements already transferred in current receive page */
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 80023a4:	2320      	movs	r3, #32
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	e037      	b.n	800241a <PagesTransfer+0x346>
    {
      /* Get next element in receive page */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 80023aa:	4b22      	ldr	r3, [pc, #136]	@ (8002434 <PagesTransfer+0x360>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2280      	movs	r2, #128	@ 0x80
 80023b0:	0252      	lsls	r2, r2, #9
 80023b2:	4694      	mov	ip, r2
 80023b4:	4463      	add	r3, ip
 80023b6:	02dc      	lsls	r4, r3, #11
 80023b8:	4b20      	ldr	r3, [pc, #128]	@ (800243c <PagesTransfer+0x368>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	029a      	lsls	r2, r3, #10
 80023be:	23ff      	movs	r3, #255	@ 0xff
 80023c0:	029b      	lsls	r3, r3, #10
 80023c2:	4013      	ands	r3, r2
 80023c4:	0019      	movs	r1, r3
 80023c6:	2380      	movs	r3, #128	@ 0x80
 80023c8:	0218      	lsls	r0, r3, #8
 80023ca:	f7fd fea7 	bl	800011c <__udivsi3>
 80023ce:	0003      	movs	r3, r0
 80023d0:	0019      	movs	r1, r3
 80023d2:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <PagesTransfer+0x368>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	029a      	lsls	r2, r3, #10
 80023d8:	23ff      	movs	r3, #255	@ 0xff
 80023da:	029b      	lsls	r3, r3, #10
 80023dc:	4013      	ands	r3, r2
 80023de:	434b      	muls	r3, r1
 80023e0:	18e2      	adds	r2, r4, r3
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	18d3      	adds	r3, r2, r3
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	613a      	str	r2, [r7, #16]
 80023ec:	617b      	str	r3, [r7, #20]
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else if ((addressvalue != EE_PAGESTAT_ERASED) || (addressvalue2 != EE_PAGESTAT_ERASED)&&(addressvalue != 0x0000000000000000U)|| (addressvalue2 != 0x0000000000000000U))
#else
      if (addressvalue != EE_PAGESTAT_ERASED)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	3301      	adds	r3, #1
 80023f2:	d103      	bne.n	80023fc <PagesTransfer+0x328>
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3301      	adds	r3, #1
 80023f8:	d100      	bne.n	80023fc <PagesTransfer+0x328>
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else
      {
        break;
 80023fa:	e013      	b.n	8002424 <PagesTransfer+0x350>
        uhNbWrittenElements++;
 80023fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <PagesTransfer+0x35c>)
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	3301      	adds	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <PagesTransfer+0x35c>)
 8002406:	801a      	strh	r2, [r3, #0]
        uwAddressNextWrite += EE_ELEMENT_SIZE;
 8002408:	4b0b      	ldr	r3, [pc, #44]	@ (8002438 <PagesTransfer+0x364>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	3308      	adds	r3, #8
 800240e:	001a      	movs	r2, r3
 8002410:	4b09      	ldr	r3, [pc, #36]	@ (8002438 <PagesTransfer+0x364>)
 8002412:	601a      	str	r2, [r3, #0]
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	3308      	adds	r3, #8
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	69fa      	ldr	r2, [r7, #28]
 800241c:	2380      	movs	r3, #128	@ 0x80
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	429a      	cmp	r2, r3
 8002422:	d3c2      	bcc.n	80023aa <PagesTransfer+0x2d6>
      }
    }

    /* Count number of elements already transferred in previous valid pages */
    page = ubCurrentActivePage;
 8002424:	4b03      	ldr	r3, [pc, #12]	@ (8002434 <PagesTransfer+0x360>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	623b      	str	r3, [r7, #32]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	e05d      	b.n	80024ec <PagesTransfer+0x418>
 8002430:	200001c0 	.word	0x200001c0
 8002434:	200001c2 	.word	0x200001c2
 8002438:	20000004 	.word	0x20000004
 800243c:	1fff75e0 	.word	0x1fff75e0
    {
      /* Decrement page index among circular pages list */
      page = PREVIOUS_PAGE(page);
 8002440:	4b5c      	ldr	r3, [pc, #368]	@ (80025b4 <PagesTransfer+0x4e0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	029a      	lsls	r2, r3, #10
 8002446:	23ff      	movs	r3, #255	@ 0xff
 8002448:	029b      	lsls	r3, r3, #10
 800244a:	401a      	ands	r2, r3
 800244c:	2380      	movs	r3, #128	@ 0x80
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	0011      	movs	r1, r2
 8002452:	0018      	movs	r0, r3
 8002454:	f7fd fee8 	bl	8000228 <__aeabi_uidivmod>
 8002458:	000b      	movs	r3, r1
 800245a:	0adb      	lsrs	r3, r3, #11
 800245c:	6a3a      	ldr	r2, [r7, #32]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	3309      	adds	r3, #9
 8002462:	210a      	movs	r1, #10
 8002464:	0018      	movs	r0, r3
 8002466:	f7fd fedf 	bl	8000228 <__aeabi_uidivmod>
 800246a:	000b      	movs	r3, r1
 800246c:	001c      	movs	r4, r3
 800246e:	4b51      	ldr	r3, [pc, #324]	@ (80025b4 <PagesTransfer+0x4e0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	029a      	lsls	r2, r3, #10
 8002474:	23ff      	movs	r3, #255	@ 0xff
 8002476:	029b      	lsls	r3, r3, #10
 8002478:	401a      	ands	r2, r3
 800247a:	2380      	movs	r3, #128	@ 0x80
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	0011      	movs	r1, r2
 8002480:	0018      	movs	r0, r3
 8002482:	f7fd fed1 	bl	8000228 <__aeabi_uidivmod>
 8002486:	000b      	movs	r3, r1
 8002488:	0adb      	lsrs	r3, r3, #11
 800248a:	18e3      	adds	r3, r4, r3
 800248c:	623b      	str	r3, [r7, #32]
      pagestatus = GetPageState(PAGE_ADDRESS(page));
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	2280      	movs	r2, #128	@ 0x80
 8002492:	0252      	lsls	r2, r2, #9
 8002494:	4694      	mov	ip, r2
 8002496:	4463      	add	r3, ip
 8002498:	02dc      	lsls	r4, r3, #11
 800249a:	4b46      	ldr	r3, [pc, #280]	@ (80025b4 <PagesTransfer+0x4e0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	029a      	lsls	r2, r3, #10
 80024a0:	23ff      	movs	r3, #255	@ 0xff
 80024a2:	029b      	lsls	r3, r3, #10
 80024a4:	4013      	ands	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	2380      	movs	r3, #128	@ 0x80
 80024aa:	0218      	lsls	r0, r3, #8
 80024ac:	f7fd fe36 	bl	800011c <__udivsi3>
 80024b0:	0003      	movs	r3, r0
 80024b2:	0019      	movs	r1, r3
 80024b4:	4b3f      	ldr	r3, [pc, #252]	@ (80025b4 <PagesTransfer+0x4e0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	029a      	lsls	r2, r3, #10
 80024ba:	23ff      	movs	r3, #255	@ 0xff
 80024bc:	029b      	lsls	r3, r3, #10
 80024be:	4013      	ands	r3, r2
 80024c0:	434b      	muls	r3, r1
 80024c2:	18e3      	adds	r3, r4, r3
 80024c4:	2527      	movs	r5, #39	@ 0x27
 80024c6:	197c      	adds	r4, r7, r5
 80024c8:	0018      	movs	r0, r3
 80024ca:	f000 f9e5 	bl	8002898 <GetPageState>
 80024ce:	0003      	movs	r3, r0
 80024d0:	7023      	strb	r3, [r4, #0]

      /* Check if page is valid state */
      if (pagestatus == STATE_PAGE_VALID)
 80024d2:	197b      	adds	r3, r7, r5
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d10c      	bne.n	80024f4 <PagesTransfer+0x420>
      {
        /* Update uhNbWrittenElements with number of elements in page */
        uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 80024da:	4b37      	ldr	r3, [pc, #220]	@ (80025b8 <PagesTransfer+0x4e4>)
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	33fc      	adds	r3, #252	@ 0xfc
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	4b35      	ldr	r3, [pc, #212]	@ (80025b8 <PagesTransfer+0x4e4>)
 80024e4:	801a      	strh	r2, [r3, #0]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3301      	adds	r3, #1
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2b09      	cmp	r3, #9
 80024f0:	d9a6      	bls.n	8002440 <PagesTransfer+0x36c>
 80024f2:	e000      	b.n	80024f6 <PagesTransfer+0x422>
        nb_dummy_lines=nb_dummy_lines+2;
#endif
      }
      else
      {
        break;
 80024f4:	46c0      	nop			@ (mov r8, r8)
  #endif
#else  

  // Write the variable passed as parameter in the new active page 
  // If program operation was failed, a Flash error code is returned 
  if (VerifyPagesFullWriteVariable(VirtAddress, Data) != EE_OK)
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	1dbb      	adds	r3, r7, #6
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	0011      	movs	r1, r2
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 f85e 	bl	80025c0 <VerifyPagesFullWriteVariable>
 8002504:	1e03      	subs	r3, r0, #0
 8002506:	d001      	beq.n	800250c <PagesTransfer+0x438>
  {
    return EE_WRITE_ERROR;
 8002508:	2302      	movs	r3, #2
 800250a:	e04e      	b.n	80025aa <PagesTransfer+0x4d6>

#ifdef FLASH_LINES_128B
  varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U);
  for (varidx = (varidx >= nb_dummy_lines?(varidx-nb_dummy_lines):1U); varidx < NB_OF_VARIABLES+1; varidx++)
#else    
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 800250c:	4b2a      	ldr	r3, [pc, #168]	@ (80025b8 <PagesTransfer+0x4e4>)
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d903      	bls.n	800251c <PagesTransfer+0x448>
 8002514:	4b28      	ldr	r3, [pc, #160]	@ (80025b8 <PagesTransfer+0x4e4>)
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	3b02      	subs	r3, #2
 800251a:	e000      	b.n	800251e <PagesTransfer+0x44a>
 800251c:	2301      	movs	r3, #1
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	e032      	b.n	8002588 <PagesTransfer+0x4b4>
#endif
  {  
       /* Check each variable except the one passed as parameter */
    if (varidx != VirtAddress)
 8002522:	1dbb      	adds	r3, r7, #6
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	429a      	cmp	r2, r3
 800252a:	d02a      	beq.n	8002582 <PagesTransfer+0x4ae>
    {
      /* Read the last variable updates */
      status = ReadVariable(varidx, &DataValue);
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	b29b      	uxth	r3, r3
 8002530:	250e      	movs	r5, #14
 8002532:	197c      	adds	r4, r7, r5
 8002534:	2208      	movs	r2, #8
 8002536:	18ba      	adds	r2, r7, r2
 8002538:	0011      	movs	r1, r2
 800253a:	0018      	movs	r0, r3
 800253c:	f7ff fb40 	bl	8001bc0 <ReadVariable>
 8002540:	0003      	movs	r3, r0
 8002542:	8023      	strh	r3, [r4, #0]
      if (status == EE_OK)
 8002544:	0029      	movs	r1, r5
 8002546:	187b      	adds	r3, r7, r1
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d111      	bne.n	8002572 <PagesTransfer+0x49e>
    #if defined (DUALCORE_FLASH_SHARING)
            status = VerifyPagesFullWriteVariable(varidx, DataValue, EE_TRANSFER);
    #elif defined (FLASH_LINES_128B)
            status = VerifyPagesFullWriteVariable(varidx, &DataValue, EE_TRANSFER);
    #else
            status = VerifyPagesFullWriteVariable(varidx, DataValue);
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	b29b      	uxth	r3, r3
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	000d      	movs	r5, r1
 8002556:	187c      	adds	r4, r7, r1
 8002558:	0011      	movs	r1, r2
 800255a:	0018      	movs	r0, r3
 800255c:	f000 f830 	bl	80025c0 <VerifyPagesFullWriteVariable>
 8002560:	0003      	movs	r3, r0
 8002562:	8023      	strh	r3, [r4, #0]
    #endif
        if (status != EE_OK)
 8002564:	197b      	adds	r3, r7, r5
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <PagesTransfer+0x4ae>
        {
          return status;
 800256c:	197b      	adds	r3, r7, r5
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	e01b      	b.n	80025aa <PagesTransfer+0x4d6>
        }
      }
      else
      {
        if (status != EE_NO_DATA)
 8002572:	220e      	movs	r2, #14
 8002574:	18bb      	adds	r3, r7, r2
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	2b07      	cmp	r3, #7
 800257a:	d002      	beq.n	8002582 <PagesTransfer+0x4ae>
        {
          /* In case variable is not found , do nothing */
          /* Any other status is error code occurs during variable read */
          return status;
 800257c:	18bb      	adds	r3, r7, r2
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	e013      	b.n	80025aa <PagesTransfer+0x4d6>
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3301      	adds	r3, #1
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	23fa      	movs	r3, #250	@ 0xfa
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	429a      	cmp	r2, r3
 8002590:	d9c7      	bls.n	8002522 <PagesTransfer+0x44e>
      }
    }
  }

  /* Transfer is now done, mark the receive state page as active */
  if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 8002592:	4b0a      	ldr	r3, [pc, #40]	@ (80025bc <PagesTransfer+0x4e8>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2102      	movs	r1, #2
 8002598:	0018      	movs	r0, r3
 800259a:	f000 f8ab 	bl	80026f4 <SetPageState>
 800259e:	1e03      	subs	r3, r0, #0
 80025a0:	d001      	beq.n	80025a6 <PagesTransfer+0x4d2>
  {
    return EE_WRITE_ERROR;
 80025a2:	2302      	movs	r3, #2
 80025a4:	e001      	b.n	80025aa <PagesTransfer+0x4d6>
  }

  /* Return last operation flash status */
  return EE_CLEANUP_REQUIRED;
 80025a6:	2380      	movs	r3, #128	@ 0x80
 80025a8:	005b      	lsls	r3, r3, #1
}
 80025aa:	0018      	movs	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b00a      	add	sp, #40	@ 0x28
 80025b0:	bdb0      	pop	{r4, r5, r7, pc}
 80025b2:	46c0      	nop			@ (mov r8, r8)
 80025b4:	1fff75e0 	.word	0x1fff75e0
 80025b8:	200001c0 	.word	0x200001c0
 80025bc:	200001c2 	.word	0x200001c2

080025c0 <VerifyPagesFullWriteVariable>:
#elif defined (FLASH_LINES_128B)
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Write_type Write_type)
#else
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#endif
{
 80025c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c2:	b091      	sub	sp, #68	@ 0x44
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	0003      	movs	r3, r0
 80025c8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80025ca:	222e      	movs	r2, #46	@ 0x2e
 80025cc:	18ba      	adds	r2, r7, r2
 80025ce:	8013      	strh	r3, [r2, #0]
#ifndef FLASH_LINES_128B
  uint32_t crc = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint64_t pData64[2] = {0,0};
  uint64_t crc = 0U;
#endif

  /* Check if pages are full, i.e. max number of written elements achieved */
  if (uhNbWrittenElements >= NB_MAX_WRITTEN_ELEMENTS)
 80025d4:	4b43      	ldr	r3, [pc, #268]	@ (80026e4 <VerifyPagesFullWriteVariable+0x124>)
 80025d6:	881a      	ldrh	r2, [r3, #0]
 80025d8:	4b43      	ldr	r3, [pc, #268]	@ (80026e8 <VerifyPagesFullWriteVariable+0x128>)
 80025da:	429a      	cmp	r2, r3
 80025dc:	d901      	bls.n	80025e2 <VerifyPagesFullWriteVariable+0x22>
  {
    return EE_PAGE_FULL;
 80025de:	2312      	movs	r3, #18
 80025e0:	e07b      	b.n	80026da <VerifyPagesFullWriteVariable+0x11a>
  }

  /* Get active Page for write operation */
  uint32_t activepage = FindPage(FIND_WRITE_PAGE);
 80025e2:	2001      	movs	r0, #1
 80025e4:	f7ff fc34 	bl	8001e50 <FindPage>
 80025e8:	0003      	movs	r3, r0
 80025ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t activepageaddress = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Check if there is no active page */
  if (activepage == EE_NO_PAGE_FOUND)
 80025f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025f2:	3301      	adds	r3, #1
 80025f4:	d101      	bne.n	80025fa <VerifyPagesFullWriteVariable+0x3a>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e06f      	b.n	80026da <VerifyPagesFullWriteVariable+0x11a>
  }

  activepageaddress = PAGE_ADDRESS(activepage);
 80025fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025fc:	2280      	movs	r2, #128	@ 0x80
 80025fe:	0252      	lsls	r2, r2, #9
 8002600:	4694      	mov	ip, r2
 8002602:	4463      	add	r3, ip
 8002604:	02de      	lsls	r6, r3, #11
 8002606:	4b39      	ldr	r3, [pc, #228]	@ (80026ec <VerifyPagesFullWriteVariable+0x12c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	029a      	lsls	r2, r3, #10
 800260c:	23ff      	movs	r3, #255	@ 0xff
 800260e:	029b      	lsls	r3, r3, #10
 8002610:	4013      	ands	r3, r2
 8002612:	0019      	movs	r1, r3
 8002614:	2380      	movs	r3, #128	@ 0x80
 8002616:	0218      	lsls	r0, r3, #8
 8002618:	f7fd fd80 	bl	800011c <__udivsi3>
 800261c:	0003      	movs	r3, r0
 800261e:	0019      	movs	r1, r3
 8002620:	4b32      	ldr	r3, [pc, #200]	@ (80026ec <VerifyPagesFullWriteVariable+0x12c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	029a      	lsls	r2, r3, #10
 8002626:	23ff      	movs	r3, #255	@ 0xff
 8002628:	029b      	lsls	r3, r3, #10
 800262a:	4013      	ands	r3, r2
 800262c:	434b      	muls	r3, r1
 800262e:	18f3      	adds	r3, r6, r3
 8002630:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Force crc to 0 in case of Data/VirtAddress are 0*/
#ifndef FLASH_LINES_128B
  if ((Data == 0U) && (VirtAddress == 0U))
 8002632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002634:	2b00      	cmp	r3, #0
 8002636:	d107      	bne.n	8002648 <VerifyPagesFullWriteVariable+0x88>
 8002638:	232e      	movs	r3, #46	@ 0x2e
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d102      	bne.n	8002648 <VerifyPagesFullWriteVariable+0x88>
#else
  if ((Data[0] == 0U) && (Data[1] == 0U) && (VirtAddress == 0U))

#endif
  {
    crc = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002646:	e009      	b.n	800265c <VerifyPagesFullWriteVariable+0x9c>
  }
  else
  {
#ifndef FLASH_LINES_128B 
    /* Calculate crc of variable data and virtual address */
    crc = CalculateCrc(Data, VirtAddress);
 8002648:	232e      	movs	r3, #46	@ 0x2e
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	881a      	ldrh	r2, [r3, #0]
 800264e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002650:	0011      	movs	r1, r2
 8002652:	0018      	movs	r0, r3
 8002654:	f000 f98a 	bl	800296c <CalculateCrc>
 8002658:	0003      	movs	r3, r0
 800265a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return EE_WRITE_ERROR;
  }
#else  
  /* Program variable data + virtual address + crc */
  /* If program operation was failed, a Flash error code is returned */
  if (FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, EE_ELEMENT_VALUE(VirtAddress,Data,crc)) != HAL_OK)
 800265c:	4b24      	ldr	r3, [pc, #144]	@ (80026f0 <VerifyPagesFullWriteVariable+0x130>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002662:	18d1      	adds	r1, r2, r3
 8002664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	001b      	movs	r3, r3
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
 8002676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002678:	041b      	lsls	r3, r3, #16
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	6a38      	ldr	r0, [r7, #32]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	0016      	movs	r6, r2
 8002688:	4330      	orrs	r0, r6
 800268a:	0004      	movs	r4, r0
 800268c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800268e:	4318      	orrs	r0, r3
 8002690:	0005      	movs	r5, r0
 8002692:	232e      	movs	r3, #46	@ 0x2e
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	0010      	movs	r0, r2
 80026a6:	4320      	orrs	r0, r4
 80026a8:	6038      	str	r0, [r7, #0]
 80026aa:	432b      	orrs	r3, r5
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	0008      	movs	r0, r1
 80026b4:	f000 f97e 	bl	80029b4 <FI_WriteDoubleWord>
 80026b8:	1e03      	subs	r3, r0, #0
 80026ba:	d001      	beq.n	80026c0 <VerifyPagesFullWriteVariable+0x100>
  {
    return EE_WRITE_ERROR;
 80026bc:	2302      	movs	r3, #2
 80026be:	e00c      	b.n	80026da <VerifyPagesFullWriteVariable+0x11a>
  }
#endif

  /* Increment global variables relative to write operation done*/
  uwAddressNextWrite += EE_ELEMENT_SIZE;
 80026c0:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <VerifyPagesFullWriteVariable+0x130>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3308      	adds	r3, #8
 80026c6:	001a      	movs	r2, r3
 80026c8:	4b09      	ldr	r3, [pc, #36]	@ (80026f0 <VerifyPagesFullWriteVariable+0x130>)
 80026ca:	601a      	str	r2, [r3, #0]
  uhNbWrittenElements++;
 80026cc:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <VerifyPagesFullWriteVariable+0x124>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	3301      	adds	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	4b03      	ldr	r3, [pc, #12]	@ (80026e4 <VerifyPagesFullWriteVariable+0x124>)
 80026d6:	801a      	strh	r2, [r3, #0]

  return EE_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	0018      	movs	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	b011      	add	sp, #68	@ 0x44
 80026e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026e2:	46c0      	nop			@ (mov r8, r8)
 80026e4:	200001c0 	.word	0x200001c0
 80026e8:	000004eb 	.word	0x000004eb
 80026ec:	1fff75e0 	.word	0x1fff75e0
 80026f0:	20000004 	.word	0x20000004

080026f4 <SetPageState>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
static EE_Status SetPageState(uint32_t Page, EE_State_type State)
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	000a      	movs	r2, r1
 80026fe:	1cfb      	adds	r3, r7, #3
 8002700:	701a      	strb	r2, [r3, #0]
  uint32_t header1 = 0U, header2 = 0U, header3 = 0U, header4 = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]

  header1 = PAGE_ADDRESS(Page);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2280      	movs	r2, #128	@ 0x80
 8002716:	0252      	lsls	r2, r2, #9
 8002718:	4694      	mov	ip, r2
 800271a:	4463      	add	r3, ip
 800271c:	02dc      	lsls	r4, r3, #11
 800271e:	4b5b      	ldr	r3, [pc, #364]	@ (800288c <SetPageState+0x198>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	029a      	lsls	r2, r3, #10
 8002724:	23ff      	movs	r3, #255	@ 0xff
 8002726:	029b      	lsls	r3, r3, #10
 8002728:	4013      	ands	r3, r2
 800272a:	0019      	movs	r1, r3
 800272c:	2380      	movs	r3, #128	@ 0x80
 800272e:	0218      	lsls	r0, r3, #8
 8002730:	f7fd fcf4 	bl	800011c <__udivsi3>
 8002734:	0003      	movs	r3, r0
 8002736:	0019      	movs	r1, r3
 8002738:	4b54      	ldr	r3, [pc, #336]	@ (800288c <SetPageState+0x198>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	029a      	lsls	r2, r3, #10
 800273e:	23ff      	movs	r3, #255	@ 0xff
 8002740:	029b      	lsls	r3, r3, #10
 8002742:	4013      	ands	r3, r2
 8002744:	434b      	muls	r3, r1
 8002746:	18e3      	adds	r3, r4, r3
 8002748:	617b      	str	r3, [r7, #20]
  header2 = PAGE_ADDRESS(Page) + EE_ELEMENT_SIZE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2280      	movs	r2, #128	@ 0x80
 800274e:	0252      	lsls	r2, r2, #9
 8002750:	4694      	mov	ip, r2
 8002752:	4463      	add	r3, ip
 8002754:	02dc      	lsls	r4, r3, #11
 8002756:	4b4d      	ldr	r3, [pc, #308]	@ (800288c <SetPageState+0x198>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	029a      	lsls	r2, r3, #10
 800275c:	23ff      	movs	r3, #255	@ 0xff
 800275e:	029b      	lsls	r3, r3, #10
 8002760:	4013      	ands	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	2380      	movs	r3, #128	@ 0x80
 8002766:	0218      	lsls	r0, r3, #8
 8002768:	f7fd fcd8 	bl	800011c <__udivsi3>
 800276c:	0003      	movs	r3, r0
 800276e:	0019      	movs	r1, r3
 8002770:	4b46      	ldr	r3, [pc, #280]	@ (800288c <SetPageState+0x198>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	029a      	lsls	r2, r3, #10
 8002776:	23ff      	movs	r3, #255	@ 0xff
 8002778:	029b      	lsls	r3, r3, #10
 800277a:	4013      	ands	r3, r2
 800277c:	434b      	muls	r3, r1
 800277e:	18e3      	adds	r3, r4, r3
 8002780:	3308      	adds	r3, #8
 8002782:	613b      	str	r3, [r7, #16]
  header3 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*2U);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2280      	movs	r2, #128	@ 0x80
 8002788:	0252      	lsls	r2, r2, #9
 800278a:	4694      	mov	ip, r2
 800278c:	4463      	add	r3, ip
 800278e:	02dc      	lsls	r4, r3, #11
 8002790:	4b3e      	ldr	r3, [pc, #248]	@ (800288c <SetPageState+0x198>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	029a      	lsls	r2, r3, #10
 8002796:	23ff      	movs	r3, #255	@ 0xff
 8002798:	029b      	lsls	r3, r3, #10
 800279a:	4013      	ands	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	2380      	movs	r3, #128	@ 0x80
 80027a0:	0218      	lsls	r0, r3, #8
 80027a2:	f7fd fcbb 	bl	800011c <__udivsi3>
 80027a6:	0003      	movs	r3, r0
 80027a8:	0019      	movs	r1, r3
 80027aa:	4b38      	ldr	r3, [pc, #224]	@ (800288c <SetPageState+0x198>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	029a      	lsls	r2, r3, #10
 80027b0:	23ff      	movs	r3, #255	@ 0xff
 80027b2:	029b      	lsls	r3, r3, #10
 80027b4:	4013      	ands	r3, r2
 80027b6:	434b      	muls	r3, r1
 80027b8:	18e3      	adds	r3, r4, r3
 80027ba:	3310      	adds	r3, #16
 80027bc:	60fb      	str	r3, [r7, #12]
  header4 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*3U);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2280      	movs	r2, #128	@ 0x80
 80027c2:	0252      	lsls	r2, r2, #9
 80027c4:	4694      	mov	ip, r2
 80027c6:	4463      	add	r3, ip
 80027c8:	02dc      	lsls	r4, r3, #11
 80027ca:	4b30      	ldr	r3, [pc, #192]	@ (800288c <SetPageState+0x198>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	029a      	lsls	r2, r3, #10
 80027d0:	23ff      	movs	r3, #255	@ 0xff
 80027d2:	029b      	lsls	r3, r3, #10
 80027d4:	4013      	ands	r3, r2
 80027d6:	0019      	movs	r1, r3
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	0218      	lsls	r0, r3, #8
 80027dc:	f7fd fc9e 	bl	800011c <__udivsi3>
 80027e0:	0003      	movs	r3, r0
 80027e2:	0019      	movs	r1, r3
 80027e4:	4b29      	ldr	r3, [pc, #164]	@ (800288c <SetPageState+0x198>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	029a      	lsls	r2, r3, #10
 80027ea:	23ff      	movs	r3, #255	@ 0xff
 80027ec:	029b      	lsls	r3, r3, #10
 80027ee:	4013      	ands	r3, r2
 80027f0:	434b      	muls	r3, r1
 80027f2:	18e3      	adds	r3, r4, r3
 80027f4:	3318      	adds	r3, #24
 80027f6:	60bb      	str	r3, [r7, #8]
    break;
  default:
    break;
  }
#else
  switch(State)
 80027f8:	1cfb      	adds	r3, r7, #3
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d030      	beq.n	8002862 <SetPageState+0x16e>
 8002800:	dc39      	bgt.n	8002876 <SetPageState+0x182>
 8002802:	2b03      	cmp	r3, #3
 8002804:	d023      	beq.n	800284e <SetPageState+0x15a>
 8002806:	dc36      	bgt.n	8002876 <SetPageState+0x182>
 8002808:	2b01      	cmp	r3, #1
 800280a:	d002      	beq.n	8002812 <SetPageState+0x11e>
 800280c:	2b02      	cmp	r3, #2
 800280e:	d00f      	beq.n	8002830 <SetPageState+0x13c>
        return EE_WRITE_ERROR;
      }
    }
    break;
  default:
    break;
 8002810:	e031      	b.n	8002876 <SetPageState+0x182>
      if (FI_WriteDoubleWord(header1, EE_PAGESTAT_RECEIVE) != HAL_OK)
 8002812:	4a1f      	ldr	r2, [pc, #124]	@ (8002890 <SetPageState+0x19c>)
 8002814:	4b1e      	ldr	r3, [pc, #120]	@ (8002890 <SetPageState+0x19c>)
 8002816:	6979      	ldr	r1, [r7, #20]
 8002818:	0008      	movs	r0, r1
 800281a:	f000 f8cb 	bl	80029b4 <FI_WriteDoubleWord>
 800281e:	1e03      	subs	r3, r0, #0
 8002820:	d001      	beq.n	8002826 <SetPageState+0x132>
        return EE_WRITE_ERROR;
 8002822:	2302      	movs	r3, #2
 8002824:	e02d      	b.n	8002882 <SetPageState+0x18e>
      ubCurrentActivePage = Page;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4b1a      	ldr	r3, [pc, #104]	@ (8002894 <SetPageState+0x1a0>)
 800282c:	701a      	strb	r2, [r3, #0]
    break;
 800282e:	e027      	b.n	8002880 <SetPageState+0x18c>
      if (FI_WriteDoubleWord(header2, EE_PAGESTAT_ACTIVE) != HAL_OK)
 8002830:	4a17      	ldr	r2, [pc, #92]	@ (8002890 <SetPageState+0x19c>)
 8002832:	4b17      	ldr	r3, [pc, #92]	@ (8002890 <SetPageState+0x19c>)
 8002834:	6939      	ldr	r1, [r7, #16]
 8002836:	0008      	movs	r0, r1
 8002838:	f000 f8bc 	bl	80029b4 <FI_WriteDoubleWord>
 800283c:	1e03      	subs	r3, r0, #0
 800283e:	d001      	beq.n	8002844 <SetPageState+0x150>
        return EE_WRITE_ERROR;
 8002840:	2302      	movs	r3, #2
 8002842:	e01e      	b.n	8002882 <SetPageState+0x18e>
      ubCurrentActivePage = Page;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	b2da      	uxtb	r2, r3
 8002848:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <SetPageState+0x1a0>)
 800284a:	701a      	strb	r2, [r3, #0]
    break;
 800284c:	e018      	b.n	8002880 <SetPageState+0x18c>
      if (FI_WriteDoubleWord(header3, EE_PAGESTAT_VALID) != HAL_OK)
 800284e:	4a10      	ldr	r2, [pc, #64]	@ (8002890 <SetPageState+0x19c>)
 8002850:	4b0f      	ldr	r3, [pc, #60]	@ (8002890 <SetPageState+0x19c>)
 8002852:	68f9      	ldr	r1, [r7, #12]
 8002854:	0008      	movs	r0, r1
 8002856:	f000 f8ad 	bl	80029b4 <FI_WriteDoubleWord>
 800285a:	1e03      	subs	r3, r0, #0
 800285c:	d00d      	beq.n	800287a <SetPageState+0x186>
        return EE_WRITE_ERROR;
 800285e:	2302      	movs	r3, #2
 8002860:	e00f      	b.n	8002882 <SetPageState+0x18e>
      if (FI_WriteDoubleWord(header4, EE_PAGESTAT_ERASING) != HAL_OK)
 8002862:	4a0b      	ldr	r2, [pc, #44]	@ (8002890 <SetPageState+0x19c>)
 8002864:	4b0a      	ldr	r3, [pc, #40]	@ (8002890 <SetPageState+0x19c>)
 8002866:	68b9      	ldr	r1, [r7, #8]
 8002868:	0008      	movs	r0, r1
 800286a:	f000 f8a3 	bl	80029b4 <FI_WriteDoubleWord>
 800286e:	1e03      	subs	r3, r0, #0
 8002870:	d005      	beq.n	800287e <SetPageState+0x18a>
        return EE_WRITE_ERROR;
 8002872:	2302      	movs	r3, #2
 8002874:	e005      	b.n	8002882 <SetPageState+0x18e>
    break;
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	e002      	b.n	8002880 <SetPageState+0x18c>
    break;
 800287a:	46c0      	nop			@ (mov r8, r8)
 800287c:	e000      	b.n	8002880 <SetPageState+0x18c>
    break;
 800287e:	46c0      	nop			@ (mov r8, r8)
  }
#endif

  /* Return last operation flash status */
  return EE_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	0018      	movs	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	b007      	add	sp, #28
 8002888:	bd90      	pop	{r4, r7, pc}
 800288a:	46c0      	nop			@ (mov r8, r8)
 800288c:	1fff75e0 	.word	0x1fff75e0
 8002890:	aaaaaaaa 	.word	0xaaaaaaaa
 8002894:	200001c2 	.word	0x200001c2

08002898 <GetPageState>:
  * @param  Address Address of the FLASH Memory page
  * @retval State State of the page
  */
#ifndef FLASH_LINES_128B
static EE_State_type GetPageState(uint32_t Address)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	@ 0x28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  EE_ELEMENT_TYPE status1 = 0U, status2 = 0U, status3 = 0U, status4 = 0U;
 80028a0:	2200      	movs	r2, #0
 80028a2:	2300      	movs	r3, #0
 80028a4:	623a      	str	r2, [r7, #32]
 80028a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028a8:	2200      	movs	r2, #0
 80028aa:	2300      	movs	r3, #0
 80028ac:	61ba      	str	r2, [r7, #24]
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	2200      	movs	r2, #0
 80028b2:	2300      	movs	r3, #0
 80028b4:	613a      	str	r2, [r7, #16]
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	2200      	movs	r2, #0
 80028ba:	2300      	movs	r3, #0
 80028bc:	60ba      	str	r2, [r7, #8]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Get page state information from page header (3 first elements) */
  status1 = (*(__IO EE_ELEMENT_TYPE*)Address);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	623a      	str	r2, [r7, #32]
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
  status2 = (*(__IO EE_ELEMENT_TYPE*)(Address + EE_ELEMENT_SIZE));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3308      	adds	r3, #8
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	61ba      	str	r2, [r7, #24]
 80028d4:	61fb      	str	r3, [r7, #28]
  status3 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*2U)));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3310      	adds	r3, #16
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	613a      	str	r2, [r7, #16]
 80028e0:	617b      	str	r3, [r7, #20]
  status4 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*3U)));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3318      	adds	r3, #24
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	60ba      	str	r2, [r7, #8]
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Return erasing status, if element4 is not EE_PAGESTAT_ERASED value */
  if (status4 != EE_PAGESTAT_ERASED)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	3301      	adds	r3, #1
 80028f2:	d102      	bne.n	80028fa <GetPageState+0x62>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3301      	adds	r3, #1
 80028f8:	d001      	beq.n	80028fe <GetPageState+0x66>
  {
    return STATE_PAGE_ERASING;
 80028fa:	2304      	movs	r3, #4
 80028fc:	e018      	b.n	8002930 <GetPageState+0x98>
  }

  /* Return valid status, if element3 is not EE_PAGESTAT_ERASED value */
  if (status3 != EE_PAGESTAT_ERASED)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	3301      	adds	r3, #1
 8002902:	d102      	bne.n	800290a <GetPageState+0x72>
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	3301      	adds	r3, #1
 8002908:	d001      	beq.n	800290e <GetPageState+0x76>
  {
    return STATE_PAGE_VALID;
 800290a:	2303      	movs	r3, #3
 800290c:	e010      	b.n	8002930 <GetPageState+0x98>
  }

  /* Return active status, if element2 is not EE_PAGESTAT_ERASED value */
  if (status2 != EE_PAGESTAT_ERASED)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	3301      	adds	r3, #1
 8002912:	d102      	bne.n	800291a <GetPageState+0x82>
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	3301      	adds	r3, #1
 8002918:	d001      	beq.n	800291e <GetPageState+0x86>
  {
    return STATE_PAGE_ACTIVE;
 800291a:	2302      	movs	r3, #2
 800291c:	e008      	b.n	8002930 <GetPageState+0x98>
  }

  /* Return receive status, if element1 is not EE_PAGESTAT_ERASED value */
  if (status1 != EE_PAGESTAT_ERASED)
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	3301      	adds	r3, #1
 8002922:	d102      	bne.n	800292a <GetPageState+0x92>
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	3301      	adds	r3, #1
 8002928:	d001      	beq.n	800292e <GetPageState+0x96>
  {
    return STATE_PAGE_RECEIVE;
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <GetPageState+0x98>
  }

  /* Return erased status, if 4 first elements are EE_PAGESTAT_ERASED value */
  return STATE_PAGE_ERASED;
 800292e:	2300      	movs	r3, #0
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b00a      	add	sp, #40	@ 0x28
 8002936:	bd80      	pop	{r7, pc}

08002938 <ConfigureCrc>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void ConfigureCrc(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* (1) Enable peripheral clock for CRC */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800293c:	2380      	movs	r3, #128	@ 0x80
 800293e:	015b      	lsls	r3, r3, #5
 8002940:	0018      	movs	r0, r3
 8002942:	f7fe f9db 	bl	8000cfc <LL_AHB1_GRP1_EnableClock>

  /* (2) Configure CRC functional parameters */

  /* Configure CRC calculation unit with user defined polynomial */
  LL_CRC_SetPolynomialCoef(CRC, CRC_POLYNOMIAL_VALUE);
 8002946:	4a07      	ldr	r2, [pc, #28]	@ (8002964 <ConfigureCrc+0x2c>)
 8002948:	4b07      	ldr	r3, [pc, #28]	@ (8002968 <ConfigureCrc+0x30>)
 800294a:	0011      	movs	r1, r2
 800294c:	0018      	movs	r0, r3
 800294e:	f7fe f9a0 	bl	8000c92 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, CRC_POLYNOMIAL_LENGTH);
 8002952:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <ConfigureCrc+0x30>)
 8002954:	2108      	movs	r1, #8
 8002956:	0018      	movs	r0, r3
 8002958:	f7fe f989 	bl	8000c6e <LL_CRC_SetPolynomialSize>
  /* LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE); */

  /* Set output data inversion mode : No inversion */
  /* Reset value is LL_CRC_OUTDATA_REVERSE_NONE */
  /* LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE); */
}
 800295c:	46c0      	nop			@ (mov r8, r8)
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	00008005 	.word	0x00008005
 8002968:	40023000 	.word	0x40023000

0800296c <CalculateCrc>:
#ifndef FLASH_LINES_128B
uint16_t CalculateCrc(EE_DATA_TYPE Data, uint16_t VirtAddress)
#else
uint16_t CalculateCrc(EE_DATA_TYPE Data1, EE_DATA_TYPE Data2)
#endif
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	000a      	movs	r2, r1
 8002976:	1cbb      	adds	r3, r7, #2
 8002978:	801a      	strh	r2, [r3, #0]
  /* Reset CRC calculation unit */
  LL_CRC_ResetCRCCalculationUnit(CRC);
 800297a:	4b0d      	ldr	r3, [pc, #52]	@ (80029b0 <CalculateCrc+0x44>)
 800297c:	0018      	movs	r0, r3
 800297e:	f7fe f968 	bl	8000c52 <LL_CRC_ResetCRCCalculationUnit>

  /* Feed Data and Virtual Address */
#ifndef FLASH_LINES_128B
  LL_CRC_FeedData32(CRC, Data);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a0a      	ldr	r2, [pc, #40]	@ (80029b0 <CalculateCrc+0x44>)
 8002986:	0019      	movs	r1, r3
 8002988:	0010      	movs	r0, r2
 800298a:	f7fe f98e 	bl	8000caa <LL_CRC_FeedData32>
  LL_CRC_FeedData16(CRC, VirtAddress);
 800298e:	1cbb      	adds	r3, r7, #2
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	4a07      	ldr	r2, [pc, #28]	@ (80029b0 <CalculateCrc+0x44>)
 8002994:	0019      	movs	r1, r3
 8002996:	0010      	movs	r0, r2
 8002998:	f7fe f993 	bl	8000cc2 <LL_CRC_FeedData16>
  LL_CRC_FeedData16(CRC, ((uint16_t)Data2));
   
#endif

  /* Return computed CRC value */
  return(LL_CRC_ReadData16(CRC));
 800299c:	4b04      	ldr	r3, [pc, #16]	@ (80029b0 <CalculateCrc+0x44>)
 800299e:	0018      	movs	r0, r3
 80029a0:	f7fe f9a0 	bl	8000ce4 <LL_CRC_ReadData16>
 80029a4:	0003      	movs	r3, r0
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b002      	add	sp, #8
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	40023000 	.word	0x40023000

080029b4 <FI_WriteDoubleWord>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE_WRITE_ERROR: if an error occurs
  */
HAL_StatusTypeDef FI_WriteDoubleWord(uint32_t Address, uint64_t Data)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	603a      	str	r2, [r7, #0]
 80029be:	607b      	str	r3, [r7, #4]
  return HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data); 
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68f9      	ldr	r1, [r7, #12]
 80029c6:	2001      	movs	r0, #1
 80029c8:	f000 fa8c 	bl	8002ee4 <HAL_FLASH_Program>
 80029cc:	0003      	movs	r3, r0
}
 80029ce:	0018      	movs	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b004      	add	sp, #16
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <FI_PageErase>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase(uint32_t Page, uint16_t NbPages)
{
 80029d6:	b590      	push	{r4, r7, lr}
 80029d8:	b089      	sub	sp, #36	@ 0x24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	000a      	movs	r2, r1
 80029e0:	1cbb      	adds	r3, r7, #2
 80029e2:	801a      	strh	r2, [r3, #0]
  EE_Status status = EE_OK;
 80029e4:	241e      	movs	r4, #30
 80029e6:	193b      	adds	r3, r7, r4
 80029e8:	2200      	movs	r2, #0
 80029ea:	801a      	strh	r2, [r3, #0]
  FLASH_EraseInitTypeDef s_eraseinit;
  uint32_t page_error = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60bb      	str	r3, [r7, #8]
#ifdef FLASH_BANK_2
  uint32_t bank = GetBankNumber(PAGE_ADDRESS(Page));
  s_eraseinit.Banks       = bank;
#endif  
  
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80029f0:	210c      	movs	r1, #12
 80029f2:	187b      	adds	r3, r7, r1
 80029f4:	2202      	movs	r2, #2
 80029f6:	601a      	str	r2, [r3, #0]
  s_eraseinit.NbPages     = NbPages;
 80029f8:	1cbb      	adds	r3, r7, #2
 80029fa:	881a      	ldrh	r2, [r3, #0]
 80029fc:	187b      	adds	r3, r7, r1
 80029fe:	60da      	str	r2, [r3, #12]
  s_eraseinit.Page        = Page;
 8002a00:	187b      	adds	r3, r7, r1
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	609a      	str	r2, [r3, #8]

  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase(&s_eraseinit, &page_error) != HAL_OK)
 8002a06:	2308      	movs	r3, #8
 8002a08:	18fa      	adds	r2, r7, r3
 8002a0a:	187b      	adds	r3, r7, r1
 8002a0c:	0011      	movs	r1, r2
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f000 fb48 	bl	80030a4 <HAL_FLASHEx_Erase>
 8002a14:	1e03      	subs	r3, r0, #0
 8002a16:	d002      	beq.n	8002a1e <FI_PageErase+0x48>
  {
    status = EE_ERASE_ERROR;
 8002a18:	193b      	adds	r3, r7, r4
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8002a1e:	231e      	movs	r3, #30
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	881b      	ldrh	r3, [r3, #0]
}
 8002a24:	0018      	movs	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b009      	add	sp, #36	@ 0x24
 8002a2a:	bd90      	pop	{r4, r7, pc}

08002a2c <FI_CacheFlush>:

/**
  * @brief  Flush the caches if needed to keep coherency when the flash content is modified
  */
void FI_CacheFlush()
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* No flush needed. There is no D-Cache for the STM32G0x0 and STM32G0x1 products. */
  return;
 8002a30:	46c0      	nop			@ (mov r8, r8)
}
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <FI_CheckBankConfig>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_CheckBankConfig(void)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	af00      	add	r7, sp, #0
  }

  return status;
#else
  /* No feature 128-bits single bank, so always 64-bits dual bank */
  return EE_OK;
 8002a3a:	2300      	movs	r3, #0
#endif
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a4a:	1dfb      	adds	r3, r7, #7
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a50:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <HAL_Init+0x3c>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b0a      	ldr	r3, [pc, #40]	@ (8002a80 <HAL_Init+0x3c>)
 8002a56:	2180      	movs	r1, #128	@ 0x80
 8002a58:	0049      	lsls	r1, r1, #1
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f000 f810 	bl	8002a84 <HAL_InitTick>
 8002a64:	1e03      	subs	r3, r0, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002a68:	1dfb      	adds	r3, r7, #7
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	701a      	strb	r2, [r3, #0]
 8002a6e:	e001      	b.n	8002a74 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002a70:	f7fd ffc8 	bl	8000a04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a74:	1dfb      	adds	r3, r7, #7
 8002a76:	781b      	ldrb	r3, [r3, #0]
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b002      	add	sp, #8
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40022000 	.word	0x40022000

08002a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a8c:	230f      	movs	r3, #15
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002a94:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <HAL_InitTick+0x88>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d02b      	beq.n	8002af4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002b10 <HAL_InitTick+0x8c>)
 8002a9e:	681c      	ldr	r4, [r3, #0]
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <HAL_InitTick+0x88>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	0019      	movs	r1, r3
 8002aa6:	23fa      	movs	r3, #250	@ 0xfa
 8002aa8:	0098      	lsls	r0, r3, #2
 8002aaa:	f7fd fb37 	bl	800011c <__udivsi3>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	0020      	movs	r0, r4
 8002ab4:	f7fd fb32 	bl	800011c <__udivsi3>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	0018      	movs	r0, r3
 8002abc:	f000 f929 	bl	8002d12 <HAL_SYSTICK_Config>
 8002ac0:	1e03      	subs	r3, r0, #0
 8002ac2:	d112      	bne.n	8002aea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d80a      	bhi.n	8002ae0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	2301      	movs	r3, #1
 8002ace:	425b      	negs	r3, r3
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f000 f908 	bl	8002ce8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b14 <HAL_InitTick+0x90>)
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	e00d      	b.n	8002afc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002ae0:	230f      	movs	r3, #15
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e008      	b.n	8002afc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002aea:	230f      	movs	r3, #15
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e003      	b.n	8002afc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002af4:	230f      	movs	r3, #15
 8002af6:	18fb      	adds	r3, r7, r3
 8002af8:	2201      	movs	r2, #1
 8002afa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002afc:	230f      	movs	r3, #15
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	781b      	ldrb	r3, [r3, #0]
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b005      	add	sp, #20
 8002b08:	bd90      	pop	{r4, r7, pc}
 8002b0a:	46c0      	nop			@ (mov r8, r8)
 8002b0c:	2000000c 	.word	0x2000000c
 8002b10:	20000000 	.word	0x20000000
 8002b14:	20000008 	.word	0x20000008

08002b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b1c:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <HAL_IncTick+0x1c>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	001a      	movs	r2, r3
 8002b22:	4b05      	ldr	r3, [pc, #20]	@ (8002b38 <HAL_IncTick+0x20>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	18d2      	adds	r2, r2, r3
 8002b28:	4b03      	ldr	r3, [pc, #12]	@ (8002b38 <HAL_IncTick+0x20>)
 8002b2a:	601a      	str	r2, [r3, #0]
}
 8002b2c:	46c0      	nop			@ (mov r8, r8)
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	2000000c 	.word	0x2000000c
 8002b38:	200001cc 	.word	0x200001cc

08002b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b40:	4b02      	ldr	r3, [pc, #8]	@ (8002b4c <HAL_GetTick+0x10>)
 8002b42:	681b      	ldr	r3, [r3, #0]
}
 8002b44:	0018      	movs	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			@ (mov r8, r8)
 8002b4c:	200001cc 	.word	0x200001cc

08002b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b58:	f7ff fff0 	bl	8002b3c <HAL_GetTick>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	3301      	adds	r3, #1
 8002b68:	d005      	beq.n	8002b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b94 <HAL_Delay+0x44>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	001a      	movs	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	189b      	adds	r3, r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b76:	46c0      	nop			@ (mov r8, r8)
 8002b78:	f7ff ffe0 	bl	8002b3c <HAL_GetTick>
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d8f7      	bhi.n	8002b78 <HAL_Delay+0x28>
  {
  }
}
 8002b88:	46c0      	nop			@ (mov r8, r8)
 8002b8a:	46c0      	nop			@ (mov r8, r8)
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b004      	add	sp, #16
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			@ (mov r8, r8)
 8002b94:	2000000c 	.word	0x2000000c

08002b98 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a06      	ldr	r2, [pc, #24]	@ (8002bc0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	0019      	movs	r1, r3
 8002baa:	4b04      	ldr	r3, [pc, #16]	@ (8002bbc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]
}
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b002      	add	sp, #8
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			@ (mov r8, r8)
 8002bbc:	40010000 	.word	0x40010000
 8002bc0:	fffff9ff 	.word	0xfffff9ff

08002bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	0002      	movs	r2, r0
 8002bcc:	6039      	str	r1, [r7, #0]
 8002bce:	1dfb      	adds	r3, r7, #7
 8002bd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bd2:	1dfb      	adds	r3, r7, #7
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bd8:	d828      	bhi.n	8002c2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bda:	4a2f      	ldr	r2, [pc, #188]	@ (8002c98 <__NVIC_SetPriority+0xd4>)
 8002bdc:	1dfb      	adds	r3, r7, #7
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	b25b      	sxtb	r3, r3
 8002be2:	089b      	lsrs	r3, r3, #2
 8002be4:	33c0      	adds	r3, #192	@ 0xc0
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	589b      	ldr	r3, [r3, r2]
 8002bea:	1dfa      	adds	r2, r7, #7
 8002bec:	7812      	ldrb	r2, [r2, #0]
 8002bee:	0011      	movs	r1, r2
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	400a      	ands	r2, r1
 8002bf4:	00d2      	lsls	r2, r2, #3
 8002bf6:	21ff      	movs	r1, #255	@ 0xff
 8002bf8:	4091      	lsls	r1, r2
 8002bfa:	000a      	movs	r2, r1
 8002bfc:	43d2      	mvns	r2, r2
 8002bfe:	401a      	ands	r2, r3
 8002c00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	019b      	lsls	r3, r3, #6
 8002c06:	22ff      	movs	r2, #255	@ 0xff
 8002c08:	401a      	ands	r2, r3
 8002c0a:	1dfb      	adds	r3, r7, #7
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	0018      	movs	r0, r3
 8002c10:	2303      	movs	r3, #3
 8002c12:	4003      	ands	r3, r0
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c18:	481f      	ldr	r0, [pc, #124]	@ (8002c98 <__NVIC_SetPriority+0xd4>)
 8002c1a:	1dfb      	adds	r3, r7, #7
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	b25b      	sxtb	r3, r3
 8002c20:	089b      	lsrs	r3, r3, #2
 8002c22:	430a      	orrs	r2, r1
 8002c24:	33c0      	adds	r3, #192	@ 0xc0
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c2a:	e031      	b.n	8002c90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8002c9c <__NVIC_SetPriority+0xd8>)
 8002c2e:	1dfb      	adds	r3, r7, #7
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	0019      	movs	r1, r3
 8002c34:	230f      	movs	r3, #15
 8002c36:	400b      	ands	r3, r1
 8002c38:	3b08      	subs	r3, #8
 8002c3a:	089b      	lsrs	r3, r3, #2
 8002c3c:	3306      	adds	r3, #6
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	18d3      	adds	r3, r2, r3
 8002c42:	3304      	adds	r3, #4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	1dfa      	adds	r2, r7, #7
 8002c48:	7812      	ldrb	r2, [r2, #0]
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	400a      	ands	r2, r1
 8002c50:	00d2      	lsls	r2, r2, #3
 8002c52:	21ff      	movs	r1, #255	@ 0xff
 8002c54:	4091      	lsls	r1, r2
 8002c56:	000a      	movs	r2, r1
 8002c58:	43d2      	mvns	r2, r2
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	019b      	lsls	r3, r3, #6
 8002c62:	22ff      	movs	r2, #255	@ 0xff
 8002c64:	401a      	ands	r2, r3
 8002c66:	1dfb      	adds	r3, r7, #7
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	4003      	ands	r3, r0
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c74:	4809      	ldr	r0, [pc, #36]	@ (8002c9c <__NVIC_SetPriority+0xd8>)
 8002c76:	1dfb      	adds	r3, r7, #7
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	001c      	movs	r4, r3
 8002c7c:	230f      	movs	r3, #15
 8002c7e:	4023      	ands	r3, r4
 8002c80:	3b08      	subs	r3, #8
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	430a      	orrs	r2, r1
 8002c86:	3306      	adds	r3, #6
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	18c3      	adds	r3, r0, r3
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	601a      	str	r2, [r3, #0]
}
 8002c90:	46c0      	nop			@ (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b003      	add	sp, #12
 8002c96:	bd90      	pop	{r4, r7, pc}
 8002c98:	e000e100 	.word	0xe000e100
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	1e5a      	subs	r2, r3, #1
 8002cac:	2380      	movs	r3, #128	@ 0x80
 8002cae:	045b      	lsls	r3, r3, #17
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d301      	bcc.n	8002cb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e010      	b.n	8002cda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce4 <SysTick_Config+0x44>)
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	3a01      	subs	r2, #1
 8002cbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	425b      	negs	r3, r3
 8002cc4:	2103      	movs	r1, #3
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7ff ff7c 	bl	8002bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ccc:	4b05      	ldr	r3, [pc, #20]	@ (8002ce4 <SysTick_Config+0x44>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cd2:	4b04      	ldr	r3, [pc, #16]	@ (8002ce4 <SysTick_Config+0x44>)
 8002cd4:	2207      	movs	r2, #7
 8002cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	0018      	movs	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b002      	add	sp, #8
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			@ (mov r8, r8)
 8002ce4:	e000e010 	.word	0xe000e010

08002ce8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	210f      	movs	r1, #15
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	1c02      	adds	r2, r0, #0
 8002cf8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	187b      	adds	r3, r7, r1
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	b25b      	sxtb	r3, r3
 8002d02:	0011      	movs	r1, r2
 8002d04:	0018      	movs	r0, r3
 8002d06:	f7ff ff5d 	bl	8002bc4 <__NVIC_SetPriority>
}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b004      	add	sp, #16
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f7ff ffbf 	bl	8002ca0 <SysTick_Config>
 8002d22:	0003      	movs	r3, r0
}
 8002d24:	0018      	movs	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b002      	add	sp, #8
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e056      	b.n	8002dec <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	7f5b      	ldrb	r3, [r3, #29]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d106      	bne.n	8002d56 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	0018      	movs	r0, r3
 8002d52:	f7fd fe7f 	bl	8000a54 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	791b      	ldrb	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10c      	bne.n	8002d7e <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a22      	ldr	r2, [pc, #136]	@ (8002df4 <HAL_CRC_Init+0xc8>)
 8002d6a:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2118      	movs	r1, #24
 8002d78:	438a      	bics	r2, r1
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	e00b      	b.n	8002d96 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6899      	ldr	r1, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 f835 	bl	8002df8 <HAL_CRCEx_Polynomial_Set>
 8002d8e:	1e03      	subs	r3, r0, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e02a      	b.n	8002dec <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	795b      	ldrb	r3, [r3, #5]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d105      	bne.n	8002daa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2201      	movs	r2, #1
 8002da4:	4252      	negs	r2, r2
 8002da6:	611a      	str	r2, [r3, #16]
 8002da8:	e004      	b.n	8002db4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6912      	ldr	r2, [r2, #16]
 8002db2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2260      	movs	r2, #96	@ 0x60
 8002dbc:	4393      	bics	r3, r2
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2280      	movs	r2, #128	@ 0x80
 8002dd4:	4393      	bics	r3, r2
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	0018      	movs	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b002      	add	sp, #8
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	04c11db7 	.word	0x04c11db7

08002df8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e04:	2117      	movs	r1, #23
 8002e06:	187b      	adds	r3, r7, r1
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002e0c:	231f      	movs	r3, #31
 8002e0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2201      	movs	r2, #1
 8002e14:	4013      	ands	r3, r2
 8002e16:	d103      	bne.n	8002e20 <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 8002e18:	187b      	adds	r3, r7, r1
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	e045      	b.n	8002eac <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002e20:	46c0      	nop			@ (mov r8, r8)
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1e5a      	subs	r2, r3, #1
 8002e26:	613a      	str	r2, [r7, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_CRCEx_Polynomial_Set+0x46>
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	221f      	movs	r2, #31
 8002e30:	4013      	ands	r3, r2
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	40da      	lsrs	r2, r3
 8002e36:	0013      	movs	r3, r2
 8002e38:	2201      	movs	r2, #1
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d0f1      	beq.n	8002e22 <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b18      	cmp	r3, #24
 8002e42:	d00f      	beq.n	8002e64 <HAL_CRCEx_Polynomial_Set+0x6c>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b18      	cmp	r3, #24
 8002e48:	d824      	bhi.n	8002e94 <HAL_CRCEx_Polynomial_Set+0x9c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b10      	cmp	r3, #16
 8002e4e:	d011      	beq.n	8002e74 <HAL_CRCEx_Polynomial_Set+0x7c>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b10      	cmp	r3, #16
 8002e54:	d81e      	bhi.n	8002e94 <HAL_CRCEx_Polynomial_Set+0x9c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d020      	beq.n	8002e9e <HAL_CRCEx_Polynomial_Set+0xa6>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d010      	beq.n	8002e84 <HAL_CRCEx_Polynomial_Set+0x8c>
 8002e62:	e017      	b.n	8002e94 <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	2b06      	cmp	r3, #6
 8002e68:	d91b      	bls.n	8002ea2 <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 8002e6a:	2317      	movs	r3, #23
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002e72:	e016      	b.n	8002ea2 <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	2b07      	cmp	r3, #7
 8002e78:	d915      	bls.n	8002ea6 <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 8002e7a:	2317      	movs	r3, #23
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002e82:	e010      	b.n	8002ea6 <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	2b0f      	cmp	r3, #15
 8002e88:	d90f      	bls.n	8002eaa <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 8002e8a:	2317      	movs	r3, #23
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002e92:	e00a      	b.n	8002eaa <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002e94:	2317      	movs	r3, #23
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	2201      	movs	r2, #1
 8002e9a:	701a      	strb	r2, [r3, #0]
        break;
 8002e9c:	e006      	b.n	8002eac <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	e004      	b.n	8002eac <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8002ea2:	46c0      	nop			@ (mov r8, r8)
 8002ea4:	e002      	b.n	8002eac <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8002ea6:	46c0      	nop			@ (mov r8, r8)
 8002ea8:	e000      	b.n	8002eac <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8002eaa:	46c0      	nop			@ (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 8002eac:	2317      	movs	r3, #23
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10e      	bne.n	8002ed4 <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2218      	movs	r2, #24
 8002ec6:	4393      	bics	r3, r2
 8002ec8:	0019      	movs	r1, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002ed4:	2317      	movs	r3, #23
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	781b      	ldrb	r3, [r3, #0]
}
 8002eda:	0018      	movs	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b006      	add	sp, #24
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002ee4:	b5b0      	push	{r4, r5, r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	603a      	str	r2, [r7, #0]
 8002ef0:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002ef2:	4b21      	ldr	r3, [pc, #132]	@ (8002f78 <HAL_FLASH_Program+0x94>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_FLASH_Program+0x1a>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e038      	b.n	8002f70 <HAL_FLASH_Program+0x8c>
 8002efe:	4b1e      	ldr	r3, [pc, #120]	@ (8002f78 <HAL_FLASH_Program+0x94>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f04:	4b1c      	ldr	r3, [pc, #112]	@ (8002f78 <HAL_FLASH_Program+0x94>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002f0a:	2517      	movs	r5, #23
 8002f0c:	197c      	adds	r4, r7, r5
 8002f0e:	23fa      	movs	r3, #250	@ 0xfa
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	0018      	movs	r0, r3
 8002f14:	f000 f858 	bl	8002fc8 <FLASH_WaitForLastOperation>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002f1c:	197b      	adds	r3, r7, r5
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d11f      	bne.n	8002f64 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d106      	bne.n	8002f38 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	0008      	movs	r0, r1
 8002f32:	f000 f897 	bl	8003064 <FLASH_Program_DoubleWord>
 8002f36:	e005      	b.n	8002f44 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	0011      	movs	r1, r2
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f002 fd6a 	bl	8005a18 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002f44:	2317      	movs	r3, #23
 8002f46:	18fc      	adds	r4, r7, r3
 8002f48:	23fa      	movs	r3, #250	@ 0xfa
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f000 f83b 	bl	8002fc8 <FLASH_WaitForLastOperation>
 8002f52:	0003      	movs	r3, r0
 8002f54:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8002f56:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <HAL_FLASH_Program+0x98>)
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	43d9      	mvns	r1, r3
 8002f5e:	4b07      	ldr	r3, [pc, #28]	@ (8002f7c <HAL_FLASH_Program+0x98>)
 8002f60:	400a      	ands	r2, r1
 8002f62:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002f64:	4b04      	ldr	r3, [pc, #16]	@ (8002f78 <HAL_FLASH_Program+0x94>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8002f6a:	2317      	movs	r3, #23
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	781b      	ldrb	r3, [r3, #0]
}
 8002f70:	0018      	movs	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b006      	add	sp, #24
 8002f76:	bdb0      	pop	{r4, r5, r7, pc}
 8002f78:	200001d0 	.word	0x200001d0
 8002f7c:	40022000 	.word	0x40022000

08002f80 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002f86:	1dfb      	adds	r3, r7, #7
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fbc <HAL_FLASH_Unlock+0x3c>)
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	da0c      	bge.n	8002fae <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002f94:	4b09      	ldr	r3, [pc, #36]	@ (8002fbc <HAL_FLASH_Unlock+0x3c>)
 8002f96:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc0 <HAL_FLASH_Unlock+0x40>)
 8002f98:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002f9a:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <HAL_FLASH_Unlock+0x3c>)
 8002f9c:	4a09      	ldr	r2, [pc, #36]	@ (8002fc4 <HAL_FLASH_Unlock+0x44>)
 8002f9e:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8002fa0:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <HAL_FLASH_Unlock+0x3c>)
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	da02      	bge.n	8002fae <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8002fa8:	1dfb      	adds	r3, r7, #7
 8002faa:	2201      	movs	r2, #1
 8002fac:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002fae:	1dfb      	adds	r3, r7, #7
 8002fb0:	781b      	ldrb	r3, [r3, #0]
}
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b002      	add	sp, #8
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	40022000 	.word	0x40022000
 8002fc0:	45670123 	.word	0x45670123
 8002fc4:	cdef89ab 	.word	0xcdef89ab

08002fc8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8002fd0:	f7ff fdb4 	bl	8002b3c <HAL_GetTick>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8002fd8:	2380      	movs	r3, #128	@ 0x80
 8002fda:	025b      	lsls	r3, r3, #9
 8002fdc:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8002fde:	e00c      	b.n	8002ffa <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	d009      	beq.n	8002ffa <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8002fe6:	f7ff fda9 	bl	8002b3c <HAL_GetTick>
 8002fea:	0002      	movs	r2, r0
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d801      	bhi.n	8002ffa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e028      	b.n	800304c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 8002ffa:	4b16      	ldr	r3, [pc, #88]	@ (8003054 <FLASH_WaitForLastOperation+0x8c>)
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	4013      	ands	r3, r2
 8003002:	d1ed      	bne.n	8002fe0 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8003004:	4b13      	ldr	r3, [pc, #76]	@ (8003054 <FLASH_WaitForLastOperation+0x8c>)
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	4a13      	ldr	r2, [pc, #76]	@ (8003058 <FLASH_WaitForLastOperation+0x90>)
 800300a:	4013      	ands	r3, r2
 800300c:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800300e:	4b11      	ldr	r3, [pc, #68]	@ (8003054 <FLASH_WaitForLastOperation+0x8c>)
 8003010:	4a12      	ldr	r2, [pc, #72]	@ (800305c <FLASH_WaitForLastOperation+0x94>)
 8003012:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d011      	beq.n	800303e <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800301a:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <FLASH_WaitForLastOperation+0x98>)
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e013      	b.n	800304c <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3301      	adds	r3, #1
 8003028:	d009      	beq.n	800303e <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800302a:	f7ff fd87 	bl	8002b3c <HAL_GetTick>
 800302e:	0002      	movs	r2, r0
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	429a      	cmp	r2, r3
 8003038:	d801      	bhi.n	800303e <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e006      	b.n	800304c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800303e:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <FLASH_WaitForLastOperation+0x8c>)
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	2380      	movs	r3, #128	@ 0x80
 8003044:	02db      	lsls	r3, r3, #11
 8003046:	4013      	ands	r3, r2
 8003048:	d1ec      	bne.n	8003024 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b004      	add	sp, #16
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40022000 	.word	0x40022000
 8003058:	0000c3fa 	.word	0x0000c3fa
 800305c:	0000c3fb 	.word	0x0000c3fb
 8003060:	200001d0 	.word	0x200001d0

08003064 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003064:	b5b0      	push	{r4, r5, r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	603a      	str	r2, [r7, #0]
 800306e:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003070:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <FLASH_Program_DoubleWord+0x3c>)
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	4b0a      	ldr	r3, [pc, #40]	@ (80030a0 <FLASH_Program_DoubleWord+0x3c>)
 8003076:	2101      	movs	r1, #1
 8003078:	430a      	orrs	r2, r1
 800307a:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003082:	f3bf 8f6f 	isb	sy
}
 8003086:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	001c      	movs	r4, r3
 800308c:	2300      	movs	r3, #0
 800308e:	001d      	movs	r5, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	3304      	adds	r3, #4
 8003094:	0022      	movs	r2, r4
 8003096:	601a      	str	r2, [r3, #0]
}
 8003098:	46c0      	nop			@ (mov r8, r8)
 800309a:	46bd      	mov	sp, r7
 800309c:	b004      	add	sp, #16
 800309e:	bdb0      	pop	{r4, r5, r7, pc}
 80030a0:	40022000 	.word	0x40022000

080030a4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80030a4:	b5b0      	push	{r4, r5, r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80030ae:	4b35      	ldr	r3, [pc, #212]	@ (8003184 <HAL_FLASHEx_Erase+0xe0>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_FLASHEx_Erase+0x16>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e05f      	b.n	800317a <HAL_FLASHEx_Erase+0xd6>
 80030ba:	4b32      	ldr	r3, [pc, #200]	@ (8003184 <HAL_FLASHEx_Erase+0xe0>)
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030c0:	4b30      	ldr	r3, [pc, #192]	@ (8003184 <HAL_FLASHEx_Erase+0xe0>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030c6:	250f      	movs	r5, #15
 80030c8:	197c      	adds	r4, r7, r5
 80030ca:	23fa      	movs	r3, #250	@ 0xfa
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	0018      	movs	r0, r3
 80030d0:	f7ff ff7a 	bl	8002fc8 <FLASH_WaitForLastOperation>
 80030d4:	0003      	movs	r3, r0
 80030d6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80030d8:	002c      	movs	r4, r5
 80030da:	193b      	adds	r3, r7, r4
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d145      	bne.n	800316e <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2204      	movs	r2, #4
 80030e6:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d10d      	bne.n	800310c <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	0018      	movs	r0, r3
 80030f6:	f000 f849 	bl	800318c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030fa:	193c      	adds	r4, r7, r4
 80030fc:	23fa      	movs	r3, #250	@ 0xfa
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	0018      	movs	r0, r3
 8003102:	f7ff ff61 	bl	8002fc8 <FLASH_WaitForLastOperation>
 8003106:	0003      	movs	r3, r0
 8003108:	7023      	strb	r3, [r4, #0]
 800310a:	e030      	b.n	800316e <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	2201      	movs	r2, #1
 8003110:	4252      	negs	r2, r2
 8003112:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	e01a      	b.n	8003152 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	0011      	movs	r1, r2
 8003124:	0018      	movs	r0, r3
 8003126:	f000 f845 	bl	80031b4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800312a:	250f      	movs	r5, #15
 800312c:	197c      	adds	r4, r7, r5
 800312e:	23fa      	movs	r3, #250	@ 0xfa
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	0018      	movs	r0, r3
 8003134:	f7ff ff48 	bl	8002fc8 <FLASH_WaitForLastOperation>
 8003138:	0003      	movs	r3, r0
 800313a:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800313c:	197b      	adds	r3, r7, r5
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	601a      	str	r2, [r3, #0]
          break;
 800314a:	e00a      	b.n	8003162 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	3301      	adds	r3, #1
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	18d3      	adds	r3, r2, r3
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	429a      	cmp	r2, r3
 8003160:	d3dc      	bcc.n	800311c <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003162:	4b09      	ldr	r3, [pc, #36]	@ (8003188 <HAL_FLASHEx_Erase+0xe4>)
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	4b08      	ldr	r3, [pc, #32]	@ (8003188 <HAL_FLASHEx_Erase+0xe4>)
 8003168:	2102      	movs	r1, #2
 800316a:	438a      	bics	r2, r1
 800316c:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800316e:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <HAL_FLASHEx_Erase+0xe0>)
 8003170:	2200      	movs	r2, #0
 8003172:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8003174:	230f      	movs	r3, #15
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	781b      	ldrb	r3, [r3, #0]
}
 800317a:	0018      	movs	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	b004      	add	sp, #16
 8003180:	bdb0      	pop	{r4, r5, r7, pc}
 8003182:	46c0      	nop			@ (mov r8, r8)
 8003184:	200001d0 	.word	0x200001d0
 8003188:	40022000 	.word	0x40022000

0800318c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8003194:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <FLASH_MassErase+0x24>)
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	431a      	orrs	r2, r3
 800319c:	4b04      	ldr	r3, [pc, #16]	@ (80031b0 <FLASH_MassErase+0x24>)
 800319e:	2180      	movs	r1, #128	@ 0x80
 80031a0:	0249      	lsls	r1, r1, #9
 80031a2:	430a      	orrs	r2, r1
 80031a4:	615a      	str	r2, [r3, #20]
}
 80031a6:	46c0      	nop			@ (mov r8, r8)
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b002      	add	sp, #8
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	46c0      	nop			@ (mov r8, r8)
 80031b0:	40022000 	.word	0x40022000

080031b4 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80031be:	4b08      	ldr	r3, [pc, #32]	@ (80031e0 <FLASH_PageErase+0x2c>)
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	4a08      	ldr	r2, [pc, #32]	@ (80031e4 <FLASH_PageErase+0x30>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	00da      	lsls	r2, r3, #3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	4b03      	ldr	r3, [pc, #12]	@ (80031e0 <FLASH_PageErase+0x2c>)
 80031d2:	4905      	ldr	r1, [pc, #20]	@ (80031e8 <FLASH_PageErase+0x34>)
 80031d4:	430a      	orrs	r2, r1
 80031d6:	615a      	str	r2, [r3, #20]
}
 80031d8:	46c0      	nop			@ (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	b004      	add	sp, #16
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40022000 	.word	0x40022000
 80031e4:	ffffe007 	.word	0xffffe007
 80031e8:	00010002 	.word	0x00010002

080031ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031fa:	e147      	b.n	800348c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2101      	movs	r1, #1
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4091      	lsls	r1, r2
 8003206:	000a      	movs	r2, r1
 8003208:	4013      	ands	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d100      	bne.n	8003214 <HAL_GPIO_Init+0x28>
 8003212:	e138      	b.n	8003486 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2203      	movs	r2, #3
 800321a:	4013      	ands	r3, r2
 800321c:	2b01      	cmp	r3, #1
 800321e:	d005      	beq.n	800322c <HAL_GPIO_Init+0x40>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2203      	movs	r2, #3
 8003226:	4013      	ands	r3, r2
 8003228:	2b02      	cmp	r3, #2
 800322a:	d130      	bne.n	800328e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2203      	movs	r2, #3
 8003238:	409a      	lsls	r2, r3
 800323a:	0013      	movs	r3, r2
 800323c:	43da      	mvns	r2, r3
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4013      	ands	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	409a      	lsls	r2, r3
 800324e:	0013      	movs	r3, r2
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003262:	2201      	movs	r2, #1
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	409a      	lsls	r2, r3
 8003268:	0013      	movs	r3, r2
 800326a:	43da      	mvns	r2, r3
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4013      	ands	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	091b      	lsrs	r3, r3, #4
 8003278:	2201      	movs	r2, #1
 800327a:	401a      	ands	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	409a      	lsls	r2, r3
 8003280:	0013      	movs	r3, r2
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2203      	movs	r2, #3
 8003294:	4013      	ands	r3, r2
 8003296:	2b03      	cmp	r3, #3
 8003298:	d017      	beq.n	80032ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	2203      	movs	r2, #3
 80032a6:	409a      	lsls	r2, r3
 80032a8:	0013      	movs	r3, r2
 80032aa:	43da      	mvns	r2, r3
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4013      	ands	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	409a      	lsls	r2, r3
 80032bc:	0013      	movs	r3, r2
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2203      	movs	r2, #3
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d123      	bne.n	800331e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	08da      	lsrs	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3208      	adds	r2, #8
 80032de:	0092      	lsls	r2, r2, #2
 80032e0:	58d3      	ldr	r3, [r2, r3]
 80032e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2207      	movs	r2, #7
 80032e8:	4013      	ands	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	220f      	movs	r2, #15
 80032ee:	409a      	lsls	r2, r3
 80032f0:	0013      	movs	r3, r2
 80032f2:	43da      	mvns	r2, r3
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4013      	ands	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2107      	movs	r1, #7
 8003302:	400b      	ands	r3, r1
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	409a      	lsls	r2, r3
 8003308:	0013      	movs	r3, r2
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	08da      	lsrs	r2, r3, #3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3208      	adds	r2, #8
 8003318:	0092      	lsls	r2, r2, #2
 800331a:	6939      	ldr	r1, [r7, #16]
 800331c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	2203      	movs	r2, #3
 800332a:	409a      	lsls	r2, r3
 800332c:	0013      	movs	r3, r2
 800332e:	43da      	mvns	r2, r3
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4013      	ands	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2203      	movs	r2, #3
 800333c:	401a      	ands	r2, r3
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	409a      	lsls	r2, r3
 8003344:	0013      	movs	r3, r2
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	23c0      	movs	r3, #192	@ 0xc0
 8003358:	029b      	lsls	r3, r3, #10
 800335a:	4013      	ands	r3, r2
 800335c:	d100      	bne.n	8003360 <HAL_GPIO_Init+0x174>
 800335e:	e092      	b.n	8003486 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003360:	4a50      	ldr	r2, [pc, #320]	@ (80034a4 <HAL_GPIO_Init+0x2b8>)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	089b      	lsrs	r3, r3, #2
 8003366:	3318      	adds	r3, #24
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	589b      	ldr	r3, [r3, r2]
 800336c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2203      	movs	r2, #3
 8003372:	4013      	ands	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	220f      	movs	r2, #15
 8003378:	409a      	lsls	r2, r3
 800337a:	0013      	movs	r3, r2
 800337c:	43da      	mvns	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	23a0      	movs	r3, #160	@ 0xa0
 8003388:	05db      	lsls	r3, r3, #23
 800338a:	429a      	cmp	r2, r3
 800338c:	d013      	beq.n	80033b6 <HAL_GPIO_Init+0x1ca>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a45      	ldr	r2, [pc, #276]	@ (80034a8 <HAL_GPIO_Init+0x2bc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00d      	beq.n	80033b2 <HAL_GPIO_Init+0x1c6>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a44      	ldr	r2, [pc, #272]	@ (80034ac <HAL_GPIO_Init+0x2c0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d007      	beq.n	80033ae <HAL_GPIO_Init+0x1c2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a43      	ldr	r2, [pc, #268]	@ (80034b0 <HAL_GPIO_Init+0x2c4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d101      	bne.n	80033aa <HAL_GPIO_Init+0x1be>
 80033a6:	2303      	movs	r3, #3
 80033a8:	e006      	b.n	80033b8 <HAL_GPIO_Init+0x1cc>
 80033aa:	2305      	movs	r3, #5
 80033ac:	e004      	b.n	80033b8 <HAL_GPIO_Init+0x1cc>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e002      	b.n	80033b8 <HAL_GPIO_Init+0x1cc>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <HAL_GPIO_Init+0x1cc>
 80033b6:	2300      	movs	r3, #0
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	2103      	movs	r1, #3
 80033bc:	400a      	ands	r2, r1
 80033be:	00d2      	lsls	r2, r2, #3
 80033c0:	4093      	lsls	r3, r2
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80033c8:	4936      	ldr	r1, [pc, #216]	@ (80034a4 <HAL_GPIO_Init+0x2b8>)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	089b      	lsrs	r3, r3, #2
 80033ce:	3318      	adds	r3, #24
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033d6:	4b33      	ldr	r3, [pc, #204]	@ (80034a4 <HAL_GPIO_Init+0x2b8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	43da      	mvns	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	2380      	movs	r3, #128	@ 0x80
 80033ec:	035b      	lsls	r3, r3, #13
 80033ee:	4013      	ands	r3, r2
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033fa:	4b2a      	ldr	r3, [pc, #168]	@ (80034a4 <HAL_GPIO_Init+0x2b8>)
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003400:	4b28      	ldr	r3, [pc, #160]	@ (80034a4 <HAL_GPIO_Init+0x2b8>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	43da      	mvns	r2, r3
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4013      	ands	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	2380      	movs	r3, #128	@ 0x80
 8003416:	039b      	lsls	r3, r3, #14
 8003418:	4013      	ands	r3, r2
 800341a:	d003      	beq.n	8003424 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003424:	4b1f      	ldr	r3, [pc, #124]	@ (80034a4 <HAL_GPIO_Init+0x2b8>)
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800342a:	4a1e      	ldr	r2, [pc, #120]	@ (80034a4 <HAL_GPIO_Init+0x2b8>)
 800342c:	2384      	movs	r3, #132	@ 0x84
 800342e:	58d3      	ldr	r3, [r2, r3]
 8003430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	43da      	mvns	r2, r3
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	2380      	movs	r3, #128	@ 0x80
 8003442:	029b      	lsls	r3, r3, #10
 8003444:	4013      	ands	r3, r2
 8003446:	d003      	beq.n	8003450 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003450:	4914      	ldr	r1, [pc, #80]	@ (80034a4 <HAL_GPIO_Init+0x2b8>)
 8003452:	2284      	movs	r2, #132	@ 0x84
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003458:	4a12      	ldr	r2, [pc, #72]	@ (80034a4 <HAL_GPIO_Init+0x2b8>)
 800345a:	2380      	movs	r3, #128	@ 0x80
 800345c:	58d3      	ldr	r3, [r2, r3]
 800345e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	43da      	mvns	r2, r3
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4013      	ands	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	2380      	movs	r3, #128	@ 0x80
 8003470:	025b      	lsls	r3, r3, #9
 8003472:	4013      	ands	r3, r2
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800347e:	4909      	ldr	r1, [pc, #36]	@ (80034a4 <HAL_GPIO_Init+0x2b8>)
 8003480:	2280      	movs	r2, #128	@ 0x80
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3301      	adds	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	40da      	lsrs	r2, r3
 8003494:	1e13      	subs	r3, r2, #0
 8003496:	d000      	beq.n	800349a <HAL_GPIO_Init+0x2ae>
 8003498:	e6b0      	b.n	80031fc <HAL_GPIO_Init+0x10>
  }
}
 800349a:	46c0      	nop			@ (mov r8, r8)
 800349c:	46c0      	nop			@ (mov r8, r8)
 800349e:	46bd      	mov	sp, r7
 80034a0:	b006      	add	sp, #24
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40021800 	.word	0x40021800
 80034a8:	50000400 	.word	0x50000400
 80034ac:	50000800 	.word	0x50000800
 80034b0:	50000c00 	.word	0x50000c00

080034b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	000a      	movs	r2, r1
 80034be:	1cbb      	adds	r3, r7, #2
 80034c0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	1cba      	adds	r2, r7, #2
 80034c8:	8812      	ldrh	r2, [r2, #0]
 80034ca:	4013      	ands	r3, r2
 80034cc:	d004      	beq.n	80034d8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80034ce:	230f      	movs	r3, #15
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	2201      	movs	r2, #1
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	e003      	b.n	80034e0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034d8:	230f      	movs	r3, #15
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80034e0:	230f      	movs	r3, #15
 80034e2:	18fb      	adds	r3, r7, r3
 80034e4:	781b      	ldrb	r3, [r3, #0]
}
 80034e6:	0018      	movs	r0, r3
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b004      	add	sp, #16
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	0008      	movs	r0, r1
 80034f8:	0011      	movs	r1, r2
 80034fa:	1cbb      	adds	r3, r7, #2
 80034fc:	1c02      	adds	r2, r0, #0
 80034fe:	801a      	strh	r2, [r3, #0]
 8003500:	1c7b      	adds	r3, r7, #1
 8003502:	1c0a      	adds	r2, r1, #0
 8003504:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003506:	1c7b      	adds	r3, r7, #1
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d004      	beq.n	8003518 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800350e:	1cbb      	adds	r3, r7, #2
 8003510:	881a      	ldrh	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003516:	e003      	b.n	8003520 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003518:	1cbb      	adds	r3, r7, #2
 800351a:	881a      	ldrh	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003520:	46c0      	nop			@ (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b002      	add	sp, #8
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003530:	4b19      	ldr	r3, [pc, #100]	@ (8003598 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a19      	ldr	r2, [pc, #100]	@ (800359c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003536:	4013      	ands	r3, r2
 8003538:	0019      	movs	r1, r3
 800353a:	4b17      	ldr	r3, [pc, #92]	@ (8003598 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	430a      	orrs	r2, r1
 8003540:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	2380      	movs	r3, #128	@ 0x80
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	429a      	cmp	r2, r3
 800354a:	d11f      	bne.n	800358c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800354c:	4b14      	ldr	r3, [pc, #80]	@ (80035a0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	0013      	movs	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	189b      	adds	r3, r3, r2
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4912      	ldr	r1, [pc, #72]	@ (80035a4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800355a:	0018      	movs	r0, r3
 800355c:	f7fc fdde 	bl	800011c <__udivsi3>
 8003560:	0003      	movs	r3, r0
 8003562:	3301      	adds	r3, #1
 8003564:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003566:	e008      	b.n	800357a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3b01      	subs	r3, #1
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	e001      	b.n	800357a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e009      	b.n	800358e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800357a:	4b07      	ldr	r3, [pc, #28]	@ (8003598 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	2380      	movs	r3, #128	@ 0x80
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	401a      	ands	r2, r3
 8003584:	2380      	movs	r3, #128	@ 0x80
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	429a      	cmp	r2, r3
 800358a:	d0ed      	beq.n	8003568 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	0018      	movs	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	b004      	add	sp, #16
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			@ (mov r8, r8)
 8003598:	40007000 	.word	0x40007000
 800359c:	fffff9ff 	.word	0xfffff9ff
 80035a0:	20000000 	.word	0x20000000
 80035a4:	000f4240 	.word	0x000f4240

080035a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80035ac:	4b03      	ldr	r3, [pc, #12]	@ (80035bc <LL_RCC_GetAPB1Prescaler+0x14>)
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	23e0      	movs	r3, #224	@ 0xe0
 80035b2:	01db      	lsls	r3, r3, #7
 80035b4:	4013      	ands	r3, r2
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40021000 	.word	0x40021000

080035c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e2fe      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2201      	movs	r2, #1
 80035d8:	4013      	ands	r3, r2
 80035da:	d100      	bne.n	80035de <HAL_RCC_OscConfig+0x1e>
 80035dc:	e07c      	b.n	80036d8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035de:	4bc3      	ldr	r3, [pc, #780]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2238      	movs	r2, #56	@ 0x38
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035e8:	4bc0      	ldr	r3, [pc, #768]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	2203      	movs	r2, #3
 80035ee:	4013      	ands	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d102      	bne.n	80035fe <HAL_RCC_OscConfig+0x3e>
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d002      	beq.n	8003604 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b08      	cmp	r3, #8
 8003602:	d10b      	bne.n	800361c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003604:	4bb9      	ldr	r3, [pc, #740]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	2380      	movs	r3, #128	@ 0x80
 800360a:	029b      	lsls	r3, r3, #10
 800360c:	4013      	ands	r3, r2
 800360e:	d062      	beq.n	80036d6 <HAL_RCC_OscConfig+0x116>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d15e      	bne.n	80036d6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e2d9      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	2380      	movs	r3, #128	@ 0x80
 8003622:	025b      	lsls	r3, r3, #9
 8003624:	429a      	cmp	r2, r3
 8003626:	d107      	bne.n	8003638 <HAL_RCC_OscConfig+0x78>
 8003628:	4bb0      	ldr	r3, [pc, #704]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4baf      	ldr	r3, [pc, #700]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 800362e:	2180      	movs	r1, #128	@ 0x80
 8003630:	0249      	lsls	r1, r1, #9
 8003632:	430a      	orrs	r2, r1
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e020      	b.n	800367a <HAL_RCC_OscConfig+0xba>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	23a0      	movs	r3, #160	@ 0xa0
 800363e:	02db      	lsls	r3, r3, #11
 8003640:	429a      	cmp	r2, r3
 8003642:	d10e      	bne.n	8003662 <HAL_RCC_OscConfig+0xa2>
 8003644:	4ba9      	ldr	r3, [pc, #676]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4ba8      	ldr	r3, [pc, #672]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 800364a:	2180      	movs	r1, #128	@ 0x80
 800364c:	02c9      	lsls	r1, r1, #11
 800364e:	430a      	orrs	r2, r1
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	4ba6      	ldr	r3, [pc, #664]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	4ba5      	ldr	r3, [pc, #660]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003658:	2180      	movs	r1, #128	@ 0x80
 800365a:	0249      	lsls	r1, r1, #9
 800365c:	430a      	orrs	r2, r1
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e00b      	b.n	800367a <HAL_RCC_OscConfig+0xba>
 8003662:	4ba2      	ldr	r3, [pc, #648]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	4ba1      	ldr	r3, [pc, #644]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003668:	49a1      	ldr	r1, [pc, #644]	@ (80038f0 <HAL_RCC_OscConfig+0x330>)
 800366a:	400a      	ands	r2, r1
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	4b9f      	ldr	r3, [pc, #636]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4b9e      	ldr	r3, [pc, #632]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003674:	499f      	ldr	r1, [pc, #636]	@ (80038f4 <HAL_RCC_OscConfig+0x334>)
 8003676:	400a      	ands	r2, r1
 8003678:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d014      	beq.n	80036ac <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7ff fa5b 	bl	8002b3c <HAL_GetTick>
 8003686:	0003      	movs	r3, r0
 8003688:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800368c:	f7ff fa56 	bl	8002b3c <HAL_GetTick>
 8003690:	0002      	movs	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	@ 0x64
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e298      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800369e:	4b93      	ldr	r3, [pc, #588]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	2380      	movs	r3, #128	@ 0x80
 80036a4:	029b      	lsls	r3, r3, #10
 80036a6:	4013      	ands	r3, r2
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0xcc>
 80036aa:	e015      	b.n	80036d8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7ff fa46 	bl	8002b3c <HAL_GetTick>
 80036b0:	0003      	movs	r3, r0
 80036b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b6:	f7ff fa41 	bl	8002b3c <HAL_GetTick>
 80036ba:	0002      	movs	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b64      	cmp	r3, #100	@ 0x64
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e283      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036c8:	4b88      	ldr	r3, [pc, #544]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	2380      	movs	r3, #128	@ 0x80
 80036ce:	029b      	lsls	r3, r3, #10
 80036d0:	4013      	ands	r3, r2
 80036d2:	d1f0      	bne.n	80036b6 <HAL_RCC_OscConfig+0xf6>
 80036d4:	e000      	b.n	80036d8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2202      	movs	r2, #2
 80036de:	4013      	ands	r3, r2
 80036e0:	d100      	bne.n	80036e4 <HAL_RCC_OscConfig+0x124>
 80036e2:	e099      	b.n	8003818 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e4:	4b81      	ldr	r3, [pc, #516]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2238      	movs	r2, #56	@ 0x38
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036ee:	4b7f      	ldr	r3, [pc, #508]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	2203      	movs	r2, #3
 80036f4:	4013      	ands	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d102      	bne.n	8003704 <HAL_RCC_OscConfig+0x144>
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d002      	beq.n	800370a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d135      	bne.n	8003776 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800370a:	4b78      	ldr	r3, [pc, #480]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	2380      	movs	r3, #128	@ 0x80
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4013      	ands	r3, r2
 8003714:	d005      	beq.n	8003722 <HAL_RCC_OscConfig+0x162>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e256      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003722:	4b72      	ldr	r3, [pc, #456]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	4a74      	ldr	r2, [pc, #464]	@ (80038f8 <HAL_RCC_OscConfig+0x338>)
 8003728:	4013      	ands	r3, r2
 800372a:	0019      	movs	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	021a      	lsls	r2, r3, #8
 8003732:	4b6e      	ldr	r3, [pc, #440]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003734:	430a      	orrs	r2, r1
 8003736:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d112      	bne.n	8003764 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800373e:	4b6b      	ldr	r3, [pc, #428]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a6e      	ldr	r2, [pc, #440]	@ (80038fc <HAL_RCC_OscConfig+0x33c>)
 8003744:	4013      	ands	r3, r2
 8003746:	0019      	movs	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	4b67      	ldr	r3, [pc, #412]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 800374e:	430a      	orrs	r2, r1
 8003750:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003752:	4b66      	ldr	r3, [pc, #408]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	0adb      	lsrs	r3, r3, #11
 8003758:	2207      	movs	r2, #7
 800375a:	4013      	ands	r3, r2
 800375c:	4a68      	ldr	r2, [pc, #416]	@ (8003900 <HAL_RCC_OscConfig+0x340>)
 800375e:	40da      	lsrs	r2, r3
 8003760:	4b68      	ldr	r3, [pc, #416]	@ (8003904 <HAL_RCC_OscConfig+0x344>)
 8003762:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003764:	4b68      	ldr	r3, [pc, #416]	@ (8003908 <HAL_RCC_OscConfig+0x348>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	0018      	movs	r0, r3
 800376a:	f7ff f98b 	bl	8002a84 <HAL_InitTick>
 800376e:	1e03      	subs	r3, r0, #0
 8003770:	d051      	beq.n	8003816 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e22c      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d030      	beq.n	80037e0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800377e:	4b5b      	ldr	r3, [pc, #364]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a5e      	ldr	r2, [pc, #376]	@ (80038fc <HAL_RCC_OscConfig+0x33c>)
 8003784:	4013      	ands	r3, r2
 8003786:	0019      	movs	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	4b57      	ldr	r3, [pc, #348]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 800378e:	430a      	orrs	r2, r1
 8003790:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003792:	4b56      	ldr	r3, [pc, #344]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4b55      	ldr	r3, [pc, #340]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003798:	2180      	movs	r1, #128	@ 0x80
 800379a:	0049      	lsls	r1, r1, #1
 800379c:	430a      	orrs	r2, r1
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7ff f9cc 	bl	8002b3c <HAL_GetTick>
 80037a4:	0003      	movs	r3, r0
 80037a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037aa:	f7ff f9c7 	bl	8002b3c <HAL_GetTick>
 80037ae:	0002      	movs	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e209      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037bc:	4b4b      	ldr	r3, [pc, #300]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	2380      	movs	r3, #128	@ 0x80
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4013      	ands	r3, r2
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c8:	4b48      	ldr	r3, [pc, #288]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a4a      	ldr	r2, [pc, #296]	@ (80038f8 <HAL_RCC_OscConfig+0x338>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	021a      	lsls	r2, r3, #8
 80037d8:	4b44      	ldr	r3, [pc, #272]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	e01b      	b.n	8003818 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80037e0:	4b42      	ldr	r3, [pc, #264]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b41      	ldr	r3, [pc, #260]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 80037e6:	4949      	ldr	r1, [pc, #292]	@ (800390c <HAL_RCC_OscConfig+0x34c>)
 80037e8:	400a      	ands	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7ff f9a6 	bl	8002b3c <HAL_GetTick>
 80037f0:	0003      	movs	r3, r0
 80037f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f6:	f7ff f9a1 	bl	8002b3c <HAL_GetTick>
 80037fa:	0002      	movs	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e1e3      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003808:	4b38      	ldr	r3, [pc, #224]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	2380      	movs	r3, #128	@ 0x80
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4013      	ands	r3, r2
 8003812:	d1f0      	bne.n	80037f6 <HAL_RCC_OscConfig+0x236>
 8003814:	e000      	b.n	8003818 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003816:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2208      	movs	r2, #8
 800381e:	4013      	ands	r3, r2
 8003820:	d047      	beq.n	80038b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003822:	4b32      	ldr	r3, [pc, #200]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2238      	movs	r2, #56	@ 0x38
 8003828:	4013      	ands	r3, r2
 800382a:	2b18      	cmp	r3, #24
 800382c:	d10a      	bne.n	8003844 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800382e:	4b2f      	ldr	r3, [pc, #188]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003832:	2202      	movs	r2, #2
 8003834:	4013      	ands	r3, r2
 8003836:	d03c      	beq.n	80038b2 <HAL_RCC_OscConfig+0x2f2>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d138      	bne.n	80038b2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e1c5      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d019      	beq.n	8003880 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800384c:	4b27      	ldr	r3, [pc, #156]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 800384e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003850:	4b26      	ldr	r3, [pc, #152]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003852:	2101      	movs	r1, #1
 8003854:	430a      	orrs	r2, r1
 8003856:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7ff f970 	bl	8002b3c <HAL_GetTick>
 800385c:	0003      	movs	r3, r0
 800385e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003862:	f7ff f96b 	bl	8002b3c <HAL_GetTick>
 8003866:	0002      	movs	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e1ad      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003874:	4b1d      	ldr	r3, [pc, #116]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003878:	2202      	movs	r2, #2
 800387a:	4013      	ands	r3, r2
 800387c:	d0f1      	beq.n	8003862 <HAL_RCC_OscConfig+0x2a2>
 800387e:	e018      	b.n	80038b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003880:	4b1a      	ldr	r3, [pc, #104]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003882:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003884:	4b19      	ldr	r3, [pc, #100]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 8003886:	2101      	movs	r1, #1
 8003888:	438a      	bics	r2, r1
 800388a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7ff f956 	bl	8002b3c <HAL_GetTick>
 8003890:	0003      	movs	r3, r0
 8003892:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003896:	f7ff f951 	bl	8002b3c <HAL_GetTick>
 800389a:	0002      	movs	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e193      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038a8:	4b10      	ldr	r3, [pc, #64]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 80038aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ac:	2202      	movs	r2, #2
 80038ae:	4013      	ands	r3, r2
 80038b0:	d1f1      	bne.n	8003896 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2204      	movs	r2, #4
 80038b8:	4013      	ands	r3, r2
 80038ba:	d100      	bne.n	80038be <HAL_RCC_OscConfig+0x2fe>
 80038bc:	e0c6      	b.n	8003a4c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038be:	231f      	movs	r3, #31
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80038c6:	4b09      	ldr	r3, [pc, #36]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2238      	movs	r2, #56	@ 0x38
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d11e      	bne.n	8003910 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80038d2:	4b06      	ldr	r3, [pc, #24]	@ (80038ec <HAL_RCC_OscConfig+0x32c>)
 80038d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d6:	2202      	movs	r2, #2
 80038d8:	4013      	ands	r3, r2
 80038da:	d100      	bne.n	80038de <HAL_RCC_OscConfig+0x31e>
 80038dc:	e0b6      	b.n	8003a4c <HAL_RCC_OscConfig+0x48c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d000      	beq.n	80038e8 <HAL_RCC_OscConfig+0x328>
 80038e6:	e0b1      	b.n	8003a4c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e171      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
 80038ec:	40021000 	.word	0x40021000
 80038f0:	fffeffff 	.word	0xfffeffff
 80038f4:	fffbffff 	.word	0xfffbffff
 80038f8:	ffff80ff 	.word	0xffff80ff
 80038fc:	ffffc7ff 	.word	0xffffc7ff
 8003900:	00f42400 	.word	0x00f42400
 8003904:	20000000 	.word	0x20000000
 8003908:	20000008 	.word	0x20000008
 800390c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003910:	4bb1      	ldr	r3, [pc, #708]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003912:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003914:	2380      	movs	r3, #128	@ 0x80
 8003916:	055b      	lsls	r3, r3, #21
 8003918:	4013      	ands	r3, r2
 800391a:	d101      	bne.n	8003920 <HAL_RCC_OscConfig+0x360>
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <HAL_RCC_OscConfig+0x362>
 8003920:	2300      	movs	r3, #0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d011      	beq.n	800394a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003926:	4bac      	ldr	r3, [pc, #688]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003928:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800392a:	4bab      	ldr	r3, [pc, #684]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 800392c:	2180      	movs	r1, #128	@ 0x80
 800392e:	0549      	lsls	r1, r1, #21
 8003930:	430a      	orrs	r2, r1
 8003932:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003934:	4ba8      	ldr	r3, [pc, #672]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003936:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003938:	2380      	movs	r3, #128	@ 0x80
 800393a:	055b      	lsls	r3, r3, #21
 800393c:	4013      	ands	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003942:	231f      	movs	r3, #31
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	2201      	movs	r2, #1
 8003948:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800394a:	4ba4      	ldr	r3, [pc, #656]	@ (8003bdc <HAL_RCC_OscConfig+0x61c>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	2380      	movs	r3, #128	@ 0x80
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	4013      	ands	r3, r2
 8003954:	d11a      	bne.n	800398c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003956:	4ba1      	ldr	r3, [pc, #644]	@ (8003bdc <HAL_RCC_OscConfig+0x61c>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4ba0      	ldr	r3, [pc, #640]	@ (8003bdc <HAL_RCC_OscConfig+0x61c>)
 800395c:	2180      	movs	r1, #128	@ 0x80
 800395e:	0049      	lsls	r1, r1, #1
 8003960:	430a      	orrs	r2, r1
 8003962:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003964:	f7ff f8ea 	bl	8002b3c <HAL_GetTick>
 8003968:	0003      	movs	r3, r0
 800396a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396e:	f7ff f8e5 	bl	8002b3c <HAL_GetTick>
 8003972:	0002      	movs	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e127      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003980:	4b96      	ldr	r3, [pc, #600]	@ (8003bdc <HAL_RCC_OscConfig+0x61c>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	2380      	movs	r3, #128	@ 0x80
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	4013      	ands	r3, r2
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d106      	bne.n	80039a2 <HAL_RCC_OscConfig+0x3e2>
 8003994:	4b90      	ldr	r3, [pc, #576]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003996:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003998:	4b8f      	ldr	r3, [pc, #572]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 800399a:	2101      	movs	r1, #1
 800399c:	430a      	orrs	r2, r1
 800399e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039a0:	e01c      	b.n	80039dc <HAL_RCC_OscConfig+0x41c>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b05      	cmp	r3, #5
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x404>
 80039aa:	4b8b      	ldr	r3, [pc, #556]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 80039ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039ae:	4b8a      	ldr	r3, [pc, #552]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 80039b0:	2104      	movs	r1, #4
 80039b2:	430a      	orrs	r2, r1
 80039b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039b6:	4b88      	ldr	r3, [pc, #544]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 80039b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039ba:	4b87      	ldr	r3, [pc, #540]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 80039bc:	2101      	movs	r1, #1
 80039be:	430a      	orrs	r2, r1
 80039c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039c2:	e00b      	b.n	80039dc <HAL_RCC_OscConfig+0x41c>
 80039c4:	4b84      	ldr	r3, [pc, #528]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 80039c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039c8:	4b83      	ldr	r3, [pc, #524]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 80039ca:	2101      	movs	r1, #1
 80039cc:	438a      	bics	r2, r1
 80039ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039d0:	4b81      	ldr	r3, [pc, #516]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 80039d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80039d4:	4b80      	ldr	r3, [pc, #512]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 80039d6:	2104      	movs	r1, #4
 80039d8:	438a      	bics	r2, r1
 80039da:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d014      	beq.n	8003a0e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7ff f8aa 	bl	8002b3c <HAL_GetTick>
 80039e8:	0003      	movs	r3, r0
 80039ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ec:	e009      	b.n	8003a02 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ee:	f7ff f8a5 	bl	8002b3c <HAL_GetTick>
 80039f2:	0002      	movs	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	4a79      	ldr	r2, [pc, #484]	@ (8003be0 <HAL_RCC_OscConfig+0x620>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e0e6      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a02:	4b75      	ldr	r3, [pc, #468]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a06:	2202      	movs	r2, #2
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x42e>
 8003a0c:	e013      	b.n	8003a36 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0e:	f7ff f895 	bl	8002b3c <HAL_GetTick>
 8003a12:	0003      	movs	r3, r0
 8003a14:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a16:	e009      	b.n	8003a2c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a18:	f7ff f890 	bl	8002b3c <HAL_GetTick>
 8003a1c:	0002      	movs	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	4a6f      	ldr	r2, [pc, #444]	@ (8003be0 <HAL_RCC_OscConfig+0x620>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e0d1      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a30:	2202      	movs	r2, #2
 8003a32:	4013      	ands	r3, r2
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003a36:	231f      	movs	r3, #31
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d105      	bne.n	8003a4c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003a40:	4b65      	ldr	r3, [pc, #404]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003a42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a44:	4b64      	ldr	r3, [pc, #400]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003a46:	4967      	ldr	r1, [pc, #412]	@ (8003be4 <HAL_RCC_OscConfig+0x624>)
 8003a48:	400a      	ands	r2, r1
 8003a4a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d100      	bne.n	8003a56 <HAL_RCC_OscConfig+0x496>
 8003a54:	e0bb      	b.n	8003bce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a56:	4b60      	ldr	r3, [pc, #384]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2238      	movs	r2, #56	@ 0x38
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b10      	cmp	r3, #16
 8003a60:	d100      	bne.n	8003a64 <HAL_RCC_OscConfig+0x4a4>
 8003a62:	e07b      	b.n	8003b5c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d156      	bne.n	8003b1a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6c:	4b5a      	ldr	r3, [pc, #360]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	4b59      	ldr	r3, [pc, #356]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003a72:	495d      	ldr	r1, [pc, #372]	@ (8003be8 <HAL_RCC_OscConfig+0x628>)
 8003a74:	400a      	ands	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7ff f860 	bl	8002b3c <HAL_GetTick>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a82:	f7ff f85b 	bl	8002b3c <HAL_GetTick>
 8003a86:	0002      	movs	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e09d      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a94:	4b50      	ldr	r3, [pc, #320]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	2380      	movs	r3, #128	@ 0x80
 8003a9a:	049b      	lsls	r3, r3, #18
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d1f0      	bne.n	8003a82 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aa0:	4b4d      	ldr	r3, [pc, #308]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	4a51      	ldr	r2, [pc, #324]	@ (8003bec <HAL_RCC_OscConfig+0x62c>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1a      	ldr	r2, [r3, #32]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab8:	021b      	lsls	r3, r3, #8
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003acc:	431a      	orrs	r2, r3
 8003ace:	4b42      	ldr	r3, [pc, #264]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad4:	4b40      	ldr	r3, [pc, #256]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	4b3f      	ldr	r3, [pc, #252]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003ada:	2180      	movs	r1, #128	@ 0x80
 8003adc:	0449      	lsls	r1, r1, #17
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	4b3c      	ldr	r3, [pc, #240]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003ae8:	2180      	movs	r1, #128	@ 0x80
 8003aea:	0549      	lsls	r1, r1, #21
 8003aec:	430a      	orrs	r2, r1
 8003aee:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7ff f824 	bl	8002b3c <HAL_GetTick>
 8003af4:	0003      	movs	r3, r0
 8003af6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afa:	f7ff f81f 	bl	8002b3c <HAL_GetTick>
 8003afe:	0002      	movs	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e061      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0c:	4b32      	ldr	r3, [pc, #200]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	2380      	movs	r3, #128	@ 0x80
 8003b12:	049b      	lsls	r3, r3, #18
 8003b14:	4013      	ands	r3, r2
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x53a>
 8003b18:	e059      	b.n	8003bce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4b2e      	ldr	r3, [pc, #184]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003b20:	4931      	ldr	r1, [pc, #196]	@ (8003be8 <HAL_RCC_OscConfig+0x628>)
 8003b22:	400a      	ands	r2, r1
 8003b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b26:	f7ff f809 	bl	8002b3c <HAL_GetTick>
 8003b2a:	0003      	movs	r3, r0
 8003b2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b30:	f7ff f804 	bl	8002b3c <HAL_GetTick>
 8003b34:	0002      	movs	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e046      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b42:	4b25      	ldr	r3, [pc, #148]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	2380      	movs	r3, #128	@ 0x80
 8003b48:	049b      	lsls	r3, r3, #18
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003b4e:	4b22      	ldr	r3, [pc, #136]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	4b21      	ldr	r3, [pc, #132]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003b54:	4926      	ldr	r1, [pc, #152]	@ (8003bf0 <HAL_RCC_OscConfig+0x630>)
 8003b56:	400a      	ands	r2, r1
 8003b58:	60da      	str	r2, [r3, #12]
 8003b5a:	e038      	b.n	8003bce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e033      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003b68:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd8 <HAL_RCC_OscConfig+0x618>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2203      	movs	r2, #3
 8003b72:	401a      	ands	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d126      	bne.n	8003bca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2270      	movs	r2, #112	@ 0x70
 8003b80:	401a      	ands	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d11f      	bne.n	8003bca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	23fe      	movs	r3, #254	@ 0xfe
 8003b8e:	01db      	lsls	r3, r3, #7
 8003b90:	401a      	ands	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b96:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d116      	bne.n	8003bca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	23f8      	movs	r3, #248	@ 0xf8
 8003ba0:	039b      	lsls	r3, r3, #14
 8003ba2:	401a      	ands	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d10e      	bne.n	8003bca <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	23e0      	movs	r3, #224	@ 0xe0
 8003bb0:	051b      	lsls	r3, r3, #20
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d106      	bne.n	8003bca <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	0f5b      	lsrs	r3, r3, #29
 8003bc0:	075a      	lsls	r2, r3, #29
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d001      	beq.n	8003bce <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b008      	add	sp, #32
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40007000 	.word	0x40007000
 8003be0:	00001388 	.word	0x00001388
 8003be4:	efffffff 	.word	0xefffffff
 8003be8:	feffffff 	.word	0xfeffffff
 8003bec:	11c1808c 	.word	0x11c1808c
 8003bf0:	eefefffc 	.word	0xeefefffc

08003bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0e9      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c08:	4b76      	ldr	r3, [pc, #472]	@ (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2207      	movs	r2, #7
 8003c0e:	4013      	ands	r3, r2
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d91e      	bls.n	8003c54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b73      	ldr	r3, [pc, #460]	@ (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2207      	movs	r2, #7
 8003c1c:	4393      	bics	r3, r2
 8003c1e:	0019      	movs	r1, r3
 8003c20:	4b70      	ldr	r3, [pc, #448]	@ (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c28:	f7fe ff88 	bl	8002b3c <HAL_GetTick>
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c30:	e009      	b.n	8003c46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c32:	f7fe ff83 	bl	8002b3c <HAL_GetTick>
 8003c36:	0002      	movs	r2, r0
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	4a6a      	ldr	r2, [pc, #424]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e0ca      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c46:	4b67      	ldr	r3, [pc, #412]	@ (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2207      	movs	r2, #7
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d1ee      	bne.n	8003c32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d015      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2204      	movs	r2, #4
 8003c64:	4013      	ands	r3, r2
 8003c66:	d006      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003c68:	4b60      	ldr	r3, [pc, #384]	@ (8003dec <HAL_RCC_ClockConfig+0x1f8>)
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	4b5f      	ldr	r3, [pc, #380]	@ (8003dec <HAL_RCC_ClockConfig+0x1f8>)
 8003c6e:	21e0      	movs	r1, #224	@ 0xe0
 8003c70:	01c9      	lsls	r1, r1, #7
 8003c72:	430a      	orrs	r2, r1
 8003c74:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c76:	4b5d      	ldr	r3, [pc, #372]	@ (8003dec <HAL_RCC_ClockConfig+0x1f8>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	4a5d      	ldr	r2, [pc, #372]	@ (8003df0 <HAL_RCC_ClockConfig+0x1fc>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	0019      	movs	r1, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	4b59      	ldr	r3, [pc, #356]	@ (8003dec <HAL_RCC_ClockConfig+0x1f8>)
 8003c86:	430a      	orrs	r2, r1
 8003c88:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	4013      	ands	r3, r2
 8003c92:	d057      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d107      	bne.n	8003cac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c9c:	4b53      	ldr	r3, [pc, #332]	@ (8003dec <HAL_RCC_ClockConfig+0x1f8>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	2380      	movs	r3, #128	@ 0x80
 8003ca2:	029b      	lsls	r3, r3, #10
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d12b      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e097      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d107      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8003dec <HAL_RCC_ClockConfig+0x1f8>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	2380      	movs	r3, #128	@ 0x80
 8003cba:	049b      	lsls	r3, r3, #18
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d11f      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e08b      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d107      	bne.n	8003cdc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ccc:	4b47      	ldr	r3, [pc, #284]	@ (8003dec <HAL_RCC_ClockConfig+0x1f8>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	2380      	movs	r3, #128	@ 0x80
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d113      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e07f      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d106      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ce4:	4b41      	ldr	r3, [pc, #260]	@ (8003dec <HAL_RCC_ClockConfig+0x1f8>)
 8003ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce8:	2202      	movs	r2, #2
 8003cea:	4013      	ands	r3, r2
 8003cec:	d108      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e074      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8003dec <HAL_RCC_ClockConfig+0x1f8>)
 8003cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e06d      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d00:	4b3a      	ldr	r3, [pc, #232]	@ (8003dec <HAL_RCC_ClockConfig+0x1f8>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2207      	movs	r2, #7
 8003d06:	4393      	bics	r3, r2
 8003d08:	0019      	movs	r1, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	4b37      	ldr	r3, [pc, #220]	@ (8003dec <HAL_RCC_ClockConfig+0x1f8>)
 8003d10:	430a      	orrs	r2, r1
 8003d12:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d14:	f7fe ff12 	bl	8002b3c <HAL_GetTick>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1c:	e009      	b.n	8003d32 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d1e:	f7fe ff0d 	bl	8002b3c <HAL_GetTick>
 8003d22:	0002      	movs	r2, r0
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	4a2f      	ldr	r2, [pc, #188]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e054      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d32:	4b2e      	ldr	r3, [pc, #184]	@ (8003dec <HAL_RCC_ClockConfig+0x1f8>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2238      	movs	r2, #56	@ 0x38
 8003d38:	401a      	ands	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d1ec      	bne.n	8003d1e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d44:	4b27      	ldr	r3, [pc, #156]	@ (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2207      	movs	r2, #7
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d21e      	bcs.n	8003d90 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d52:	4b24      	ldr	r3, [pc, #144]	@ (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2207      	movs	r2, #7
 8003d58:	4393      	bics	r3, r2
 8003d5a:	0019      	movs	r1, r3
 8003d5c:	4b21      	ldr	r3, [pc, #132]	@ (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d64:	f7fe feea 	bl	8002b3c <HAL_GetTick>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d6c:	e009      	b.n	8003d82 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d6e:	f7fe fee5 	bl	8002b3c <HAL_GetTick>
 8003d72:	0002      	movs	r2, r0
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	4a1b      	ldr	r2, [pc, #108]	@ (8003de8 <HAL_RCC_ClockConfig+0x1f4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e02c      	b.n	8003ddc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d82:	4b18      	ldr	r3, [pc, #96]	@ (8003de4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2207      	movs	r2, #7
 8003d88:	4013      	ands	r3, r2
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d1ee      	bne.n	8003d6e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2204      	movs	r2, #4
 8003d96:	4013      	ands	r3, r2
 8003d98:	d009      	beq.n	8003dae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003d9a:	4b14      	ldr	r3, [pc, #80]	@ (8003dec <HAL_RCC_ClockConfig+0x1f8>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	4a15      	ldr	r2, [pc, #84]	@ (8003df4 <HAL_RCC_ClockConfig+0x200>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	0019      	movs	r1, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	4b10      	ldr	r3, [pc, #64]	@ (8003dec <HAL_RCC_ClockConfig+0x1f8>)
 8003daa:	430a      	orrs	r2, r1
 8003dac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003dae:	f000 f829 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8003db2:	0001      	movs	r1, r0
 8003db4:	4b0d      	ldr	r3, [pc, #52]	@ (8003dec <HAL_RCC_ClockConfig+0x1f8>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	0a1b      	lsrs	r3, r3, #8
 8003dba:	220f      	movs	r2, #15
 8003dbc:	401a      	ands	r2, r3
 8003dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003df8 <HAL_RCC_ClockConfig+0x204>)
 8003dc0:	0092      	lsls	r2, r2, #2
 8003dc2:	58d3      	ldr	r3, [r2, r3]
 8003dc4:	221f      	movs	r2, #31
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	000a      	movs	r2, r1
 8003dca:	40da      	lsrs	r2, r3
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <HAL_RCC_ClockConfig+0x208>)
 8003dce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e00 <HAL_RCC_ClockConfig+0x20c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f7fe fe55 	bl	8002a84 <HAL_InitTick>
 8003dda:	0003      	movs	r3, r0
}
 8003ddc:	0018      	movs	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b004      	add	sp, #16
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40022000 	.word	0x40022000
 8003de8:	00001388 	.word	0x00001388
 8003dec:	40021000 	.word	0x40021000
 8003df0:	fffff0ff 	.word	0xfffff0ff
 8003df4:	ffff8fff 	.word	0xffff8fff
 8003df8:	08005a5c 	.word	0x08005a5c
 8003dfc:	20000000 	.word	0x20000000
 8003e00:	20000008 	.word	0x20000008

08003e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e0a:	4b3c      	ldr	r3, [pc, #240]	@ (8003efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2238      	movs	r2, #56	@ 0x38
 8003e10:	4013      	ands	r3, r2
 8003e12:	d10f      	bne.n	8003e34 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003e14:	4b39      	ldr	r3, [pc, #228]	@ (8003efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	0adb      	lsrs	r3, r3, #11
 8003e1a:	2207      	movs	r2, #7
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	2201      	movs	r2, #1
 8003e20:	409a      	lsls	r2, r3
 8003e22:	0013      	movs	r3, r2
 8003e24:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003e26:	6839      	ldr	r1, [r7, #0]
 8003e28:	4835      	ldr	r0, [pc, #212]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003e2a:	f7fc f977 	bl	800011c <__udivsi3>
 8003e2e:	0003      	movs	r3, r0
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	e05d      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e34:	4b31      	ldr	r3, [pc, #196]	@ (8003efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2238      	movs	r2, #56	@ 0x38
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d102      	bne.n	8003e46 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e40:	4b30      	ldr	r3, [pc, #192]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x100>)
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	e054      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e46:	4b2d      	ldr	r3, [pc, #180]	@ (8003efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2238      	movs	r2, #56	@ 0x38
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d138      	bne.n	8003ec4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003e52:	4b2a      	ldr	r3, [pc, #168]	@ (8003efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	2203      	movs	r2, #3
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e5c:	4b27      	ldr	r3, [pc, #156]	@ (8003efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	2207      	movs	r2, #7
 8003e64:	4013      	ands	r3, r2
 8003e66:	3301      	adds	r3, #1
 8003e68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d10d      	bne.n	8003e8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	4824      	ldr	r0, [pc, #144]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x100>)
 8003e74:	f7fc f952 	bl	800011c <__udivsi3>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	0019      	movs	r1, r3
 8003e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	0a1b      	lsrs	r3, r3, #8
 8003e82:	227f      	movs	r2, #127	@ 0x7f
 8003e84:	4013      	ands	r3, r2
 8003e86:	434b      	muls	r3, r1
 8003e88:	617b      	str	r3, [r7, #20]
        break;
 8003e8a:	e00d      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	481c      	ldr	r0, [pc, #112]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003e90:	f7fc f944 	bl	800011c <__udivsi3>
 8003e94:	0003      	movs	r3, r0
 8003e96:	0019      	movs	r1, r3
 8003e98:	4b18      	ldr	r3, [pc, #96]	@ (8003efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	0a1b      	lsrs	r3, r3, #8
 8003e9e:	227f      	movs	r2, #127	@ 0x7f
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	434b      	muls	r3, r1
 8003ea4:	617b      	str	r3, [r7, #20]
        break;
 8003ea6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003ea8:	4b14      	ldr	r3, [pc, #80]	@ (8003efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	0f5b      	lsrs	r3, r3, #29
 8003eae:	2207      	movs	r2, #7
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	6978      	ldr	r0, [r7, #20]
 8003eba:	f7fc f92f 	bl	800011c <__udivsi3>
 8003ebe:	0003      	movs	r3, r0
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	e015      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8003efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2238      	movs	r2, #56	@ 0x38
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d103      	bne.n	8003ed8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003ed0:	2380      	movs	r3, #128	@ 0x80
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	e00b      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ed8:	4b08      	ldr	r3, [pc, #32]	@ (8003efc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2238      	movs	r2, #56	@ 0x38
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b18      	cmp	r3, #24
 8003ee2:	d103      	bne.n	8003eec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003ee4:	23fa      	movs	r3, #250	@ 0xfa
 8003ee6:	01db      	lsls	r3, r3, #7
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	e001      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ef0:	693b      	ldr	r3, [r7, #16]
}
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b006      	add	sp, #24
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	40021000 	.word	0x40021000
 8003f00:	00f42400 	.word	0x00f42400
 8003f04:	007a1200 	.word	0x007a1200

08003f08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f0c:	4b02      	ldr	r3, [pc, #8]	@ (8003f18 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
}
 8003f10:	0018      	movs	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			@ (mov r8, r8)
 8003f18:	20000000 	.word	0x20000000

08003f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f1c:	b5b0      	push	{r4, r5, r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003f20:	f7ff fff2 	bl	8003f08 <HAL_RCC_GetHCLKFreq>
 8003f24:	0004      	movs	r4, r0
 8003f26:	f7ff fb3f 	bl	80035a8 <LL_RCC_GetAPB1Prescaler>
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	0b1a      	lsrs	r2, r3, #12
 8003f2e:	4b05      	ldr	r3, [pc, #20]	@ (8003f44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f30:	0092      	lsls	r2, r2, #2
 8003f32:	58d3      	ldr	r3, [r2, r3]
 8003f34:	221f      	movs	r2, #31
 8003f36:	4013      	ands	r3, r2
 8003f38:	40dc      	lsrs	r4, r3
 8003f3a:	0023      	movs	r3, r4
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bdb0      	pop	{r4, r5, r7, pc}
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	08005a9c 	.word	0x08005a9c

08003f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003f50:	2313      	movs	r3, #19
 8003f52:	18fb      	adds	r3, r7, r3
 8003f54:	2200      	movs	r2, #0
 8003f56:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f58:	2312      	movs	r3, #18
 8003f5a:	18fb      	adds	r3, r7, r3
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	2380      	movs	r3, #128	@ 0x80
 8003f66:	029b      	lsls	r3, r3, #10
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d100      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003f6c:	e0a3      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f6e:	2011      	movs	r0, #17
 8003f70:	183b      	adds	r3, r7, r0
 8003f72:	2200      	movs	r2, #0
 8003f74:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f76:	4bc3      	ldr	r3, [pc, #780]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f7a:	2380      	movs	r3, #128	@ 0x80
 8003f7c:	055b      	lsls	r3, r3, #21
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d110      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f82:	4bc0      	ldr	r3, [pc, #768]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f86:	4bbf      	ldr	r3, [pc, #764]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f88:	2180      	movs	r1, #128	@ 0x80
 8003f8a:	0549      	lsls	r1, r1, #21
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f90:	4bbc      	ldr	r3, [pc, #752]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f94:	2380      	movs	r3, #128	@ 0x80
 8003f96:	055b      	lsls	r3, r3, #21
 8003f98:	4013      	ands	r3, r2
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9e:	183b      	adds	r3, r7, r0
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fa4:	4bb8      	ldr	r3, [pc, #736]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	4bb7      	ldr	r3, [pc, #732]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003faa:	2180      	movs	r1, #128	@ 0x80
 8003fac:	0049      	lsls	r1, r1, #1
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fb2:	f7fe fdc3 	bl	8002b3c <HAL_GetTick>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fba:	e00b      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbc:	f7fe fdbe 	bl	8002b3c <HAL_GetTick>
 8003fc0:	0002      	movs	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d904      	bls.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003fca:	2313      	movs	r3, #19
 8003fcc:	18fb      	adds	r3, r7, r3
 8003fce:	2203      	movs	r2, #3
 8003fd0:	701a      	strb	r2, [r3, #0]
        break;
 8003fd2:	e005      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fd4:	4bac      	ldr	r3, [pc, #688]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	2380      	movs	r3, #128	@ 0x80
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d0ed      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003fe0:	2313      	movs	r3, #19
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d154      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fea:	4ba6      	ldr	r3, [pc, #664]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003fee:	23c0      	movs	r3, #192	@ 0xc0
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d019      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	429a      	cmp	r2, r3
 8004004:	d014      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004006:	4b9f      	ldr	r3, [pc, #636]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400a:	4aa0      	ldr	r2, [pc, #640]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800400c:	4013      	ands	r3, r2
 800400e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004010:	4b9c      	ldr	r3, [pc, #624]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004012:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004014:	4b9b      	ldr	r3, [pc, #620]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004016:	2180      	movs	r1, #128	@ 0x80
 8004018:	0249      	lsls	r1, r1, #9
 800401a:	430a      	orrs	r2, r1
 800401c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800401e:	4b99      	ldr	r3, [pc, #612]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004020:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004022:	4b98      	ldr	r3, [pc, #608]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004024:	499a      	ldr	r1, [pc, #616]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004026:	400a      	ands	r2, r1
 8004028:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800402a:	4b96      	ldr	r3, [pc, #600]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2201      	movs	r2, #1
 8004034:	4013      	ands	r3, r2
 8004036:	d016      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fe fd80 	bl	8002b3c <HAL_GetTick>
 800403c:	0003      	movs	r3, r0
 800403e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004040:	e00c      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004042:	f7fe fd7b 	bl	8002b3c <HAL_GetTick>
 8004046:	0002      	movs	r2, r0
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	4a91      	ldr	r2, [pc, #580]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d904      	bls.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004052:	2313      	movs	r3, #19
 8004054:	18fb      	adds	r3, r7, r3
 8004056:	2203      	movs	r2, #3
 8004058:	701a      	strb	r2, [r3, #0]
            break;
 800405a:	e004      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800405c:	4b89      	ldr	r3, [pc, #548]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800405e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004060:	2202      	movs	r2, #2
 8004062:	4013      	ands	r3, r2
 8004064:	d0ed      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004066:	2313      	movs	r3, #19
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10a      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004070:	4b84      	ldr	r3, [pc, #528]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004074:	4a85      	ldr	r2, [pc, #532]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004076:	4013      	ands	r3, r2
 8004078:	0019      	movs	r1, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800407e:	4b81      	ldr	r3, [pc, #516]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004080:	430a      	orrs	r2, r1
 8004082:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004084:	e00c      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004086:	2312      	movs	r3, #18
 8004088:	18fb      	adds	r3, r7, r3
 800408a:	2213      	movs	r2, #19
 800408c:	18ba      	adds	r2, r7, r2
 800408e:	7812      	ldrb	r2, [r2, #0]
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	e005      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	2312      	movs	r3, #18
 8004096:	18fb      	adds	r3, r7, r3
 8004098:	2213      	movs	r2, #19
 800409a:	18ba      	adds	r2, r7, r2
 800409c:	7812      	ldrb	r2, [r2, #0]
 800409e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040a0:	2311      	movs	r3, #17
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d105      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040aa:	4b76      	ldr	r3, [pc, #472]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040ae:	4b75      	ldr	r3, [pc, #468]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040b0:	4979      	ldr	r1, [pc, #484]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80040b2:	400a      	ands	r2, r1
 80040b4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2201      	movs	r2, #1
 80040bc:	4013      	ands	r3, r2
 80040be:	d009      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040c0:	4b70      	ldr	r3, [pc, #448]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c4:	2203      	movs	r2, #3
 80040c6:	4393      	bics	r3, r2
 80040c8:	0019      	movs	r1, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	4b6d      	ldr	r3, [pc, #436]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040d0:	430a      	orrs	r2, r1
 80040d2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2202      	movs	r2, #2
 80040da:	4013      	ands	r3, r2
 80040dc:	d009      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040de:	4b69      	ldr	r3, [pc, #420]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e2:	220c      	movs	r2, #12
 80040e4:	4393      	bics	r3, r2
 80040e6:	0019      	movs	r1, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	4b65      	ldr	r3, [pc, #404]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040ee:	430a      	orrs	r2, r1
 80040f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2210      	movs	r2, #16
 80040f8:	4013      	ands	r3, r2
 80040fa:	d009      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040fc:	4b61      	ldr	r3, [pc, #388]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004100:	4a66      	ldr	r2, [pc, #408]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004102:	4013      	ands	r3, r2
 8004104:	0019      	movs	r1, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	4b5e      	ldr	r3, [pc, #376]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800410c:	430a      	orrs	r2, r1
 800410e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	2380      	movs	r3, #128	@ 0x80
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4013      	ands	r3, r2
 800411a:	d009      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800411c:	4b59      	ldr	r3, [pc, #356]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800411e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004120:	4a5f      	ldr	r2, [pc, #380]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004122:	4013      	ands	r3, r2
 8004124:	0019      	movs	r1, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	4b56      	ldr	r3, [pc, #344]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800412c:	430a      	orrs	r2, r1
 800412e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	2380      	movs	r3, #128	@ 0x80
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4013      	ands	r3, r2
 800413a:	d009      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800413c:	4b51      	ldr	r3, [pc, #324]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800413e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004140:	4a58      	ldr	r2, [pc, #352]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004142:	4013      	ands	r3, r2
 8004144:	0019      	movs	r1, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69da      	ldr	r2, [r3, #28]
 800414a:	4b4e      	ldr	r3, [pc, #312]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800414c:	430a      	orrs	r2, r1
 800414e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2220      	movs	r2, #32
 8004156:	4013      	ands	r3, r2
 8004158:	d009      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800415a:	4b4a      	ldr	r3, [pc, #296]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800415c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415e:	4a52      	ldr	r2, [pc, #328]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004160:	4013      	ands	r3, r2
 8004162:	0019      	movs	r1, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	4b46      	ldr	r3, [pc, #280]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800416a:	430a      	orrs	r2, r1
 800416c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	2380      	movs	r3, #128	@ 0x80
 8004174:	01db      	lsls	r3, r3, #7
 8004176:	4013      	ands	r3, r2
 8004178:	d015      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800417a:	4b42      	ldr	r3, [pc, #264]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800417c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	0899      	lsrs	r1, r3, #2
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	4b3f      	ldr	r3, [pc, #252]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004188:	430a      	orrs	r2, r1
 800418a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1a      	ldr	r2, [r3, #32]
 8004190:	2380      	movs	r3, #128	@ 0x80
 8004192:	05db      	lsls	r3, r3, #23
 8004194:	429a      	cmp	r2, r3
 8004196:	d106      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004198:	4b3a      	ldr	r3, [pc, #232]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	4b39      	ldr	r3, [pc, #228]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800419e:	2180      	movs	r1, #128	@ 0x80
 80041a0:	0249      	lsls	r1, r1, #9
 80041a2:	430a      	orrs	r2, r1
 80041a4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	2380      	movs	r3, #128	@ 0x80
 80041ac:	031b      	lsls	r3, r3, #12
 80041ae:	4013      	ands	r3, r2
 80041b0:	d009      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041b2:	4b34      	ldr	r3, [pc, #208]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b6:	2240      	movs	r2, #64	@ 0x40
 80041b8:	4393      	bics	r3, r2
 80041ba:	0019      	movs	r1, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041c0:	4b30      	ldr	r3, [pc, #192]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041c2:	430a      	orrs	r2, r1
 80041c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	2380      	movs	r3, #128	@ 0x80
 80041cc:	039b      	lsls	r3, r3, #14
 80041ce:	4013      	ands	r3, r2
 80041d0:	d016      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80041d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d6:	4a35      	ldr	r2, [pc, #212]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80041d8:	4013      	ands	r3, r2
 80041da:	0019      	movs	r1, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041e0:	4b28      	ldr	r3, [pc, #160]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041e2:	430a      	orrs	r2, r1
 80041e4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041ea:	2380      	movs	r3, #128	@ 0x80
 80041ec:	03db      	lsls	r3, r3, #15
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d106      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80041f2:	4b24      	ldr	r3, [pc, #144]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	4b23      	ldr	r3, [pc, #140]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041f8:	2180      	movs	r1, #128	@ 0x80
 80041fa:	0449      	lsls	r1, r1, #17
 80041fc:	430a      	orrs	r2, r1
 80041fe:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	2380      	movs	r3, #128	@ 0x80
 8004206:	03db      	lsls	r3, r3, #15
 8004208:	4013      	ands	r3, r2
 800420a:	d016      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800420c:	4b1d      	ldr	r3, [pc, #116]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800420e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004210:	4a27      	ldr	r2, [pc, #156]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004212:	4013      	ands	r3, r2
 8004214:	0019      	movs	r1, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800421a:	4b1a      	ldr	r3, [pc, #104]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800421c:	430a      	orrs	r2, r1
 800421e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004224:	2380      	movs	r3, #128	@ 0x80
 8004226:	045b      	lsls	r3, r3, #17
 8004228:	429a      	cmp	r2, r3
 800422a:	d106      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800422c:	4b15      	ldr	r3, [pc, #84]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	4b14      	ldr	r3, [pc, #80]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004232:	2180      	movs	r1, #128	@ 0x80
 8004234:	0449      	lsls	r1, r1, #17
 8004236:	430a      	orrs	r2, r1
 8004238:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	2380      	movs	r3, #128	@ 0x80
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	4013      	ands	r3, r2
 8004244:	d016      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004246:	4b0f      	ldr	r3, [pc, #60]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424a:	4a1a      	ldr	r2, [pc, #104]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800424c:	4013      	ands	r3, r2
 800424e:	0019      	movs	r1, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	4b0b      	ldr	r3, [pc, #44]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004256:	430a      	orrs	r2, r1
 8004258:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695a      	ldr	r2, [r3, #20]
 800425e:	2380      	movs	r3, #128	@ 0x80
 8004260:	01db      	lsls	r3, r3, #7
 8004262:	429a      	cmp	r2, r3
 8004264:	d106      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004266:	4b07      	ldr	r3, [pc, #28]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800426c:	2180      	movs	r1, #128	@ 0x80
 800426e:	0249      	lsls	r1, r1, #9
 8004270:	430a      	orrs	r2, r1
 8004272:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004274:	2312      	movs	r3, #18
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	781b      	ldrb	r3, [r3, #0]
}
 800427a:	0018      	movs	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	b006      	add	sp, #24
 8004280:	bd80      	pop	{r7, pc}
 8004282:	46c0      	nop			@ (mov r8, r8)
 8004284:	40021000 	.word	0x40021000
 8004288:	40007000 	.word	0x40007000
 800428c:	fffffcff 	.word	0xfffffcff
 8004290:	fffeffff 	.word	0xfffeffff
 8004294:	00001388 	.word	0x00001388
 8004298:	efffffff 	.word	0xefffffff
 800429c:	fffff3ff 	.word	0xfffff3ff
 80042a0:	fff3ffff 	.word	0xfff3ffff
 80042a4:	ffcfffff 	.word	0xffcfffff
 80042a8:	ffffcfff 	.word	0xffffcfff
 80042ac:	ffbfffff 	.word	0xffbfffff
 80042b0:	feffffff 	.word	0xfeffffff
 80042b4:	ffff3fff 	.word	0xffff3fff

080042b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e046      	b.n	8004358 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2288      	movs	r2, #136	@ 0x88
 80042ce:	589b      	ldr	r3, [r3, r2]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d107      	bne.n	80042e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2284      	movs	r2, #132	@ 0x84
 80042d8:	2100      	movs	r1, #0
 80042da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	0018      	movs	r0, r3
 80042e0:	f7fc fbd8 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2288      	movs	r2, #136	@ 0x88
 80042e8:	2124      	movs	r1, #36	@ 0x24
 80042ea:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2101      	movs	r1, #1
 80042f8:	438a      	bics	r2, r1
 80042fa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	0018      	movs	r0, r3
 8004308:	f000 fb8e 	bl	8004a28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	0018      	movs	r0, r3
 8004310:	f000 f8cc 	bl	80044ac <UART_SetConfig>
 8004314:	0003      	movs	r3, r0
 8004316:	2b01      	cmp	r3, #1
 8004318:	d101      	bne.n	800431e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e01c      	b.n	8004358 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	490d      	ldr	r1, [pc, #52]	@ (8004360 <HAL_UART_Init+0xa8>)
 800432a:	400a      	ands	r2, r1
 800432c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	212a      	movs	r1, #42	@ 0x2a
 800433a:	438a      	bics	r2, r1
 800433c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2101      	movs	r1, #1
 800434a:	430a      	orrs	r2, r1
 800434c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	0018      	movs	r0, r3
 8004352:	f000 fc1d 	bl	8004b90 <UART_CheckIdleState>
 8004356:	0003      	movs	r3, r0
}
 8004358:	0018      	movs	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	b002      	add	sp, #8
 800435e:	bd80      	pop	{r7, pc}
 8004360:	ffffb7ff 	.word	0xffffb7ff

08004364 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b08a      	sub	sp, #40	@ 0x28
 8004368:	af02      	add	r7, sp, #8
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	603b      	str	r3, [r7, #0]
 8004370:	1dbb      	adds	r3, r7, #6
 8004372:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2288      	movs	r2, #136	@ 0x88
 8004378:	589b      	ldr	r3, [r3, r2]
 800437a:	2b20      	cmp	r3, #32
 800437c:	d000      	beq.n	8004380 <HAL_UART_Transmit+0x1c>
 800437e:	e090      	b.n	80044a2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_UART_Transmit+0x2a>
 8004386:	1dbb      	adds	r3, r7, #6
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e088      	b.n	80044a4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	2380      	movs	r3, #128	@ 0x80
 8004398:	015b      	lsls	r3, r3, #5
 800439a:	429a      	cmp	r2, r3
 800439c:	d109      	bne.n	80043b2 <HAL_UART_Transmit+0x4e>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d105      	bne.n	80043b2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2201      	movs	r2, #1
 80043aa:	4013      	ands	r3, r2
 80043ac:	d001      	beq.n	80043b2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e078      	b.n	80044a4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2290      	movs	r2, #144	@ 0x90
 80043b6:	2100      	movs	r1, #0
 80043b8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2288      	movs	r2, #136	@ 0x88
 80043be:	2121      	movs	r1, #33	@ 0x21
 80043c0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043c2:	f7fe fbbb 	bl	8002b3c <HAL_GetTick>
 80043c6:	0003      	movs	r3, r0
 80043c8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1dba      	adds	r2, r7, #6
 80043ce:	2154      	movs	r1, #84	@ 0x54
 80043d0:	8812      	ldrh	r2, [r2, #0]
 80043d2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1dba      	adds	r2, r7, #6
 80043d8:	2156      	movs	r1, #86	@ 0x56
 80043da:	8812      	ldrh	r2, [r2, #0]
 80043dc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	2380      	movs	r3, #128	@ 0x80
 80043e4:	015b      	lsls	r3, r3, #5
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d108      	bne.n	80043fc <HAL_UART_Transmit+0x98>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d104      	bne.n	80043fc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	e003      	b.n	8004404 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004400:	2300      	movs	r3, #0
 8004402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004404:	e030      	b.n	8004468 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	0013      	movs	r3, r2
 8004410:	2200      	movs	r2, #0
 8004412:	2180      	movs	r1, #128	@ 0x80
 8004414:	f000 fc66 	bl	8004ce4 <UART_WaitOnFlagUntilTimeout>
 8004418:	1e03      	subs	r3, r0, #0
 800441a:	d005      	beq.n	8004428 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2288      	movs	r2, #136	@ 0x88
 8004420:	2120      	movs	r1, #32
 8004422:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e03d      	b.n	80044a4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10b      	bne.n	8004446 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	001a      	movs	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	05d2      	lsls	r2, r2, #23
 800443a:	0dd2      	lsrs	r2, r2, #23
 800443c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	3302      	adds	r3, #2
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	e007      	b.n	8004456 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	781a      	ldrb	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	3301      	adds	r3, #1
 8004454:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2256      	movs	r2, #86	@ 0x56
 800445a:	5a9b      	ldrh	r3, [r3, r2]
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b299      	uxth	r1, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2256      	movs	r2, #86	@ 0x56
 8004466:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2256      	movs	r2, #86	@ 0x56
 800446c:	5a9b      	ldrh	r3, [r3, r2]
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1c8      	bne.n	8004406 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	0013      	movs	r3, r2
 800447e:	2200      	movs	r2, #0
 8004480:	2140      	movs	r1, #64	@ 0x40
 8004482:	f000 fc2f 	bl	8004ce4 <UART_WaitOnFlagUntilTimeout>
 8004486:	1e03      	subs	r3, r0, #0
 8004488:	d005      	beq.n	8004496 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2288      	movs	r2, #136	@ 0x88
 800448e:	2120      	movs	r1, #32
 8004490:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e006      	b.n	80044a4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2288      	movs	r2, #136	@ 0x88
 800449a:	2120      	movs	r1, #32
 800449c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	e000      	b.n	80044a4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80044a2:	2302      	movs	r3, #2
  }
}
 80044a4:	0018      	movs	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b008      	add	sp, #32
 80044aa:	bd80      	pop	{r7, pc}

080044ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044ac:	b5b0      	push	{r4, r5, r7, lr}
 80044ae:	b090      	sub	sp, #64	@ 0x40
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044b4:	231a      	movs	r3, #26
 80044b6:	2220      	movs	r2, #32
 80044b8:	189b      	adds	r3, r3, r2
 80044ba:	19db      	adds	r3, r3, r7
 80044bc:	2200      	movs	r2, #0
 80044be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4aaf      	ldr	r2, [pc, #700]	@ (800479c <UART_SetConfig+0x2f0>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	0019      	movs	r1, r3
 80044e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ea:	430b      	orrs	r3, r1
 80044ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4aaa      	ldr	r2, [pc, #680]	@ (80047a0 <UART_SetConfig+0x2f4>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	0018      	movs	r0, r3
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	68d9      	ldr	r1, [r3, #12]
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	0003      	movs	r3, r0
 8004504:	430b      	orrs	r3, r1
 8004506:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4aa4      	ldr	r2, [pc, #656]	@ (80047a4 <UART_SetConfig+0x2f8>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800451e:	4313      	orrs	r3, r2
 8004520:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	4a9f      	ldr	r2, [pc, #636]	@ (80047a8 <UART_SetConfig+0x2fc>)
 800452a:	4013      	ands	r3, r2
 800452c:	0019      	movs	r1, r3
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004534:	430b      	orrs	r3, r1
 8004536:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453e:	220f      	movs	r2, #15
 8004540:	4393      	bics	r3, r2
 8004542:	0018      	movs	r0, r3
 8004544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004546:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	0003      	movs	r3, r0
 800454e:	430b      	orrs	r3, r1
 8004550:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a95      	ldr	r2, [pc, #596]	@ (80047ac <UART_SetConfig+0x300>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d131      	bne.n	80045c0 <UART_SetConfig+0x114>
 800455c:	4b94      	ldr	r3, [pc, #592]	@ (80047b0 <UART_SetConfig+0x304>)
 800455e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004560:	2203      	movs	r2, #3
 8004562:	4013      	ands	r3, r2
 8004564:	2b03      	cmp	r3, #3
 8004566:	d01d      	beq.n	80045a4 <UART_SetConfig+0xf8>
 8004568:	d823      	bhi.n	80045b2 <UART_SetConfig+0x106>
 800456a:	2b02      	cmp	r3, #2
 800456c:	d00c      	beq.n	8004588 <UART_SetConfig+0xdc>
 800456e:	d820      	bhi.n	80045b2 <UART_SetConfig+0x106>
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <UART_SetConfig+0xce>
 8004574:	2b01      	cmp	r3, #1
 8004576:	d00e      	beq.n	8004596 <UART_SetConfig+0xea>
 8004578:	e01b      	b.n	80045b2 <UART_SetConfig+0x106>
 800457a:	231b      	movs	r3, #27
 800457c:	2220      	movs	r2, #32
 800457e:	189b      	adds	r3, r3, r2
 8004580:	19db      	adds	r3, r3, r7
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	e0b4      	b.n	80046f2 <UART_SetConfig+0x246>
 8004588:	231b      	movs	r3, #27
 800458a:	2220      	movs	r2, #32
 800458c:	189b      	adds	r3, r3, r2
 800458e:	19db      	adds	r3, r3, r7
 8004590:	2202      	movs	r2, #2
 8004592:	701a      	strb	r2, [r3, #0]
 8004594:	e0ad      	b.n	80046f2 <UART_SetConfig+0x246>
 8004596:	231b      	movs	r3, #27
 8004598:	2220      	movs	r2, #32
 800459a:	189b      	adds	r3, r3, r2
 800459c:	19db      	adds	r3, r3, r7
 800459e:	2204      	movs	r2, #4
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	e0a6      	b.n	80046f2 <UART_SetConfig+0x246>
 80045a4:	231b      	movs	r3, #27
 80045a6:	2220      	movs	r2, #32
 80045a8:	189b      	adds	r3, r3, r2
 80045aa:	19db      	adds	r3, r3, r7
 80045ac:	2208      	movs	r2, #8
 80045ae:	701a      	strb	r2, [r3, #0]
 80045b0:	e09f      	b.n	80046f2 <UART_SetConfig+0x246>
 80045b2:	231b      	movs	r3, #27
 80045b4:	2220      	movs	r2, #32
 80045b6:	189b      	adds	r3, r3, r2
 80045b8:	19db      	adds	r3, r3, r7
 80045ba:	2210      	movs	r2, #16
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	e098      	b.n	80046f2 <UART_SetConfig+0x246>
 80045c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a7b      	ldr	r2, [pc, #492]	@ (80047b4 <UART_SetConfig+0x308>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d131      	bne.n	800462e <UART_SetConfig+0x182>
 80045ca:	4b79      	ldr	r3, [pc, #484]	@ (80047b0 <UART_SetConfig+0x304>)
 80045cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ce:	220c      	movs	r2, #12
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b0c      	cmp	r3, #12
 80045d4:	d01d      	beq.n	8004612 <UART_SetConfig+0x166>
 80045d6:	d823      	bhi.n	8004620 <UART_SetConfig+0x174>
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d00c      	beq.n	80045f6 <UART_SetConfig+0x14a>
 80045dc:	d820      	bhi.n	8004620 <UART_SetConfig+0x174>
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <UART_SetConfig+0x13c>
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d00e      	beq.n	8004604 <UART_SetConfig+0x158>
 80045e6:	e01b      	b.n	8004620 <UART_SetConfig+0x174>
 80045e8:	231b      	movs	r3, #27
 80045ea:	2220      	movs	r2, #32
 80045ec:	189b      	adds	r3, r3, r2
 80045ee:	19db      	adds	r3, r3, r7
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	e07d      	b.n	80046f2 <UART_SetConfig+0x246>
 80045f6:	231b      	movs	r3, #27
 80045f8:	2220      	movs	r2, #32
 80045fa:	189b      	adds	r3, r3, r2
 80045fc:	19db      	adds	r3, r3, r7
 80045fe:	2202      	movs	r2, #2
 8004600:	701a      	strb	r2, [r3, #0]
 8004602:	e076      	b.n	80046f2 <UART_SetConfig+0x246>
 8004604:	231b      	movs	r3, #27
 8004606:	2220      	movs	r2, #32
 8004608:	189b      	adds	r3, r3, r2
 800460a:	19db      	adds	r3, r3, r7
 800460c:	2204      	movs	r2, #4
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	e06f      	b.n	80046f2 <UART_SetConfig+0x246>
 8004612:	231b      	movs	r3, #27
 8004614:	2220      	movs	r2, #32
 8004616:	189b      	adds	r3, r3, r2
 8004618:	19db      	adds	r3, r3, r7
 800461a:	2208      	movs	r2, #8
 800461c:	701a      	strb	r2, [r3, #0]
 800461e:	e068      	b.n	80046f2 <UART_SetConfig+0x246>
 8004620:	231b      	movs	r3, #27
 8004622:	2220      	movs	r2, #32
 8004624:	189b      	adds	r3, r3, r2
 8004626:	19db      	adds	r3, r3, r7
 8004628:	2210      	movs	r2, #16
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	e061      	b.n	80046f2 <UART_SetConfig+0x246>
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a61      	ldr	r2, [pc, #388]	@ (80047b8 <UART_SetConfig+0x30c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d106      	bne.n	8004646 <UART_SetConfig+0x19a>
 8004638:	231b      	movs	r3, #27
 800463a:	2220      	movs	r2, #32
 800463c:	189b      	adds	r3, r3, r2
 800463e:	19db      	adds	r3, r3, r7
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	e055      	b.n	80046f2 <UART_SetConfig+0x246>
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a5c      	ldr	r2, [pc, #368]	@ (80047bc <UART_SetConfig+0x310>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d106      	bne.n	800465e <UART_SetConfig+0x1b2>
 8004650:	231b      	movs	r3, #27
 8004652:	2220      	movs	r2, #32
 8004654:	189b      	adds	r3, r3, r2
 8004656:	19db      	adds	r3, r3, r7
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	e049      	b.n	80046f2 <UART_SetConfig+0x246>
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a50      	ldr	r2, [pc, #320]	@ (80047a4 <UART_SetConfig+0x2f8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d13e      	bne.n	80046e6 <UART_SetConfig+0x23a>
 8004668:	4b51      	ldr	r3, [pc, #324]	@ (80047b0 <UART_SetConfig+0x304>)
 800466a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800466c:	23c0      	movs	r3, #192	@ 0xc0
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	4013      	ands	r3, r2
 8004672:	22c0      	movs	r2, #192	@ 0xc0
 8004674:	0112      	lsls	r2, r2, #4
 8004676:	4293      	cmp	r3, r2
 8004678:	d027      	beq.n	80046ca <UART_SetConfig+0x21e>
 800467a:	22c0      	movs	r2, #192	@ 0xc0
 800467c:	0112      	lsls	r2, r2, #4
 800467e:	4293      	cmp	r3, r2
 8004680:	d82a      	bhi.n	80046d8 <UART_SetConfig+0x22c>
 8004682:	2280      	movs	r2, #128	@ 0x80
 8004684:	0112      	lsls	r2, r2, #4
 8004686:	4293      	cmp	r3, r2
 8004688:	d011      	beq.n	80046ae <UART_SetConfig+0x202>
 800468a:	2280      	movs	r2, #128	@ 0x80
 800468c:	0112      	lsls	r2, r2, #4
 800468e:	4293      	cmp	r3, r2
 8004690:	d822      	bhi.n	80046d8 <UART_SetConfig+0x22c>
 8004692:	2b00      	cmp	r3, #0
 8004694:	d004      	beq.n	80046a0 <UART_SetConfig+0x1f4>
 8004696:	2280      	movs	r2, #128	@ 0x80
 8004698:	00d2      	lsls	r2, r2, #3
 800469a:	4293      	cmp	r3, r2
 800469c:	d00e      	beq.n	80046bc <UART_SetConfig+0x210>
 800469e:	e01b      	b.n	80046d8 <UART_SetConfig+0x22c>
 80046a0:	231b      	movs	r3, #27
 80046a2:	2220      	movs	r2, #32
 80046a4:	189b      	adds	r3, r3, r2
 80046a6:	19db      	adds	r3, r3, r7
 80046a8:	2200      	movs	r2, #0
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	e021      	b.n	80046f2 <UART_SetConfig+0x246>
 80046ae:	231b      	movs	r3, #27
 80046b0:	2220      	movs	r2, #32
 80046b2:	189b      	adds	r3, r3, r2
 80046b4:	19db      	adds	r3, r3, r7
 80046b6:	2202      	movs	r2, #2
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	e01a      	b.n	80046f2 <UART_SetConfig+0x246>
 80046bc:	231b      	movs	r3, #27
 80046be:	2220      	movs	r2, #32
 80046c0:	189b      	adds	r3, r3, r2
 80046c2:	19db      	adds	r3, r3, r7
 80046c4:	2204      	movs	r2, #4
 80046c6:	701a      	strb	r2, [r3, #0]
 80046c8:	e013      	b.n	80046f2 <UART_SetConfig+0x246>
 80046ca:	231b      	movs	r3, #27
 80046cc:	2220      	movs	r2, #32
 80046ce:	189b      	adds	r3, r3, r2
 80046d0:	19db      	adds	r3, r3, r7
 80046d2:	2208      	movs	r2, #8
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	e00c      	b.n	80046f2 <UART_SetConfig+0x246>
 80046d8:	231b      	movs	r3, #27
 80046da:	2220      	movs	r2, #32
 80046dc:	189b      	adds	r3, r3, r2
 80046de:	19db      	adds	r3, r3, r7
 80046e0:	2210      	movs	r2, #16
 80046e2:	701a      	strb	r2, [r3, #0]
 80046e4:	e005      	b.n	80046f2 <UART_SetConfig+0x246>
 80046e6:	231b      	movs	r3, #27
 80046e8:	2220      	movs	r2, #32
 80046ea:	189b      	adds	r3, r3, r2
 80046ec:	19db      	adds	r3, r3, r7
 80046ee:	2210      	movs	r2, #16
 80046f0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a2b      	ldr	r2, [pc, #172]	@ (80047a4 <UART_SetConfig+0x2f8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d000      	beq.n	80046fe <UART_SetConfig+0x252>
 80046fc:	e0a9      	b.n	8004852 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046fe:	231b      	movs	r3, #27
 8004700:	2220      	movs	r2, #32
 8004702:	189b      	adds	r3, r3, r2
 8004704:	19db      	adds	r3, r3, r7
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b08      	cmp	r3, #8
 800470a:	d015      	beq.n	8004738 <UART_SetConfig+0x28c>
 800470c:	dc18      	bgt.n	8004740 <UART_SetConfig+0x294>
 800470e:	2b04      	cmp	r3, #4
 8004710:	d00d      	beq.n	800472e <UART_SetConfig+0x282>
 8004712:	dc15      	bgt.n	8004740 <UART_SetConfig+0x294>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <UART_SetConfig+0x272>
 8004718:	2b02      	cmp	r3, #2
 800471a:	d005      	beq.n	8004728 <UART_SetConfig+0x27c>
 800471c:	e010      	b.n	8004740 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800471e:	f7ff fbfd 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 8004722:	0003      	movs	r3, r0
 8004724:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004726:	e014      	b.n	8004752 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004728:	4b25      	ldr	r3, [pc, #148]	@ (80047c0 <UART_SetConfig+0x314>)
 800472a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800472c:	e011      	b.n	8004752 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800472e:	f7ff fb69 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8004732:	0003      	movs	r3, r0
 8004734:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004736:	e00c      	b.n	8004752 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004738:	2380      	movs	r3, #128	@ 0x80
 800473a:	021b      	lsls	r3, r3, #8
 800473c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800473e:	e008      	b.n	8004752 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004744:	231a      	movs	r3, #26
 8004746:	2220      	movs	r2, #32
 8004748:	189b      	adds	r3, r3, r2
 800474a:	19db      	adds	r3, r3, r7
 800474c:	2201      	movs	r2, #1
 800474e:	701a      	strb	r2, [r3, #0]
        break;
 8004750:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004754:	2b00      	cmp	r3, #0
 8004756:	d100      	bne.n	800475a <UART_SetConfig+0x2ae>
 8004758:	e14b      	b.n	80049f2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800475e:	4b19      	ldr	r3, [pc, #100]	@ (80047c4 <UART_SetConfig+0x318>)
 8004760:	0052      	lsls	r2, r2, #1
 8004762:	5ad3      	ldrh	r3, [r2, r3]
 8004764:	0019      	movs	r1, r3
 8004766:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004768:	f7fb fcd8 	bl	800011c <__udivsi3>
 800476c:	0003      	movs	r3, r0
 800476e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	0013      	movs	r3, r2
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	189b      	adds	r3, r3, r2
 800477a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800477c:	429a      	cmp	r2, r3
 800477e:	d305      	bcc.n	800478c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004786:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004788:	429a      	cmp	r2, r3
 800478a:	d91d      	bls.n	80047c8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800478c:	231a      	movs	r3, #26
 800478e:	2220      	movs	r2, #32
 8004790:	189b      	adds	r3, r3, r2
 8004792:	19db      	adds	r3, r3, r7
 8004794:	2201      	movs	r2, #1
 8004796:	701a      	strb	r2, [r3, #0]
 8004798:	e12b      	b.n	80049f2 <UART_SetConfig+0x546>
 800479a:	46c0      	nop			@ (mov r8, r8)
 800479c:	cfff69f3 	.word	0xcfff69f3
 80047a0:	ffffcfff 	.word	0xffffcfff
 80047a4:	40008000 	.word	0x40008000
 80047a8:	11fff4ff 	.word	0x11fff4ff
 80047ac:	40013800 	.word	0x40013800
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40004400 	.word	0x40004400
 80047b8:	40004800 	.word	0x40004800
 80047bc:	40004c00 	.word	0x40004c00
 80047c0:	00f42400 	.word	0x00f42400
 80047c4:	08005abc 	.word	0x08005abc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	2300      	movs	r3, #0
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047d4:	4b92      	ldr	r3, [pc, #584]	@ (8004a20 <UART_SetConfig+0x574>)
 80047d6:	0052      	lsls	r2, r2, #1
 80047d8:	5ad3      	ldrh	r3, [r2, r3]
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	69b8      	ldr	r0, [r7, #24]
 80047e6:	69f9      	ldr	r1, [r7, #28]
 80047e8:	f7fb fe0e 	bl	8000408 <__aeabi_uldivmod>
 80047ec:	0002      	movs	r2, r0
 80047ee:	000b      	movs	r3, r1
 80047f0:	0e11      	lsrs	r1, r2, #24
 80047f2:	021d      	lsls	r5, r3, #8
 80047f4:	430d      	orrs	r5, r1
 80047f6:	0214      	lsls	r4, r2, #8
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	085b      	lsrs	r3, r3, #1
 80047fe:	60bb      	str	r3, [r7, #8]
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68b8      	ldr	r0, [r7, #8]
 8004806:	68f9      	ldr	r1, [r7, #12]
 8004808:	1900      	adds	r0, r0, r4
 800480a:	4169      	adcs	r1, r5
 800480c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	603b      	str	r3, [r7, #0]
 8004812:	2300      	movs	r3, #0
 8004814:	607b      	str	r3, [r7, #4]
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f7fb fdf5 	bl	8000408 <__aeabi_uldivmod>
 800481e:	0002      	movs	r2, r0
 8004820:	000b      	movs	r3, r1
 8004822:	0013      	movs	r3, r2
 8004824:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004828:	23c0      	movs	r3, #192	@ 0xc0
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	429a      	cmp	r2, r3
 800482e:	d309      	bcc.n	8004844 <UART_SetConfig+0x398>
 8004830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004832:	2380      	movs	r3, #128	@ 0x80
 8004834:	035b      	lsls	r3, r3, #13
 8004836:	429a      	cmp	r2, r3
 8004838:	d204      	bcs.n	8004844 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004840:	60da      	str	r2, [r3, #12]
 8004842:	e0d6      	b.n	80049f2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004844:	231a      	movs	r3, #26
 8004846:	2220      	movs	r2, #32
 8004848:	189b      	adds	r3, r3, r2
 800484a:	19db      	adds	r3, r3, r7
 800484c:	2201      	movs	r2, #1
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	e0cf      	b.n	80049f2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	69da      	ldr	r2, [r3, #28]
 8004856:	2380      	movs	r3, #128	@ 0x80
 8004858:	021b      	lsls	r3, r3, #8
 800485a:	429a      	cmp	r2, r3
 800485c:	d000      	beq.n	8004860 <UART_SetConfig+0x3b4>
 800485e:	e070      	b.n	8004942 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004860:	231b      	movs	r3, #27
 8004862:	2220      	movs	r2, #32
 8004864:	189b      	adds	r3, r3, r2
 8004866:	19db      	adds	r3, r3, r7
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b08      	cmp	r3, #8
 800486c:	d015      	beq.n	800489a <UART_SetConfig+0x3ee>
 800486e:	dc18      	bgt.n	80048a2 <UART_SetConfig+0x3f6>
 8004870:	2b04      	cmp	r3, #4
 8004872:	d00d      	beq.n	8004890 <UART_SetConfig+0x3e4>
 8004874:	dc15      	bgt.n	80048a2 <UART_SetConfig+0x3f6>
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <UART_SetConfig+0x3d4>
 800487a:	2b02      	cmp	r3, #2
 800487c:	d005      	beq.n	800488a <UART_SetConfig+0x3de>
 800487e:	e010      	b.n	80048a2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004880:	f7ff fb4c 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 8004884:	0003      	movs	r3, r0
 8004886:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004888:	e014      	b.n	80048b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800488a:	4b66      	ldr	r3, [pc, #408]	@ (8004a24 <UART_SetConfig+0x578>)
 800488c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800488e:	e011      	b.n	80048b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004890:	f7ff fab8 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8004894:	0003      	movs	r3, r0
 8004896:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004898:	e00c      	b.n	80048b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800489a:	2380      	movs	r3, #128	@ 0x80
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048a0:	e008      	b.n	80048b4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80048a6:	231a      	movs	r3, #26
 80048a8:	2220      	movs	r2, #32
 80048aa:	189b      	adds	r3, r3, r2
 80048ac:	19db      	adds	r3, r3, r7
 80048ae:	2201      	movs	r2, #1
 80048b0:	701a      	strb	r2, [r3, #0]
        break;
 80048b2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d100      	bne.n	80048bc <UART_SetConfig+0x410>
 80048ba:	e09a      	b.n	80049f2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048c0:	4b57      	ldr	r3, [pc, #348]	@ (8004a20 <UART_SetConfig+0x574>)
 80048c2:	0052      	lsls	r2, r2, #1
 80048c4:	5ad3      	ldrh	r3, [r2, r3]
 80048c6:	0019      	movs	r1, r3
 80048c8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80048ca:	f7fb fc27 	bl	800011c <__udivsi3>
 80048ce:	0003      	movs	r3, r0
 80048d0:	005a      	lsls	r2, r3, #1
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	085b      	lsrs	r3, r3, #1
 80048d8:	18d2      	adds	r2, r2, r3
 80048da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	0019      	movs	r1, r3
 80048e0:	0010      	movs	r0, r2
 80048e2:	f7fb fc1b 	bl	800011c <__udivsi3>
 80048e6:	0003      	movs	r3, r0
 80048e8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ec:	2b0f      	cmp	r3, #15
 80048ee:	d921      	bls.n	8004934 <UART_SetConfig+0x488>
 80048f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048f2:	2380      	movs	r3, #128	@ 0x80
 80048f4:	025b      	lsls	r3, r3, #9
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d21c      	bcs.n	8004934 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	200e      	movs	r0, #14
 8004900:	2420      	movs	r4, #32
 8004902:	1903      	adds	r3, r0, r4
 8004904:	19db      	adds	r3, r3, r7
 8004906:	210f      	movs	r1, #15
 8004908:	438a      	bics	r2, r1
 800490a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800490c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	b29b      	uxth	r3, r3
 8004912:	2207      	movs	r2, #7
 8004914:	4013      	ands	r3, r2
 8004916:	b299      	uxth	r1, r3
 8004918:	1903      	adds	r3, r0, r4
 800491a:	19db      	adds	r3, r3, r7
 800491c:	1902      	adds	r2, r0, r4
 800491e:	19d2      	adds	r2, r2, r7
 8004920:	8812      	ldrh	r2, [r2, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	1902      	adds	r2, r0, r4
 800492c:	19d2      	adds	r2, r2, r7
 800492e:	8812      	ldrh	r2, [r2, #0]
 8004930:	60da      	str	r2, [r3, #12]
 8004932:	e05e      	b.n	80049f2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004934:	231a      	movs	r3, #26
 8004936:	2220      	movs	r2, #32
 8004938:	189b      	adds	r3, r3, r2
 800493a:	19db      	adds	r3, r3, r7
 800493c:	2201      	movs	r2, #1
 800493e:	701a      	strb	r2, [r3, #0]
 8004940:	e057      	b.n	80049f2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004942:	231b      	movs	r3, #27
 8004944:	2220      	movs	r2, #32
 8004946:	189b      	adds	r3, r3, r2
 8004948:	19db      	adds	r3, r3, r7
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d015      	beq.n	800497c <UART_SetConfig+0x4d0>
 8004950:	dc18      	bgt.n	8004984 <UART_SetConfig+0x4d8>
 8004952:	2b04      	cmp	r3, #4
 8004954:	d00d      	beq.n	8004972 <UART_SetConfig+0x4c6>
 8004956:	dc15      	bgt.n	8004984 <UART_SetConfig+0x4d8>
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <UART_SetConfig+0x4b6>
 800495c:	2b02      	cmp	r3, #2
 800495e:	d005      	beq.n	800496c <UART_SetConfig+0x4c0>
 8004960:	e010      	b.n	8004984 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004962:	f7ff fadb 	bl	8003f1c <HAL_RCC_GetPCLK1Freq>
 8004966:	0003      	movs	r3, r0
 8004968:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800496a:	e014      	b.n	8004996 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800496c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a24 <UART_SetConfig+0x578>)
 800496e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004970:	e011      	b.n	8004996 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004972:	f7ff fa47 	bl	8003e04 <HAL_RCC_GetSysClockFreq>
 8004976:	0003      	movs	r3, r0
 8004978:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800497a:	e00c      	b.n	8004996 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800497c:	2380      	movs	r3, #128	@ 0x80
 800497e:	021b      	lsls	r3, r3, #8
 8004980:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004982:	e008      	b.n	8004996 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004988:	231a      	movs	r3, #26
 800498a:	2220      	movs	r2, #32
 800498c:	189b      	adds	r3, r3, r2
 800498e:	19db      	adds	r3, r3, r7
 8004990:	2201      	movs	r2, #1
 8004992:	701a      	strb	r2, [r3, #0]
        break;
 8004994:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004998:	2b00      	cmp	r3, #0
 800499a:	d02a      	beq.n	80049f2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004a20 <UART_SetConfig+0x574>)
 80049a2:	0052      	lsls	r2, r2, #1
 80049a4:	5ad3      	ldrh	r3, [r2, r3]
 80049a6:	0019      	movs	r1, r3
 80049a8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80049aa:	f7fb fbb7 	bl	800011c <__udivsi3>
 80049ae:	0003      	movs	r3, r0
 80049b0:	001a      	movs	r2, r3
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	085b      	lsrs	r3, r3, #1
 80049b8:	18d2      	adds	r2, r2, r3
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	0019      	movs	r1, r3
 80049c0:	0010      	movs	r0, r2
 80049c2:	f7fb fbab 	bl	800011c <__udivsi3>
 80049c6:	0003      	movs	r3, r0
 80049c8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049cc:	2b0f      	cmp	r3, #15
 80049ce:	d90a      	bls.n	80049e6 <UART_SetConfig+0x53a>
 80049d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049d2:	2380      	movs	r3, #128	@ 0x80
 80049d4:	025b      	lsls	r3, r3, #9
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d205      	bcs.n	80049e6 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049dc:	b29a      	uxth	r2, r3
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60da      	str	r2, [r3, #12]
 80049e4:	e005      	b.n	80049f2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80049e6:	231a      	movs	r3, #26
 80049e8:	2220      	movs	r2, #32
 80049ea:	189b      	adds	r3, r3, r2
 80049ec:	19db      	adds	r3, r3, r7
 80049ee:	2201      	movs	r2, #1
 80049f0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	226a      	movs	r2, #106	@ 0x6a
 80049f6:	2101      	movs	r1, #1
 80049f8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fc:	2268      	movs	r2, #104	@ 0x68
 80049fe:	2101      	movs	r1, #1
 8004a00:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a04:	2200      	movs	r2, #0
 8004a06:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004a0e:	231a      	movs	r3, #26
 8004a10:	2220      	movs	r2, #32
 8004a12:	189b      	adds	r3, r3, r2
 8004a14:	19db      	adds	r3, r3, r7
 8004a16:	781b      	ldrb	r3, [r3, #0]
}
 8004a18:	0018      	movs	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b010      	add	sp, #64	@ 0x40
 8004a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8004a20:	08005abc 	.word	0x08005abc
 8004a24:	00f42400 	.word	0x00f42400

08004a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a34:	2208      	movs	r2, #8
 8004a36:	4013      	ands	r3, r2
 8004a38:	d00b      	beq.n	8004a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4a4a      	ldr	r2, [pc, #296]	@ (8004b6c <UART_AdvFeatureConfig+0x144>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	0019      	movs	r1, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a56:	2201      	movs	r2, #1
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d00b      	beq.n	8004a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	4a43      	ldr	r2, [pc, #268]	@ (8004b70 <UART_AdvFeatureConfig+0x148>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	0019      	movs	r1, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a78:	2202      	movs	r2, #2
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d00b      	beq.n	8004a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	4a3b      	ldr	r2, [pc, #236]	@ (8004b74 <UART_AdvFeatureConfig+0x14c>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	0019      	movs	r1, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9a:	2204      	movs	r2, #4
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d00b      	beq.n	8004ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	4a34      	ldr	r2, [pc, #208]	@ (8004b78 <UART_AdvFeatureConfig+0x150>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	0019      	movs	r1, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004abc:	2210      	movs	r2, #16
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d00b      	beq.n	8004ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	4a2c      	ldr	r2, [pc, #176]	@ (8004b7c <UART_AdvFeatureConfig+0x154>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	0019      	movs	r1, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ade:	2220      	movs	r2, #32
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	d00b      	beq.n	8004afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	4a25      	ldr	r2, [pc, #148]	@ (8004b80 <UART_AdvFeatureConfig+0x158>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	0019      	movs	r1, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b00:	2240      	movs	r2, #64	@ 0x40
 8004b02:	4013      	ands	r3, r2
 8004b04:	d01d      	beq.n	8004b42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004b84 <UART_AdvFeatureConfig+0x15c>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	0019      	movs	r1, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b22:	2380      	movs	r3, #128	@ 0x80
 8004b24:	035b      	lsls	r3, r3, #13
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d10b      	bne.n	8004b42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	4a15      	ldr	r2, [pc, #84]	@ (8004b88 <UART_AdvFeatureConfig+0x160>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	0019      	movs	r1, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b46:	2280      	movs	r2, #128	@ 0x80
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d00b      	beq.n	8004b64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	4a0e      	ldr	r2, [pc, #56]	@ (8004b8c <UART_AdvFeatureConfig+0x164>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	0019      	movs	r1, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	605a      	str	r2, [r3, #4]
  }
}
 8004b64:	46c0      	nop			@ (mov r8, r8)
 8004b66:	46bd      	mov	sp, r7
 8004b68:	b002      	add	sp, #8
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	ffff7fff 	.word	0xffff7fff
 8004b70:	fffdffff 	.word	0xfffdffff
 8004b74:	fffeffff 	.word	0xfffeffff
 8004b78:	fffbffff 	.word	0xfffbffff
 8004b7c:	ffffefff 	.word	0xffffefff
 8004b80:	ffffdfff 	.word	0xffffdfff
 8004b84:	ffefffff 	.word	0xffefffff
 8004b88:	ff9fffff 	.word	0xff9fffff
 8004b8c:	fff7ffff 	.word	0xfff7ffff

08004b90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b092      	sub	sp, #72	@ 0x48
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2290      	movs	r2, #144	@ 0x90
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ba0:	f7fd ffcc 	bl	8002b3c <HAL_GetTick>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2208      	movs	r2, #8
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d12d      	bne.n	8004c12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bb8:	2280      	movs	r2, #128	@ 0x80
 8004bba:	0391      	lsls	r1, r2, #14
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	4a47      	ldr	r2, [pc, #284]	@ (8004cdc <UART_CheckIdleState+0x14c>)
 8004bc0:	9200      	str	r2, [sp, #0]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f000 f88e 	bl	8004ce4 <UART_WaitOnFlagUntilTimeout>
 8004bc8:	1e03      	subs	r3, r0, #0
 8004bca:	d022      	beq.n	8004c12 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8004bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bdc:	f383 8810 	msr	PRIMASK, r3
}
 8004be0:	46c0      	nop			@ (mov r8, r8)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2180      	movs	r1, #128	@ 0x80
 8004bee:	438a      	bics	r2, r1
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf8:	f383 8810 	msr	PRIMASK, r3
}
 8004bfc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2288      	movs	r2, #136	@ 0x88
 8004c02:	2120      	movs	r1, #32
 8004c04:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2284      	movs	r2, #132	@ 0x84
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e060      	b.n	8004cd4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2204      	movs	r2, #4
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d146      	bne.n	8004cae <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c22:	2280      	movs	r2, #128	@ 0x80
 8004c24:	03d1      	lsls	r1, r2, #15
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	4a2c      	ldr	r2, [pc, #176]	@ (8004cdc <UART_CheckIdleState+0x14c>)
 8004c2a:	9200      	str	r2, [sp, #0]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f000 f859 	bl	8004ce4 <UART_WaitOnFlagUntilTimeout>
 8004c32:	1e03      	subs	r3, r0, #0
 8004c34:	d03b      	beq.n	8004cae <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c36:	f3ef 8310 	mrs	r3, PRIMASK
 8004c3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c40:	2301      	movs	r3, #1
 8004c42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f383 8810 	msr	PRIMASK, r3
}
 8004c4a:	46c0      	nop			@ (mov r8, r8)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4922      	ldr	r1, [pc, #136]	@ (8004ce0 <UART_CheckIdleState+0x150>)
 8004c58:	400a      	ands	r2, r1
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f383 8810 	msr	PRIMASK, r3
}
 8004c66:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c68:	f3ef 8310 	mrs	r3, PRIMASK
 8004c6c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c6e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c70:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c72:	2301      	movs	r3, #1
 8004c74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	f383 8810 	msr	PRIMASK, r3
}
 8004c7c:	46c0      	nop			@ (mov r8, r8)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2101      	movs	r1, #1
 8004c8a:	438a      	bics	r2, r1
 8004c8c:	609a      	str	r2, [r3, #8]
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	f383 8810 	msr	PRIMASK, r3
}
 8004c98:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	228c      	movs	r2, #140	@ 0x8c
 8004c9e:	2120      	movs	r1, #32
 8004ca0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2284      	movs	r2, #132	@ 0x84
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e012      	b.n	8004cd4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2288      	movs	r2, #136	@ 0x88
 8004cb2:	2120      	movs	r1, #32
 8004cb4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	228c      	movs	r2, #140	@ 0x8c
 8004cba:	2120      	movs	r1, #32
 8004cbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2284      	movs	r2, #132	@ 0x84
 8004cce:	2100      	movs	r1, #0
 8004cd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	b010      	add	sp, #64	@ 0x40
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	01ffffff 	.word	0x01ffffff
 8004ce0:	fffffedf 	.word	0xfffffedf

08004ce4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	603b      	str	r3, [r7, #0]
 8004cf0:	1dfb      	adds	r3, r7, #7
 8004cf2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf4:	e051      	b.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	d04e      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfc:	f7fd ff1e 	bl	8002b3c <HAL_GetTick>
 8004d00:	0002      	movs	r2, r0
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d302      	bcc.n	8004d12 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e051      	b.n	8004dba <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d03b      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b80      	cmp	r3, #128	@ 0x80
 8004d26:	d038      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b40      	cmp	r3, #64	@ 0x40
 8004d2c:	d035      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	2208      	movs	r2, #8
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d111      	bne.n	8004d60 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2208      	movs	r2, #8
 8004d42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	0018      	movs	r0, r3
 8004d48:	f000 f83c 	bl	8004dc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2290      	movs	r2, #144	@ 0x90
 8004d50:	2108      	movs	r1, #8
 8004d52:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2284      	movs	r2, #132	@ 0x84
 8004d58:	2100      	movs	r1, #0
 8004d5a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e02c      	b.n	8004dba <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	69da      	ldr	r2, [r3, #28]
 8004d66:	2380      	movs	r3, #128	@ 0x80
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	401a      	ands	r2, r3
 8004d6c:	2380      	movs	r3, #128	@ 0x80
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d112      	bne.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2280      	movs	r2, #128	@ 0x80
 8004d7a:	0112      	lsls	r2, r2, #4
 8004d7c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	0018      	movs	r0, r3
 8004d82:	f000 f81f 	bl	8004dc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2290      	movs	r2, #144	@ 0x90
 8004d8a:	2120      	movs	r1, #32
 8004d8c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2284      	movs	r2, #132	@ 0x84
 8004d92:	2100      	movs	r1, #0
 8004d94:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e00f      	b.n	8004dba <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	4013      	ands	r3, r2
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	425a      	negs	r2, r3
 8004daa:	4153      	adcs	r3, r2
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	001a      	movs	r2, r3
 8004db0:	1dfb      	adds	r3, r7, #7
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d09e      	beq.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	0018      	movs	r0, r3
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	b004      	add	sp, #16
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08e      	sub	sp, #56	@ 0x38
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd0:	617b      	str	r3, [r7, #20]
  return(result);
 8004dd2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f383 8810 	msr	PRIMASK, r3
}
 8004de0:	46c0      	nop			@ (mov r8, r8)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4926      	ldr	r1, [pc, #152]	@ (8004e88 <UART_EndRxTransfer+0xc4>)
 8004dee:	400a      	ands	r2, r1
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	f383 8810 	msr	PRIMASK, r3
}
 8004dfc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8004e02:	623b      	str	r3, [r7, #32]
  return(result);
 8004e04:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e06:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e08:	2301      	movs	r3, #1
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	f383 8810 	msr	PRIMASK, r3
}
 8004e12:	46c0      	nop			@ (mov r8, r8)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	491b      	ldr	r1, [pc, #108]	@ (8004e8c <UART_EndRxTransfer+0xc8>)
 8004e20:	400a      	ands	r2, r1
 8004e22:	609a      	str	r2, [r3, #8]
 8004e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e26:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2a:	f383 8810 	msr	PRIMASK, r3
}
 8004e2e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d118      	bne.n	8004e6a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e38:	f3ef 8310 	mrs	r3, PRIMASK
 8004e3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e3e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e42:	2301      	movs	r3, #1
 8004e44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f383 8810 	msr	PRIMASK, r3
}
 8004e4c:	46c0      	nop			@ (mov r8, r8)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2110      	movs	r1, #16
 8004e5a:	438a      	bics	r2, r1
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f383 8810 	msr	PRIMASK, r3
}
 8004e68:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	228c      	movs	r2, #140	@ 0x8c
 8004e6e:	2120      	movs	r1, #32
 8004e70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004e7e:	46c0      	nop			@ (mov r8, r8)
 8004e80:	46bd      	mov	sp, r7
 8004e82:	b00e      	add	sp, #56	@ 0x38
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	46c0      	nop			@ (mov r8, r8)
 8004e88:	fffffedf 	.word	0xfffffedf
 8004e8c:	effffffe 	.word	0xeffffffe

08004e90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2284      	movs	r2, #132	@ 0x84
 8004e9c:	5c9b      	ldrb	r3, [r3, r2]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_UARTEx_DisableFifoMode+0x16>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e027      	b.n	8004ef6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2284      	movs	r2, #132	@ 0x84
 8004eaa:	2101      	movs	r1, #1
 8004eac:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2288      	movs	r2, #136	@ 0x88
 8004eb2:	2124      	movs	r1, #36	@ 0x24
 8004eb4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2101      	movs	r1, #1
 8004eca:	438a      	bics	r2, r1
 8004ecc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8004f00 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2288      	movs	r2, #136	@ 0x88
 8004ee8:	2120      	movs	r1, #32
 8004eea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2284      	movs	r2, #132	@ 0x84
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b004      	add	sp, #16
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	46c0      	nop			@ (mov r8, r8)
 8004f00:	dfffffff 	.word	0xdfffffff

08004f04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2284      	movs	r2, #132	@ 0x84
 8004f12:	5c9b      	ldrb	r3, [r3, r2]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e02e      	b.n	8004f7a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2284      	movs	r2, #132	@ 0x84
 8004f20:	2101      	movs	r1, #1
 8004f22:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2288      	movs	r2, #136	@ 0x88
 8004f28:	2124      	movs	r1, #36	@ 0x24
 8004f2a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2101      	movs	r1, #1
 8004f40:	438a      	bics	r2, r1
 8004f42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	08d9      	lsrs	r1, r3, #3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f000 f854 	bl	8005008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2288      	movs	r2, #136	@ 0x88
 8004f6c:	2120      	movs	r1, #32
 8004f6e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2284      	movs	r2, #132	@ 0x84
 8004f74:	2100      	movs	r1, #0
 8004f76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	b004      	add	sp, #16
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2284      	movs	r2, #132	@ 0x84
 8004f92:	5c9b      	ldrb	r3, [r3, r2]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e02f      	b.n	8004ffc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2284      	movs	r2, #132	@ 0x84
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2288      	movs	r2, #136	@ 0x88
 8004fa8:	2124      	movs	r1, #36	@ 0x24
 8004faa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	438a      	bics	r2, r1
 8004fc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	4a0e      	ldr	r2, [pc, #56]	@ (8005004 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	0019      	movs	r1, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f000 f813 	bl	8005008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2288      	movs	r2, #136	@ 0x88
 8004fee:	2120      	movs	r1, #32
 8004ff0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2284      	movs	r2, #132	@ 0x84
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	b004      	add	sp, #16
 8005002:	bd80      	pop	{r7, pc}
 8005004:	f1ffffff 	.word	0xf1ffffff

08005008 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005014:	2b00      	cmp	r3, #0
 8005016:	d108      	bne.n	800502a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	226a      	movs	r2, #106	@ 0x6a
 800501c:	2101      	movs	r1, #1
 800501e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2268      	movs	r2, #104	@ 0x68
 8005024:	2101      	movs	r1, #1
 8005026:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005028:	e043      	b.n	80050b2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800502a:	260f      	movs	r6, #15
 800502c:	19bb      	adds	r3, r7, r6
 800502e:	2208      	movs	r2, #8
 8005030:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005032:	200e      	movs	r0, #14
 8005034:	183b      	adds	r3, r7, r0
 8005036:	2208      	movs	r2, #8
 8005038:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	0e5b      	lsrs	r3, r3, #25
 8005042:	b2da      	uxtb	r2, r3
 8005044:	240d      	movs	r4, #13
 8005046:	193b      	adds	r3, r7, r4
 8005048:	2107      	movs	r1, #7
 800504a:	400a      	ands	r2, r1
 800504c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	0f5b      	lsrs	r3, r3, #29
 8005056:	b2da      	uxtb	r2, r3
 8005058:	250c      	movs	r5, #12
 800505a:	197b      	adds	r3, r7, r5
 800505c:	2107      	movs	r1, #7
 800505e:	400a      	ands	r2, r1
 8005060:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005062:	183b      	adds	r3, r7, r0
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	197a      	adds	r2, r7, r5
 8005068:	7812      	ldrb	r2, [r2, #0]
 800506a:	4914      	ldr	r1, [pc, #80]	@ (80050bc <UARTEx_SetNbDataToProcess+0xb4>)
 800506c:	5c8a      	ldrb	r2, [r1, r2]
 800506e:	435a      	muls	r2, r3
 8005070:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005072:	197b      	adds	r3, r7, r5
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	4a12      	ldr	r2, [pc, #72]	@ (80050c0 <UARTEx_SetNbDataToProcess+0xb8>)
 8005078:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800507a:	0019      	movs	r1, r3
 800507c:	f7fb f8d8 	bl	8000230 <__divsi3>
 8005080:	0003      	movs	r3, r0
 8005082:	b299      	uxth	r1, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	226a      	movs	r2, #106	@ 0x6a
 8005088:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800508a:	19bb      	adds	r3, r7, r6
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	193a      	adds	r2, r7, r4
 8005090:	7812      	ldrb	r2, [r2, #0]
 8005092:	490a      	ldr	r1, [pc, #40]	@ (80050bc <UARTEx_SetNbDataToProcess+0xb4>)
 8005094:	5c8a      	ldrb	r2, [r1, r2]
 8005096:	435a      	muls	r2, r3
 8005098:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800509a:	193b      	adds	r3, r7, r4
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	4a08      	ldr	r2, [pc, #32]	@ (80050c0 <UARTEx_SetNbDataToProcess+0xb8>)
 80050a0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050a2:	0019      	movs	r1, r3
 80050a4:	f7fb f8c4 	bl	8000230 <__divsi3>
 80050a8:	0003      	movs	r3, r0
 80050aa:	b299      	uxth	r1, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2268      	movs	r2, #104	@ 0x68
 80050b0:	5299      	strh	r1, [r3, r2]
}
 80050b2:	46c0      	nop			@ (mov r8, r8)
 80050b4:	46bd      	mov	sp, r7
 80050b6:	b005      	add	sp, #20
 80050b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ba:	46c0      	nop			@ (mov r8, r8)
 80050bc:	08005ad4 	.word	0x08005ad4
 80050c0:	08005adc 	.word	0x08005adc

080050c4 <siprintf>:
 80050c4:	b40e      	push	{r1, r2, r3}
 80050c6:	b500      	push	{lr}
 80050c8:	490b      	ldr	r1, [pc, #44]	@ (80050f8 <siprintf+0x34>)
 80050ca:	b09c      	sub	sp, #112	@ 0x70
 80050cc:	ab1d      	add	r3, sp, #116	@ 0x74
 80050ce:	9002      	str	r0, [sp, #8]
 80050d0:	9006      	str	r0, [sp, #24]
 80050d2:	9107      	str	r1, [sp, #28]
 80050d4:	9104      	str	r1, [sp, #16]
 80050d6:	4809      	ldr	r0, [pc, #36]	@ (80050fc <siprintf+0x38>)
 80050d8:	4909      	ldr	r1, [pc, #36]	@ (8005100 <siprintf+0x3c>)
 80050da:	cb04      	ldmia	r3!, {r2}
 80050dc:	9105      	str	r1, [sp, #20]
 80050de:	6800      	ldr	r0, [r0, #0]
 80050e0:	a902      	add	r1, sp, #8
 80050e2:	9301      	str	r3, [sp, #4]
 80050e4:	f000 f99e 	bl	8005424 <_svfiprintf_r>
 80050e8:	2200      	movs	r2, #0
 80050ea:	9b02      	ldr	r3, [sp, #8]
 80050ec:	701a      	strb	r2, [r3, #0]
 80050ee:	b01c      	add	sp, #112	@ 0x70
 80050f0:	bc08      	pop	{r3}
 80050f2:	b003      	add	sp, #12
 80050f4:	4718      	bx	r3
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	7fffffff 	.word	0x7fffffff
 80050fc:	20000010 	.word	0x20000010
 8005100:	ffff0208 	.word	0xffff0208

08005104 <memset>:
 8005104:	0003      	movs	r3, r0
 8005106:	1882      	adds	r2, r0, r2
 8005108:	4293      	cmp	r3, r2
 800510a:	d100      	bne.n	800510e <memset+0xa>
 800510c:	4770      	bx	lr
 800510e:	7019      	strb	r1, [r3, #0]
 8005110:	3301      	adds	r3, #1
 8005112:	e7f9      	b.n	8005108 <memset+0x4>

08005114 <__errno>:
 8005114:	4b01      	ldr	r3, [pc, #4]	@ (800511c <__errno+0x8>)
 8005116:	6818      	ldr	r0, [r3, #0]
 8005118:	4770      	bx	lr
 800511a:	46c0      	nop			@ (mov r8, r8)
 800511c:	20000010 	.word	0x20000010

08005120 <__libc_init_array>:
 8005120:	b570      	push	{r4, r5, r6, lr}
 8005122:	2600      	movs	r6, #0
 8005124:	4c0c      	ldr	r4, [pc, #48]	@ (8005158 <__libc_init_array+0x38>)
 8005126:	4d0d      	ldr	r5, [pc, #52]	@ (800515c <__libc_init_array+0x3c>)
 8005128:	1b64      	subs	r4, r4, r5
 800512a:	10a4      	asrs	r4, r4, #2
 800512c:	42a6      	cmp	r6, r4
 800512e:	d109      	bne.n	8005144 <__libc_init_array+0x24>
 8005130:	2600      	movs	r6, #0
 8005132:	f000 fc65 	bl	8005a00 <_init>
 8005136:	4c0a      	ldr	r4, [pc, #40]	@ (8005160 <__libc_init_array+0x40>)
 8005138:	4d0a      	ldr	r5, [pc, #40]	@ (8005164 <__libc_init_array+0x44>)
 800513a:	1b64      	subs	r4, r4, r5
 800513c:	10a4      	asrs	r4, r4, #2
 800513e:	42a6      	cmp	r6, r4
 8005140:	d105      	bne.n	800514e <__libc_init_array+0x2e>
 8005142:	bd70      	pop	{r4, r5, r6, pc}
 8005144:	00b3      	lsls	r3, r6, #2
 8005146:	58eb      	ldr	r3, [r5, r3]
 8005148:	4798      	blx	r3
 800514a:	3601      	adds	r6, #1
 800514c:	e7ee      	b.n	800512c <__libc_init_array+0xc>
 800514e:	00b3      	lsls	r3, r6, #2
 8005150:	58eb      	ldr	r3, [r5, r3]
 8005152:	4798      	blx	r3
 8005154:	3601      	adds	r6, #1
 8005156:	e7f2      	b.n	800513e <__libc_init_array+0x1e>
 8005158:	08005b20 	.word	0x08005b20
 800515c:	08005b20 	.word	0x08005b20
 8005160:	08005b24 	.word	0x08005b24
 8005164:	08005b20 	.word	0x08005b20

08005168 <__retarget_lock_acquire_recursive>:
 8005168:	4770      	bx	lr

0800516a <__retarget_lock_release_recursive>:
 800516a:	4770      	bx	lr

0800516c <_free_r>:
 800516c:	b570      	push	{r4, r5, r6, lr}
 800516e:	0005      	movs	r5, r0
 8005170:	1e0c      	subs	r4, r1, #0
 8005172:	d010      	beq.n	8005196 <_free_r+0x2a>
 8005174:	3c04      	subs	r4, #4
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	da00      	bge.n	800517e <_free_r+0x12>
 800517c:	18e4      	adds	r4, r4, r3
 800517e:	0028      	movs	r0, r5
 8005180:	f000 f8e0 	bl	8005344 <__malloc_lock>
 8005184:	4a1d      	ldr	r2, [pc, #116]	@ (80051fc <_free_r+0x90>)
 8005186:	6813      	ldr	r3, [r2, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d105      	bne.n	8005198 <_free_r+0x2c>
 800518c:	6063      	str	r3, [r4, #4]
 800518e:	6014      	str	r4, [r2, #0]
 8005190:	0028      	movs	r0, r5
 8005192:	f000 f8df 	bl	8005354 <__malloc_unlock>
 8005196:	bd70      	pop	{r4, r5, r6, pc}
 8005198:	42a3      	cmp	r3, r4
 800519a:	d908      	bls.n	80051ae <_free_r+0x42>
 800519c:	6820      	ldr	r0, [r4, #0]
 800519e:	1821      	adds	r1, r4, r0
 80051a0:	428b      	cmp	r3, r1
 80051a2:	d1f3      	bne.n	800518c <_free_r+0x20>
 80051a4:	6819      	ldr	r1, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	1809      	adds	r1, r1, r0
 80051aa:	6021      	str	r1, [r4, #0]
 80051ac:	e7ee      	b.n	800518c <_free_r+0x20>
 80051ae:	001a      	movs	r2, r3
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <_free_r+0x4e>
 80051b6:	42a3      	cmp	r3, r4
 80051b8:	d9f9      	bls.n	80051ae <_free_r+0x42>
 80051ba:	6811      	ldr	r1, [r2, #0]
 80051bc:	1850      	adds	r0, r2, r1
 80051be:	42a0      	cmp	r0, r4
 80051c0:	d10b      	bne.n	80051da <_free_r+0x6e>
 80051c2:	6820      	ldr	r0, [r4, #0]
 80051c4:	1809      	adds	r1, r1, r0
 80051c6:	1850      	adds	r0, r2, r1
 80051c8:	6011      	str	r1, [r2, #0]
 80051ca:	4283      	cmp	r3, r0
 80051cc:	d1e0      	bne.n	8005190 <_free_r+0x24>
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	1841      	adds	r1, r0, r1
 80051d4:	6011      	str	r1, [r2, #0]
 80051d6:	6053      	str	r3, [r2, #4]
 80051d8:	e7da      	b.n	8005190 <_free_r+0x24>
 80051da:	42a0      	cmp	r0, r4
 80051dc:	d902      	bls.n	80051e4 <_free_r+0x78>
 80051de:	230c      	movs	r3, #12
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	e7d5      	b.n	8005190 <_free_r+0x24>
 80051e4:	6820      	ldr	r0, [r4, #0]
 80051e6:	1821      	adds	r1, r4, r0
 80051e8:	428b      	cmp	r3, r1
 80051ea:	d103      	bne.n	80051f4 <_free_r+0x88>
 80051ec:	6819      	ldr	r1, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	1809      	adds	r1, r1, r0
 80051f2:	6021      	str	r1, [r4, #0]
 80051f4:	6063      	str	r3, [r4, #4]
 80051f6:	6054      	str	r4, [r2, #4]
 80051f8:	e7ca      	b.n	8005190 <_free_r+0x24>
 80051fa:	46c0      	nop			@ (mov r8, r8)
 80051fc:	20000330 	.word	0x20000330

08005200 <sbrk_aligned>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	4e0f      	ldr	r6, [pc, #60]	@ (8005240 <sbrk_aligned+0x40>)
 8005204:	000d      	movs	r5, r1
 8005206:	6831      	ldr	r1, [r6, #0]
 8005208:	0004      	movs	r4, r0
 800520a:	2900      	cmp	r1, #0
 800520c:	d102      	bne.n	8005214 <sbrk_aligned+0x14>
 800520e:	f000 fb99 	bl	8005944 <_sbrk_r>
 8005212:	6030      	str	r0, [r6, #0]
 8005214:	0029      	movs	r1, r5
 8005216:	0020      	movs	r0, r4
 8005218:	f000 fb94 	bl	8005944 <_sbrk_r>
 800521c:	1c43      	adds	r3, r0, #1
 800521e:	d103      	bne.n	8005228 <sbrk_aligned+0x28>
 8005220:	2501      	movs	r5, #1
 8005222:	426d      	negs	r5, r5
 8005224:	0028      	movs	r0, r5
 8005226:	bd70      	pop	{r4, r5, r6, pc}
 8005228:	2303      	movs	r3, #3
 800522a:	1cc5      	adds	r5, r0, #3
 800522c:	439d      	bics	r5, r3
 800522e:	42a8      	cmp	r0, r5
 8005230:	d0f8      	beq.n	8005224 <sbrk_aligned+0x24>
 8005232:	1a29      	subs	r1, r5, r0
 8005234:	0020      	movs	r0, r4
 8005236:	f000 fb85 	bl	8005944 <_sbrk_r>
 800523a:	3001      	adds	r0, #1
 800523c:	d1f2      	bne.n	8005224 <sbrk_aligned+0x24>
 800523e:	e7ef      	b.n	8005220 <sbrk_aligned+0x20>
 8005240:	2000032c 	.word	0x2000032c

08005244 <_malloc_r>:
 8005244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005246:	2203      	movs	r2, #3
 8005248:	1ccb      	adds	r3, r1, #3
 800524a:	4393      	bics	r3, r2
 800524c:	3308      	adds	r3, #8
 800524e:	0005      	movs	r5, r0
 8005250:	001f      	movs	r7, r3
 8005252:	2b0c      	cmp	r3, #12
 8005254:	d234      	bcs.n	80052c0 <_malloc_r+0x7c>
 8005256:	270c      	movs	r7, #12
 8005258:	42b9      	cmp	r1, r7
 800525a:	d833      	bhi.n	80052c4 <_malloc_r+0x80>
 800525c:	0028      	movs	r0, r5
 800525e:	f000 f871 	bl	8005344 <__malloc_lock>
 8005262:	4e37      	ldr	r6, [pc, #220]	@ (8005340 <_malloc_r+0xfc>)
 8005264:	6833      	ldr	r3, [r6, #0]
 8005266:	001c      	movs	r4, r3
 8005268:	2c00      	cmp	r4, #0
 800526a:	d12f      	bne.n	80052cc <_malloc_r+0x88>
 800526c:	0039      	movs	r1, r7
 800526e:	0028      	movs	r0, r5
 8005270:	f7ff ffc6 	bl	8005200 <sbrk_aligned>
 8005274:	0004      	movs	r4, r0
 8005276:	1c43      	adds	r3, r0, #1
 8005278:	d15f      	bne.n	800533a <_malloc_r+0xf6>
 800527a:	6834      	ldr	r4, [r6, #0]
 800527c:	9400      	str	r4, [sp, #0]
 800527e:	9b00      	ldr	r3, [sp, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d14a      	bne.n	800531a <_malloc_r+0xd6>
 8005284:	2c00      	cmp	r4, #0
 8005286:	d052      	beq.n	800532e <_malloc_r+0xea>
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	0028      	movs	r0, r5
 800528c:	18e3      	adds	r3, r4, r3
 800528e:	9900      	ldr	r1, [sp, #0]
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	f000 fb57 	bl	8005944 <_sbrk_r>
 8005296:	9b01      	ldr	r3, [sp, #4]
 8005298:	4283      	cmp	r3, r0
 800529a:	d148      	bne.n	800532e <_malloc_r+0xea>
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	0028      	movs	r0, r5
 80052a0:	1aff      	subs	r7, r7, r3
 80052a2:	0039      	movs	r1, r7
 80052a4:	f7ff ffac 	bl	8005200 <sbrk_aligned>
 80052a8:	3001      	adds	r0, #1
 80052aa:	d040      	beq.n	800532e <_malloc_r+0xea>
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	19db      	adds	r3, r3, r7
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	6833      	ldr	r3, [r6, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	2a00      	cmp	r2, #0
 80052b8:	d133      	bne.n	8005322 <_malloc_r+0xde>
 80052ba:	9b00      	ldr	r3, [sp, #0]
 80052bc:	6033      	str	r3, [r6, #0]
 80052be:	e019      	b.n	80052f4 <_malloc_r+0xb0>
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	dac9      	bge.n	8005258 <_malloc_r+0x14>
 80052c4:	230c      	movs	r3, #12
 80052c6:	602b      	str	r3, [r5, #0]
 80052c8:	2000      	movs	r0, #0
 80052ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80052cc:	6821      	ldr	r1, [r4, #0]
 80052ce:	1bc9      	subs	r1, r1, r7
 80052d0:	d420      	bmi.n	8005314 <_malloc_r+0xd0>
 80052d2:	290b      	cmp	r1, #11
 80052d4:	d90a      	bls.n	80052ec <_malloc_r+0xa8>
 80052d6:	19e2      	adds	r2, r4, r7
 80052d8:	6027      	str	r7, [r4, #0]
 80052da:	42a3      	cmp	r3, r4
 80052dc:	d104      	bne.n	80052e8 <_malloc_r+0xa4>
 80052de:	6032      	str	r2, [r6, #0]
 80052e0:	6863      	ldr	r3, [r4, #4]
 80052e2:	6011      	str	r1, [r2, #0]
 80052e4:	6053      	str	r3, [r2, #4]
 80052e6:	e005      	b.n	80052f4 <_malloc_r+0xb0>
 80052e8:	605a      	str	r2, [r3, #4]
 80052ea:	e7f9      	b.n	80052e0 <_malloc_r+0x9c>
 80052ec:	6862      	ldr	r2, [r4, #4]
 80052ee:	42a3      	cmp	r3, r4
 80052f0:	d10e      	bne.n	8005310 <_malloc_r+0xcc>
 80052f2:	6032      	str	r2, [r6, #0]
 80052f4:	0028      	movs	r0, r5
 80052f6:	f000 f82d 	bl	8005354 <__malloc_unlock>
 80052fa:	0020      	movs	r0, r4
 80052fc:	2207      	movs	r2, #7
 80052fe:	300b      	adds	r0, #11
 8005300:	1d23      	adds	r3, r4, #4
 8005302:	4390      	bics	r0, r2
 8005304:	1ac2      	subs	r2, r0, r3
 8005306:	4298      	cmp	r0, r3
 8005308:	d0df      	beq.n	80052ca <_malloc_r+0x86>
 800530a:	1a1b      	subs	r3, r3, r0
 800530c:	50a3      	str	r3, [r4, r2]
 800530e:	e7dc      	b.n	80052ca <_malloc_r+0x86>
 8005310:	605a      	str	r2, [r3, #4]
 8005312:	e7ef      	b.n	80052f4 <_malloc_r+0xb0>
 8005314:	0023      	movs	r3, r4
 8005316:	6864      	ldr	r4, [r4, #4]
 8005318:	e7a6      	b.n	8005268 <_malloc_r+0x24>
 800531a:	9c00      	ldr	r4, [sp, #0]
 800531c:	6863      	ldr	r3, [r4, #4]
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	e7ad      	b.n	800527e <_malloc_r+0x3a>
 8005322:	001a      	movs	r2, r3
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	42a3      	cmp	r3, r4
 8005328:	d1fb      	bne.n	8005322 <_malloc_r+0xde>
 800532a:	2300      	movs	r3, #0
 800532c:	e7da      	b.n	80052e4 <_malloc_r+0xa0>
 800532e:	230c      	movs	r3, #12
 8005330:	0028      	movs	r0, r5
 8005332:	602b      	str	r3, [r5, #0]
 8005334:	f000 f80e 	bl	8005354 <__malloc_unlock>
 8005338:	e7c6      	b.n	80052c8 <_malloc_r+0x84>
 800533a:	6007      	str	r7, [r0, #0]
 800533c:	e7da      	b.n	80052f4 <_malloc_r+0xb0>
 800533e:	46c0      	nop			@ (mov r8, r8)
 8005340:	20000330 	.word	0x20000330

08005344 <__malloc_lock>:
 8005344:	b510      	push	{r4, lr}
 8005346:	4802      	ldr	r0, [pc, #8]	@ (8005350 <__malloc_lock+0xc>)
 8005348:	f7ff ff0e 	bl	8005168 <__retarget_lock_acquire_recursive>
 800534c:	bd10      	pop	{r4, pc}
 800534e:	46c0      	nop			@ (mov r8, r8)
 8005350:	20000328 	.word	0x20000328

08005354 <__malloc_unlock>:
 8005354:	b510      	push	{r4, lr}
 8005356:	4802      	ldr	r0, [pc, #8]	@ (8005360 <__malloc_unlock+0xc>)
 8005358:	f7ff ff07 	bl	800516a <__retarget_lock_release_recursive>
 800535c:	bd10      	pop	{r4, pc}
 800535e:	46c0      	nop			@ (mov r8, r8)
 8005360:	20000328 	.word	0x20000328

08005364 <__ssputs_r>:
 8005364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005366:	688e      	ldr	r6, [r1, #8]
 8005368:	b085      	sub	sp, #20
 800536a:	001f      	movs	r7, r3
 800536c:	000c      	movs	r4, r1
 800536e:	680b      	ldr	r3, [r1, #0]
 8005370:	9002      	str	r0, [sp, #8]
 8005372:	9203      	str	r2, [sp, #12]
 8005374:	42be      	cmp	r6, r7
 8005376:	d830      	bhi.n	80053da <__ssputs_r+0x76>
 8005378:	210c      	movs	r1, #12
 800537a:	5e62      	ldrsh	r2, [r4, r1]
 800537c:	2190      	movs	r1, #144	@ 0x90
 800537e:	00c9      	lsls	r1, r1, #3
 8005380:	420a      	tst	r2, r1
 8005382:	d028      	beq.n	80053d6 <__ssputs_r+0x72>
 8005384:	2003      	movs	r0, #3
 8005386:	6921      	ldr	r1, [r4, #16]
 8005388:	1a5b      	subs	r3, r3, r1
 800538a:	9301      	str	r3, [sp, #4]
 800538c:	6963      	ldr	r3, [r4, #20]
 800538e:	4343      	muls	r3, r0
 8005390:	9801      	ldr	r0, [sp, #4]
 8005392:	0fdd      	lsrs	r5, r3, #31
 8005394:	18ed      	adds	r5, r5, r3
 8005396:	1c7b      	adds	r3, r7, #1
 8005398:	181b      	adds	r3, r3, r0
 800539a:	106d      	asrs	r5, r5, #1
 800539c:	42ab      	cmp	r3, r5
 800539e:	d900      	bls.n	80053a2 <__ssputs_r+0x3e>
 80053a0:	001d      	movs	r5, r3
 80053a2:	0552      	lsls	r2, r2, #21
 80053a4:	d528      	bpl.n	80053f8 <__ssputs_r+0x94>
 80053a6:	0029      	movs	r1, r5
 80053a8:	9802      	ldr	r0, [sp, #8]
 80053aa:	f7ff ff4b 	bl	8005244 <_malloc_r>
 80053ae:	1e06      	subs	r6, r0, #0
 80053b0:	d02c      	beq.n	800540c <__ssputs_r+0xa8>
 80053b2:	9a01      	ldr	r2, [sp, #4]
 80053b4:	6921      	ldr	r1, [r4, #16]
 80053b6:	f000 fae2 	bl	800597e <memcpy>
 80053ba:	89a2      	ldrh	r2, [r4, #12]
 80053bc:	4b18      	ldr	r3, [pc, #96]	@ (8005420 <__ssputs_r+0xbc>)
 80053be:	401a      	ands	r2, r3
 80053c0:	2380      	movs	r3, #128	@ 0x80
 80053c2:	4313      	orrs	r3, r2
 80053c4:	81a3      	strh	r3, [r4, #12]
 80053c6:	9b01      	ldr	r3, [sp, #4]
 80053c8:	6126      	str	r6, [r4, #16]
 80053ca:	18f6      	adds	r6, r6, r3
 80053cc:	6026      	str	r6, [r4, #0]
 80053ce:	003e      	movs	r6, r7
 80053d0:	6165      	str	r5, [r4, #20]
 80053d2:	1aed      	subs	r5, r5, r3
 80053d4:	60a5      	str	r5, [r4, #8]
 80053d6:	42be      	cmp	r6, r7
 80053d8:	d900      	bls.n	80053dc <__ssputs_r+0x78>
 80053da:	003e      	movs	r6, r7
 80053dc:	0032      	movs	r2, r6
 80053de:	9903      	ldr	r1, [sp, #12]
 80053e0:	6820      	ldr	r0, [r4, #0]
 80053e2:	f000 fa9b 	bl	800591c <memmove>
 80053e6:	2000      	movs	r0, #0
 80053e8:	68a3      	ldr	r3, [r4, #8]
 80053ea:	1b9b      	subs	r3, r3, r6
 80053ec:	60a3      	str	r3, [r4, #8]
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	199b      	adds	r3, r3, r6
 80053f2:	6023      	str	r3, [r4, #0]
 80053f4:	b005      	add	sp, #20
 80053f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f8:	002a      	movs	r2, r5
 80053fa:	9802      	ldr	r0, [sp, #8]
 80053fc:	f000 fac8 	bl	8005990 <_realloc_r>
 8005400:	1e06      	subs	r6, r0, #0
 8005402:	d1e0      	bne.n	80053c6 <__ssputs_r+0x62>
 8005404:	6921      	ldr	r1, [r4, #16]
 8005406:	9802      	ldr	r0, [sp, #8]
 8005408:	f7ff feb0 	bl	800516c <_free_r>
 800540c:	230c      	movs	r3, #12
 800540e:	2001      	movs	r0, #1
 8005410:	9a02      	ldr	r2, [sp, #8]
 8005412:	4240      	negs	r0, r0
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	89a2      	ldrh	r2, [r4, #12]
 8005418:	3334      	adds	r3, #52	@ 0x34
 800541a:	4313      	orrs	r3, r2
 800541c:	81a3      	strh	r3, [r4, #12]
 800541e:	e7e9      	b.n	80053f4 <__ssputs_r+0x90>
 8005420:	fffffb7f 	.word	0xfffffb7f

08005424 <_svfiprintf_r>:
 8005424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005426:	b0a1      	sub	sp, #132	@ 0x84
 8005428:	9003      	str	r0, [sp, #12]
 800542a:	001d      	movs	r5, r3
 800542c:	898b      	ldrh	r3, [r1, #12]
 800542e:	000f      	movs	r7, r1
 8005430:	0016      	movs	r6, r2
 8005432:	061b      	lsls	r3, r3, #24
 8005434:	d511      	bpl.n	800545a <_svfiprintf_r+0x36>
 8005436:	690b      	ldr	r3, [r1, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10e      	bne.n	800545a <_svfiprintf_r+0x36>
 800543c:	2140      	movs	r1, #64	@ 0x40
 800543e:	f7ff ff01 	bl	8005244 <_malloc_r>
 8005442:	6038      	str	r0, [r7, #0]
 8005444:	6138      	str	r0, [r7, #16]
 8005446:	2800      	cmp	r0, #0
 8005448:	d105      	bne.n	8005456 <_svfiprintf_r+0x32>
 800544a:	230c      	movs	r3, #12
 800544c:	9a03      	ldr	r2, [sp, #12]
 800544e:	6013      	str	r3, [r2, #0]
 8005450:	2001      	movs	r0, #1
 8005452:	4240      	negs	r0, r0
 8005454:	e0cf      	b.n	80055f6 <_svfiprintf_r+0x1d2>
 8005456:	2340      	movs	r3, #64	@ 0x40
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	2300      	movs	r3, #0
 800545c:	ac08      	add	r4, sp, #32
 800545e:	6163      	str	r3, [r4, #20]
 8005460:	3320      	adds	r3, #32
 8005462:	7663      	strb	r3, [r4, #25]
 8005464:	3310      	adds	r3, #16
 8005466:	76a3      	strb	r3, [r4, #26]
 8005468:	9507      	str	r5, [sp, #28]
 800546a:	0035      	movs	r5, r6
 800546c:	782b      	ldrb	r3, [r5, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <_svfiprintf_r+0x52>
 8005472:	2b25      	cmp	r3, #37	@ 0x25
 8005474:	d148      	bne.n	8005508 <_svfiprintf_r+0xe4>
 8005476:	1bab      	subs	r3, r5, r6
 8005478:	9305      	str	r3, [sp, #20]
 800547a:	42b5      	cmp	r5, r6
 800547c:	d00b      	beq.n	8005496 <_svfiprintf_r+0x72>
 800547e:	0032      	movs	r2, r6
 8005480:	0039      	movs	r1, r7
 8005482:	9803      	ldr	r0, [sp, #12]
 8005484:	f7ff ff6e 	bl	8005364 <__ssputs_r>
 8005488:	3001      	adds	r0, #1
 800548a:	d100      	bne.n	800548e <_svfiprintf_r+0x6a>
 800548c:	e0ae      	b.n	80055ec <_svfiprintf_r+0x1c8>
 800548e:	6963      	ldr	r3, [r4, #20]
 8005490:	9a05      	ldr	r2, [sp, #20]
 8005492:	189b      	adds	r3, r3, r2
 8005494:	6163      	str	r3, [r4, #20]
 8005496:	782b      	ldrb	r3, [r5, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d100      	bne.n	800549e <_svfiprintf_r+0x7a>
 800549c:	e0a6      	b.n	80055ec <_svfiprintf_r+0x1c8>
 800549e:	2201      	movs	r2, #1
 80054a0:	2300      	movs	r3, #0
 80054a2:	4252      	negs	r2, r2
 80054a4:	6062      	str	r2, [r4, #4]
 80054a6:	a904      	add	r1, sp, #16
 80054a8:	3254      	adds	r2, #84	@ 0x54
 80054aa:	1852      	adds	r2, r2, r1
 80054ac:	1c6e      	adds	r6, r5, #1
 80054ae:	6023      	str	r3, [r4, #0]
 80054b0:	60e3      	str	r3, [r4, #12]
 80054b2:	60a3      	str	r3, [r4, #8]
 80054b4:	7013      	strb	r3, [r2, #0]
 80054b6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80054b8:	4b54      	ldr	r3, [pc, #336]	@ (800560c <_svfiprintf_r+0x1e8>)
 80054ba:	2205      	movs	r2, #5
 80054bc:	0018      	movs	r0, r3
 80054be:	7831      	ldrb	r1, [r6, #0]
 80054c0:	9305      	str	r3, [sp, #20]
 80054c2:	f000 fa51 	bl	8005968 <memchr>
 80054c6:	1c75      	adds	r5, r6, #1
 80054c8:	2800      	cmp	r0, #0
 80054ca:	d11f      	bne.n	800550c <_svfiprintf_r+0xe8>
 80054cc:	6822      	ldr	r2, [r4, #0]
 80054ce:	06d3      	lsls	r3, r2, #27
 80054d0:	d504      	bpl.n	80054dc <_svfiprintf_r+0xb8>
 80054d2:	2353      	movs	r3, #83	@ 0x53
 80054d4:	a904      	add	r1, sp, #16
 80054d6:	185b      	adds	r3, r3, r1
 80054d8:	2120      	movs	r1, #32
 80054da:	7019      	strb	r1, [r3, #0]
 80054dc:	0713      	lsls	r3, r2, #28
 80054de:	d504      	bpl.n	80054ea <_svfiprintf_r+0xc6>
 80054e0:	2353      	movs	r3, #83	@ 0x53
 80054e2:	a904      	add	r1, sp, #16
 80054e4:	185b      	adds	r3, r3, r1
 80054e6:	212b      	movs	r1, #43	@ 0x2b
 80054e8:	7019      	strb	r1, [r3, #0]
 80054ea:	7833      	ldrb	r3, [r6, #0]
 80054ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80054ee:	d016      	beq.n	800551e <_svfiprintf_r+0xfa>
 80054f0:	0035      	movs	r5, r6
 80054f2:	2100      	movs	r1, #0
 80054f4:	200a      	movs	r0, #10
 80054f6:	68e3      	ldr	r3, [r4, #12]
 80054f8:	782a      	ldrb	r2, [r5, #0]
 80054fa:	1c6e      	adds	r6, r5, #1
 80054fc:	3a30      	subs	r2, #48	@ 0x30
 80054fe:	2a09      	cmp	r2, #9
 8005500:	d950      	bls.n	80055a4 <_svfiprintf_r+0x180>
 8005502:	2900      	cmp	r1, #0
 8005504:	d111      	bne.n	800552a <_svfiprintf_r+0x106>
 8005506:	e017      	b.n	8005538 <_svfiprintf_r+0x114>
 8005508:	3501      	adds	r5, #1
 800550a:	e7af      	b.n	800546c <_svfiprintf_r+0x48>
 800550c:	9b05      	ldr	r3, [sp, #20]
 800550e:	6822      	ldr	r2, [r4, #0]
 8005510:	1ac0      	subs	r0, r0, r3
 8005512:	2301      	movs	r3, #1
 8005514:	4083      	lsls	r3, r0
 8005516:	4313      	orrs	r3, r2
 8005518:	002e      	movs	r6, r5
 800551a:	6023      	str	r3, [r4, #0]
 800551c:	e7cc      	b.n	80054b8 <_svfiprintf_r+0x94>
 800551e:	9b07      	ldr	r3, [sp, #28]
 8005520:	1d19      	adds	r1, r3, #4
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	9107      	str	r1, [sp, #28]
 8005526:	2b00      	cmp	r3, #0
 8005528:	db01      	blt.n	800552e <_svfiprintf_r+0x10a>
 800552a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800552c:	e004      	b.n	8005538 <_svfiprintf_r+0x114>
 800552e:	425b      	negs	r3, r3
 8005530:	60e3      	str	r3, [r4, #12]
 8005532:	2302      	movs	r3, #2
 8005534:	4313      	orrs	r3, r2
 8005536:	6023      	str	r3, [r4, #0]
 8005538:	782b      	ldrb	r3, [r5, #0]
 800553a:	2b2e      	cmp	r3, #46	@ 0x2e
 800553c:	d10c      	bne.n	8005558 <_svfiprintf_r+0x134>
 800553e:	786b      	ldrb	r3, [r5, #1]
 8005540:	2b2a      	cmp	r3, #42	@ 0x2a
 8005542:	d134      	bne.n	80055ae <_svfiprintf_r+0x18a>
 8005544:	9b07      	ldr	r3, [sp, #28]
 8005546:	3502      	adds	r5, #2
 8005548:	1d1a      	adds	r2, r3, #4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	9207      	str	r2, [sp, #28]
 800554e:	2b00      	cmp	r3, #0
 8005550:	da01      	bge.n	8005556 <_svfiprintf_r+0x132>
 8005552:	2301      	movs	r3, #1
 8005554:	425b      	negs	r3, r3
 8005556:	9309      	str	r3, [sp, #36]	@ 0x24
 8005558:	4e2d      	ldr	r6, [pc, #180]	@ (8005610 <_svfiprintf_r+0x1ec>)
 800555a:	2203      	movs	r2, #3
 800555c:	0030      	movs	r0, r6
 800555e:	7829      	ldrb	r1, [r5, #0]
 8005560:	f000 fa02 	bl	8005968 <memchr>
 8005564:	2800      	cmp	r0, #0
 8005566:	d006      	beq.n	8005576 <_svfiprintf_r+0x152>
 8005568:	2340      	movs	r3, #64	@ 0x40
 800556a:	1b80      	subs	r0, r0, r6
 800556c:	4083      	lsls	r3, r0
 800556e:	6822      	ldr	r2, [r4, #0]
 8005570:	3501      	adds	r5, #1
 8005572:	4313      	orrs	r3, r2
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	7829      	ldrb	r1, [r5, #0]
 8005578:	2206      	movs	r2, #6
 800557a:	4826      	ldr	r0, [pc, #152]	@ (8005614 <_svfiprintf_r+0x1f0>)
 800557c:	1c6e      	adds	r6, r5, #1
 800557e:	7621      	strb	r1, [r4, #24]
 8005580:	f000 f9f2 	bl	8005968 <memchr>
 8005584:	2800      	cmp	r0, #0
 8005586:	d038      	beq.n	80055fa <_svfiprintf_r+0x1d6>
 8005588:	4b23      	ldr	r3, [pc, #140]	@ (8005618 <_svfiprintf_r+0x1f4>)
 800558a:	2b00      	cmp	r3, #0
 800558c:	d122      	bne.n	80055d4 <_svfiprintf_r+0x1b0>
 800558e:	2207      	movs	r2, #7
 8005590:	9b07      	ldr	r3, [sp, #28]
 8005592:	3307      	adds	r3, #7
 8005594:	4393      	bics	r3, r2
 8005596:	3308      	adds	r3, #8
 8005598:	9307      	str	r3, [sp, #28]
 800559a:	6963      	ldr	r3, [r4, #20]
 800559c:	9a04      	ldr	r2, [sp, #16]
 800559e:	189b      	adds	r3, r3, r2
 80055a0:	6163      	str	r3, [r4, #20]
 80055a2:	e762      	b.n	800546a <_svfiprintf_r+0x46>
 80055a4:	4343      	muls	r3, r0
 80055a6:	0035      	movs	r5, r6
 80055a8:	2101      	movs	r1, #1
 80055aa:	189b      	adds	r3, r3, r2
 80055ac:	e7a4      	b.n	80054f8 <_svfiprintf_r+0xd4>
 80055ae:	2300      	movs	r3, #0
 80055b0:	200a      	movs	r0, #10
 80055b2:	0019      	movs	r1, r3
 80055b4:	3501      	adds	r5, #1
 80055b6:	6063      	str	r3, [r4, #4]
 80055b8:	782a      	ldrb	r2, [r5, #0]
 80055ba:	1c6e      	adds	r6, r5, #1
 80055bc:	3a30      	subs	r2, #48	@ 0x30
 80055be:	2a09      	cmp	r2, #9
 80055c0:	d903      	bls.n	80055ca <_svfiprintf_r+0x1a6>
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0c8      	beq.n	8005558 <_svfiprintf_r+0x134>
 80055c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80055c8:	e7c6      	b.n	8005558 <_svfiprintf_r+0x134>
 80055ca:	4341      	muls	r1, r0
 80055cc:	0035      	movs	r5, r6
 80055ce:	2301      	movs	r3, #1
 80055d0:	1889      	adds	r1, r1, r2
 80055d2:	e7f1      	b.n	80055b8 <_svfiprintf_r+0x194>
 80055d4:	aa07      	add	r2, sp, #28
 80055d6:	9200      	str	r2, [sp, #0]
 80055d8:	0021      	movs	r1, r4
 80055da:	003a      	movs	r2, r7
 80055dc:	4b0f      	ldr	r3, [pc, #60]	@ (800561c <_svfiprintf_r+0x1f8>)
 80055de:	9803      	ldr	r0, [sp, #12]
 80055e0:	e000      	b.n	80055e4 <_svfiprintf_r+0x1c0>
 80055e2:	bf00      	nop
 80055e4:	9004      	str	r0, [sp, #16]
 80055e6:	9b04      	ldr	r3, [sp, #16]
 80055e8:	3301      	adds	r3, #1
 80055ea:	d1d6      	bne.n	800559a <_svfiprintf_r+0x176>
 80055ec:	89bb      	ldrh	r3, [r7, #12]
 80055ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80055f0:	065b      	lsls	r3, r3, #25
 80055f2:	d500      	bpl.n	80055f6 <_svfiprintf_r+0x1d2>
 80055f4:	e72c      	b.n	8005450 <_svfiprintf_r+0x2c>
 80055f6:	b021      	add	sp, #132	@ 0x84
 80055f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055fa:	aa07      	add	r2, sp, #28
 80055fc:	9200      	str	r2, [sp, #0]
 80055fe:	0021      	movs	r1, r4
 8005600:	003a      	movs	r2, r7
 8005602:	4b06      	ldr	r3, [pc, #24]	@ (800561c <_svfiprintf_r+0x1f8>)
 8005604:	9803      	ldr	r0, [sp, #12]
 8005606:	f000 f87b 	bl	8005700 <_printf_i>
 800560a:	e7eb      	b.n	80055e4 <_svfiprintf_r+0x1c0>
 800560c:	08005ae4 	.word	0x08005ae4
 8005610:	08005aea 	.word	0x08005aea
 8005614:	08005aee 	.word	0x08005aee
 8005618:	00000000 	.word	0x00000000
 800561c:	08005365 	.word	0x08005365

08005620 <_printf_common>:
 8005620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005622:	0016      	movs	r6, r2
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	688a      	ldr	r2, [r1, #8]
 8005628:	690b      	ldr	r3, [r1, #16]
 800562a:	000c      	movs	r4, r1
 800562c:	9000      	str	r0, [sp, #0]
 800562e:	4293      	cmp	r3, r2
 8005630:	da00      	bge.n	8005634 <_printf_common+0x14>
 8005632:	0013      	movs	r3, r2
 8005634:	0022      	movs	r2, r4
 8005636:	6033      	str	r3, [r6, #0]
 8005638:	3243      	adds	r2, #67	@ 0x43
 800563a:	7812      	ldrb	r2, [r2, #0]
 800563c:	2a00      	cmp	r2, #0
 800563e:	d001      	beq.n	8005644 <_printf_common+0x24>
 8005640:	3301      	adds	r3, #1
 8005642:	6033      	str	r3, [r6, #0]
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	069b      	lsls	r3, r3, #26
 8005648:	d502      	bpl.n	8005650 <_printf_common+0x30>
 800564a:	6833      	ldr	r3, [r6, #0]
 800564c:	3302      	adds	r3, #2
 800564e:	6033      	str	r3, [r6, #0]
 8005650:	6822      	ldr	r2, [r4, #0]
 8005652:	2306      	movs	r3, #6
 8005654:	0015      	movs	r5, r2
 8005656:	401d      	ands	r5, r3
 8005658:	421a      	tst	r2, r3
 800565a:	d027      	beq.n	80056ac <_printf_common+0x8c>
 800565c:	0023      	movs	r3, r4
 800565e:	3343      	adds	r3, #67	@ 0x43
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	1e5a      	subs	r2, r3, #1
 8005664:	4193      	sbcs	r3, r2
 8005666:	6822      	ldr	r2, [r4, #0]
 8005668:	0692      	lsls	r2, r2, #26
 800566a:	d430      	bmi.n	80056ce <_printf_common+0xae>
 800566c:	0022      	movs	r2, r4
 800566e:	9901      	ldr	r1, [sp, #4]
 8005670:	9800      	ldr	r0, [sp, #0]
 8005672:	9d08      	ldr	r5, [sp, #32]
 8005674:	3243      	adds	r2, #67	@ 0x43
 8005676:	47a8      	blx	r5
 8005678:	3001      	adds	r0, #1
 800567a:	d025      	beq.n	80056c8 <_printf_common+0xa8>
 800567c:	2206      	movs	r2, #6
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	2500      	movs	r5, #0
 8005682:	4013      	ands	r3, r2
 8005684:	2b04      	cmp	r3, #4
 8005686:	d105      	bne.n	8005694 <_printf_common+0x74>
 8005688:	6833      	ldr	r3, [r6, #0]
 800568a:	68e5      	ldr	r5, [r4, #12]
 800568c:	1aed      	subs	r5, r5, r3
 800568e:	43eb      	mvns	r3, r5
 8005690:	17db      	asrs	r3, r3, #31
 8005692:	401d      	ands	r5, r3
 8005694:	68a3      	ldr	r3, [r4, #8]
 8005696:	6922      	ldr	r2, [r4, #16]
 8005698:	4293      	cmp	r3, r2
 800569a:	dd01      	ble.n	80056a0 <_printf_common+0x80>
 800569c:	1a9b      	subs	r3, r3, r2
 800569e:	18ed      	adds	r5, r5, r3
 80056a0:	2600      	movs	r6, #0
 80056a2:	42b5      	cmp	r5, r6
 80056a4:	d120      	bne.n	80056e8 <_printf_common+0xc8>
 80056a6:	2000      	movs	r0, #0
 80056a8:	e010      	b.n	80056cc <_printf_common+0xac>
 80056aa:	3501      	adds	r5, #1
 80056ac:	68e3      	ldr	r3, [r4, #12]
 80056ae:	6832      	ldr	r2, [r6, #0]
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	42ab      	cmp	r3, r5
 80056b4:	ddd2      	ble.n	800565c <_printf_common+0x3c>
 80056b6:	0022      	movs	r2, r4
 80056b8:	2301      	movs	r3, #1
 80056ba:	9901      	ldr	r1, [sp, #4]
 80056bc:	9800      	ldr	r0, [sp, #0]
 80056be:	9f08      	ldr	r7, [sp, #32]
 80056c0:	3219      	adds	r2, #25
 80056c2:	47b8      	blx	r7
 80056c4:	3001      	adds	r0, #1
 80056c6:	d1f0      	bne.n	80056aa <_printf_common+0x8a>
 80056c8:	2001      	movs	r0, #1
 80056ca:	4240      	negs	r0, r0
 80056cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056ce:	2030      	movs	r0, #48	@ 0x30
 80056d0:	18e1      	adds	r1, r4, r3
 80056d2:	3143      	adds	r1, #67	@ 0x43
 80056d4:	7008      	strb	r0, [r1, #0]
 80056d6:	0021      	movs	r1, r4
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	3145      	adds	r1, #69	@ 0x45
 80056dc:	7809      	ldrb	r1, [r1, #0]
 80056de:	18a2      	adds	r2, r4, r2
 80056e0:	3243      	adds	r2, #67	@ 0x43
 80056e2:	3302      	adds	r3, #2
 80056e4:	7011      	strb	r1, [r2, #0]
 80056e6:	e7c1      	b.n	800566c <_printf_common+0x4c>
 80056e8:	0022      	movs	r2, r4
 80056ea:	2301      	movs	r3, #1
 80056ec:	9901      	ldr	r1, [sp, #4]
 80056ee:	9800      	ldr	r0, [sp, #0]
 80056f0:	9f08      	ldr	r7, [sp, #32]
 80056f2:	321a      	adds	r2, #26
 80056f4:	47b8      	blx	r7
 80056f6:	3001      	adds	r0, #1
 80056f8:	d0e6      	beq.n	80056c8 <_printf_common+0xa8>
 80056fa:	3601      	adds	r6, #1
 80056fc:	e7d1      	b.n	80056a2 <_printf_common+0x82>
	...

08005700 <_printf_i>:
 8005700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005702:	b08b      	sub	sp, #44	@ 0x2c
 8005704:	9206      	str	r2, [sp, #24]
 8005706:	000a      	movs	r2, r1
 8005708:	3243      	adds	r2, #67	@ 0x43
 800570a:	9307      	str	r3, [sp, #28]
 800570c:	9005      	str	r0, [sp, #20]
 800570e:	9203      	str	r2, [sp, #12]
 8005710:	7e0a      	ldrb	r2, [r1, #24]
 8005712:	000c      	movs	r4, r1
 8005714:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005716:	2a78      	cmp	r2, #120	@ 0x78
 8005718:	d809      	bhi.n	800572e <_printf_i+0x2e>
 800571a:	2a62      	cmp	r2, #98	@ 0x62
 800571c:	d80b      	bhi.n	8005736 <_printf_i+0x36>
 800571e:	2a00      	cmp	r2, #0
 8005720:	d100      	bne.n	8005724 <_printf_i+0x24>
 8005722:	e0bc      	b.n	800589e <_printf_i+0x19e>
 8005724:	497b      	ldr	r1, [pc, #492]	@ (8005914 <_printf_i+0x214>)
 8005726:	9104      	str	r1, [sp, #16]
 8005728:	2a58      	cmp	r2, #88	@ 0x58
 800572a:	d100      	bne.n	800572e <_printf_i+0x2e>
 800572c:	e090      	b.n	8005850 <_printf_i+0x150>
 800572e:	0025      	movs	r5, r4
 8005730:	3542      	adds	r5, #66	@ 0x42
 8005732:	702a      	strb	r2, [r5, #0]
 8005734:	e022      	b.n	800577c <_printf_i+0x7c>
 8005736:	0010      	movs	r0, r2
 8005738:	3863      	subs	r0, #99	@ 0x63
 800573a:	2815      	cmp	r0, #21
 800573c:	d8f7      	bhi.n	800572e <_printf_i+0x2e>
 800573e:	f7fa fce3 	bl	8000108 <__gnu_thumb1_case_shi>
 8005742:	0016      	.short	0x0016
 8005744:	fff6001f 	.word	0xfff6001f
 8005748:	fff6fff6 	.word	0xfff6fff6
 800574c:	001ffff6 	.word	0x001ffff6
 8005750:	fff6fff6 	.word	0xfff6fff6
 8005754:	fff6fff6 	.word	0xfff6fff6
 8005758:	003600a1 	.word	0x003600a1
 800575c:	fff60080 	.word	0xfff60080
 8005760:	00b2fff6 	.word	0x00b2fff6
 8005764:	0036fff6 	.word	0x0036fff6
 8005768:	fff6fff6 	.word	0xfff6fff6
 800576c:	0084      	.short	0x0084
 800576e:	0025      	movs	r5, r4
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	3542      	adds	r5, #66	@ 0x42
 8005774:	1d11      	adds	r1, r2, #4
 8005776:	6019      	str	r1, [r3, #0]
 8005778:	6813      	ldr	r3, [r2, #0]
 800577a:	702b      	strb	r3, [r5, #0]
 800577c:	2301      	movs	r3, #1
 800577e:	e0a0      	b.n	80058c2 <_printf_i+0x1c2>
 8005780:	6818      	ldr	r0, [r3, #0]
 8005782:	6809      	ldr	r1, [r1, #0]
 8005784:	1d02      	adds	r2, r0, #4
 8005786:	060d      	lsls	r5, r1, #24
 8005788:	d50b      	bpl.n	80057a2 <_printf_i+0xa2>
 800578a:	6806      	ldr	r6, [r0, #0]
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	2e00      	cmp	r6, #0
 8005790:	da03      	bge.n	800579a <_printf_i+0x9a>
 8005792:	232d      	movs	r3, #45	@ 0x2d
 8005794:	9a03      	ldr	r2, [sp, #12]
 8005796:	4276      	negs	r6, r6
 8005798:	7013      	strb	r3, [r2, #0]
 800579a:	4b5e      	ldr	r3, [pc, #376]	@ (8005914 <_printf_i+0x214>)
 800579c:	270a      	movs	r7, #10
 800579e:	9304      	str	r3, [sp, #16]
 80057a0:	e018      	b.n	80057d4 <_printf_i+0xd4>
 80057a2:	6806      	ldr	r6, [r0, #0]
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	0649      	lsls	r1, r1, #25
 80057a8:	d5f1      	bpl.n	800578e <_printf_i+0x8e>
 80057aa:	b236      	sxth	r6, r6
 80057ac:	e7ef      	b.n	800578e <_printf_i+0x8e>
 80057ae:	6808      	ldr	r0, [r1, #0]
 80057b0:	6819      	ldr	r1, [r3, #0]
 80057b2:	c940      	ldmia	r1!, {r6}
 80057b4:	0605      	lsls	r5, r0, #24
 80057b6:	d402      	bmi.n	80057be <_printf_i+0xbe>
 80057b8:	0640      	lsls	r0, r0, #25
 80057ba:	d500      	bpl.n	80057be <_printf_i+0xbe>
 80057bc:	b2b6      	uxth	r6, r6
 80057be:	6019      	str	r1, [r3, #0]
 80057c0:	4b54      	ldr	r3, [pc, #336]	@ (8005914 <_printf_i+0x214>)
 80057c2:	270a      	movs	r7, #10
 80057c4:	9304      	str	r3, [sp, #16]
 80057c6:	2a6f      	cmp	r2, #111	@ 0x6f
 80057c8:	d100      	bne.n	80057cc <_printf_i+0xcc>
 80057ca:	3f02      	subs	r7, #2
 80057cc:	0023      	movs	r3, r4
 80057ce:	2200      	movs	r2, #0
 80057d0:	3343      	adds	r3, #67	@ 0x43
 80057d2:	701a      	strb	r2, [r3, #0]
 80057d4:	6863      	ldr	r3, [r4, #4]
 80057d6:	60a3      	str	r3, [r4, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	db03      	blt.n	80057e4 <_printf_i+0xe4>
 80057dc:	2104      	movs	r1, #4
 80057de:	6822      	ldr	r2, [r4, #0]
 80057e0:	438a      	bics	r2, r1
 80057e2:	6022      	str	r2, [r4, #0]
 80057e4:	2e00      	cmp	r6, #0
 80057e6:	d102      	bne.n	80057ee <_printf_i+0xee>
 80057e8:	9d03      	ldr	r5, [sp, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00c      	beq.n	8005808 <_printf_i+0x108>
 80057ee:	9d03      	ldr	r5, [sp, #12]
 80057f0:	0030      	movs	r0, r6
 80057f2:	0039      	movs	r1, r7
 80057f4:	f7fa fd18 	bl	8000228 <__aeabi_uidivmod>
 80057f8:	9b04      	ldr	r3, [sp, #16]
 80057fa:	3d01      	subs	r5, #1
 80057fc:	5c5b      	ldrb	r3, [r3, r1]
 80057fe:	702b      	strb	r3, [r5, #0]
 8005800:	0033      	movs	r3, r6
 8005802:	0006      	movs	r6, r0
 8005804:	429f      	cmp	r7, r3
 8005806:	d9f3      	bls.n	80057f0 <_printf_i+0xf0>
 8005808:	2f08      	cmp	r7, #8
 800580a:	d109      	bne.n	8005820 <_printf_i+0x120>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	07db      	lsls	r3, r3, #31
 8005810:	d506      	bpl.n	8005820 <_printf_i+0x120>
 8005812:	6862      	ldr	r2, [r4, #4]
 8005814:	6923      	ldr	r3, [r4, #16]
 8005816:	429a      	cmp	r2, r3
 8005818:	dc02      	bgt.n	8005820 <_printf_i+0x120>
 800581a:	2330      	movs	r3, #48	@ 0x30
 800581c:	3d01      	subs	r5, #1
 800581e:	702b      	strb	r3, [r5, #0]
 8005820:	9b03      	ldr	r3, [sp, #12]
 8005822:	1b5b      	subs	r3, r3, r5
 8005824:	6123      	str	r3, [r4, #16]
 8005826:	9b07      	ldr	r3, [sp, #28]
 8005828:	0021      	movs	r1, r4
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	9805      	ldr	r0, [sp, #20]
 800582e:	9b06      	ldr	r3, [sp, #24]
 8005830:	aa09      	add	r2, sp, #36	@ 0x24
 8005832:	f7ff fef5 	bl	8005620 <_printf_common>
 8005836:	3001      	adds	r0, #1
 8005838:	d148      	bne.n	80058cc <_printf_i+0x1cc>
 800583a:	2001      	movs	r0, #1
 800583c:	4240      	negs	r0, r0
 800583e:	b00b      	add	sp, #44	@ 0x2c
 8005840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005842:	2220      	movs	r2, #32
 8005844:	6809      	ldr	r1, [r1, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	6022      	str	r2, [r4, #0]
 800584a:	2278      	movs	r2, #120	@ 0x78
 800584c:	4932      	ldr	r1, [pc, #200]	@ (8005918 <_printf_i+0x218>)
 800584e:	9104      	str	r1, [sp, #16]
 8005850:	0021      	movs	r1, r4
 8005852:	3145      	adds	r1, #69	@ 0x45
 8005854:	700a      	strb	r2, [r1, #0]
 8005856:	6819      	ldr	r1, [r3, #0]
 8005858:	6822      	ldr	r2, [r4, #0]
 800585a:	c940      	ldmia	r1!, {r6}
 800585c:	0610      	lsls	r0, r2, #24
 800585e:	d402      	bmi.n	8005866 <_printf_i+0x166>
 8005860:	0650      	lsls	r0, r2, #25
 8005862:	d500      	bpl.n	8005866 <_printf_i+0x166>
 8005864:	b2b6      	uxth	r6, r6
 8005866:	6019      	str	r1, [r3, #0]
 8005868:	07d3      	lsls	r3, r2, #31
 800586a:	d502      	bpl.n	8005872 <_printf_i+0x172>
 800586c:	2320      	movs	r3, #32
 800586e:	4313      	orrs	r3, r2
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	2e00      	cmp	r6, #0
 8005874:	d001      	beq.n	800587a <_printf_i+0x17a>
 8005876:	2710      	movs	r7, #16
 8005878:	e7a8      	b.n	80057cc <_printf_i+0xcc>
 800587a:	2220      	movs	r2, #32
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	4393      	bics	r3, r2
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	e7f8      	b.n	8005876 <_printf_i+0x176>
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	680d      	ldr	r5, [r1, #0]
 8005888:	1d10      	adds	r0, r2, #4
 800588a:	6949      	ldr	r1, [r1, #20]
 800588c:	6018      	str	r0, [r3, #0]
 800588e:	6813      	ldr	r3, [r2, #0]
 8005890:	062e      	lsls	r6, r5, #24
 8005892:	d501      	bpl.n	8005898 <_printf_i+0x198>
 8005894:	6019      	str	r1, [r3, #0]
 8005896:	e002      	b.n	800589e <_printf_i+0x19e>
 8005898:	066d      	lsls	r5, r5, #25
 800589a:	d5fb      	bpl.n	8005894 <_printf_i+0x194>
 800589c:	8019      	strh	r1, [r3, #0]
 800589e:	2300      	movs	r3, #0
 80058a0:	9d03      	ldr	r5, [sp, #12]
 80058a2:	6123      	str	r3, [r4, #16]
 80058a4:	e7bf      	b.n	8005826 <_printf_i+0x126>
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	1d11      	adds	r1, r2, #4
 80058aa:	6019      	str	r1, [r3, #0]
 80058ac:	6815      	ldr	r5, [r2, #0]
 80058ae:	2100      	movs	r1, #0
 80058b0:	0028      	movs	r0, r5
 80058b2:	6862      	ldr	r2, [r4, #4]
 80058b4:	f000 f858 	bl	8005968 <memchr>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d001      	beq.n	80058c0 <_printf_i+0x1c0>
 80058bc:	1b40      	subs	r0, r0, r5
 80058be:	6060      	str	r0, [r4, #4]
 80058c0:	6863      	ldr	r3, [r4, #4]
 80058c2:	6123      	str	r3, [r4, #16]
 80058c4:	2300      	movs	r3, #0
 80058c6:	9a03      	ldr	r2, [sp, #12]
 80058c8:	7013      	strb	r3, [r2, #0]
 80058ca:	e7ac      	b.n	8005826 <_printf_i+0x126>
 80058cc:	002a      	movs	r2, r5
 80058ce:	6923      	ldr	r3, [r4, #16]
 80058d0:	9906      	ldr	r1, [sp, #24]
 80058d2:	9805      	ldr	r0, [sp, #20]
 80058d4:	9d07      	ldr	r5, [sp, #28]
 80058d6:	47a8      	blx	r5
 80058d8:	3001      	adds	r0, #1
 80058da:	d0ae      	beq.n	800583a <_printf_i+0x13a>
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	079b      	lsls	r3, r3, #30
 80058e0:	d415      	bmi.n	800590e <_printf_i+0x20e>
 80058e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058e4:	68e0      	ldr	r0, [r4, #12]
 80058e6:	4298      	cmp	r0, r3
 80058e8:	daa9      	bge.n	800583e <_printf_i+0x13e>
 80058ea:	0018      	movs	r0, r3
 80058ec:	e7a7      	b.n	800583e <_printf_i+0x13e>
 80058ee:	0022      	movs	r2, r4
 80058f0:	2301      	movs	r3, #1
 80058f2:	9906      	ldr	r1, [sp, #24]
 80058f4:	9805      	ldr	r0, [sp, #20]
 80058f6:	9e07      	ldr	r6, [sp, #28]
 80058f8:	3219      	adds	r2, #25
 80058fa:	47b0      	blx	r6
 80058fc:	3001      	adds	r0, #1
 80058fe:	d09c      	beq.n	800583a <_printf_i+0x13a>
 8005900:	3501      	adds	r5, #1
 8005902:	68e3      	ldr	r3, [r4, #12]
 8005904:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005906:	1a9b      	subs	r3, r3, r2
 8005908:	42ab      	cmp	r3, r5
 800590a:	dcf0      	bgt.n	80058ee <_printf_i+0x1ee>
 800590c:	e7e9      	b.n	80058e2 <_printf_i+0x1e2>
 800590e:	2500      	movs	r5, #0
 8005910:	e7f7      	b.n	8005902 <_printf_i+0x202>
 8005912:	46c0      	nop			@ (mov r8, r8)
 8005914:	08005af5 	.word	0x08005af5
 8005918:	08005b06 	.word	0x08005b06

0800591c <memmove>:
 800591c:	b510      	push	{r4, lr}
 800591e:	4288      	cmp	r0, r1
 8005920:	d806      	bhi.n	8005930 <memmove+0x14>
 8005922:	2300      	movs	r3, #0
 8005924:	429a      	cmp	r2, r3
 8005926:	d008      	beq.n	800593a <memmove+0x1e>
 8005928:	5ccc      	ldrb	r4, [r1, r3]
 800592a:	54c4      	strb	r4, [r0, r3]
 800592c:	3301      	adds	r3, #1
 800592e:	e7f9      	b.n	8005924 <memmove+0x8>
 8005930:	188b      	adds	r3, r1, r2
 8005932:	4298      	cmp	r0, r3
 8005934:	d2f5      	bcs.n	8005922 <memmove+0x6>
 8005936:	3a01      	subs	r2, #1
 8005938:	d200      	bcs.n	800593c <memmove+0x20>
 800593a:	bd10      	pop	{r4, pc}
 800593c:	5c8b      	ldrb	r3, [r1, r2]
 800593e:	5483      	strb	r3, [r0, r2]
 8005940:	e7f9      	b.n	8005936 <memmove+0x1a>
	...

08005944 <_sbrk_r>:
 8005944:	2300      	movs	r3, #0
 8005946:	b570      	push	{r4, r5, r6, lr}
 8005948:	4d06      	ldr	r5, [pc, #24]	@ (8005964 <_sbrk_r+0x20>)
 800594a:	0004      	movs	r4, r0
 800594c:	0008      	movs	r0, r1
 800594e:	602b      	str	r3, [r5, #0]
 8005950:	f7fb f91a 	bl	8000b88 <_sbrk>
 8005954:	1c43      	adds	r3, r0, #1
 8005956:	d103      	bne.n	8005960 <_sbrk_r+0x1c>
 8005958:	682b      	ldr	r3, [r5, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d000      	beq.n	8005960 <_sbrk_r+0x1c>
 800595e:	6023      	str	r3, [r4, #0]
 8005960:	bd70      	pop	{r4, r5, r6, pc}
 8005962:	46c0      	nop			@ (mov r8, r8)
 8005964:	20000324 	.word	0x20000324

08005968 <memchr>:
 8005968:	b2c9      	uxtb	r1, r1
 800596a:	1882      	adds	r2, r0, r2
 800596c:	4290      	cmp	r0, r2
 800596e:	d101      	bne.n	8005974 <memchr+0xc>
 8005970:	2000      	movs	r0, #0
 8005972:	4770      	bx	lr
 8005974:	7803      	ldrb	r3, [r0, #0]
 8005976:	428b      	cmp	r3, r1
 8005978:	d0fb      	beq.n	8005972 <memchr+0xa>
 800597a:	3001      	adds	r0, #1
 800597c:	e7f6      	b.n	800596c <memchr+0x4>

0800597e <memcpy>:
 800597e:	2300      	movs	r3, #0
 8005980:	b510      	push	{r4, lr}
 8005982:	429a      	cmp	r2, r3
 8005984:	d100      	bne.n	8005988 <memcpy+0xa>
 8005986:	bd10      	pop	{r4, pc}
 8005988:	5ccc      	ldrb	r4, [r1, r3]
 800598a:	54c4      	strb	r4, [r0, r3]
 800598c:	3301      	adds	r3, #1
 800598e:	e7f8      	b.n	8005982 <memcpy+0x4>

08005990 <_realloc_r>:
 8005990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005992:	0006      	movs	r6, r0
 8005994:	000c      	movs	r4, r1
 8005996:	0015      	movs	r5, r2
 8005998:	2900      	cmp	r1, #0
 800599a:	d105      	bne.n	80059a8 <_realloc_r+0x18>
 800599c:	0011      	movs	r1, r2
 800599e:	f7ff fc51 	bl	8005244 <_malloc_r>
 80059a2:	0004      	movs	r4, r0
 80059a4:	0020      	movs	r0, r4
 80059a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059a8:	2a00      	cmp	r2, #0
 80059aa:	d103      	bne.n	80059b4 <_realloc_r+0x24>
 80059ac:	f7ff fbde 	bl	800516c <_free_r>
 80059b0:	2400      	movs	r4, #0
 80059b2:	e7f7      	b.n	80059a4 <_realloc_r+0x14>
 80059b4:	f000 f81b 	bl	80059ee <_malloc_usable_size_r>
 80059b8:	0007      	movs	r7, r0
 80059ba:	4285      	cmp	r5, r0
 80059bc:	d802      	bhi.n	80059c4 <_realloc_r+0x34>
 80059be:	0843      	lsrs	r3, r0, #1
 80059c0:	42ab      	cmp	r3, r5
 80059c2:	d3ef      	bcc.n	80059a4 <_realloc_r+0x14>
 80059c4:	0029      	movs	r1, r5
 80059c6:	0030      	movs	r0, r6
 80059c8:	f7ff fc3c 	bl	8005244 <_malloc_r>
 80059cc:	9001      	str	r0, [sp, #4]
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d0ee      	beq.n	80059b0 <_realloc_r+0x20>
 80059d2:	002a      	movs	r2, r5
 80059d4:	42bd      	cmp	r5, r7
 80059d6:	d900      	bls.n	80059da <_realloc_r+0x4a>
 80059d8:	003a      	movs	r2, r7
 80059da:	0021      	movs	r1, r4
 80059dc:	9801      	ldr	r0, [sp, #4]
 80059de:	f7ff ffce 	bl	800597e <memcpy>
 80059e2:	0021      	movs	r1, r4
 80059e4:	0030      	movs	r0, r6
 80059e6:	f7ff fbc1 	bl	800516c <_free_r>
 80059ea:	9c01      	ldr	r4, [sp, #4]
 80059ec:	e7da      	b.n	80059a4 <_realloc_r+0x14>

080059ee <_malloc_usable_size_r>:
 80059ee:	1f0b      	subs	r3, r1, #4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	1f18      	subs	r0, r3, #4
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	da01      	bge.n	80059fc <_malloc_usable_size_r+0xe>
 80059f8:	580b      	ldr	r3, [r1, r0]
 80059fa:	18c0      	adds	r0, r0, r3
 80059fc:	4770      	bx	lr
	...

08005a00 <_init>:
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a02:	46c0      	nop			@ (mov r8, r8)
 8005a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a06:	bc08      	pop	{r3}
 8005a08:	469e      	mov	lr, r3
 8005a0a:	4770      	bx	lr

08005a0c <_fini>:
 8005a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0e:	46c0      	nop			@ (mov r8, r8)
 8005a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a12:	bc08      	pop	{r3}
 8005a14:	469e      	mov	lr, r3
 8005a16:	4770      	bx	lr

08005a18 <__FLASH_Program_Fast_veneer>:
 8005a18:	b401      	push	{r0}
 8005a1a:	4802      	ldr	r0, [pc, #8]	@ (8005a24 <__FLASH_Program_Fast_veneer+0xc>)
 8005a1c:	4684      	mov	ip, r0
 8005a1e:	bc01      	pop	{r0}
 8005a20:	4760      	bx	ip
 8005a22:	bf00      	nop
 8005a24:	20000061 	.word	0x20000061

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	00f42400                                .$..

20000004 <uwAddressNextWrite>:
20000004:	00000020                                 ...

20000008 <uwTickPrio>:
20000008:	00000004                                ....

2000000c <uwTickFreq>:
2000000c:	00000001                                ....

20000010 <_impure_ptr>:
20000010:	20000014                                ... 

20000014 <_impure_data>:
20000014:	00000000 200001ec 20000254 200002bc     ....... T.. ... 
	...

20000060 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000060:	b580      	push	{r7, lr}
20000062:	b088      	sub	sp, #32
20000064:	af00      	add	r7, sp, #0
20000066:	6078      	str	r0, [r7, #4]
20000068:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000006a:	231f      	movs	r3, #31
2000006c:	18fb      	adds	r3, r7, r3
2000006e:	2200      	movs	r2, #0
20000070:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000072:	687b      	ldr	r3, [r7, #4]
20000074:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000076:	683b      	ldr	r3, [r7, #0]
20000078:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000007a:	4b1a      	ldr	r3, [pc, #104]	@ (200000e4 <FLASH_Program_Fast+0x84>)
2000007c:	695a      	ldr	r2, [r3, #20]
2000007e:	4b19      	ldr	r3, [pc, #100]	@ (200000e4 <FLASH_Program_Fast+0x84>)
20000080:	2180      	movs	r1, #128	@ 0x80
20000082:	02c9      	lsls	r1, r1, #11
20000084:	430a      	orrs	r2, r1
20000086:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000088:	f3ef 8310 	mrs	r3, PRIMASK
2000008c:	60fb      	str	r3, [r7, #12]
  return(result);
2000008e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000090:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000092:	b672      	cpsid	i
}
20000094:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000096:	e00f      	b.n	200000b8 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000098:	697a      	ldr	r2, [r7, #20]
2000009a:	69bb      	ldr	r3, [r7, #24]
2000009c:	6812      	ldr	r2, [r2, #0]
2000009e:	601a      	str	r2, [r3, #0]
    src += 4U;
200000a0:	697b      	ldr	r3, [r7, #20]
200000a2:	3304      	adds	r3, #4
200000a4:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000a6:	69bb      	ldr	r3, [r7, #24]
200000a8:	3304      	adds	r3, #4
200000aa:	61bb      	str	r3, [r7, #24]
    index++;
200000ac:	211f      	movs	r1, #31
200000ae:	187b      	adds	r3, r7, r1
200000b0:	781a      	ldrb	r2, [r3, #0]
200000b2:	187b      	adds	r3, r7, r1
200000b4:	3201      	adds	r2, #1
200000b6:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000b8:	231f      	movs	r3, #31
200000ba:	18fb      	adds	r3, r7, r3
200000bc:	781b      	ldrb	r3, [r3, #0]
200000be:	2b3f      	cmp	r3, #63	@ 0x3f
200000c0:	d9ea      	bls.n	20000098 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200000c2:	46c0      	nop			@ (mov r8, r8)
200000c4:	4b07      	ldr	r3, [pc, #28]	@ (200000e4 <FLASH_Program_Fast+0x84>)
200000c6:	691a      	ldr	r2, [r3, #16]
200000c8:	2380      	movs	r3, #128	@ 0x80
200000ca:	025b      	lsls	r3, r3, #9
200000cc:	4013      	ands	r3, r2
200000ce:	d1f9      	bne.n	200000c4 <FLASH_Program_Fast+0x64>
200000d0:	693b      	ldr	r3, [r7, #16]
200000d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000d4:	68bb      	ldr	r3, [r7, #8]
200000d6:	f383 8810 	msr	PRIMASK, r3
}
200000da:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000dc:	46c0      	nop			@ (mov r8, r8)
200000de:	46bd      	mov	sp, r7
200000e0:	b008      	add	sp, #32
200000e2:	bd80      	pop	{r7, pc}
200000e4:	40022000 	.word	0x40022000
