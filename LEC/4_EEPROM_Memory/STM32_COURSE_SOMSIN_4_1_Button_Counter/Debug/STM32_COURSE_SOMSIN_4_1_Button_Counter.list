
STM32_COURSE_SOMSIN_4_1_Button_Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080035ac  080035ac  000045ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003678  08003678  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003678  08003678  00004678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003680  08003680  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003680  08003680  00004680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003684  08003684  00004684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003688  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000005c  080036e4  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080036e4  0000525c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab8c  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b1d  00000000  00000000  0000fc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  00011730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000065c  00000000  00000000  00011f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170e8  00000000  00000000  000125d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b39f  00000000  00000000  000296bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094c1f  00000000  00000000  00034a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c967a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002150  00000000  00000000  000c96c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000cb810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003594 	.word	0x08003594

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08003594 	.word	0x08003594

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b092      	sub	sp, #72	@ 0x48
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fa45 	bl	8000ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f841 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f8d5 	bl	80007ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000642:	f000 f885 	bl	8000750 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  long but_release_count;
  unsigned char string_buffer[50];
  int string_buffer_size = -1;
 8000646:	2301      	movs	r3, #1
 8000648:	425b      	negs	r3, r3
 800064a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  int last_button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800064c:	2380      	movs	r3, #128	@ 0x80
 800064e:	019b      	lsls	r3, r3, #6
 8000650:	4a18      	ldr	r2, [pc, #96]	@ (80006b4 <main+0x84>)
 8000652:	0019      	movs	r1, r3
 8000654:	0010      	movs	r0, r2
 8000656:	f000 fcf7 	bl	8001048 <HAL_GPIO_ReadPin>
 800065a:	0003      	movs	r3, r0
 800065c:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800065e:	2380      	movs	r3, #128	@ 0x80
 8000660:	019b      	lsls	r3, r3, #6
 8000662:	4a14      	ldr	r2, [pc, #80]	@ (80006b4 <main+0x84>)
 8000664:	0019      	movs	r1, r3
 8000666:	0010      	movs	r0, r2
 8000668:	f000 fcee 	bl	8001048 <HAL_GPIO_ReadPin>
 800066c:	0003      	movs	r3, r0
 800066e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if(last_button_state == 0 && button_state == 1){ // release
 8000670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000672:	2b00      	cmp	r3, #0
 8000674:	d118      	bne.n	80006a8 <main+0x78>
 8000676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000678:	2b01      	cmp	r3, #1
 800067a:	d115      	bne.n	80006a8 <main+0x78>
		but_release_count++;
 800067c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800067e:	3301      	adds	r3, #1
 8000680:	647b      	str	r3, [r7, #68]	@ 0x44
		string_buffer_size = sprintf(string_buffer,"haruhi %ld\r\n",but_release_count);
 8000682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000684:	490c      	ldr	r1, [pc, #48]	@ (80006b8 <main+0x88>)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	0018      	movs	r0, r3
 800068a:	f002 fae5 	bl	8002c58 <siprintf>
 800068e:	0003      	movs	r3, r0
 8000690:	63fb      	str	r3, [r7, #60]	@ 0x3c
		HAL_UART_Transmit(&huart2, string_buffer, string_buffer_size, 1000);
 8000692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000694:	b29a      	uxth	r2, r3
 8000696:	23fa      	movs	r3, #250	@ 0xfa
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	1d39      	adds	r1, r7, #4
 800069c:	4807      	ldr	r0, [pc, #28]	@ (80006bc <main+0x8c>)
 800069e:	f001 fc2b 	bl	8001ef8 <HAL_UART_Transmit>
		HAL_Delay (200); // debounce
 80006a2:	20c8      	movs	r0, #200	@ 0xc8
 80006a4:	f000 fa94 	bl	8000bd0 <HAL_Delay>
	}
	last_button_state = button_state;
 80006a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006aa:	643b      	str	r3, [r7, #64]	@ 0x40
	HAL_Delay (100);
 80006ac:	2064      	movs	r0, #100	@ 0x64
 80006ae:	f000 fa8f 	bl	8000bd0 <HAL_Delay>
	button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80006b2:	e7d4      	b.n	800065e <main+0x2e>
 80006b4:	50000800 	.word	0x50000800
 80006b8:	080035ac 	.word	0x080035ac
 80006bc:	20000078 	.word	0x20000078

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b093      	sub	sp, #76	@ 0x4c
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	2410      	movs	r4, #16
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	0018      	movs	r0, r3
 80006cc:	2338      	movs	r3, #56	@ 0x38
 80006ce:	001a      	movs	r2, r3
 80006d0:	2100      	movs	r1, #0
 80006d2:	f002 fae1 	bl	8002c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d6:	003b      	movs	r3, r7
 80006d8:	0018      	movs	r0, r3
 80006da:	2310      	movs	r3, #16
 80006dc:	001a      	movs	r2, r3
 80006de:	2100      	movs	r1, #0
 80006e0:	f002 fada 	bl	8002c98 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2380      	movs	r3, #128	@ 0x80
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 fce7 	bl	80010bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2202      	movs	r2, #2
 80006f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2280      	movs	r2, #128	@ 0x80
 80006f8:	0052      	lsls	r2, r2, #1
 80006fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2240      	movs	r2, #64	@ 0x40
 8000706:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	193b      	adds	r3, r7, r4
 8000710:	0018      	movs	r0, r3
 8000712:	f000 fd1f 	bl	8001154 <HAL_RCC_OscConfig>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800071a:	f000 f8c9 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	003b      	movs	r3, r7
 8000720:	2207      	movs	r2, #7
 8000722:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000724:	003b      	movs	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	003b      	movs	r3, r7
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000730:	003b      	movs	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000736:	003b      	movs	r3, r7
 8000738:	2100      	movs	r1, #0
 800073a:	0018      	movs	r0, r3
 800073c:	f001 f824 	bl	8001788 <HAL_RCC_ClockConfig>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000744:	f000 f8b4 	bl	80008b0 <Error_Handler>
  }
}
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b013      	add	sp, #76	@ 0x4c
 800074e:	bd90      	pop	{r4, r7, pc}

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b23      	ldr	r3, [pc, #140]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 8000756:	4a24      	ldr	r2, [pc, #144]	@ (80007e8 <MX_USART2_UART_Init+0x98>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075a:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 800075c:	22e1      	movs	r2, #225	@ 0xe1
 800075e:	0252      	lsls	r2, r2, #9
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b20      	ldr	r3, [pc, #128]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b1e      	ldr	r3, [pc, #120]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b1d      	ldr	r3, [pc, #116]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800078c:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000792:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 8000794:	2200      	movs	r2, #0
 8000796:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 800079a:	0018      	movs	r0, r3
 800079c:	f001 fb56 	bl	8001e4c <HAL_UART_Init>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007a4:	f000 f884 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a8:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 80007aa:	2100      	movs	r1, #0
 80007ac:	0018      	movs	r0, r3
 80007ae:	f002 f973 	bl	8002a98 <HAL_UARTEx_SetTxFifoThreshold>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007b6:	f000 f87b 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 80007bc:	2100      	movs	r1, #0
 80007be:	0018      	movs	r0, r3
 80007c0:	f002 f9aa 	bl	8002b18 <HAL_UARTEx_SetRxFifoThreshold>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007c8:	f000 f872 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <MX_USART2_UART_Init+0x94>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f002 f928 	bl	8002a24 <HAL_UARTEx_DisableFifoMode>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007d8:	f000 f86a 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007dc:	46c0      	nop			@ (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	20000078 	.word	0x20000078
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b089      	sub	sp, #36	@ 0x24
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	240c      	movs	r4, #12
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	0018      	movs	r0, r3
 80007f8:	2314      	movs	r3, #20
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f002 fa4b 	bl	8002c98 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4b29      	ldr	r3, [pc, #164]	@ (80008a8 <MX_GPIO_Init+0xbc>)
 8000804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000806:	4b28      	ldr	r3, [pc, #160]	@ (80008a8 <MX_GPIO_Init+0xbc>)
 8000808:	2104      	movs	r1, #4
 800080a:	430a      	orrs	r2, r1
 800080c:	635a      	str	r2, [r3, #52]	@ 0x34
 800080e:	4b26      	ldr	r3, [pc, #152]	@ (80008a8 <MX_GPIO_Init+0xbc>)
 8000810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000812:	2204      	movs	r2, #4
 8000814:	4013      	ands	r3, r2
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800081a:	4b23      	ldr	r3, [pc, #140]	@ (80008a8 <MX_GPIO_Init+0xbc>)
 800081c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800081e:	4b22      	ldr	r3, [pc, #136]	@ (80008a8 <MX_GPIO_Init+0xbc>)
 8000820:	2120      	movs	r1, #32
 8000822:	430a      	orrs	r2, r1
 8000824:	635a      	str	r2, [r3, #52]	@ 0x34
 8000826:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <MX_GPIO_Init+0xbc>)
 8000828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800082a:	2220      	movs	r2, #32
 800082c:	4013      	ands	r3, r2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <MX_GPIO_Init+0xbc>)
 8000834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000836:	4b1c      	ldr	r3, [pc, #112]	@ (80008a8 <MX_GPIO_Init+0xbc>)
 8000838:	2101      	movs	r1, #1
 800083a:	430a      	orrs	r2, r1
 800083c:	635a      	str	r2, [r3, #52]	@ 0x34
 800083e:	4b1a      	ldr	r3, [pc, #104]	@ (80008a8 <MX_GPIO_Init+0xbc>)
 8000840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000842:	2201      	movs	r2, #1
 8000844:	4013      	ands	r3, r2
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800084a:	23a0      	movs	r3, #160	@ 0xa0
 800084c:	05db      	lsls	r3, r3, #23
 800084e:	2200      	movs	r2, #0
 8000850:	2120      	movs	r1, #32
 8000852:	0018      	movs	r0, r3
 8000854:	f000 fc15 	bl	8001082 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2280      	movs	r2, #128	@ 0x80
 800085c:	0192      	lsls	r2, r2, #6
 800085e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086c:	193b      	adds	r3, r7, r4
 800086e:	4a0f      	ldr	r2, [pc, #60]	@ (80008ac <MX_GPIO_Init+0xc0>)
 8000870:	0019      	movs	r1, r3
 8000872:	0010      	movs	r0, r2
 8000874:	f000 fa84 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000878:	0021      	movs	r1, r4
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2220      	movs	r2, #32
 800087e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2201      	movs	r2, #1
 8000884:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2202      	movs	r2, #2
 8000890:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000892:	187a      	adds	r2, r7, r1
 8000894:	23a0      	movs	r3, #160	@ 0xa0
 8000896:	05db      	lsls	r3, r3, #23
 8000898:	0011      	movs	r1, r2
 800089a:	0018      	movs	r0, r3
 800089c:	f000 fa70 	bl	8000d80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a0:	46c0      	nop			@ (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b009      	add	sp, #36	@ 0x24
 80008a6:	bd90      	pop	{r4, r7, pc}
 80008a8:	40021000 	.word	0x40021000
 80008ac:	50000800 	.word	0x50000800

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	e7fd      	b.n	80008b8 <Error_Handler+0x8>

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <HAL_MspInit+0x44>)
 80008c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <HAL_MspInit+0x44>)
 80008c8:	2101      	movs	r1, #1
 80008ca:	430a      	orrs	r2, r1
 80008cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80008ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <HAL_MspInit+0x44>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	2201      	movs	r2, #1
 80008d4:	4013      	ands	r3, r2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <HAL_MspInit+0x44>)
 80008dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008de:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <HAL_MspInit+0x44>)
 80008e0:	2180      	movs	r1, #128	@ 0x80
 80008e2:	0549      	lsls	r1, r1, #21
 80008e4:	430a      	orrs	r2, r1
 80008e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <HAL_MspInit+0x44>)
 80008ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008ec:	2380      	movs	r3, #128	@ 0x80
 80008ee:	055b      	lsls	r3, r3, #21
 80008f0:	4013      	ands	r3, r2
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b002      	add	sp, #8
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b097      	sub	sp, #92	@ 0x5c
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	2344      	movs	r3, #68	@ 0x44
 800090e:	18fb      	adds	r3, r7, r3
 8000910:	0018      	movs	r0, r3
 8000912:	2314      	movs	r3, #20
 8000914:	001a      	movs	r2, r3
 8000916:	2100      	movs	r1, #0
 8000918:	f002 f9be 	bl	8002c98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800091c:	2410      	movs	r4, #16
 800091e:	193b      	adds	r3, r7, r4
 8000920:	0018      	movs	r0, r3
 8000922:	2334      	movs	r3, #52	@ 0x34
 8000924:	001a      	movs	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	f002 f9b6 	bl	8002c98 <memset>
  if(huart->Instance==USART2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a22      	ldr	r2, [pc, #136]	@ (80009bc <HAL_UART_MspInit+0xb8>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d13e      	bne.n	80009b4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000936:	193b      	adds	r3, r7, r4
 8000938:	2202      	movs	r2, #2
 800093a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800093c:	193b      	adds	r3, r7, r4
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000942:	193b      	adds	r3, r7, r4
 8000944:	0018      	movs	r0, r3
 8000946:	f001 f8c9 	bl	8001adc <HAL_RCCEx_PeriphCLKConfig>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d001      	beq.n	8000952 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800094e:	f7ff ffaf 	bl	80008b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000952:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <HAL_UART_MspInit+0xbc>)
 8000954:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000956:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <HAL_UART_MspInit+0xbc>)
 8000958:	2180      	movs	r1, #128	@ 0x80
 800095a:	0289      	lsls	r1, r1, #10
 800095c:	430a      	orrs	r2, r1
 800095e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000960:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <HAL_UART_MspInit+0xbc>)
 8000962:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000964:	2380      	movs	r3, #128	@ 0x80
 8000966:	029b      	lsls	r3, r3, #10
 8000968:	4013      	ands	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <HAL_UART_MspInit+0xbc>)
 8000970:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <HAL_UART_MspInit+0xbc>)
 8000974:	2101      	movs	r1, #1
 8000976:	430a      	orrs	r2, r1
 8000978:	635a      	str	r2, [r3, #52]	@ 0x34
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <HAL_UART_MspInit+0xbc>)
 800097c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800097e:	2201      	movs	r2, #1
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000986:	2144      	movs	r1, #68	@ 0x44
 8000988:	187b      	adds	r3, r7, r1
 800098a:	220c      	movs	r2, #12
 800098c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2202      	movs	r2, #2
 8000992:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2201      	movs	r2, #1
 8000998:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2201      	movs	r2, #1
 80009a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	187a      	adds	r2, r7, r1
 80009a8:	23a0      	movs	r3, #160	@ 0xa0
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	0011      	movs	r1, r2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 f9e6 	bl	8000d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b4:	46c0      	nop			@ (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b017      	add	sp, #92	@ 0x5c
 80009ba:	bd90      	pop	{r4, r7, pc}
 80009bc:	40004400 	.word	0x40004400
 80009c0:	40021000 	.word	0x40021000

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c8:	46c0      	nop			@ (mov r8, r8)
 80009ca:	e7fd      	b.n	80009c8 <NMI_Handler+0x4>

080009cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d0:	46c0      	nop			@ (mov r8, r8)
 80009d2:	e7fd      	b.n	80009d0 <HardFault_Handler+0x4>

080009d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009d8:	46c0      	nop			@ (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ec:	f000 f8d4 	bl	8000b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	@ (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	@ (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	18d3      	adds	r3, r2, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f002 f93e 	bl	8002ca8 <__errno>
 8000a2c:	0003      	movs	r3, r0
 8000a2e:	220c      	movs	r2, #12
 8000a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	425b      	negs	r3, r3
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	18d2      	adds	r2, r2, r3
 8000a46:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <_sbrk+0x64>)
 8000a48:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b006      	add	sp, #24
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20009000 	.word	0x20009000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	2000010c 	.word	0x2000010c
 8000a60:	20000260 	.word	0x20000260

08000a64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a68:	46c0      	nop			@ (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a70:	480d      	ldr	r0, [pc, #52]	@ (8000aa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a72:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a74:	f7ff fff6 	bl	8000a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a78:	480c      	ldr	r0, [pc, #48]	@ (8000aac <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7a:	490d      	ldr	r1, [pc, #52]	@ (8000ab0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab4 <LoopForever+0xe>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a90:	4c0a      	ldr	r4, [pc, #40]	@ (8000abc <LoopForever+0x16>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a9e:	f002 f909 	bl	8002cb4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000aa2:	f7ff fdc5 	bl	8000630 <main>

08000aa6 <LoopForever>:

LoopForever:
  b LoopForever
 8000aa6:	e7fe      	b.n	8000aa6 <LoopForever>
  ldr   r0, =_estack
 8000aa8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ab4:	08003688 	.word	0x08003688
  ldr r2, =_sbss
 8000ab8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000abc:	2000025c 	.word	0x2000025c

08000ac0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC1_COMP_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <HAL_Init+0x3c>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <HAL_Init+0x3c>)
 8000ad6:	2180      	movs	r1, #128	@ 0x80
 8000ad8:	0049      	lsls	r1, r1, #1
 8000ada:	430a      	orrs	r2, r1
 8000adc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 f810 	bl	8000b04 <HAL_InitTick>
 8000ae4:	1e03      	subs	r3, r0, #0
 8000ae6:	d003      	beq.n	8000af0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	2201      	movs	r2, #1
 8000aec:	701a      	strb	r2, [r3, #0]
 8000aee:	e001      	b.n	8000af4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000af0:	f7ff fee4 	bl	80008bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	781b      	ldrb	r3, [r3, #0]
}
 8000af8:	0018      	movs	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b002      	add	sp, #8
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40022000 	.word	0x40022000

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b14:	4b1d      	ldr	r3, [pc, #116]	@ (8000b8c <HAL_InitTick+0x88>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d02b      	beq.n	8000b74 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <HAL_InitTick+0x8c>)
 8000b1e:	681c      	ldr	r4, [r3, #0]
 8000b20:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <HAL_InitTick+0x88>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	0019      	movs	r1, r3
 8000b26:	23fa      	movs	r3, #250	@ 0xfa
 8000b28:	0098      	lsls	r0, r3, #2
 8000b2a:	f7ff faf5 	bl	8000118 <__udivsi3>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	0019      	movs	r1, r3
 8000b32:	0020      	movs	r0, r4
 8000b34:	f7ff faf0 	bl	8000118 <__udivsi3>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f000 f913 	bl	8000d66 <HAL_SYSTICK_Config>
 8000b40:	1e03      	subs	r3, r0, #0
 8000b42:	d112      	bne.n	8000b6a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d80a      	bhi.n	8000b60 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	425b      	negs	r3, r3
 8000b50:	2200      	movs	r2, #0
 8000b52:	0018      	movs	r0, r3
 8000b54:	f000 f8f2 	bl	8000d3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b58:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <HAL_InitTick+0x90>)
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	e00d      	b.n	8000b7c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b60:	230f      	movs	r3, #15
 8000b62:	18fb      	adds	r3, r7, r3
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	e008      	b.n	8000b7c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	e003      	b.n	8000b7c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b74:	230f      	movs	r3, #15
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	781b      	ldrb	r3, [r3, #0]
}
 8000b82:	0018      	movs	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b005      	add	sp, #20
 8000b88:	bd90      	pop	{r4, r7, pc}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000004 	.word	0x20000004

08000b98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b9c:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <HAL_IncTick+0x1c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <HAL_IncTick+0x20>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	18d2      	adds	r2, r2, r3
 8000ba8:	4b03      	ldr	r3, [pc, #12]	@ (8000bb8 <HAL_IncTick+0x20>)
 8000baa:	601a      	str	r2, [r3, #0]
}
 8000bac:	46c0      	nop			@ (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			@ (mov r8, r8)
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	20000110 	.word	0x20000110

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b02      	ldr	r3, [pc, #8]	@ (8000bcc <HAL_GetTick+0x10>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	20000110 	.word	0x20000110

08000bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff fff0 	bl	8000bbc <HAL_GetTick>
 8000bdc:	0003      	movs	r3, r0
 8000bde:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	3301      	adds	r3, #1
 8000be8:	d005      	beq.n	8000bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bea:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <HAL_Delay+0x44>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	001a      	movs	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	189b      	adds	r3, r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	f7ff ffe0 	bl	8000bbc <HAL_GetTick>
 8000bfc:	0002      	movs	r2, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d8f7      	bhi.n	8000bf8 <HAL_Delay+0x28>
  {
  }
}
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b004      	add	sp, #16
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			@ (mov r8, r8)
 8000c14:	20000008 	.word	0x20000008

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	0002      	movs	r2, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c2c:	d828      	bhi.n	8000c80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c2e:	4a2f      	ldr	r2, [pc, #188]	@ (8000cec <__NVIC_SetPriority+0xd4>)
 8000c30:	1dfb      	adds	r3, r7, #7
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b25b      	sxtb	r3, r3
 8000c36:	089b      	lsrs	r3, r3, #2
 8000c38:	33c0      	adds	r3, #192	@ 0xc0
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	589b      	ldr	r3, [r3, r2]
 8000c3e:	1dfa      	adds	r2, r7, #7
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	0011      	movs	r1, r2
 8000c44:	2203      	movs	r2, #3
 8000c46:	400a      	ands	r2, r1
 8000c48:	00d2      	lsls	r2, r2, #3
 8000c4a:	21ff      	movs	r1, #255	@ 0xff
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	000a      	movs	r2, r1
 8000c50:	43d2      	mvns	r2, r2
 8000c52:	401a      	ands	r2, r3
 8000c54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	019b      	lsls	r3, r3, #6
 8000c5a:	22ff      	movs	r2, #255	@ 0xff
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	0018      	movs	r0, r3
 8000c64:	2303      	movs	r3, #3
 8000c66:	4003      	ands	r3, r0
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c6c:	481f      	ldr	r0, [pc, #124]	@ (8000cec <__NVIC_SetPriority+0xd4>)
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b25b      	sxtb	r3, r3
 8000c74:	089b      	lsrs	r3, r3, #2
 8000c76:	430a      	orrs	r2, r1
 8000c78:	33c0      	adds	r3, #192	@ 0xc0
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c7e:	e031      	b.n	8000ce4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c80:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf0 <__NVIC_SetPriority+0xd8>)
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	0019      	movs	r1, r3
 8000c88:	230f      	movs	r3, #15
 8000c8a:	400b      	ands	r3, r1
 8000c8c:	3b08      	subs	r3, #8
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	3306      	adds	r3, #6
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	18d3      	adds	r3, r2, r3
 8000c96:	3304      	adds	r3, #4
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	1dfa      	adds	r2, r7, #7
 8000c9c:	7812      	ldrb	r2, [r2, #0]
 8000c9e:	0011      	movs	r1, r2
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	400a      	ands	r2, r1
 8000ca4:	00d2      	lsls	r2, r2, #3
 8000ca6:	21ff      	movs	r1, #255	@ 0xff
 8000ca8:	4091      	lsls	r1, r2
 8000caa:	000a      	movs	r2, r1
 8000cac:	43d2      	mvns	r2, r2
 8000cae:	401a      	ands	r2, r3
 8000cb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	019b      	lsls	r3, r3, #6
 8000cb6:	22ff      	movs	r2, #255	@ 0xff
 8000cb8:	401a      	ands	r2, r3
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	4003      	ands	r3, r0
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc8:	4809      	ldr	r0, [pc, #36]	@ (8000cf0 <__NVIC_SetPriority+0xd8>)
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	001c      	movs	r4, r3
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	4023      	ands	r3, r4
 8000cd4:	3b08      	subs	r3, #8
 8000cd6:	089b      	lsrs	r3, r3, #2
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	3306      	adds	r3, #6
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	18c3      	adds	r3, r0, r3
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	601a      	str	r2, [r3, #0]
}
 8000ce4:	46c0      	nop			@ (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b003      	add	sp, #12
 8000cea:	bd90      	pop	{r4, r7, pc}
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	1e5a      	subs	r2, r3, #1
 8000d00:	2380      	movs	r3, #128	@ 0x80
 8000d02:	045b      	lsls	r3, r3, #17
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d301      	bcc.n	8000d0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e010      	b.n	8000d2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <SysTick_Config+0x44>)
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	3a01      	subs	r2, #1
 8000d12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d14:	2301      	movs	r3, #1
 8000d16:	425b      	negs	r3, r3
 8000d18:	2103      	movs	r1, #3
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f7ff ff7c 	bl	8000c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d20:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <SysTick_Config+0x44>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d26:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <SysTick_Config+0x44>)
 8000d28:	2207      	movs	r2, #7
 8000d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	0018      	movs	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	e000e010 	.word	0xe000e010

08000d3c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	210f      	movs	r1, #15
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	1c02      	adds	r2, r0, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	0011      	movs	r1, r2
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f7ff ff5d 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b004      	add	sp, #16
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	0018      	movs	r0, r3
 8000d72:	f7ff ffbf 	bl	8000cf4 <SysTick_Config>
 8000d76:	0003      	movs	r3, r0
}
 8000d78:	0018      	movs	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b002      	add	sp, #8
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8e:	e147      	b.n	8001020 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2101      	movs	r1, #1
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	000a      	movs	r2, r1
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d100      	bne.n	8000da8 <HAL_GPIO_Init+0x28>
 8000da6:	e138      	b.n	800101a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2203      	movs	r2, #3
 8000dae:	4013      	ands	r3, r2
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d005      	beq.n	8000dc0 <HAL_GPIO_Init+0x40>
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2203      	movs	r2, #3
 8000dba:	4013      	ands	r3, r2
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d130      	bne.n	8000e22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	409a      	lsls	r2, r3
 8000dce:	0013      	movs	r3, r2
 8000dd0:	43da      	mvns	r2, r3
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	409a      	lsls	r2, r3
 8000de2:	0013      	movs	r3, r2
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000df6:	2201      	movs	r2, #1
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	091b      	lsrs	r3, r3, #4
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2203      	movs	r2, #3
 8000e28:	4013      	ands	r3, r2
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d017      	beq.n	8000e5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2203      	movs	r2, #3
 8000e64:	4013      	ands	r3, r2
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d123      	bne.n	8000eb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	08da      	lsrs	r2, r3, #3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3208      	adds	r2, #8
 8000e72:	0092      	lsls	r2, r2, #2
 8000e74:	58d3      	ldr	r3, [r2, r3]
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	2207      	movs	r2, #7
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	220f      	movs	r2, #15
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	43da      	mvns	r2, r3
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	691a      	ldr	r2, [r3, #16]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	2107      	movs	r1, #7
 8000e96:	400b      	ands	r3, r1
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	6939      	ldr	r1, [r7, #16]
 8000eb0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2203      	movs	r2, #3
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	0013      	movs	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	23c0      	movs	r3, #192	@ 0xc0
 8000eec:	029b      	lsls	r3, r3, #10
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d100      	bne.n	8000ef4 <HAL_GPIO_Init+0x174>
 8000ef2:	e092      	b.n	800101a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000ef4:	4a50      	ldr	r2, [pc, #320]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	089b      	lsrs	r3, r3, #2
 8000efa:	3318      	adds	r3, #24
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	589b      	ldr	r3, [r3, r2]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	2203      	movs	r2, #3
 8000f06:	4013      	ands	r3, r2
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	220f      	movs	r2, #15
 8000f0c:	409a      	lsls	r2, r3
 8000f0e:	0013      	movs	r3, r2
 8000f10:	43da      	mvns	r2, r3
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	23a0      	movs	r3, #160	@ 0xa0
 8000f1c:	05db      	lsls	r3, r3, #23
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d013      	beq.n	8000f4a <HAL_GPIO_Init+0x1ca>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a45      	ldr	r2, [pc, #276]	@ (800103c <HAL_GPIO_Init+0x2bc>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d00d      	beq.n	8000f46 <HAL_GPIO_Init+0x1c6>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a44      	ldr	r2, [pc, #272]	@ (8001040 <HAL_GPIO_Init+0x2c0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d007      	beq.n	8000f42 <HAL_GPIO_Init+0x1c2>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a43      	ldr	r2, [pc, #268]	@ (8001044 <HAL_GPIO_Init+0x2c4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_GPIO_Init+0x1be>
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x1cc>
 8000f3e:	2305      	movs	r3, #5
 8000f40:	e004      	b.n	8000f4c <HAL_GPIO_Init+0x1cc>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_Init+0x1cc>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_Init+0x1cc>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	2103      	movs	r1, #3
 8000f50:	400a      	ands	r2, r1
 8000f52:	00d2      	lsls	r2, r2, #3
 8000f54:	4093      	lsls	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f5c:	4936      	ldr	r1, [pc, #216]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3318      	adds	r3, #24
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f6a:	4b33      	ldr	r3, [pc, #204]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43da      	mvns	r2, r3
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	2380      	movs	r3, #128	@ 0x80
 8000f80:	035b      	lsls	r3, r3, #13
 8000f82:	4013      	ands	r3, r2
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f94:	4b28      	ldr	r3, [pc, #160]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43da      	mvns	r2, r3
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	039b      	lsls	r3, r3, #14
 8000fac:	4013      	ands	r3, r2
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000fc0:	2384      	movs	r3, #132	@ 0x84
 8000fc2:	58d3      	ldr	r3, [r2, r3]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	43da      	mvns	r2, r3
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	2380      	movs	r3, #128	@ 0x80
 8000fd6:	029b      	lsls	r3, r3, #10
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fe4:	4914      	ldr	r1, [pc, #80]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000fe6:	2284      	movs	r2, #132	@ 0x84
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000fec:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8000fee:	2380      	movs	r3, #128	@ 0x80
 8000ff0:	58d3      	ldr	r3, [r2, r3]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	2380      	movs	r3, #128	@ 0x80
 8001004:	025b      	lsls	r3, r3, #9
 8001006:	4013      	ands	r3, r2
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001012:	4909      	ldr	r1, [pc, #36]	@ (8001038 <HAL_GPIO_Init+0x2b8>)
 8001014:	2280      	movs	r2, #128	@ 0x80
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	40da      	lsrs	r2, r3
 8001028:	1e13      	subs	r3, r2, #0
 800102a:	d000      	beq.n	800102e <HAL_GPIO_Init+0x2ae>
 800102c:	e6b0      	b.n	8000d90 <HAL_GPIO_Init+0x10>
  }
}
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	46c0      	nop			@ (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b006      	add	sp, #24
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021800 	.word	0x40021800
 800103c:	50000400 	.word	0x50000400
 8001040:	50000800 	.word	0x50000800
 8001044:	50000c00 	.word	0x50000c00

08001048 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	000a      	movs	r2, r1
 8001052:	1cbb      	adds	r3, r7, #2
 8001054:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	1cba      	adds	r2, r7, #2
 800105c:	8812      	ldrh	r2, [r2, #0]
 800105e:	4013      	ands	r3, r2
 8001060:	d004      	beq.n	800106c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001062:	230f      	movs	r3, #15
 8001064:	18fb      	adds	r3, r7, r3
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	e003      	b.n	8001074 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800106c:	230f      	movs	r3, #15
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001074:	230f      	movs	r3, #15
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	781b      	ldrb	r3, [r3, #0]
}
 800107a:	0018      	movs	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	b004      	add	sp, #16
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	0008      	movs	r0, r1
 800108c:	0011      	movs	r1, r2
 800108e:	1cbb      	adds	r3, r7, #2
 8001090:	1c02      	adds	r2, r0, #0
 8001092:	801a      	strh	r2, [r3, #0]
 8001094:	1c7b      	adds	r3, r7, #1
 8001096:	1c0a      	adds	r2, r1, #0
 8001098:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800109a:	1c7b      	adds	r3, r7, #1
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d004      	beq.n	80010ac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010a2:	1cbb      	adds	r3, r7, #2
 80010a4:	881a      	ldrh	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010aa:	e003      	b.n	80010b4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ac:	1cbb      	adds	r3, r7, #2
 80010ae:	881a      	ldrh	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b002      	add	sp, #8
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80010c4:	4b19      	ldr	r3, [pc, #100]	@ (800112c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a19      	ldr	r2, [pc, #100]	@ (8001130 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80010ca:	4013      	ands	r3, r2
 80010cc:	0019      	movs	r1, r3
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	2380      	movs	r3, #128	@ 0x80
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	429a      	cmp	r2, r3
 80010de:	d11f      	bne.n	8001120 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80010e0:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	0013      	movs	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	189b      	adds	r3, r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4912      	ldr	r1, [pc, #72]	@ (8001138 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80010ee:	0018      	movs	r0, r3
 80010f0:	f7ff f812 	bl	8000118 <__udivsi3>
 80010f4:	0003      	movs	r3, r0
 80010f6:	3301      	adds	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010fa:	e008      	b.n	800110e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	3b01      	subs	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e001      	b.n	800110e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e009      	b.n	8001122 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800110e:	4b07      	ldr	r3, [pc, #28]	@ (800112c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001110:	695a      	ldr	r2, [r3, #20]
 8001112:	2380      	movs	r3, #128	@ 0x80
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	401a      	ands	r2, r3
 8001118:	2380      	movs	r3, #128	@ 0x80
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	429a      	cmp	r2, r3
 800111e:	d0ed      	beq.n	80010fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	0018      	movs	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	b004      	add	sp, #16
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	40007000 	.word	0x40007000
 8001130:	fffff9ff 	.word	0xfffff9ff
 8001134:	20000000 	.word	0x20000000
 8001138:	000f4240 	.word	0x000f4240

0800113c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001140:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	23e0      	movs	r3, #224	@ 0xe0
 8001146:	01db      	lsls	r3, r3, #7
 8001148:	4013      	ands	r3, r2
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40021000 	.word	0x40021000

08001154 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e2fe      	b.n	8001764 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2201      	movs	r2, #1
 800116c:	4013      	ands	r3, r2
 800116e:	d100      	bne.n	8001172 <HAL_RCC_OscConfig+0x1e>
 8001170:	e07c      	b.n	800126c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001172:	4bc3      	ldr	r3, [pc, #780]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2238      	movs	r2, #56	@ 0x38
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800117c:	4bc0      	ldr	r3, [pc, #768]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2203      	movs	r2, #3
 8001182:	4013      	ands	r3, r2
 8001184:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	2b10      	cmp	r3, #16
 800118a:	d102      	bne.n	8001192 <HAL_RCC_OscConfig+0x3e>
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	2b03      	cmp	r3, #3
 8001190:	d002      	beq.n	8001198 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	2b08      	cmp	r3, #8
 8001196:	d10b      	bne.n	80011b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001198:	4bb9      	ldr	r3, [pc, #740]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2380      	movs	r3, #128	@ 0x80
 800119e:	029b      	lsls	r3, r3, #10
 80011a0:	4013      	ands	r3, r2
 80011a2:	d062      	beq.n	800126a <HAL_RCC_OscConfig+0x116>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d15e      	bne.n	800126a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e2d9      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	2380      	movs	r3, #128	@ 0x80
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d107      	bne.n	80011cc <HAL_RCC_OscConfig+0x78>
 80011bc:	4bb0      	ldr	r3, [pc, #704]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4baf      	ldr	r3, [pc, #700]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	0249      	lsls	r1, r1, #9
 80011c6:	430a      	orrs	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	e020      	b.n	800120e <HAL_RCC_OscConfig+0xba>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	23a0      	movs	r3, #160	@ 0xa0
 80011d2:	02db      	lsls	r3, r3, #11
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d10e      	bne.n	80011f6 <HAL_RCC_OscConfig+0xa2>
 80011d8:	4ba9      	ldr	r3, [pc, #676]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4ba8      	ldr	r3, [pc, #672]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 80011de:	2180      	movs	r1, #128	@ 0x80
 80011e0:	02c9      	lsls	r1, r1, #11
 80011e2:	430a      	orrs	r2, r1
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	4ba6      	ldr	r3, [pc, #664]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4ba5      	ldr	r3, [pc, #660]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 80011ec:	2180      	movs	r1, #128	@ 0x80
 80011ee:	0249      	lsls	r1, r1, #9
 80011f0:	430a      	orrs	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	e00b      	b.n	800120e <HAL_RCC_OscConfig+0xba>
 80011f6:	4ba2      	ldr	r3, [pc, #648]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4ba1      	ldr	r3, [pc, #644]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 80011fc:	49a1      	ldr	r1, [pc, #644]	@ (8001484 <HAL_RCC_OscConfig+0x330>)
 80011fe:	400a      	ands	r2, r1
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	4b9f      	ldr	r3, [pc, #636]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4b9e      	ldr	r3, [pc, #632]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001208:	499f      	ldr	r1, [pc, #636]	@ (8001488 <HAL_RCC_OscConfig+0x334>)
 800120a:	400a      	ands	r2, r1
 800120c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d014      	beq.n	8001240 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001216:	f7ff fcd1 	bl	8000bbc <HAL_GetTick>
 800121a:	0003      	movs	r3, r0
 800121c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001220:	f7ff fccc 	bl	8000bbc <HAL_GetTick>
 8001224:	0002      	movs	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b64      	cmp	r3, #100	@ 0x64
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e298      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001232:	4b93      	ldr	r3, [pc, #588]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	2380      	movs	r3, #128	@ 0x80
 8001238:	029b      	lsls	r3, r3, #10
 800123a:	4013      	ands	r3, r2
 800123c:	d0f0      	beq.n	8001220 <HAL_RCC_OscConfig+0xcc>
 800123e:	e015      	b.n	800126c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001240:	f7ff fcbc 	bl	8000bbc <HAL_GetTick>
 8001244:	0003      	movs	r3, r0
 8001246:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800124a:	f7ff fcb7 	bl	8000bbc <HAL_GetTick>
 800124e:	0002      	movs	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b64      	cmp	r3, #100	@ 0x64
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e283      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800125c:	4b88      	ldr	r3, [pc, #544]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	2380      	movs	r3, #128	@ 0x80
 8001262:	029b      	lsls	r3, r3, #10
 8001264:	4013      	ands	r3, r2
 8001266:	d1f0      	bne.n	800124a <HAL_RCC_OscConfig+0xf6>
 8001268:	e000      	b.n	800126c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2202      	movs	r2, #2
 8001272:	4013      	ands	r3, r2
 8001274:	d100      	bne.n	8001278 <HAL_RCC_OscConfig+0x124>
 8001276:	e099      	b.n	80013ac <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001278:	4b81      	ldr	r3, [pc, #516]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2238      	movs	r2, #56	@ 0x38
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001282:	4b7f      	ldr	r3, [pc, #508]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2203      	movs	r2, #3
 8001288:	4013      	ands	r3, r2
 800128a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2b10      	cmp	r3, #16
 8001290:	d102      	bne.n	8001298 <HAL_RCC_OscConfig+0x144>
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d002      	beq.n	800129e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d135      	bne.n	800130a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800129e:	4b78      	ldr	r3, [pc, #480]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	2380      	movs	r3, #128	@ 0x80
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4013      	ands	r3, r2
 80012a8:	d005      	beq.n	80012b6 <HAL_RCC_OscConfig+0x162>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e256      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b6:	4b72      	ldr	r3, [pc, #456]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	4a74      	ldr	r2, [pc, #464]	@ (800148c <HAL_RCC_OscConfig+0x338>)
 80012bc:	4013      	ands	r3, r2
 80012be:	0019      	movs	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	021a      	lsls	r2, r3, #8
 80012c6:	4b6e      	ldr	r3, [pc, #440]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 80012c8:	430a      	orrs	r2, r1
 80012ca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d112      	bne.n	80012f8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a6e      	ldr	r2, [pc, #440]	@ (8001490 <HAL_RCC_OscConfig+0x33c>)
 80012d8:	4013      	ands	r3, r2
 80012da:	0019      	movs	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	4b67      	ldr	r3, [pc, #412]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80012e6:	4b66      	ldr	r3, [pc, #408]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	0adb      	lsrs	r3, r3, #11
 80012ec:	2207      	movs	r2, #7
 80012ee:	4013      	ands	r3, r2
 80012f0:	4a68      	ldr	r2, [pc, #416]	@ (8001494 <HAL_RCC_OscConfig+0x340>)
 80012f2:	40da      	lsrs	r2, r3
 80012f4:	4b68      	ldr	r3, [pc, #416]	@ (8001498 <HAL_RCC_OscConfig+0x344>)
 80012f6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012f8:	4b68      	ldr	r3, [pc, #416]	@ (800149c <HAL_RCC_OscConfig+0x348>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff fc01 	bl	8000b04 <HAL_InitTick>
 8001302:	1e03      	subs	r3, r0, #0
 8001304:	d051      	beq.n	80013aa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e22c      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d030      	beq.n	8001374 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001312:	4b5b      	ldr	r3, [pc, #364]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a5e      	ldr	r2, [pc, #376]	@ (8001490 <HAL_RCC_OscConfig+0x33c>)
 8001318:	4013      	ands	r3, r2
 800131a:	0019      	movs	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	4b57      	ldr	r3, [pc, #348]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001322:	430a      	orrs	r2, r1
 8001324:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001326:	4b56      	ldr	r3, [pc, #344]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4b55      	ldr	r3, [pc, #340]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 800132c:	2180      	movs	r1, #128	@ 0x80
 800132e:	0049      	lsls	r1, r1, #1
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001334:	f7ff fc42 	bl	8000bbc <HAL_GetTick>
 8001338:	0003      	movs	r3, r0
 800133a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800133e:	f7ff fc3d 	bl	8000bbc <HAL_GetTick>
 8001342:	0002      	movs	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e209      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001350:	4b4b      	ldr	r3, [pc, #300]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	2380      	movs	r3, #128	@ 0x80
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	4013      	ands	r3, r2
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135c:	4b48      	ldr	r3, [pc, #288]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a4a      	ldr	r2, [pc, #296]	@ (800148c <HAL_RCC_OscConfig+0x338>)
 8001362:	4013      	ands	r3, r2
 8001364:	0019      	movs	r1, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	021a      	lsls	r2, r3, #8
 800136c:	4b44      	ldr	r3, [pc, #272]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 800136e:	430a      	orrs	r2, r1
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	e01b      	b.n	80013ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001374:	4b42      	ldr	r3, [pc, #264]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b41      	ldr	r3, [pc, #260]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 800137a:	4949      	ldr	r1, [pc, #292]	@ (80014a0 <HAL_RCC_OscConfig+0x34c>)
 800137c:	400a      	ands	r2, r1
 800137e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff fc1c 	bl	8000bbc <HAL_GetTick>
 8001384:	0003      	movs	r3, r0
 8001386:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138a:	f7ff fc17 	bl	8000bbc <HAL_GetTick>
 800138e:	0002      	movs	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e1e3      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800139c:	4b38      	ldr	r3, [pc, #224]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	2380      	movs	r3, #128	@ 0x80
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4013      	ands	r3, r2
 80013a6:	d1f0      	bne.n	800138a <HAL_RCC_OscConfig+0x236>
 80013a8:	e000      	b.n	80013ac <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013aa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2208      	movs	r2, #8
 80013b2:	4013      	ands	r3, r2
 80013b4:	d047      	beq.n	8001446 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80013b6:	4b32      	ldr	r3, [pc, #200]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2238      	movs	r2, #56	@ 0x38
 80013bc:	4013      	ands	r3, r2
 80013be:	2b18      	cmp	r3, #24
 80013c0:	d10a      	bne.n	80013d8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80013c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c6:	2202      	movs	r2, #2
 80013c8:	4013      	ands	r3, r2
 80013ca:	d03c      	beq.n	8001446 <HAL_RCC_OscConfig+0x2f2>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d138      	bne.n	8001446 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e1c5      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d019      	beq.n	8001414 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80013e0:	4b27      	ldr	r3, [pc, #156]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 80013e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013e4:	4b26      	ldr	r3, [pc, #152]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 80013e6:	2101      	movs	r1, #1
 80013e8:	430a      	orrs	r2, r1
 80013ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fbe6 	bl	8000bbc <HAL_GetTick>
 80013f0:	0003      	movs	r3, r0
 80013f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f6:	f7ff fbe1 	bl	8000bbc <HAL_GetTick>
 80013fa:	0002      	movs	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e1ad      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001408:	4b1d      	ldr	r3, [pc, #116]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 800140a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800140c:	2202      	movs	r2, #2
 800140e:	4013      	ands	r3, r2
 8001410:	d0f1      	beq.n	80013f6 <HAL_RCC_OscConfig+0x2a2>
 8001412:	e018      	b.n	8001446 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001414:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001416:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001418:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 800141a:	2101      	movs	r1, #1
 800141c:	438a      	bics	r2, r1
 800141e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001420:	f7ff fbcc 	bl	8000bbc <HAL_GetTick>
 8001424:	0003      	movs	r3, r0
 8001426:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800142a:	f7ff fbc7 	bl	8000bbc <HAL_GetTick>
 800142e:	0002      	movs	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e193      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800143c:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 800143e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001440:	2202      	movs	r2, #2
 8001442:	4013      	ands	r3, r2
 8001444:	d1f1      	bne.n	800142a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2204      	movs	r2, #4
 800144c:	4013      	ands	r3, r2
 800144e:	d100      	bne.n	8001452 <HAL_RCC_OscConfig+0x2fe>
 8001450:	e0c6      	b.n	80015e0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001452:	231f      	movs	r3, #31
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800145a:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2238      	movs	r2, #56	@ 0x38
 8001460:	4013      	ands	r3, r2
 8001462:	2b20      	cmp	r3, #32
 8001464:	d11e      	bne.n	80014a4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_RCC_OscConfig+0x32c>)
 8001468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800146a:	2202      	movs	r2, #2
 800146c:	4013      	ands	r3, r2
 800146e:	d100      	bne.n	8001472 <HAL_RCC_OscConfig+0x31e>
 8001470:	e0b6      	b.n	80015e0 <HAL_RCC_OscConfig+0x48c>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <HAL_RCC_OscConfig+0x328>
 800147a:	e0b1      	b.n	80015e0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e171      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
 8001480:	40021000 	.word	0x40021000
 8001484:	fffeffff 	.word	0xfffeffff
 8001488:	fffbffff 	.word	0xfffbffff
 800148c:	ffff80ff 	.word	0xffff80ff
 8001490:	ffffc7ff 	.word	0xffffc7ff
 8001494:	00f42400 	.word	0x00f42400
 8001498:	20000000 	.word	0x20000000
 800149c:	20000004 	.word	0x20000004
 80014a0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80014a4:	4bb1      	ldr	r3, [pc, #708]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 80014a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014a8:	2380      	movs	r3, #128	@ 0x80
 80014aa:	055b      	lsls	r3, r3, #21
 80014ac:	4013      	ands	r3, r2
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_OscConfig+0x360>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e000      	b.n	80014b6 <HAL_RCC_OscConfig+0x362>
 80014b4:	2300      	movs	r3, #0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d011      	beq.n	80014de <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	4bac      	ldr	r3, [pc, #688]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 80014bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014be:	4bab      	ldr	r3, [pc, #684]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 80014c0:	2180      	movs	r1, #128	@ 0x80
 80014c2:	0549      	lsls	r1, r1, #21
 80014c4:	430a      	orrs	r2, r1
 80014c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014c8:	4ba8      	ldr	r3, [pc, #672]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 80014ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014cc:	2380      	movs	r3, #128	@ 0x80
 80014ce:	055b      	lsls	r3, r3, #21
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80014d6:	231f      	movs	r3, #31
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014de:	4ba4      	ldr	r3, [pc, #656]	@ (8001770 <HAL_RCC_OscConfig+0x61c>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	2380      	movs	r3, #128	@ 0x80
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4013      	ands	r3, r2
 80014e8:	d11a      	bne.n	8001520 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014ea:	4ba1      	ldr	r3, [pc, #644]	@ (8001770 <HAL_RCC_OscConfig+0x61c>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4ba0      	ldr	r3, [pc, #640]	@ (8001770 <HAL_RCC_OscConfig+0x61c>)
 80014f0:	2180      	movs	r1, #128	@ 0x80
 80014f2:	0049      	lsls	r1, r1, #1
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb60 	bl	8000bbc <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001502:	f7ff fb5b 	bl	8000bbc <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e127      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001514:	4b96      	ldr	r3, [pc, #600]	@ (8001770 <HAL_RCC_OscConfig+0x61c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	2380      	movs	r3, #128	@ 0x80
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4013      	ands	r3, r2
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x3e2>
 8001528:	4b90      	ldr	r3, [pc, #576]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 800152a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800152c:	4b8f      	ldr	r3, [pc, #572]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 800152e:	2101      	movs	r1, #1
 8001530:	430a      	orrs	r2, r1
 8001532:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001534:	e01c      	b.n	8001570 <HAL_RCC_OscConfig+0x41c>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b05      	cmp	r3, #5
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x404>
 800153e:	4b8b      	ldr	r3, [pc, #556]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 8001540:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001542:	4b8a      	ldr	r3, [pc, #552]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 8001544:	2104      	movs	r1, #4
 8001546:	430a      	orrs	r2, r1
 8001548:	65da      	str	r2, [r3, #92]	@ 0x5c
 800154a:	4b88      	ldr	r3, [pc, #544]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 800154c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800154e:	4b87      	ldr	r3, [pc, #540]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 8001550:	2101      	movs	r1, #1
 8001552:	430a      	orrs	r2, r1
 8001554:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0x41c>
 8001558:	4b84      	ldr	r3, [pc, #528]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 800155a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800155c:	4b83      	ldr	r3, [pc, #524]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 800155e:	2101      	movs	r1, #1
 8001560:	438a      	bics	r2, r1
 8001562:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001564:	4b81      	ldr	r3, [pc, #516]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 8001566:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001568:	4b80      	ldr	r3, [pc, #512]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 800156a:	2104      	movs	r1, #4
 800156c:	438a      	bics	r2, r1
 800156e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d014      	beq.n	80015a2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff fb20 	bl	8000bbc <HAL_GetTick>
 800157c:	0003      	movs	r3, r0
 800157e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001580:	e009      	b.n	8001596 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001582:	f7ff fb1b 	bl	8000bbc <HAL_GetTick>
 8001586:	0002      	movs	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	4a79      	ldr	r2, [pc, #484]	@ (8001774 <HAL_RCC_OscConfig+0x620>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e0e6      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001596:	4b75      	ldr	r3, [pc, #468]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 8001598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800159a:	2202      	movs	r2, #2
 800159c:	4013      	ands	r3, r2
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x42e>
 80015a0:	e013      	b.n	80015ca <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff fb0b 	bl	8000bbc <HAL_GetTick>
 80015a6:	0003      	movs	r3, r0
 80015a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015aa:	e009      	b.n	80015c0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ac:	f7ff fb06 	bl	8000bbc <HAL_GetTick>
 80015b0:	0002      	movs	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	4a6f      	ldr	r2, [pc, #444]	@ (8001774 <HAL_RCC_OscConfig+0x620>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e0d1      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015c0:	4b6a      	ldr	r3, [pc, #424]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 80015c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c4:	2202      	movs	r2, #2
 80015c6:	4013      	ands	r3, r2
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80015ca:	231f      	movs	r3, #31
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80015d4:	4b65      	ldr	r3, [pc, #404]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 80015d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015d8:	4b64      	ldr	r3, [pc, #400]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 80015da:	4967      	ldr	r1, [pc, #412]	@ (8001778 <HAL_RCC_OscConfig+0x624>)
 80015dc:	400a      	ands	r2, r1
 80015de:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d100      	bne.n	80015ea <HAL_RCC_OscConfig+0x496>
 80015e8:	e0bb      	b.n	8001762 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ea:	4b60      	ldr	r3, [pc, #384]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2238      	movs	r2, #56	@ 0x38
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b10      	cmp	r3, #16
 80015f4:	d100      	bne.n	80015f8 <HAL_RCC_OscConfig+0x4a4>
 80015f6:	e07b      	b.n	80016f0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d156      	bne.n	80016ae <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001600:	4b5a      	ldr	r3, [pc, #360]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b59      	ldr	r3, [pc, #356]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 8001606:	495d      	ldr	r1, [pc, #372]	@ (800177c <HAL_RCC_OscConfig+0x628>)
 8001608:	400a      	ands	r2, r1
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fad6 	bl	8000bbc <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001616:	f7ff fad1 	bl	8000bbc <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e09d      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001628:	4b50      	ldr	r3, [pc, #320]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	@ 0x80
 800162e:	049b      	lsls	r3, r3, #18
 8001630:	4013      	ands	r3, r2
 8001632:	d1f0      	bne.n	8001616 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001634:	4b4d      	ldr	r3, [pc, #308]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	4a51      	ldr	r2, [pc, #324]	@ (8001780 <HAL_RCC_OscConfig+0x62c>)
 800163a:	4013      	ands	r3, r2
 800163c:	0019      	movs	r1, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1a      	ldr	r2, [r3, #32]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001660:	431a      	orrs	r2, r3
 8001662:	4b42      	ldr	r3, [pc, #264]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 8001664:	430a      	orrs	r2, r1
 8001666:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001668:	4b40      	ldr	r3, [pc, #256]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b3f      	ldr	r3, [pc, #252]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 800166e:	2180      	movs	r1, #128	@ 0x80
 8001670:	0449      	lsls	r1, r1, #17
 8001672:	430a      	orrs	r2, r1
 8001674:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001676:	4b3d      	ldr	r3, [pc, #244]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	4b3c      	ldr	r3, [pc, #240]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 800167c:	2180      	movs	r1, #128	@ 0x80
 800167e:	0549      	lsls	r1, r1, #21
 8001680:	430a      	orrs	r2, r1
 8001682:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fa9a 	bl	8000bbc <HAL_GetTick>
 8001688:	0003      	movs	r3, r0
 800168a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168e:	f7ff fa95 	bl	8000bbc <HAL_GetTick>
 8001692:	0002      	movs	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e061      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016a0:	4b32      	ldr	r3, [pc, #200]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2380      	movs	r3, #128	@ 0x80
 80016a6:	049b      	lsls	r3, r3, #18
 80016a8:	4013      	ands	r3, r2
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x53a>
 80016ac:	e059      	b.n	8001762 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ae:	4b2f      	ldr	r3, [pc, #188]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b2e      	ldr	r3, [pc, #184]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 80016b4:	4931      	ldr	r1, [pc, #196]	@ (800177c <HAL_RCC_OscConfig+0x628>)
 80016b6:	400a      	ands	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ba:	f7ff fa7f 	bl	8000bbc <HAL_GetTick>
 80016be:	0003      	movs	r3, r0
 80016c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff fa7a 	bl	8000bbc <HAL_GetTick>
 80016c8:	0002      	movs	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e046      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d6:	4b25      	ldr	r3, [pc, #148]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	2380      	movs	r3, #128	@ 0x80
 80016dc:	049b      	lsls	r3, r3, #18
 80016de:	4013      	ands	r3, r2
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80016e2:	4b22      	ldr	r3, [pc, #136]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	4b21      	ldr	r3, [pc, #132]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 80016e8:	4926      	ldr	r1, [pc, #152]	@ (8001784 <HAL_RCC_OscConfig+0x630>)
 80016ea:	400a      	ands	r2, r1
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	e038      	b.n	8001762 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e033      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <HAL_RCC_OscConfig+0x618>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2203      	movs	r2, #3
 8001706:	401a      	ands	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	429a      	cmp	r2, r3
 800170e:	d126      	bne.n	800175e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2270      	movs	r2, #112	@ 0x70
 8001714:	401a      	ands	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171a:	429a      	cmp	r2, r3
 800171c:	d11f      	bne.n	800175e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	23fe      	movs	r3, #254	@ 0xfe
 8001722:	01db      	lsls	r3, r3, #7
 8001724:	401a      	ands	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d116      	bne.n	800175e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	23f8      	movs	r3, #248	@ 0xf8
 8001734:	039b      	lsls	r3, r3, #14
 8001736:	401a      	ands	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d10e      	bne.n	800175e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	23e0      	movs	r3, #224	@ 0xe0
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	401a      	ands	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d106      	bne.n	800175e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	0f5b      	lsrs	r3, r3, #29
 8001754:	075a      	lsls	r2, r3, #29
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d001      	beq.n	8001762 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	b008      	add	sp, #32
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000
 8001770:	40007000 	.word	0x40007000
 8001774:	00001388 	.word	0x00001388
 8001778:	efffffff 	.word	0xefffffff
 800177c:	feffffff 	.word	0xfeffffff
 8001780:	11c1808c 	.word	0x11c1808c
 8001784:	eefefffc 	.word	0xeefefffc

08001788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0e9      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800179c:	4b76      	ldr	r3, [pc, #472]	@ (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2207      	movs	r2, #7
 80017a2:	4013      	ands	r3, r2
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d91e      	bls.n	80017e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b73      	ldr	r3, [pc, #460]	@ (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2207      	movs	r2, #7
 80017b0:	4393      	bics	r3, r2
 80017b2:	0019      	movs	r1, r3
 80017b4:	4b70      	ldr	r3, [pc, #448]	@ (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017bc:	f7ff f9fe 	bl	8000bbc <HAL_GetTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017c4:	e009      	b.n	80017da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c6:	f7ff f9f9 	bl	8000bbc <HAL_GetTick>
 80017ca:	0002      	movs	r2, r0
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	4a6a      	ldr	r2, [pc, #424]	@ (800197c <HAL_RCC_ClockConfig+0x1f4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e0ca      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017da:	4b67      	ldr	r3, [pc, #412]	@ (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2207      	movs	r2, #7
 80017e0:	4013      	ands	r3, r2
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d1ee      	bne.n	80017c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2202      	movs	r2, #2
 80017ee:	4013      	ands	r3, r2
 80017f0:	d015      	beq.n	800181e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2204      	movs	r2, #4
 80017f8:	4013      	ands	r3, r2
 80017fa:	d006      	beq.n	800180a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017fc:	4b60      	ldr	r3, [pc, #384]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	4b5f      	ldr	r3, [pc, #380]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 8001802:	21e0      	movs	r1, #224	@ 0xe0
 8001804:	01c9      	lsls	r1, r1, #7
 8001806:	430a      	orrs	r2, r1
 8001808:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180a:	4b5d      	ldr	r3, [pc, #372]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	4a5d      	ldr	r2, [pc, #372]	@ (8001984 <HAL_RCC_ClockConfig+0x1fc>)
 8001810:	4013      	ands	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	4b59      	ldr	r3, [pc, #356]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800181a:	430a      	orrs	r2, r1
 800181c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2201      	movs	r2, #1
 8001824:	4013      	ands	r3, r2
 8001826:	d057      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d107      	bne.n	8001840 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001830:	4b53      	ldr	r3, [pc, #332]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2380      	movs	r3, #128	@ 0x80
 8001836:	029b      	lsls	r3, r3, #10
 8001838:	4013      	ands	r3, r2
 800183a:	d12b      	bne.n	8001894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e097      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d107      	bne.n	8001858 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001848:	4b4d      	ldr	r3, [pc, #308]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2380      	movs	r3, #128	@ 0x80
 800184e:	049b      	lsls	r3, r3, #18
 8001850:	4013      	ands	r3, r2
 8001852:	d11f      	bne.n	8001894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e08b      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d107      	bne.n	8001870 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001860:	4b47      	ldr	r3, [pc, #284]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2380      	movs	r3, #128	@ 0x80
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4013      	ands	r3, r2
 800186a:	d113      	bne.n	8001894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e07f      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d106      	bne.n	8001886 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001878:	4b41      	ldr	r3, [pc, #260]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800187a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187c:	2202      	movs	r2, #2
 800187e:	4013      	ands	r3, r2
 8001880:	d108      	bne.n	8001894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e074      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001886:	4b3e      	ldr	r3, [pc, #248]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 8001888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800188a:	2202      	movs	r2, #2
 800188c:	4013      	ands	r3, r2
 800188e:	d101      	bne.n	8001894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e06d      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001894:	4b3a      	ldr	r3, [pc, #232]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2207      	movs	r2, #7
 800189a:	4393      	bics	r3, r2
 800189c:	0019      	movs	r1, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	4b37      	ldr	r3, [pc, #220]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 80018a4:	430a      	orrs	r2, r1
 80018a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018a8:	f7ff f988 	bl	8000bbc <HAL_GetTick>
 80018ac:	0003      	movs	r3, r0
 80018ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b0:	e009      	b.n	80018c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b2:	f7ff f983 	bl	8000bbc <HAL_GetTick>
 80018b6:	0002      	movs	r2, r0
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	4a2f      	ldr	r2, [pc, #188]	@ (800197c <HAL_RCC_ClockConfig+0x1f4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e054      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2238      	movs	r2, #56	@ 0x38
 80018cc:	401a      	ands	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d1ec      	bne.n	80018b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018d8:	4b27      	ldr	r3, [pc, #156]	@ (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2207      	movs	r2, #7
 80018de:	4013      	ands	r3, r2
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d21e      	bcs.n	8001924 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b24      	ldr	r3, [pc, #144]	@ (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2207      	movs	r2, #7
 80018ec:	4393      	bics	r3, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	4b21      	ldr	r3, [pc, #132]	@ (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018f8:	f7ff f960 	bl	8000bbc <HAL_GetTick>
 80018fc:	0003      	movs	r3, r0
 80018fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001900:	e009      	b.n	8001916 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001902:	f7ff f95b 	bl	8000bbc <HAL_GetTick>
 8001906:	0002      	movs	r2, r0
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	4a1b      	ldr	r2, [pc, #108]	@ (800197c <HAL_RCC_ClockConfig+0x1f4>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e02c      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001916:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2207      	movs	r2, #7
 800191c:	4013      	ands	r3, r2
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d1ee      	bne.n	8001902 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2204      	movs	r2, #4
 800192a:	4013      	ands	r3, r2
 800192c:	d009      	beq.n	8001942 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800192e:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	4a15      	ldr	r2, [pc, #84]	@ (8001988 <HAL_RCC_ClockConfig+0x200>)
 8001934:	4013      	ands	r3, r2
 8001936:	0019      	movs	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800193e:	430a      	orrs	r2, r1
 8001940:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001942:	f000 f829 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 8001946:	0001      	movs	r1, r0
 8001948:	4b0d      	ldr	r3, [pc, #52]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	220f      	movs	r2, #15
 8001950:	401a      	ands	r2, r3
 8001952:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <HAL_RCC_ClockConfig+0x204>)
 8001954:	0092      	lsls	r2, r2, #2
 8001956:	58d3      	ldr	r3, [r2, r3]
 8001958:	221f      	movs	r2, #31
 800195a:	4013      	ands	r3, r2
 800195c:	000a      	movs	r2, r1
 800195e:	40da      	lsrs	r2, r3
 8001960:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <HAL_RCC_ClockConfig+0x208>)
 8001962:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001964:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_RCC_ClockConfig+0x20c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0018      	movs	r0, r3
 800196a:	f7ff f8cb 	bl	8000b04 <HAL_InitTick>
 800196e:	0003      	movs	r3, r0
}
 8001970:	0018      	movs	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	b004      	add	sp, #16
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40022000 	.word	0x40022000
 800197c:	00001388 	.word	0x00001388
 8001980:	40021000 	.word	0x40021000
 8001984:	fffff0ff 	.word	0xfffff0ff
 8001988:	ffff8fff 	.word	0xffff8fff
 800198c:	080035bc 	.word	0x080035bc
 8001990:	20000000 	.word	0x20000000
 8001994:	20000004 	.word	0x20000004

08001998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800199e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2238      	movs	r2, #56	@ 0x38
 80019a4:	4013      	ands	r3, r2
 80019a6:	d10f      	bne.n	80019c8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80019a8:	4b39      	ldr	r3, [pc, #228]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0adb      	lsrs	r3, r3, #11
 80019ae:	2207      	movs	r2, #7
 80019b0:	4013      	ands	r3, r2
 80019b2:	2201      	movs	r2, #1
 80019b4:	409a      	lsls	r2, r3
 80019b6:	0013      	movs	r3, r2
 80019b8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80019ba:	6839      	ldr	r1, [r7, #0]
 80019bc:	4835      	ldr	r0, [pc, #212]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019be:	f7fe fbab 	bl	8000118 <__udivsi3>
 80019c2:	0003      	movs	r3, r0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	e05d      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c8:	4b31      	ldr	r3, [pc, #196]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2238      	movs	r2, #56	@ 0x38
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d102      	bne.n	80019da <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019d4:	4b30      	ldr	r3, [pc, #192]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x100>)
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	e054      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019da:	4b2d      	ldr	r3, [pc, #180]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2238      	movs	r2, #56	@ 0x38
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d138      	bne.n	8001a58 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80019e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2203      	movs	r2, #3
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019f0:	4b27      	ldr	r3, [pc, #156]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	2207      	movs	r2, #7
 80019f8:	4013      	ands	r3, r2
 80019fa:	3301      	adds	r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d10d      	bne.n	8001a20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	4824      	ldr	r0, [pc, #144]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x100>)
 8001a08:	f7fe fb86 	bl	8000118 <__udivsi3>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	0019      	movs	r1, r3
 8001a10:	4b1f      	ldr	r3, [pc, #124]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	227f      	movs	r2, #127	@ 0x7f
 8001a18:	4013      	ands	r3, r2
 8001a1a:	434b      	muls	r3, r1
 8001a1c:	617b      	str	r3, [r7, #20]
        break;
 8001a1e:	e00d      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	481c      	ldr	r0, [pc, #112]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a24:	f7fe fb78 	bl	8000118 <__udivsi3>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	227f      	movs	r2, #127	@ 0x7f
 8001a34:	4013      	ands	r3, r2
 8001a36:	434b      	muls	r3, r1
 8001a38:	617b      	str	r3, [r7, #20]
        break;
 8001a3a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a3c:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0f5b      	lsrs	r3, r3, #29
 8001a42:	2207      	movs	r2, #7
 8001a44:	4013      	ands	r3, r2
 8001a46:	3301      	adds	r3, #1
 8001a48:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	6978      	ldr	r0, [r7, #20]
 8001a4e:	f7fe fb63 	bl	8000118 <__udivsi3>
 8001a52:	0003      	movs	r3, r0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	e015      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a58:	4b0d      	ldr	r3, [pc, #52]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2238      	movs	r2, #56	@ 0x38
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b20      	cmp	r3, #32
 8001a62:	d103      	bne.n	8001a6c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a6c:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2238      	movs	r2, #56	@ 0x38
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b18      	cmp	r3, #24
 8001a76:	d103      	bne.n	8001a80 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a78:	23fa      	movs	r3, #250	@ 0xfa
 8001a7a:	01db      	lsls	r3, r3, #7
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	e001      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a84:	693b      	ldr	r3, [r7, #16]
}
 8001a86:	0018      	movs	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b006      	add	sp, #24
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	40021000 	.word	0x40021000
 8001a94:	00f42400 	.word	0x00f42400
 8001a98:	007a1200 	.word	0x007a1200

08001a9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aa0:	4b02      	ldr	r3, [pc, #8]	@ (8001aac <HAL_RCC_GetHCLKFreq+0x10>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			@ (mov r8, r8)
 8001aac:	20000000 	.word	0x20000000

08001ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab0:	b5b0      	push	{r4, r5, r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ab4:	f7ff fff2 	bl	8001a9c <HAL_RCC_GetHCLKFreq>
 8001ab8:	0004      	movs	r4, r0
 8001aba:	f7ff fb3f 	bl	800113c <LL_RCC_GetAPB1Prescaler>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	0b1a      	lsrs	r2, r3, #12
 8001ac2:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ac4:	0092      	lsls	r2, r2, #2
 8001ac6:	58d3      	ldr	r3, [r2, r3]
 8001ac8:	221f      	movs	r2, #31
 8001aca:	4013      	ands	r3, r2
 8001acc:	40dc      	lsrs	r4, r3
 8001ace:	0023      	movs	r3, r4
}
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad6:	46c0      	nop			@ (mov r8, r8)
 8001ad8:	080035fc 	.word	0x080035fc

08001adc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ae4:	2313      	movs	r3, #19
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001aec:	2312      	movs	r3, #18
 8001aee:	18fb      	adds	r3, r7, r3
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2380      	movs	r3, #128	@ 0x80
 8001afa:	029b      	lsls	r3, r3, #10
 8001afc:	4013      	ands	r3, r2
 8001afe:	d100      	bne.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001b00:	e0a3      	b.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b02:	2011      	movs	r0, #17
 8001b04:	183b      	adds	r3, r7, r0
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0a:	4bc3      	ldr	r3, [pc, #780]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b0e:	2380      	movs	r3, #128	@ 0x80
 8001b10:	055b      	lsls	r3, r3, #21
 8001b12:	4013      	ands	r3, r2
 8001b14:	d110      	bne.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	4bc0      	ldr	r3, [pc, #768]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b1a:	4bbf      	ldr	r3, [pc, #764]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b1c:	2180      	movs	r1, #128	@ 0x80
 8001b1e:	0549      	lsls	r1, r1, #21
 8001b20:	430a      	orrs	r2, r1
 8001b22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b24:	4bbc      	ldr	r3, [pc, #752]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b28:	2380      	movs	r3, #128	@ 0x80
 8001b2a:	055b      	lsls	r3, r3, #21
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b32:	183b      	adds	r3, r7, r0
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b38:	4bb8      	ldr	r3, [pc, #736]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4bb7      	ldr	r3, [pc, #732]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b3e:	2180      	movs	r1, #128	@ 0x80
 8001b40:	0049      	lsls	r1, r1, #1
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b46:	f7ff f839 	bl	8000bbc <HAL_GetTick>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b4e:	e00b      	b.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b50:	f7ff f834 	bl	8000bbc <HAL_GetTick>
 8001b54:	0002      	movs	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d904      	bls.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001b5e:	2313      	movs	r3, #19
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	2203      	movs	r2, #3
 8001b64:	701a      	strb	r2, [r3, #0]
        break;
 8001b66:	e005      	b.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b68:	4bac      	ldr	r3, [pc, #688]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	2380      	movs	r3, #128	@ 0x80
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4013      	ands	r3, r2
 8001b72:	d0ed      	beq.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001b74:	2313      	movs	r3, #19
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d154      	bne.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b7e:	4ba6      	ldr	r3, [pc, #664]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b82:	23c0      	movs	r3, #192	@ 0xc0
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d019      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d014      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b9a:	4b9f      	ldr	r3, [pc, #636]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b9e:	4aa0      	ldr	r2, [pc, #640]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ba4:	4b9c      	ldr	r3, [pc, #624]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ba6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ba8:	4b9b      	ldr	r3, [pc, #620]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001baa:	2180      	movs	r1, #128	@ 0x80
 8001bac:	0249      	lsls	r1, r1, #9
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001bb2:	4b99      	ldr	r3, [pc, #612]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bb6:	4b98      	ldr	r3, [pc, #608]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bb8:	499a      	ldr	r1, [pc, #616]	@ (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001bba:	400a      	ands	r2, r1
 8001bbc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001bbe:	4b96      	ldr	r3, [pc, #600]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d016      	beq.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7fe fff6 	bl	8000bbc <HAL_GetTick>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bd4:	e00c      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7fe fff1 	bl	8000bbc <HAL_GetTick>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	4a91      	ldr	r2, [pc, #580]	@ (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d904      	bls.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001be6:	2313      	movs	r3, #19
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	2203      	movs	r2, #3
 8001bec:	701a      	strb	r2, [r3, #0]
            break;
 8001bee:	e004      	b.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf0:	4b89      	ldr	r3, [pc, #548]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d0ed      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001bfa:	2313      	movs	r3, #19
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10a      	bne.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c04:	4b84      	ldr	r3, [pc, #528]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c08:	4a85      	ldr	r2, [pc, #532]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c12:	4b81      	ldr	r3, [pc, #516]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c14:	430a      	orrs	r2, r1
 8001c16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c18:	e00c      	b.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c1a:	2312      	movs	r3, #18
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	2213      	movs	r2, #19
 8001c20:	18ba      	adds	r2, r7, r2
 8001c22:	7812      	ldrb	r2, [r2, #0]
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	e005      	b.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c28:	2312      	movs	r3, #18
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	2213      	movs	r2, #19
 8001c2e:	18ba      	adds	r2, r7, r2
 8001c30:	7812      	ldrb	r2, [r2, #0]
 8001c32:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c34:	2311      	movs	r3, #17
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d105      	bne.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3e:	4b76      	ldr	r3, [pc, #472]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c42:	4b75      	ldr	r3, [pc, #468]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c44:	4979      	ldr	r1, [pc, #484]	@ (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001c46:	400a      	ands	r2, r1
 8001c48:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4013      	ands	r3, r2
 8001c52:	d009      	beq.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c54:	4b70      	ldr	r3, [pc, #448]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c58:	2203      	movs	r2, #3
 8001c5a:	4393      	bics	r3, r2
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	4b6d      	ldr	r3, [pc, #436]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c64:	430a      	orrs	r2, r1
 8001c66:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d009      	beq.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c72:	4b69      	ldr	r3, [pc, #420]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c76:	220c      	movs	r2, #12
 8001c78:	4393      	bics	r3, r2
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	4b65      	ldr	r3, [pc, #404]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c82:	430a      	orrs	r2, r1
 8001c84:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2210      	movs	r2, #16
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d009      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c90:	4b61      	ldr	r3, [pc, #388]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c94:	4a66      	ldr	r2, [pc, #408]	@ (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	4b5e      	ldr	r3, [pc, #376]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2380      	movs	r3, #128	@ 0x80
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4013      	ands	r3, r2
 8001cae:	d009      	beq.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001cb0:	4b59      	ldr	r3, [pc, #356]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb4:	4a5f      	ldr	r2, [pc, #380]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	0019      	movs	r1, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699a      	ldr	r2, [r3, #24]
 8001cbe:	4b56      	ldr	r3, [pc, #344]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	@ 0x80
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d009      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001cd0:	4b51      	ldr	r3, [pc, #324]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd4:	4a58      	ldr	r2, [pc, #352]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	0019      	movs	r1, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69da      	ldr	r2, [r3, #28]
 8001cde:	4b4e      	ldr	r3, [pc, #312]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	4013      	ands	r3, r2
 8001cec:	d009      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cee:	4b4a      	ldr	r3, [pc, #296]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf2:	4a52      	ldr	r2, [pc, #328]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	4b46      	ldr	r3, [pc, #280]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	2380      	movs	r3, #128	@ 0x80
 8001d08:	01db      	lsls	r3, r3, #7
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d015      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d0e:	4b42      	ldr	r3, [pc, #264]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	0899      	lsrs	r1, r3, #2
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1a      	ldr	r2, [r3, #32]
 8001d1a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1a      	ldr	r2, [r3, #32]
 8001d24:	2380      	movs	r3, #128	@ 0x80
 8001d26:	05db      	lsls	r3, r3, #23
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d106      	bne.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	4b39      	ldr	r3, [pc, #228]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d32:	2180      	movs	r1, #128	@ 0x80
 8001d34:	0249      	lsls	r1, r1, #9
 8001d36:	430a      	orrs	r2, r1
 8001d38:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	@ 0x80
 8001d40:	031b      	lsls	r3, r3, #12
 8001d42:	4013      	ands	r3, r2
 8001d44:	d009      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d46:	4b34      	ldr	r3, [pc, #208]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d4a:	2240      	movs	r2, #64	@ 0x40
 8001d4c:	4393      	bics	r3, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d54:	4b30      	ldr	r3, [pc, #192]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d56:	430a      	orrs	r2, r1
 8001d58:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	2380      	movs	r3, #128	@ 0x80
 8001d60:	039b      	lsls	r3, r3, #14
 8001d62:	4013      	ands	r3, r2
 8001d64:	d016      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001d66:	4b2c      	ldr	r3, [pc, #176]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d6a:	4a35      	ldr	r2, [pc, #212]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	0019      	movs	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d74:	4b28      	ldr	r3, [pc, #160]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d76:	430a      	orrs	r2, r1
 8001d78:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d7e:	2380      	movs	r3, #128	@ 0x80
 8001d80:	03db      	lsls	r3, r3, #15
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d106      	bne.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001d86:	4b24      	ldr	r3, [pc, #144]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	4b23      	ldr	r3, [pc, #140]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d8c:	2180      	movs	r1, #128	@ 0x80
 8001d8e:	0449      	lsls	r1, r1, #17
 8001d90:	430a      	orrs	r2, r1
 8001d92:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	03db      	lsls	r3, r3, #15
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d016      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001da0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da4:	4a27      	ldr	r2, [pc, #156]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dae:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001db0:	430a      	orrs	r2, r1
 8001db2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001db8:	2380      	movs	r3, #128	@ 0x80
 8001dba:	045b      	lsls	r3, r3, #17
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d106      	bne.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001dc0:	4b15      	ldr	r3, [pc, #84]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	4b14      	ldr	r3, [pc, #80]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dc6:	2180      	movs	r1, #128	@ 0x80
 8001dc8:	0449      	lsls	r1, r1, #17
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	2380      	movs	r3, #128	@ 0x80
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d016      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001dda:	4b0f      	ldr	r3, [pc, #60]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dde:	4a1a      	ldr	r2, [pc, #104]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	0019      	movs	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dea:	430a      	orrs	r2, r1
 8001dec:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695a      	ldr	r2, [r3, #20]
 8001df2:	2380      	movs	r3, #128	@ 0x80
 8001df4:	01db      	lsls	r3, r3, #7
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d106      	bne.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001dfa:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e00:	2180      	movs	r1, #128	@ 0x80
 8001e02:	0249      	lsls	r1, r1, #9
 8001e04:	430a      	orrs	r2, r1
 8001e06:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001e08:	2312      	movs	r3, #18
 8001e0a:	18fb      	adds	r3, r7, r3
 8001e0c:	781b      	ldrb	r3, [r3, #0]
}
 8001e0e:	0018      	movs	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b006      	add	sp, #24
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			@ (mov r8, r8)
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	fffffcff 	.word	0xfffffcff
 8001e24:	fffeffff 	.word	0xfffeffff
 8001e28:	00001388 	.word	0x00001388
 8001e2c:	efffffff 	.word	0xefffffff
 8001e30:	fffff3ff 	.word	0xfffff3ff
 8001e34:	fff3ffff 	.word	0xfff3ffff
 8001e38:	ffcfffff 	.word	0xffcfffff
 8001e3c:	ffffcfff 	.word	0xffffcfff
 8001e40:	ffbfffff 	.word	0xffbfffff
 8001e44:	feffffff 	.word	0xfeffffff
 8001e48:	ffff3fff 	.word	0xffff3fff

08001e4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e046      	b.n	8001eec <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2288      	movs	r2, #136	@ 0x88
 8001e62:	589b      	ldr	r3, [r3, r2]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d107      	bne.n	8001e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2284      	movs	r2, #132	@ 0x84
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	0018      	movs	r0, r3
 8001e74:	f7fe fd46 	bl	8000904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2288      	movs	r2, #136	@ 0x88
 8001e7c:	2124      	movs	r1, #36	@ 0x24
 8001e7e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	438a      	bics	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f000 fb8e 	bl	80025bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f000 f8cc 	bl	8002040 <UART_SetConfig>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e01c      	b.n	8001eec <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	490d      	ldr	r1, [pc, #52]	@ (8001ef4 <HAL_UART_Init+0xa8>)
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	212a      	movs	r1, #42	@ 0x2a
 8001ece:	438a      	bics	r2, r1
 8001ed0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2101      	movs	r1, #1
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f000 fc1d 	bl	8002724 <UART_CheckIdleState>
 8001eea:	0003      	movs	r3, r0
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b002      	add	sp, #8
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	ffffb7ff 	.word	0xffffb7ff

08001ef8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	@ 0x28
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	1dbb      	adds	r3, r7, #6
 8001f06:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2288      	movs	r2, #136	@ 0x88
 8001f0c:	589b      	ldr	r3, [r3, r2]
 8001f0e:	2b20      	cmp	r3, #32
 8001f10:	d000      	beq.n	8001f14 <HAL_UART_Transmit+0x1c>
 8001f12:	e090      	b.n	8002036 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_UART_Transmit+0x2a>
 8001f1a:	1dbb      	adds	r3, r7, #6
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e088      	b.n	8002038 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	2380      	movs	r3, #128	@ 0x80
 8001f2c:	015b      	lsls	r3, r3, #5
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d109      	bne.n	8001f46 <HAL_UART_Transmit+0x4e>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d105      	bne.n	8001f46 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d001      	beq.n	8001f46 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e078      	b.n	8002038 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2290      	movs	r2, #144	@ 0x90
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2288      	movs	r2, #136	@ 0x88
 8001f52:	2121      	movs	r1, #33	@ 0x21
 8001f54:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f56:	f7fe fe31 	bl	8000bbc <HAL_GetTick>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1dba      	adds	r2, r7, #6
 8001f62:	2154      	movs	r1, #84	@ 0x54
 8001f64:	8812      	ldrh	r2, [r2, #0]
 8001f66:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	1dba      	adds	r2, r7, #6
 8001f6c:	2156      	movs	r1, #86	@ 0x56
 8001f6e:	8812      	ldrh	r2, [r2, #0]
 8001f70:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	2380      	movs	r3, #128	@ 0x80
 8001f78:	015b      	lsls	r3, r3, #5
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d108      	bne.n	8001f90 <HAL_UART_Transmit+0x98>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d104      	bne.n	8001f90 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	61bb      	str	r3, [r7, #24]
 8001f8e:	e003      	b.n	8001f98 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f98:	e030      	b.n	8001ffc <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	0013      	movs	r3, r2
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2180      	movs	r1, #128	@ 0x80
 8001fa8:	f000 fc66 	bl	8002878 <UART_WaitOnFlagUntilTimeout>
 8001fac:	1e03      	subs	r3, r0, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2288      	movs	r2, #136	@ 0x88
 8001fb4:	2120      	movs	r1, #32
 8001fb6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e03d      	b.n	8002038 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10b      	bne.n	8001fda <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	001a      	movs	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	05d2      	lsls	r2, r2, #23
 8001fce:	0dd2      	lsrs	r2, r2, #23
 8001fd0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	61bb      	str	r3, [r7, #24]
 8001fd8:	e007      	b.n	8001fea <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	781a      	ldrb	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2256      	movs	r2, #86	@ 0x56
 8001fee:	5a9b      	ldrh	r3, [r3, r2]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b299      	uxth	r1, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2256      	movs	r2, #86	@ 0x56
 8001ffa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2256      	movs	r2, #86	@ 0x56
 8002000:	5a9b      	ldrh	r3, [r3, r2]
 8002002:	b29b      	uxth	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1c8      	bne.n	8001f9a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	0013      	movs	r3, r2
 8002012:	2200      	movs	r2, #0
 8002014:	2140      	movs	r1, #64	@ 0x40
 8002016:	f000 fc2f 	bl	8002878 <UART_WaitOnFlagUntilTimeout>
 800201a:	1e03      	subs	r3, r0, #0
 800201c:	d005      	beq.n	800202a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2288      	movs	r2, #136	@ 0x88
 8002022:	2120      	movs	r1, #32
 8002024:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e006      	b.n	8002038 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2288      	movs	r2, #136	@ 0x88
 800202e:	2120      	movs	r1, #32
 8002030:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e000      	b.n	8002038 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002036:	2302      	movs	r3, #2
  }
}
 8002038:	0018      	movs	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	b008      	add	sp, #32
 800203e:	bd80      	pop	{r7, pc}

08002040 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002040:	b5b0      	push	{r4, r5, r7, lr}
 8002042:	b090      	sub	sp, #64	@ 0x40
 8002044:	af00      	add	r7, sp, #0
 8002046:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002048:	231a      	movs	r3, #26
 800204a:	2220      	movs	r2, #32
 800204c:	189b      	adds	r3, r3, r2
 800204e:	19db      	adds	r3, r3, r7
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	431a      	orrs	r2, r3
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	431a      	orrs	r2, r3
 8002064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	4313      	orrs	r3, r2
 800206a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4aaf      	ldr	r2, [pc, #700]	@ (8002330 <UART_SetConfig+0x2f0>)
 8002074:	4013      	ands	r3, r2
 8002076:	0019      	movs	r1, r3
 8002078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800207e:	430b      	orrs	r3, r1
 8002080:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4aaa      	ldr	r2, [pc, #680]	@ (8002334 <UART_SetConfig+0x2f4>)
 800208a:	4013      	ands	r3, r2
 800208c:	0018      	movs	r0, r3
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	68d9      	ldr	r1, [r3, #12]
 8002092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	0003      	movs	r3, r0
 8002098:	430b      	orrs	r3, r1
 800209a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4aa4      	ldr	r2, [pc, #656]	@ (8002338 <UART_SetConfig+0x2f8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d004      	beq.n	80020b6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020b2:	4313      	orrs	r3, r2
 80020b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4a9f      	ldr	r2, [pc, #636]	@ (800233c <UART_SetConfig+0x2fc>)
 80020be:	4013      	ands	r3, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020c8:	430b      	orrs	r3, r1
 80020ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d2:	220f      	movs	r2, #15
 80020d4:	4393      	bics	r3, r2
 80020d6:	0018      	movs	r0, r3
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80020dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	0003      	movs	r3, r0
 80020e2:	430b      	orrs	r3, r1
 80020e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a95      	ldr	r2, [pc, #596]	@ (8002340 <UART_SetConfig+0x300>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d131      	bne.n	8002154 <UART_SetConfig+0x114>
 80020f0:	4b94      	ldr	r3, [pc, #592]	@ (8002344 <UART_SetConfig+0x304>)
 80020f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f4:	2203      	movs	r2, #3
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d01d      	beq.n	8002138 <UART_SetConfig+0xf8>
 80020fc:	d823      	bhi.n	8002146 <UART_SetConfig+0x106>
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d00c      	beq.n	800211c <UART_SetConfig+0xdc>
 8002102:	d820      	bhi.n	8002146 <UART_SetConfig+0x106>
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <UART_SetConfig+0xce>
 8002108:	2b01      	cmp	r3, #1
 800210a:	d00e      	beq.n	800212a <UART_SetConfig+0xea>
 800210c:	e01b      	b.n	8002146 <UART_SetConfig+0x106>
 800210e:	231b      	movs	r3, #27
 8002110:	2220      	movs	r2, #32
 8002112:	189b      	adds	r3, r3, r2
 8002114:	19db      	adds	r3, r3, r7
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
 800211a:	e0b4      	b.n	8002286 <UART_SetConfig+0x246>
 800211c:	231b      	movs	r3, #27
 800211e:	2220      	movs	r2, #32
 8002120:	189b      	adds	r3, r3, r2
 8002122:	19db      	adds	r3, r3, r7
 8002124:	2202      	movs	r2, #2
 8002126:	701a      	strb	r2, [r3, #0]
 8002128:	e0ad      	b.n	8002286 <UART_SetConfig+0x246>
 800212a:	231b      	movs	r3, #27
 800212c:	2220      	movs	r2, #32
 800212e:	189b      	adds	r3, r3, r2
 8002130:	19db      	adds	r3, r3, r7
 8002132:	2204      	movs	r2, #4
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e0a6      	b.n	8002286 <UART_SetConfig+0x246>
 8002138:	231b      	movs	r3, #27
 800213a:	2220      	movs	r2, #32
 800213c:	189b      	adds	r3, r3, r2
 800213e:	19db      	adds	r3, r3, r7
 8002140:	2208      	movs	r2, #8
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e09f      	b.n	8002286 <UART_SetConfig+0x246>
 8002146:	231b      	movs	r3, #27
 8002148:	2220      	movs	r2, #32
 800214a:	189b      	adds	r3, r3, r2
 800214c:	19db      	adds	r3, r3, r7
 800214e:	2210      	movs	r2, #16
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e098      	b.n	8002286 <UART_SetConfig+0x246>
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a7b      	ldr	r2, [pc, #492]	@ (8002348 <UART_SetConfig+0x308>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d131      	bne.n	80021c2 <UART_SetConfig+0x182>
 800215e:	4b79      	ldr	r3, [pc, #484]	@ (8002344 <UART_SetConfig+0x304>)
 8002160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002162:	220c      	movs	r2, #12
 8002164:	4013      	ands	r3, r2
 8002166:	2b0c      	cmp	r3, #12
 8002168:	d01d      	beq.n	80021a6 <UART_SetConfig+0x166>
 800216a:	d823      	bhi.n	80021b4 <UART_SetConfig+0x174>
 800216c:	2b08      	cmp	r3, #8
 800216e:	d00c      	beq.n	800218a <UART_SetConfig+0x14a>
 8002170:	d820      	bhi.n	80021b4 <UART_SetConfig+0x174>
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <UART_SetConfig+0x13c>
 8002176:	2b04      	cmp	r3, #4
 8002178:	d00e      	beq.n	8002198 <UART_SetConfig+0x158>
 800217a:	e01b      	b.n	80021b4 <UART_SetConfig+0x174>
 800217c:	231b      	movs	r3, #27
 800217e:	2220      	movs	r2, #32
 8002180:	189b      	adds	r3, r3, r2
 8002182:	19db      	adds	r3, r3, r7
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	e07d      	b.n	8002286 <UART_SetConfig+0x246>
 800218a:	231b      	movs	r3, #27
 800218c:	2220      	movs	r2, #32
 800218e:	189b      	adds	r3, r3, r2
 8002190:	19db      	adds	r3, r3, r7
 8002192:	2202      	movs	r2, #2
 8002194:	701a      	strb	r2, [r3, #0]
 8002196:	e076      	b.n	8002286 <UART_SetConfig+0x246>
 8002198:	231b      	movs	r3, #27
 800219a:	2220      	movs	r2, #32
 800219c:	189b      	adds	r3, r3, r2
 800219e:	19db      	adds	r3, r3, r7
 80021a0:	2204      	movs	r2, #4
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e06f      	b.n	8002286 <UART_SetConfig+0x246>
 80021a6:	231b      	movs	r3, #27
 80021a8:	2220      	movs	r2, #32
 80021aa:	189b      	adds	r3, r3, r2
 80021ac:	19db      	adds	r3, r3, r7
 80021ae:	2208      	movs	r2, #8
 80021b0:	701a      	strb	r2, [r3, #0]
 80021b2:	e068      	b.n	8002286 <UART_SetConfig+0x246>
 80021b4:	231b      	movs	r3, #27
 80021b6:	2220      	movs	r2, #32
 80021b8:	189b      	adds	r3, r3, r2
 80021ba:	19db      	adds	r3, r3, r7
 80021bc:	2210      	movs	r2, #16
 80021be:	701a      	strb	r2, [r3, #0]
 80021c0:	e061      	b.n	8002286 <UART_SetConfig+0x246>
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a61      	ldr	r2, [pc, #388]	@ (800234c <UART_SetConfig+0x30c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d106      	bne.n	80021da <UART_SetConfig+0x19a>
 80021cc:	231b      	movs	r3, #27
 80021ce:	2220      	movs	r2, #32
 80021d0:	189b      	adds	r3, r3, r2
 80021d2:	19db      	adds	r3, r3, r7
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
 80021d8:	e055      	b.n	8002286 <UART_SetConfig+0x246>
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a5c      	ldr	r2, [pc, #368]	@ (8002350 <UART_SetConfig+0x310>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d106      	bne.n	80021f2 <UART_SetConfig+0x1b2>
 80021e4:	231b      	movs	r3, #27
 80021e6:	2220      	movs	r2, #32
 80021e8:	189b      	adds	r3, r3, r2
 80021ea:	19db      	adds	r3, r3, r7
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
 80021f0:	e049      	b.n	8002286 <UART_SetConfig+0x246>
 80021f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a50      	ldr	r2, [pc, #320]	@ (8002338 <UART_SetConfig+0x2f8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d13e      	bne.n	800227a <UART_SetConfig+0x23a>
 80021fc:	4b51      	ldr	r3, [pc, #324]	@ (8002344 <UART_SetConfig+0x304>)
 80021fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002200:	23c0      	movs	r3, #192	@ 0xc0
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	4013      	ands	r3, r2
 8002206:	22c0      	movs	r2, #192	@ 0xc0
 8002208:	0112      	lsls	r2, r2, #4
 800220a:	4293      	cmp	r3, r2
 800220c:	d027      	beq.n	800225e <UART_SetConfig+0x21e>
 800220e:	22c0      	movs	r2, #192	@ 0xc0
 8002210:	0112      	lsls	r2, r2, #4
 8002212:	4293      	cmp	r3, r2
 8002214:	d82a      	bhi.n	800226c <UART_SetConfig+0x22c>
 8002216:	2280      	movs	r2, #128	@ 0x80
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	4293      	cmp	r3, r2
 800221c:	d011      	beq.n	8002242 <UART_SetConfig+0x202>
 800221e:	2280      	movs	r2, #128	@ 0x80
 8002220:	0112      	lsls	r2, r2, #4
 8002222:	4293      	cmp	r3, r2
 8002224:	d822      	bhi.n	800226c <UART_SetConfig+0x22c>
 8002226:	2b00      	cmp	r3, #0
 8002228:	d004      	beq.n	8002234 <UART_SetConfig+0x1f4>
 800222a:	2280      	movs	r2, #128	@ 0x80
 800222c:	00d2      	lsls	r2, r2, #3
 800222e:	4293      	cmp	r3, r2
 8002230:	d00e      	beq.n	8002250 <UART_SetConfig+0x210>
 8002232:	e01b      	b.n	800226c <UART_SetConfig+0x22c>
 8002234:	231b      	movs	r3, #27
 8002236:	2220      	movs	r2, #32
 8002238:	189b      	adds	r3, r3, r2
 800223a:	19db      	adds	r3, r3, r7
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	e021      	b.n	8002286 <UART_SetConfig+0x246>
 8002242:	231b      	movs	r3, #27
 8002244:	2220      	movs	r2, #32
 8002246:	189b      	adds	r3, r3, r2
 8002248:	19db      	adds	r3, r3, r7
 800224a:	2202      	movs	r2, #2
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	e01a      	b.n	8002286 <UART_SetConfig+0x246>
 8002250:	231b      	movs	r3, #27
 8002252:	2220      	movs	r2, #32
 8002254:	189b      	adds	r3, r3, r2
 8002256:	19db      	adds	r3, r3, r7
 8002258:	2204      	movs	r2, #4
 800225a:	701a      	strb	r2, [r3, #0]
 800225c:	e013      	b.n	8002286 <UART_SetConfig+0x246>
 800225e:	231b      	movs	r3, #27
 8002260:	2220      	movs	r2, #32
 8002262:	189b      	adds	r3, r3, r2
 8002264:	19db      	adds	r3, r3, r7
 8002266:	2208      	movs	r2, #8
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e00c      	b.n	8002286 <UART_SetConfig+0x246>
 800226c:	231b      	movs	r3, #27
 800226e:	2220      	movs	r2, #32
 8002270:	189b      	adds	r3, r3, r2
 8002272:	19db      	adds	r3, r3, r7
 8002274:	2210      	movs	r2, #16
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	e005      	b.n	8002286 <UART_SetConfig+0x246>
 800227a:	231b      	movs	r3, #27
 800227c:	2220      	movs	r2, #32
 800227e:	189b      	adds	r3, r3, r2
 8002280:	19db      	adds	r3, r3, r7
 8002282:	2210      	movs	r2, #16
 8002284:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a2b      	ldr	r2, [pc, #172]	@ (8002338 <UART_SetConfig+0x2f8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d000      	beq.n	8002292 <UART_SetConfig+0x252>
 8002290:	e0a9      	b.n	80023e6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002292:	231b      	movs	r3, #27
 8002294:	2220      	movs	r2, #32
 8002296:	189b      	adds	r3, r3, r2
 8002298:	19db      	adds	r3, r3, r7
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b08      	cmp	r3, #8
 800229e:	d015      	beq.n	80022cc <UART_SetConfig+0x28c>
 80022a0:	dc18      	bgt.n	80022d4 <UART_SetConfig+0x294>
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d00d      	beq.n	80022c2 <UART_SetConfig+0x282>
 80022a6:	dc15      	bgt.n	80022d4 <UART_SetConfig+0x294>
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <UART_SetConfig+0x272>
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d005      	beq.n	80022bc <UART_SetConfig+0x27c>
 80022b0:	e010      	b.n	80022d4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022b2:	f7ff fbfd 	bl	8001ab0 <HAL_RCC_GetPCLK1Freq>
 80022b6:	0003      	movs	r3, r0
 80022b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80022ba:	e014      	b.n	80022e6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022bc:	4b25      	ldr	r3, [pc, #148]	@ (8002354 <UART_SetConfig+0x314>)
 80022be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80022c0:	e011      	b.n	80022e6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022c2:	f7ff fb69 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 80022c6:	0003      	movs	r3, r0
 80022c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80022ca:	e00c      	b.n	80022e6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022cc:	2380      	movs	r3, #128	@ 0x80
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80022d2:	e008      	b.n	80022e6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80022d8:	231a      	movs	r3, #26
 80022da:	2220      	movs	r2, #32
 80022dc:	189b      	adds	r3, r3, r2
 80022de:	19db      	adds	r3, r3, r7
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
        break;
 80022e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80022e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d100      	bne.n	80022ee <UART_SetConfig+0x2ae>
 80022ec:	e14b      	b.n	8002586 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022f2:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <UART_SetConfig+0x318>)
 80022f4:	0052      	lsls	r2, r2, #1
 80022f6:	5ad3      	ldrh	r3, [r2, r3]
 80022f8:	0019      	movs	r1, r3
 80022fa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80022fc:	f7fd ff0c 	bl	8000118 <__udivsi3>
 8002300:	0003      	movs	r3, r0
 8002302:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	0013      	movs	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	189b      	adds	r3, r3, r2
 800230e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002310:	429a      	cmp	r2, r3
 8002312:	d305      	bcc.n	8002320 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800231a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800231c:	429a      	cmp	r2, r3
 800231e:	d91d      	bls.n	800235c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002320:	231a      	movs	r3, #26
 8002322:	2220      	movs	r2, #32
 8002324:	189b      	adds	r3, r3, r2
 8002326:	19db      	adds	r3, r3, r7
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
 800232c:	e12b      	b.n	8002586 <UART_SetConfig+0x546>
 800232e:	46c0      	nop			@ (mov r8, r8)
 8002330:	cfff69f3 	.word	0xcfff69f3
 8002334:	ffffcfff 	.word	0xffffcfff
 8002338:	40008000 	.word	0x40008000
 800233c:	11fff4ff 	.word	0x11fff4ff
 8002340:	40013800 	.word	0x40013800
 8002344:	40021000 	.word	0x40021000
 8002348:	40004400 	.word	0x40004400
 800234c:	40004800 	.word	0x40004800
 8002350:	40004c00 	.word	0x40004c00
 8002354:	00f42400 	.word	0x00f42400
 8002358:	0800361c 	.word	0x0800361c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800235c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
 8002364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002368:	4b92      	ldr	r3, [pc, #584]	@ (80025b4 <UART_SetConfig+0x574>)
 800236a:	0052      	lsls	r2, r2, #1
 800236c:	5ad3      	ldrh	r3, [r2, r3]
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	69b8      	ldr	r0, [r7, #24]
 800237a:	69f9      	ldr	r1, [r7, #28]
 800237c:	f7fe f842 	bl	8000404 <__aeabi_uldivmod>
 8002380:	0002      	movs	r2, r0
 8002382:	000b      	movs	r3, r1
 8002384:	0e11      	lsrs	r1, r2, #24
 8002386:	021d      	lsls	r5, r3, #8
 8002388:	430d      	orrs	r5, r1
 800238a:	0214      	lsls	r4, r2, #8
 800238c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68b8      	ldr	r0, [r7, #8]
 800239a:	68f9      	ldr	r1, [r7, #12]
 800239c:	1900      	adds	r0, r0, r4
 800239e:	4169      	adcs	r1, r5
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	2300      	movs	r3, #0
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f7fe f829 	bl	8000404 <__aeabi_uldivmod>
 80023b2:	0002      	movs	r2, r0
 80023b4:	000b      	movs	r3, r1
 80023b6:	0013      	movs	r3, r2
 80023b8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80023ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023bc:	23c0      	movs	r3, #192	@ 0xc0
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d309      	bcc.n	80023d8 <UART_SetConfig+0x398>
 80023c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023c6:	2380      	movs	r3, #128	@ 0x80
 80023c8:	035b      	lsls	r3, r3, #13
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d204      	bcs.n	80023d8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80023ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	e0d6      	b.n	8002586 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80023d8:	231a      	movs	r3, #26
 80023da:	2220      	movs	r2, #32
 80023dc:	189b      	adds	r3, r3, r2
 80023de:	19db      	adds	r3, r3, r7
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	e0cf      	b.n	8002586 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	69da      	ldr	r2, [r3, #28]
 80023ea:	2380      	movs	r3, #128	@ 0x80
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d000      	beq.n	80023f4 <UART_SetConfig+0x3b4>
 80023f2:	e070      	b.n	80024d6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80023f4:	231b      	movs	r3, #27
 80023f6:	2220      	movs	r2, #32
 80023f8:	189b      	adds	r3, r3, r2
 80023fa:	19db      	adds	r3, r3, r7
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d015      	beq.n	800242e <UART_SetConfig+0x3ee>
 8002402:	dc18      	bgt.n	8002436 <UART_SetConfig+0x3f6>
 8002404:	2b04      	cmp	r3, #4
 8002406:	d00d      	beq.n	8002424 <UART_SetConfig+0x3e4>
 8002408:	dc15      	bgt.n	8002436 <UART_SetConfig+0x3f6>
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <UART_SetConfig+0x3d4>
 800240e:	2b02      	cmp	r3, #2
 8002410:	d005      	beq.n	800241e <UART_SetConfig+0x3de>
 8002412:	e010      	b.n	8002436 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002414:	f7ff fb4c 	bl	8001ab0 <HAL_RCC_GetPCLK1Freq>
 8002418:	0003      	movs	r3, r0
 800241a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800241c:	e014      	b.n	8002448 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800241e:	4b66      	ldr	r3, [pc, #408]	@ (80025b8 <UART_SetConfig+0x578>)
 8002420:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002422:	e011      	b.n	8002448 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002424:	f7ff fab8 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 8002428:	0003      	movs	r3, r0
 800242a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800242c:	e00c      	b.n	8002448 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	021b      	lsls	r3, r3, #8
 8002432:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002434:	e008      	b.n	8002448 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800243a:	231a      	movs	r3, #26
 800243c:	2220      	movs	r2, #32
 800243e:	189b      	adds	r3, r3, r2
 8002440:	19db      	adds	r3, r3, r7
 8002442:	2201      	movs	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
        break;
 8002446:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800244a:	2b00      	cmp	r3, #0
 800244c:	d100      	bne.n	8002450 <UART_SetConfig+0x410>
 800244e:	e09a      	b.n	8002586 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002454:	4b57      	ldr	r3, [pc, #348]	@ (80025b4 <UART_SetConfig+0x574>)
 8002456:	0052      	lsls	r2, r2, #1
 8002458:	5ad3      	ldrh	r3, [r2, r3]
 800245a:	0019      	movs	r1, r3
 800245c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800245e:	f7fd fe5b 	bl	8000118 <__udivsi3>
 8002462:	0003      	movs	r3, r0
 8002464:	005a      	lsls	r2, r3, #1
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	085b      	lsrs	r3, r3, #1
 800246c:	18d2      	adds	r2, r2, r3
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	0019      	movs	r1, r3
 8002474:	0010      	movs	r0, r2
 8002476:	f7fd fe4f 	bl	8000118 <__udivsi3>
 800247a:	0003      	movs	r3, r0
 800247c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800247e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002480:	2b0f      	cmp	r3, #15
 8002482:	d921      	bls.n	80024c8 <UART_SetConfig+0x488>
 8002484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002486:	2380      	movs	r3, #128	@ 0x80
 8002488:	025b      	lsls	r3, r3, #9
 800248a:	429a      	cmp	r2, r3
 800248c:	d21c      	bcs.n	80024c8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800248e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002490:	b29a      	uxth	r2, r3
 8002492:	200e      	movs	r0, #14
 8002494:	2420      	movs	r4, #32
 8002496:	1903      	adds	r3, r0, r4
 8002498:	19db      	adds	r3, r3, r7
 800249a:	210f      	movs	r1, #15
 800249c:	438a      	bics	r2, r1
 800249e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a2:	085b      	lsrs	r3, r3, #1
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2207      	movs	r2, #7
 80024a8:	4013      	ands	r3, r2
 80024aa:	b299      	uxth	r1, r3
 80024ac:	1903      	adds	r3, r0, r4
 80024ae:	19db      	adds	r3, r3, r7
 80024b0:	1902      	adds	r2, r0, r4
 80024b2:	19d2      	adds	r2, r2, r7
 80024b4:	8812      	ldrh	r2, [r2, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	1902      	adds	r2, r0, r4
 80024c0:	19d2      	adds	r2, r2, r7
 80024c2:	8812      	ldrh	r2, [r2, #0]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	e05e      	b.n	8002586 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80024c8:	231a      	movs	r3, #26
 80024ca:	2220      	movs	r2, #32
 80024cc:	189b      	adds	r3, r3, r2
 80024ce:	19db      	adds	r3, r3, r7
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
 80024d4:	e057      	b.n	8002586 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80024d6:	231b      	movs	r3, #27
 80024d8:	2220      	movs	r2, #32
 80024da:	189b      	adds	r3, r3, r2
 80024dc:	19db      	adds	r3, r3, r7
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d015      	beq.n	8002510 <UART_SetConfig+0x4d0>
 80024e4:	dc18      	bgt.n	8002518 <UART_SetConfig+0x4d8>
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d00d      	beq.n	8002506 <UART_SetConfig+0x4c6>
 80024ea:	dc15      	bgt.n	8002518 <UART_SetConfig+0x4d8>
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <UART_SetConfig+0x4b6>
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d005      	beq.n	8002500 <UART_SetConfig+0x4c0>
 80024f4:	e010      	b.n	8002518 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024f6:	f7ff fadb 	bl	8001ab0 <HAL_RCC_GetPCLK1Freq>
 80024fa:	0003      	movs	r3, r0
 80024fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80024fe:	e014      	b.n	800252a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002500:	4b2d      	ldr	r3, [pc, #180]	@ (80025b8 <UART_SetConfig+0x578>)
 8002502:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002504:	e011      	b.n	800252a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002506:	f7ff fa47 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 800250a:	0003      	movs	r3, r0
 800250c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800250e:	e00c      	b.n	800252a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002510:	2380      	movs	r3, #128	@ 0x80
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002516:	e008      	b.n	800252a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800251c:	231a      	movs	r3, #26
 800251e:	2220      	movs	r2, #32
 8002520:	189b      	adds	r3, r3, r2
 8002522:	19db      	adds	r3, r3, r7
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
        break;
 8002528:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800252a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800252c:	2b00      	cmp	r3, #0
 800252e:	d02a      	beq.n	8002586 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002534:	4b1f      	ldr	r3, [pc, #124]	@ (80025b4 <UART_SetConfig+0x574>)
 8002536:	0052      	lsls	r2, r2, #1
 8002538:	5ad3      	ldrh	r3, [r2, r3]
 800253a:	0019      	movs	r1, r3
 800253c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800253e:	f7fd fdeb 	bl	8000118 <__udivsi3>
 8002542:	0003      	movs	r3, r0
 8002544:	001a      	movs	r2, r3
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	18d2      	adds	r2, r2, r3
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	0019      	movs	r1, r3
 8002554:	0010      	movs	r0, r2
 8002556:	f7fd fddf 	bl	8000118 <__udivsi3>
 800255a:	0003      	movs	r3, r0
 800255c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800255e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002560:	2b0f      	cmp	r3, #15
 8002562:	d90a      	bls.n	800257a <UART_SetConfig+0x53a>
 8002564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	025b      	lsls	r3, r3, #9
 800256a:	429a      	cmp	r2, r3
 800256c:	d205      	bcs.n	800257a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800256e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002570:	b29a      	uxth	r2, r3
 8002572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	60da      	str	r2, [r3, #12]
 8002578:	e005      	b.n	8002586 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800257a:	231a      	movs	r3, #26
 800257c:	2220      	movs	r2, #32
 800257e:	189b      	adds	r3, r3, r2
 8002580:	19db      	adds	r3, r3, r7
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	226a      	movs	r2, #106	@ 0x6a
 800258a:	2101      	movs	r1, #1
 800258c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	2268      	movs	r2, #104	@ 0x68
 8002592:	2101      	movs	r1, #1
 8002594:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002598:	2200      	movs	r2, #0
 800259a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	2200      	movs	r2, #0
 80025a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80025a2:	231a      	movs	r3, #26
 80025a4:	2220      	movs	r2, #32
 80025a6:	189b      	adds	r3, r3, r2
 80025a8:	19db      	adds	r3, r3, r7
 80025aa:	781b      	ldrb	r3, [r3, #0]
}
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b010      	add	sp, #64	@ 0x40
 80025b2:	bdb0      	pop	{r4, r5, r7, pc}
 80025b4:	0800361c 	.word	0x0800361c
 80025b8:	00f42400 	.word	0x00f42400

080025bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c8:	2208      	movs	r2, #8
 80025ca:	4013      	ands	r3, r2
 80025cc:	d00b      	beq.n	80025e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002700 <UART_AdvFeatureConfig+0x144>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ea:	2201      	movs	r2, #1
 80025ec:	4013      	ands	r3, r2
 80025ee:	d00b      	beq.n	8002608 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4a43      	ldr	r2, [pc, #268]	@ (8002704 <UART_AdvFeatureConfig+0x148>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	0019      	movs	r1, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260c:	2202      	movs	r2, #2
 800260e:	4013      	ands	r3, r2
 8002610:	d00b      	beq.n	800262a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4a3b      	ldr	r2, [pc, #236]	@ (8002708 <UART_AdvFeatureConfig+0x14c>)
 800261a:	4013      	ands	r3, r2
 800261c:	0019      	movs	r1, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262e:	2204      	movs	r2, #4
 8002630:	4013      	ands	r3, r2
 8002632:	d00b      	beq.n	800264c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4a34      	ldr	r2, [pc, #208]	@ (800270c <UART_AdvFeatureConfig+0x150>)
 800263c:	4013      	ands	r3, r2
 800263e:	0019      	movs	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002650:	2210      	movs	r2, #16
 8002652:	4013      	ands	r3, r2
 8002654:	d00b      	beq.n	800266e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4a2c      	ldr	r2, [pc, #176]	@ (8002710 <UART_AdvFeatureConfig+0x154>)
 800265e:	4013      	ands	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002672:	2220      	movs	r2, #32
 8002674:	4013      	ands	r3, r2
 8002676:	d00b      	beq.n	8002690 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	4a25      	ldr	r2, [pc, #148]	@ (8002714 <UART_AdvFeatureConfig+0x158>)
 8002680:	4013      	ands	r3, r2
 8002682:	0019      	movs	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002694:	2240      	movs	r2, #64	@ 0x40
 8002696:	4013      	ands	r3, r2
 8002698:	d01d      	beq.n	80026d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002718 <UART_AdvFeatureConfig+0x15c>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	0019      	movs	r1, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026b6:	2380      	movs	r3, #128	@ 0x80
 80026b8:	035b      	lsls	r3, r3, #13
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d10b      	bne.n	80026d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4a15      	ldr	r2, [pc, #84]	@ (800271c <UART_AdvFeatureConfig+0x160>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026da:	2280      	movs	r2, #128	@ 0x80
 80026dc:	4013      	ands	r3, r2
 80026de:	d00b      	beq.n	80026f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002720 <UART_AdvFeatureConfig+0x164>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	0019      	movs	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	605a      	str	r2, [r3, #4]
  }
}
 80026f8:	46c0      	nop			@ (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b002      	add	sp, #8
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	ffff7fff 	.word	0xffff7fff
 8002704:	fffdffff 	.word	0xfffdffff
 8002708:	fffeffff 	.word	0xfffeffff
 800270c:	fffbffff 	.word	0xfffbffff
 8002710:	ffffefff 	.word	0xffffefff
 8002714:	ffffdfff 	.word	0xffffdfff
 8002718:	ffefffff 	.word	0xffefffff
 800271c:	ff9fffff 	.word	0xff9fffff
 8002720:	fff7ffff 	.word	0xfff7ffff

08002724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b092      	sub	sp, #72	@ 0x48
 8002728:	af02      	add	r7, sp, #8
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2290      	movs	r2, #144	@ 0x90
 8002730:	2100      	movs	r1, #0
 8002732:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002734:	f7fe fa42 	bl	8000bbc <HAL_GetTick>
 8002738:	0003      	movs	r3, r0
 800273a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2208      	movs	r2, #8
 8002744:	4013      	ands	r3, r2
 8002746:	2b08      	cmp	r3, #8
 8002748:	d12d      	bne.n	80027a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800274a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800274c:	2280      	movs	r2, #128	@ 0x80
 800274e:	0391      	lsls	r1, r2, #14
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	4a47      	ldr	r2, [pc, #284]	@ (8002870 <UART_CheckIdleState+0x14c>)
 8002754:	9200      	str	r2, [sp, #0]
 8002756:	2200      	movs	r2, #0
 8002758:	f000 f88e 	bl	8002878 <UART_WaitOnFlagUntilTimeout>
 800275c:	1e03      	subs	r3, r0, #0
 800275e:	d022      	beq.n	80027a6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002760:	f3ef 8310 	mrs	r3, PRIMASK
 8002764:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002768:	63bb      	str	r3, [r7, #56]	@ 0x38
 800276a:	2301      	movs	r3, #1
 800276c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800276e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002770:	f383 8810 	msr	PRIMASK, r3
}
 8002774:	46c0      	nop			@ (mov r8, r8)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2180      	movs	r1, #128	@ 0x80
 8002782:	438a      	bics	r2, r1
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800278a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800278c:	f383 8810 	msr	PRIMASK, r3
}
 8002790:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2288      	movs	r2, #136	@ 0x88
 8002796:	2120      	movs	r1, #32
 8002798:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2284      	movs	r2, #132	@ 0x84
 800279e:	2100      	movs	r1, #0
 80027a0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e060      	b.n	8002868 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2204      	movs	r2, #4
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d146      	bne.n	8002842 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027b6:	2280      	movs	r2, #128	@ 0x80
 80027b8:	03d1      	lsls	r1, r2, #15
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002870 <UART_CheckIdleState+0x14c>)
 80027be:	9200      	str	r2, [sp, #0]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f000 f859 	bl	8002878 <UART_WaitOnFlagUntilTimeout>
 80027c6:	1e03      	subs	r3, r0, #0
 80027c8:	d03b      	beq.n	8002842 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ca:	f3ef 8310 	mrs	r3, PRIMASK
 80027ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80027d0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80027d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80027d4:	2301      	movs	r3, #1
 80027d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f383 8810 	msr	PRIMASK, r3
}
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4922      	ldr	r1, [pc, #136]	@ (8002874 <UART_CheckIdleState+0x150>)
 80027ec:	400a      	ands	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f383 8810 	msr	PRIMASK, r3
}
 80027fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002800:	61bb      	str	r3, [r7, #24]
  return(result);
 8002802:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002804:	633b      	str	r3, [r7, #48]	@ 0x30
 8002806:	2301      	movs	r3, #1
 8002808:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f383 8810 	msr	PRIMASK, r3
}
 8002810:	46c0      	nop			@ (mov r8, r8)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2101      	movs	r1, #1
 800281e:	438a      	bics	r2, r1
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002824:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	f383 8810 	msr	PRIMASK, r3
}
 800282c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	228c      	movs	r2, #140	@ 0x8c
 8002832:	2120      	movs	r1, #32
 8002834:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2284      	movs	r2, #132	@ 0x84
 800283a:	2100      	movs	r1, #0
 800283c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e012      	b.n	8002868 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2288      	movs	r2, #136	@ 0x88
 8002846:	2120      	movs	r1, #32
 8002848:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	228c      	movs	r2, #140	@ 0x8c
 800284e:	2120      	movs	r1, #32
 8002850:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2284      	movs	r2, #132	@ 0x84
 8002862:	2100      	movs	r1, #0
 8002864:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	0018      	movs	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	b010      	add	sp, #64	@ 0x40
 800286e:	bd80      	pop	{r7, pc}
 8002870:	01ffffff 	.word	0x01ffffff
 8002874:	fffffedf 	.word	0xfffffedf

08002878 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	1dfb      	adds	r3, r7, #7
 8002886:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002888:	e051      	b.n	800292e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	3301      	adds	r3, #1
 800288e:	d04e      	beq.n	800292e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002890:	f7fe f994 	bl	8000bbc <HAL_GetTick>
 8002894:	0002      	movs	r2, r0
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	429a      	cmp	r2, r3
 800289e:	d302      	bcc.n	80028a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e051      	b.n	800294e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2204      	movs	r2, #4
 80028b2:	4013      	ands	r3, r2
 80028b4:	d03b      	beq.n	800292e <UART_WaitOnFlagUntilTimeout+0xb6>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b80      	cmp	r3, #128	@ 0x80
 80028ba:	d038      	beq.n	800292e <UART_WaitOnFlagUntilTimeout+0xb6>
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b40      	cmp	r3, #64	@ 0x40
 80028c0:	d035      	beq.n	800292e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	2208      	movs	r2, #8
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d111      	bne.n	80028f4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2208      	movs	r2, #8
 80028d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 f83c 	bl	8002958 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2290      	movs	r2, #144	@ 0x90
 80028e4:	2108      	movs	r1, #8
 80028e6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2284      	movs	r2, #132	@ 0x84
 80028ec:	2100      	movs	r1, #0
 80028ee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e02c      	b.n	800294e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69da      	ldr	r2, [r3, #28]
 80028fa:	2380      	movs	r3, #128	@ 0x80
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	401a      	ands	r2, r3
 8002900:	2380      	movs	r3, #128	@ 0x80
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	429a      	cmp	r2, r3
 8002906:	d112      	bne.n	800292e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2280      	movs	r2, #128	@ 0x80
 800290e:	0112      	lsls	r2, r2, #4
 8002910:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	0018      	movs	r0, r3
 8002916:	f000 f81f 	bl	8002958 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2290      	movs	r2, #144	@ 0x90
 800291e:	2120      	movs	r1, #32
 8002920:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2284      	movs	r2, #132	@ 0x84
 8002926:	2100      	movs	r1, #0
 8002928:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e00f      	b.n	800294e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	4013      	ands	r3, r2
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	425a      	negs	r2, r3
 800293e:	4153      	adcs	r3, r2
 8002940:	b2db      	uxtb	r3, r3
 8002942:	001a      	movs	r2, r3
 8002944:	1dfb      	adds	r3, r7, #7
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d09e      	beq.n	800288a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	0018      	movs	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	b004      	add	sp, #16
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08e      	sub	sp, #56	@ 0x38
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002960:	f3ef 8310 	mrs	r3, PRIMASK
 8002964:	617b      	str	r3, [r7, #20]
  return(result);
 8002966:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002968:	637b      	str	r3, [r7, #52]	@ 0x34
 800296a:	2301      	movs	r3, #1
 800296c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	f383 8810 	msr	PRIMASK, r3
}
 8002974:	46c0      	nop			@ (mov r8, r8)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4926      	ldr	r1, [pc, #152]	@ (8002a1c <UART_EndRxTransfer+0xc4>)
 8002982:	400a      	ands	r2, r1
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002988:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f383 8810 	msr	PRIMASK, r3
}
 8002990:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002992:	f3ef 8310 	mrs	r3, PRIMASK
 8002996:	623b      	str	r3, [r7, #32]
  return(result);
 8002998:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800299a:	633b      	str	r3, [r7, #48]	@ 0x30
 800299c:	2301      	movs	r3, #1
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	f383 8810 	msr	PRIMASK, r3
}
 80029a6:	46c0      	nop			@ (mov r8, r8)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	491b      	ldr	r1, [pc, #108]	@ (8002a20 <UART_EndRxTransfer+0xc8>)
 80029b4:	400a      	ands	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029be:	f383 8810 	msr	PRIMASK, r3
}
 80029c2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d118      	bne.n	80029fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029cc:	f3ef 8310 	mrs	r3, PRIMASK
 80029d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80029d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029d6:	2301      	movs	r3, #1
 80029d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f383 8810 	msr	PRIMASK, r3
}
 80029e0:	46c0      	nop			@ (mov r8, r8)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2110      	movs	r1, #16
 80029ee:	438a      	bics	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f383 8810 	msr	PRIMASK, r3
}
 80029fc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	228c      	movs	r2, #140	@ 0x8c
 8002a02:	2120      	movs	r1, #32
 8002a04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002a12:	46c0      	nop			@ (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b00e      	add	sp, #56	@ 0x38
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			@ (mov r8, r8)
 8002a1c:	fffffedf 	.word	0xfffffedf
 8002a20:	effffffe 	.word	0xeffffffe

08002a24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2284      	movs	r2, #132	@ 0x84
 8002a30:	5c9b      	ldrb	r3, [r3, r2]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_UARTEx_DisableFifoMode+0x16>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e027      	b.n	8002a8a <HAL_UARTEx_DisableFifoMode+0x66>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2284      	movs	r2, #132	@ 0x84
 8002a3e:	2101      	movs	r1, #1
 8002a40:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2288      	movs	r2, #136	@ 0x88
 8002a46:	2124      	movs	r1, #36	@ 0x24
 8002a48:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	438a      	bics	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4a0b      	ldr	r2, [pc, #44]	@ (8002a94 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2288      	movs	r2, #136	@ 0x88
 8002a7c:	2120      	movs	r1, #32
 8002a7e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2284      	movs	r2, #132	@ 0x84
 8002a84:	2100      	movs	r1, #0
 8002a86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b004      	add	sp, #16
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	dfffffff 	.word	0xdfffffff

08002a98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2284      	movs	r2, #132	@ 0x84
 8002aa6:	5c9b      	ldrb	r3, [r3, r2]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e02e      	b.n	8002b0e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2284      	movs	r2, #132	@ 0x84
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2288      	movs	r2, #136	@ 0x88
 8002abc:	2124      	movs	r1, #36	@ 0x24
 8002abe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	438a      	bics	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	08d9      	lsrs	r1, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	0018      	movs	r0, r3
 8002af0:	f000 f854 	bl	8002b9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2288      	movs	r2, #136	@ 0x88
 8002b00:	2120      	movs	r1, #32
 8002b02:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2284      	movs	r2, #132	@ 0x84
 8002b08:	2100      	movs	r1, #0
 8002b0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	0018      	movs	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b004      	add	sp, #16
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2284      	movs	r2, #132	@ 0x84
 8002b26:	5c9b      	ldrb	r3, [r3, r2]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e02f      	b.n	8002b90 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2284      	movs	r2, #132	@ 0x84
 8002b34:	2101      	movs	r1, #1
 8002b36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2288      	movs	r2, #136	@ 0x88
 8002b3c:	2124      	movs	r1, #36	@ 0x24
 8002b3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2101      	movs	r1, #1
 8002b54:	438a      	bics	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	4a0e      	ldr	r2, [pc, #56]	@ (8002b98 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	0019      	movs	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f000 f813 	bl	8002b9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2288      	movs	r2, #136	@ 0x88
 8002b82:	2120      	movs	r1, #32
 8002b84:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2284      	movs	r2, #132	@ 0x84
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	0018      	movs	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b004      	add	sp, #16
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	f1ffffff 	.word	0xf1ffffff

08002b9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d108      	bne.n	8002bbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	226a      	movs	r2, #106	@ 0x6a
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2268      	movs	r2, #104	@ 0x68
 8002bb8:	2101      	movs	r1, #1
 8002bba:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002bbc:	e043      	b.n	8002c46 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002bbe:	260f      	movs	r6, #15
 8002bc0:	19bb      	adds	r3, r7, r6
 8002bc2:	2208      	movs	r2, #8
 8002bc4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002bc6:	200e      	movs	r0, #14
 8002bc8:	183b      	adds	r3, r7, r0
 8002bca:	2208      	movs	r2, #8
 8002bcc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	0e5b      	lsrs	r3, r3, #25
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	240d      	movs	r4, #13
 8002bda:	193b      	adds	r3, r7, r4
 8002bdc:	2107      	movs	r1, #7
 8002bde:	400a      	ands	r2, r1
 8002be0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	0f5b      	lsrs	r3, r3, #29
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	250c      	movs	r5, #12
 8002bee:	197b      	adds	r3, r7, r5
 8002bf0:	2107      	movs	r1, #7
 8002bf2:	400a      	ands	r2, r1
 8002bf4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002bf6:	183b      	adds	r3, r7, r0
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	197a      	adds	r2, r7, r5
 8002bfc:	7812      	ldrb	r2, [r2, #0]
 8002bfe:	4914      	ldr	r1, [pc, #80]	@ (8002c50 <UARTEx_SetNbDataToProcess+0xb4>)
 8002c00:	5c8a      	ldrb	r2, [r1, r2]
 8002c02:	435a      	muls	r2, r3
 8002c04:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002c06:	197b      	adds	r3, r7, r5
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	4a12      	ldr	r2, [pc, #72]	@ (8002c54 <UARTEx_SetNbDataToProcess+0xb8>)
 8002c0c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002c0e:	0019      	movs	r1, r3
 8002c10:	f7fd fb0c 	bl	800022c <__divsi3>
 8002c14:	0003      	movs	r3, r0
 8002c16:	b299      	uxth	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	226a      	movs	r2, #106	@ 0x6a
 8002c1c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002c1e:	19bb      	adds	r3, r7, r6
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	193a      	adds	r2, r7, r4
 8002c24:	7812      	ldrb	r2, [r2, #0]
 8002c26:	490a      	ldr	r1, [pc, #40]	@ (8002c50 <UARTEx_SetNbDataToProcess+0xb4>)
 8002c28:	5c8a      	ldrb	r2, [r1, r2]
 8002c2a:	435a      	muls	r2, r3
 8002c2c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002c2e:	193b      	adds	r3, r7, r4
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	4a08      	ldr	r2, [pc, #32]	@ (8002c54 <UARTEx_SetNbDataToProcess+0xb8>)
 8002c34:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002c36:	0019      	movs	r1, r3
 8002c38:	f7fd faf8 	bl	800022c <__divsi3>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	b299      	uxth	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2268      	movs	r2, #104	@ 0x68
 8002c44:	5299      	strh	r1, [r3, r2]
}
 8002c46:	46c0      	nop			@ (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b005      	add	sp, #20
 8002c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c4e:	46c0      	nop			@ (mov r8, r8)
 8002c50:	08003634 	.word	0x08003634
 8002c54:	0800363c 	.word	0x0800363c

08002c58 <siprintf>:
 8002c58:	b40e      	push	{r1, r2, r3}
 8002c5a:	b500      	push	{lr}
 8002c5c:	490b      	ldr	r1, [pc, #44]	@ (8002c8c <siprintf+0x34>)
 8002c5e:	b09c      	sub	sp, #112	@ 0x70
 8002c60:	ab1d      	add	r3, sp, #116	@ 0x74
 8002c62:	9002      	str	r0, [sp, #8]
 8002c64:	9006      	str	r0, [sp, #24]
 8002c66:	9107      	str	r1, [sp, #28]
 8002c68:	9104      	str	r1, [sp, #16]
 8002c6a:	4809      	ldr	r0, [pc, #36]	@ (8002c90 <siprintf+0x38>)
 8002c6c:	4909      	ldr	r1, [pc, #36]	@ (8002c94 <siprintf+0x3c>)
 8002c6e:	cb04      	ldmia	r3!, {r2}
 8002c70:	9105      	str	r1, [sp, #20]
 8002c72:	6800      	ldr	r0, [r0, #0]
 8002c74:	a902      	add	r1, sp, #8
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	f000 f99e 	bl	8002fb8 <_svfiprintf_r>
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	9b02      	ldr	r3, [sp, #8]
 8002c80:	701a      	strb	r2, [r3, #0]
 8002c82:	b01c      	add	sp, #112	@ 0x70
 8002c84:	bc08      	pop	{r3}
 8002c86:	b003      	add	sp, #12
 8002c88:	4718      	bx	r3
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	7fffffff 	.word	0x7fffffff
 8002c90:	2000000c 	.word	0x2000000c
 8002c94:	ffff0208 	.word	0xffff0208

08002c98 <memset>:
 8002c98:	0003      	movs	r3, r0
 8002c9a:	1882      	adds	r2, r0, r2
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d100      	bne.n	8002ca2 <memset+0xa>
 8002ca0:	4770      	bx	lr
 8002ca2:	7019      	strb	r1, [r3, #0]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	e7f9      	b.n	8002c9c <memset+0x4>

08002ca8 <__errno>:
 8002ca8:	4b01      	ldr	r3, [pc, #4]	@ (8002cb0 <__errno+0x8>)
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	4770      	bx	lr
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	2000000c 	.word	0x2000000c

08002cb4 <__libc_init_array>:
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	2600      	movs	r6, #0
 8002cb8:	4c0c      	ldr	r4, [pc, #48]	@ (8002cec <__libc_init_array+0x38>)
 8002cba:	4d0d      	ldr	r5, [pc, #52]	@ (8002cf0 <__libc_init_array+0x3c>)
 8002cbc:	1b64      	subs	r4, r4, r5
 8002cbe:	10a4      	asrs	r4, r4, #2
 8002cc0:	42a6      	cmp	r6, r4
 8002cc2:	d109      	bne.n	8002cd8 <__libc_init_array+0x24>
 8002cc4:	2600      	movs	r6, #0
 8002cc6:	f000 fc65 	bl	8003594 <_init>
 8002cca:	4c0a      	ldr	r4, [pc, #40]	@ (8002cf4 <__libc_init_array+0x40>)
 8002ccc:	4d0a      	ldr	r5, [pc, #40]	@ (8002cf8 <__libc_init_array+0x44>)
 8002cce:	1b64      	subs	r4, r4, r5
 8002cd0:	10a4      	asrs	r4, r4, #2
 8002cd2:	42a6      	cmp	r6, r4
 8002cd4:	d105      	bne.n	8002ce2 <__libc_init_array+0x2e>
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
 8002cd8:	00b3      	lsls	r3, r6, #2
 8002cda:	58eb      	ldr	r3, [r5, r3]
 8002cdc:	4798      	blx	r3
 8002cde:	3601      	adds	r6, #1
 8002ce0:	e7ee      	b.n	8002cc0 <__libc_init_array+0xc>
 8002ce2:	00b3      	lsls	r3, r6, #2
 8002ce4:	58eb      	ldr	r3, [r5, r3]
 8002ce6:	4798      	blx	r3
 8002ce8:	3601      	adds	r6, #1
 8002cea:	e7f2      	b.n	8002cd2 <__libc_init_array+0x1e>
 8002cec:	08003680 	.word	0x08003680
 8002cf0:	08003680 	.word	0x08003680
 8002cf4:	08003684 	.word	0x08003684
 8002cf8:	08003680 	.word	0x08003680

08002cfc <__retarget_lock_acquire_recursive>:
 8002cfc:	4770      	bx	lr

08002cfe <__retarget_lock_release_recursive>:
 8002cfe:	4770      	bx	lr

08002d00 <_free_r>:
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	0005      	movs	r5, r0
 8002d04:	1e0c      	subs	r4, r1, #0
 8002d06:	d010      	beq.n	8002d2a <_free_r+0x2a>
 8002d08:	3c04      	subs	r4, #4
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	da00      	bge.n	8002d12 <_free_r+0x12>
 8002d10:	18e4      	adds	r4, r4, r3
 8002d12:	0028      	movs	r0, r5
 8002d14:	f000 f8e0 	bl	8002ed8 <__malloc_lock>
 8002d18:	4a1d      	ldr	r2, [pc, #116]	@ (8002d90 <_free_r+0x90>)
 8002d1a:	6813      	ldr	r3, [r2, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <_free_r+0x2c>
 8002d20:	6063      	str	r3, [r4, #4]
 8002d22:	6014      	str	r4, [r2, #0]
 8002d24:	0028      	movs	r0, r5
 8002d26:	f000 f8df 	bl	8002ee8 <__malloc_unlock>
 8002d2a:	bd70      	pop	{r4, r5, r6, pc}
 8002d2c:	42a3      	cmp	r3, r4
 8002d2e:	d908      	bls.n	8002d42 <_free_r+0x42>
 8002d30:	6820      	ldr	r0, [r4, #0]
 8002d32:	1821      	adds	r1, r4, r0
 8002d34:	428b      	cmp	r3, r1
 8002d36:	d1f3      	bne.n	8002d20 <_free_r+0x20>
 8002d38:	6819      	ldr	r1, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	1809      	adds	r1, r1, r0
 8002d3e:	6021      	str	r1, [r4, #0]
 8002d40:	e7ee      	b.n	8002d20 <_free_r+0x20>
 8002d42:	001a      	movs	r2, r3
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <_free_r+0x4e>
 8002d4a:	42a3      	cmp	r3, r4
 8002d4c:	d9f9      	bls.n	8002d42 <_free_r+0x42>
 8002d4e:	6811      	ldr	r1, [r2, #0]
 8002d50:	1850      	adds	r0, r2, r1
 8002d52:	42a0      	cmp	r0, r4
 8002d54:	d10b      	bne.n	8002d6e <_free_r+0x6e>
 8002d56:	6820      	ldr	r0, [r4, #0]
 8002d58:	1809      	adds	r1, r1, r0
 8002d5a:	1850      	adds	r0, r2, r1
 8002d5c:	6011      	str	r1, [r2, #0]
 8002d5e:	4283      	cmp	r3, r0
 8002d60:	d1e0      	bne.n	8002d24 <_free_r+0x24>
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	1841      	adds	r1, r0, r1
 8002d68:	6011      	str	r1, [r2, #0]
 8002d6a:	6053      	str	r3, [r2, #4]
 8002d6c:	e7da      	b.n	8002d24 <_free_r+0x24>
 8002d6e:	42a0      	cmp	r0, r4
 8002d70:	d902      	bls.n	8002d78 <_free_r+0x78>
 8002d72:	230c      	movs	r3, #12
 8002d74:	602b      	str	r3, [r5, #0]
 8002d76:	e7d5      	b.n	8002d24 <_free_r+0x24>
 8002d78:	6820      	ldr	r0, [r4, #0]
 8002d7a:	1821      	adds	r1, r4, r0
 8002d7c:	428b      	cmp	r3, r1
 8002d7e:	d103      	bne.n	8002d88 <_free_r+0x88>
 8002d80:	6819      	ldr	r1, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	1809      	adds	r1, r1, r0
 8002d86:	6021      	str	r1, [r4, #0]
 8002d88:	6063      	str	r3, [r4, #4]
 8002d8a:	6054      	str	r4, [r2, #4]
 8002d8c:	e7ca      	b.n	8002d24 <_free_r+0x24>
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	20000258 	.word	0x20000258

08002d94 <sbrk_aligned>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	4e0f      	ldr	r6, [pc, #60]	@ (8002dd4 <sbrk_aligned+0x40>)
 8002d98:	000d      	movs	r5, r1
 8002d9a:	6831      	ldr	r1, [r6, #0]
 8002d9c:	0004      	movs	r4, r0
 8002d9e:	2900      	cmp	r1, #0
 8002da0:	d102      	bne.n	8002da8 <sbrk_aligned+0x14>
 8002da2:	f000 fb99 	bl	80034d8 <_sbrk_r>
 8002da6:	6030      	str	r0, [r6, #0]
 8002da8:	0029      	movs	r1, r5
 8002daa:	0020      	movs	r0, r4
 8002dac:	f000 fb94 	bl	80034d8 <_sbrk_r>
 8002db0:	1c43      	adds	r3, r0, #1
 8002db2:	d103      	bne.n	8002dbc <sbrk_aligned+0x28>
 8002db4:	2501      	movs	r5, #1
 8002db6:	426d      	negs	r5, r5
 8002db8:	0028      	movs	r0, r5
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	1cc5      	adds	r5, r0, #3
 8002dc0:	439d      	bics	r5, r3
 8002dc2:	42a8      	cmp	r0, r5
 8002dc4:	d0f8      	beq.n	8002db8 <sbrk_aligned+0x24>
 8002dc6:	1a29      	subs	r1, r5, r0
 8002dc8:	0020      	movs	r0, r4
 8002dca:	f000 fb85 	bl	80034d8 <_sbrk_r>
 8002dce:	3001      	adds	r0, #1
 8002dd0:	d1f2      	bne.n	8002db8 <sbrk_aligned+0x24>
 8002dd2:	e7ef      	b.n	8002db4 <sbrk_aligned+0x20>
 8002dd4:	20000254 	.word	0x20000254

08002dd8 <_malloc_r>:
 8002dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dda:	2203      	movs	r2, #3
 8002ddc:	1ccb      	adds	r3, r1, #3
 8002dde:	4393      	bics	r3, r2
 8002de0:	3308      	adds	r3, #8
 8002de2:	0005      	movs	r5, r0
 8002de4:	001f      	movs	r7, r3
 8002de6:	2b0c      	cmp	r3, #12
 8002de8:	d234      	bcs.n	8002e54 <_malloc_r+0x7c>
 8002dea:	270c      	movs	r7, #12
 8002dec:	42b9      	cmp	r1, r7
 8002dee:	d833      	bhi.n	8002e58 <_malloc_r+0x80>
 8002df0:	0028      	movs	r0, r5
 8002df2:	f000 f871 	bl	8002ed8 <__malloc_lock>
 8002df6:	4e37      	ldr	r6, [pc, #220]	@ (8002ed4 <_malloc_r+0xfc>)
 8002df8:	6833      	ldr	r3, [r6, #0]
 8002dfa:	001c      	movs	r4, r3
 8002dfc:	2c00      	cmp	r4, #0
 8002dfe:	d12f      	bne.n	8002e60 <_malloc_r+0x88>
 8002e00:	0039      	movs	r1, r7
 8002e02:	0028      	movs	r0, r5
 8002e04:	f7ff ffc6 	bl	8002d94 <sbrk_aligned>
 8002e08:	0004      	movs	r4, r0
 8002e0a:	1c43      	adds	r3, r0, #1
 8002e0c:	d15f      	bne.n	8002ece <_malloc_r+0xf6>
 8002e0e:	6834      	ldr	r4, [r6, #0]
 8002e10:	9400      	str	r4, [sp, #0]
 8002e12:	9b00      	ldr	r3, [sp, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d14a      	bne.n	8002eae <_malloc_r+0xd6>
 8002e18:	2c00      	cmp	r4, #0
 8002e1a:	d052      	beq.n	8002ec2 <_malloc_r+0xea>
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	0028      	movs	r0, r5
 8002e20:	18e3      	adds	r3, r4, r3
 8002e22:	9900      	ldr	r1, [sp, #0]
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	f000 fb57 	bl	80034d8 <_sbrk_r>
 8002e2a:	9b01      	ldr	r3, [sp, #4]
 8002e2c:	4283      	cmp	r3, r0
 8002e2e:	d148      	bne.n	8002ec2 <_malloc_r+0xea>
 8002e30:	6823      	ldr	r3, [r4, #0]
 8002e32:	0028      	movs	r0, r5
 8002e34:	1aff      	subs	r7, r7, r3
 8002e36:	0039      	movs	r1, r7
 8002e38:	f7ff ffac 	bl	8002d94 <sbrk_aligned>
 8002e3c:	3001      	adds	r0, #1
 8002e3e:	d040      	beq.n	8002ec2 <_malloc_r+0xea>
 8002e40:	6823      	ldr	r3, [r4, #0]
 8002e42:	19db      	adds	r3, r3, r7
 8002e44:	6023      	str	r3, [r4, #0]
 8002e46:	6833      	ldr	r3, [r6, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	2a00      	cmp	r2, #0
 8002e4c:	d133      	bne.n	8002eb6 <_malloc_r+0xde>
 8002e4e:	9b00      	ldr	r3, [sp, #0]
 8002e50:	6033      	str	r3, [r6, #0]
 8002e52:	e019      	b.n	8002e88 <_malloc_r+0xb0>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	dac9      	bge.n	8002dec <_malloc_r+0x14>
 8002e58:	230c      	movs	r3, #12
 8002e5a:	602b      	str	r3, [r5, #0]
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e60:	6821      	ldr	r1, [r4, #0]
 8002e62:	1bc9      	subs	r1, r1, r7
 8002e64:	d420      	bmi.n	8002ea8 <_malloc_r+0xd0>
 8002e66:	290b      	cmp	r1, #11
 8002e68:	d90a      	bls.n	8002e80 <_malloc_r+0xa8>
 8002e6a:	19e2      	adds	r2, r4, r7
 8002e6c:	6027      	str	r7, [r4, #0]
 8002e6e:	42a3      	cmp	r3, r4
 8002e70:	d104      	bne.n	8002e7c <_malloc_r+0xa4>
 8002e72:	6032      	str	r2, [r6, #0]
 8002e74:	6863      	ldr	r3, [r4, #4]
 8002e76:	6011      	str	r1, [r2, #0]
 8002e78:	6053      	str	r3, [r2, #4]
 8002e7a:	e005      	b.n	8002e88 <_malloc_r+0xb0>
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	e7f9      	b.n	8002e74 <_malloc_r+0x9c>
 8002e80:	6862      	ldr	r2, [r4, #4]
 8002e82:	42a3      	cmp	r3, r4
 8002e84:	d10e      	bne.n	8002ea4 <_malloc_r+0xcc>
 8002e86:	6032      	str	r2, [r6, #0]
 8002e88:	0028      	movs	r0, r5
 8002e8a:	f000 f82d 	bl	8002ee8 <__malloc_unlock>
 8002e8e:	0020      	movs	r0, r4
 8002e90:	2207      	movs	r2, #7
 8002e92:	300b      	adds	r0, #11
 8002e94:	1d23      	adds	r3, r4, #4
 8002e96:	4390      	bics	r0, r2
 8002e98:	1ac2      	subs	r2, r0, r3
 8002e9a:	4298      	cmp	r0, r3
 8002e9c:	d0df      	beq.n	8002e5e <_malloc_r+0x86>
 8002e9e:	1a1b      	subs	r3, r3, r0
 8002ea0:	50a3      	str	r3, [r4, r2]
 8002ea2:	e7dc      	b.n	8002e5e <_malloc_r+0x86>
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	e7ef      	b.n	8002e88 <_malloc_r+0xb0>
 8002ea8:	0023      	movs	r3, r4
 8002eaa:	6864      	ldr	r4, [r4, #4]
 8002eac:	e7a6      	b.n	8002dfc <_malloc_r+0x24>
 8002eae:	9c00      	ldr	r4, [sp, #0]
 8002eb0:	6863      	ldr	r3, [r4, #4]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	e7ad      	b.n	8002e12 <_malloc_r+0x3a>
 8002eb6:	001a      	movs	r2, r3
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	42a3      	cmp	r3, r4
 8002ebc:	d1fb      	bne.n	8002eb6 <_malloc_r+0xde>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e7da      	b.n	8002e78 <_malloc_r+0xa0>
 8002ec2:	230c      	movs	r3, #12
 8002ec4:	0028      	movs	r0, r5
 8002ec6:	602b      	str	r3, [r5, #0]
 8002ec8:	f000 f80e 	bl	8002ee8 <__malloc_unlock>
 8002ecc:	e7c6      	b.n	8002e5c <_malloc_r+0x84>
 8002ece:	6007      	str	r7, [r0, #0]
 8002ed0:	e7da      	b.n	8002e88 <_malloc_r+0xb0>
 8002ed2:	46c0      	nop			@ (mov r8, r8)
 8002ed4:	20000258 	.word	0x20000258

08002ed8 <__malloc_lock>:
 8002ed8:	b510      	push	{r4, lr}
 8002eda:	4802      	ldr	r0, [pc, #8]	@ (8002ee4 <__malloc_lock+0xc>)
 8002edc:	f7ff ff0e 	bl	8002cfc <__retarget_lock_acquire_recursive>
 8002ee0:	bd10      	pop	{r4, pc}
 8002ee2:	46c0      	nop			@ (mov r8, r8)
 8002ee4:	20000250 	.word	0x20000250

08002ee8 <__malloc_unlock>:
 8002ee8:	b510      	push	{r4, lr}
 8002eea:	4802      	ldr	r0, [pc, #8]	@ (8002ef4 <__malloc_unlock+0xc>)
 8002eec:	f7ff ff07 	bl	8002cfe <__retarget_lock_release_recursive>
 8002ef0:	bd10      	pop	{r4, pc}
 8002ef2:	46c0      	nop			@ (mov r8, r8)
 8002ef4:	20000250 	.word	0x20000250

08002ef8 <__ssputs_r>:
 8002ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efa:	688e      	ldr	r6, [r1, #8]
 8002efc:	b085      	sub	sp, #20
 8002efe:	001f      	movs	r7, r3
 8002f00:	000c      	movs	r4, r1
 8002f02:	680b      	ldr	r3, [r1, #0]
 8002f04:	9002      	str	r0, [sp, #8]
 8002f06:	9203      	str	r2, [sp, #12]
 8002f08:	42be      	cmp	r6, r7
 8002f0a:	d830      	bhi.n	8002f6e <__ssputs_r+0x76>
 8002f0c:	210c      	movs	r1, #12
 8002f0e:	5e62      	ldrsh	r2, [r4, r1]
 8002f10:	2190      	movs	r1, #144	@ 0x90
 8002f12:	00c9      	lsls	r1, r1, #3
 8002f14:	420a      	tst	r2, r1
 8002f16:	d028      	beq.n	8002f6a <__ssputs_r+0x72>
 8002f18:	2003      	movs	r0, #3
 8002f1a:	6921      	ldr	r1, [r4, #16]
 8002f1c:	1a5b      	subs	r3, r3, r1
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	6963      	ldr	r3, [r4, #20]
 8002f22:	4343      	muls	r3, r0
 8002f24:	9801      	ldr	r0, [sp, #4]
 8002f26:	0fdd      	lsrs	r5, r3, #31
 8002f28:	18ed      	adds	r5, r5, r3
 8002f2a:	1c7b      	adds	r3, r7, #1
 8002f2c:	181b      	adds	r3, r3, r0
 8002f2e:	106d      	asrs	r5, r5, #1
 8002f30:	42ab      	cmp	r3, r5
 8002f32:	d900      	bls.n	8002f36 <__ssputs_r+0x3e>
 8002f34:	001d      	movs	r5, r3
 8002f36:	0552      	lsls	r2, r2, #21
 8002f38:	d528      	bpl.n	8002f8c <__ssputs_r+0x94>
 8002f3a:	0029      	movs	r1, r5
 8002f3c:	9802      	ldr	r0, [sp, #8]
 8002f3e:	f7ff ff4b 	bl	8002dd8 <_malloc_r>
 8002f42:	1e06      	subs	r6, r0, #0
 8002f44:	d02c      	beq.n	8002fa0 <__ssputs_r+0xa8>
 8002f46:	9a01      	ldr	r2, [sp, #4]
 8002f48:	6921      	ldr	r1, [r4, #16]
 8002f4a:	f000 fae2 	bl	8003512 <memcpy>
 8002f4e:	89a2      	ldrh	r2, [r4, #12]
 8002f50:	4b18      	ldr	r3, [pc, #96]	@ (8002fb4 <__ssputs_r+0xbc>)
 8002f52:	401a      	ands	r2, r3
 8002f54:	2380      	movs	r3, #128	@ 0x80
 8002f56:	4313      	orrs	r3, r2
 8002f58:	81a3      	strh	r3, [r4, #12]
 8002f5a:	9b01      	ldr	r3, [sp, #4]
 8002f5c:	6126      	str	r6, [r4, #16]
 8002f5e:	18f6      	adds	r6, r6, r3
 8002f60:	6026      	str	r6, [r4, #0]
 8002f62:	003e      	movs	r6, r7
 8002f64:	6165      	str	r5, [r4, #20]
 8002f66:	1aed      	subs	r5, r5, r3
 8002f68:	60a5      	str	r5, [r4, #8]
 8002f6a:	42be      	cmp	r6, r7
 8002f6c:	d900      	bls.n	8002f70 <__ssputs_r+0x78>
 8002f6e:	003e      	movs	r6, r7
 8002f70:	0032      	movs	r2, r6
 8002f72:	9903      	ldr	r1, [sp, #12]
 8002f74:	6820      	ldr	r0, [r4, #0]
 8002f76:	f000 fa9b 	bl	80034b0 <memmove>
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	68a3      	ldr	r3, [r4, #8]
 8002f7e:	1b9b      	subs	r3, r3, r6
 8002f80:	60a3      	str	r3, [r4, #8]
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	199b      	adds	r3, r3, r6
 8002f86:	6023      	str	r3, [r4, #0]
 8002f88:	b005      	add	sp, #20
 8002f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f8c:	002a      	movs	r2, r5
 8002f8e:	9802      	ldr	r0, [sp, #8]
 8002f90:	f000 fac8 	bl	8003524 <_realloc_r>
 8002f94:	1e06      	subs	r6, r0, #0
 8002f96:	d1e0      	bne.n	8002f5a <__ssputs_r+0x62>
 8002f98:	6921      	ldr	r1, [r4, #16]
 8002f9a:	9802      	ldr	r0, [sp, #8]
 8002f9c:	f7ff feb0 	bl	8002d00 <_free_r>
 8002fa0:	230c      	movs	r3, #12
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	9a02      	ldr	r2, [sp, #8]
 8002fa6:	4240      	negs	r0, r0
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	89a2      	ldrh	r2, [r4, #12]
 8002fac:	3334      	adds	r3, #52	@ 0x34
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	81a3      	strh	r3, [r4, #12]
 8002fb2:	e7e9      	b.n	8002f88 <__ssputs_r+0x90>
 8002fb4:	fffffb7f 	.word	0xfffffb7f

08002fb8 <_svfiprintf_r>:
 8002fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fba:	b0a1      	sub	sp, #132	@ 0x84
 8002fbc:	9003      	str	r0, [sp, #12]
 8002fbe:	001d      	movs	r5, r3
 8002fc0:	898b      	ldrh	r3, [r1, #12]
 8002fc2:	000f      	movs	r7, r1
 8002fc4:	0016      	movs	r6, r2
 8002fc6:	061b      	lsls	r3, r3, #24
 8002fc8:	d511      	bpl.n	8002fee <_svfiprintf_r+0x36>
 8002fca:	690b      	ldr	r3, [r1, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10e      	bne.n	8002fee <_svfiprintf_r+0x36>
 8002fd0:	2140      	movs	r1, #64	@ 0x40
 8002fd2:	f7ff ff01 	bl	8002dd8 <_malloc_r>
 8002fd6:	6038      	str	r0, [r7, #0]
 8002fd8:	6138      	str	r0, [r7, #16]
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d105      	bne.n	8002fea <_svfiprintf_r+0x32>
 8002fde:	230c      	movs	r3, #12
 8002fe0:	9a03      	ldr	r2, [sp, #12]
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	4240      	negs	r0, r0
 8002fe8:	e0cf      	b.n	800318a <_svfiprintf_r+0x1d2>
 8002fea:	2340      	movs	r3, #64	@ 0x40
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	ac08      	add	r4, sp, #32
 8002ff2:	6163      	str	r3, [r4, #20]
 8002ff4:	3320      	adds	r3, #32
 8002ff6:	7663      	strb	r3, [r4, #25]
 8002ff8:	3310      	adds	r3, #16
 8002ffa:	76a3      	strb	r3, [r4, #26]
 8002ffc:	9507      	str	r5, [sp, #28]
 8002ffe:	0035      	movs	r5, r6
 8003000:	782b      	ldrb	r3, [r5, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <_svfiprintf_r+0x52>
 8003006:	2b25      	cmp	r3, #37	@ 0x25
 8003008:	d148      	bne.n	800309c <_svfiprintf_r+0xe4>
 800300a:	1bab      	subs	r3, r5, r6
 800300c:	9305      	str	r3, [sp, #20]
 800300e:	42b5      	cmp	r5, r6
 8003010:	d00b      	beq.n	800302a <_svfiprintf_r+0x72>
 8003012:	0032      	movs	r2, r6
 8003014:	0039      	movs	r1, r7
 8003016:	9803      	ldr	r0, [sp, #12]
 8003018:	f7ff ff6e 	bl	8002ef8 <__ssputs_r>
 800301c:	3001      	adds	r0, #1
 800301e:	d100      	bne.n	8003022 <_svfiprintf_r+0x6a>
 8003020:	e0ae      	b.n	8003180 <_svfiprintf_r+0x1c8>
 8003022:	6963      	ldr	r3, [r4, #20]
 8003024:	9a05      	ldr	r2, [sp, #20]
 8003026:	189b      	adds	r3, r3, r2
 8003028:	6163      	str	r3, [r4, #20]
 800302a:	782b      	ldrb	r3, [r5, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d100      	bne.n	8003032 <_svfiprintf_r+0x7a>
 8003030:	e0a6      	b.n	8003180 <_svfiprintf_r+0x1c8>
 8003032:	2201      	movs	r2, #1
 8003034:	2300      	movs	r3, #0
 8003036:	4252      	negs	r2, r2
 8003038:	6062      	str	r2, [r4, #4]
 800303a:	a904      	add	r1, sp, #16
 800303c:	3254      	adds	r2, #84	@ 0x54
 800303e:	1852      	adds	r2, r2, r1
 8003040:	1c6e      	adds	r6, r5, #1
 8003042:	6023      	str	r3, [r4, #0]
 8003044:	60e3      	str	r3, [r4, #12]
 8003046:	60a3      	str	r3, [r4, #8]
 8003048:	7013      	strb	r3, [r2, #0]
 800304a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800304c:	4b54      	ldr	r3, [pc, #336]	@ (80031a0 <_svfiprintf_r+0x1e8>)
 800304e:	2205      	movs	r2, #5
 8003050:	0018      	movs	r0, r3
 8003052:	7831      	ldrb	r1, [r6, #0]
 8003054:	9305      	str	r3, [sp, #20]
 8003056:	f000 fa51 	bl	80034fc <memchr>
 800305a:	1c75      	adds	r5, r6, #1
 800305c:	2800      	cmp	r0, #0
 800305e:	d11f      	bne.n	80030a0 <_svfiprintf_r+0xe8>
 8003060:	6822      	ldr	r2, [r4, #0]
 8003062:	06d3      	lsls	r3, r2, #27
 8003064:	d504      	bpl.n	8003070 <_svfiprintf_r+0xb8>
 8003066:	2353      	movs	r3, #83	@ 0x53
 8003068:	a904      	add	r1, sp, #16
 800306a:	185b      	adds	r3, r3, r1
 800306c:	2120      	movs	r1, #32
 800306e:	7019      	strb	r1, [r3, #0]
 8003070:	0713      	lsls	r3, r2, #28
 8003072:	d504      	bpl.n	800307e <_svfiprintf_r+0xc6>
 8003074:	2353      	movs	r3, #83	@ 0x53
 8003076:	a904      	add	r1, sp, #16
 8003078:	185b      	adds	r3, r3, r1
 800307a:	212b      	movs	r1, #43	@ 0x2b
 800307c:	7019      	strb	r1, [r3, #0]
 800307e:	7833      	ldrb	r3, [r6, #0]
 8003080:	2b2a      	cmp	r3, #42	@ 0x2a
 8003082:	d016      	beq.n	80030b2 <_svfiprintf_r+0xfa>
 8003084:	0035      	movs	r5, r6
 8003086:	2100      	movs	r1, #0
 8003088:	200a      	movs	r0, #10
 800308a:	68e3      	ldr	r3, [r4, #12]
 800308c:	782a      	ldrb	r2, [r5, #0]
 800308e:	1c6e      	adds	r6, r5, #1
 8003090:	3a30      	subs	r2, #48	@ 0x30
 8003092:	2a09      	cmp	r2, #9
 8003094:	d950      	bls.n	8003138 <_svfiprintf_r+0x180>
 8003096:	2900      	cmp	r1, #0
 8003098:	d111      	bne.n	80030be <_svfiprintf_r+0x106>
 800309a:	e017      	b.n	80030cc <_svfiprintf_r+0x114>
 800309c:	3501      	adds	r5, #1
 800309e:	e7af      	b.n	8003000 <_svfiprintf_r+0x48>
 80030a0:	9b05      	ldr	r3, [sp, #20]
 80030a2:	6822      	ldr	r2, [r4, #0]
 80030a4:	1ac0      	subs	r0, r0, r3
 80030a6:	2301      	movs	r3, #1
 80030a8:	4083      	lsls	r3, r0
 80030aa:	4313      	orrs	r3, r2
 80030ac:	002e      	movs	r6, r5
 80030ae:	6023      	str	r3, [r4, #0]
 80030b0:	e7cc      	b.n	800304c <_svfiprintf_r+0x94>
 80030b2:	9b07      	ldr	r3, [sp, #28]
 80030b4:	1d19      	adds	r1, r3, #4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	9107      	str	r1, [sp, #28]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	db01      	blt.n	80030c2 <_svfiprintf_r+0x10a>
 80030be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80030c0:	e004      	b.n	80030cc <_svfiprintf_r+0x114>
 80030c2:	425b      	negs	r3, r3
 80030c4:	60e3      	str	r3, [r4, #12]
 80030c6:	2302      	movs	r3, #2
 80030c8:	4313      	orrs	r3, r2
 80030ca:	6023      	str	r3, [r4, #0]
 80030cc:	782b      	ldrb	r3, [r5, #0]
 80030ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80030d0:	d10c      	bne.n	80030ec <_svfiprintf_r+0x134>
 80030d2:	786b      	ldrb	r3, [r5, #1]
 80030d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80030d6:	d134      	bne.n	8003142 <_svfiprintf_r+0x18a>
 80030d8:	9b07      	ldr	r3, [sp, #28]
 80030da:	3502      	adds	r5, #2
 80030dc:	1d1a      	adds	r2, r3, #4
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	9207      	str	r2, [sp, #28]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	da01      	bge.n	80030ea <_svfiprintf_r+0x132>
 80030e6:	2301      	movs	r3, #1
 80030e8:	425b      	negs	r3, r3
 80030ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80030ec:	4e2d      	ldr	r6, [pc, #180]	@ (80031a4 <_svfiprintf_r+0x1ec>)
 80030ee:	2203      	movs	r2, #3
 80030f0:	0030      	movs	r0, r6
 80030f2:	7829      	ldrb	r1, [r5, #0]
 80030f4:	f000 fa02 	bl	80034fc <memchr>
 80030f8:	2800      	cmp	r0, #0
 80030fa:	d006      	beq.n	800310a <_svfiprintf_r+0x152>
 80030fc:	2340      	movs	r3, #64	@ 0x40
 80030fe:	1b80      	subs	r0, r0, r6
 8003100:	4083      	lsls	r3, r0
 8003102:	6822      	ldr	r2, [r4, #0]
 8003104:	3501      	adds	r5, #1
 8003106:	4313      	orrs	r3, r2
 8003108:	6023      	str	r3, [r4, #0]
 800310a:	7829      	ldrb	r1, [r5, #0]
 800310c:	2206      	movs	r2, #6
 800310e:	4826      	ldr	r0, [pc, #152]	@ (80031a8 <_svfiprintf_r+0x1f0>)
 8003110:	1c6e      	adds	r6, r5, #1
 8003112:	7621      	strb	r1, [r4, #24]
 8003114:	f000 f9f2 	bl	80034fc <memchr>
 8003118:	2800      	cmp	r0, #0
 800311a:	d038      	beq.n	800318e <_svfiprintf_r+0x1d6>
 800311c:	4b23      	ldr	r3, [pc, #140]	@ (80031ac <_svfiprintf_r+0x1f4>)
 800311e:	2b00      	cmp	r3, #0
 8003120:	d122      	bne.n	8003168 <_svfiprintf_r+0x1b0>
 8003122:	2207      	movs	r2, #7
 8003124:	9b07      	ldr	r3, [sp, #28]
 8003126:	3307      	adds	r3, #7
 8003128:	4393      	bics	r3, r2
 800312a:	3308      	adds	r3, #8
 800312c:	9307      	str	r3, [sp, #28]
 800312e:	6963      	ldr	r3, [r4, #20]
 8003130:	9a04      	ldr	r2, [sp, #16]
 8003132:	189b      	adds	r3, r3, r2
 8003134:	6163      	str	r3, [r4, #20]
 8003136:	e762      	b.n	8002ffe <_svfiprintf_r+0x46>
 8003138:	4343      	muls	r3, r0
 800313a:	0035      	movs	r5, r6
 800313c:	2101      	movs	r1, #1
 800313e:	189b      	adds	r3, r3, r2
 8003140:	e7a4      	b.n	800308c <_svfiprintf_r+0xd4>
 8003142:	2300      	movs	r3, #0
 8003144:	200a      	movs	r0, #10
 8003146:	0019      	movs	r1, r3
 8003148:	3501      	adds	r5, #1
 800314a:	6063      	str	r3, [r4, #4]
 800314c:	782a      	ldrb	r2, [r5, #0]
 800314e:	1c6e      	adds	r6, r5, #1
 8003150:	3a30      	subs	r2, #48	@ 0x30
 8003152:	2a09      	cmp	r2, #9
 8003154:	d903      	bls.n	800315e <_svfiprintf_r+0x1a6>
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0c8      	beq.n	80030ec <_svfiprintf_r+0x134>
 800315a:	9109      	str	r1, [sp, #36]	@ 0x24
 800315c:	e7c6      	b.n	80030ec <_svfiprintf_r+0x134>
 800315e:	4341      	muls	r1, r0
 8003160:	0035      	movs	r5, r6
 8003162:	2301      	movs	r3, #1
 8003164:	1889      	adds	r1, r1, r2
 8003166:	e7f1      	b.n	800314c <_svfiprintf_r+0x194>
 8003168:	aa07      	add	r2, sp, #28
 800316a:	9200      	str	r2, [sp, #0]
 800316c:	0021      	movs	r1, r4
 800316e:	003a      	movs	r2, r7
 8003170:	4b0f      	ldr	r3, [pc, #60]	@ (80031b0 <_svfiprintf_r+0x1f8>)
 8003172:	9803      	ldr	r0, [sp, #12]
 8003174:	e000      	b.n	8003178 <_svfiprintf_r+0x1c0>
 8003176:	bf00      	nop
 8003178:	9004      	str	r0, [sp, #16]
 800317a:	9b04      	ldr	r3, [sp, #16]
 800317c:	3301      	adds	r3, #1
 800317e:	d1d6      	bne.n	800312e <_svfiprintf_r+0x176>
 8003180:	89bb      	ldrh	r3, [r7, #12]
 8003182:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003184:	065b      	lsls	r3, r3, #25
 8003186:	d500      	bpl.n	800318a <_svfiprintf_r+0x1d2>
 8003188:	e72c      	b.n	8002fe4 <_svfiprintf_r+0x2c>
 800318a:	b021      	add	sp, #132	@ 0x84
 800318c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800318e:	aa07      	add	r2, sp, #28
 8003190:	9200      	str	r2, [sp, #0]
 8003192:	0021      	movs	r1, r4
 8003194:	003a      	movs	r2, r7
 8003196:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <_svfiprintf_r+0x1f8>)
 8003198:	9803      	ldr	r0, [sp, #12]
 800319a:	f000 f87b 	bl	8003294 <_printf_i>
 800319e:	e7eb      	b.n	8003178 <_svfiprintf_r+0x1c0>
 80031a0:	08003644 	.word	0x08003644
 80031a4:	0800364a 	.word	0x0800364a
 80031a8:	0800364e 	.word	0x0800364e
 80031ac:	00000000 	.word	0x00000000
 80031b0:	08002ef9 	.word	0x08002ef9

080031b4 <_printf_common>:
 80031b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031b6:	0016      	movs	r6, r2
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	688a      	ldr	r2, [r1, #8]
 80031bc:	690b      	ldr	r3, [r1, #16]
 80031be:	000c      	movs	r4, r1
 80031c0:	9000      	str	r0, [sp, #0]
 80031c2:	4293      	cmp	r3, r2
 80031c4:	da00      	bge.n	80031c8 <_printf_common+0x14>
 80031c6:	0013      	movs	r3, r2
 80031c8:	0022      	movs	r2, r4
 80031ca:	6033      	str	r3, [r6, #0]
 80031cc:	3243      	adds	r2, #67	@ 0x43
 80031ce:	7812      	ldrb	r2, [r2, #0]
 80031d0:	2a00      	cmp	r2, #0
 80031d2:	d001      	beq.n	80031d8 <_printf_common+0x24>
 80031d4:	3301      	adds	r3, #1
 80031d6:	6033      	str	r3, [r6, #0]
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	069b      	lsls	r3, r3, #26
 80031dc:	d502      	bpl.n	80031e4 <_printf_common+0x30>
 80031de:	6833      	ldr	r3, [r6, #0]
 80031e0:	3302      	adds	r3, #2
 80031e2:	6033      	str	r3, [r6, #0]
 80031e4:	6822      	ldr	r2, [r4, #0]
 80031e6:	2306      	movs	r3, #6
 80031e8:	0015      	movs	r5, r2
 80031ea:	401d      	ands	r5, r3
 80031ec:	421a      	tst	r2, r3
 80031ee:	d027      	beq.n	8003240 <_printf_common+0x8c>
 80031f0:	0023      	movs	r3, r4
 80031f2:	3343      	adds	r3, #67	@ 0x43
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	1e5a      	subs	r2, r3, #1
 80031f8:	4193      	sbcs	r3, r2
 80031fa:	6822      	ldr	r2, [r4, #0]
 80031fc:	0692      	lsls	r2, r2, #26
 80031fe:	d430      	bmi.n	8003262 <_printf_common+0xae>
 8003200:	0022      	movs	r2, r4
 8003202:	9901      	ldr	r1, [sp, #4]
 8003204:	9800      	ldr	r0, [sp, #0]
 8003206:	9d08      	ldr	r5, [sp, #32]
 8003208:	3243      	adds	r2, #67	@ 0x43
 800320a:	47a8      	blx	r5
 800320c:	3001      	adds	r0, #1
 800320e:	d025      	beq.n	800325c <_printf_common+0xa8>
 8003210:	2206      	movs	r2, #6
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	2500      	movs	r5, #0
 8003216:	4013      	ands	r3, r2
 8003218:	2b04      	cmp	r3, #4
 800321a:	d105      	bne.n	8003228 <_printf_common+0x74>
 800321c:	6833      	ldr	r3, [r6, #0]
 800321e:	68e5      	ldr	r5, [r4, #12]
 8003220:	1aed      	subs	r5, r5, r3
 8003222:	43eb      	mvns	r3, r5
 8003224:	17db      	asrs	r3, r3, #31
 8003226:	401d      	ands	r5, r3
 8003228:	68a3      	ldr	r3, [r4, #8]
 800322a:	6922      	ldr	r2, [r4, #16]
 800322c:	4293      	cmp	r3, r2
 800322e:	dd01      	ble.n	8003234 <_printf_common+0x80>
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	18ed      	adds	r5, r5, r3
 8003234:	2600      	movs	r6, #0
 8003236:	42b5      	cmp	r5, r6
 8003238:	d120      	bne.n	800327c <_printf_common+0xc8>
 800323a:	2000      	movs	r0, #0
 800323c:	e010      	b.n	8003260 <_printf_common+0xac>
 800323e:	3501      	adds	r5, #1
 8003240:	68e3      	ldr	r3, [r4, #12]
 8003242:	6832      	ldr	r2, [r6, #0]
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	42ab      	cmp	r3, r5
 8003248:	ddd2      	ble.n	80031f0 <_printf_common+0x3c>
 800324a:	0022      	movs	r2, r4
 800324c:	2301      	movs	r3, #1
 800324e:	9901      	ldr	r1, [sp, #4]
 8003250:	9800      	ldr	r0, [sp, #0]
 8003252:	9f08      	ldr	r7, [sp, #32]
 8003254:	3219      	adds	r2, #25
 8003256:	47b8      	blx	r7
 8003258:	3001      	adds	r0, #1
 800325a:	d1f0      	bne.n	800323e <_printf_common+0x8a>
 800325c:	2001      	movs	r0, #1
 800325e:	4240      	negs	r0, r0
 8003260:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003262:	2030      	movs	r0, #48	@ 0x30
 8003264:	18e1      	adds	r1, r4, r3
 8003266:	3143      	adds	r1, #67	@ 0x43
 8003268:	7008      	strb	r0, [r1, #0]
 800326a:	0021      	movs	r1, r4
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	3145      	adds	r1, #69	@ 0x45
 8003270:	7809      	ldrb	r1, [r1, #0]
 8003272:	18a2      	adds	r2, r4, r2
 8003274:	3243      	adds	r2, #67	@ 0x43
 8003276:	3302      	adds	r3, #2
 8003278:	7011      	strb	r1, [r2, #0]
 800327a:	e7c1      	b.n	8003200 <_printf_common+0x4c>
 800327c:	0022      	movs	r2, r4
 800327e:	2301      	movs	r3, #1
 8003280:	9901      	ldr	r1, [sp, #4]
 8003282:	9800      	ldr	r0, [sp, #0]
 8003284:	9f08      	ldr	r7, [sp, #32]
 8003286:	321a      	adds	r2, #26
 8003288:	47b8      	blx	r7
 800328a:	3001      	adds	r0, #1
 800328c:	d0e6      	beq.n	800325c <_printf_common+0xa8>
 800328e:	3601      	adds	r6, #1
 8003290:	e7d1      	b.n	8003236 <_printf_common+0x82>
	...

08003294 <_printf_i>:
 8003294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003296:	b08b      	sub	sp, #44	@ 0x2c
 8003298:	9206      	str	r2, [sp, #24]
 800329a:	000a      	movs	r2, r1
 800329c:	3243      	adds	r2, #67	@ 0x43
 800329e:	9307      	str	r3, [sp, #28]
 80032a0:	9005      	str	r0, [sp, #20]
 80032a2:	9203      	str	r2, [sp, #12]
 80032a4:	7e0a      	ldrb	r2, [r1, #24]
 80032a6:	000c      	movs	r4, r1
 80032a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80032aa:	2a78      	cmp	r2, #120	@ 0x78
 80032ac:	d809      	bhi.n	80032c2 <_printf_i+0x2e>
 80032ae:	2a62      	cmp	r2, #98	@ 0x62
 80032b0:	d80b      	bhi.n	80032ca <_printf_i+0x36>
 80032b2:	2a00      	cmp	r2, #0
 80032b4:	d100      	bne.n	80032b8 <_printf_i+0x24>
 80032b6:	e0bc      	b.n	8003432 <_printf_i+0x19e>
 80032b8:	497b      	ldr	r1, [pc, #492]	@ (80034a8 <_printf_i+0x214>)
 80032ba:	9104      	str	r1, [sp, #16]
 80032bc:	2a58      	cmp	r2, #88	@ 0x58
 80032be:	d100      	bne.n	80032c2 <_printf_i+0x2e>
 80032c0:	e090      	b.n	80033e4 <_printf_i+0x150>
 80032c2:	0025      	movs	r5, r4
 80032c4:	3542      	adds	r5, #66	@ 0x42
 80032c6:	702a      	strb	r2, [r5, #0]
 80032c8:	e022      	b.n	8003310 <_printf_i+0x7c>
 80032ca:	0010      	movs	r0, r2
 80032cc:	3863      	subs	r0, #99	@ 0x63
 80032ce:	2815      	cmp	r0, #21
 80032d0:	d8f7      	bhi.n	80032c2 <_printf_i+0x2e>
 80032d2:	f7fc ff17 	bl	8000104 <__gnu_thumb1_case_shi>
 80032d6:	0016      	.short	0x0016
 80032d8:	fff6001f 	.word	0xfff6001f
 80032dc:	fff6fff6 	.word	0xfff6fff6
 80032e0:	001ffff6 	.word	0x001ffff6
 80032e4:	fff6fff6 	.word	0xfff6fff6
 80032e8:	fff6fff6 	.word	0xfff6fff6
 80032ec:	003600a1 	.word	0x003600a1
 80032f0:	fff60080 	.word	0xfff60080
 80032f4:	00b2fff6 	.word	0x00b2fff6
 80032f8:	0036fff6 	.word	0x0036fff6
 80032fc:	fff6fff6 	.word	0xfff6fff6
 8003300:	0084      	.short	0x0084
 8003302:	0025      	movs	r5, r4
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	3542      	adds	r5, #66	@ 0x42
 8003308:	1d11      	adds	r1, r2, #4
 800330a:	6019      	str	r1, [r3, #0]
 800330c:	6813      	ldr	r3, [r2, #0]
 800330e:	702b      	strb	r3, [r5, #0]
 8003310:	2301      	movs	r3, #1
 8003312:	e0a0      	b.n	8003456 <_printf_i+0x1c2>
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	6809      	ldr	r1, [r1, #0]
 8003318:	1d02      	adds	r2, r0, #4
 800331a:	060d      	lsls	r5, r1, #24
 800331c:	d50b      	bpl.n	8003336 <_printf_i+0xa2>
 800331e:	6806      	ldr	r6, [r0, #0]
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	2e00      	cmp	r6, #0
 8003324:	da03      	bge.n	800332e <_printf_i+0x9a>
 8003326:	232d      	movs	r3, #45	@ 0x2d
 8003328:	9a03      	ldr	r2, [sp, #12]
 800332a:	4276      	negs	r6, r6
 800332c:	7013      	strb	r3, [r2, #0]
 800332e:	4b5e      	ldr	r3, [pc, #376]	@ (80034a8 <_printf_i+0x214>)
 8003330:	270a      	movs	r7, #10
 8003332:	9304      	str	r3, [sp, #16]
 8003334:	e018      	b.n	8003368 <_printf_i+0xd4>
 8003336:	6806      	ldr	r6, [r0, #0]
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	0649      	lsls	r1, r1, #25
 800333c:	d5f1      	bpl.n	8003322 <_printf_i+0x8e>
 800333e:	b236      	sxth	r6, r6
 8003340:	e7ef      	b.n	8003322 <_printf_i+0x8e>
 8003342:	6808      	ldr	r0, [r1, #0]
 8003344:	6819      	ldr	r1, [r3, #0]
 8003346:	c940      	ldmia	r1!, {r6}
 8003348:	0605      	lsls	r5, r0, #24
 800334a:	d402      	bmi.n	8003352 <_printf_i+0xbe>
 800334c:	0640      	lsls	r0, r0, #25
 800334e:	d500      	bpl.n	8003352 <_printf_i+0xbe>
 8003350:	b2b6      	uxth	r6, r6
 8003352:	6019      	str	r1, [r3, #0]
 8003354:	4b54      	ldr	r3, [pc, #336]	@ (80034a8 <_printf_i+0x214>)
 8003356:	270a      	movs	r7, #10
 8003358:	9304      	str	r3, [sp, #16]
 800335a:	2a6f      	cmp	r2, #111	@ 0x6f
 800335c:	d100      	bne.n	8003360 <_printf_i+0xcc>
 800335e:	3f02      	subs	r7, #2
 8003360:	0023      	movs	r3, r4
 8003362:	2200      	movs	r2, #0
 8003364:	3343      	adds	r3, #67	@ 0x43
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	6863      	ldr	r3, [r4, #4]
 800336a:	60a3      	str	r3, [r4, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	db03      	blt.n	8003378 <_printf_i+0xe4>
 8003370:	2104      	movs	r1, #4
 8003372:	6822      	ldr	r2, [r4, #0]
 8003374:	438a      	bics	r2, r1
 8003376:	6022      	str	r2, [r4, #0]
 8003378:	2e00      	cmp	r6, #0
 800337a:	d102      	bne.n	8003382 <_printf_i+0xee>
 800337c:	9d03      	ldr	r5, [sp, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00c      	beq.n	800339c <_printf_i+0x108>
 8003382:	9d03      	ldr	r5, [sp, #12]
 8003384:	0030      	movs	r0, r6
 8003386:	0039      	movs	r1, r7
 8003388:	f7fc ff4c 	bl	8000224 <__aeabi_uidivmod>
 800338c:	9b04      	ldr	r3, [sp, #16]
 800338e:	3d01      	subs	r5, #1
 8003390:	5c5b      	ldrb	r3, [r3, r1]
 8003392:	702b      	strb	r3, [r5, #0]
 8003394:	0033      	movs	r3, r6
 8003396:	0006      	movs	r6, r0
 8003398:	429f      	cmp	r7, r3
 800339a:	d9f3      	bls.n	8003384 <_printf_i+0xf0>
 800339c:	2f08      	cmp	r7, #8
 800339e:	d109      	bne.n	80033b4 <_printf_i+0x120>
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	07db      	lsls	r3, r3, #31
 80033a4:	d506      	bpl.n	80033b4 <_printf_i+0x120>
 80033a6:	6862      	ldr	r2, [r4, #4]
 80033a8:	6923      	ldr	r3, [r4, #16]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	dc02      	bgt.n	80033b4 <_printf_i+0x120>
 80033ae:	2330      	movs	r3, #48	@ 0x30
 80033b0:	3d01      	subs	r5, #1
 80033b2:	702b      	strb	r3, [r5, #0]
 80033b4:	9b03      	ldr	r3, [sp, #12]
 80033b6:	1b5b      	subs	r3, r3, r5
 80033b8:	6123      	str	r3, [r4, #16]
 80033ba:	9b07      	ldr	r3, [sp, #28]
 80033bc:	0021      	movs	r1, r4
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	9805      	ldr	r0, [sp, #20]
 80033c2:	9b06      	ldr	r3, [sp, #24]
 80033c4:	aa09      	add	r2, sp, #36	@ 0x24
 80033c6:	f7ff fef5 	bl	80031b4 <_printf_common>
 80033ca:	3001      	adds	r0, #1
 80033cc:	d148      	bne.n	8003460 <_printf_i+0x1cc>
 80033ce:	2001      	movs	r0, #1
 80033d0:	4240      	negs	r0, r0
 80033d2:	b00b      	add	sp, #44	@ 0x2c
 80033d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033d6:	2220      	movs	r2, #32
 80033d8:	6809      	ldr	r1, [r1, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	6022      	str	r2, [r4, #0]
 80033de:	2278      	movs	r2, #120	@ 0x78
 80033e0:	4932      	ldr	r1, [pc, #200]	@ (80034ac <_printf_i+0x218>)
 80033e2:	9104      	str	r1, [sp, #16]
 80033e4:	0021      	movs	r1, r4
 80033e6:	3145      	adds	r1, #69	@ 0x45
 80033e8:	700a      	strb	r2, [r1, #0]
 80033ea:	6819      	ldr	r1, [r3, #0]
 80033ec:	6822      	ldr	r2, [r4, #0]
 80033ee:	c940      	ldmia	r1!, {r6}
 80033f0:	0610      	lsls	r0, r2, #24
 80033f2:	d402      	bmi.n	80033fa <_printf_i+0x166>
 80033f4:	0650      	lsls	r0, r2, #25
 80033f6:	d500      	bpl.n	80033fa <_printf_i+0x166>
 80033f8:	b2b6      	uxth	r6, r6
 80033fa:	6019      	str	r1, [r3, #0]
 80033fc:	07d3      	lsls	r3, r2, #31
 80033fe:	d502      	bpl.n	8003406 <_printf_i+0x172>
 8003400:	2320      	movs	r3, #32
 8003402:	4313      	orrs	r3, r2
 8003404:	6023      	str	r3, [r4, #0]
 8003406:	2e00      	cmp	r6, #0
 8003408:	d001      	beq.n	800340e <_printf_i+0x17a>
 800340a:	2710      	movs	r7, #16
 800340c:	e7a8      	b.n	8003360 <_printf_i+0xcc>
 800340e:	2220      	movs	r2, #32
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	4393      	bics	r3, r2
 8003414:	6023      	str	r3, [r4, #0]
 8003416:	e7f8      	b.n	800340a <_printf_i+0x176>
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	680d      	ldr	r5, [r1, #0]
 800341c:	1d10      	adds	r0, r2, #4
 800341e:	6949      	ldr	r1, [r1, #20]
 8003420:	6018      	str	r0, [r3, #0]
 8003422:	6813      	ldr	r3, [r2, #0]
 8003424:	062e      	lsls	r6, r5, #24
 8003426:	d501      	bpl.n	800342c <_printf_i+0x198>
 8003428:	6019      	str	r1, [r3, #0]
 800342a:	e002      	b.n	8003432 <_printf_i+0x19e>
 800342c:	066d      	lsls	r5, r5, #25
 800342e:	d5fb      	bpl.n	8003428 <_printf_i+0x194>
 8003430:	8019      	strh	r1, [r3, #0]
 8003432:	2300      	movs	r3, #0
 8003434:	9d03      	ldr	r5, [sp, #12]
 8003436:	6123      	str	r3, [r4, #16]
 8003438:	e7bf      	b.n	80033ba <_printf_i+0x126>
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	1d11      	adds	r1, r2, #4
 800343e:	6019      	str	r1, [r3, #0]
 8003440:	6815      	ldr	r5, [r2, #0]
 8003442:	2100      	movs	r1, #0
 8003444:	0028      	movs	r0, r5
 8003446:	6862      	ldr	r2, [r4, #4]
 8003448:	f000 f858 	bl	80034fc <memchr>
 800344c:	2800      	cmp	r0, #0
 800344e:	d001      	beq.n	8003454 <_printf_i+0x1c0>
 8003450:	1b40      	subs	r0, r0, r5
 8003452:	6060      	str	r0, [r4, #4]
 8003454:	6863      	ldr	r3, [r4, #4]
 8003456:	6123      	str	r3, [r4, #16]
 8003458:	2300      	movs	r3, #0
 800345a:	9a03      	ldr	r2, [sp, #12]
 800345c:	7013      	strb	r3, [r2, #0]
 800345e:	e7ac      	b.n	80033ba <_printf_i+0x126>
 8003460:	002a      	movs	r2, r5
 8003462:	6923      	ldr	r3, [r4, #16]
 8003464:	9906      	ldr	r1, [sp, #24]
 8003466:	9805      	ldr	r0, [sp, #20]
 8003468:	9d07      	ldr	r5, [sp, #28]
 800346a:	47a8      	blx	r5
 800346c:	3001      	adds	r0, #1
 800346e:	d0ae      	beq.n	80033ce <_printf_i+0x13a>
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	079b      	lsls	r3, r3, #30
 8003474:	d415      	bmi.n	80034a2 <_printf_i+0x20e>
 8003476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003478:	68e0      	ldr	r0, [r4, #12]
 800347a:	4298      	cmp	r0, r3
 800347c:	daa9      	bge.n	80033d2 <_printf_i+0x13e>
 800347e:	0018      	movs	r0, r3
 8003480:	e7a7      	b.n	80033d2 <_printf_i+0x13e>
 8003482:	0022      	movs	r2, r4
 8003484:	2301      	movs	r3, #1
 8003486:	9906      	ldr	r1, [sp, #24]
 8003488:	9805      	ldr	r0, [sp, #20]
 800348a:	9e07      	ldr	r6, [sp, #28]
 800348c:	3219      	adds	r2, #25
 800348e:	47b0      	blx	r6
 8003490:	3001      	adds	r0, #1
 8003492:	d09c      	beq.n	80033ce <_printf_i+0x13a>
 8003494:	3501      	adds	r5, #1
 8003496:	68e3      	ldr	r3, [r4, #12]
 8003498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	42ab      	cmp	r3, r5
 800349e:	dcf0      	bgt.n	8003482 <_printf_i+0x1ee>
 80034a0:	e7e9      	b.n	8003476 <_printf_i+0x1e2>
 80034a2:	2500      	movs	r5, #0
 80034a4:	e7f7      	b.n	8003496 <_printf_i+0x202>
 80034a6:	46c0      	nop			@ (mov r8, r8)
 80034a8:	08003655 	.word	0x08003655
 80034ac:	08003666 	.word	0x08003666

080034b0 <memmove>:
 80034b0:	b510      	push	{r4, lr}
 80034b2:	4288      	cmp	r0, r1
 80034b4:	d806      	bhi.n	80034c4 <memmove+0x14>
 80034b6:	2300      	movs	r3, #0
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d008      	beq.n	80034ce <memmove+0x1e>
 80034bc:	5ccc      	ldrb	r4, [r1, r3]
 80034be:	54c4      	strb	r4, [r0, r3]
 80034c0:	3301      	adds	r3, #1
 80034c2:	e7f9      	b.n	80034b8 <memmove+0x8>
 80034c4:	188b      	adds	r3, r1, r2
 80034c6:	4298      	cmp	r0, r3
 80034c8:	d2f5      	bcs.n	80034b6 <memmove+0x6>
 80034ca:	3a01      	subs	r2, #1
 80034cc:	d200      	bcs.n	80034d0 <memmove+0x20>
 80034ce:	bd10      	pop	{r4, pc}
 80034d0:	5c8b      	ldrb	r3, [r1, r2]
 80034d2:	5483      	strb	r3, [r0, r2]
 80034d4:	e7f9      	b.n	80034ca <memmove+0x1a>
	...

080034d8 <_sbrk_r>:
 80034d8:	2300      	movs	r3, #0
 80034da:	b570      	push	{r4, r5, r6, lr}
 80034dc:	4d06      	ldr	r5, [pc, #24]	@ (80034f8 <_sbrk_r+0x20>)
 80034de:	0004      	movs	r4, r0
 80034e0:	0008      	movs	r0, r1
 80034e2:	602b      	str	r3, [r5, #0]
 80034e4:	f7fd fa88 	bl	80009f8 <_sbrk>
 80034e8:	1c43      	adds	r3, r0, #1
 80034ea:	d103      	bne.n	80034f4 <_sbrk_r+0x1c>
 80034ec:	682b      	ldr	r3, [r5, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d000      	beq.n	80034f4 <_sbrk_r+0x1c>
 80034f2:	6023      	str	r3, [r4, #0]
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	2000024c 	.word	0x2000024c

080034fc <memchr>:
 80034fc:	b2c9      	uxtb	r1, r1
 80034fe:	1882      	adds	r2, r0, r2
 8003500:	4290      	cmp	r0, r2
 8003502:	d101      	bne.n	8003508 <memchr+0xc>
 8003504:	2000      	movs	r0, #0
 8003506:	4770      	bx	lr
 8003508:	7803      	ldrb	r3, [r0, #0]
 800350a:	428b      	cmp	r3, r1
 800350c:	d0fb      	beq.n	8003506 <memchr+0xa>
 800350e:	3001      	adds	r0, #1
 8003510:	e7f6      	b.n	8003500 <memchr+0x4>

08003512 <memcpy>:
 8003512:	2300      	movs	r3, #0
 8003514:	b510      	push	{r4, lr}
 8003516:	429a      	cmp	r2, r3
 8003518:	d100      	bne.n	800351c <memcpy+0xa>
 800351a:	bd10      	pop	{r4, pc}
 800351c:	5ccc      	ldrb	r4, [r1, r3]
 800351e:	54c4      	strb	r4, [r0, r3]
 8003520:	3301      	adds	r3, #1
 8003522:	e7f8      	b.n	8003516 <memcpy+0x4>

08003524 <_realloc_r>:
 8003524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003526:	0006      	movs	r6, r0
 8003528:	000c      	movs	r4, r1
 800352a:	0015      	movs	r5, r2
 800352c:	2900      	cmp	r1, #0
 800352e:	d105      	bne.n	800353c <_realloc_r+0x18>
 8003530:	0011      	movs	r1, r2
 8003532:	f7ff fc51 	bl	8002dd8 <_malloc_r>
 8003536:	0004      	movs	r4, r0
 8003538:	0020      	movs	r0, r4
 800353a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800353c:	2a00      	cmp	r2, #0
 800353e:	d103      	bne.n	8003548 <_realloc_r+0x24>
 8003540:	f7ff fbde 	bl	8002d00 <_free_r>
 8003544:	2400      	movs	r4, #0
 8003546:	e7f7      	b.n	8003538 <_realloc_r+0x14>
 8003548:	f000 f81b 	bl	8003582 <_malloc_usable_size_r>
 800354c:	0007      	movs	r7, r0
 800354e:	4285      	cmp	r5, r0
 8003550:	d802      	bhi.n	8003558 <_realloc_r+0x34>
 8003552:	0843      	lsrs	r3, r0, #1
 8003554:	42ab      	cmp	r3, r5
 8003556:	d3ef      	bcc.n	8003538 <_realloc_r+0x14>
 8003558:	0029      	movs	r1, r5
 800355a:	0030      	movs	r0, r6
 800355c:	f7ff fc3c 	bl	8002dd8 <_malloc_r>
 8003560:	9001      	str	r0, [sp, #4]
 8003562:	2800      	cmp	r0, #0
 8003564:	d0ee      	beq.n	8003544 <_realloc_r+0x20>
 8003566:	002a      	movs	r2, r5
 8003568:	42bd      	cmp	r5, r7
 800356a:	d900      	bls.n	800356e <_realloc_r+0x4a>
 800356c:	003a      	movs	r2, r7
 800356e:	0021      	movs	r1, r4
 8003570:	9801      	ldr	r0, [sp, #4]
 8003572:	f7ff ffce 	bl	8003512 <memcpy>
 8003576:	0021      	movs	r1, r4
 8003578:	0030      	movs	r0, r6
 800357a:	f7ff fbc1 	bl	8002d00 <_free_r>
 800357e:	9c01      	ldr	r4, [sp, #4]
 8003580:	e7da      	b.n	8003538 <_realloc_r+0x14>

08003582 <_malloc_usable_size_r>:
 8003582:	1f0b      	subs	r3, r1, #4
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	1f18      	subs	r0, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	da01      	bge.n	8003590 <_malloc_usable_size_r+0xe>
 800358c:	580b      	ldr	r3, [r1, r0]
 800358e:	18c0      	adds	r0, r0, r3
 8003590:	4770      	bx	lr
	...

08003594 <_init>:
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	46c0      	nop			@ (mov r8, r8)
 8003598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359a:	bc08      	pop	{r3}
 800359c:	469e      	mov	lr, r3
 800359e:	4770      	bx	lr

080035a0 <_fini>:
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a2:	46c0      	nop			@ (mov r8, r8)
 80035a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a6:	bc08      	pop	{r3}
 80035a8:	469e      	mov	lr, r3
 80035aa:	4770      	bx	lr
