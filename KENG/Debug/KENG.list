
KENG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004918  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080049d4  080049d4  000059d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a8c  08004a8c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a8c  08004a8c  00005a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a94  08004a94  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a94  08004a94  00005a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a98  08004a98  00005a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004a9c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000000c  08004aa8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004aa8  00006180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e49a  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e2  00000000  00000000  000144ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  000167b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e8  00000000  00000000  00017340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184ba  00000000  00000000  00017c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e64c  00000000  00000000  000300e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d141  00000000  00000000  0003e72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db86f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f4  00000000  00000000  000db8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000de1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080049bc 	.word	0x080049bc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080049bc 	.word	0x080049bc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <LED>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LED(int led, int state) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	switch (led) {
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b09      	cmp	r3, #9
 800062a:	d85d      	bhi.n	80006e8 <LED+0xcc>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	009a      	lsls	r2, r3, #2
 8000630:	4b2f      	ldr	r3, [pc, #188]	@ (80006f0 <LED+0xd4>)
 8000632:	18d3      	adds	r3, r2, r3
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	469f      	mov	pc, r3
		case 0:
			HAL_GPIO_WritePin(VU0_GPIO_Port, VU0_Pin, state);
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	b2da      	uxtb	r2, r3
 800063c:	23a0      	movs	r3, #160	@ 0xa0
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	2102      	movs	r1, #2
 8000642:	0018      	movs	r0, r3
 8000644:	f002 fba2 	bl	8002d8c <HAL_GPIO_WritePin>
			break;
 8000648:	e04e      	b.n	80006e8 <LED+0xcc>
		case 1:
			HAL_GPIO_WritePin(VU1_GPIO_Port, VU1_Pin, state);
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	b2da      	uxtb	r2, r3
 800064e:	23a0      	movs	r3, #160	@ 0xa0
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	2110      	movs	r1, #16
 8000654:	0018      	movs	r0, r3
 8000656:	f002 fb99 	bl	8002d8c <HAL_GPIO_WritePin>
			break;
 800065a:	e045      	b.n	80006e8 <LED+0xcc>
		case 2:
			HAL_GPIO_WritePin(VU2_GPIO_Port, VU2_Pin, state);
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	4824      	ldr	r0, [pc, #144]	@ (80006f4 <LED+0xd8>)
 8000662:	001a      	movs	r2, r3
 8000664:	2102      	movs	r1, #2
 8000666:	f002 fb91 	bl	8002d8c <HAL_GPIO_WritePin>
			break;
 800066a:	e03d      	b.n	80006e8 <LED+0xcc>
		case 3:
			HAL_GPIO_WritePin(VU3_GPIO_Port, VU3_Pin, state);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	2380      	movs	r3, #128	@ 0x80
 8000672:	011b      	lsls	r3, r3, #4
 8000674:	481f      	ldr	r0, [pc, #124]	@ (80006f4 <LED+0xd8>)
 8000676:	0019      	movs	r1, r3
 8000678:	f002 fb88 	bl	8002d8c <HAL_GPIO_WritePin>
			break;
 800067c:	e034      	b.n	80006e8 <LED+0xcc>
		case 4:
			HAL_GPIO_WritePin(VU4_GPIO_Port, VU4_Pin, state);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	b2da      	uxtb	r2, r3
 8000682:	2380      	movs	r3, #128	@ 0x80
 8000684:	015b      	lsls	r3, r3, #5
 8000686:	481b      	ldr	r0, [pc, #108]	@ (80006f4 <LED+0xd8>)
 8000688:	0019      	movs	r1, r3
 800068a:	f002 fb7f 	bl	8002d8c <HAL_GPIO_WritePin>
			break;
 800068e:	e02b      	b.n	80006e8 <LED+0xcc>
		case 5:
			HAL_GPIO_WritePin(VU5_GPIO_Port, VU5_Pin, state);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	b2da      	uxtb	r2, r3
 8000694:	23a0      	movs	r3, #160	@ 0xa0
 8000696:	05db      	lsls	r3, r3, #23
 8000698:	2140      	movs	r1, #64	@ 0x40
 800069a:	0018      	movs	r0, r3
 800069c:	f002 fb76 	bl	8002d8c <HAL_GPIO_WritePin>
			break;
 80006a0:	e022      	b.n	80006e8 <LED+0xcc>
		case 6:
			HAL_GPIO_WritePin(VU6_GPIO_Port, VU6_Pin, state);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	23a0      	movs	r3, #160	@ 0xa0
 80006a8:	05db      	lsls	r3, r3, #23
 80006aa:	2180      	movs	r1, #128	@ 0x80
 80006ac:	0018      	movs	r0, r3
 80006ae:	f002 fb6d 	bl	8002d8c <HAL_GPIO_WritePin>
			break;
 80006b2:	e019      	b.n	80006e8 <LED+0xcc>
		case 7:
			HAL_GPIO_WritePin(VU7_GPIO_Port, VU7_Pin, state);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	480e      	ldr	r0, [pc, #56]	@ (80006f4 <LED+0xd8>)
 80006ba:	001a      	movs	r2, r3
 80006bc:	2101      	movs	r1, #1
 80006be:	f002 fb65 	bl	8002d8c <HAL_GPIO_WritePin>
			break;
 80006c2:	e011      	b.n	80006e8 <LED+0xcc>
		case 8:
			HAL_GPIO_WritePin(VU8_GPIO_Port, VU8_Pin, state);
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	480b      	ldr	r0, [pc, #44]	@ (80006f8 <LED+0xdc>)
 80006ca:	001a      	movs	r2, r3
 80006cc:	2180      	movs	r1, #128	@ 0x80
 80006ce:	f002 fb5d 	bl	8002d8c <HAL_GPIO_WritePin>
			break;
 80006d2:	e009      	b.n	80006e8 <LED+0xcc>
		case 9:
			HAL_GPIO_WritePin(VU9_GPIO_Port, VU9_Pin, state);
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	2380      	movs	r3, #128	@ 0x80
 80006da:	0099      	lsls	r1, r3, #2
 80006dc:	23a0      	movs	r3, #160	@ 0xa0
 80006de:	05db      	lsls	r3, r3, #23
 80006e0:	0018      	movs	r0, r3
 80006e2:	f002 fb53 	bl	8002d8c <HAL_GPIO_WritePin>
			break;
 80006e6:	46c0      	nop			@ (mov r8, r8)
	}
}
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b002      	add	sp, #8
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	080049dc 	.word	0x080049dc
 80006f4:	50000400 	.word	0x50000400
 80006f8:	50000800 	.word	0x50000800

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b0c6      	sub	sp, #280	@ 0x118
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f000 fc59 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f8ff 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f000 fa2d 	bl	8000b68 <MX_GPIO_Init>
  MX_DMA_Init();
 800070e:	f000 fa0d 	bl	8000b2c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000712:	f000 f9bd 	bl	8000a90 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000716:	f000 f955 	bl	80009c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 800071a:	4b77      	ldr	r3, [pc, #476]	@ (80008f8 <main+0x1fc>)
 800071c:	0018      	movs	r0, r3
 800071e:	f001 fd85 	bl	800222c <HAL_ADCEx_Calibration_Start>
  unsigned char string_buffer[256];
  int string_buffer_size = -1;
 8000722:	2301      	movs	r3, #1
 8000724:	425b      	negs	r3, r3
 8000726:	228a      	movs	r2, #138	@ 0x8a
 8000728:	0052      	lsls	r2, r2, #1
 800072a:	18ba      	adds	r2, r7, r2
 800072c:	6013      	str	r3, [r2, #0]
  volatile unsigned int ADC_value = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
  const int MAX_ADC_VALUE = 3650;
 8000732:	4b72      	ldr	r3, [pc, #456]	@ (80008fc <main+0x200>)
 8000734:	2288      	movs	r2, #136	@ 0x88
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	18b9      	adds	r1, r7, r2
 800073a:	600b      	str	r3, [r1, #0]
  const int VU_COUNT = 10;
 800073c:	230a      	movs	r3, #10
 800073e:	2186      	movs	r1, #134	@ 0x86
 8000740:	0049      	lsls	r1, r1, #1
 8000742:	1878      	adds	r0, r7, r1
 8000744:	6003      	str	r3, [r0, #0]
  const int STEP_SIZE = MAX_ADC_VALUE / VU_COUNT;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	6819      	ldr	r1, [r3, #0]
 800074a:	18bb      	adds	r3, r7, r2
 800074c:	6818      	ldr	r0, [r3, #0]
 800074e:	f7ff fd63 	bl	8000218 <__divsi3>
 8000752:	0003      	movs	r3, r0
 8000754:	2284      	movs	r2, #132	@ 0x84
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	18ba      	adds	r2, r7, r2
 800075a:	6013      	str	r3, [r2, #0]

  HAL_ADC_Start_DMA(&hadc1, &ADC_value, 1);
 800075c:	1d39      	adds	r1, r7, #4
 800075e:	4b66      	ldr	r3, [pc, #408]	@ (80008f8 <main+0x1fc>)
 8000760:	2201      	movs	r2, #1
 8000762:	0018      	movs	r0, r3
 8000764:	f000 ffba 	bl	80016dc <HAL_ADC_Start_DMA>

  HAL_UART_Transmit(&huart2, "Start\r\n", 7, 1000);
 8000768:	23fa      	movs	r3, #250	@ 0xfa
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4964      	ldr	r1, [pc, #400]	@ (8000900 <main+0x204>)
 800076e:	4865      	ldr	r0, [pc, #404]	@ (8000904 <main+0x208>)
 8000770:	2207      	movs	r2, #7
 8000772:	f003 fa47 	bl	8003c04 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  (ADC_value >= STEP_SIZE * 1) ? LED(0, 1) : LED(0, 0);
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	2384      	movs	r3, #132	@ 0x84
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d304      	bcc.n	800078e <main+0x92>
 8000784:	2101      	movs	r1, #1
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff ff48 	bl	800061c <LED>
 800078c:	e003      	b.n	8000796 <main+0x9a>
 800078e:	2100      	movs	r1, #0
 8000790:	2000      	movs	r0, #0
 8000792:	f7ff ff43 	bl	800061c <LED>
	  (ADC_value >= STEP_SIZE * 2) ? LED(1, 1) : LED(1, 0);
 8000796:	2384      	movs	r3, #132	@ 0x84
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	001a      	movs	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d804      	bhi.n	80007b2 <main+0xb6>
 80007a8:	2101      	movs	r1, #1
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff ff36 	bl	800061c <LED>
 80007b0:	e003      	b.n	80007ba <main+0xbe>
 80007b2:	2100      	movs	r1, #0
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff ff31 	bl	800061c <LED>
	  (ADC_value >= STEP_SIZE * 3) ? LED(2, 1) : LED(2, 0);
 80007ba:	2384      	movs	r3, #132	@ 0x84
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	18fb      	adds	r3, r7, r3
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	0013      	movs	r3, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	189b      	adds	r3, r3, r2
 80007c8:	001a      	movs	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d804      	bhi.n	80007da <main+0xde>
 80007d0:	2101      	movs	r1, #1
 80007d2:	2002      	movs	r0, #2
 80007d4:	f7ff ff22 	bl	800061c <LED>
 80007d8:	e003      	b.n	80007e2 <main+0xe6>
 80007da:	2100      	movs	r1, #0
 80007dc:	2002      	movs	r0, #2
 80007de:	f7ff ff1d 	bl	800061c <LED>
	  (ADC_value >= STEP_SIZE * 4) ? LED(3, 1) : LED(3, 0);
 80007e2:	2384      	movs	r3, #132	@ 0x84
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	18fb      	adds	r3, r7, r3
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	001a      	movs	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d804      	bhi.n	80007fe <main+0x102>
 80007f4:	2101      	movs	r1, #1
 80007f6:	2003      	movs	r0, #3
 80007f8:	f7ff ff10 	bl	800061c <LED>
 80007fc:	e003      	b.n	8000806 <main+0x10a>
 80007fe:	2100      	movs	r1, #0
 8000800:	2003      	movs	r0, #3
 8000802:	f7ff ff0b 	bl	800061c <LED>
	  (ADC_value >= STEP_SIZE * 5) ? LED(4, 1) : LED(4, 0);
 8000806:	2384      	movs	r3, #132	@ 0x84
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	18fb      	adds	r3, r7, r3
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	0013      	movs	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	189b      	adds	r3, r3, r2
 8000814:	001a      	movs	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	429a      	cmp	r2, r3
 800081a:	d804      	bhi.n	8000826 <main+0x12a>
 800081c:	2101      	movs	r1, #1
 800081e:	2004      	movs	r0, #4
 8000820:	f7ff fefc 	bl	800061c <LED>
 8000824:	e003      	b.n	800082e <main+0x132>
 8000826:	2100      	movs	r1, #0
 8000828:	2004      	movs	r0, #4
 800082a:	f7ff fef7 	bl	800061c <LED>
	  (ADC_value >= STEP_SIZE * 6) ? LED(5, 1) : LED(5, 0);
 800082e:	2384      	movs	r3, #132	@ 0x84
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	18fb      	adds	r3, r7, r3
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	0013      	movs	r3, r2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	189b      	adds	r3, r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	001a      	movs	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	429a      	cmp	r2, r3
 8000844:	d804      	bhi.n	8000850 <main+0x154>
 8000846:	2101      	movs	r1, #1
 8000848:	2005      	movs	r0, #5
 800084a:	f7ff fee7 	bl	800061c <LED>
 800084e:	e003      	b.n	8000858 <main+0x15c>
 8000850:	2100      	movs	r1, #0
 8000852:	2005      	movs	r0, #5
 8000854:	f7ff fee2 	bl	800061c <LED>
	  (ADC_value >= STEP_SIZE * 7) ? LED(6, 1) : LED(6, 0);
 8000858:	2384      	movs	r3, #132	@ 0x84
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	0013      	movs	r3, r2
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	1a9b      	subs	r3, r3, r2
 8000866:	001a      	movs	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	429a      	cmp	r2, r3
 800086c:	d804      	bhi.n	8000878 <main+0x17c>
 800086e:	2101      	movs	r1, #1
 8000870:	2006      	movs	r0, #6
 8000872:	f7ff fed3 	bl	800061c <LED>
 8000876:	e003      	b.n	8000880 <main+0x184>
 8000878:	2100      	movs	r1, #0
 800087a:	2006      	movs	r0, #6
 800087c:	f7ff fece 	bl	800061c <LED>
	  (ADC_value >= STEP_SIZE * 8) ? LED(7, 1) : LED(7, 0);
 8000880:	2384      	movs	r3, #132	@ 0x84
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	18fb      	adds	r3, r7, r3
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	001a      	movs	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	429a      	cmp	r2, r3
 8000890:	d804      	bhi.n	800089c <main+0x1a0>
 8000892:	2101      	movs	r1, #1
 8000894:	2007      	movs	r0, #7
 8000896:	f7ff fec1 	bl	800061c <LED>
 800089a:	e003      	b.n	80008a4 <main+0x1a8>
 800089c:	2100      	movs	r1, #0
 800089e:	2007      	movs	r0, #7
 80008a0:	f7ff febc 	bl	800061c <LED>
	  (ADC_value >= STEP_SIZE * 9) ? LED(8, 1) : LED(8, 0);
 80008a4:	2384      	movs	r3, #132	@ 0x84
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	18fb      	adds	r3, r7, r3
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	0013      	movs	r3, r2
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	189b      	adds	r3, r3, r2
 80008b2:	001a      	movs	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d804      	bhi.n	80008c4 <main+0x1c8>
 80008ba:	2101      	movs	r1, #1
 80008bc:	2008      	movs	r0, #8
 80008be:	f7ff fead 	bl	800061c <LED>
 80008c2:	e003      	b.n	80008cc <main+0x1d0>
 80008c4:	2100      	movs	r1, #0
 80008c6:	2008      	movs	r0, #8
 80008c8:	f7ff fea8 	bl	800061c <LED>
	  (ADC_value >= STEP_SIZE * 10) ? LED(9, 1) : LED(9, 0);
 80008cc:	2384      	movs	r3, #132	@ 0x84
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	0013      	movs	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	189b      	adds	r3, r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	001a      	movs	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d804      	bhi.n	80008ee <main+0x1f2>
 80008e4:	2101      	movs	r1, #1
 80008e6:	2009      	movs	r0, #9
 80008e8:	f7ff fe98 	bl	800061c <LED>
 80008ec:	e743      	b.n	8000776 <main+0x7a>
 80008ee:	2100      	movs	r1, #0
 80008f0:	2009      	movs	r0, #9
 80008f2:	f7ff fe93 	bl	800061c <LED>
	  (ADC_value >= STEP_SIZE * 1) ? LED(0, 1) : LED(0, 0);
 80008f6:	e73e      	b.n	8000776 <main+0x7a>
 80008f8:	20000028 	.word	0x20000028
 80008fc:	00000e42 	.word	0x00000e42
 8000900:	080049d4 	.word	0x080049d4
 8000904:	200000e8 	.word	0x200000e8

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b093      	sub	sp, #76	@ 0x4c
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	2410      	movs	r4, #16
 8000910:	193b      	adds	r3, r7, r4
 8000912:	0018      	movs	r0, r3
 8000914:	2338      	movs	r3, #56	@ 0x38
 8000916:	001a      	movs	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f004 f823 	bl	8004964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091e:	003b      	movs	r3, r7
 8000920:	0018      	movs	r0, r3
 8000922:	2310      	movs	r3, #16
 8000924:	001a      	movs	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	f004 f81c 	bl	8004964 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800092c:	2380      	movs	r3, #128	@ 0x80
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	0018      	movs	r0, r3
 8000932:	f002 fa49 	bl	8002dc8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000936:	193b      	adds	r3, r7, r4
 8000938:	2202      	movs	r2, #2
 800093a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093c:	193b      	adds	r3, r7, r4
 800093e:	2280      	movs	r2, #128	@ 0x80
 8000940:	0052      	lsls	r2, r2, #1
 8000942:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000944:	0021      	movs	r1, r4
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2240      	movs	r2, #64	@ 0x40
 8000950:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2202      	movs	r2, #2
 8000956:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2202      	movs	r2, #2
 800095c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2208      	movs	r2, #8
 8000968:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2280      	movs	r2, #128	@ 0x80
 800096e:	0292      	lsls	r2, r2, #10
 8000970:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2280      	movs	r2, #128	@ 0x80
 8000976:	0492      	lsls	r2, r2, #18
 8000978:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2280      	movs	r2, #128	@ 0x80
 800097e:	0592      	lsls	r2, r2, #22
 8000980:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000982:	187b      	adds	r3, r7, r1
 8000984:	0018      	movs	r0, r3
 8000986:	f002 fa6b 	bl	8002e60 <HAL_RCC_OscConfig>
 800098a:	1e03      	subs	r3, r0, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800098e:	f000 f995 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000992:	003b      	movs	r3, r7
 8000994:	2207      	movs	r2, #7
 8000996:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000998:	003b      	movs	r3, r7
 800099a:	2202      	movs	r2, #2
 800099c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099e:	003b      	movs	r3, r7
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a4:	003b      	movs	r3, r7
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009aa:	003b      	movs	r3, r7
 80009ac:	2102      	movs	r1, #2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f002 fd70 	bl	8003494 <HAL_RCC_ClockConfig>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009b8:	f000 f980 	bl	8000cbc <Error_Handler>
  }
}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b013      	add	sp, #76	@ 0x4c
 80009c2:	bd90      	pop	{r4, r7, pc}

080009c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	0018      	movs	r0, r3
 80009ce:	230c      	movs	r3, #12
 80009d0:	001a      	movs	r2, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	f003 ffc6 	bl	8004964 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 80009da:	4a2c      	ldr	r2, [pc, #176]	@ (8000a8c <MX_ADC1_Init+0xc8>)
 80009dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 80009de:	4b2a      	ldr	r3, [pc, #168]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 80009e0:	2280      	movs	r2, #128	@ 0x80
 80009e2:	0392      	lsls	r2, r2, #14
 80009e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009e6:	4b28      	ldr	r3, [pc, #160]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ec:	4b26      	ldr	r3, [pc, #152]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009f2:	4b25      	ldr	r3, [pc, #148]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f8:	4b23      	ldr	r3, [pc, #140]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 80009fa:	2204      	movs	r2, #4
 80009fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009fe:	4b22      	ldr	r3, [pc, #136]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000a04:	4b20      	ldr	r3, [pc, #128]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 8000a24:	222c      	movs	r2, #44	@ 0x2c
 8000a26:	2101      	movs	r1, #1
 8000a28:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 8000a3e:	223c      	movs	r2, #60	@ 0x3c
 8000a40:	2100      	movs	r1, #0
 8000a42:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000a44:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f000 fc9d 	bl	800138c <HAL_ADC_Init>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000a56:	f000 f931 	bl	8000cbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2200      	movs	r2, #0
 8000a64:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6c:	1d3a      	adds	r2, r7, #4
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_ADC1_Init+0xc4>)
 8000a70:	0011      	movs	r1, r2
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 fff8 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000a7c:	f000 f91e 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b004      	add	sp, #16
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000028 	.word	0x20000028
 8000a8c:	40012400 	.word	0x40012400

08000a90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a94:	4b23      	ldr	r3, [pc, #140]	@ (8000b24 <MX_USART2_UART_Init+0x94>)
 8000a96:	4a24      	ldr	r2, [pc, #144]	@ (8000b28 <MX_USART2_UART_Init+0x98>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9a:	4b22      	ldr	r3, [pc, #136]	@ (8000b24 <MX_USART2_UART_Init+0x94>)
 8000a9c:	22e1      	movs	r2, #225	@ 0xe1
 8000a9e:	0252      	lsls	r2, r2, #9
 8000aa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b20      	ldr	r3, [pc, #128]	@ (8000b24 <MX_USART2_UART_Init+0x94>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b24 <MX_USART2_UART_Init+0x94>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b1d      	ldr	r3, [pc, #116]	@ (8000b24 <MX_USART2_UART_Init+0x94>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <MX_USART2_UART_Init+0x94>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <MX_USART2_UART_Init+0x94>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <MX_USART2_UART_Init+0x94>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <MX_USART2_UART_Init+0x94>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000acc:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <MX_USART2_UART_Init+0x94>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad2:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <MX_USART2_UART_Init+0x94>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad8:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <MX_USART2_UART_Init+0x94>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f003 f83c 	bl	8003b58 <HAL_UART_Init>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ae4:	f000 f8ea 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <MX_USART2_UART_Init+0x94>)
 8000aea:	2100      	movs	r1, #0
 8000aec:	0018      	movs	r0, r3
 8000aee:	f003 fe59 	bl	80047a4 <HAL_UARTEx_SetTxFifoThreshold>
 8000af2:	1e03      	subs	r3, r0, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000af6:	f000 f8e1 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afa:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <MX_USART2_UART_Init+0x94>)
 8000afc:	2100      	movs	r1, #0
 8000afe:	0018      	movs	r0, r3
 8000b00:	f003 fe90 	bl	8004824 <HAL_UARTEx_SetRxFifoThreshold>
 8000b04:	1e03      	subs	r3, r0, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b08:	f000 f8d8 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b0c:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <MX_USART2_UART_Init+0x94>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f003 fe0e 	bl	8004730 <HAL_UARTEx_DisableFifoMode>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b18:	f000 f8d0 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	200000e8 	.word	0x200000e8
 8000b28:	40004400 	.word	0x40004400

08000b2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b32:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <MX_DMA_Init+0x38>)
 8000b34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b36:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <MX_DMA_Init+0x38>)
 8000b38:	2101      	movs	r1, #1
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b3e:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <MX_DMA_Init+0x38>)
 8000b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b42:	2201      	movs	r2, #1
 8000b44:	4013      	ands	r3, r2
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2009      	movs	r0, #9
 8000b50:	f001 fd34 	bl	80025bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b54:	2009      	movs	r0, #9
 8000b56:	f001 fd46 	bl	80025e6 <HAL_NVIC_EnableIRQ>

}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b002      	add	sp, #8
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	40021000 	.word	0x40021000

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b08b      	sub	sp, #44	@ 0x2c
 8000b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	2414      	movs	r4, #20
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	0018      	movs	r0, r3
 8000b74:	2314      	movs	r3, #20
 8000b76:	001a      	movs	r2, r3
 8000b78:	2100      	movs	r1, #0
 8000b7a:	f003 fef3 	bl	8004964 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	4b49      	ldr	r3, [pc, #292]	@ (8000ca4 <MX_GPIO_Init+0x13c>)
 8000b80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b82:	4b48      	ldr	r3, [pc, #288]	@ (8000ca4 <MX_GPIO_Init+0x13c>)
 8000b84:	2104      	movs	r1, #4
 8000b86:	430a      	orrs	r2, r1
 8000b88:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b8a:	4b46      	ldr	r3, [pc, #280]	@ (8000ca4 <MX_GPIO_Init+0x13c>)
 8000b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b8e:	2204      	movs	r2, #4
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b96:	4b43      	ldr	r3, [pc, #268]	@ (8000ca4 <MX_GPIO_Init+0x13c>)
 8000b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b9a:	4b42      	ldr	r3, [pc, #264]	@ (8000ca4 <MX_GPIO_Init+0x13c>)
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ba2:	4b40      	ldr	r3, [pc, #256]	@ (8000ca4 <MX_GPIO_Init+0x13c>)
 8000ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ba6:	2220      	movs	r2, #32
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	4b3d      	ldr	r3, [pc, #244]	@ (8000ca4 <MX_GPIO_Init+0x13c>)
 8000bb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bb2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ca4 <MX_GPIO_Init+0x13c>)
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bba:	4b3a      	ldr	r3, [pc, #232]	@ (8000ca4 <MX_GPIO_Init+0x13c>)
 8000bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	4b37      	ldr	r3, [pc, #220]	@ (8000ca4 <MX_GPIO_Init+0x13c>)
 8000bc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bca:	4b36      	ldr	r3, [pc, #216]	@ (8000ca4 <MX_GPIO_Init+0x13c>)
 8000bcc:	2102      	movs	r1, #2
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bd2:	4b34      	ldr	r3, [pc, #208]	@ (8000ca4 <MX_GPIO_Init+0x13c>)
 8000bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	4013      	ands	r3, r2
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU0_Pin|VU1_Pin|LD4_Pin|VU5_Pin
 8000bde:	4932      	ldr	r1, [pc, #200]	@ (8000ca8 <MX_GPIO_Init+0x140>)
 8000be0:	23a0      	movs	r3, #160	@ 0xa0
 8000be2:	05db      	lsls	r3, r3, #23
 8000be4:	2200      	movs	r2, #0
 8000be6:	0018      	movs	r0, r3
 8000be8:	f002 f8d0 	bl	8002d8c <HAL_GPIO_WritePin>
                          |VU6_Pin|VU9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VU7_Pin|VU2_Pin|VU3_Pin|VU4_Pin, GPIO_PIN_RESET);
 8000bec:	492f      	ldr	r1, [pc, #188]	@ (8000cac <MX_GPIO_Init+0x144>)
 8000bee:	4b30      	ldr	r3, [pc, #192]	@ (8000cb0 <MX_GPIO_Init+0x148>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f002 f8ca 	bl	8002d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU8_GPIO_Port, VU8_Pin, GPIO_PIN_RESET);
 8000bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb4 <MX_GPIO_Init+0x14c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2180      	movs	r1, #128	@ 0x80
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f002 f8c4 	bl	8002d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VU0_Pin VU1_Pin VU5_Pin VU6_Pin
                           VU9_Pin */
  GPIO_InitStruct.Pin = VU0_Pin|VU1_Pin|VU5_Pin|VU6_Pin
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	4a2c      	ldr	r2, [pc, #176]	@ (8000cb8 <MX_GPIO_Init+0x150>)
 8000c08:	601a      	str	r2, [r3, #0]
                          |VU9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	193a      	adds	r2, r7, r4
 8000c1e:	23a0      	movs	r3, #160	@ 0xa0
 8000c20:	05db      	lsls	r3, r3, #23
 8000c22:	0011      	movs	r1, r2
 8000c24:	0018      	movs	r0, r3
 8000c26:	f001 ff4d 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	2220      	movs	r2, #32
 8000c2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	2201      	movs	r2, #1
 8000c34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2202      	movs	r2, #2
 8000c40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000c42:	193a      	adds	r2, r7, r4
 8000c44:	23a0      	movs	r3, #160	@ 0xa0
 8000c46:	05db      	lsls	r3, r3, #23
 8000c48:	0011      	movs	r1, r2
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f001 ff3a 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VU7_Pin VU2_Pin VU3_Pin VU4_Pin */
  GPIO_InitStruct.Pin = VU7_Pin|VU2_Pin|VU3_Pin|VU4_Pin;
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	4a16      	ldr	r2, [pc, #88]	@ (8000cac <MX_GPIO_Init+0x144>)
 8000c54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	2201      	movs	r2, #1
 8000c5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	4a11      	ldr	r2, [pc, #68]	@ (8000cb0 <MX_GPIO_Init+0x148>)
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	0010      	movs	r0, r2
 8000c70:	f001 ff28 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VU8_Pin */
  GPIO_InitStruct.Pin = VU8_Pin;
 8000c74:	0021      	movs	r1, r4
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2201      	movs	r2, #1
 8000c80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(VU8_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <MX_GPIO_Init+0x14c>)
 8000c92:	0019      	movs	r1, r3
 8000c94:	0010      	movs	r0, r2
 8000c96:	f001 ff15 	bl	8002ac4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b00b      	add	sp, #44	@ 0x2c
 8000ca0:	bd90      	pop	{r4, r7, pc}
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	000002f2 	.word	0x000002f2
 8000cac:	00001803 	.word	0x00001803
 8000cb0:	50000400 	.word	0x50000400
 8000cb4:	50000800 	.word	0x50000800
 8000cb8:	000002d2 	.word	0x000002d2

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	46c0      	nop			@ (mov r8, r8)
 8000cc6:	e7fd      	b.n	8000cc4 <Error_Handler+0x8>

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <HAL_MspInit+0x44>)
 8000cd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <HAL_MspInit+0x44>)
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <HAL_MspInit+0x44>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <HAL_MspInit+0x44>)
 8000ce8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cea:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <HAL_MspInit+0x44>)
 8000cec:	2180      	movs	r1, #128	@ 0x80
 8000cee:	0549      	lsls	r1, r1, #21
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cf4:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <HAL_MspInit+0x44>)
 8000cf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cf8:	2380      	movs	r3, #128	@ 0x80
 8000cfa:	055b      	lsls	r3, r3, #21
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b002      	add	sp, #8
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	40021000 	.word	0x40021000

08000d10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b097      	sub	sp, #92	@ 0x5c
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	2344      	movs	r3, #68	@ 0x44
 8000d1a:	18fb      	adds	r3, r7, r3
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	2314      	movs	r3, #20
 8000d20:	001a      	movs	r2, r3
 8000d22:	2100      	movs	r1, #0
 8000d24:	f003 fe1e 	bl	8004964 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d28:	2410      	movs	r4, #16
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	2334      	movs	r3, #52	@ 0x34
 8000d30:	001a      	movs	r2, r3
 8000d32:	2100      	movs	r1, #0
 8000d34:	f003 fe16 	bl	8004964 <memset>
  if(hadc->Instance==ADC1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a39      	ldr	r2, [pc, #228]	@ (8000e24 <HAL_ADC_MspInit+0x114>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d16c      	bne.n	8000e1c <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	2280      	movs	r2, #128	@ 0x80
 8000d46:	01d2      	lsls	r2, r2, #7
 8000d48:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	0018      	movs	r0, r3
 8000d54:	f002 fd48 	bl	80037e8 <HAL_RCCEx_PeriphCLKConfig>
 8000d58:	1e03      	subs	r3, r0, #0
 8000d5a:	d001      	beq.n	8000d60 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d5c:	f7ff ffae 	bl	8000cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d60:	4b31      	ldr	r3, [pc, #196]	@ (8000e28 <HAL_ADC_MspInit+0x118>)
 8000d62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d64:	4b30      	ldr	r3, [pc, #192]	@ (8000e28 <HAL_ADC_MspInit+0x118>)
 8000d66:	2180      	movs	r1, #128	@ 0x80
 8000d68:	0349      	lsls	r1, r1, #13
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e28 <HAL_ADC_MspInit+0x118>)
 8000d70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d72:	2380      	movs	r3, #128	@ 0x80
 8000d74:	035b      	lsls	r3, r3, #13
 8000d76:	4013      	ands	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e28 <HAL_ADC_MspInit+0x118>)
 8000d7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d80:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <HAL_ADC_MspInit+0x118>)
 8000d82:	2101      	movs	r1, #1
 8000d84:	430a      	orrs	r2, r1
 8000d86:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d88:	4b27      	ldr	r3, [pc, #156]	@ (8000e28 <HAL_ADC_MspInit+0x118>)
 8000d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4013      	ands	r3, r2
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d94:	2144      	movs	r1, #68	@ 0x44
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2201      	movs	r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2203      	movs	r2, #3
 8000da0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	187a      	adds	r2, r7, r1
 8000daa:	23a0      	movs	r3, #160	@ 0xa0
 8000dac:	05db      	lsls	r3, r3, #23
 8000dae:	0011      	movs	r1, r2
 8000db0:	0018      	movs	r0, r3
 8000db2:	f001 fe87 	bl	8002ac4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <HAL_ADC_MspInit+0x11c>)
 8000db8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e30 <HAL_ADC_MspInit+0x120>)
 8000dba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e2c <HAL_ADC_MspInit+0x11c>)
 8000dbe:	2205      	movs	r2, #5
 8000dc0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <HAL_ADC_MspInit+0x11c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <HAL_ADC_MspInit+0x11c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dce:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <HAL_ADC_MspInit+0x11c>)
 8000dd0:	2280      	movs	r2, #128	@ 0x80
 8000dd2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <HAL_ADC_MspInit+0x11c>)
 8000dd6:	2280      	movs	r2, #128	@ 0x80
 8000dd8:	0052      	lsls	r2, r2, #1
 8000dda:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <HAL_ADC_MspInit+0x11c>)
 8000dde:	2280      	movs	r2, #128	@ 0x80
 8000de0:	00d2      	lsls	r2, r2, #3
 8000de2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000de4:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <HAL_ADC_MspInit+0x11c>)
 8000de6:	2220      	movs	r2, #32
 8000de8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dea:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <HAL_ADC_MspInit+0x11c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000df0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <HAL_ADC_MspInit+0x11c>)
 8000df2:	0018      	movs	r0, r3
 8000df4:	f001 fc14 	bl	8002620 <HAL_DMA_Init>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8000dfc:	f7ff ff5e 	bl	8000cbc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a0a      	ldr	r2, [pc, #40]	@ (8000e2c <HAL_ADC_MspInit+0x11c>)
 8000e04:	651a      	str	r2, [r3, #80]	@ 0x50
 8000e06:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <HAL_ADC_MspInit+0x11c>)
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	200c      	movs	r0, #12
 8000e12:	f001 fbd3 	bl	80025bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000e16:	200c      	movs	r0, #12
 8000e18:	f001 fbe5 	bl	80025e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e1c:	46c0      	nop			@ (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b017      	add	sp, #92	@ 0x5c
 8000e22:	bd90      	pop	{r4, r7, pc}
 8000e24:	40012400 	.word	0x40012400
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	2000008c 	.word	0x2000008c
 8000e30:	40020008 	.word	0x40020008

08000e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b097      	sub	sp, #92	@ 0x5c
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	2344      	movs	r3, #68	@ 0x44
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	0018      	movs	r0, r3
 8000e42:	2314      	movs	r3, #20
 8000e44:	001a      	movs	r2, r3
 8000e46:	2100      	movs	r1, #0
 8000e48:	f003 fd8c 	bl	8004964 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e4c:	2410      	movs	r4, #16
 8000e4e:	193b      	adds	r3, r7, r4
 8000e50:	0018      	movs	r0, r3
 8000e52:	2334      	movs	r3, #52	@ 0x34
 8000e54:	001a      	movs	r2, r3
 8000e56:	2100      	movs	r1, #0
 8000e58:	f003 fd84 	bl	8004964 <memset>
  if(huart->Instance==USART2)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a22      	ldr	r2, [pc, #136]	@ (8000eec <HAL_UART_MspInit+0xb8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d13e      	bne.n	8000ee4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e66:	193b      	adds	r3, r7, r4
 8000e68:	2202      	movs	r2, #2
 8000e6a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	0018      	movs	r0, r3
 8000e76:	f002 fcb7 	bl	80037e8 <HAL_RCCEx_PeriphCLKConfig>
 8000e7a:	1e03      	subs	r3, r0, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e7e:	f7ff ff1d 	bl	8000cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e82:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <HAL_UART_MspInit+0xbc>)
 8000e84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <HAL_UART_MspInit+0xbc>)
 8000e88:	2180      	movs	r1, #128	@ 0x80
 8000e8a:	0289      	lsls	r1, r1, #10
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e90:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <HAL_UART_MspInit+0xbc>)
 8000e92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e94:	2380      	movs	r3, #128	@ 0x80
 8000e96:	029b      	lsls	r3, r3, #10
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <HAL_UART_MspInit+0xbc>)
 8000ea0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ea2:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <HAL_UART_MspInit+0xbc>)
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eaa:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <HAL_UART_MspInit+0xbc>)
 8000eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000eb6:	2144      	movs	r1, #68	@ 0x44
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	220c      	movs	r2, #12
 8000ebc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	187a      	adds	r2, r7, r1
 8000ed8:	23a0      	movs	r3, #160	@ 0xa0
 8000eda:	05db      	lsls	r3, r3, #23
 8000edc:	0011      	movs	r1, r2
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f001 fdf0 	bl	8002ac4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ee4:	46c0      	nop			@ (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b017      	add	sp, #92	@ 0x5c
 8000eea:	bd90      	pop	{r4, r7, pc}
 8000eec:	40004400 	.word	0x40004400
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef8:	46c0      	nop			@ (mov r8, r8)
 8000efa:	e7fd      	b.n	8000ef8 <NMI_Handler+0x4>

08000efc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f00:	46c0      	nop			@ (mov r8, r8)
 8000f02:	e7fd      	b.n	8000f00 <HardFault_Handler+0x4>

08000f04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f08:	46c0      	nop			@ (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1c:	f000 f8b6 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f20:	46c0      	nop			@ (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f2c:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <DMA1_Channel1_IRQHandler+0x14>)
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f001 fc86 	bl	8002840 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	2000008c 	.word	0x2000008c

08000f40 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f44:	4b03      	ldr	r3, [pc, #12]	@ (8000f54 <ADC1_COMP_IRQHandler+0x14>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f000 fc56 	bl	80017f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000f4c:	46c0      	nop			@ (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	20000028 	.word	0x20000028

08000f58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f64:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f68:	f7ff fff6 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f6c:	480c      	ldr	r0, [pc, #48]	@ (8000fa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f6e:	490d      	ldr	r1, [pc, #52]	@ (8000fa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f70:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa8 <LoopForever+0xe>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f84:	4c0a      	ldr	r4, [pc, #40]	@ (8000fb0 <LoopForever+0x16>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f92:	f003 fcef 	bl	8004974 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f96:	f7ff fbb1 	bl	80006fc <main>

08000f9a <LoopForever>:

LoopForever:
  b LoopForever
 8000f9a:	e7fe      	b.n	8000f9a <LoopForever>
  ldr   r0, =_estack
 8000f9c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fa8:	08004a9c 	.word	0x08004a9c
  ldr r2, =_sbss
 8000fac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fb0:	20000180 	.word	0x20000180

08000fb4 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <CEC_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <HAL_Init+0x3c>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <HAL_Init+0x3c>)
 8000fca:	2180      	movs	r1, #128	@ 0x80
 8000fcc:	0049      	lsls	r1, r1, #1
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 f810 	bl	8000ff8 <HAL_InitTick>
 8000fd8:	1e03      	subs	r3, r0, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000fdc:	1dfb      	adds	r3, r7, #7
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	e001      	b.n	8000fe8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000fe4:	f7ff fe70 	bl	8000cc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fe8:	1dfb      	adds	r3, r7, #7
 8000fea:	781b      	ldrb	r3, [r3, #0]
}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40022000 	.word	0x40022000

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001000:	230f      	movs	r3, #15
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001008:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <HAL_InitTick+0x88>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d02b      	beq.n	8001068 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001010:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <HAL_InitTick+0x8c>)
 8001012:	681c      	ldr	r4, [r3, #0]
 8001014:	4b1a      	ldr	r3, [pc, #104]	@ (8001080 <HAL_InitTick+0x88>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	0019      	movs	r1, r3
 800101a:	23fa      	movs	r3, #250	@ 0xfa
 800101c:	0098      	lsls	r0, r3, #2
 800101e:	f7ff f871 	bl	8000104 <__udivsi3>
 8001022:	0003      	movs	r3, r0
 8001024:	0019      	movs	r1, r3
 8001026:	0020      	movs	r0, r4
 8001028:	f7ff f86c 	bl	8000104 <__udivsi3>
 800102c:	0003      	movs	r3, r0
 800102e:	0018      	movs	r0, r3
 8001030:	f001 fae9 	bl	8002606 <HAL_SYSTICK_Config>
 8001034:	1e03      	subs	r3, r0, #0
 8001036:	d112      	bne.n	800105e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b03      	cmp	r3, #3
 800103c:	d80a      	bhi.n	8001054 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	2301      	movs	r3, #1
 8001042:	425b      	negs	r3, r3
 8001044:	2200      	movs	r2, #0
 8001046:	0018      	movs	r0, r3
 8001048:	f001 fab8 	bl	80025bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800104c:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <HAL_InitTick+0x90>)
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e00d      	b.n	8001070 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001054:	230f      	movs	r3, #15
 8001056:	18fb      	adds	r3, r7, r3
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
 800105c:	e008      	b.n	8001070 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800105e:	230f      	movs	r3, #15
 8001060:	18fb      	adds	r3, r7, r3
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	e003      	b.n	8001070 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001068:	230f      	movs	r3, #15
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001070:	230f      	movs	r3, #15
 8001072:	18fb      	adds	r3, r7, r3
 8001074:	781b      	ldrb	r3, [r3, #0]
}
 8001076:	0018      	movs	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	b005      	add	sp, #20
 800107c:	bd90      	pop	{r4, r7, pc}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	20000008 	.word	0x20000008
 8001084:	20000000 	.word	0x20000000
 8001088:	20000004 	.word	0x20000004

0800108c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001090:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <HAL_IncTick+0x1c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	001a      	movs	r2, r3
 8001096:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <HAL_IncTick+0x20>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	18d2      	adds	r2, r2, r3
 800109c:	4b03      	ldr	r3, [pc, #12]	@ (80010ac <HAL_IncTick+0x20>)
 800109e:	601a      	str	r2, [r3, #0]
}
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	20000008 	.word	0x20000008
 80010ac:	2000017c 	.word	0x2000017c

080010b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b02      	ldr	r3, [pc, #8]	@ (80010c0 <HAL_GetTick+0x10>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	0018      	movs	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			@ (mov r8, r8)
 80010c0:	2000017c 	.word	0x2000017c

080010c4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a05      	ldr	r2, [pc, #20]	@ (80010e8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80010d4:	401a      	ands	r2, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	601a      	str	r2, [r3, #0]
}
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b002      	add	sp, #8
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	fe3fffff 	.word	0xfe3fffff

080010ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	23e0      	movs	r3, #224	@ 0xe0
 80010fa:	045b      	lsls	r3, r3, #17
 80010fc:	4013      	ands	r3, r2
}
 80010fe:	0018      	movs	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	b002      	add	sp, #8
 8001104:	bd80      	pop	{r7, pc}

08001106 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	2104      	movs	r1, #4
 800111a:	400a      	ands	r2, r1
 800111c:	2107      	movs	r1, #7
 800111e:	4091      	lsls	r1, r2
 8001120:	000a      	movs	r2, r1
 8001122:	43d2      	mvns	r2, r2
 8001124:	401a      	ands	r2, r3
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	2104      	movs	r1, #4
 800112a:	400b      	ands	r3, r1
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4099      	lsls	r1, r3
 8001130:	000b      	movs	r3, r1
 8001132:	431a      	orrs	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001138:	46c0      	nop			@ (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	b004      	add	sp, #16
 800113e:	bd80      	pop	{r7, pc}

08001140 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	2104      	movs	r1, #4
 8001152:	400a      	ands	r2, r1
 8001154:	2107      	movs	r1, #7
 8001156:	4091      	lsls	r1, r2
 8001158:	000a      	movs	r2, r1
 800115a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2104      	movs	r1, #4
 8001160:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001162:	40da      	lsrs	r2, r3
 8001164:	0013      	movs	r3, r2
}
 8001166:	0018      	movs	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	b002      	add	sp, #8
 800116c:	bd80      	pop	{r7, pc}

0800116e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	23c0      	movs	r3, #192	@ 0xc0
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	4013      	ands	r3, r2
 8001180:	d101      	bne.n	8001186 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001186:	2300      	movs	r3, #0
}
 8001188:	0018      	movs	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	b002      	add	sp, #8
 800118e:	bd80      	pop	{r7, pc}

08001190 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	211f      	movs	r1, #31
 80011a4:	400a      	ands	r2, r1
 80011a6:	210f      	movs	r1, #15
 80011a8:	4091      	lsls	r1, r2
 80011aa:	000a      	movs	r2, r1
 80011ac:	43d2      	mvns	r2, r2
 80011ae:	401a      	ands	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	0e9b      	lsrs	r3, r3, #26
 80011b4:	210f      	movs	r1, #15
 80011b6:	4019      	ands	r1, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	201f      	movs	r0, #31
 80011bc:	4003      	ands	r3, r0
 80011be:	4099      	lsls	r1, r3
 80011c0:	000b      	movs	r3, r1
 80011c2:	431a      	orrs	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b004      	add	sp, #16
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	035b      	lsls	r3, r3, #13
 80011e2:	0b5b      	lsrs	r3, r3, #13
 80011e4:	431a      	orrs	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	0352      	lsls	r2, r2, #13
 8001204:	0b52      	lsrs	r2, r2, #13
 8001206:	43d2      	mvns	r2, r2
 8001208:	401a      	ands	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b002      	add	sp, #8
 8001214:	bd80      	pop	{r7, pc}

08001216 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	2203      	movs	r2, #3
 8001224:	4013      	ands	r3, r2
}
 8001226:	0018      	movs	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	b002      	add	sp, #8
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	0212      	lsls	r2, r2, #8
 8001244:	43d2      	mvns	r2, r2
 8001246:	401a      	ands	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	400b      	ands	r3, r1
 8001250:	4904      	ldr	r1, [pc, #16]	@ (8001264 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001252:	400b      	ands	r3, r1
 8001254:	431a      	orrs	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b004      	add	sp, #16
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	07ffff00 	.word	0x07ffff00

08001268 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4a05      	ldr	r2, [pc, #20]	@ (800128c <LL_ADC_EnableInternalRegulator+0x24>)
 8001276:	4013      	ands	r3, r2
 8001278:	2280      	movs	r2, #128	@ 0x80
 800127a:	0552      	lsls	r2, r2, #21
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001282:	46c0      	nop			@ (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	b002      	add	sp, #8
 8001288:	bd80      	pop	{r7, pc}
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	6fffffe8 	.word	0x6fffffe8

08001290 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	2380      	movs	r3, #128	@ 0x80
 800129e:	055b      	lsls	r3, r3, #21
 80012a0:	401a      	ands	r2, r3
 80012a2:	2380      	movs	r3, #128	@ 0x80
 80012a4:	055b      	lsls	r3, r3, #21
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d101      	bne.n	80012ae <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	0018      	movs	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b002      	add	sp, #8
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <LL_ADC_Enable+0x20>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	2201      	movs	r2, #1
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012d0:	46c0      	nop			@ (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b002      	add	sp, #8
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	7fffffe8 	.word	0x7fffffe8

080012dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	4a04      	ldr	r2, [pc, #16]	@ (80012fc <LL_ADC_Disable+0x20>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	2202      	movs	r2, #2
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012f4:	46c0      	nop			@ (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	7fffffe8 	.word	0x7fffffe8

08001300 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2201      	movs	r2, #1
 800130e:	4013      	ands	r3, r2
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <LL_ADC_IsEnabled+0x18>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <LL_ADC_IsEnabled+0x1a>
 8001318:	2300      	movs	r3, #0
}
 800131a:	0018      	movs	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	b002      	add	sp, #8
 8001320:	bd80      	pop	{r7, pc}

08001322 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2202      	movs	r2, #2
 8001330:	4013      	ands	r3, r2
 8001332:	2b02      	cmp	r3, #2
 8001334:	d101      	bne.n	800133a <LL_ADC_IsDisableOngoing+0x18>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <LL_ADC_IsDisableOngoing+0x1a>
 800133a:	2300      	movs	r3, #0
}
 800133c:	0018      	movs	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	b002      	add	sp, #8
 8001342:	bd80      	pop	{r7, pc}

08001344 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <LL_ADC_REG_StartConversion+0x20>)
 8001352:	4013      	ands	r3, r2
 8001354:	2204      	movs	r2, #4
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800135c:	46c0      	nop			@ (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	b002      	add	sp, #8
 8001362:	bd80      	pop	{r7, pc}
 8001364:	7fffffe8 	.word	0x7fffffe8

08001368 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2204      	movs	r2, #4
 8001376:	4013      	ands	r3, r2
 8001378:	2b04      	cmp	r3, #4
 800137a:	d101      	bne.n	8001380 <LL_ADC_REG_IsConversionOngoing+0x18>
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001380:	2300      	movs	r3, #0
}
 8001382:	0018      	movs	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	b002      	add	sp, #8
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001394:	231f      	movs	r3, #31
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e17f      	b.n	80016b2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10a      	bne.n	80013d0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	0018      	movs	r0, r3
 80013be:	f7ff fca7 	bl	8000d10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2254      	movs	r2, #84	@ 0x54
 80013cc:	2100      	movs	r1, #0
 80013ce:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0018      	movs	r0, r3
 80013d6:	f7ff ff5b 	bl	8001290 <LL_ADC_IsInternalRegulatorEnabled>
 80013da:	1e03      	subs	r3, r0, #0
 80013dc:	d115      	bne.n	800140a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	0018      	movs	r0, r3
 80013e4:	f7ff ff40 	bl	8001268 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013e8:	4bb4      	ldr	r3, [pc, #720]	@ (80016bc <HAL_ADC_Init+0x330>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	49b4      	ldr	r1, [pc, #720]	@ (80016c0 <HAL_ADC_Init+0x334>)
 80013ee:	0018      	movs	r0, r3
 80013f0:	f7fe fe88 	bl	8000104 <__udivsi3>
 80013f4:	0003      	movs	r3, r0
 80013f6:	3301      	adds	r3, #1
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013fc:	e002      	b.n	8001404 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3b01      	subs	r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f9      	bne.n	80013fe <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	0018      	movs	r0, r3
 8001410:	f7ff ff3e 	bl	8001290 <LL_ADC_IsInternalRegulatorEnabled>
 8001414:	1e03      	subs	r3, r0, #0
 8001416:	d10f      	bne.n	8001438 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141c:	2210      	movs	r2, #16
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001428:	2201      	movs	r2, #1
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001430:	231f      	movs	r3, #31
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	0018      	movs	r0, r3
 800143e:	f7ff ff93 	bl	8001368 <LL_ADC_REG_IsConversionOngoing>
 8001442:	0003      	movs	r3, r0
 8001444:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144a:	2210      	movs	r2, #16
 800144c:	4013      	ands	r3, r2
 800144e:	d000      	beq.n	8001452 <HAL_ADC_Init+0xc6>
 8001450:	e122      	b.n	8001698 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d000      	beq.n	800145a <HAL_ADC_Init+0xce>
 8001458:	e11e      	b.n	8001698 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145e:	4a99      	ldr	r2, [pc, #612]	@ (80016c4 <HAL_ADC_Init+0x338>)
 8001460:	4013      	ands	r3, r2
 8001462:	2202      	movs	r2, #2
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	0018      	movs	r0, r3
 8001470:	f7ff ff46 	bl	8001300 <LL_ADC_IsEnabled>
 8001474:	1e03      	subs	r3, r0, #0
 8001476:	d000      	beq.n	800147a <HAL_ADC_Init+0xee>
 8001478:	e0ad      	b.n	80015d6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7e1b      	ldrb	r3, [r3, #24]
 8001482:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001484:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7e5b      	ldrb	r3, [r3, #25]
 800148a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800148c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7e9b      	ldrb	r3, [r3, #26]
 8001492:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001494:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <HAL_ADC_Init+0x118>
 800149e:	2380      	movs	r3, #128	@ 0x80
 80014a0:	015b      	lsls	r3, r3, #5
 80014a2:	e000      	b.n	80014a6 <HAL_ADC_Init+0x11a>
 80014a4:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80014a6:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80014ac:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	da04      	bge.n	80014c0 <HAL_ADC_Init+0x134>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	085b      	lsrs	r3, r3, #1
 80014be:	e001      	b.n	80014c4 <HAL_ADC_Init+0x138>
 80014c0:	2380      	movs	r3, #128	@ 0x80
 80014c2:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80014c4:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	212c      	movs	r1, #44	@ 0x2c
 80014ca:	5c5b      	ldrb	r3, [r3, r1]
 80014cc:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80014ce:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2220      	movs	r2, #32
 80014da:	5c9b      	ldrb	r3, [r3, r2]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d115      	bne.n	800150c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7e9b      	ldrb	r3, [r3, #26]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d105      	bne.n	80014f4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2280      	movs	r2, #128	@ 0x80
 80014ec:	0252      	lsls	r2, r2, #9
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
 80014f2:	e00b      	b.n	800150c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f8:	2220      	movs	r2, #32
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001504:	2201      	movs	r2, #1
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00a      	beq.n	800152a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001518:	23e0      	movs	r3, #224	@ 0xe0
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001522:	4313      	orrs	r3, r2
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4a65      	ldr	r2, [pc, #404]	@ (80016c8 <HAL_ADC_Init+0x33c>)
 8001532:	4013      	ands	r3, r2
 8001534:	0019      	movs	r1, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	430a      	orrs	r2, r1
 800153e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	0f9b      	lsrs	r3, r3, #30
 8001546:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800154c:	4313      	orrs	r3, r2
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4313      	orrs	r3, r2
 8001552:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	223c      	movs	r2, #60	@ 0x3c
 8001558:	5c9b      	ldrb	r3, [r3, r2]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d111      	bne.n	8001582 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	0f9b      	lsrs	r3, r3, #30
 8001564:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800156a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001570:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001576:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	4313      	orrs	r3, r2
 800157c:	2201      	movs	r2, #1
 800157e:	4313      	orrs	r3, r2
 8001580:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	4a50      	ldr	r2, [pc, #320]	@ (80016cc <HAL_ADC_Init+0x340>)
 800158a:	4013      	ands	r3, r2
 800158c:	0019      	movs	r1, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	430a      	orrs	r2, r1
 8001596:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	23c0      	movs	r3, #192	@ 0xc0
 800159e:	061b      	lsls	r3, r3, #24
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d018      	beq.n	80015d6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80015a8:	2380      	movs	r3, #128	@ 0x80
 80015aa:	05db      	lsls	r3, r3, #23
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d012      	beq.n	80015d6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015b4:	2380      	movs	r3, #128	@ 0x80
 80015b6:	061b      	lsls	r3, r3, #24
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d00c      	beq.n	80015d6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80015bc:	4b44      	ldr	r3, [pc, #272]	@ (80016d0 <HAL_ADC_Init+0x344>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a44      	ldr	r2, [pc, #272]	@ (80016d4 <HAL_ADC_Init+0x348>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	0019      	movs	r1, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	23f0      	movs	r3, #240	@ 0xf0
 80015cc:	039b      	lsls	r3, r3, #14
 80015ce:	401a      	ands	r2, r3
 80015d0:	4b3f      	ldr	r3, [pc, #252]	@ (80016d0 <HAL_ADC_Init+0x344>)
 80015d2:	430a      	orrs	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6818      	ldr	r0, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015de:	001a      	movs	r2, r3
 80015e0:	2100      	movs	r1, #0
 80015e2:	f7ff fd90 	bl	8001106 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6818      	ldr	r0, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ee:	493a      	ldr	r1, [pc, #232]	@ (80016d8 <HAL_ADC_Init+0x34c>)
 80015f0:	001a      	movs	r2, r3
 80015f2:	f7ff fd88 	bl	8001106 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d109      	bne.n	8001612 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2110      	movs	r1, #16
 800160a:	4249      	negs	r1, r1
 800160c:	430a      	orrs	r2, r1
 800160e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001610:	e018      	b.n	8001644 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691a      	ldr	r2, [r3, #16]
 8001616:	2380      	movs	r3, #128	@ 0x80
 8001618:	039b      	lsls	r3, r3, #14
 800161a:	429a      	cmp	r2, r3
 800161c:	d112      	bne.n	8001644 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	3b01      	subs	r3, #1
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	221c      	movs	r2, #28
 800162e:	4013      	ands	r3, r2
 8001630:	2210      	movs	r2, #16
 8001632:	4252      	negs	r2, r2
 8001634:	409a      	lsls	r2, r3
 8001636:	0011      	movs	r1, r2
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2100      	movs	r1, #0
 800164a:	0018      	movs	r0, r3
 800164c:	f7ff fd78 	bl	8001140 <LL_ADC_GetSamplingTimeCommonChannels>
 8001650:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001656:	429a      	cmp	r2, r3
 8001658:	d10b      	bne.n	8001672 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001664:	2203      	movs	r2, #3
 8001666:	4393      	bics	r3, r2
 8001668:	2201      	movs	r2, #1
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001670:	e01c      	b.n	80016ac <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001676:	2212      	movs	r2, #18
 8001678:	4393      	bics	r3, r2
 800167a:	2210      	movs	r2, #16
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001686:	2201      	movs	r2, #1
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800168e:	231f      	movs	r3, #31
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001696:	e009      	b.n	80016ac <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169c:	2210      	movs	r2, #16
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80016a4:	231f      	movs	r3, #31
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80016ac:	231f      	movs	r3, #31
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	781b      	ldrb	r3, [r3, #0]
}
 80016b2:	0018      	movs	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b008      	add	sp, #32
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	46c0      	nop			@ (mov r8, r8)
 80016bc:	20000000 	.word	0x20000000
 80016c0:	00030d40 	.word	0x00030d40
 80016c4:	fffffefd 	.word	0xfffffefd
 80016c8:	ffde0201 	.word	0xffde0201
 80016cc:	1ffffc02 	.word	0x1ffffc02
 80016d0:	40012708 	.word	0x40012708
 80016d4:	ffc3ffff 	.word	0xffc3ffff
 80016d8:	07ffff04 	.word	0x07ffff04

080016dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80016dc:	b5b0      	push	{r4, r5, r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0018      	movs	r0, r3
 80016ee:	f7ff fe3b 	bl	8001368 <LL_ADC_REG_IsConversionOngoing>
 80016f2:	1e03      	subs	r3, r0, #0
 80016f4:	d16c      	bne.n	80017d0 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2254      	movs	r2, #84	@ 0x54
 80016fa:	5c9b      	ldrb	r3, [r3, r2]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d101      	bne.n	8001704 <HAL_ADC_Start_DMA+0x28>
 8001700:	2302      	movs	r3, #2
 8001702:	e06c      	b.n	80017de <HAL_ADC_Start_DMA+0x102>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2254      	movs	r2, #84	@ 0x54
 8001708:	2101      	movs	r1, #1
 800170a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2201      	movs	r2, #1
 8001714:	4013      	ands	r3, r2
 8001716:	d113      	bne.n	8001740 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff fdef 	bl	8001300 <LL_ADC_IsEnabled>
 8001722:	1e03      	subs	r3, r0, #0
 8001724:	d004      	beq.n	8001730 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	0018      	movs	r0, r3
 800172c:	f7ff fdd6 	bl	80012dc <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2101      	movs	r1, #1
 800173c:	430a      	orrs	r2, r1
 800173e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001740:	2517      	movs	r5, #23
 8001742:	197c      	adds	r4, r7, r5
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	0018      	movs	r0, r3
 8001748:	f000 fb66 	bl	8001e18 <ADC_Enable>
 800174c:	0003      	movs	r3, r0
 800174e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001750:	002c      	movs	r4, r5
 8001752:	193b      	adds	r3, r7, r4
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d13e      	bne.n	80017d8 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175e:	4a22      	ldr	r2, [pc, #136]	@ (80017e8 <HAL_ADC_Start_DMA+0x10c>)
 8001760:	4013      	ands	r3, r2
 8001762:	2280      	movs	r2, #128	@ 0x80
 8001764:	0052      	lsls	r2, r2, #1
 8001766:	431a      	orrs	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001776:	4a1d      	ldr	r2, [pc, #116]	@ (80017ec <HAL_ADC_Start_DMA+0x110>)
 8001778:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800177e:	4a1c      	ldr	r2, [pc, #112]	@ (80017f0 <HAL_ADC_Start_DMA+0x114>)
 8001780:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001786:	4a1b      	ldr	r2, [pc, #108]	@ (80017f4 <HAL_ADC_Start_DMA+0x118>)
 8001788:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	221c      	movs	r2, #28
 8001790:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2254      	movs	r2, #84	@ 0x54
 8001796:	2100      	movs	r1, #0
 8001798:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2110      	movs	r1, #16
 80017a6:	430a      	orrs	r2, r1
 80017a8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	3340      	adds	r3, #64	@ 0x40
 80017b4:	0019      	movs	r1, r3
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	193c      	adds	r4, r7, r4
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f000 ffba 	bl	8002734 <HAL_DMA_Start_IT>
 80017c0:	0003      	movs	r3, r0
 80017c2:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7ff fdbb 	bl	8001344 <LL_ADC_REG_StartConversion>
 80017ce:	e003      	b.n	80017d8 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017d0:	2317      	movs	r3, #23
 80017d2:	18fb      	adds	r3, r7, r3
 80017d4:	2202      	movs	r2, #2
 80017d6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80017d8:	2317      	movs	r3, #23
 80017da:	18fb      	adds	r3, r7, r3
 80017dc:	781b      	ldrb	r3, [r3, #0]
}
 80017de:	0018      	movs	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b006      	add	sp, #24
 80017e4:	bdb0      	pop	{r4, r5, r7, pc}
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	fffff0fe 	.word	0xfffff0fe
 80017ec:	08001fe1 	.word	0x08001fe1
 80017f0:	080020a9 	.word	0x080020a9
 80017f4:	080020c7 	.word	0x080020c7

080017f8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	2202      	movs	r2, #2
 8001818:	4013      	ands	r3, r2
 800181a:	d017      	beq.n	800184c <HAL_ADC_IRQHandler+0x54>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2202      	movs	r2, #2
 8001820:	4013      	ands	r3, r2
 8001822:	d013      	beq.n	800184c <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001828:	2210      	movs	r2, #16
 800182a:	4013      	ands	r3, r2
 800182c:	d106      	bne.n	800183c <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001832:	2280      	movs	r2, #128	@ 0x80
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	0018      	movs	r0, r3
 8001840:	f000 fe00 	bl	8002444 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2202      	movs	r2, #2
 800184a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	2204      	movs	r2, #4
 8001850:	4013      	ands	r3, r2
 8001852:	d003      	beq.n	800185c <HAL_ADC_IRQHandler+0x64>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2204      	movs	r2, #4
 8001858:	4013      	ands	r3, r2
 800185a:	d107      	bne.n	800186c <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	2208      	movs	r2, #8
 8001860:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001862:	d04d      	beq.n	8001900 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2208      	movs	r2, #8
 8001868:	4013      	ands	r3, r2
 800186a:	d049      	beq.n	8001900 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001870:	2210      	movs	r2, #16
 8001872:	4013      	ands	r3, r2
 8001874:	d106      	bne.n	8001884 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187a:	2280      	movs	r2, #128	@ 0x80
 800187c:	0092      	lsls	r2, r2, #2
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0018      	movs	r0, r3
 800188a:	f7ff fc70 	bl	800116e <LL_ADC_REG_IsTriggerSourceSWStart>
 800188e:	1e03      	subs	r3, r0, #0
 8001890:	d02e      	beq.n	80018f0 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7e9b      	ldrb	r3, [r3, #26]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d12a      	bne.n	80018f0 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2208      	movs	r2, #8
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d123      	bne.n	80018f0 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7ff fd5b 	bl	8001368 <LL_ADC_REG_IsConversionOngoing>
 80018b2:	1e03      	subs	r3, r0, #0
 80018b4:	d110      	bne.n	80018d8 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	210c      	movs	r1, #12
 80018c2:	438a      	bics	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ca:	4a56      	ldr	r2, [pc, #344]	@ (8001a24 <HAL_ADC_IRQHandler+0x22c>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	2201      	movs	r2, #1
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80018d6:	e00b      	b.n	80018f0 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018dc:	2220      	movs	r2, #32
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e8:	2201      	movs	r2, #1
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	0018      	movs	r0, r3
 80018f4:	f000 f898 	bl	8001a28 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	220c      	movs	r2, #12
 80018fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	2280      	movs	r2, #128	@ 0x80
 8001904:	4013      	ands	r3, r2
 8001906:	d012      	beq.n	800192e <HAL_ADC_IRQHandler+0x136>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2280      	movs	r2, #128	@ 0x80
 800190c:	4013      	ands	r3, r2
 800190e:	d00e      	beq.n	800192e <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001914:	2280      	movs	r2, #128	@ 0x80
 8001916:	0252      	lsls	r2, r2, #9
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	0018      	movs	r0, r3
 8001922:	f000 f891 	bl	8001a48 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2280      	movs	r2, #128	@ 0x80
 800192c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	2380      	movs	r3, #128	@ 0x80
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4013      	ands	r3, r2
 8001936:	d014      	beq.n	8001962 <HAL_ADC_IRQHandler+0x16a>
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	2380      	movs	r3, #128	@ 0x80
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4013      	ands	r3, r2
 8001940:	d00f      	beq.n	8001962 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001946:	2280      	movs	r2, #128	@ 0x80
 8001948:	0292      	lsls	r2, r2, #10
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	0018      	movs	r0, r3
 8001954:	f000 fd66 	bl	8002424 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2280      	movs	r2, #128	@ 0x80
 800195e:	0052      	lsls	r2, r2, #1
 8001960:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	2380      	movs	r3, #128	@ 0x80
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4013      	ands	r3, r2
 800196a:	d014      	beq.n	8001996 <HAL_ADC_IRQHandler+0x19e>
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	2380      	movs	r3, #128	@ 0x80
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4013      	ands	r3, r2
 8001974:	d00f      	beq.n	8001996 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197a:	2280      	movs	r2, #128	@ 0x80
 800197c:	02d2      	lsls	r2, r2, #11
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	0018      	movs	r0, r3
 8001988:	f000 fd54 	bl	8002434 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2280      	movs	r2, #128	@ 0x80
 8001992:	0092      	lsls	r2, r2, #2
 8001994:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	2210      	movs	r2, #16
 800199a:	4013      	ands	r3, r2
 800199c:	d02b      	beq.n	80019f6 <HAL_ADC_IRQHandler+0x1fe>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2210      	movs	r2, #16
 80019a2:	4013      	ands	r3, r2
 80019a4:	d027      	beq.n	80019f6 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d102      	bne.n	80019b4 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80019ae:	2301      	movs	r3, #1
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	e008      	b.n	80019c6 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0018      	movs	r0, r3
 80019ba:	f7ff fc2c 	bl	8001216 <LL_ADC_REG_GetDMATransfer>
 80019be:	1e03      	subs	r3, r0, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80019c2:	2301      	movs	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d110      	bne.n	80019ee <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d0:	2280      	movs	r2, #128	@ 0x80
 80019d2:	00d2      	lsls	r2, r2, #3
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019de:	2202      	movs	r2, #2
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f000 f835 	bl	8001a58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2210      	movs	r2, #16
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	2380      	movs	r3, #128	@ 0x80
 80019fa:	019b      	lsls	r3, r3, #6
 80019fc:	4013      	ands	r3, r2
 80019fe:	d00d      	beq.n	8001a1c <HAL_ADC_IRQHandler+0x224>
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	2380      	movs	r3, #128	@ 0x80
 8001a04:	019b      	lsls	r3, r3, #6
 8001a06:	4013      	ands	r3, r2
 8001a08:	d008      	beq.n	8001a1c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f000 fd21 	bl	8002454 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2280      	movs	r2, #128	@ 0x80
 8001a18:	0192      	lsls	r2, r2, #6
 8001a1a:	601a      	str	r2, [r3, #0]
  }
}
 8001a1c:	46c0      	nop			@ (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b006      	add	sp, #24
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	fffffefe 	.word	0xfffffefe

08001a28 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a30:	46c0      	nop			@ (mov r8, r8)
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b002      	add	sp, #8
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a40:	46c0      	nop			@ (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b002      	add	sp, #8
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a50:	46c0      	nop			@ (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b002      	add	sp, #8
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a60:	46c0      	nop			@ (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b002      	add	sp, #8
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a72:	2317      	movs	r3, #23
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2254      	movs	r2, #84	@ 0x54
 8001a82:	5c9b      	ldrb	r3, [r3, r2]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x24>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e1c0      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x3a6>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2254      	movs	r2, #84	@ 0x54
 8001a90:	2101      	movs	r1, #1
 8001a92:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7ff fc65 	bl	8001368 <LL_ADC_REG_IsConversionOngoing>
 8001a9e:	1e03      	subs	r3, r0, #0
 8001aa0:	d000      	beq.n	8001aa4 <HAL_ADC_ConfigChannel+0x3c>
 8001aa2:	e1a3      	b.n	8001dec <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d100      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x46>
 8001aac:	e143      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	061b      	lsls	r3, r3, #24
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d004      	beq.n	8001ac4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001abe:	4ac1      	ldr	r2, [pc, #772]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x35c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d108      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0019      	movs	r1, r3
 8001ace:	0010      	movs	r0, r2
 8001ad0:	f7ff fb7e 	bl	80011d0 <LL_ADC_REG_SetSequencerChAdd>
 8001ad4:	e0c9      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	211f      	movs	r1, #31
 8001ae0:	400b      	ands	r3, r1
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	4099      	lsls	r1, r3
 8001ae6:	000b      	movs	r3, r1
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4013      	ands	r3, r2
 8001aec:	0019      	movs	r1, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	035b      	lsls	r3, r3, #13
 8001af4:	0b5b      	lsrs	r3, r3, #13
 8001af6:	d105      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x9c>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0e9b      	lsrs	r3, r3, #26
 8001afe:	221f      	movs	r2, #31
 8001b00:	4013      	ands	r3, r2
 8001b02:	e098      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d000      	beq.n	8001b10 <HAL_ADC_ConfigChannel+0xa8>
 8001b0e:	e091      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x1cc>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2202      	movs	r2, #2
 8001b16:	4013      	ands	r3, r2
 8001b18:	d000      	beq.n	8001b1c <HAL_ADC_ConfigChannel+0xb4>
 8001b1a:	e089      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x1c8>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2204      	movs	r2, #4
 8001b22:	4013      	ands	r3, r2
 8001b24:	d000      	beq.n	8001b28 <HAL_ADC_ConfigChannel+0xc0>
 8001b26:	e081      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x1c4>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d000      	beq.n	8001b34 <HAL_ADC_ConfigChannel+0xcc>
 8001b32:	e079      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x1c0>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2210      	movs	r2, #16
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d000      	beq.n	8001b40 <HAL_ADC_ConfigChannel+0xd8>
 8001b3e:	e071      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x1bc>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2220      	movs	r2, #32
 8001b46:	4013      	ands	r3, r2
 8001b48:	d000      	beq.n	8001b4c <HAL_ADC_ConfigChannel+0xe4>
 8001b4a:	e069      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x1b8>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2240      	movs	r2, #64	@ 0x40
 8001b52:	4013      	ands	r3, r2
 8001b54:	d000      	beq.n	8001b58 <HAL_ADC_ConfigChannel+0xf0>
 8001b56:	e061      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x1b4>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2280      	movs	r2, #128	@ 0x80
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d000      	beq.n	8001b64 <HAL_ADC_ConfigChannel+0xfc>
 8001b62:	e059      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x1b0>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d151      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x1ac>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2380      	movs	r3, #128	@ 0x80
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d149      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x1a8>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	@ 0x80
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4013      	ands	r3, r2
 8001b86:	d141      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x1a4>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2380      	movs	r3, #128	@ 0x80
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	4013      	ands	r3, r2
 8001b92:	d139      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x1a0>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2380      	movs	r3, #128	@ 0x80
 8001b9a:	015b      	lsls	r3, r3, #5
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d131      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x19c>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	019b      	lsls	r3, r3, #6
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d129      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x198>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2380      	movs	r3, #128	@ 0x80
 8001bb2:	01db      	lsls	r3, r3, #7
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d121      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x194>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d119      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x190>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2380      	movs	r3, #128	@ 0x80
 8001bca:	025b      	lsls	r3, r3, #9
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d111      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x18c>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	2380      	movs	r3, #128	@ 0x80
 8001bd6:	029b      	lsls	r3, r3, #10
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d109      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x188>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	2380      	movs	r3, #128	@ 0x80
 8001be2:	02db      	lsls	r3, r3, #11
 8001be4:	4013      	ands	r3, r2
 8001be6:	d001      	beq.n	8001bec <HAL_ADC_ConfigChannel+0x184>
 8001be8:	2312      	movs	r3, #18
 8001bea:	e024      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001bec:	2300      	movs	r3, #0
 8001bee:	e022      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001bf0:	2311      	movs	r3, #17
 8001bf2:	e020      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001bf4:	2310      	movs	r3, #16
 8001bf6:	e01e      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	e01c      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001bfc:	230e      	movs	r3, #14
 8001bfe:	e01a      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001c00:	230d      	movs	r3, #13
 8001c02:	e018      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001c04:	230c      	movs	r3, #12
 8001c06:	e016      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001c08:	230b      	movs	r3, #11
 8001c0a:	e014      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001c0c:	230a      	movs	r3, #10
 8001c0e:	e012      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001c10:	2309      	movs	r3, #9
 8001c12:	e010      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001c14:	2308      	movs	r3, #8
 8001c16:	e00e      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001c18:	2307      	movs	r3, #7
 8001c1a:	e00c      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001c1c:	2306      	movs	r3, #6
 8001c1e:	e00a      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001c20:	2305      	movs	r3, #5
 8001c22:	e008      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001c24:	2304      	movs	r3, #4
 8001c26:	e006      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e004      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e002      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x1ce>
 8001c34:	2300      	movs	r3, #0
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	6852      	ldr	r2, [r2, #4]
 8001c3a:	201f      	movs	r0, #31
 8001c3c:	4002      	ands	r2, r0
 8001c3e:	4093      	lsls	r3, r2
 8001c40:	000a      	movs	r2, r1
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d808      	bhi.n	8001c6a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	001a      	movs	r2, r3
 8001c66:	f7ff fa93 	bl	8001190 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	6819      	ldr	r1, [r3, #0]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	001a      	movs	r2, r3
 8001c78:	f7ff fada 	bl	8001230 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db00      	blt.n	8001c86 <HAL_ADC_ConfigChannel+0x21e>
 8001c84:	e0bc      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c86:	4b50      	ldr	r3, [pc, #320]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x360>)
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7ff fa2f 	bl	80010ec <LL_ADC_GetCommonPathInternalCh>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a4d      	ldr	r2, [pc, #308]	@ (8001dcc <HAL_ADC_ConfigChannel+0x364>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d122      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	2380      	movs	r3, #128	@ 0x80
 8001ca0:	041b      	lsls	r3, r3, #16
 8001ca2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ca4:	d11d      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2280      	movs	r2, #128	@ 0x80
 8001caa:	0412      	lsls	r2, r2, #16
 8001cac:	4313      	orrs	r3, r2
 8001cae:	4a46      	ldr	r2, [pc, #280]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x360>)
 8001cb0:	0019      	movs	r1, r3
 8001cb2:	0010      	movs	r0, r2
 8001cb4:	f7ff fa06 	bl	80010c4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cb8:	4b45      	ldr	r3, [pc, #276]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x368>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4945      	ldr	r1, [pc, #276]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x36c>)
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f7fe fa20 	bl	8000104 <__udivsi3>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	0013      	movs	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	189b      	adds	r3, r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cd2:	e002      	b.n	8001cda <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f9      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ce0:	e08e      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a3c      	ldr	r2, [pc, #240]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x370>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d10e      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	2380      	movs	r3, #128	@ 0x80
 8001cf0:	045b      	lsls	r3, r3, #17
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d109      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2280      	movs	r2, #128	@ 0x80
 8001cfa:	0452      	lsls	r2, r2, #17
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	4a32      	ldr	r2, [pc, #200]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x360>)
 8001d00:	0019      	movs	r1, r3
 8001d02:	0010      	movs	r0, r2
 8001d04:	f7ff f9de 	bl	80010c4 <LL_ADC_SetCommonPathInternalCh>
 8001d08:	e07a      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a33      	ldr	r2, [pc, #204]	@ (8001ddc <HAL_ADC_ConfigChannel+0x374>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d000      	beq.n	8001d16 <HAL_ADC_ConfigChannel+0x2ae>
 8001d14:	e074      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	2380      	movs	r3, #128	@ 0x80
 8001d1a:	03db      	lsls	r3, r3, #15
 8001d1c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d1e:	d000      	beq.n	8001d22 <HAL_ADC_ConfigChannel+0x2ba>
 8001d20:	e06e      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	2280      	movs	r2, #128	@ 0x80
 8001d26:	03d2      	lsls	r2, r2, #15
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	4a27      	ldr	r2, [pc, #156]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x360>)
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	0010      	movs	r0, r2
 8001d30:	f7ff f9c8 	bl	80010c4 <LL_ADC_SetCommonPathInternalCh>
 8001d34:	e064      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	2380      	movs	r3, #128	@ 0x80
 8001d3c:	061b      	lsls	r3, r3, #24
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d004      	beq.n	8001d4c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d46:	4a1f      	ldr	r2, [pc, #124]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x35c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d107      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	0019      	movs	r1, r3
 8001d56:	0010      	movs	r0, r2
 8001d58:	f7ff fa4b 	bl	80011f2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	da4d      	bge.n	8001e00 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d64:	4b18      	ldr	r3, [pc, #96]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x360>)
 8001d66:	0018      	movs	r0, r3
 8001d68:	f7ff f9c0 	bl	80010ec <LL_ADC_GetCommonPathInternalCh>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a15      	ldr	r2, [pc, #84]	@ (8001dcc <HAL_ADC_ConfigChannel+0x364>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d108      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4a18      	ldr	r2, [pc, #96]	@ (8001de0 <HAL_ADC_ConfigChannel+0x378>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	4a11      	ldr	r2, [pc, #68]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x360>)
 8001d82:	0019      	movs	r1, r3
 8001d84:	0010      	movs	r0, r2
 8001d86:	f7ff f99d 	bl	80010c4 <LL_ADC_SetCommonPathInternalCh>
 8001d8a:	e039      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a11      	ldr	r2, [pc, #68]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x370>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d108      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4a12      	ldr	r2, [pc, #72]	@ (8001de4 <HAL_ADC_ConfigChannel+0x37c>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x360>)
 8001d9e:	0019      	movs	r1, r3
 8001da0:	0010      	movs	r0, r2
 8001da2:	f7ff f98f 	bl	80010c4 <LL_ADC_SetCommonPathInternalCh>
 8001da6:	e02b      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0b      	ldr	r2, [pc, #44]	@ (8001ddc <HAL_ADC_ConfigChannel+0x374>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d126      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4a0c      	ldr	r2, [pc, #48]	@ (8001de8 <HAL_ADC_ConfigChannel+0x380>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	4a03      	ldr	r2, [pc, #12]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x360>)
 8001dba:	0019      	movs	r1, r3
 8001dbc:	0010      	movs	r0, r2
 8001dbe:	f7ff f981 	bl	80010c4 <LL_ADC_SetCommonPathInternalCh>
 8001dc2:	e01d      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x398>
 8001dc4:	80000004 	.word	0x80000004
 8001dc8:	40012708 	.word	0x40012708
 8001dcc:	b0001000 	.word	0xb0001000
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	00030d40 	.word	0x00030d40
 8001dd8:	b8004000 	.word	0xb8004000
 8001ddc:	b4002000 	.word	0xb4002000
 8001de0:	ff7fffff 	.word	0xff7fffff
 8001de4:	feffffff 	.word	0xfeffffff
 8001de8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df0:	2220      	movs	r2, #32
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001df8:	2317      	movs	r3, #23
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2254      	movs	r2, #84	@ 0x54
 8001e04:	2100      	movs	r1, #0
 8001e06:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001e08:	2317      	movs	r3, #23
 8001e0a:	18fb      	adds	r3, r7, r3
 8001e0c:	781b      	ldrb	r3, [r3, #0]
}
 8001e0e:	0018      	movs	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b006      	add	sp, #24
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			@ (mov r8, r8)

08001e18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f7ff fa69 	bl	8001300 <LL_ADC_IsEnabled>
 8001e2e:	1e03      	subs	r3, r0, #0
 8001e30:	d000      	beq.n	8001e34 <ADC_Enable+0x1c>
 8001e32:	e069      	b.n	8001f08 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	4a36      	ldr	r2, [pc, #216]	@ (8001f14 <ADC_Enable+0xfc>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d00d      	beq.n	8001e5c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e44:	2210      	movs	r2, #16
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e50:	2201      	movs	r2, #1
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e056      	b.n	8001f0a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7ff fa29 	bl	80012b8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001e66:	4b2c      	ldr	r3, [pc, #176]	@ (8001f18 <ADC_Enable+0x100>)
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f7ff f93f 	bl	80010ec <LL_ADC_GetCommonPathInternalCh>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	2380      	movs	r3, #128	@ 0x80
 8001e72:	041b      	lsls	r3, r3, #16
 8001e74:	4013      	ands	r3, r2
 8001e76:	d00f      	beq.n	8001e98 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e78:	4b28      	ldr	r3, [pc, #160]	@ (8001f1c <ADC_Enable+0x104>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4928      	ldr	r1, [pc, #160]	@ (8001f20 <ADC_Enable+0x108>)
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f7fe f940 	bl	8000104 <__udivsi3>
 8001e84:	0003      	movs	r3, r0
 8001e86:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001e88:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e8a:	e002      	b.n	8001e92 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f9      	bne.n	8001e8c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7e5b      	ldrb	r3, [r3, #25]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d033      	beq.n	8001f08 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001ea0:	f7ff f906 	bl	80010b0 <HAL_GetTick>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ea8:	e027      	b.n	8001efa <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f7ff fa26 	bl	8001300 <LL_ADC_IsEnabled>
 8001eb4:	1e03      	subs	r3, r0, #0
 8001eb6:	d104      	bne.n	8001ec2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7ff f9fb 	bl	80012b8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ec2:	f7ff f8f5 	bl	80010b0 <HAL_GetTick>
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d914      	bls.n	8001efa <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d00d      	beq.n	8001efa <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee2:	2210      	movs	r2, #16
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eee:	2201      	movs	r2, #1
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e007      	b.n	8001f0a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2201      	movs	r2, #1
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d1d0      	bne.n	8001eaa <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b004      	add	sp, #16
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	46c0      	nop			@ (mov r8, r8)
 8001f14:	80000017 	.word	0x80000017
 8001f18:	40012708 	.word	0x40012708
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	00030d40 	.word	0x00030d40

08001f24 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f7ff f9f6 	bl	8001322 <LL_ADC_IsDisableOngoing>
 8001f36:	0003      	movs	r3, r0
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7ff f9de 	bl	8001300 <LL_ADC_IsEnabled>
 8001f44:	1e03      	subs	r3, r0, #0
 8001f46:	d046      	beq.n	8001fd6 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d143      	bne.n	8001fd6 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2205      	movs	r2, #5
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d10d      	bne.n	8001f78 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	0018      	movs	r0, r3
 8001f62:	f7ff f9bb 	bl	80012dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f6e:	f7ff f89f 	bl	80010b0 <HAL_GetTick>
 8001f72:	0003      	movs	r3, r0
 8001f74:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f76:	e028      	b.n	8001fca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7c:	2210      	movs	r2, #16
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f88:	2201      	movs	r2, #1
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e021      	b.n	8001fd8 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f94:	f7ff f88c 	bl	80010b0 <HAL_GetTick>
 8001f98:	0002      	movs	r2, r0
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d913      	bls.n	8001fca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4013      	ands	r3, r2
 8001fac:	d00d      	beq.n	8001fca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb2:	2210      	movs	r2, #16
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e006      	b.n	8001fd8 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d1de      	bne.n	8001f94 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	0018      	movs	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b004      	add	sp, #16
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff2:	2250      	movs	r2, #80	@ 0x50
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d141      	bne.n	800207c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffc:	2280      	movs	r2, #128	@ 0x80
 8001ffe:	0092      	lsls	r2, r2, #2
 8002000:	431a      	orrs	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	0018      	movs	r0, r3
 800200c:	f7ff f8af 	bl	800116e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002010:	1e03      	subs	r3, r0, #0
 8002012:	d02e      	beq.n	8002072 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	7e9b      	ldrb	r3, [r3, #26]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d12a      	bne.n	8002072 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2208      	movs	r2, #8
 8002024:	4013      	ands	r3, r2
 8002026:	2b08      	cmp	r3, #8
 8002028:	d123      	bne.n	8002072 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	0018      	movs	r0, r3
 8002030:	f7ff f99a 	bl	8001368 <LL_ADC_REG_IsConversionOngoing>
 8002034:	1e03      	subs	r3, r0, #0
 8002036:	d110      	bne.n	800205a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	210c      	movs	r1, #12
 8002044:	438a      	bics	r2, r1
 8002046:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204c:	4a15      	ldr	r2, [pc, #84]	@ (80020a4 <ADC_DMAConvCplt+0xc4>)
 800204e:	4013      	ands	r3, r2
 8002050:	2201      	movs	r2, #1
 8002052:	431a      	orrs	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	659a      	str	r2, [r3, #88]	@ 0x58
 8002058:	e00b      	b.n	8002072 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205e:	2220      	movs	r2, #32
 8002060:	431a      	orrs	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206a:	2201      	movs	r2, #1
 800206c:	431a      	orrs	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	0018      	movs	r0, r3
 8002076:	f7ff fcd7 	bl	8001a28 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800207a:	e00f      	b.n	800209c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002080:	2210      	movs	r2, #16
 8002082:	4013      	ands	r3, r2
 8002084:	d004      	beq.n	8002090 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	0018      	movs	r0, r3
 800208a:	f7ff fce5 	bl	8001a58 <HAL_ADC_ErrorCallback>
}
 800208e:	e005      	b.n	800209c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	0010      	movs	r0, r2
 800209a:	4798      	blx	r3
}
 800209c:	46c0      	nop			@ (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b004      	add	sp, #16
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	fffffefe 	.word	0xfffffefe

080020a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	0018      	movs	r0, r3
 80020ba:	f7ff fcbd 	bl	8001a38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b004      	add	sp, #16
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d8:	2240      	movs	r2, #64	@ 0x40
 80020da:	431a      	orrs	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e4:	2204      	movs	r2, #4
 80020e6:	431a      	orrs	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	0018      	movs	r0, r3
 80020f0:	f7ff fcb2 	bl	8001a58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020f4:	46c0      	nop			@ (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b004      	add	sp, #16
 80020fa:	bd80      	pop	{r7, pc}

080020fc <LL_ADC_GetCommonClock>:
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	23f0      	movs	r3, #240	@ 0xf0
 800210a:	039b      	lsls	r3, r3, #14
 800210c:	4013      	ands	r3, r2
}
 800210e:	0018      	movs	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	b002      	add	sp, #8
 8002114:	bd80      	pop	{r7, pc}

08002116 <LL_ADC_GetClock>:
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	0f9b      	lsrs	r3, r3, #30
 8002124:	079b      	lsls	r3, r3, #30
}
 8002126:	0018      	movs	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	b002      	add	sp, #8
 800212c:	bd80      	pop	{r7, pc}

0800212e <LL_ADC_SetCalibrationFactor>:
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	22b4      	movs	r2, #180	@ 0xb4
 800213c:	589b      	ldr	r3, [r3, r2]
 800213e:	227f      	movs	r2, #127	@ 0x7f
 8002140:	4393      	bics	r3, r2
 8002142:	001a      	movs	r2, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	21b4      	movs	r1, #180	@ 0xb4
 800214c:	505a      	str	r2, [r3, r1]
}
 800214e:	46c0      	nop			@ (mov r8, r8)
 8002150:	46bd      	mov	sp, r7
 8002152:	b002      	add	sp, #8
 8002154:	bd80      	pop	{r7, pc}

08002156 <LL_ADC_GetCalibrationFactor>:
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	22b4      	movs	r2, #180	@ 0xb4
 8002162:	589b      	ldr	r3, [r3, r2]
 8002164:	227f      	movs	r2, #127	@ 0x7f
 8002166:	4013      	ands	r3, r2
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b002      	add	sp, #8
 800216e:	bd80      	pop	{r7, pc}

08002170 <LL_ADC_Enable>:
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4a04      	ldr	r2, [pc, #16]	@ (8002190 <LL_ADC_Enable+0x20>)
 800217e:	4013      	ands	r3, r2
 8002180:	2201      	movs	r2, #1
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	609a      	str	r2, [r3, #8]
}
 8002188:	46c0      	nop			@ (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}
 8002190:	7fffffe8 	.word	0x7fffffe8

08002194 <LL_ADC_Disable>:
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a04      	ldr	r2, [pc, #16]	@ (80021b4 <LL_ADC_Disable+0x20>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	2202      	movs	r2, #2
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	609a      	str	r2, [r3, #8]
}
 80021ac:	46c0      	nop			@ (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b002      	add	sp, #8
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	7fffffe8 	.word	0x7fffffe8

080021b8 <LL_ADC_IsEnabled>:
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2201      	movs	r2, #1
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <LL_ADC_IsEnabled+0x18>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <LL_ADC_IsEnabled+0x1a>
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	0018      	movs	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b002      	add	sp, #8
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <LL_ADC_StartCalibration>:
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4a05      	ldr	r2, [pc, #20]	@ (8002200 <LL_ADC_StartCalibration+0x24>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	2280      	movs	r2, #128	@ 0x80
 80021ee:	0612      	lsls	r2, r2, #24
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	609a      	str	r2, [r3, #8]
}
 80021f6:	46c0      	nop			@ (mov r8, r8)
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b002      	add	sp, #8
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	7fffffe8 	.word	0x7fffffe8

08002204 <LL_ADC_IsCalibrationOnGoing>:
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	0fdb      	lsrs	r3, r3, #31
 8002212:	07da      	lsls	r2, r3, #31
 8002214:	2380      	movs	r3, #128	@ 0x80
 8002216:	061b      	lsls	r3, r3, #24
 8002218:	429a      	cmp	r2, r3
 800221a:	d101      	bne.n	8002220 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002220:	2300      	movs	r3, #0
}
 8002222:	0018      	movs	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	b002      	add	sp, #8
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b08b      	sub	sp, #44	@ 0x2c
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2254      	movs	r2, #84	@ 0x54
 8002240:	5c9b      	ldrb	r3, [r3, r2]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_ADCEx_Calibration_Start+0x1e>
 8002246:	2302      	movs	r3, #2
 8002248:	e0dd      	b.n	8002406 <HAL_ADCEx_Calibration_Start+0x1da>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2254      	movs	r2, #84	@ 0x54
 800224e:	2101      	movs	r1, #1
 8002250:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002252:	231f      	movs	r3, #31
 8002254:	18fc      	adds	r4, r7, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	0018      	movs	r0, r3
 800225a:	f7ff fe63 	bl	8001f24 <ADC_Disable>
 800225e:	0003      	movs	r3, r0
 8002260:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	0018      	movs	r0, r3
 8002268:	f7ff ffa6 	bl	80021b8 <LL_ADC_IsEnabled>
 800226c:	1e03      	subs	r3, r0, #0
 800226e:	d000      	beq.n	8002272 <HAL_ADCEx_Calibration_Start+0x46>
 8002270:	e0bc      	b.n	80023ec <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002276:	4a66      	ldr	r2, [pc, #408]	@ (8002410 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8002278:	4013      	ands	r3, r2
 800227a:	2202      	movs	r2, #2
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4a62      	ldr	r2, [pc, #392]	@ (8002414 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	495f      	ldr	r1, [pc, #380]	@ (8002418 <HAL_ADCEx_Calibration_Start+0x1ec>)
 800229a:	400a      	ands	r2, r1
 800229c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800229e:	2300      	movs	r3, #0
 80022a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80022a2:	e02d      	b.n	8002300 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0018      	movs	r0, r3
 80022aa:	f7ff ff97 	bl	80021dc <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80022ae:	e014      	b.n	80022da <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3301      	adds	r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4a58      	ldr	r2, [pc, #352]	@ (800241c <HAL_ADCEx_Calibration_Start+0x1f0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d90d      	bls.n	80022da <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c2:	2212      	movs	r2, #18
 80022c4:	4393      	bics	r3, r2
 80022c6:	2210      	movs	r2, #16
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2254      	movs	r2, #84	@ 0x54
 80022d2:	2100      	movs	r1, #0
 80022d4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e095      	b.n	8002406 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	0018      	movs	r0, r3
 80022e0:	f7ff ff90 	bl	8002204 <LL_ADC_IsCalibrationOnGoing>
 80022e4:	1e03      	subs	r3, r0, #0
 80022e6:	d1e3      	bne.n	80022b0 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0018      	movs	r0, r3
 80022ee:	f7ff ff32 	bl	8002156 <LL_ADC_GetCalibrationFactor>
 80022f2:	0002      	movs	r2, r0
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	189b      	adds	r3, r3, r2
 80022f8:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	3301      	adds	r3, #1
 80022fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	2b07      	cmp	r3, #7
 8002304:	d9ce      	bls.n	80022a4 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002306:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002308:	6a38      	ldr	r0, [r7, #32]
 800230a:	f7fd fefb 	bl	8000104 <__udivsi3>
 800230e:	0003      	movs	r3, r0
 8002310:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	0018      	movs	r0, r3
 8002318:	f7ff ff2a 	bl	8002170 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0018      	movs	r0, r3
 8002322:	f7ff fef8 	bl	8002116 <LL_ADC_GetClock>
 8002326:	1e03      	subs	r3, r0, #0
 8002328:	d11b      	bne.n	8002362 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800232a:	4b3d      	ldr	r3, [pc, #244]	@ (8002420 <HAL_ADCEx_Calibration_Start+0x1f4>)
 800232c:	0018      	movs	r0, r3
 800232e:	f7ff fee5 	bl	80020fc <LL_ADC_GetCommonClock>
 8002332:	0003      	movs	r3, r0
 8002334:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	23e0      	movs	r3, #224	@ 0xe0
 800233a:	035b      	lsls	r3, r3, #13
 800233c:	429a      	cmp	r2, r3
 800233e:	d310      	bcc.n	8002362 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	0c9b      	lsrs	r3, r3, #18
 8002344:	3b03      	subs	r3, #3
 8002346:	2201      	movs	r2, #1
 8002348:	409a      	lsls	r2, r3
 800234a:	0013      	movs	r3, r2
 800234c:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	085b      	lsrs	r3, r3, #1
 8002352:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8002354:	e002      	b.n	800235c <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	3b01      	subs	r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f9      	bne.n	8002356 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6a3a      	ldr	r2, [r7, #32]
 8002368:	0011      	movs	r1, r2
 800236a:	0018      	movs	r0, r3
 800236c:	f7ff fedf 	bl	800212e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0018      	movs	r0, r3
 8002376:	f7ff ff0d 	bl	8002194 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800237a:	f7fe fe99 	bl	80010b0 <HAL_GetTick>
 800237e:	0003      	movs	r3, r0
 8002380:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002382:	e01b      	b.n	80023bc <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002384:	f7fe fe94 	bl	80010b0 <HAL_GetTick>
 8002388:	0002      	movs	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d914      	bls.n	80023bc <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	0018      	movs	r0, r3
 8002398:	f7ff ff0e 	bl	80021b8 <LL_ADC_IsEnabled>
 800239c:	1e03      	subs	r3, r0, #0
 800239e:	d00d      	beq.n	80023bc <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a4:	2210      	movs	r2, #16
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b0:	2201      	movs	r2, #1
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e024      	b.n	8002406 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f7ff fef9 	bl	80021b8 <LL_ADC_IsEnabled>
 80023c6:	1e03      	subs	r3, r0, #0
 80023c8:	d1dc      	bne.n	8002384 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68d9      	ldr	r1, [r3, #12]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023de:	2203      	movs	r2, #3
 80023e0:	4393      	bics	r3, r2
 80023e2:	2201      	movs	r2, #1
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80023ea:	e005      	b.n	80023f8 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f0:	2210      	movs	r2, #16
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2254      	movs	r2, #84	@ 0x54
 80023fc:	2100      	movs	r1, #0
 80023fe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002400:	231f      	movs	r3, #31
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	781b      	ldrb	r3, [r3, #0]
}
 8002406:	0018      	movs	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	b00b      	add	sp, #44	@ 0x2c
 800240c:	bd90      	pop	{r4, r7, pc}
 800240e:	46c0      	nop			@ (mov r8, r8)
 8002410:	fffffefd 	.word	0xfffffefd
 8002414:	00008003 	.word	0x00008003
 8002418:	ffff7ffc 	.word	0xffff7ffc
 800241c:	0002f1ff 	.word	0x0002f1ff
 8002420:	40012708 	.word	0x40012708

08002424 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800242c:	46c0      	nop			@ (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	b002      	add	sp, #8
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800243c:	46c0      	nop			@ (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b002      	add	sp, #8
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800244c:	46c0      	nop			@ (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	b002      	add	sp, #8
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 800245c:	46c0      	nop			@ (mov r8, r8)
 800245e:	46bd      	mov	sp, r7
 8002460:	b002      	add	sp, #8
 8002462:	bd80      	pop	{r7, pc}

08002464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	0002      	movs	r2, r0
 800246c:	1dfb      	adds	r3, r7, #7
 800246e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002470:	1dfb      	adds	r3, r7, #7
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b7f      	cmp	r3, #127	@ 0x7f
 8002476:	d809      	bhi.n	800248c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002478:	1dfb      	adds	r3, r7, #7
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	001a      	movs	r2, r3
 800247e:	231f      	movs	r3, #31
 8002480:	401a      	ands	r2, r3
 8002482:	4b04      	ldr	r3, [pc, #16]	@ (8002494 <__NVIC_EnableIRQ+0x30>)
 8002484:	2101      	movs	r1, #1
 8002486:	4091      	lsls	r1, r2
 8002488:	000a      	movs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800248c:	46c0      	nop			@ (mov r8, r8)
 800248e:	46bd      	mov	sp, r7
 8002490:	b002      	add	sp, #8
 8002492:	bd80      	pop	{r7, pc}
 8002494:	e000e100 	.word	0xe000e100

08002498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	0002      	movs	r2, r0
 80024a0:	6039      	str	r1, [r7, #0]
 80024a2:	1dfb      	adds	r3, r7, #7
 80024a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024a6:	1dfb      	adds	r3, r7, #7
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80024ac:	d828      	bhi.n	8002500 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024ae:	4a2f      	ldr	r2, [pc, #188]	@ (800256c <__NVIC_SetPriority+0xd4>)
 80024b0:	1dfb      	adds	r3, r7, #7
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	b25b      	sxtb	r3, r3
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	33c0      	adds	r3, #192	@ 0xc0
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	589b      	ldr	r3, [r3, r2]
 80024be:	1dfa      	adds	r2, r7, #7
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	0011      	movs	r1, r2
 80024c4:	2203      	movs	r2, #3
 80024c6:	400a      	ands	r2, r1
 80024c8:	00d2      	lsls	r2, r2, #3
 80024ca:	21ff      	movs	r1, #255	@ 0xff
 80024cc:	4091      	lsls	r1, r2
 80024ce:	000a      	movs	r2, r1
 80024d0:	43d2      	mvns	r2, r2
 80024d2:	401a      	ands	r2, r3
 80024d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	019b      	lsls	r3, r3, #6
 80024da:	22ff      	movs	r2, #255	@ 0xff
 80024dc:	401a      	ands	r2, r3
 80024de:	1dfb      	adds	r3, r7, #7
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	0018      	movs	r0, r3
 80024e4:	2303      	movs	r3, #3
 80024e6:	4003      	ands	r3, r0
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024ec:	481f      	ldr	r0, [pc, #124]	@ (800256c <__NVIC_SetPriority+0xd4>)
 80024ee:	1dfb      	adds	r3, r7, #7
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	b25b      	sxtb	r3, r3
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	430a      	orrs	r2, r1
 80024f8:	33c0      	adds	r3, #192	@ 0xc0
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80024fe:	e031      	b.n	8002564 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002500:	4a1b      	ldr	r2, [pc, #108]	@ (8002570 <__NVIC_SetPriority+0xd8>)
 8002502:	1dfb      	adds	r3, r7, #7
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	0019      	movs	r1, r3
 8002508:	230f      	movs	r3, #15
 800250a:	400b      	ands	r3, r1
 800250c:	3b08      	subs	r3, #8
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	3306      	adds	r3, #6
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	18d3      	adds	r3, r2, r3
 8002516:	3304      	adds	r3, #4
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	1dfa      	adds	r2, r7, #7
 800251c:	7812      	ldrb	r2, [r2, #0]
 800251e:	0011      	movs	r1, r2
 8002520:	2203      	movs	r2, #3
 8002522:	400a      	ands	r2, r1
 8002524:	00d2      	lsls	r2, r2, #3
 8002526:	21ff      	movs	r1, #255	@ 0xff
 8002528:	4091      	lsls	r1, r2
 800252a:	000a      	movs	r2, r1
 800252c:	43d2      	mvns	r2, r2
 800252e:	401a      	ands	r2, r3
 8002530:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	019b      	lsls	r3, r3, #6
 8002536:	22ff      	movs	r2, #255	@ 0xff
 8002538:	401a      	ands	r2, r3
 800253a:	1dfb      	adds	r3, r7, #7
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	0018      	movs	r0, r3
 8002540:	2303      	movs	r3, #3
 8002542:	4003      	ands	r3, r0
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002548:	4809      	ldr	r0, [pc, #36]	@ (8002570 <__NVIC_SetPriority+0xd8>)
 800254a:	1dfb      	adds	r3, r7, #7
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	001c      	movs	r4, r3
 8002550:	230f      	movs	r3, #15
 8002552:	4023      	ands	r3, r4
 8002554:	3b08      	subs	r3, #8
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	430a      	orrs	r2, r1
 800255a:	3306      	adds	r3, #6
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	18c3      	adds	r3, r0, r3
 8002560:	3304      	adds	r3, #4
 8002562:	601a      	str	r2, [r3, #0]
}
 8002564:	46c0      	nop			@ (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b003      	add	sp, #12
 800256a:	bd90      	pop	{r4, r7, pc}
 800256c:	e000e100 	.word	0xe000e100
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	1e5a      	subs	r2, r3, #1
 8002580:	2380      	movs	r3, #128	@ 0x80
 8002582:	045b      	lsls	r3, r3, #17
 8002584:	429a      	cmp	r2, r3
 8002586:	d301      	bcc.n	800258c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002588:	2301      	movs	r3, #1
 800258a:	e010      	b.n	80025ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800258c:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <SysTick_Config+0x44>)
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	3a01      	subs	r2, #1
 8002592:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002594:	2301      	movs	r3, #1
 8002596:	425b      	negs	r3, r3
 8002598:	2103      	movs	r1, #3
 800259a:	0018      	movs	r0, r3
 800259c:	f7ff ff7c 	bl	8002498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a0:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <SysTick_Config+0x44>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025a6:	4b04      	ldr	r3, [pc, #16]	@ (80025b8 <SysTick_Config+0x44>)
 80025a8:	2207      	movs	r2, #7
 80025aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	0018      	movs	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b002      	add	sp, #8
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			@ (mov r8, r8)
 80025b8:	e000e010 	.word	0xe000e010

080025bc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
 80025c6:	210f      	movs	r1, #15
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	1c02      	adds	r2, r0, #0
 80025cc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	187b      	adds	r3, r7, r1
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	b25b      	sxtb	r3, r3
 80025d6:	0011      	movs	r1, r2
 80025d8:	0018      	movs	r0, r3
 80025da:	f7ff ff5d 	bl	8002498 <__NVIC_SetPriority>
}
 80025de:	46c0      	nop			@ (mov r8, r8)
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b004      	add	sp, #16
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	0002      	movs	r2, r0
 80025ee:	1dfb      	adds	r3, r7, #7
 80025f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f2:	1dfb      	adds	r3, r7, #7
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	b25b      	sxtb	r3, r3
 80025f8:	0018      	movs	r0, r3
 80025fa:	f7ff ff33 	bl	8002464 <__NVIC_EnableIRQ>
}
 80025fe:	46c0      	nop			@ (mov r8, r8)
 8002600:	46bd      	mov	sp, r7
 8002602:	b002      	add	sp, #8
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	0018      	movs	r0, r3
 8002612:	f7ff ffaf 	bl	8002574 <SysTick_Config>
 8002616:	0003      	movs	r3, r0
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	b002      	add	sp, #8
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e077      	b.n	8002722 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a3d      	ldr	r2, [pc, #244]	@ (800272c <HAL_DMA_Init+0x10c>)
 8002638:	4694      	mov	ip, r2
 800263a:	4463      	add	r3, ip
 800263c:	2114      	movs	r1, #20
 800263e:	0018      	movs	r0, r3
 8002640:	f7fd fd60 	bl	8000104 <__udivsi3>
 8002644:	0003      	movs	r3, r0
 8002646:	009a      	lsls	r2, r3, #2
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2225      	movs	r2, #37	@ 0x25
 8002650:	2102      	movs	r1, #2
 8002652:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4934      	ldr	r1, [pc, #208]	@ (8002730 <HAL_DMA_Init+0x110>)
 8002660:	400a      	ands	r2, r1
 8002662:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	0018      	movs	r0, r3
 800269e:	f000 f9c1 	bl	8002a24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	2380      	movs	r3, #128	@ 0x80
 80026a8:	01db      	lsls	r3, r3, #7
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d102      	bne.n	80026b4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026bc:	213f      	movs	r1, #63	@ 0x3f
 80026be:	400a      	ands	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80026ca:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d011      	beq.n	80026f8 <HAL_DMA_Init+0xd8>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d80d      	bhi.n	80026f8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	0018      	movs	r0, r3
 80026e0:	f000 f9cc 	bl	8002a7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	e008      	b.n	800270a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2225      	movs	r2, #37	@ 0x25
 8002714:	2101      	movs	r1, #1
 8002716:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2224      	movs	r2, #36	@ 0x24
 800271c:	2100      	movs	r1, #0
 800271e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	0018      	movs	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	b002      	add	sp, #8
 8002728:	bd80      	pop	{r7, pc}
 800272a:	46c0      	nop			@ (mov r8, r8)
 800272c:	bffdfff8 	.word	0xbffdfff8
 8002730:	ffff800f 	.word	0xffff800f

08002734 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002742:	2317      	movs	r3, #23
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2224      	movs	r2, #36	@ 0x24
 800274e:	5c9b      	ldrb	r3, [r3, r2]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_DMA_Start_IT+0x24>
 8002754:	2302      	movs	r3, #2
 8002756:	e06f      	b.n	8002838 <HAL_DMA_Start_IT+0x104>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2224      	movs	r2, #36	@ 0x24
 800275c:	2101      	movs	r1, #1
 800275e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2225      	movs	r2, #37	@ 0x25
 8002764:	5c9b      	ldrb	r3, [r3, r2]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b01      	cmp	r3, #1
 800276a:	d157      	bne.n	800281c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2225      	movs	r2, #37	@ 0x25
 8002770:	2102      	movs	r1, #2
 8002772:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2101      	movs	r1, #1
 8002786:	438a      	bics	r2, r1
 8002788:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f907 	bl	80029a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	210e      	movs	r1, #14
 80027aa:	430a      	orrs	r2, r1
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	e00f      	b.n	80027d0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2104      	movs	r1, #4
 80027bc:	438a      	bics	r2, r1
 80027be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	210a      	movs	r1, #10
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	2380      	movs	r3, #128	@ 0x80
 80027d8:	025b      	lsls	r3, r3, #9
 80027da:	4013      	ands	r3, r2
 80027dc:	d008      	beq.n	80027f0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e8:	2180      	movs	r1, #128	@ 0x80
 80027ea:	0049      	lsls	r1, r1, #1
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002802:	2180      	movs	r1, #128	@ 0x80
 8002804:	0049      	lsls	r1, r1, #1
 8002806:	430a      	orrs	r2, r1
 8002808:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2101      	movs	r1, #1
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	e00a      	b.n	8002832 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2280      	movs	r2, #128	@ 0x80
 8002820:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2224      	movs	r2, #36	@ 0x24
 8002826:	2100      	movs	r1, #0
 8002828:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800282a:	2317      	movs	r3, #23
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002832:	2317      	movs	r3, #23
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	781b      	ldrb	r3, [r3, #0]
}
 8002838:	0018      	movs	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	b006      	add	sp, #24
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002848:	4b55      	ldr	r3, [pc, #340]	@ (80029a0 <HAL_DMA_IRQHandler+0x160>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	221c      	movs	r2, #28
 800285c:	4013      	ands	r3, r2
 800285e:	2204      	movs	r2, #4
 8002860:	409a      	lsls	r2, r3
 8002862:	0013      	movs	r3, r2
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4013      	ands	r3, r2
 8002868:	d027      	beq.n	80028ba <HAL_DMA_IRQHandler+0x7a>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2204      	movs	r2, #4
 800286e:	4013      	ands	r3, r2
 8002870:	d023      	beq.n	80028ba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2220      	movs	r2, #32
 800287a:	4013      	ands	r3, r2
 800287c:	d107      	bne.n	800288e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2104      	movs	r1, #4
 800288a:	438a      	bics	r2, r1
 800288c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800288e:	4b44      	ldr	r3, [pc, #272]	@ (80029a0 <HAL_DMA_IRQHandler+0x160>)
 8002890:	6859      	ldr	r1, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	221c      	movs	r2, #28
 8002898:	4013      	ands	r3, r2
 800289a:	2204      	movs	r2, #4
 800289c:	409a      	lsls	r2, r3
 800289e:	4b40      	ldr	r3, [pc, #256]	@ (80029a0 <HAL_DMA_IRQHandler+0x160>)
 80028a0:	430a      	orrs	r2, r1
 80028a2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d100      	bne.n	80028ae <HAL_DMA_IRQHandler+0x6e>
 80028ac:	e073      	b.n	8002996 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	0010      	movs	r0, r2
 80028b6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80028b8:	e06d      	b.n	8002996 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	221c      	movs	r2, #28
 80028c0:	4013      	ands	r3, r2
 80028c2:	2202      	movs	r2, #2
 80028c4:	409a      	lsls	r2, r3
 80028c6:	0013      	movs	r3, r2
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4013      	ands	r3, r2
 80028cc:	d02e      	beq.n	800292c <HAL_DMA_IRQHandler+0xec>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2202      	movs	r2, #2
 80028d2:	4013      	ands	r3, r2
 80028d4:	d02a      	beq.n	800292c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2220      	movs	r2, #32
 80028de:	4013      	ands	r3, r2
 80028e0:	d10b      	bne.n	80028fa <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	210a      	movs	r1, #10
 80028ee:	438a      	bics	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2225      	movs	r2, #37	@ 0x25
 80028f6:	2101      	movs	r1, #1
 80028f8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80028fa:	4b29      	ldr	r3, [pc, #164]	@ (80029a0 <HAL_DMA_IRQHandler+0x160>)
 80028fc:	6859      	ldr	r1, [r3, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	221c      	movs	r2, #28
 8002904:	4013      	ands	r3, r2
 8002906:	2202      	movs	r2, #2
 8002908:	409a      	lsls	r2, r3
 800290a:	4b25      	ldr	r3, [pc, #148]	@ (80029a0 <HAL_DMA_IRQHandler+0x160>)
 800290c:	430a      	orrs	r2, r1
 800290e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2224      	movs	r2, #36	@ 0x24
 8002914:	2100      	movs	r1, #0
 8002916:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	2b00      	cmp	r3, #0
 800291e:	d03a      	beq.n	8002996 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	0010      	movs	r0, r2
 8002928:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800292a:	e034      	b.n	8002996 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	221c      	movs	r2, #28
 8002932:	4013      	ands	r3, r2
 8002934:	2208      	movs	r2, #8
 8002936:	409a      	lsls	r2, r3
 8002938:	0013      	movs	r3, r2
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4013      	ands	r3, r2
 800293e:	d02b      	beq.n	8002998 <HAL_DMA_IRQHandler+0x158>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2208      	movs	r2, #8
 8002944:	4013      	ands	r3, r2
 8002946:	d027      	beq.n	8002998 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	210e      	movs	r1, #14
 8002954:	438a      	bics	r2, r1
 8002956:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002958:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <HAL_DMA_IRQHandler+0x160>)
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	221c      	movs	r2, #28
 8002962:	4013      	ands	r3, r2
 8002964:	2201      	movs	r2, #1
 8002966:	409a      	lsls	r2, r3
 8002968:	4b0d      	ldr	r3, [pc, #52]	@ (80029a0 <HAL_DMA_IRQHandler+0x160>)
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2225      	movs	r2, #37	@ 0x25
 8002978:	2101      	movs	r1, #1
 800297a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2224      	movs	r2, #36	@ 0x24
 8002980:	2100      	movs	r1, #0
 8002982:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	0010      	movs	r0, r2
 8002994:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002996:	46c0      	nop			@ (mov r8, r8)
 8002998:	46c0      	nop			@ (mov r8, r8)
}
 800299a:	46bd      	mov	sp, r7
 800299c:	b004      	add	sp, #16
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40020000 	.word	0x40020000

080029a4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80029ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d004      	beq.n	80029ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80029cc:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80029ce:	4b14      	ldr	r3, [pc, #80]	@ (8002a20 <DMA_SetConfig+0x7c>)
 80029d0:	6859      	ldr	r1, [r3, #4]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	221c      	movs	r2, #28
 80029d8:	4013      	ands	r3, r2
 80029da:	2201      	movs	r2, #1
 80029dc:	409a      	lsls	r2, r3
 80029de:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <DMA_SetConfig+0x7c>)
 80029e0:	430a      	orrs	r2, r1
 80029e2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d108      	bne.n	8002a06 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a04:	e007      	b.n	8002a16 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	60da      	str	r2, [r3, #12]
}
 8002a16:	46c0      	nop			@ (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b004      	add	sp, #16
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	46c0      	nop			@ (mov r8, r8)
 8002a20:	40020000 	.word	0x40020000

08002a24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	4a10      	ldr	r2, [pc, #64]	@ (8002a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002a34:	4694      	mov	ip, r2
 8002a36:	4463      	add	r3, ip
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	001a      	movs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	001a      	movs	r2, r3
 8002a46:	23ff      	movs	r3, #255	@ 0xff
 8002a48:	4013      	ands	r3, r2
 8002a4a:	3b08      	subs	r3, #8
 8002a4c:	2114      	movs	r1, #20
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f7fd fb58 	bl	8000104 <__udivsi3>
 8002a54:	0003      	movs	r3, r0
 8002a56:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a07      	ldr	r2, [pc, #28]	@ (8002a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002a5c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	221f      	movs	r2, #31
 8002a62:	4013      	ands	r3, r2
 8002a64:	2201      	movs	r2, #1
 8002a66:	409a      	lsls	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002a6c:	46c0      	nop			@ (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b004      	add	sp, #16
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	10008200 	.word	0x10008200
 8002a78:	40020880 	.word	0x40020880

08002a7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	223f      	movs	r2, #63	@ 0x3f
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4a0a      	ldr	r2, [pc, #40]	@ (8002abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a92:	4694      	mov	ip, r2
 8002a94:	4463      	add	r3, ip
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	001a      	movs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a07      	ldr	r2, [pc, #28]	@ (8002ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002aa2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2201      	movs	r2, #1
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002ab4:	46c0      	nop			@ (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b004      	add	sp, #16
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	1000823f 	.word	0x1000823f
 8002ac0:	40020940 	.word	0x40020940

08002ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad2:	e147      	b.n	8002d64 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2101      	movs	r1, #1
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4091      	lsls	r1, r2
 8002ade:	000a      	movs	r2, r1
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d100      	bne.n	8002aec <HAL_GPIO_Init+0x28>
 8002aea:	e138      	b.n	8002d5e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2203      	movs	r2, #3
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d005      	beq.n	8002b04 <HAL_GPIO_Init+0x40>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2203      	movs	r2, #3
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d130      	bne.n	8002b66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	2203      	movs	r2, #3
 8002b10:	409a      	lsls	r2, r3
 8002b12:	0013      	movs	r3, r2
 8002b14:	43da      	mvns	r2, r3
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	409a      	lsls	r2, r3
 8002b26:	0013      	movs	r3, r2
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	0013      	movs	r3, r2
 8002b42:	43da      	mvns	r2, r3
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4013      	ands	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	091b      	lsrs	r3, r3, #4
 8002b50:	2201      	movs	r2, #1
 8002b52:	401a      	ands	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	409a      	lsls	r2, r3
 8002b58:	0013      	movs	r3, r2
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d017      	beq.n	8002ba2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	0013      	movs	r3, r2
 8002b82:	43da      	mvns	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	409a      	lsls	r2, r3
 8002b94:	0013      	movs	r3, r2
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d123      	bne.n	8002bf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	08da      	lsrs	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3208      	adds	r2, #8
 8002bb6:	0092      	lsls	r2, r2, #2
 8002bb8:	58d3      	ldr	r3, [r2, r3]
 8002bba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2207      	movs	r2, #7
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	220f      	movs	r2, #15
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	0013      	movs	r3, r2
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2107      	movs	r1, #7
 8002bda:	400b      	ands	r3, r1
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	409a      	lsls	r2, r3
 8002be0:	0013      	movs	r3, r2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	08da      	lsrs	r2, r3, #3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3208      	adds	r2, #8
 8002bf0:	0092      	lsls	r2, r2, #2
 8002bf2:	6939      	ldr	r1, [r7, #16]
 8002bf4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	2203      	movs	r2, #3
 8002c02:	409a      	lsls	r2, r3
 8002c04:	0013      	movs	r3, r2
 8002c06:	43da      	mvns	r2, r3
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2203      	movs	r2, #3
 8002c14:	401a      	ands	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	0013      	movs	r3, r2
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	23c0      	movs	r3, #192	@ 0xc0
 8002c30:	029b      	lsls	r3, r3, #10
 8002c32:	4013      	ands	r3, r2
 8002c34:	d100      	bne.n	8002c38 <HAL_GPIO_Init+0x174>
 8002c36:	e092      	b.n	8002d5e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002c38:	4a50      	ldr	r2, [pc, #320]	@ (8002d7c <HAL_GPIO_Init+0x2b8>)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	089b      	lsrs	r3, r3, #2
 8002c3e:	3318      	adds	r3, #24
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	589b      	ldr	r3, [r3, r2]
 8002c44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2203      	movs	r2, #3
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	220f      	movs	r2, #15
 8002c50:	409a      	lsls	r2, r3
 8002c52:	0013      	movs	r3, r2
 8002c54:	43da      	mvns	r2, r3
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	23a0      	movs	r3, #160	@ 0xa0
 8002c60:	05db      	lsls	r3, r3, #23
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d013      	beq.n	8002c8e <HAL_GPIO_Init+0x1ca>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a45      	ldr	r2, [pc, #276]	@ (8002d80 <HAL_GPIO_Init+0x2bc>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00d      	beq.n	8002c8a <HAL_GPIO_Init+0x1c6>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a44      	ldr	r2, [pc, #272]	@ (8002d84 <HAL_GPIO_Init+0x2c0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <HAL_GPIO_Init+0x1c2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a43      	ldr	r2, [pc, #268]	@ (8002d88 <HAL_GPIO_Init+0x2c4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_GPIO_Init+0x1be>
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e006      	b.n	8002c90 <HAL_GPIO_Init+0x1cc>
 8002c82:	2305      	movs	r3, #5
 8002c84:	e004      	b.n	8002c90 <HAL_GPIO_Init+0x1cc>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e002      	b.n	8002c90 <HAL_GPIO_Init+0x1cc>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <HAL_GPIO_Init+0x1cc>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	2103      	movs	r1, #3
 8002c94:	400a      	ands	r2, r1
 8002c96:	00d2      	lsls	r2, r2, #3
 8002c98:	4093      	lsls	r3, r2
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002ca0:	4936      	ldr	r1, [pc, #216]	@ (8002d7c <HAL_GPIO_Init+0x2b8>)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	089b      	lsrs	r3, r3, #2
 8002ca6:	3318      	adds	r3, #24
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cae:	4b33      	ldr	r3, [pc, #204]	@ (8002d7c <HAL_GPIO_Init+0x2b8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	2380      	movs	r3, #128	@ 0x80
 8002cc4:	035b      	lsls	r3, r3, #13
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d7c <HAL_GPIO_Init+0x2b8>)
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002cd8:	4b28      	ldr	r3, [pc, #160]	@ (8002d7c <HAL_GPIO_Init+0x2b8>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	43da      	mvns	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	2380      	movs	r3, #128	@ 0x80
 8002cee:	039b      	lsls	r3, r3, #14
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d7c <HAL_GPIO_Init+0x2b8>)
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d02:	4a1e      	ldr	r2, [pc, #120]	@ (8002d7c <HAL_GPIO_Init+0x2b8>)
 8002d04:	2384      	movs	r3, #132	@ 0x84
 8002d06:	58d3      	ldr	r3, [r2, r3]
 8002d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	43da      	mvns	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	2380      	movs	r3, #128	@ 0x80
 8002d1a:	029b      	lsls	r3, r3, #10
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d28:	4914      	ldr	r1, [pc, #80]	@ (8002d7c <HAL_GPIO_Init+0x2b8>)
 8002d2a:	2284      	movs	r2, #132	@ 0x84
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002d30:	4a12      	ldr	r2, [pc, #72]	@ (8002d7c <HAL_GPIO_Init+0x2b8>)
 8002d32:	2380      	movs	r3, #128	@ 0x80
 8002d34:	58d3      	ldr	r3, [r2, r3]
 8002d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	43da      	mvns	r2, r3
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	2380      	movs	r3, #128	@ 0x80
 8002d48:	025b      	lsls	r3, r3, #9
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d56:	4909      	ldr	r1, [pc, #36]	@ (8002d7c <HAL_GPIO_Init+0x2b8>)
 8002d58:	2280      	movs	r2, #128	@ 0x80
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3301      	adds	r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	40da      	lsrs	r2, r3
 8002d6c:	1e13      	subs	r3, r2, #0
 8002d6e:	d000      	beq.n	8002d72 <HAL_GPIO_Init+0x2ae>
 8002d70:	e6b0      	b.n	8002ad4 <HAL_GPIO_Init+0x10>
  }
}
 8002d72:	46c0      	nop			@ (mov r8, r8)
 8002d74:	46c0      	nop			@ (mov r8, r8)
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b006      	add	sp, #24
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021800 	.word	0x40021800
 8002d80:	50000400 	.word	0x50000400
 8002d84:	50000800 	.word	0x50000800
 8002d88:	50000c00 	.word	0x50000c00

08002d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	0008      	movs	r0, r1
 8002d96:	0011      	movs	r1, r2
 8002d98:	1cbb      	adds	r3, r7, #2
 8002d9a:	1c02      	adds	r2, r0, #0
 8002d9c:	801a      	strh	r2, [r3, #0]
 8002d9e:	1c7b      	adds	r3, r7, #1
 8002da0:	1c0a      	adds	r2, r1, #0
 8002da2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002da4:	1c7b      	adds	r3, r7, #1
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d004      	beq.n	8002db6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dac:	1cbb      	adds	r3, r7, #2
 8002dae:	881a      	ldrh	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002db4:	e003      	b.n	8002dbe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002db6:	1cbb      	adds	r3, r7, #2
 8002db8:	881a      	ldrh	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dbe:	46c0      	nop			@ (mov r8, r8)
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b002      	add	sp, #8
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002dd0:	4b19      	ldr	r3, [pc, #100]	@ (8002e38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a19      	ldr	r2, [pc, #100]	@ (8002e3c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	0019      	movs	r1, r3
 8002dda:	4b17      	ldr	r3, [pc, #92]	@ (8002e38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	2380      	movs	r3, #128	@ 0x80
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d11f      	bne.n	8002e2c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002dec:	4b14      	ldr	r3, [pc, #80]	@ (8002e40 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	0013      	movs	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	189b      	adds	r3, r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4912      	ldr	r1, [pc, #72]	@ (8002e44 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f7fd f982 	bl	8000104 <__udivsi3>
 8002e00:	0003      	movs	r3, r0
 8002e02:	3301      	adds	r3, #1
 8002e04:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e06:	e008      	b.n	8002e1a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	e001      	b.n	8002e1a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e009      	b.n	8002e2e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e1a:	4b07      	ldr	r3, [pc, #28]	@ (8002e38 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	2380      	movs	r3, #128	@ 0x80
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	401a      	ands	r2, r3
 8002e24:	2380      	movs	r3, #128	@ 0x80
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d0ed      	beq.n	8002e08 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b004      	add	sp, #16
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	40007000 	.word	0x40007000
 8002e3c:	fffff9ff 	.word	0xfffff9ff
 8002e40:	20000000 	.word	0x20000000
 8002e44:	000f4240 	.word	0x000f4240

08002e48 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002e4c:	4b03      	ldr	r3, [pc, #12]	@ (8002e5c <LL_RCC_GetAPB1Prescaler+0x14>)
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	23e0      	movs	r3, #224	@ 0xe0
 8002e52:	01db      	lsls	r3, r3, #7
 8002e54:	4013      	ands	r3, r2
}
 8002e56:	0018      	movs	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000

08002e60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e2fe      	b.n	8003470 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2201      	movs	r2, #1
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d100      	bne.n	8002e7e <HAL_RCC_OscConfig+0x1e>
 8002e7c:	e07c      	b.n	8002f78 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e7e:	4bc3      	ldr	r3, [pc, #780]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2238      	movs	r2, #56	@ 0x38
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e88:	4bc0      	ldr	r3, [pc, #768]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	4013      	ands	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d102      	bne.n	8002e9e <HAL_RCC_OscConfig+0x3e>
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d002      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d10b      	bne.n	8002ebc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea4:	4bb9      	ldr	r3, [pc, #740]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	2380      	movs	r3, #128	@ 0x80
 8002eaa:	029b      	lsls	r3, r3, #10
 8002eac:	4013      	ands	r3, r2
 8002eae:	d062      	beq.n	8002f76 <HAL_RCC_OscConfig+0x116>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d15e      	bne.n	8002f76 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e2d9      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	2380      	movs	r3, #128	@ 0x80
 8002ec2:	025b      	lsls	r3, r3, #9
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d107      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x78>
 8002ec8:	4bb0      	ldr	r3, [pc, #704]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4baf      	ldr	r3, [pc, #700]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002ece:	2180      	movs	r1, #128	@ 0x80
 8002ed0:	0249      	lsls	r1, r1, #9
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	e020      	b.n	8002f1a <HAL_RCC_OscConfig+0xba>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	23a0      	movs	r3, #160	@ 0xa0
 8002ede:	02db      	lsls	r3, r3, #11
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d10e      	bne.n	8002f02 <HAL_RCC_OscConfig+0xa2>
 8002ee4:	4ba9      	ldr	r3, [pc, #676]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4ba8      	ldr	r3, [pc, #672]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002eea:	2180      	movs	r1, #128	@ 0x80
 8002eec:	02c9      	lsls	r1, r1, #11
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	4ba6      	ldr	r3, [pc, #664]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	4ba5      	ldr	r3, [pc, #660]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002ef8:	2180      	movs	r1, #128	@ 0x80
 8002efa:	0249      	lsls	r1, r1, #9
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e00b      	b.n	8002f1a <HAL_RCC_OscConfig+0xba>
 8002f02:	4ba2      	ldr	r3, [pc, #648]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4ba1      	ldr	r3, [pc, #644]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002f08:	49a1      	ldr	r1, [pc, #644]	@ (8003190 <HAL_RCC_OscConfig+0x330>)
 8002f0a:	400a      	ands	r2, r1
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	4b9f      	ldr	r3, [pc, #636]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b9e      	ldr	r3, [pc, #632]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002f14:	499f      	ldr	r1, [pc, #636]	@ (8003194 <HAL_RCC_OscConfig+0x334>)
 8002f16:	400a      	ands	r2, r1
 8002f18:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d014      	beq.n	8002f4c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f22:	f7fe f8c5 	bl	80010b0 <HAL_GetTick>
 8002f26:	0003      	movs	r3, r0
 8002f28:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7fe f8c0 	bl	80010b0 <HAL_GetTick>
 8002f30:	0002      	movs	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	@ 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e298      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f3e:	4b93      	ldr	r3, [pc, #588]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	2380      	movs	r3, #128	@ 0x80
 8002f44:	029b      	lsls	r3, r3, #10
 8002f46:	4013      	ands	r3, r2
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0xcc>
 8002f4a:	e015      	b.n	8002f78 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe f8b0 	bl	80010b0 <HAL_GetTick>
 8002f50:	0003      	movs	r3, r0
 8002f52:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f56:	f7fe f8ab 	bl	80010b0 <HAL_GetTick>
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b64      	cmp	r3, #100	@ 0x64
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e283      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f68:	4b88      	ldr	r3, [pc, #544]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	2380      	movs	r3, #128	@ 0x80
 8002f6e:	029b      	lsls	r3, r3, #10
 8002f70:	4013      	ands	r3, r2
 8002f72:	d1f0      	bne.n	8002f56 <HAL_RCC_OscConfig+0xf6>
 8002f74:	e000      	b.n	8002f78 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f76:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d100      	bne.n	8002f84 <HAL_RCC_OscConfig+0x124>
 8002f82:	e099      	b.n	80030b8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f84:	4b81      	ldr	r3, [pc, #516]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2238      	movs	r2, #56	@ 0x38
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f8e:	4b7f      	ldr	r3, [pc, #508]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2203      	movs	r2, #3
 8002f94:	4013      	ands	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b10      	cmp	r3, #16
 8002f9c:	d102      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x144>
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d002      	beq.n	8002faa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d135      	bne.n	8003016 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002faa:	4b78      	ldr	r3, [pc, #480]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	2380      	movs	r3, #128	@ 0x80
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d005      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x162>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e256      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc2:	4b72      	ldr	r3, [pc, #456]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4a74      	ldr	r2, [pc, #464]	@ (8003198 <HAL_RCC_OscConfig+0x338>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	0019      	movs	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	021a      	lsls	r2, r3, #8
 8002fd2:	4b6e      	ldr	r3, [pc, #440]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d112      	bne.n	8003004 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002fde:	4b6b      	ldr	r3, [pc, #428]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a6e      	ldr	r2, [pc, #440]	@ (800319c <HAL_RCC_OscConfig+0x33c>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	4b67      	ldr	r3, [pc, #412]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002ff2:	4b66      	ldr	r3, [pc, #408]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	0adb      	lsrs	r3, r3, #11
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	4a68      	ldr	r2, [pc, #416]	@ (80031a0 <HAL_RCC_OscConfig+0x340>)
 8002ffe:	40da      	lsrs	r2, r3
 8003000:	4b68      	ldr	r3, [pc, #416]	@ (80031a4 <HAL_RCC_OscConfig+0x344>)
 8003002:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003004:	4b68      	ldr	r3, [pc, #416]	@ (80031a8 <HAL_RCC_OscConfig+0x348>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	0018      	movs	r0, r3
 800300a:	f7fd fff5 	bl	8000ff8 <HAL_InitTick>
 800300e:	1e03      	subs	r3, r0, #0
 8003010:	d051      	beq.n	80030b6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e22c      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d030      	beq.n	8003080 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800301e:	4b5b      	ldr	r3, [pc, #364]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a5e      	ldr	r2, [pc, #376]	@ (800319c <HAL_RCC_OscConfig+0x33c>)
 8003024:	4013      	ands	r3, r2
 8003026:	0019      	movs	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	4b57      	ldr	r3, [pc, #348]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 800302e:	430a      	orrs	r2, r1
 8003030:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003032:	4b56      	ldr	r3, [pc, #344]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b55      	ldr	r3, [pc, #340]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8003038:	2180      	movs	r1, #128	@ 0x80
 800303a:	0049      	lsls	r1, r1, #1
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe f836 	bl	80010b0 <HAL_GetTick>
 8003044:	0003      	movs	r3, r0
 8003046:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800304a:	f7fe f831 	bl	80010b0 <HAL_GetTick>
 800304e:	0002      	movs	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e209      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800305c:	4b4b      	ldr	r3, [pc, #300]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	2380      	movs	r3, #128	@ 0x80
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4013      	ands	r3, r2
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003068:	4b48      	ldr	r3, [pc, #288]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4a4a      	ldr	r2, [pc, #296]	@ (8003198 <HAL_RCC_OscConfig+0x338>)
 800306e:	4013      	ands	r3, r2
 8003070:	0019      	movs	r1, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	021a      	lsls	r2, r3, #8
 8003078:	4b44      	ldr	r3, [pc, #272]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	e01b      	b.n	80030b8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003080:	4b42      	ldr	r3, [pc, #264]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b41      	ldr	r3, [pc, #260]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8003086:	4949      	ldr	r1, [pc, #292]	@ (80031ac <HAL_RCC_OscConfig+0x34c>)
 8003088:	400a      	ands	r2, r1
 800308a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7fe f810 	bl	80010b0 <HAL_GetTick>
 8003090:	0003      	movs	r3, r0
 8003092:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003096:	f7fe f80b 	bl	80010b0 <HAL_GetTick>
 800309a:	0002      	movs	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e1e3      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030a8:	4b38      	ldr	r3, [pc, #224]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	2380      	movs	r3, #128	@ 0x80
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4013      	ands	r3, r2
 80030b2:	d1f0      	bne.n	8003096 <HAL_RCC_OscConfig+0x236>
 80030b4:	e000      	b.n	80030b8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2208      	movs	r2, #8
 80030be:	4013      	ands	r3, r2
 80030c0:	d047      	beq.n	8003152 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80030c2:	4b32      	ldr	r3, [pc, #200]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2238      	movs	r2, #56	@ 0x38
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b18      	cmp	r3, #24
 80030cc:	d10a      	bne.n	80030e4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80030ce:	4b2f      	ldr	r3, [pc, #188]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 80030d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d2:	2202      	movs	r2, #2
 80030d4:	4013      	ands	r3, r2
 80030d6:	d03c      	beq.n	8003152 <HAL_RCC_OscConfig+0x2f2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d138      	bne.n	8003152 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e1c5      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d019      	beq.n	8003120 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80030ec:	4b27      	ldr	r3, [pc, #156]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 80030ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030f0:	4b26      	ldr	r3, [pc, #152]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 80030f2:	2101      	movs	r1, #1
 80030f4:	430a      	orrs	r2, r1
 80030f6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fd ffda 	bl	80010b0 <HAL_GetTick>
 80030fc:	0003      	movs	r3, r0
 80030fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003102:	f7fd ffd5 	bl	80010b0 <HAL_GetTick>
 8003106:	0002      	movs	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e1ad      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003114:	4b1d      	ldr	r3, [pc, #116]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8003116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003118:	2202      	movs	r2, #2
 800311a:	4013      	ands	r3, r2
 800311c:	d0f1      	beq.n	8003102 <HAL_RCC_OscConfig+0x2a2>
 800311e:	e018      	b.n	8003152 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003120:	4b1a      	ldr	r3, [pc, #104]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8003122:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003124:	4b19      	ldr	r3, [pc, #100]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8003126:	2101      	movs	r1, #1
 8003128:	438a      	bics	r2, r1
 800312a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7fd ffc0 	bl	80010b0 <HAL_GetTick>
 8003130:	0003      	movs	r3, r0
 8003132:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003136:	f7fd ffbb 	bl	80010b0 <HAL_GetTick>
 800313a:	0002      	movs	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e193      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003148:	4b10      	ldr	r3, [pc, #64]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 800314a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800314c:	2202      	movs	r2, #2
 800314e:	4013      	ands	r3, r2
 8003150:	d1f1      	bne.n	8003136 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2204      	movs	r2, #4
 8003158:	4013      	ands	r3, r2
 800315a:	d100      	bne.n	800315e <HAL_RCC_OscConfig+0x2fe>
 800315c:	e0c6      	b.n	80032ec <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800315e:	231f      	movs	r3, #31
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	2200      	movs	r2, #0
 8003164:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003166:	4b09      	ldr	r3, [pc, #36]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2238      	movs	r2, #56	@ 0x38
 800316c:	4013      	ands	r3, r2
 800316e:	2b20      	cmp	r3, #32
 8003170:	d11e      	bne.n	80031b0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003172:	4b06      	ldr	r3, [pc, #24]	@ (800318c <HAL_RCC_OscConfig+0x32c>)
 8003174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003176:	2202      	movs	r2, #2
 8003178:	4013      	ands	r3, r2
 800317a:	d100      	bne.n	800317e <HAL_RCC_OscConfig+0x31e>
 800317c:	e0b6      	b.n	80032ec <HAL_RCC_OscConfig+0x48c>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d000      	beq.n	8003188 <HAL_RCC_OscConfig+0x328>
 8003186:	e0b1      	b.n	80032ec <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e171      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
 800318c:	40021000 	.word	0x40021000
 8003190:	fffeffff 	.word	0xfffeffff
 8003194:	fffbffff 	.word	0xfffbffff
 8003198:	ffff80ff 	.word	0xffff80ff
 800319c:	ffffc7ff 	.word	0xffffc7ff
 80031a0:	00f42400 	.word	0x00f42400
 80031a4:	20000000 	.word	0x20000000
 80031a8:	20000004 	.word	0x20000004
 80031ac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031b0:	4bb1      	ldr	r3, [pc, #708]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 80031b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031b4:	2380      	movs	r3, #128	@ 0x80
 80031b6:	055b      	lsls	r3, r3, #21
 80031b8:	4013      	ands	r3, r2
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_OscConfig+0x360>
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <HAL_RCC_OscConfig+0x362>
 80031c0:	2300      	movs	r3, #0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d011      	beq.n	80031ea <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80031c6:	4bac      	ldr	r3, [pc, #688]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 80031c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031ca:	4bab      	ldr	r3, [pc, #684]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 80031cc:	2180      	movs	r1, #128	@ 0x80
 80031ce:	0549      	lsls	r1, r1, #21
 80031d0:	430a      	orrs	r2, r1
 80031d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80031d4:	4ba8      	ldr	r3, [pc, #672]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 80031d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031d8:	2380      	movs	r3, #128	@ 0x80
 80031da:	055b      	lsls	r3, r3, #21
 80031dc:	4013      	ands	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80031e2:	231f      	movs	r3, #31
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	2201      	movs	r2, #1
 80031e8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ea:	4ba4      	ldr	r3, [pc, #656]	@ (800347c <HAL_RCC_OscConfig+0x61c>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	2380      	movs	r3, #128	@ 0x80
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4013      	ands	r3, r2
 80031f4:	d11a      	bne.n	800322c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031f6:	4ba1      	ldr	r3, [pc, #644]	@ (800347c <HAL_RCC_OscConfig+0x61c>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4ba0      	ldr	r3, [pc, #640]	@ (800347c <HAL_RCC_OscConfig+0x61c>)
 80031fc:	2180      	movs	r1, #128	@ 0x80
 80031fe:	0049      	lsls	r1, r1, #1
 8003200:	430a      	orrs	r2, r1
 8003202:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003204:	f7fd ff54 	bl	80010b0 <HAL_GetTick>
 8003208:	0003      	movs	r3, r0
 800320a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320e:	f7fd ff4f 	bl	80010b0 <HAL_GetTick>
 8003212:	0002      	movs	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e127      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003220:	4b96      	ldr	r3, [pc, #600]	@ (800347c <HAL_RCC_OscConfig+0x61c>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	2380      	movs	r3, #128	@ 0x80
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	4013      	ands	r3, r2
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x3e2>
 8003234:	4b90      	ldr	r3, [pc, #576]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 8003236:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003238:	4b8f      	ldr	r3, [pc, #572]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 800323a:	2101      	movs	r1, #1
 800323c:	430a      	orrs	r2, r1
 800323e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003240:	e01c      	b.n	800327c <HAL_RCC_OscConfig+0x41c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b05      	cmp	r3, #5
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x404>
 800324a:	4b8b      	ldr	r3, [pc, #556]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 800324c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800324e:	4b8a      	ldr	r3, [pc, #552]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 8003250:	2104      	movs	r1, #4
 8003252:	430a      	orrs	r2, r1
 8003254:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003256:	4b88      	ldr	r3, [pc, #544]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 8003258:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800325a:	4b87      	ldr	r3, [pc, #540]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 800325c:	2101      	movs	r1, #1
 800325e:	430a      	orrs	r2, r1
 8003260:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003262:	e00b      	b.n	800327c <HAL_RCC_OscConfig+0x41c>
 8003264:	4b84      	ldr	r3, [pc, #528]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 8003266:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003268:	4b83      	ldr	r3, [pc, #524]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 800326a:	2101      	movs	r1, #1
 800326c:	438a      	bics	r2, r1
 800326e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003270:	4b81      	ldr	r3, [pc, #516]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 8003272:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003274:	4b80      	ldr	r3, [pc, #512]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 8003276:	2104      	movs	r1, #4
 8003278:	438a      	bics	r2, r1
 800327a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d014      	beq.n	80032ae <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7fd ff14 	bl	80010b0 <HAL_GetTick>
 8003288:	0003      	movs	r3, r0
 800328a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800328c:	e009      	b.n	80032a2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328e:	f7fd ff0f 	bl	80010b0 <HAL_GetTick>
 8003292:	0002      	movs	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	4a79      	ldr	r2, [pc, #484]	@ (8003480 <HAL_RCC_OscConfig+0x620>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e0e6      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a2:	4b75      	ldr	r3, [pc, #468]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 80032a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a6:	2202      	movs	r2, #2
 80032a8:	4013      	ands	r3, r2
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x42e>
 80032ac:	e013      	b.n	80032d6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ae:	f7fd feff 	bl	80010b0 <HAL_GetTick>
 80032b2:	0003      	movs	r3, r0
 80032b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032b6:	e009      	b.n	80032cc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b8:	f7fd fefa 	bl	80010b0 <HAL_GetTick>
 80032bc:	0002      	movs	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	4a6f      	ldr	r2, [pc, #444]	@ (8003480 <HAL_RCC_OscConfig+0x620>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e0d1      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 80032ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d0:	2202      	movs	r2, #2
 80032d2:	4013      	ands	r3, r2
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80032d6:	231f      	movs	r3, #31
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d105      	bne.n	80032ec <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80032e0:	4b65      	ldr	r3, [pc, #404]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 80032e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032e4:	4b64      	ldr	r3, [pc, #400]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 80032e6:	4967      	ldr	r1, [pc, #412]	@ (8003484 <HAL_RCC_OscConfig+0x624>)
 80032e8:	400a      	ands	r2, r1
 80032ea:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d100      	bne.n	80032f6 <HAL_RCC_OscConfig+0x496>
 80032f4:	e0bb      	b.n	800346e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032f6:	4b60      	ldr	r3, [pc, #384]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2238      	movs	r2, #56	@ 0x38
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b10      	cmp	r3, #16
 8003300:	d100      	bne.n	8003304 <HAL_RCC_OscConfig+0x4a4>
 8003302:	e07b      	b.n	80033fc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d156      	bne.n	80033ba <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330c:	4b5a      	ldr	r3, [pc, #360]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b59      	ldr	r3, [pc, #356]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 8003312:	495d      	ldr	r1, [pc, #372]	@ (8003488 <HAL_RCC_OscConfig+0x628>)
 8003314:	400a      	ands	r2, r1
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fd feca 	bl	80010b0 <HAL_GetTick>
 800331c:	0003      	movs	r3, r0
 800331e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003322:	f7fd fec5 	bl	80010b0 <HAL_GetTick>
 8003326:	0002      	movs	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e09d      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003334:	4b50      	ldr	r3, [pc, #320]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	049b      	lsls	r3, r3, #18
 800333c:	4013      	ands	r3, r2
 800333e:	d1f0      	bne.n	8003322 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003340:	4b4d      	ldr	r3, [pc, #308]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4a51      	ldr	r2, [pc, #324]	@ (800348c <HAL_RCC_OscConfig+0x62c>)
 8003346:	4013      	ands	r3, r2
 8003348:	0019      	movs	r1, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1a      	ldr	r2, [r3, #32]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003358:	021b      	lsls	r3, r3, #8
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336c:	431a      	orrs	r2, r3
 800336e:	4b42      	ldr	r3, [pc, #264]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 8003370:	430a      	orrs	r2, r1
 8003372:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003374:	4b40      	ldr	r3, [pc, #256]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4b3f      	ldr	r3, [pc, #252]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 800337a:	2180      	movs	r1, #128	@ 0x80
 800337c:	0449      	lsls	r1, r1, #17
 800337e:	430a      	orrs	r2, r1
 8003380:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003382:	4b3d      	ldr	r3, [pc, #244]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	4b3c      	ldr	r3, [pc, #240]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 8003388:	2180      	movs	r1, #128	@ 0x80
 800338a:	0549      	lsls	r1, r1, #21
 800338c:	430a      	orrs	r2, r1
 800338e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fd fe8e 	bl	80010b0 <HAL_GetTick>
 8003394:	0003      	movs	r3, r0
 8003396:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339a:	f7fd fe89 	bl	80010b0 <HAL_GetTick>
 800339e:	0002      	movs	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e061      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ac:	4b32      	ldr	r3, [pc, #200]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	2380      	movs	r3, #128	@ 0x80
 80033b2:	049b      	lsls	r3, r3, #18
 80033b4:	4013      	ands	r3, r2
 80033b6:	d0f0      	beq.n	800339a <HAL_RCC_OscConfig+0x53a>
 80033b8:	e059      	b.n	800346e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	4b2e      	ldr	r3, [pc, #184]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 80033c0:	4931      	ldr	r1, [pc, #196]	@ (8003488 <HAL_RCC_OscConfig+0x628>)
 80033c2:	400a      	ands	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fd fe73 	bl	80010b0 <HAL_GetTick>
 80033ca:	0003      	movs	r3, r0
 80033cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d0:	f7fd fe6e 	bl	80010b0 <HAL_GetTick>
 80033d4:	0002      	movs	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e046      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e2:	4b25      	ldr	r3, [pc, #148]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	2380      	movs	r3, #128	@ 0x80
 80033e8:	049b      	lsls	r3, r3, #18
 80033ea:	4013      	ands	r3, r2
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80033ee:	4b22      	ldr	r3, [pc, #136]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	4b21      	ldr	r3, [pc, #132]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 80033f4:	4926      	ldr	r1, [pc, #152]	@ (8003490 <HAL_RCC_OscConfig+0x630>)
 80033f6:	400a      	ands	r2, r1
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	e038      	b.n	800346e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e033      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003408:	4b1b      	ldr	r3, [pc, #108]	@ (8003478 <HAL_RCC_OscConfig+0x618>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2203      	movs	r2, #3
 8003412:	401a      	ands	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	429a      	cmp	r2, r3
 800341a:	d126      	bne.n	800346a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2270      	movs	r2, #112	@ 0x70
 8003420:	401a      	ands	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003426:	429a      	cmp	r2, r3
 8003428:	d11f      	bne.n	800346a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	23fe      	movs	r3, #254	@ 0xfe
 800342e:	01db      	lsls	r3, r3, #7
 8003430:	401a      	ands	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003436:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003438:	429a      	cmp	r2, r3
 800343a:	d116      	bne.n	800346a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	23f8      	movs	r3, #248	@ 0xf8
 8003440:	039b      	lsls	r3, r3, #14
 8003442:	401a      	ands	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003448:	429a      	cmp	r2, r3
 800344a:	d10e      	bne.n	800346a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	23e0      	movs	r3, #224	@ 0xe0
 8003450:	051b      	lsls	r3, r3, #20
 8003452:	401a      	ands	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003458:	429a      	cmp	r2, r3
 800345a:	d106      	bne.n	800346a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	0f5b      	lsrs	r3, r3, #29
 8003460:	075a      	lsls	r2, r3, #29
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003466:	429a      	cmp	r2, r3
 8003468:	d001      	beq.n	800346e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	0018      	movs	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	b008      	add	sp, #32
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40021000 	.word	0x40021000
 800347c:	40007000 	.word	0x40007000
 8003480:	00001388 	.word	0x00001388
 8003484:	efffffff 	.word	0xefffffff
 8003488:	feffffff 	.word	0xfeffffff
 800348c:	11c1808c 	.word	0x11c1808c
 8003490:	eefefffc 	.word	0xeefefffc

08003494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0e9      	b.n	800367c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034a8:	4b76      	ldr	r3, [pc, #472]	@ (8003684 <HAL_RCC_ClockConfig+0x1f0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2207      	movs	r2, #7
 80034ae:	4013      	ands	r3, r2
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d91e      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b73      	ldr	r3, [pc, #460]	@ (8003684 <HAL_RCC_ClockConfig+0x1f0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2207      	movs	r2, #7
 80034bc:	4393      	bics	r3, r2
 80034be:	0019      	movs	r1, r3
 80034c0:	4b70      	ldr	r3, [pc, #448]	@ (8003684 <HAL_RCC_ClockConfig+0x1f0>)
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034c8:	f7fd fdf2 	bl	80010b0 <HAL_GetTick>
 80034cc:	0003      	movs	r3, r0
 80034ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034d0:	e009      	b.n	80034e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d2:	f7fd fded 	bl	80010b0 <HAL_GetTick>
 80034d6:	0002      	movs	r2, r0
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	4a6a      	ldr	r2, [pc, #424]	@ (8003688 <HAL_RCC_ClockConfig+0x1f4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e0ca      	b.n	800367c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034e6:	4b67      	ldr	r3, [pc, #412]	@ (8003684 <HAL_RCC_ClockConfig+0x1f0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2207      	movs	r2, #7
 80034ec:	4013      	ands	r3, r2
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d1ee      	bne.n	80034d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2202      	movs	r2, #2
 80034fa:	4013      	ands	r3, r2
 80034fc:	d015      	beq.n	800352a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2204      	movs	r2, #4
 8003504:	4013      	ands	r3, r2
 8003506:	d006      	beq.n	8003516 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003508:	4b60      	ldr	r3, [pc, #384]	@ (800368c <HAL_RCC_ClockConfig+0x1f8>)
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	4b5f      	ldr	r3, [pc, #380]	@ (800368c <HAL_RCC_ClockConfig+0x1f8>)
 800350e:	21e0      	movs	r1, #224	@ 0xe0
 8003510:	01c9      	lsls	r1, r1, #7
 8003512:	430a      	orrs	r2, r1
 8003514:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003516:	4b5d      	ldr	r3, [pc, #372]	@ (800368c <HAL_RCC_ClockConfig+0x1f8>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	4a5d      	ldr	r2, [pc, #372]	@ (8003690 <HAL_RCC_ClockConfig+0x1fc>)
 800351c:	4013      	ands	r3, r2
 800351e:	0019      	movs	r1, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	4b59      	ldr	r3, [pc, #356]	@ (800368c <HAL_RCC_ClockConfig+0x1f8>)
 8003526:	430a      	orrs	r2, r1
 8003528:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2201      	movs	r2, #1
 8003530:	4013      	ands	r3, r2
 8003532:	d057      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d107      	bne.n	800354c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800353c:	4b53      	ldr	r3, [pc, #332]	@ (800368c <HAL_RCC_ClockConfig+0x1f8>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	2380      	movs	r3, #128	@ 0x80
 8003542:	029b      	lsls	r3, r3, #10
 8003544:	4013      	ands	r3, r2
 8003546:	d12b      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e097      	b.n	800367c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d107      	bne.n	8003564 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003554:	4b4d      	ldr	r3, [pc, #308]	@ (800368c <HAL_RCC_ClockConfig+0x1f8>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	2380      	movs	r3, #128	@ 0x80
 800355a:	049b      	lsls	r3, r3, #18
 800355c:	4013      	ands	r3, r2
 800355e:	d11f      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e08b      	b.n	800367c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d107      	bne.n	800357c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800356c:	4b47      	ldr	r3, [pc, #284]	@ (800368c <HAL_RCC_ClockConfig+0x1f8>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	2380      	movs	r3, #128	@ 0x80
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4013      	ands	r3, r2
 8003576:	d113      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e07f      	b.n	800367c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d106      	bne.n	8003592 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003584:	4b41      	ldr	r3, [pc, #260]	@ (800368c <HAL_RCC_ClockConfig+0x1f8>)
 8003586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003588:	2202      	movs	r2, #2
 800358a:	4013      	ands	r3, r2
 800358c:	d108      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e074      	b.n	800367c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003592:	4b3e      	ldr	r3, [pc, #248]	@ (800368c <HAL_RCC_ClockConfig+0x1f8>)
 8003594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003596:	2202      	movs	r2, #2
 8003598:	4013      	ands	r3, r2
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e06d      	b.n	800367c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035a0:	4b3a      	ldr	r3, [pc, #232]	@ (800368c <HAL_RCC_ClockConfig+0x1f8>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2207      	movs	r2, #7
 80035a6:	4393      	bics	r3, r2
 80035a8:	0019      	movs	r1, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	4b37      	ldr	r3, [pc, #220]	@ (800368c <HAL_RCC_ClockConfig+0x1f8>)
 80035b0:	430a      	orrs	r2, r1
 80035b2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b4:	f7fd fd7c 	bl	80010b0 <HAL_GetTick>
 80035b8:	0003      	movs	r3, r0
 80035ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035bc:	e009      	b.n	80035d2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035be:	f7fd fd77 	bl	80010b0 <HAL_GetTick>
 80035c2:	0002      	movs	r2, r0
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003688 <HAL_RCC_ClockConfig+0x1f4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e054      	b.n	800367c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b2e      	ldr	r3, [pc, #184]	@ (800368c <HAL_RCC_ClockConfig+0x1f8>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2238      	movs	r2, #56	@ 0x38
 80035d8:	401a      	ands	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1ec      	bne.n	80035be <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035e4:	4b27      	ldr	r3, [pc, #156]	@ (8003684 <HAL_RCC_ClockConfig+0x1f0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2207      	movs	r2, #7
 80035ea:	4013      	ands	r3, r2
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d21e      	bcs.n	8003630 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b24      	ldr	r3, [pc, #144]	@ (8003684 <HAL_RCC_ClockConfig+0x1f0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2207      	movs	r2, #7
 80035f8:	4393      	bics	r3, r2
 80035fa:	0019      	movs	r1, r3
 80035fc:	4b21      	ldr	r3, [pc, #132]	@ (8003684 <HAL_RCC_ClockConfig+0x1f0>)
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003604:	f7fd fd54 	bl	80010b0 <HAL_GetTick>
 8003608:	0003      	movs	r3, r0
 800360a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800360c:	e009      	b.n	8003622 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360e:	f7fd fd4f 	bl	80010b0 <HAL_GetTick>
 8003612:	0002      	movs	r2, r0
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	4a1b      	ldr	r2, [pc, #108]	@ (8003688 <HAL_RCC_ClockConfig+0x1f4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e02c      	b.n	800367c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003622:	4b18      	ldr	r3, [pc, #96]	@ (8003684 <HAL_RCC_ClockConfig+0x1f0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2207      	movs	r2, #7
 8003628:	4013      	ands	r3, r2
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d1ee      	bne.n	800360e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2204      	movs	r2, #4
 8003636:	4013      	ands	r3, r2
 8003638:	d009      	beq.n	800364e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800363a:	4b14      	ldr	r3, [pc, #80]	@ (800368c <HAL_RCC_ClockConfig+0x1f8>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	4a15      	ldr	r2, [pc, #84]	@ (8003694 <HAL_RCC_ClockConfig+0x200>)
 8003640:	4013      	ands	r3, r2
 8003642:	0019      	movs	r1, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	4b10      	ldr	r3, [pc, #64]	@ (800368c <HAL_RCC_ClockConfig+0x1f8>)
 800364a:	430a      	orrs	r2, r1
 800364c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800364e:	f000 f829 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8003652:	0001      	movs	r1, r0
 8003654:	4b0d      	ldr	r3, [pc, #52]	@ (800368c <HAL_RCC_ClockConfig+0x1f8>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	0a1b      	lsrs	r3, r3, #8
 800365a:	220f      	movs	r2, #15
 800365c:	401a      	ands	r2, r3
 800365e:	4b0e      	ldr	r3, [pc, #56]	@ (8003698 <HAL_RCC_ClockConfig+0x204>)
 8003660:	0092      	lsls	r2, r2, #2
 8003662:	58d3      	ldr	r3, [r2, r3]
 8003664:	221f      	movs	r2, #31
 8003666:	4013      	ands	r3, r2
 8003668:	000a      	movs	r2, r1
 800366a:	40da      	lsrs	r2, r3
 800366c:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <HAL_RCC_ClockConfig+0x208>)
 800366e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003670:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <HAL_RCC_ClockConfig+0x20c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	0018      	movs	r0, r3
 8003676:	f7fd fcbf 	bl	8000ff8 <HAL_InitTick>
 800367a:	0003      	movs	r3, r0
}
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	b004      	add	sp, #16
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40022000 	.word	0x40022000
 8003688:	00001388 	.word	0x00001388
 800368c:	40021000 	.word	0x40021000
 8003690:	fffff0ff 	.word	0xfffff0ff
 8003694:	ffff8fff 	.word	0xffff8fff
 8003698:	08004a04 	.word	0x08004a04
 800369c:	20000000 	.word	0x20000000
 80036a0:	20000004 	.word	0x20000004

080036a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036aa:	4b3c      	ldr	r3, [pc, #240]	@ (800379c <HAL_RCC_GetSysClockFreq+0xf8>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2238      	movs	r2, #56	@ 0x38
 80036b0:	4013      	ands	r3, r2
 80036b2:	d10f      	bne.n	80036d4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80036b4:	4b39      	ldr	r3, [pc, #228]	@ (800379c <HAL_RCC_GetSysClockFreq+0xf8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	0adb      	lsrs	r3, r3, #11
 80036ba:	2207      	movs	r2, #7
 80036bc:	4013      	ands	r3, r2
 80036be:	2201      	movs	r2, #1
 80036c0:	409a      	lsls	r2, r3
 80036c2:	0013      	movs	r3, r2
 80036c4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80036c6:	6839      	ldr	r1, [r7, #0]
 80036c8:	4835      	ldr	r0, [pc, #212]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80036ca:	f7fc fd1b 	bl	8000104 <__udivsi3>
 80036ce:	0003      	movs	r3, r0
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	e05d      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036d4:	4b31      	ldr	r3, [pc, #196]	@ (800379c <HAL_RCC_GetSysClockFreq+0xf8>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2238      	movs	r2, #56	@ 0x38
 80036da:	4013      	ands	r3, r2
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d102      	bne.n	80036e6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036e0:	4b30      	ldr	r3, [pc, #192]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x100>)
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	e054      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e6:	4b2d      	ldr	r3, [pc, #180]	@ (800379c <HAL_RCC_GetSysClockFreq+0xf8>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2238      	movs	r2, #56	@ 0x38
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b10      	cmp	r3, #16
 80036f0:	d138      	bne.n	8003764 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80036f2:	4b2a      	ldr	r3, [pc, #168]	@ (800379c <HAL_RCC_GetSysClockFreq+0xf8>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2203      	movs	r2, #3
 80036f8:	4013      	ands	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036fc:	4b27      	ldr	r3, [pc, #156]	@ (800379c <HAL_RCC_GetSysClockFreq+0xf8>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	2207      	movs	r2, #7
 8003704:	4013      	ands	r3, r2
 8003706:	3301      	adds	r3, #1
 8003708:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d10d      	bne.n	800372c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	4824      	ldr	r0, [pc, #144]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003714:	f7fc fcf6 	bl	8000104 <__udivsi3>
 8003718:	0003      	movs	r3, r0
 800371a:	0019      	movs	r1, r3
 800371c:	4b1f      	ldr	r3, [pc, #124]	@ (800379c <HAL_RCC_GetSysClockFreq+0xf8>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	0a1b      	lsrs	r3, r3, #8
 8003722:	227f      	movs	r2, #127	@ 0x7f
 8003724:	4013      	ands	r3, r2
 8003726:	434b      	muls	r3, r1
 8003728:	617b      	str	r3, [r7, #20]
        break;
 800372a:	e00d      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	481c      	ldr	r0, [pc, #112]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003730:	f7fc fce8 	bl	8000104 <__udivsi3>
 8003734:	0003      	movs	r3, r0
 8003736:	0019      	movs	r1, r3
 8003738:	4b18      	ldr	r3, [pc, #96]	@ (800379c <HAL_RCC_GetSysClockFreq+0xf8>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	227f      	movs	r2, #127	@ 0x7f
 8003740:	4013      	ands	r3, r2
 8003742:	434b      	muls	r3, r1
 8003744:	617b      	str	r3, [r7, #20]
        break;
 8003746:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003748:	4b14      	ldr	r3, [pc, #80]	@ (800379c <HAL_RCC_GetSysClockFreq+0xf8>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	0f5b      	lsrs	r3, r3, #29
 800374e:	2207      	movs	r2, #7
 8003750:	4013      	ands	r3, r2
 8003752:	3301      	adds	r3, #1
 8003754:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	6978      	ldr	r0, [r7, #20]
 800375a:	f7fc fcd3 	bl	8000104 <__udivsi3>
 800375e:	0003      	movs	r3, r0
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	e015      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003764:	4b0d      	ldr	r3, [pc, #52]	@ (800379c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2238      	movs	r2, #56	@ 0x38
 800376a:	4013      	ands	r3, r2
 800376c:	2b20      	cmp	r3, #32
 800376e:	d103      	bne.n	8003778 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003770:	2380      	movs	r3, #128	@ 0x80
 8003772:	021b      	lsls	r3, r3, #8
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	e00b      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003778:	4b08      	ldr	r3, [pc, #32]	@ (800379c <HAL_RCC_GetSysClockFreq+0xf8>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2238      	movs	r2, #56	@ 0x38
 800377e:	4013      	ands	r3, r2
 8003780:	2b18      	cmp	r3, #24
 8003782:	d103      	bne.n	800378c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003784:	23fa      	movs	r3, #250	@ 0xfa
 8003786:	01db      	lsls	r3, r3, #7
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	e001      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003790:	693b      	ldr	r3, [r7, #16]
}
 8003792:	0018      	movs	r0, r3
 8003794:	46bd      	mov	sp, r7
 8003796:	b006      	add	sp, #24
 8003798:	bd80      	pop	{r7, pc}
 800379a:	46c0      	nop			@ (mov r8, r8)
 800379c:	40021000 	.word	0x40021000
 80037a0:	00f42400 	.word	0x00f42400
 80037a4:	007a1200 	.word	0x007a1200

080037a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037ac:	4b02      	ldr	r3, [pc, #8]	@ (80037b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80037ae:	681b      	ldr	r3, [r3, #0]
}
 80037b0:	0018      	movs	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	20000000 	.word	0x20000000

080037bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037bc:	b5b0      	push	{r4, r5, r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80037c0:	f7ff fff2 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037c4:	0004      	movs	r4, r0
 80037c6:	f7ff fb3f 	bl	8002e48 <LL_RCC_GetAPB1Prescaler>
 80037ca:	0003      	movs	r3, r0
 80037cc:	0b1a      	lsrs	r2, r3, #12
 80037ce:	4b05      	ldr	r3, [pc, #20]	@ (80037e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037d0:	0092      	lsls	r2, r2, #2
 80037d2:	58d3      	ldr	r3, [r2, r3]
 80037d4:	221f      	movs	r2, #31
 80037d6:	4013      	ands	r3, r2
 80037d8:	40dc      	lsrs	r4, r3
 80037da:	0023      	movs	r3, r4
}
 80037dc:	0018      	movs	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	bdb0      	pop	{r4, r5, r7, pc}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	08004a44 	.word	0x08004a44

080037e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80037f0:	2313      	movs	r3, #19
 80037f2:	18fb      	adds	r3, r7, r3
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037f8:	2312      	movs	r3, #18
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	2380      	movs	r3, #128	@ 0x80
 8003806:	029b      	lsls	r3, r3, #10
 8003808:	4013      	ands	r3, r2
 800380a:	d100      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800380c:	e0a3      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800380e:	2011      	movs	r0, #17
 8003810:	183b      	adds	r3, r7, r0
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003816:	4bc3      	ldr	r3, [pc, #780]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003818:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800381a:	2380      	movs	r3, #128	@ 0x80
 800381c:	055b      	lsls	r3, r3, #21
 800381e:	4013      	ands	r3, r2
 8003820:	d110      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003822:	4bc0      	ldr	r3, [pc, #768]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003824:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003826:	4bbf      	ldr	r3, [pc, #764]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003828:	2180      	movs	r1, #128	@ 0x80
 800382a:	0549      	lsls	r1, r1, #21
 800382c:	430a      	orrs	r2, r1
 800382e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003830:	4bbc      	ldr	r3, [pc, #752]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003832:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003834:	2380      	movs	r3, #128	@ 0x80
 8003836:	055b      	lsls	r3, r3, #21
 8003838:	4013      	ands	r3, r2
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800383e:	183b      	adds	r3, r7, r0
 8003840:	2201      	movs	r2, #1
 8003842:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003844:	4bb8      	ldr	r3, [pc, #736]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	4bb7      	ldr	r3, [pc, #732]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800384a:	2180      	movs	r1, #128	@ 0x80
 800384c:	0049      	lsls	r1, r1, #1
 800384e:	430a      	orrs	r2, r1
 8003850:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003852:	f7fd fc2d 	bl	80010b0 <HAL_GetTick>
 8003856:	0003      	movs	r3, r0
 8003858:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800385a:	e00b      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385c:	f7fd fc28 	bl	80010b0 <HAL_GetTick>
 8003860:	0002      	movs	r2, r0
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d904      	bls.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800386a:	2313      	movs	r3, #19
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	2203      	movs	r2, #3
 8003870:	701a      	strb	r2, [r3, #0]
        break;
 8003872:	e005      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003874:	4bac      	ldr	r3, [pc, #688]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	2380      	movs	r3, #128	@ 0x80
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	4013      	ands	r3, r2
 800387e:	d0ed      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003880:	2313      	movs	r3, #19
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d154      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800388a:	4ba6      	ldr	r3, [pc, #664]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800388c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800388e:	23c0      	movs	r3, #192	@ 0xc0
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4013      	ands	r3, r2
 8003894:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d019      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d014      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038a6:	4b9f      	ldr	r3, [pc, #636]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038aa:	4aa0      	ldr	r2, [pc, #640]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038b0:	4b9c      	ldr	r3, [pc, #624]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038b4:	4b9b      	ldr	r3, [pc, #620]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038b6:	2180      	movs	r1, #128	@ 0x80
 80038b8:	0249      	lsls	r1, r1, #9
 80038ba:	430a      	orrs	r2, r1
 80038bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038be:	4b99      	ldr	r3, [pc, #612]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038c2:	4b98      	ldr	r3, [pc, #608]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038c4:	499a      	ldr	r1, [pc, #616]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80038c6:	400a      	ands	r2, r1
 80038c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038ca:	4b96      	ldr	r3, [pc, #600]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2201      	movs	r2, #1
 80038d4:	4013      	ands	r3, r2
 80038d6:	d016      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fd fbea 	bl	80010b0 <HAL_GetTick>
 80038dc:	0003      	movs	r3, r0
 80038de:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e0:	e00c      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e2:	f7fd fbe5 	bl	80010b0 <HAL_GetTick>
 80038e6:	0002      	movs	r2, r0
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	4a91      	ldr	r2, [pc, #580]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d904      	bls.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80038f2:	2313      	movs	r3, #19
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	2203      	movs	r2, #3
 80038f8:	701a      	strb	r2, [r3, #0]
            break;
 80038fa:	e004      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038fc:	4b89      	ldr	r3, [pc, #548]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003900:	2202      	movs	r2, #2
 8003902:	4013      	ands	r3, r2
 8003904:	d0ed      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003906:	2313      	movs	r3, #19
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003910:	4b84      	ldr	r3, [pc, #528]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003914:	4a85      	ldr	r2, [pc, #532]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003916:	4013      	ands	r3, r2
 8003918:	0019      	movs	r1, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800391e:	4b81      	ldr	r3, [pc, #516]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003920:	430a      	orrs	r2, r1
 8003922:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003924:	e00c      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003926:	2312      	movs	r3, #18
 8003928:	18fb      	adds	r3, r7, r3
 800392a:	2213      	movs	r2, #19
 800392c:	18ba      	adds	r2, r7, r2
 800392e:	7812      	ldrb	r2, [r2, #0]
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	e005      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003934:	2312      	movs	r3, #18
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	2213      	movs	r2, #19
 800393a:	18ba      	adds	r2, r7, r2
 800393c:	7812      	ldrb	r2, [r2, #0]
 800393e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003940:	2311      	movs	r3, #17
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d105      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800394a:	4b76      	ldr	r3, [pc, #472]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800394c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800394e:	4b75      	ldr	r3, [pc, #468]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003950:	4979      	ldr	r1, [pc, #484]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003952:	400a      	ands	r2, r1
 8003954:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2201      	movs	r2, #1
 800395c:	4013      	ands	r3, r2
 800395e:	d009      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003960:	4b70      	ldr	r3, [pc, #448]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003964:	2203      	movs	r2, #3
 8003966:	4393      	bics	r3, r2
 8003968:	0019      	movs	r1, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	4b6d      	ldr	r3, [pc, #436]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003970:	430a      	orrs	r2, r1
 8003972:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2202      	movs	r2, #2
 800397a:	4013      	ands	r3, r2
 800397c:	d009      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800397e:	4b69      	ldr	r3, [pc, #420]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003982:	220c      	movs	r2, #12
 8003984:	4393      	bics	r3, r2
 8003986:	0019      	movs	r1, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	4b65      	ldr	r3, [pc, #404]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800398e:	430a      	orrs	r2, r1
 8003990:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2210      	movs	r2, #16
 8003998:	4013      	ands	r3, r2
 800399a:	d009      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800399c:	4b61      	ldr	r3, [pc, #388]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800399e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a0:	4a66      	ldr	r2, [pc, #408]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	0019      	movs	r1, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	4b5e      	ldr	r3, [pc, #376]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039ac:	430a      	orrs	r2, r1
 80039ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	2380      	movs	r3, #128	@ 0x80
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4013      	ands	r3, r2
 80039ba:	d009      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039bc:	4b59      	ldr	r3, [pc, #356]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c0:	4a5f      	ldr	r2, [pc, #380]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	0019      	movs	r1, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	4b56      	ldr	r3, [pc, #344]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039cc:	430a      	orrs	r2, r1
 80039ce:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	2380      	movs	r3, #128	@ 0x80
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4013      	ands	r3, r2
 80039da:	d009      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039dc:	4b51      	ldr	r3, [pc, #324]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e0:	4a58      	ldr	r2, [pc, #352]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	0019      	movs	r1, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69da      	ldr	r2, [r3, #28]
 80039ea:	4b4e      	ldr	r3, [pc, #312]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039ec:	430a      	orrs	r2, r1
 80039ee:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2220      	movs	r2, #32
 80039f6:	4013      	ands	r3, r2
 80039f8:	d009      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fe:	4a52      	ldr	r2, [pc, #328]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	0019      	movs	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	4b46      	ldr	r3, [pc, #280]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	2380      	movs	r3, #128	@ 0x80
 8003a14:	01db      	lsls	r3, r3, #7
 8003a16:	4013      	ands	r3, r2
 8003a18:	d015      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a1a:	4b42      	ldr	r3, [pc, #264]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	0899      	lsrs	r1, r3, #2
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1a      	ldr	r2, [r3, #32]
 8003a26:	4b3f      	ldr	r3, [pc, #252]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1a      	ldr	r2, [r3, #32]
 8003a30:	2380      	movs	r3, #128	@ 0x80
 8003a32:	05db      	lsls	r3, r3, #23
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d106      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a38:	4b3a      	ldr	r3, [pc, #232]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	4b39      	ldr	r3, [pc, #228]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a3e:	2180      	movs	r1, #128	@ 0x80
 8003a40:	0249      	lsls	r1, r1, #9
 8003a42:	430a      	orrs	r2, r1
 8003a44:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	2380      	movs	r3, #128	@ 0x80
 8003a4c:	031b      	lsls	r3, r3, #12
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d009      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a52:	4b34      	ldr	r3, [pc, #208]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a56:	2240      	movs	r2, #64	@ 0x40
 8003a58:	4393      	bics	r3, r2
 8003a5a:	0019      	movs	r1, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a60:	4b30      	ldr	r3, [pc, #192]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a62:	430a      	orrs	r2, r1
 8003a64:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	2380      	movs	r3, #128	@ 0x80
 8003a6c:	039b      	lsls	r3, r3, #14
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d016      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a72:	4b2c      	ldr	r3, [pc, #176]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a76:	4a35      	ldr	r2, [pc, #212]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a80:	4b28      	ldr	r3, [pc, #160]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a82:	430a      	orrs	r2, r1
 8003a84:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a8a:	2380      	movs	r3, #128	@ 0x80
 8003a8c:	03db      	lsls	r3, r3, #15
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d106      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003a92:	4b24      	ldr	r3, [pc, #144]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	4b23      	ldr	r3, [pc, #140]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a98:	2180      	movs	r1, #128	@ 0x80
 8003a9a:	0449      	lsls	r1, r1, #17
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	2380      	movs	r3, #128	@ 0x80
 8003aa6:	03db      	lsls	r3, r3, #15
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d016      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003aac:	4b1d      	ldr	r3, [pc, #116]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab0:	4a27      	ldr	r2, [pc, #156]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aba:	4b1a      	ldr	r3, [pc, #104]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003abc:	430a      	orrs	r2, r1
 8003abe:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac4:	2380      	movs	r3, #128	@ 0x80
 8003ac6:	045b      	lsls	r3, r3, #17
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d106      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003acc:	4b15      	ldr	r3, [pc, #84]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	4b14      	ldr	r3, [pc, #80]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ad2:	2180      	movs	r1, #128	@ 0x80
 8003ad4:	0449      	lsls	r1, r1, #17
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	2380      	movs	r3, #128	@ 0x80
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d016      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aea:	4a1a      	ldr	r2, [pc, #104]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	0019      	movs	r1, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003af6:	430a      	orrs	r2, r1
 8003af8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	2380      	movs	r3, #128	@ 0x80
 8003b00:	01db      	lsls	r3, r3, #7
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d106      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b06:	4b07      	ldr	r3, [pc, #28]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	4b06      	ldr	r3, [pc, #24]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b0c:	2180      	movs	r1, #128	@ 0x80
 8003b0e:	0249      	lsls	r1, r1, #9
 8003b10:	430a      	orrs	r2, r1
 8003b12:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003b14:	2312      	movs	r3, #18
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	781b      	ldrb	r3, [r3, #0]
}
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	b006      	add	sp, #24
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	46c0      	nop			@ (mov r8, r8)
 8003b24:	40021000 	.word	0x40021000
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	fffffcff 	.word	0xfffffcff
 8003b30:	fffeffff 	.word	0xfffeffff
 8003b34:	00001388 	.word	0x00001388
 8003b38:	efffffff 	.word	0xefffffff
 8003b3c:	fffff3ff 	.word	0xfffff3ff
 8003b40:	fff3ffff 	.word	0xfff3ffff
 8003b44:	ffcfffff 	.word	0xffcfffff
 8003b48:	ffffcfff 	.word	0xffffcfff
 8003b4c:	ffbfffff 	.word	0xffbfffff
 8003b50:	feffffff 	.word	0xfeffffff
 8003b54:	ffff3fff 	.word	0xffff3fff

08003b58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e046      	b.n	8003bf8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2288      	movs	r2, #136	@ 0x88
 8003b6e:	589b      	ldr	r3, [r3, r2]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d107      	bne.n	8003b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2284      	movs	r2, #132	@ 0x84
 8003b78:	2100      	movs	r1, #0
 8003b7a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7fd f958 	bl	8000e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2288      	movs	r2, #136	@ 0x88
 8003b88:	2124      	movs	r1, #36	@ 0x24
 8003b8a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2101      	movs	r1, #1
 8003b98:	438a      	bics	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f000 fb8e 	bl	80042c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f000 f8cc 	bl	8003d4c <UART_SetConfig>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e01c      	b.n	8003bf8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	490d      	ldr	r1, [pc, #52]	@ (8003c00 <HAL_UART_Init+0xa8>)
 8003bca:	400a      	ands	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	212a      	movs	r1, #42	@ 0x2a
 8003bda:	438a      	bics	r2, r1
 8003bdc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2101      	movs	r1, #1
 8003bea:	430a      	orrs	r2, r1
 8003bec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f000 fc1d 	bl	8004430 <UART_CheckIdleState>
 8003bf6:	0003      	movs	r3, r0
}
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b002      	add	sp, #8
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	ffffb7ff 	.word	0xffffb7ff

08003c04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	@ 0x28
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	1dbb      	adds	r3, r7, #6
 8003c12:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2288      	movs	r2, #136	@ 0x88
 8003c18:	589b      	ldr	r3, [r3, r2]
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d000      	beq.n	8003c20 <HAL_UART_Transmit+0x1c>
 8003c1e:	e090      	b.n	8003d42 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_UART_Transmit+0x2a>
 8003c26:	1dbb      	adds	r3, r7, #6
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e088      	b.n	8003d44 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	2380      	movs	r3, #128	@ 0x80
 8003c38:	015b      	lsls	r3, r3, #5
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d109      	bne.n	8003c52 <HAL_UART_Transmit+0x4e>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d105      	bne.n	8003c52 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d001      	beq.n	8003c52 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e078      	b.n	8003d44 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2290      	movs	r2, #144	@ 0x90
 8003c56:	2100      	movs	r1, #0
 8003c58:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2288      	movs	r2, #136	@ 0x88
 8003c5e:	2121      	movs	r1, #33	@ 0x21
 8003c60:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c62:	f7fd fa25 	bl	80010b0 <HAL_GetTick>
 8003c66:	0003      	movs	r3, r0
 8003c68:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1dba      	adds	r2, r7, #6
 8003c6e:	2154      	movs	r1, #84	@ 0x54
 8003c70:	8812      	ldrh	r2, [r2, #0]
 8003c72:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	1dba      	adds	r2, r7, #6
 8003c78:	2156      	movs	r1, #86	@ 0x56
 8003c7a:	8812      	ldrh	r2, [r2, #0]
 8003c7c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	2380      	movs	r3, #128	@ 0x80
 8003c84:	015b      	lsls	r3, r3, #5
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d108      	bne.n	8003c9c <HAL_UART_Transmit+0x98>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d104      	bne.n	8003c9c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	e003      	b.n	8003ca4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ca4:	e030      	b.n	8003d08 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	0013      	movs	r3, r2
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2180      	movs	r1, #128	@ 0x80
 8003cb4:	f000 fc66 	bl	8004584 <UART_WaitOnFlagUntilTimeout>
 8003cb8:	1e03      	subs	r3, r0, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2288      	movs	r2, #136	@ 0x88
 8003cc0:	2120      	movs	r1, #32
 8003cc2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e03d      	b.n	8003d44 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10b      	bne.n	8003ce6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	001a      	movs	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	05d2      	lsls	r2, r2, #23
 8003cda:	0dd2      	lsrs	r2, r2, #23
 8003cdc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	61bb      	str	r3, [r7, #24]
 8003ce4:	e007      	b.n	8003cf6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	781a      	ldrb	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2256      	movs	r2, #86	@ 0x56
 8003cfa:	5a9b      	ldrh	r3, [r3, r2]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b299      	uxth	r1, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2256      	movs	r2, #86	@ 0x56
 8003d06:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2256      	movs	r2, #86	@ 0x56
 8003d0c:	5a9b      	ldrh	r3, [r3, r2]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1c8      	bne.n	8003ca6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	0013      	movs	r3, r2
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2140      	movs	r1, #64	@ 0x40
 8003d22:	f000 fc2f 	bl	8004584 <UART_WaitOnFlagUntilTimeout>
 8003d26:	1e03      	subs	r3, r0, #0
 8003d28:	d005      	beq.n	8003d36 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2288      	movs	r2, #136	@ 0x88
 8003d2e:	2120      	movs	r1, #32
 8003d30:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e006      	b.n	8003d44 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2288      	movs	r2, #136	@ 0x88
 8003d3a:	2120      	movs	r1, #32
 8003d3c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e000      	b.n	8003d44 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003d42:	2302      	movs	r3, #2
  }
}
 8003d44:	0018      	movs	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b008      	add	sp, #32
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d4c:	b5b0      	push	{r4, r5, r7, lr}
 8003d4e:	b090      	sub	sp, #64	@ 0x40
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d54:	231a      	movs	r3, #26
 8003d56:	2220      	movs	r2, #32
 8003d58:	189b      	adds	r3, r3, r2
 8003d5a:	19db      	adds	r3, r3, r7
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4aaf      	ldr	r2, [pc, #700]	@ (800403c <UART_SetConfig+0x2f0>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	0019      	movs	r1, r3
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	4aaa      	ldr	r2, [pc, #680]	@ (8004040 <UART_SetConfig+0x2f4>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	0018      	movs	r0, r3
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	68d9      	ldr	r1, [r3, #12]
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	0003      	movs	r3, r0
 8003da4:	430b      	orrs	r3, r1
 8003da6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4aa4      	ldr	r2, [pc, #656]	@ (8004044 <UART_SetConfig+0x2f8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d004      	beq.n	8003dc2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4a9f      	ldr	r2, [pc, #636]	@ (8004048 <UART_SetConfig+0x2fc>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	0019      	movs	r1, r3
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dde:	220f      	movs	r2, #15
 8003de0:	4393      	bics	r3, r2
 8003de2:	0018      	movs	r0, r3
 8003de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	0003      	movs	r3, r0
 8003dee:	430b      	orrs	r3, r1
 8003df0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a95      	ldr	r2, [pc, #596]	@ (800404c <UART_SetConfig+0x300>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d131      	bne.n	8003e60 <UART_SetConfig+0x114>
 8003dfc:	4b94      	ldr	r3, [pc, #592]	@ (8004050 <UART_SetConfig+0x304>)
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e00:	2203      	movs	r2, #3
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d01d      	beq.n	8003e44 <UART_SetConfig+0xf8>
 8003e08:	d823      	bhi.n	8003e52 <UART_SetConfig+0x106>
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d00c      	beq.n	8003e28 <UART_SetConfig+0xdc>
 8003e0e:	d820      	bhi.n	8003e52 <UART_SetConfig+0x106>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <UART_SetConfig+0xce>
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d00e      	beq.n	8003e36 <UART_SetConfig+0xea>
 8003e18:	e01b      	b.n	8003e52 <UART_SetConfig+0x106>
 8003e1a:	231b      	movs	r3, #27
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	189b      	adds	r3, r3, r2
 8003e20:	19db      	adds	r3, r3, r7
 8003e22:	2200      	movs	r2, #0
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	e0b4      	b.n	8003f92 <UART_SetConfig+0x246>
 8003e28:	231b      	movs	r3, #27
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	189b      	adds	r3, r3, r2
 8003e2e:	19db      	adds	r3, r3, r7
 8003e30:	2202      	movs	r2, #2
 8003e32:	701a      	strb	r2, [r3, #0]
 8003e34:	e0ad      	b.n	8003f92 <UART_SetConfig+0x246>
 8003e36:	231b      	movs	r3, #27
 8003e38:	2220      	movs	r2, #32
 8003e3a:	189b      	adds	r3, r3, r2
 8003e3c:	19db      	adds	r3, r3, r7
 8003e3e:	2204      	movs	r2, #4
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	e0a6      	b.n	8003f92 <UART_SetConfig+0x246>
 8003e44:	231b      	movs	r3, #27
 8003e46:	2220      	movs	r2, #32
 8003e48:	189b      	adds	r3, r3, r2
 8003e4a:	19db      	adds	r3, r3, r7
 8003e4c:	2208      	movs	r2, #8
 8003e4e:	701a      	strb	r2, [r3, #0]
 8003e50:	e09f      	b.n	8003f92 <UART_SetConfig+0x246>
 8003e52:	231b      	movs	r3, #27
 8003e54:	2220      	movs	r2, #32
 8003e56:	189b      	adds	r3, r3, r2
 8003e58:	19db      	adds	r3, r3, r7
 8003e5a:	2210      	movs	r2, #16
 8003e5c:	701a      	strb	r2, [r3, #0]
 8003e5e:	e098      	b.n	8003f92 <UART_SetConfig+0x246>
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a7b      	ldr	r2, [pc, #492]	@ (8004054 <UART_SetConfig+0x308>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d131      	bne.n	8003ece <UART_SetConfig+0x182>
 8003e6a:	4b79      	ldr	r3, [pc, #484]	@ (8004050 <UART_SetConfig+0x304>)
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6e:	220c      	movs	r2, #12
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b0c      	cmp	r3, #12
 8003e74:	d01d      	beq.n	8003eb2 <UART_SetConfig+0x166>
 8003e76:	d823      	bhi.n	8003ec0 <UART_SetConfig+0x174>
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d00c      	beq.n	8003e96 <UART_SetConfig+0x14a>
 8003e7c:	d820      	bhi.n	8003ec0 <UART_SetConfig+0x174>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <UART_SetConfig+0x13c>
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d00e      	beq.n	8003ea4 <UART_SetConfig+0x158>
 8003e86:	e01b      	b.n	8003ec0 <UART_SetConfig+0x174>
 8003e88:	231b      	movs	r3, #27
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	189b      	adds	r3, r3, r2
 8003e8e:	19db      	adds	r3, r3, r7
 8003e90:	2200      	movs	r2, #0
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	e07d      	b.n	8003f92 <UART_SetConfig+0x246>
 8003e96:	231b      	movs	r3, #27
 8003e98:	2220      	movs	r2, #32
 8003e9a:	189b      	adds	r3, r3, r2
 8003e9c:	19db      	adds	r3, r3, r7
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	e076      	b.n	8003f92 <UART_SetConfig+0x246>
 8003ea4:	231b      	movs	r3, #27
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	189b      	adds	r3, r3, r2
 8003eaa:	19db      	adds	r3, r3, r7
 8003eac:	2204      	movs	r2, #4
 8003eae:	701a      	strb	r2, [r3, #0]
 8003eb0:	e06f      	b.n	8003f92 <UART_SetConfig+0x246>
 8003eb2:	231b      	movs	r3, #27
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	189b      	adds	r3, r3, r2
 8003eb8:	19db      	adds	r3, r3, r7
 8003eba:	2208      	movs	r2, #8
 8003ebc:	701a      	strb	r2, [r3, #0]
 8003ebe:	e068      	b.n	8003f92 <UART_SetConfig+0x246>
 8003ec0:	231b      	movs	r3, #27
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	189b      	adds	r3, r3, r2
 8003ec6:	19db      	adds	r3, r3, r7
 8003ec8:	2210      	movs	r2, #16
 8003eca:	701a      	strb	r2, [r3, #0]
 8003ecc:	e061      	b.n	8003f92 <UART_SetConfig+0x246>
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a61      	ldr	r2, [pc, #388]	@ (8004058 <UART_SetConfig+0x30c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d106      	bne.n	8003ee6 <UART_SetConfig+0x19a>
 8003ed8:	231b      	movs	r3, #27
 8003eda:	2220      	movs	r2, #32
 8003edc:	189b      	adds	r3, r3, r2
 8003ede:	19db      	adds	r3, r3, r7
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e055      	b.n	8003f92 <UART_SetConfig+0x246>
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a5c      	ldr	r2, [pc, #368]	@ (800405c <UART_SetConfig+0x310>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d106      	bne.n	8003efe <UART_SetConfig+0x1b2>
 8003ef0:	231b      	movs	r3, #27
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	189b      	adds	r3, r3, r2
 8003ef6:	19db      	adds	r3, r3, r7
 8003ef8:	2200      	movs	r2, #0
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	e049      	b.n	8003f92 <UART_SetConfig+0x246>
 8003efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a50      	ldr	r2, [pc, #320]	@ (8004044 <UART_SetConfig+0x2f8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d13e      	bne.n	8003f86 <UART_SetConfig+0x23a>
 8003f08:	4b51      	ldr	r3, [pc, #324]	@ (8004050 <UART_SetConfig+0x304>)
 8003f0a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f0c:	23c0      	movs	r3, #192	@ 0xc0
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	4013      	ands	r3, r2
 8003f12:	22c0      	movs	r2, #192	@ 0xc0
 8003f14:	0112      	lsls	r2, r2, #4
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d027      	beq.n	8003f6a <UART_SetConfig+0x21e>
 8003f1a:	22c0      	movs	r2, #192	@ 0xc0
 8003f1c:	0112      	lsls	r2, r2, #4
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d82a      	bhi.n	8003f78 <UART_SetConfig+0x22c>
 8003f22:	2280      	movs	r2, #128	@ 0x80
 8003f24:	0112      	lsls	r2, r2, #4
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d011      	beq.n	8003f4e <UART_SetConfig+0x202>
 8003f2a:	2280      	movs	r2, #128	@ 0x80
 8003f2c:	0112      	lsls	r2, r2, #4
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d822      	bhi.n	8003f78 <UART_SetConfig+0x22c>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d004      	beq.n	8003f40 <UART_SetConfig+0x1f4>
 8003f36:	2280      	movs	r2, #128	@ 0x80
 8003f38:	00d2      	lsls	r2, r2, #3
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00e      	beq.n	8003f5c <UART_SetConfig+0x210>
 8003f3e:	e01b      	b.n	8003f78 <UART_SetConfig+0x22c>
 8003f40:	231b      	movs	r3, #27
 8003f42:	2220      	movs	r2, #32
 8003f44:	189b      	adds	r3, r3, r2
 8003f46:	19db      	adds	r3, r3, r7
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
 8003f4c:	e021      	b.n	8003f92 <UART_SetConfig+0x246>
 8003f4e:	231b      	movs	r3, #27
 8003f50:	2220      	movs	r2, #32
 8003f52:	189b      	adds	r3, r3, r2
 8003f54:	19db      	adds	r3, r3, r7
 8003f56:	2202      	movs	r2, #2
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	e01a      	b.n	8003f92 <UART_SetConfig+0x246>
 8003f5c:	231b      	movs	r3, #27
 8003f5e:	2220      	movs	r2, #32
 8003f60:	189b      	adds	r3, r3, r2
 8003f62:	19db      	adds	r3, r3, r7
 8003f64:	2204      	movs	r2, #4
 8003f66:	701a      	strb	r2, [r3, #0]
 8003f68:	e013      	b.n	8003f92 <UART_SetConfig+0x246>
 8003f6a:	231b      	movs	r3, #27
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	189b      	adds	r3, r3, r2
 8003f70:	19db      	adds	r3, r3, r7
 8003f72:	2208      	movs	r2, #8
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	e00c      	b.n	8003f92 <UART_SetConfig+0x246>
 8003f78:	231b      	movs	r3, #27
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	189b      	adds	r3, r3, r2
 8003f7e:	19db      	adds	r3, r3, r7
 8003f80:	2210      	movs	r2, #16
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	e005      	b.n	8003f92 <UART_SetConfig+0x246>
 8003f86:	231b      	movs	r3, #27
 8003f88:	2220      	movs	r2, #32
 8003f8a:	189b      	adds	r3, r3, r2
 8003f8c:	19db      	adds	r3, r3, r7
 8003f8e:	2210      	movs	r2, #16
 8003f90:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a2b      	ldr	r2, [pc, #172]	@ (8004044 <UART_SetConfig+0x2f8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d000      	beq.n	8003f9e <UART_SetConfig+0x252>
 8003f9c:	e0a9      	b.n	80040f2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f9e:	231b      	movs	r3, #27
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	189b      	adds	r3, r3, r2
 8003fa4:	19db      	adds	r3, r3, r7
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d015      	beq.n	8003fd8 <UART_SetConfig+0x28c>
 8003fac:	dc18      	bgt.n	8003fe0 <UART_SetConfig+0x294>
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d00d      	beq.n	8003fce <UART_SetConfig+0x282>
 8003fb2:	dc15      	bgt.n	8003fe0 <UART_SetConfig+0x294>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <UART_SetConfig+0x272>
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d005      	beq.n	8003fc8 <UART_SetConfig+0x27c>
 8003fbc:	e010      	b.n	8003fe0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fbe:	f7ff fbfd 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 8003fc2:	0003      	movs	r3, r0
 8003fc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fc6:	e014      	b.n	8003ff2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc8:	4b25      	ldr	r3, [pc, #148]	@ (8004060 <UART_SetConfig+0x314>)
 8003fca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fcc:	e011      	b.n	8003ff2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fce:	f7ff fb69 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8003fd2:	0003      	movs	r3, r0
 8003fd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fd6:	e00c      	b.n	8003ff2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fd8:	2380      	movs	r3, #128	@ 0x80
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fde:	e008      	b.n	8003ff2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003fe4:	231a      	movs	r3, #26
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	189b      	adds	r3, r3, r2
 8003fea:	19db      	adds	r3, r3, r7
 8003fec:	2201      	movs	r2, #1
 8003fee:	701a      	strb	r2, [r3, #0]
        break;
 8003ff0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d100      	bne.n	8003ffa <UART_SetConfig+0x2ae>
 8003ff8:	e14b      	b.n	8004292 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ffe:	4b19      	ldr	r3, [pc, #100]	@ (8004064 <UART_SetConfig+0x318>)
 8004000:	0052      	lsls	r2, r2, #1
 8004002:	5ad3      	ldrh	r3, [r2, r3]
 8004004:	0019      	movs	r1, r3
 8004006:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004008:	f7fc f87c 	bl	8000104 <__udivsi3>
 800400c:	0003      	movs	r3, r0
 800400e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	0013      	movs	r3, r2
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	189b      	adds	r3, r3, r2
 800401a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800401c:	429a      	cmp	r2, r3
 800401e:	d305      	bcc.n	800402c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004026:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004028:	429a      	cmp	r2, r3
 800402a:	d91d      	bls.n	8004068 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800402c:	231a      	movs	r3, #26
 800402e:	2220      	movs	r2, #32
 8004030:	189b      	adds	r3, r3, r2
 8004032:	19db      	adds	r3, r3, r7
 8004034:	2201      	movs	r2, #1
 8004036:	701a      	strb	r2, [r3, #0]
 8004038:	e12b      	b.n	8004292 <UART_SetConfig+0x546>
 800403a:	46c0      	nop			@ (mov r8, r8)
 800403c:	cfff69f3 	.word	0xcfff69f3
 8004040:	ffffcfff 	.word	0xffffcfff
 8004044:	40008000 	.word	0x40008000
 8004048:	11fff4ff 	.word	0x11fff4ff
 800404c:	40013800 	.word	0x40013800
 8004050:	40021000 	.word	0x40021000
 8004054:	40004400 	.word	0x40004400
 8004058:	40004800 	.word	0x40004800
 800405c:	40004c00 	.word	0x40004c00
 8004060:	00f42400 	.word	0x00f42400
 8004064:	08004a64 	.word	0x08004a64
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	2300      	movs	r3, #0
 800406e:	61fb      	str	r3, [r7, #28]
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004074:	4b92      	ldr	r3, [pc, #584]	@ (80042c0 <UART_SetConfig+0x574>)
 8004076:	0052      	lsls	r2, r2, #1
 8004078:	5ad3      	ldrh	r3, [r2, r3]
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	69b8      	ldr	r0, [r7, #24]
 8004086:	69f9      	ldr	r1, [r7, #28]
 8004088:	f7fc f9b2 	bl	80003f0 <__aeabi_uldivmod>
 800408c:	0002      	movs	r2, r0
 800408e:	000b      	movs	r3, r1
 8004090:	0e11      	lsrs	r1, r2, #24
 8004092:	021d      	lsls	r5, r3, #8
 8004094:	430d      	orrs	r5, r1
 8004096:	0214      	lsls	r4, r2, #8
 8004098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	085b      	lsrs	r3, r3, #1
 800409e:	60bb      	str	r3, [r7, #8]
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	68b8      	ldr	r0, [r7, #8]
 80040a6:	68f9      	ldr	r1, [r7, #12]
 80040a8:	1900      	adds	r0, r0, r4
 80040aa:	4169      	adcs	r1, r5
 80040ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	603b      	str	r3, [r7, #0]
 80040b2:	2300      	movs	r3, #0
 80040b4:	607b      	str	r3, [r7, #4]
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f7fc f999 	bl	80003f0 <__aeabi_uldivmod>
 80040be:	0002      	movs	r2, r0
 80040c0:	000b      	movs	r3, r1
 80040c2:	0013      	movs	r3, r2
 80040c4:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040c8:	23c0      	movs	r3, #192	@ 0xc0
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d309      	bcc.n	80040e4 <UART_SetConfig+0x398>
 80040d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040d2:	2380      	movs	r3, #128	@ 0x80
 80040d4:	035b      	lsls	r3, r3, #13
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d204      	bcs.n	80040e4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040e0:	60da      	str	r2, [r3, #12]
 80040e2:	e0d6      	b.n	8004292 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80040e4:	231a      	movs	r3, #26
 80040e6:	2220      	movs	r2, #32
 80040e8:	189b      	adds	r3, r3, r2
 80040ea:	19db      	adds	r3, r3, r7
 80040ec:	2201      	movs	r2, #1
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	e0cf      	b.n	8004292 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	69da      	ldr	r2, [r3, #28]
 80040f6:	2380      	movs	r3, #128	@ 0x80
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d000      	beq.n	8004100 <UART_SetConfig+0x3b4>
 80040fe:	e070      	b.n	80041e2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004100:	231b      	movs	r3, #27
 8004102:	2220      	movs	r2, #32
 8004104:	189b      	adds	r3, r3, r2
 8004106:	19db      	adds	r3, r3, r7
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b08      	cmp	r3, #8
 800410c:	d015      	beq.n	800413a <UART_SetConfig+0x3ee>
 800410e:	dc18      	bgt.n	8004142 <UART_SetConfig+0x3f6>
 8004110:	2b04      	cmp	r3, #4
 8004112:	d00d      	beq.n	8004130 <UART_SetConfig+0x3e4>
 8004114:	dc15      	bgt.n	8004142 <UART_SetConfig+0x3f6>
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <UART_SetConfig+0x3d4>
 800411a:	2b02      	cmp	r3, #2
 800411c:	d005      	beq.n	800412a <UART_SetConfig+0x3de>
 800411e:	e010      	b.n	8004142 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004120:	f7ff fb4c 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 8004124:	0003      	movs	r3, r0
 8004126:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004128:	e014      	b.n	8004154 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800412a:	4b66      	ldr	r3, [pc, #408]	@ (80042c4 <UART_SetConfig+0x578>)
 800412c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800412e:	e011      	b.n	8004154 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004130:	f7ff fab8 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8004134:	0003      	movs	r3, r0
 8004136:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004138:	e00c      	b.n	8004154 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800413a:	2380      	movs	r3, #128	@ 0x80
 800413c:	021b      	lsls	r3, r3, #8
 800413e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004140:	e008      	b.n	8004154 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004146:	231a      	movs	r3, #26
 8004148:	2220      	movs	r2, #32
 800414a:	189b      	adds	r3, r3, r2
 800414c:	19db      	adds	r3, r3, r7
 800414e:	2201      	movs	r2, #1
 8004150:	701a      	strb	r2, [r3, #0]
        break;
 8004152:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004156:	2b00      	cmp	r3, #0
 8004158:	d100      	bne.n	800415c <UART_SetConfig+0x410>
 800415a:	e09a      	b.n	8004292 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004160:	4b57      	ldr	r3, [pc, #348]	@ (80042c0 <UART_SetConfig+0x574>)
 8004162:	0052      	lsls	r2, r2, #1
 8004164:	5ad3      	ldrh	r3, [r2, r3]
 8004166:	0019      	movs	r1, r3
 8004168:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800416a:	f7fb ffcb 	bl	8000104 <__udivsi3>
 800416e:	0003      	movs	r3, r0
 8004170:	005a      	lsls	r2, r3, #1
 8004172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	085b      	lsrs	r3, r3, #1
 8004178:	18d2      	adds	r2, r2, r3
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	0019      	movs	r1, r3
 8004180:	0010      	movs	r0, r2
 8004182:	f7fb ffbf 	bl	8000104 <__udivsi3>
 8004186:	0003      	movs	r3, r0
 8004188:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800418a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418c:	2b0f      	cmp	r3, #15
 800418e:	d921      	bls.n	80041d4 <UART_SetConfig+0x488>
 8004190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004192:	2380      	movs	r3, #128	@ 0x80
 8004194:	025b      	lsls	r3, r3, #9
 8004196:	429a      	cmp	r2, r3
 8004198:	d21c      	bcs.n	80041d4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419c:	b29a      	uxth	r2, r3
 800419e:	200e      	movs	r0, #14
 80041a0:	2420      	movs	r4, #32
 80041a2:	1903      	adds	r3, r0, r4
 80041a4:	19db      	adds	r3, r3, r7
 80041a6:	210f      	movs	r1, #15
 80041a8:	438a      	bics	r2, r1
 80041aa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ae:	085b      	lsrs	r3, r3, #1
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2207      	movs	r2, #7
 80041b4:	4013      	ands	r3, r2
 80041b6:	b299      	uxth	r1, r3
 80041b8:	1903      	adds	r3, r0, r4
 80041ba:	19db      	adds	r3, r3, r7
 80041bc:	1902      	adds	r2, r0, r4
 80041be:	19d2      	adds	r2, r2, r7
 80041c0:	8812      	ldrh	r2, [r2, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	1902      	adds	r2, r0, r4
 80041cc:	19d2      	adds	r2, r2, r7
 80041ce:	8812      	ldrh	r2, [r2, #0]
 80041d0:	60da      	str	r2, [r3, #12]
 80041d2:	e05e      	b.n	8004292 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80041d4:	231a      	movs	r3, #26
 80041d6:	2220      	movs	r2, #32
 80041d8:	189b      	adds	r3, r3, r2
 80041da:	19db      	adds	r3, r3, r7
 80041dc:	2201      	movs	r2, #1
 80041de:	701a      	strb	r2, [r3, #0]
 80041e0:	e057      	b.n	8004292 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041e2:	231b      	movs	r3, #27
 80041e4:	2220      	movs	r2, #32
 80041e6:	189b      	adds	r3, r3, r2
 80041e8:	19db      	adds	r3, r3, r7
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d015      	beq.n	800421c <UART_SetConfig+0x4d0>
 80041f0:	dc18      	bgt.n	8004224 <UART_SetConfig+0x4d8>
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d00d      	beq.n	8004212 <UART_SetConfig+0x4c6>
 80041f6:	dc15      	bgt.n	8004224 <UART_SetConfig+0x4d8>
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <UART_SetConfig+0x4b6>
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d005      	beq.n	800420c <UART_SetConfig+0x4c0>
 8004200:	e010      	b.n	8004224 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004202:	f7ff fadb 	bl	80037bc <HAL_RCC_GetPCLK1Freq>
 8004206:	0003      	movs	r3, r0
 8004208:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800420a:	e014      	b.n	8004236 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800420c:	4b2d      	ldr	r3, [pc, #180]	@ (80042c4 <UART_SetConfig+0x578>)
 800420e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004210:	e011      	b.n	8004236 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004212:	f7ff fa47 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8004216:	0003      	movs	r3, r0
 8004218:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800421a:	e00c      	b.n	8004236 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800421c:	2380      	movs	r3, #128	@ 0x80
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004222:	e008      	b.n	8004236 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004228:	231a      	movs	r3, #26
 800422a:	2220      	movs	r2, #32
 800422c:	189b      	adds	r3, r3, r2
 800422e:	19db      	adds	r3, r3, r7
 8004230:	2201      	movs	r2, #1
 8004232:	701a      	strb	r2, [r3, #0]
        break;
 8004234:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004238:	2b00      	cmp	r3, #0
 800423a:	d02a      	beq.n	8004292 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004240:	4b1f      	ldr	r3, [pc, #124]	@ (80042c0 <UART_SetConfig+0x574>)
 8004242:	0052      	lsls	r2, r2, #1
 8004244:	5ad3      	ldrh	r3, [r2, r3]
 8004246:	0019      	movs	r1, r3
 8004248:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800424a:	f7fb ff5b 	bl	8000104 <__udivsi3>
 800424e:	0003      	movs	r3, r0
 8004250:	001a      	movs	r2, r3
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	085b      	lsrs	r3, r3, #1
 8004258:	18d2      	adds	r2, r2, r3
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	0019      	movs	r1, r3
 8004260:	0010      	movs	r0, r2
 8004262:	f7fb ff4f 	bl	8000104 <__udivsi3>
 8004266:	0003      	movs	r3, r0
 8004268:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800426a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426c:	2b0f      	cmp	r3, #15
 800426e:	d90a      	bls.n	8004286 <UART_SetConfig+0x53a>
 8004270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004272:	2380      	movs	r3, #128	@ 0x80
 8004274:	025b      	lsls	r3, r3, #9
 8004276:	429a      	cmp	r2, r3
 8004278:	d205      	bcs.n	8004286 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427c:	b29a      	uxth	r2, r3
 800427e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60da      	str	r2, [r3, #12]
 8004284:	e005      	b.n	8004292 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004286:	231a      	movs	r3, #26
 8004288:	2220      	movs	r2, #32
 800428a:	189b      	adds	r3, r3, r2
 800428c:	19db      	adds	r3, r3, r7
 800428e:	2201      	movs	r2, #1
 8004290:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	226a      	movs	r2, #106	@ 0x6a
 8004296:	2101      	movs	r1, #1
 8004298:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	2268      	movs	r2, #104	@ 0x68
 800429e:	2101      	movs	r1, #1
 80042a0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a4:	2200      	movs	r2, #0
 80042a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80042a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042aa:	2200      	movs	r2, #0
 80042ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80042ae:	231a      	movs	r3, #26
 80042b0:	2220      	movs	r2, #32
 80042b2:	189b      	adds	r3, r3, r2
 80042b4:	19db      	adds	r3, r3, r7
 80042b6:	781b      	ldrb	r3, [r3, #0]
}
 80042b8:	0018      	movs	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b010      	add	sp, #64	@ 0x40
 80042be:	bdb0      	pop	{r4, r5, r7, pc}
 80042c0:	08004a64 	.word	0x08004a64
 80042c4:	00f42400 	.word	0x00f42400

080042c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d4:	2208      	movs	r2, #8
 80042d6:	4013      	ands	r3, r2
 80042d8:	d00b      	beq.n	80042f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	4a4a      	ldr	r2, [pc, #296]	@ (800440c <UART_AdvFeatureConfig+0x144>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	0019      	movs	r1, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f6:	2201      	movs	r2, #1
 80042f8:	4013      	ands	r3, r2
 80042fa:	d00b      	beq.n	8004314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4a43      	ldr	r2, [pc, #268]	@ (8004410 <UART_AdvFeatureConfig+0x148>)
 8004304:	4013      	ands	r3, r2
 8004306:	0019      	movs	r1, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004318:	2202      	movs	r2, #2
 800431a:	4013      	ands	r3, r2
 800431c:	d00b      	beq.n	8004336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	4a3b      	ldr	r2, [pc, #236]	@ (8004414 <UART_AdvFeatureConfig+0x14c>)
 8004326:	4013      	ands	r3, r2
 8004328:	0019      	movs	r1, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433a:	2204      	movs	r2, #4
 800433c:	4013      	ands	r3, r2
 800433e:	d00b      	beq.n	8004358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	4a34      	ldr	r2, [pc, #208]	@ (8004418 <UART_AdvFeatureConfig+0x150>)
 8004348:	4013      	ands	r3, r2
 800434a:	0019      	movs	r1, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435c:	2210      	movs	r2, #16
 800435e:	4013      	ands	r3, r2
 8004360:	d00b      	beq.n	800437a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	4a2c      	ldr	r2, [pc, #176]	@ (800441c <UART_AdvFeatureConfig+0x154>)
 800436a:	4013      	ands	r3, r2
 800436c:	0019      	movs	r1, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437e:	2220      	movs	r2, #32
 8004380:	4013      	ands	r3, r2
 8004382:	d00b      	beq.n	800439c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	4a25      	ldr	r2, [pc, #148]	@ (8004420 <UART_AdvFeatureConfig+0x158>)
 800438c:	4013      	ands	r3, r2
 800438e:	0019      	movs	r1, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a0:	2240      	movs	r2, #64	@ 0x40
 80043a2:	4013      	ands	r3, r2
 80043a4:	d01d      	beq.n	80043e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004424 <UART_AdvFeatureConfig+0x15c>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	0019      	movs	r1, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043c2:	2380      	movs	r3, #128	@ 0x80
 80043c4:	035b      	lsls	r3, r3, #13
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d10b      	bne.n	80043e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	4a15      	ldr	r2, [pc, #84]	@ (8004428 <UART_AdvFeatureConfig+0x160>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	0019      	movs	r1, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e6:	2280      	movs	r2, #128	@ 0x80
 80043e8:	4013      	ands	r3, r2
 80043ea:	d00b      	beq.n	8004404 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	4a0e      	ldr	r2, [pc, #56]	@ (800442c <UART_AdvFeatureConfig+0x164>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	0019      	movs	r1, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	605a      	str	r2, [r3, #4]
  }
}
 8004404:	46c0      	nop			@ (mov r8, r8)
 8004406:	46bd      	mov	sp, r7
 8004408:	b002      	add	sp, #8
 800440a:	bd80      	pop	{r7, pc}
 800440c:	ffff7fff 	.word	0xffff7fff
 8004410:	fffdffff 	.word	0xfffdffff
 8004414:	fffeffff 	.word	0xfffeffff
 8004418:	fffbffff 	.word	0xfffbffff
 800441c:	ffffefff 	.word	0xffffefff
 8004420:	ffffdfff 	.word	0xffffdfff
 8004424:	ffefffff 	.word	0xffefffff
 8004428:	ff9fffff 	.word	0xff9fffff
 800442c:	fff7ffff 	.word	0xfff7ffff

08004430 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b092      	sub	sp, #72	@ 0x48
 8004434:	af02      	add	r7, sp, #8
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2290      	movs	r2, #144	@ 0x90
 800443c:	2100      	movs	r1, #0
 800443e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004440:	f7fc fe36 	bl	80010b0 <HAL_GetTick>
 8004444:	0003      	movs	r3, r0
 8004446:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2208      	movs	r2, #8
 8004450:	4013      	ands	r3, r2
 8004452:	2b08      	cmp	r3, #8
 8004454:	d12d      	bne.n	80044b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004458:	2280      	movs	r2, #128	@ 0x80
 800445a:	0391      	lsls	r1, r2, #14
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	4a47      	ldr	r2, [pc, #284]	@ (800457c <UART_CheckIdleState+0x14c>)
 8004460:	9200      	str	r2, [sp, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	f000 f88e 	bl	8004584 <UART_WaitOnFlagUntilTimeout>
 8004468:	1e03      	subs	r3, r0, #0
 800446a:	d022      	beq.n	80044b2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800446c:	f3ef 8310 	mrs	r3, PRIMASK
 8004470:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004474:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004476:	2301      	movs	r3, #1
 8004478:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800447a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447c:	f383 8810 	msr	PRIMASK, r3
}
 8004480:	46c0      	nop			@ (mov r8, r8)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2180      	movs	r1, #128	@ 0x80
 800448e:	438a      	bics	r2, r1
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004498:	f383 8810 	msr	PRIMASK, r3
}
 800449c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2288      	movs	r2, #136	@ 0x88
 80044a2:	2120      	movs	r1, #32
 80044a4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2284      	movs	r2, #132	@ 0x84
 80044aa:	2100      	movs	r1, #0
 80044ac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e060      	b.n	8004574 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2204      	movs	r2, #4
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d146      	bne.n	800454e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c2:	2280      	movs	r2, #128	@ 0x80
 80044c4:	03d1      	lsls	r1, r2, #15
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	4a2c      	ldr	r2, [pc, #176]	@ (800457c <UART_CheckIdleState+0x14c>)
 80044ca:	9200      	str	r2, [sp, #0]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f000 f859 	bl	8004584 <UART_WaitOnFlagUntilTimeout>
 80044d2:	1e03      	subs	r3, r0, #0
 80044d4:	d03b      	beq.n	800454e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d6:	f3ef 8310 	mrs	r3, PRIMASK
 80044da:	60fb      	str	r3, [r7, #12]
  return(result);
 80044dc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044de:	637b      	str	r3, [r7, #52]	@ 0x34
 80044e0:	2301      	movs	r3, #1
 80044e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f383 8810 	msr	PRIMASK, r3
}
 80044ea:	46c0      	nop			@ (mov r8, r8)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4922      	ldr	r1, [pc, #136]	@ (8004580 <UART_CheckIdleState+0x150>)
 80044f8:	400a      	ands	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f383 8810 	msr	PRIMASK, r3
}
 8004506:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004508:	f3ef 8310 	mrs	r3, PRIMASK
 800450c:	61bb      	str	r3, [r7, #24]
  return(result);
 800450e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004510:	633b      	str	r3, [r7, #48]	@ 0x30
 8004512:	2301      	movs	r3, #1
 8004514:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f383 8810 	msr	PRIMASK, r3
}
 800451c:	46c0      	nop			@ (mov r8, r8)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2101      	movs	r1, #1
 800452a:	438a      	bics	r2, r1
 800452c:	609a      	str	r2, [r3, #8]
 800452e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004530:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	f383 8810 	msr	PRIMASK, r3
}
 8004538:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	228c      	movs	r2, #140	@ 0x8c
 800453e:	2120      	movs	r1, #32
 8004540:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2284      	movs	r2, #132	@ 0x84
 8004546:	2100      	movs	r1, #0
 8004548:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e012      	b.n	8004574 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2288      	movs	r2, #136	@ 0x88
 8004552:	2120      	movs	r1, #32
 8004554:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	228c      	movs	r2, #140	@ 0x8c
 800455a:	2120      	movs	r1, #32
 800455c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2284      	movs	r2, #132	@ 0x84
 800456e:	2100      	movs	r1, #0
 8004570:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b010      	add	sp, #64	@ 0x40
 800457a:	bd80      	pop	{r7, pc}
 800457c:	01ffffff 	.word	0x01ffffff
 8004580:	fffffedf 	.word	0xfffffedf

08004584 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	1dfb      	adds	r3, r7, #7
 8004592:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004594:	e051      	b.n	800463a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	3301      	adds	r3, #1
 800459a:	d04e      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459c:	f7fc fd88 	bl	80010b0 <HAL_GetTick>
 80045a0:	0002      	movs	r2, r0
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d302      	bcc.n	80045b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e051      	b.n	800465a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2204      	movs	r2, #4
 80045be:	4013      	ands	r3, r2
 80045c0:	d03b      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0xb6>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b80      	cmp	r3, #128	@ 0x80
 80045c6:	d038      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0xb6>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b40      	cmp	r3, #64	@ 0x40
 80045cc:	d035      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	2208      	movs	r2, #8
 80045d6:	4013      	ands	r3, r2
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d111      	bne.n	8004600 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2208      	movs	r2, #8
 80045e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	0018      	movs	r0, r3
 80045e8:	f000 f83c 	bl	8004664 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2290      	movs	r2, #144	@ 0x90
 80045f0:	2108      	movs	r1, #8
 80045f2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2284      	movs	r2, #132	@ 0x84
 80045f8:	2100      	movs	r1, #0
 80045fa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e02c      	b.n	800465a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69da      	ldr	r2, [r3, #28]
 8004606:	2380      	movs	r3, #128	@ 0x80
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	401a      	ands	r2, r3
 800460c:	2380      	movs	r3, #128	@ 0x80
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	429a      	cmp	r2, r3
 8004612:	d112      	bne.n	800463a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2280      	movs	r2, #128	@ 0x80
 800461a:	0112      	lsls	r2, r2, #4
 800461c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	0018      	movs	r0, r3
 8004622:	f000 f81f 	bl	8004664 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2290      	movs	r2, #144	@ 0x90
 800462a:	2120      	movs	r1, #32
 800462c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2284      	movs	r2, #132	@ 0x84
 8004632:	2100      	movs	r1, #0
 8004634:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e00f      	b.n	800465a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	4013      	ands	r3, r2
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	425a      	negs	r2, r3
 800464a:	4153      	adcs	r3, r2
 800464c:	b2db      	uxtb	r3, r3
 800464e:	001a      	movs	r2, r3
 8004650:	1dfb      	adds	r3, r7, #7
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d09e      	beq.n	8004596 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	0018      	movs	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	b004      	add	sp, #16
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b08e      	sub	sp, #56	@ 0x38
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800466c:	f3ef 8310 	mrs	r3, PRIMASK
 8004670:	617b      	str	r3, [r7, #20]
  return(result);
 8004672:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004674:	637b      	str	r3, [r7, #52]	@ 0x34
 8004676:	2301      	movs	r3, #1
 8004678:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f383 8810 	msr	PRIMASK, r3
}
 8004680:	46c0      	nop			@ (mov r8, r8)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4926      	ldr	r1, [pc, #152]	@ (8004728 <UART_EndRxTransfer+0xc4>)
 800468e:	400a      	ands	r2, r1
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004694:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f383 8810 	msr	PRIMASK, r3
}
 800469c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469e:	f3ef 8310 	mrs	r3, PRIMASK
 80046a2:	623b      	str	r3, [r7, #32]
  return(result);
 80046a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80046a8:	2301      	movs	r3, #1
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	f383 8810 	msr	PRIMASK, r3
}
 80046b2:	46c0      	nop			@ (mov r8, r8)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	491b      	ldr	r1, [pc, #108]	@ (800472c <UART_EndRxTransfer+0xc8>)
 80046c0:	400a      	ands	r2, r1
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ca:	f383 8810 	msr	PRIMASK, r3
}
 80046ce:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d118      	bne.n	800470a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d8:	f3ef 8310 	mrs	r3, PRIMASK
 80046dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80046de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046e2:	2301      	movs	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f383 8810 	msr	PRIMASK, r3
}
 80046ec:	46c0      	nop			@ (mov r8, r8)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2110      	movs	r1, #16
 80046fa:	438a      	bics	r2, r1
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004700:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f383 8810 	msr	PRIMASK, r3
}
 8004708:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	228c      	movs	r2, #140	@ 0x8c
 800470e:	2120      	movs	r1, #32
 8004710:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	46bd      	mov	sp, r7
 8004722:	b00e      	add	sp, #56	@ 0x38
 8004724:	bd80      	pop	{r7, pc}
 8004726:	46c0      	nop			@ (mov r8, r8)
 8004728:	fffffedf 	.word	0xfffffedf
 800472c:	effffffe 	.word	0xeffffffe

08004730 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2284      	movs	r2, #132	@ 0x84
 800473c:	5c9b      	ldrb	r3, [r3, r2]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_UARTEx_DisableFifoMode+0x16>
 8004742:	2302      	movs	r3, #2
 8004744:	e027      	b.n	8004796 <HAL_UARTEx_DisableFifoMode+0x66>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2284      	movs	r2, #132	@ 0x84
 800474a:	2101      	movs	r1, #1
 800474c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2288      	movs	r2, #136	@ 0x88
 8004752:	2124      	movs	r1, #36	@ 0x24
 8004754:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2101      	movs	r1, #1
 800476a:	438a      	bics	r2, r1
 800476c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4a0b      	ldr	r2, [pc, #44]	@ (80047a0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004772:	4013      	ands	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2288      	movs	r2, #136	@ 0x88
 8004788:	2120      	movs	r1, #32
 800478a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2284      	movs	r2, #132	@ 0x84
 8004790:	2100      	movs	r1, #0
 8004792:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	0018      	movs	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	b004      	add	sp, #16
 800479c:	bd80      	pop	{r7, pc}
 800479e:	46c0      	nop			@ (mov r8, r8)
 80047a0:	dfffffff 	.word	0xdfffffff

080047a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2284      	movs	r2, #132	@ 0x84
 80047b2:	5c9b      	ldrb	r3, [r3, r2]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e02e      	b.n	800481a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2284      	movs	r2, #132	@ 0x84
 80047c0:	2101      	movs	r1, #1
 80047c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2288      	movs	r2, #136	@ 0x88
 80047c8:	2124      	movs	r1, #36	@ 0x24
 80047ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2101      	movs	r1, #1
 80047e0:	438a      	bics	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	08d9      	lsrs	r1, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	0018      	movs	r0, r3
 80047fc:	f000 f854 	bl	80048a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2288      	movs	r2, #136	@ 0x88
 800480c:	2120      	movs	r1, #32
 800480e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2284      	movs	r2, #132	@ 0x84
 8004814:	2100      	movs	r1, #0
 8004816:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	0018      	movs	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	b004      	add	sp, #16
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2284      	movs	r2, #132	@ 0x84
 8004832:	5c9b      	ldrb	r3, [r3, r2]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004838:	2302      	movs	r3, #2
 800483a:	e02f      	b.n	800489c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2284      	movs	r2, #132	@ 0x84
 8004840:	2101      	movs	r1, #1
 8004842:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2288      	movs	r2, #136	@ 0x88
 8004848:	2124      	movs	r1, #36	@ 0x24
 800484a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2101      	movs	r1, #1
 8004860:	438a      	bics	r2, r1
 8004862:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	4a0e      	ldr	r2, [pc, #56]	@ (80048a4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800486c:	4013      	ands	r3, r2
 800486e:	0019      	movs	r1, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0018      	movs	r0, r3
 800487e:	f000 f813 	bl	80048a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2288      	movs	r2, #136	@ 0x88
 800488e:	2120      	movs	r1, #32
 8004890:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2284      	movs	r2, #132	@ 0x84
 8004896:	2100      	movs	r1, #0
 8004898:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	0018      	movs	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	b004      	add	sp, #16
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	f1ffffff 	.word	0xf1ffffff

080048a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d108      	bne.n	80048ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	226a      	movs	r2, #106	@ 0x6a
 80048bc:	2101      	movs	r1, #1
 80048be:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2268      	movs	r2, #104	@ 0x68
 80048c4:	2101      	movs	r1, #1
 80048c6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048c8:	e043      	b.n	8004952 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048ca:	260f      	movs	r6, #15
 80048cc:	19bb      	adds	r3, r7, r6
 80048ce:	2208      	movs	r2, #8
 80048d0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048d2:	200e      	movs	r0, #14
 80048d4:	183b      	adds	r3, r7, r0
 80048d6:	2208      	movs	r2, #8
 80048d8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	0e5b      	lsrs	r3, r3, #25
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	240d      	movs	r4, #13
 80048e6:	193b      	adds	r3, r7, r4
 80048e8:	2107      	movs	r1, #7
 80048ea:	400a      	ands	r2, r1
 80048ec:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	0f5b      	lsrs	r3, r3, #29
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	250c      	movs	r5, #12
 80048fa:	197b      	adds	r3, r7, r5
 80048fc:	2107      	movs	r1, #7
 80048fe:	400a      	ands	r2, r1
 8004900:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004902:	183b      	adds	r3, r7, r0
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	197a      	adds	r2, r7, r5
 8004908:	7812      	ldrb	r2, [r2, #0]
 800490a:	4914      	ldr	r1, [pc, #80]	@ (800495c <UARTEx_SetNbDataToProcess+0xb4>)
 800490c:	5c8a      	ldrb	r2, [r1, r2]
 800490e:	435a      	muls	r2, r3
 8004910:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004912:	197b      	adds	r3, r7, r5
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	4a12      	ldr	r2, [pc, #72]	@ (8004960 <UARTEx_SetNbDataToProcess+0xb8>)
 8004918:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800491a:	0019      	movs	r1, r3
 800491c:	f7fb fc7c 	bl	8000218 <__divsi3>
 8004920:	0003      	movs	r3, r0
 8004922:	b299      	uxth	r1, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	226a      	movs	r2, #106	@ 0x6a
 8004928:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800492a:	19bb      	adds	r3, r7, r6
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	193a      	adds	r2, r7, r4
 8004930:	7812      	ldrb	r2, [r2, #0]
 8004932:	490a      	ldr	r1, [pc, #40]	@ (800495c <UARTEx_SetNbDataToProcess+0xb4>)
 8004934:	5c8a      	ldrb	r2, [r1, r2]
 8004936:	435a      	muls	r2, r3
 8004938:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800493a:	193b      	adds	r3, r7, r4
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	4a08      	ldr	r2, [pc, #32]	@ (8004960 <UARTEx_SetNbDataToProcess+0xb8>)
 8004940:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004942:	0019      	movs	r1, r3
 8004944:	f7fb fc68 	bl	8000218 <__divsi3>
 8004948:	0003      	movs	r3, r0
 800494a:	b299      	uxth	r1, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2268      	movs	r2, #104	@ 0x68
 8004950:	5299      	strh	r1, [r3, r2]
}
 8004952:	46c0      	nop			@ (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	b005      	add	sp, #20
 8004958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800495a:	46c0      	nop			@ (mov r8, r8)
 800495c:	08004a7c 	.word	0x08004a7c
 8004960:	08004a84 	.word	0x08004a84

08004964 <memset>:
 8004964:	0003      	movs	r3, r0
 8004966:	1882      	adds	r2, r0, r2
 8004968:	4293      	cmp	r3, r2
 800496a:	d100      	bne.n	800496e <memset+0xa>
 800496c:	4770      	bx	lr
 800496e:	7019      	strb	r1, [r3, #0]
 8004970:	3301      	adds	r3, #1
 8004972:	e7f9      	b.n	8004968 <memset+0x4>

08004974 <__libc_init_array>:
 8004974:	b570      	push	{r4, r5, r6, lr}
 8004976:	2600      	movs	r6, #0
 8004978:	4c0c      	ldr	r4, [pc, #48]	@ (80049ac <__libc_init_array+0x38>)
 800497a:	4d0d      	ldr	r5, [pc, #52]	@ (80049b0 <__libc_init_array+0x3c>)
 800497c:	1b64      	subs	r4, r4, r5
 800497e:	10a4      	asrs	r4, r4, #2
 8004980:	42a6      	cmp	r6, r4
 8004982:	d109      	bne.n	8004998 <__libc_init_array+0x24>
 8004984:	2600      	movs	r6, #0
 8004986:	f000 f819 	bl	80049bc <_init>
 800498a:	4c0a      	ldr	r4, [pc, #40]	@ (80049b4 <__libc_init_array+0x40>)
 800498c:	4d0a      	ldr	r5, [pc, #40]	@ (80049b8 <__libc_init_array+0x44>)
 800498e:	1b64      	subs	r4, r4, r5
 8004990:	10a4      	asrs	r4, r4, #2
 8004992:	42a6      	cmp	r6, r4
 8004994:	d105      	bne.n	80049a2 <__libc_init_array+0x2e>
 8004996:	bd70      	pop	{r4, r5, r6, pc}
 8004998:	00b3      	lsls	r3, r6, #2
 800499a:	58eb      	ldr	r3, [r5, r3]
 800499c:	4798      	blx	r3
 800499e:	3601      	adds	r6, #1
 80049a0:	e7ee      	b.n	8004980 <__libc_init_array+0xc>
 80049a2:	00b3      	lsls	r3, r6, #2
 80049a4:	58eb      	ldr	r3, [r5, r3]
 80049a6:	4798      	blx	r3
 80049a8:	3601      	adds	r6, #1
 80049aa:	e7f2      	b.n	8004992 <__libc_init_array+0x1e>
 80049ac:	08004a94 	.word	0x08004a94
 80049b0:	08004a94 	.word	0x08004a94
 80049b4:	08004a98 	.word	0x08004a98
 80049b8:	08004a94 	.word	0x08004a94

080049bc <_init>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c2:	bc08      	pop	{r3}
 80049c4:	469e      	mov	lr, r3
 80049c6:	4770      	bx	lr

080049c8 <_fini>:
 80049c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ca:	46c0      	nop			@ (mov r8, r8)
 80049cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ce:	bc08      	pop	{r3}
 80049d0:	469e      	mov	lr, r3
 80049d2:	4770      	bx	lr
