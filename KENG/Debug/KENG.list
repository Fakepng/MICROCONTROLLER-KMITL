
KENG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059e0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08005a9c  08005a9c  00006a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c10  08005c10  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c10  08005c10  00006c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c18  08005c18  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c18  08005c18  00006c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c1c  08005c1c  00006c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005c20  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000000c  08005c2c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08005c2c  00007180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e494  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e2  00000000  00000000  000154c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  000177b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e8  00000000  00000000  00018340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184ba  00000000  00000000  00018c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e65c  00000000  00000000  000310e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d150  00000000  00000000  0003f73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc88e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a7c  00000000  00000000  000dc8d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000df350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005a84 	.word	0x08005a84

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005a84 	.word	0x08005a84

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f001 f940 	bl	80016d4 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f001 f93b 	bl	80016d4 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__aeabi_fdiv>:
 80005c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ca:	464f      	mov	r7, r9
 80005cc:	4646      	mov	r6, r8
 80005ce:	46d6      	mov	lr, sl
 80005d0:	0244      	lsls	r4, r0, #9
 80005d2:	b5c0      	push	{r6, r7, lr}
 80005d4:	0047      	lsls	r7, r0, #1
 80005d6:	1c0e      	adds	r6, r1, #0
 80005d8:	0a64      	lsrs	r4, r4, #9
 80005da:	0e3f      	lsrs	r7, r7, #24
 80005dc:	0fc5      	lsrs	r5, r0, #31
 80005de:	2f00      	cmp	r7, #0
 80005e0:	d03c      	beq.n	800065c <__aeabi_fdiv+0x94>
 80005e2:	2fff      	cmp	r7, #255	@ 0xff
 80005e4:	d042      	beq.n	800066c <__aeabi_fdiv+0xa4>
 80005e6:	2300      	movs	r3, #0
 80005e8:	2280      	movs	r2, #128	@ 0x80
 80005ea:	4699      	mov	r9, r3
 80005ec:	469a      	mov	sl, r3
 80005ee:	00e4      	lsls	r4, r4, #3
 80005f0:	04d2      	lsls	r2, r2, #19
 80005f2:	4314      	orrs	r4, r2
 80005f4:	3f7f      	subs	r7, #127	@ 0x7f
 80005f6:	0273      	lsls	r3, r6, #9
 80005f8:	0a5b      	lsrs	r3, r3, #9
 80005fa:	4698      	mov	r8, r3
 80005fc:	0073      	lsls	r3, r6, #1
 80005fe:	0e1b      	lsrs	r3, r3, #24
 8000600:	0ff6      	lsrs	r6, r6, #31
 8000602:	2b00      	cmp	r3, #0
 8000604:	d01b      	beq.n	800063e <__aeabi_fdiv+0x76>
 8000606:	2bff      	cmp	r3, #255	@ 0xff
 8000608:	d013      	beq.n	8000632 <__aeabi_fdiv+0x6a>
 800060a:	4642      	mov	r2, r8
 800060c:	2180      	movs	r1, #128	@ 0x80
 800060e:	00d2      	lsls	r2, r2, #3
 8000610:	04c9      	lsls	r1, r1, #19
 8000612:	4311      	orrs	r1, r2
 8000614:	4688      	mov	r8, r1
 8000616:	2000      	movs	r0, #0
 8000618:	3b7f      	subs	r3, #127	@ 0x7f
 800061a:	0029      	movs	r1, r5
 800061c:	1aff      	subs	r7, r7, r3
 800061e:	464b      	mov	r3, r9
 8000620:	4071      	eors	r1, r6
 8000622:	b2c9      	uxtb	r1, r1
 8000624:	2b0f      	cmp	r3, #15
 8000626:	d900      	bls.n	800062a <__aeabi_fdiv+0x62>
 8000628:	e0b5      	b.n	8000796 <__aeabi_fdiv+0x1ce>
 800062a:	4a74      	ldr	r2, [pc, #464]	@ (80007fc <__aeabi_fdiv+0x234>)
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	58d3      	ldr	r3, [r2, r3]
 8000630:	469f      	mov	pc, r3
 8000632:	4643      	mov	r3, r8
 8000634:	2b00      	cmp	r3, #0
 8000636:	d13f      	bne.n	80006b8 <__aeabi_fdiv+0xf0>
 8000638:	3fff      	subs	r7, #255	@ 0xff
 800063a:	3302      	adds	r3, #2
 800063c:	e003      	b.n	8000646 <__aeabi_fdiv+0x7e>
 800063e:	4643      	mov	r3, r8
 8000640:	2b00      	cmp	r3, #0
 8000642:	d12d      	bne.n	80006a0 <__aeabi_fdiv+0xd8>
 8000644:	2301      	movs	r3, #1
 8000646:	0029      	movs	r1, r5
 8000648:	464a      	mov	r2, r9
 800064a:	4071      	eors	r1, r6
 800064c:	b2c9      	uxtb	r1, r1
 800064e:	431a      	orrs	r2, r3
 8000650:	2a0e      	cmp	r2, #14
 8000652:	d838      	bhi.n	80006c6 <__aeabi_fdiv+0xfe>
 8000654:	486a      	ldr	r0, [pc, #424]	@ (8000800 <__aeabi_fdiv+0x238>)
 8000656:	0092      	lsls	r2, r2, #2
 8000658:	5882      	ldr	r2, [r0, r2]
 800065a:	4697      	mov	pc, r2
 800065c:	2c00      	cmp	r4, #0
 800065e:	d113      	bne.n	8000688 <__aeabi_fdiv+0xc0>
 8000660:	2304      	movs	r3, #4
 8000662:	4699      	mov	r9, r3
 8000664:	3b03      	subs	r3, #3
 8000666:	2700      	movs	r7, #0
 8000668:	469a      	mov	sl, r3
 800066a:	e7c4      	b.n	80005f6 <__aeabi_fdiv+0x2e>
 800066c:	2c00      	cmp	r4, #0
 800066e:	d105      	bne.n	800067c <__aeabi_fdiv+0xb4>
 8000670:	2308      	movs	r3, #8
 8000672:	4699      	mov	r9, r3
 8000674:	3b06      	subs	r3, #6
 8000676:	27ff      	movs	r7, #255	@ 0xff
 8000678:	469a      	mov	sl, r3
 800067a:	e7bc      	b.n	80005f6 <__aeabi_fdiv+0x2e>
 800067c:	230c      	movs	r3, #12
 800067e:	4699      	mov	r9, r3
 8000680:	3b09      	subs	r3, #9
 8000682:	27ff      	movs	r7, #255	@ 0xff
 8000684:	469a      	mov	sl, r3
 8000686:	e7b6      	b.n	80005f6 <__aeabi_fdiv+0x2e>
 8000688:	0020      	movs	r0, r4
 800068a:	f001 f805 	bl	8001698 <__clzsi2>
 800068e:	2776      	movs	r7, #118	@ 0x76
 8000690:	1f43      	subs	r3, r0, #5
 8000692:	409c      	lsls	r4, r3
 8000694:	2300      	movs	r3, #0
 8000696:	427f      	negs	r7, r7
 8000698:	4699      	mov	r9, r3
 800069a:	469a      	mov	sl, r3
 800069c:	1a3f      	subs	r7, r7, r0
 800069e:	e7aa      	b.n	80005f6 <__aeabi_fdiv+0x2e>
 80006a0:	4640      	mov	r0, r8
 80006a2:	f000 fff9 	bl	8001698 <__clzsi2>
 80006a6:	4642      	mov	r2, r8
 80006a8:	1f43      	subs	r3, r0, #5
 80006aa:	409a      	lsls	r2, r3
 80006ac:	2376      	movs	r3, #118	@ 0x76
 80006ae:	425b      	negs	r3, r3
 80006b0:	1a1b      	subs	r3, r3, r0
 80006b2:	4690      	mov	r8, r2
 80006b4:	2000      	movs	r0, #0
 80006b6:	e7b0      	b.n	800061a <__aeabi_fdiv+0x52>
 80006b8:	2303      	movs	r3, #3
 80006ba:	464a      	mov	r2, r9
 80006bc:	431a      	orrs	r2, r3
 80006be:	4691      	mov	r9, r2
 80006c0:	2003      	movs	r0, #3
 80006c2:	33fc      	adds	r3, #252	@ 0xfc
 80006c4:	e7a9      	b.n	800061a <__aeabi_fdiv+0x52>
 80006c6:	000d      	movs	r5, r1
 80006c8:	20ff      	movs	r0, #255	@ 0xff
 80006ca:	2200      	movs	r2, #0
 80006cc:	05c0      	lsls	r0, r0, #23
 80006ce:	07ed      	lsls	r5, r5, #31
 80006d0:	4310      	orrs	r0, r2
 80006d2:	4328      	orrs	r0, r5
 80006d4:	bce0      	pop	{r5, r6, r7}
 80006d6:	46ba      	mov	sl, r7
 80006d8:	46b1      	mov	r9, r6
 80006da:	46a8      	mov	r8, r5
 80006dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006de:	000d      	movs	r5, r1
 80006e0:	2000      	movs	r0, #0
 80006e2:	2200      	movs	r2, #0
 80006e4:	e7f2      	b.n	80006cc <__aeabi_fdiv+0x104>
 80006e6:	4653      	mov	r3, sl
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d0ed      	beq.n	80006c8 <__aeabi_fdiv+0x100>
 80006ec:	2b03      	cmp	r3, #3
 80006ee:	d033      	beq.n	8000758 <__aeabi_fdiv+0x190>
 80006f0:	46a0      	mov	r8, r4
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d105      	bne.n	8000702 <__aeabi_fdiv+0x13a>
 80006f6:	2000      	movs	r0, #0
 80006f8:	2200      	movs	r2, #0
 80006fa:	e7e7      	b.n	80006cc <__aeabi_fdiv+0x104>
 80006fc:	0035      	movs	r5, r6
 80006fe:	2803      	cmp	r0, #3
 8000700:	d07a      	beq.n	80007f8 <__aeabi_fdiv+0x230>
 8000702:	003b      	movs	r3, r7
 8000704:	337f      	adds	r3, #127	@ 0x7f
 8000706:	2b00      	cmp	r3, #0
 8000708:	dd2d      	ble.n	8000766 <__aeabi_fdiv+0x19e>
 800070a:	4642      	mov	r2, r8
 800070c:	0752      	lsls	r2, r2, #29
 800070e:	d007      	beq.n	8000720 <__aeabi_fdiv+0x158>
 8000710:	220f      	movs	r2, #15
 8000712:	4641      	mov	r1, r8
 8000714:	400a      	ands	r2, r1
 8000716:	2a04      	cmp	r2, #4
 8000718:	d002      	beq.n	8000720 <__aeabi_fdiv+0x158>
 800071a:	2204      	movs	r2, #4
 800071c:	4694      	mov	ip, r2
 800071e:	44e0      	add	r8, ip
 8000720:	4642      	mov	r2, r8
 8000722:	0112      	lsls	r2, r2, #4
 8000724:	d505      	bpl.n	8000732 <__aeabi_fdiv+0x16a>
 8000726:	4642      	mov	r2, r8
 8000728:	4b36      	ldr	r3, [pc, #216]	@ (8000804 <__aeabi_fdiv+0x23c>)
 800072a:	401a      	ands	r2, r3
 800072c:	003b      	movs	r3, r7
 800072e:	4690      	mov	r8, r2
 8000730:	3380      	adds	r3, #128	@ 0x80
 8000732:	2bfe      	cmp	r3, #254	@ 0xfe
 8000734:	dcc8      	bgt.n	80006c8 <__aeabi_fdiv+0x100>
 8000736:	4642      	mov	r2, r8
 8000738:	0192      	lsls	r2, r2, #6
 800073a:	0a52      	lsrs	r2, r2, #9
 800073c:	b2d8      	uxtb	r0, r3
 800073e:	e7c5      	b.n	80006cc <__aeabi_fdiv+0x104>
 8000740:	2280      	movs	r2, #128	@ 0x80
 8000742:	2500      	movs	r5, #0
 8000744:	20ff      	movs	r0, #255	@ 0xff
 8000746:	03d2      	lsls	r2, r2, #15
 8000748:	e7c0      	b.n	80006cc <__aeabi_fdiv+0x104>
 800074a:	2280      	movs	r2, #128	@ 0x80
 800074c:	03d2      	lsls	r2, r2, #15
 800074e:	4214      	tst	r4, r2
 8000750:	d002      	beq.n	8000758 <__aeabi_fdiv+0x190>
 8000752:	4643      	mov	r3, r8
 8000754:	4213      	tst	r3, r2
 8000756:	d049      	beq.n	80007ec <__aeabi_fdiv+0x224>
 8000758:	2280      	movs	r2, #128	@ 0x80
 800075a:	03d2      	lsls	r2, r2, #15
 800075c:	4322      	orrs	r2, r4
 800075e:	0252      	lsls	r2, r2, #9
 8000760:	20ff      	movs	r0, #255	@ 0xff
 8000762:	0a52      	lsrs	r2, r2, #9
 8000764:	e7b2      	b.n	80006cc <__aeabi_fdiv+0x104>
 8000766:	2201      	movs	r2, #1
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	2b1b      	cmp	r3, #27
 800076c:	dcc3      	bgt.n	80006f6 <__aeabi_fdiv+0x12e>
 800076e:	4642      	mov	r2, r8
 8000770:	40da      	lsrs	r2, r3
 8000772:	4643      	mov	r3, r8
 8000774:	379e      	adds	r7, #158	@ 0x9e
 8000776:	40bb      	lsls	r3, r7
 8000778:	1e59      	subs	r1, r3, #1
 800077a:	418b      	sbcs	r3, r1
 800077c:	431a      	orrs	r2, r3
 800077e:	0753      	lsls	r3, r2, #29
 8000780:	d004      	beq.n	800078c <__aeabi_fdiv+0x1c4>
 8000782:	230f      	movs	r3, #15
 8000784:	4013      	ands	r3, r2
 8000786:	2b04      	cmp	r3, #4
 8000788:	d000      	beq.n	800078c <__aeabi_fdiv+0x1c4>
 800078a:	3204      	adds	r2, #4
 800078c:	0153      	lsls	r3, r2, #5
 800078e:	d529      	bpl.n	80007e4 <__aeabi_fdiv+0x21c>
 8000790:	2001      	movs	r0, #1
 8000792:	2200      	movs	r2, #0
 8000794:	e79a      	b.n	80006cc <__aeabi_fdiv+0x104>
 8000796:	4642      	mov	r2, r8
 8000798:	0163      	lsls	r3, r4, #5
 800079a:	0155      	lsls	r5, r2, #5
 800079c:	42ab      	cmp	r3, r5
 800079e:	d215      	bcs.n	80007cc <__aeabi_fdiv+0x204>
 80007a0:	201b      	movs	r0, #27
 80007a2:	2200      	movs	r2, #0
 80007a4:	3f01      	subs	r7, #1
 80007a6:	2601      	movs	r6, #1
 80007a8:	001c      	movs	r4, r3
 80007aa:	0052      	lsls	r2, r2, #1
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	2c00      	cmp	r4, #0
 80007b0:	db01      	blt.n	80007b6 <__aeabi_fdiv+0x1ee>
 80007b2:	429d      	cmp	r5, r3
 80007b4:	d801      	bhi.n	80007ba <__aeabi_fdiv+0x1f2>
 80007b6:	1b5b      	subs	r3, r3, r5
 80007b8:	4332      	orrs	r2, r6
 80007ba:	3801      	subs	r0, #1
 80007bc:	2800      	cmp	r0, #0
 80007be:	d1f3      	bne.n	80007a8 <__aeabi_fdiv+0x1e0>
 80007c0:	1e58      	subs	r0, r3, #1
 80007c2:	4183      	sbcs	r3, r0
 80007c4:	4313      	orrs	r3, r2
 80007c6:	4698      	mov	r8, r3
 80007c8:	000d      	movs	r5, r1
 80007ca:	e79a      	b.n	8000702 <__aeabi_fdiv+0x13a>
 80007cc:	201a      	movs	r0, #26
 80007ce:	2201      	movs	r2, #1
 80007d0:	1b5b      	subs	r3, r3, r5
 80007d2:	e7e8      	b.n	80007a6 <__aeabi_fdiv+0x1de>
 80007d4:	3b02      	subs	r3, #2
 80007d6:	425a      	negs	r2, r3
 80007d8:	4153      	adcs	r3, r2
 80007da:	425b      	negs	r3, r3
 80007dc:	0035      	movs	r5, r6
 80007de:	2200      	movs	r2, #0
 80007e0:	b2d8      	uxtb	r0, r3
 80007e2:	e773      	b.n	80006cc <__aeabi_fdiv+0x104>
 80007e4:	0192      	lsls	r2, r2, #6
 80007e6:	2000      	movs	r0, #0
 80007e8:	0a52      	lsrs	r2, r2, #9
 80007ea:	e76f      	b.n	80006cc <__aeabi_fdiv+0x104>
 80007ec:	431a      	orrs	r2, r3
 80007ee:	0252      	lsls	r2, r2, #9
 80007f0:	0035      	movs	r5, r6
 80007f2:	20ff      	movs	r0, #255	@ 0xff
 80007f4:	0a52      	lsrs	r2, r2, #9
 80007f6:	e769      	b.n	80006cc <__aeabi_fdiv+0x104>
 80007f8:	4644      	mov	r4, r8
 80007fa:	e7ad      	b.n	8000758 <__aeabi_fdiv+0x190>
 80007fc:	08005aa4 	.word	0x08005aa4
 8000800:	08005ae4 	.word	0x08005ae4
 8000804:	f7ffffff 	.word	0xf7ffffff

08000808 <__aeabi_f2iz>:
 8000808:	0241      	lsls	r1, r0, #9
 800080a:	0042      	lsls	r2, r0, #1
 800080c:	0fc3      	lsrs	r3, r0, #31
 800080e:	0a49      	lsrs	r1, r1, #9
 8000810:	2000      	movs	r0, #0
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	2a7e      	cmp	r2, #126	@ 0x7e
 8000816:	dd03      	ble.n	8000820 <__aeabi_f2iz+0x18>
 8000818:	2a9d      	cmp	r2, #157	@ 0x9d
 800081a:	dd02      	ble.n	8000822 <__aeabi_f2iz+0x1a>
 800081c:	4a09      	ldr	r2, [pc, #36]	@ (8000844 <__aeabi_f2iz+0x3c>)
 800081e:	1898      	adds	r0, r3, r2
 8000820:	4770      	bx	lr
 8000822:	2080      	movs	r0, #128	@ 0x80
 8000824:	0400      	lsls	r0, r0, #16
 8000826:	4301      	orrs	r1, r0
 8000828:	2a95      	cmp	r2, #149	@ 0x95
 800082a:	dc07      	bgt.n	800083c <__aeabi_f2iz+0x34>
 800082c:	2096      	movs	r0, #150	@ 0x96
 800082e:	1a82      	subs	r2, r0, r2
 8000830:	40d1      	lsrs	r1, r2
 8000832:	4248      	negs	r0, r1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d1f3      	bne.n	8000820 <__aeabi_f2iz+0x18>
 8000838:	0008      	movs	r0, r1
 800083a:	e7f1      	b.n	8000820 <__aeabi_f2iz+0x18>
 800083c:	3a96      	subs	r2, #150	@ 0x96
 800083e:	4091      	lsls	r1, r2
 8000840:	e7f7      	b.n	8000832 <__aeabi_f2iz+0x2a>
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	7fffffff 	.word	0x7fffffff

08000848 <__aeabi_i2f>:
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	2800      	cmp	r0, #0
 800084c:	d013      	beq.n	8000876 <__aeabi_i2f+0x2e>
 800084e:	17c3      	asrs	r3, r0, #31
 8000850:	18c5      	adds	r5, r0, r3
 8000852:	405d      	eors	r5, r3
 8000854:	0fc4      	lsrs	r4, r0, #31
 8000856:	0028      	movs	r0, r5
 8000858:	f000 ff1e 	bl	8001698 <__clzsi2>
 800085c:	239e      	movs	r3, #158	@ 0x9e
 800085e:	0001      	movs	r1, r0
 8000860:	1a1b      	subs	r3, r3, r0
 8000862:	2b96      	cmp	r3, #150	@ 0x96
 8000864:	dc0f      	bgt.n	8000886 <__aeabi_i2f+0x3e>
 8000866:	2808      	cmp	r0, #8
 8000868:	d034      	beq.n	80008d4 <__aeabi_i2f+0x8c>
 800086a:	3908      	subs	r1, #8
 800086c:	408d      	lsls	r5, r1
 800086e:	026d      	lsls	r5, r5, #9
 8000870:	0a6d      	lsrs	r5, r5, #9
 8000872:	b2d8      	uxtb	r0, r3
 8000874:	e002      	b.n	800087c <__aeabi_i2f+0x34>
 8000876:	2400      	movs	r4, #0
 8000878:	2000      	movs	r0, #0
 800087a:	2500      	movs	r5, #0
 800087c:	05c0      	lsls	r0, r0, #23
 800087e:	4328      	orrs	r0, r5
 8000880:	07e4      	lsls	r4, r4, #31
 8000882:	4320      	orrs	r0, r4
 8000884:	bd70      	pop	{r4, r5, r6, pc}
 8000886:	2b99      	cmp	r3, #153	@ 0x99
 8000888:	dc16      	bgt.n	80008b8 <__aeabi_i2f+0x70>
 800088a:	1f42      	subs	r2, r0, #5
 800088c:	2805      	cmp	r0, #5
 800088e:	d000      	beq.n	8000892 <__aeabi_i2f+0x4a>
 8000890:	4095      	lsls	r5, r2
 8000892:	002a      	movs	r2, r5
 8000894:	4811      	ldr	r0, [pc, #68]	@ (80008dc <__aeabi_i2f+0x94>)
 8000896:	4002      	ands	r2, r0
 8000898:	076e      	lsls	r6, r5, #29
 800089a:	d009      	beq.n	80008b0 <__aeabi_i2f+0x68>
 800089c:	260f      	movs	r6, #15
 800089e:	4035      	ands	r5, r6
 80008a0:	2d04      	cmp	r5, #4
 80008a2:	d005      	beq.n	80008b0 <__aeabi_i2f+0x68>
 80008a4:	3204      	adds	r2, #4
 80008a6:	0155      	lsls	r5, r2, #5
 80008a8:	d502      	bpl.n	80008b0 <__aeabi_i2f+0x68>
 80008aa:	239f      	movs	r3, #159	@ 0x9f
 80008ac:	4002      	ands	r2, r0
 80008ae:	1a5b      	subs	r3, r3, r1
 80008b0:	0192      	lsls	r2, r2, #6
 80008b2:	0a55      	lsrs	r5, r2, #9
 80008b4:	b2d8      	uxtb	r0, r3
 80008b6:	e7e1      	b.n	800087c <__aeabi_i2f+0x34>
 80008b8:	2205      	movs	r2, #5
 80008ba:	1a12      	subs	r2, r2, r0
 80008bc:	0028      	movs	r0, r5
 80008be:	40d0      	lsrs	r0, r2
 80008c0:	0002      	movs	r2, r0
 80008c2:	0008      	movs	r0, r1
 80008c4:	301b      	adds	r0, #27
 80008c6:	4085      	lsls	r5, r0
 80008c8:	0028      	movs	r0, r5
 80008ca:	1e45      	subs	r5, r0, #1
 80008cc:	41a8      	sbcs	r0, r5
 80008ce:	4302      	orrs	r2, r0
 80008d0:	0015      	movs	r5, r2
 80008d2:	e7de      	b.n	8000892 <__aeabi_i2f+0x4a>
 80008d4:	026d      	lsls	r5, r5, #9
 80008d6:	2096      	movs	r0, #150	@ 0x96
 80008d8:	0a6d      	lsrs	r5, r5, #9
 80008da:	e7cf      	b.n	800087c <__aeabi_i2f+0x34>
 80008dc:	fbffffff 	.word	0xfbffffff

080008e0 <__aeabi_ddiv>:
 80008e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008e2:	46de      	mov	lr, fp
 80008e4:	4645      	mov	r5, r8
 80008e6:	4657      	mov	r7, sl
 80008e8:	464e      	mov	r6, r9
 80008ea:	b5e0      	push	{r5, r6, r7, lr}
 80008ec:	b087      	sub	sp, #28
 80008ee:	9200      	str	r2, [sp, #0]
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	030b      	lsls	r3, r1, #12
 80008f4:	0b1b      	lsrs	r3, r3, #12
 80008f6:	469b      	mov	fp, r3
 80008f8:	0fca      	lsrs	r2, r1, #31
 80008fa:	004b      	lsls	r3, r1, #1
 80008fc:	0004      	movs	r4, r0
 80008fe:	4680      	mov	r8, r0
 8000900:	0d5b      	lsrs	r3, r3, #21
 8000902:	9202      	str	r2, [sp, #8]
 8000904:	d100      	bne.n	8000908 <__aeabi_ddiv+0x28>
 8000906:	e16a      	b.n	8000bde <__aeabi_ddiv+0x2fe>
 8000908:	4ad4      	ldr	r2, [pc, #848]	@ (8000c5c <__aeabi_ddiv+0x37c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d100      	bne.n	8000910 <__aeabi_ddiv+0x30>
 800090e:	e18c      	b.n	8000c2a <__aeabi_ddiv+0x34a>
 8000910:	4659      	mov	r1, fp
 8000912:	0f42      	lsrs	r2, r0, #29
 8000914:	00c9      	lsls	r1, r1, #3
 8000916:	430a      	orrs	r2, r1
 8000918:	2180      	movs	r1, #128	@ 0x80
 800091a:	0409      	lsls	r1, r1, #16
 800091c:	4311      	orrs	r1, r2
 800091e:	00c2      	lsls	r2, r0, #3
 8000920:	4690      	mov	r8, r2
 8000922:	4acf      	ldr	r2, [pc, #828]	@ (8000c60 <__aeabi_ddiv+0x380>)
 8000924:	4689      	mov	r9, r1
 8000926:	4692      	mov	sl, r2
 8000928:	449a      	add	sl, r3
 800092a:	2300      	movs	r3, #0
 800092c:	2400      	movs	r4, #0
 800092e:	9303      	str	r3, [sp, #12]
 8000930:	9e00      	ldr	r6, [sp, #0]
 8000932:	9f01      	ldr	r7, [sp, #4]
 8000934:	033b      	lsls	r3, r7, #12
 8000936:	0b1b      	lsrs	r3, r3, #12
 8000938:	469b      	mov	fp, r3
 800093a:	007b      	lsls	r3, r7, #1
 800093c:	0030      	movs	r0, r6
 800093e:	0d5b      	lsrs	r3, r3, #21
 8000940:	0ffd      	lsrs	r5, r7, #31
 8000942:	2b00      	cmp	r3, #0
 8000944:	d100      	bne.n	8000948 <__aeabi_ddiv+0x68>
 8000946:	e128      	b.n	8000b9a <__aeabi_ddiv+0x2ba>
 8000948:	4ac4      	ldr	r2, [pc, #784]	@ (8000c5c <__aeabi_ddiv+0x37c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d100      	bne.n	8000950 <__aeabi_ddiv+0x70>
 800094e:	e177      	b.n	8000c40 <__aeabi_ddiv+0x360>
 8000950:	4659      	mov	r1, fp
 8000952:	0f72      	lsrs	r2, r6, #29
 8000954:	00c9      	lsls	r1, r1, #3
 8000956:	430a      	orrs	r2, r1
 8000958:	2180      	movs	r1, #128	@ 0x80
 800095a:	0409      	lsls	r1, r1, #16
 800095c:	4311      	orrs	r1, r2
 800095e:	468b      	mov	fp, r1
 8000960:	49bf      	ldr	r1, [pc, #764]	@ (8000c60 <__aeabi_ddiv+0x380>)
 8000962:	00f2      	lsls	r2, r6, #3
 8000964:	468c      	mov	ip, r1
 8000966:	4651      	mov	r1, sl
 8000968:	4463      	add	r3, ip
 800096a:	1acb      	subs	r3, r1, r3
 800096c:	469a      	mov	sl, r3
 800096e:	2300      	movs	r3, #0
 8000970:	9e02      	ldr	r6, [sp, #8]
 8000972:	406e      	eors	r6, r5
 8000974:	2c0f      	cmp	r4, #15
 8000976:	d827      	bhi.n	80009c8 <__aeabi_ddiv+0xe8>
 8000978:	49ba      	ldr	r1, [pc, #744]	@ (8000c64 <__aeabi_ddiv+0x384>)
 800097a:	00a4      	lsls	r4, r4, #2
 800097c:	5909      	ldr	r1, [r1, r4]
 800097e:	468f      	mov	pc, r1
 8000980:	46cb      	mov	fp, r9
 8000982:	4642      	mov	r2, r8
 8000984:	9e02      	ldr	r6, [sp, #8]
 8000986:	9b03      	ldr	r3, [sp, #12]
 8000988:	2b02      	cmp	r3, #2
 800098a:	d016      	beq.n	80009ba <__aeabi_ddiv+0xda>
 800098c:	2b03      	cmp	r3, #3
 800098e:	d100      	bne.n	8000992 <__aeabi_ddiv+0xb2>
 8000990:	e2a6      	b.n	8000ee0 <__aeabi_ddiv+0x600>
 8000992:	2b01      	cmp	r3, #1
 8000994:	d000      	beq.n	8000998 <__aeabi_ddiv+0xb8>
 8000996:	e0df      	b.n	8000b58 <__aeabi_ddiv+0x278>
 8000998:	2200      	movs	r2, #0
 800099a:	2300      	movs	r3, #0
 800099c:	2400      	movs	r4, #0
 800099e:	4690      	mov	r8, r2
 80009a0:	051b      	lsls	r3, r3, #20
 80009a2:	4323      	orrs	r3, r4
 80009a4:	07f6      	lsls	r6, r6, #31
 80009a6:	4333      	orrs	r3, r6
 80009a8:	4640      	mov	r0, r8
 80009aa:	0019      	movs	r1, r3
 80009ac:	b007      	add	sp, #28
 80009ae:	bcf0      	pop	{r4, r5, r6, r7}
 80009b0:	46bb      	mov	fp, r7
 80009b2:	46b2      	mov	sl, r6
 80009b4:	46a9      	mov	r9, r5
 80009b6:	46a0      	mov	r8, r4
 80009b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ba:	2200      	movs	r2, #0
 80009bc:	2400      	movs	r4, #0
 80009be:	4690      	mov	r8, r2
 80009c0:	4ba6      	ldr	r3, [pc, #664]	@ (8000c5c <__aeabi_ddiv+0x37c>)
 80009c2:	e7ed      	b.n	80009a0 <__aeabi_ddiv+0xc0>
 80009c4:	002e      	movs	r6, r5
 80009c6:	e7df      	b.n	8000988 <__aeabi_ddiv+0xa8>
 80009c8:	45cb      	cmp	fp, r9
 80009ca:	d200      	bcs.n	80009ce <__aeabi_ddiv+0xee>
 80009cc:	e1d4      	b.n	8000d78 <__aeabi_ddiv+0x498>
 80009ce:	d100      	bne.n	80009d2 <__aeabi_ddiv+0xf2>
 80009d0:	e1cf      	b.n	8000d72 <__aeabi_ddiv+0x492>
 80009d2:	2301      	movs	r3, #1
 80009d4:	425b      	negs	r3, r3
 80009d6:	469c      	mov	ip, r3
 80009d8:	4644      	mov	r4, r8
 80009da:	4648      	mov	r0, r9
 80009dc:	2700      	movs	r7, #0
 80009de:	44e2      	add	sl, ip
 80009e0:	465b      	mov	r3, fp
 80009e2:	0e15      	lsrs	r5, r2, #24
 80009e4:	021b      	lsls	r3, r3, #8
 80009e6:	431d      	orrs	r5, r3
 80009e8:	0c19      	lsrs	r1, r3, #16
 80009ea:	042b      	lsls	r3, r5, #16
 80009ec:	0212      	lsls	r2, r2, #8
 80009ee:	9500      	str	r5, [sp, #0]
 80009f0:	0c1d      	lsrs	r5, r3, #16
 80009f2:	4691      	mov	r9, r2
 80009f4:	9102      	str	r1, [sp, #8]
 80009f6:	9503      	str	r5, [sp, #12]
 80009f8:	f7ff fc0a 	bl	8000210 <__aeabi_uidivmod>
 80009fc:	0002      	movs	r2, r0
 80009fe:	436a      	muls	r2, r5
 8000a00:	040b      	lsls	r3, r1, #16
 8000a02:	0c21      	lsrs	r1, r4, #16
 8000a04:	4680      	mov	r8, r0
 8000a06:	4319      	orrs	r1, r3
 8000a08:	428a      	cmp	r2, r1
 8000a0a:	d909      	bls.n	8000a20 <__aeabi_ddiv+0x140>
 8000a0c:	9d00      	ldr	r5, [sp, #0]
 8000a0e:	2301      	movs	r3, #1
 8000a10:	46ac      	mov	ip, r5
 8000a12:	425b      	negs	r3, r3
 8000a14:	4461      	add	r1, ip
 8000a16:	469c      	mov	ip, r3
 8000a18:	44e0      	add	r8, ip
 8000a1a:	428d      	cmp	r5, r1
 8000a1c:	d800      	bhi.n	8000a20 <__aeabi_ddiv+0x140>
 8000a1e:	e1fb      	b.n	8000e18 <__aeabi_ddiv+0x538>
 8000a20:	1a88      	subs	r0, r1, r2
 8000a22:	9902      	ldr	r1, [sp, #8]
 8000a24:	f7ff fbf4 	bl	8000210 <__aeabi_uidivmod>
 8000a28:	9a03      	ldr	r2, [sp, #12]
 8000a2a:	0424      	lsls	r4, r4, #16
 8000a2c:	4342      	muls	r2, r0
 8000a2e:	0409      	lsls	r1, r1, #16
 8000a30:	0c24      	lsrs	r4, r4, #16
 8000a32:	0003      	movs	r3, r0
 8000a34:	430c      	orrs	r4, r1
 8000a36:	42a2      	cmp	r2, r4
 8000a38:	d906      	bls.n	8000a48 <__aeabi_ddiv+0x168>
 8000a3a:	9900      	ldr	r1, [sp, #0]
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4464      	add	r4, ip
 8000a42:	42a1      	cmp	r1, r4
 8000a44:	d800      	bhi.n	8000a48 <__aeabi_ddiv+0x168>
 8000a46:	e1e1      	b.n	8000e0c <__aeabi_ddiv+0x52c>
 8000a48:	1aa0      	subs	r0, r4, r2
 8000a4a:	4642      	mov	r2, r8
 8000a4c:	0412      	lsls	r2, r2, #16
 8000a4e:	431a      	orrs	r2, r3
 8000a50:	4693      	mov	fp, r2
 8000a52:	464b      	mov	r3, r9
 8000a54:	4659      	mov	r1, fp
 8000a56:	0c1b      	lsrs	r3, r3, #16
 8000a58:	001d      	movs	r5, r3
 8000a5a:	9304      	str	r3, [sp, #16]
 8000a5c:	040b      	lsls	r3, r1, #16
 8000a5e:	4649      	mov	r1, r9
 8000a60:	0409      	lsls	r1, r1, #16
 8000a62:	0c09      	lsrs	r1, r1, #16
 8000a64:	000c      	movs	r4, r1
 8000a66:	0c1b      	lsrs	r3, r3, #16
 8000a68:	435c      	muls	r4, r3
 8000a6a:	0c12      	lsrs	r2, r2, #16
 8000a6c:	436b      	muls	r3, r5
 8000a6e:	4688      	mov	r8, r1
 8000a70:	4351      	muls	r1, r2
 8000a72:	436a      	muls	r2, r5
 8000a74:	0c25      	lsrs	r5, r4, #16
 8000a76:	46ac      	mov	ip, r5
 8000a78:	185b      	adds	r3, r3, r1
 8000a7a:	4463      	add	r3, ip
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d903      	bls.n	8000a88 <__aeabi_ddiv+0x1a8>
 8000a80:	2180      	movs	r1, #128	@ 0x80
 8000a82:	0249      	lsls	r1, r1, #9
 8000a84:	468c      	mov	ip, r1
 8000a86:	4462      	add	r2, ip
 8000a88:	0c19      	lsrs	r1, r3, #16
 8000a8a:	0424      	lsls	r4, r4, #16
 8000a8c:	041b      	lsls	r3, r3, #16
 8000a8e:	0c24      	lsrs	r4, r4, #16
 8000a90:	188a      	adds	r2, r1, r2
 8000a92:	191c      	adds	r4, r3, r4
 8000a94:	4290      	cmp	r0, r2
 8000a96:	d302      	bcc.n	8000a9e <__aeabi_ddiv+0x1be>
 8000a98:	d116      	bne.n	8000ac8 <__aeabi_ddiv+0x1e8>
 8000a9a:	42a7      	cmp	r7, r4
 8000a9c:	d214      	bcs.n	8000ac8 <__aeabi_ddiv+0x1e8>
 8000a9e:	465b      	mov	r3, fp
 8000aa0:	9d00      	ldr	r5, [sp, #0]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	444f      	add	r7, r9
 8000aa6:	9305      	str	r3, [sp, #20]
 8000aa8:	454f      	cmp	r7, r9
 8000aaa:	419b      	sbcs	r3, r3
 8000aac:	46ac      	mov	ip, r5
 8000aae:	425b      	negs	r3, r3
 8000ab0:	4463      	add	r3, ip
 8000ab2:	18c0      	adds	r0, r0, r3
 8000ab4:	4285      	cmp	r5, r0
 8000ab6:	d300      	bcc.n	8000aba <__aeabi_ddiv+0x1da>
 8000ab8:	e1a1      	b.n	8000dfe <__aeabi_ddiv+0x51e>
 8000aba:	4282      	cmp	r2, r0
 8000abc:	d900      	bls.n	8000ac0 <__aeabi_ddiv+0x1e0>
 8000abe:	e1f6      	b.n	8000eae <__aeabi_ddiv+0x5ce>
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_ddiv+0x1e4>
 8000ac2:	e1f1      	b.n	8000ea8 <__aeabi_ddiv+0x5c8>
 8000ac4:	9b05      	ldr	r3, [sp, #20]
 8000ac6:	469b      	mov	fp, r3
 8000ac8:	1b3c      	subs	r4, r7, r4
 8000aca:	42a7      	cmp	r7, r4
 8000acc:	41bf      	sbcs	r7, r7
 8000ace:	9d00      	ldr	r5, [sp, #0]
 8000ad0:	1a80      	subs	r0, r0, r2
 8000ad2:	427f      	negs	r7, r7
 8000ad4:	1bc0      	subs	r0, r0, r7
 8000ad6:	4285      	cmp	r5, r0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_ddiv+0x1fc>
 8000ada:	e1d0      	b.n	8000e7e <__aeabi_ddiv+0x59e>
 8000adc:	9902      	ldr	r1, [sp, #8]
 8000ade:	f7ff fb97 	bl	8000210 <__aeabi_uidivmod>
 8000ae2:	9a03      	ldr	r2, [sp, #12]
 8000ae4:	040b      	lsls	r3, r1, #16
 8000ae6:	4342      	muls	r2, r0
 8000ae8:	0c21      	lsrs	r1, r4, #16
 8000aea:	0007      	movs	r7, r0
 8000aec:	4319      	orrs	r1, r3
 8000aee:	428a      	cmp	r2, r1
 8000af0:	d900      	bls.n	8000af4 <__aeabi_ddiv+0x214>
 8000af2:	e178      	b.n	8000de6 <__aeabi_ddiv+0x506>
 8000af4:	1a88      	subs	r0, r1, r2
 8000af6:	9902      	ldr	r1, [sp, #8]
 8000af8:	f7ff fb8a 	bl	8000210 <__aeabi_uidivmod>
 8000afc:	9a03      	ldr	r2, [sp, #12]
 8000afe:	0424      	lsls	r4, r4, #16
 8000b00:	4342      	muls	r2, r0
 8000b02:	0409      	lsls	r1, r1, #16
 8000b04:	0c24      	lsrs	r4, r4, #16
 8000b06:	0003      	movs	r3, r0
 8000b08:	430c      	orrs	r4, r1
 8000b0a:	42a2      	cmp	r2, r4
 8000b0c:	d900      	bls.n	8000b10 <__aeabi_ddiv+0x230>
 8000b0e:	e15d      	b.n	8000dcc <__aeabi_ddiv+0x4ec>
 8000b10:	4641      	mov	r1, r8
 8000b12:	1aa4      	subs	r4, r4, r2
 8000b14:	043a      	lsls	r2, r7, #16
 8000b16:	431a      	orrs	r2, r3
 8000b18:	9d04      	ldr	r5, [sp, #16]
 8000b1a:	0413      	lsls	r3, r2, #16
 8000b1c:	0c1b      	lsrs	r3, r3, #16
 8000b1e:	4359      	muls	r1, r3
 8000b20:	4647      	mov	r7, r8
 8000b22:	436b      	muls	r3, r5
 8000b24:	469c      	mov	ip, r3
 8000b26:	0c10      	lsrs	r0, r2, #16
 8000b28:	4347      	muls	r7, r0
 8000b2a:	0c0b      	lsrs	r3, r1, #16
 8000b2c:	44bc      	add	ip, r7
 8000b2e:	4463      	add	r3, ip
 8000b30:	4368      	muls	r0, r5
 8000b32:	429f      	cmp	r7, r3
 8000b34:	d903      	bls.n	8000b3e <__aeabi_ddiv+0x25e>
 8000b36:	2580      	movs	r5, #128	@ 0x80
 8000b38:	026d      	lsls	r5, r5, #9
 8000b3a:	46ac      	mov	ip, r5
 8000b3c:	4460      	add	r0, ip
 8000b3e:	0c1f      	lsrs	r7, r3, #16
 8000b40:	0409      	lsls	r1, r1, #16
 8000b42:	041b      	lsls	r3, r3, #16
 8000b44:	0c09      	lsrs	r1, r1, #16
 8000b46:	183f      	adds	r7, r7, r0
 8000b48:	185b      	adds	r3, r3, r1
 8000b4a:	42bc      	cmp	r4, r7
 8000b4c:	d200      	bcs.n	8000b50 <__aeabi_ddiv+0x270>
 8000b4e:	e102      	b.n	8000d56 <__aeabi_ddiv+0x476>
 8000b50:	d100      	bne.n	8000b54 <__aeabi_ddiv+0x274>
 8000b52:	e0fd      	b.n	8000d50 <__aeabi_ddiv+0x470>
 8000b54:	2301      	movs	r3, #1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	4b43      	ldr	r3, [pc, #268]	@ (8000c68 <__aeabi_ddiv+0x388>)
 8000b5a:	4453      	add	r3, sl
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	dc00      	bgt.n	8000b62 <__aeabi_ddiv+0x282>
 8000b60:	e0ae      	b.n	8000cc0 <__aeabi_ddiv+0x3e0>
 8000b62:	0751      	lsls	r1, r2, #29
 8000b64:	d000      	beq.n	8000b68 <__aeabi_ddiv+0x288>
 8000b66:	e198      	b.n	8000e9a <__aeabi_ddiv+0x5ba>
 8000b68:	4659      	mov	r1, fp
 8000b6a:	01c9      	lsls	r1, r1, #7
 8000b6c:	d506      	bpl.n	8000b7c <__aeabi_ddiv+0x29c>
 8000b6e:	4659      	mov	r1, fp
 8000b70:	4b3e      	ldr	r3, [pc, #248]	@ (8000c6c <__aeabi_ddiv+0x38c>)
 8000b72:	4019      	ands	r1, r3
 8000b74:	2380      	movs	r3, #128	@ 0x80
 8000b76:	468b      	mov	fp, r1
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	4453      	add	r3, sl
 8000b7c:	493c      	ldr	r1, [pc, #240]	@ (8000c70 <__aeabi_ddiv+0x390>)
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	dd00      	ble.n	8000b84 <__aeabi_ddiv+0x2a4>
 8000b82:	e71a      	b.n	80009ba <__aeabi_ddiv+0xda>
 8000b84:	4659      	mov	r1, fp
 8000b86:	08d2      	lsrs	r2, r2, #3
 8000b88:	0749      	lsls	r1, r1, #29
 8000b8a:	4311      	orrs	r1, r2
 8000b8c:	465a      	mov	r2, fp
 8000b8e:	055b      	lsls	r3, r3, #21
 8000b90:	0254      	lsls	r4, r2, #9
 8000b92:	4688      	mov	r8, r1
 8000b94:	0b24      	lsrs	r4, r4, #12
 8000b96:	0d5b      	lsrs	r3, r3, #21
 8000b98:	e702      	b.n	80009a0 <__aeabi_ddiv+0xc0>
 8000b9a:	465a      	mov	r2, fp
 8000b9c:	9b00      	ldr	r3, [sp, #0]
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_ddiv+0x2c4>
 8000ba2:	e07e      	b.n	8000ca2 <__aeabi_ddiv+0x3c2>
 8000ba4:	465b      	mov	r3, fp
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d100      	bne.n	8000bac <__aeabi_ddiv+0x2cc>
 8000baa:	e100      	b.n	8000dae <__aeabi_ddiv+0x4ce>
 8000bac:	4658      	mov	r0, fp
 8000bae:	f000 fd73 	bl	8001698 <__clzsi2>
 8000bb2:	0002      	movs	r2, r0
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	3a0b      	subs	r2, #11
 8000bb8:	271d      	movs	r7, #29
 8000bba:	9e00      	ldr	r6, [sp, #0]
 8000bbc:	1aba      	subs	r2, r7, r2
 8000bbe:	0019      	movs	r1, r3
 8000bc0:	4658      	mov	r0, fp
 8000bc2:	40d6      	lsrs	r6, r2
 8000bc4:	3908      	subs	r1, #8
 8000bc6:	4088      	lsls	r0, r1
 8000bc8:	0032      	movs	r2, r6
 8000bca:	4302      	orrs	r2, r0
 8000bcc:	4693      	mov	fp, r2
 8000bce:	9a00      	ldr	r2, [sp, #0]
 8000bd0:	408a      	lsls	r2, r1
 8000bd2:	4928      	ldr	r1, [pc, #160]	@ (8000c74 <__aeabi_ddiv+0x394>)
 8000bd4:	4453      	add	r3, sl
 8000bd6:	468a      	mov	sl, r1
 8000bd8:	449a      	add	sl, r3
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e6c8      	b.n	8000970 <__aeabi_ddiv+0x90>
 8000bde:	465b      	mov	r3, fp
 8000be0:	4303      	orrs	r3, r0
 8000be2:	4699      	mov	r9, r3
 8000be4:	d056      	beq.n	8000c94 <__aeabi_ddiv+0x3b4>
 8000be6:	465b      	mov	r3, fp
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d100      	bne.n	8000bee <__aeabi_ddiv+0x30e>
 8000bec:	e0cd      	b.n	8000d8a <__aeabi_ddiv+0x4aa>
 8000bee:	4658      	mov	r0, fp
 8000bf0:	f000 fd52 	bl	8001698 <__clzsi2>
 8000bf4:	230b      	movs	r3, #11
 8000bf6:	425b      	negs	r3, r3
 8000bf8:	469c      	mov	ip, r3
 8000bfa:	0002      	movs	r2, r0
 8000bfc:	4484      	add	ip, r0
 8000bfe:	4666      	mov	r6, ip
 8000c00:	231d      	movs	r3, #29
 8000c02:	1b9b      	subs	r3, r3, r6
 8000c04:	0026      	movs	r6, r4
 8000c06:	0011      	movs	r1, r2
 8000c08:	4658      	mov	r0, fp
 8000c0a:	40de      	lsrs	r6, r3
 8000c0c:	3908      	subs	r1, #8
 8000c0e:	4088      	lsls	r0, r1
 8000c10:	0033      	movs	r3, r6
 8000c12:	4303      	orrs	r3, r0
 8000c14:	4699      	mov	r9, r3
 8000c16:	0023      	movs	r3, r4
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	4698      	mov	r8, r3
 8000c1c:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <__aeabi_ddiv+0x398>)
 8000c1e:	2400      	movs	r4, #0
 8000c20:	1a9b      	subs	r3, r3, r2
 8000c22:	469a      	mov	sl, r3
 8000c24:	2300      	movs	r3, #0
 8000c26:	9303      	str	r3, [sp, #12]
 8000c28:	e682      	b.n	8000930 <__aeabi_ddiv+0x50>
 8000c2a:	465a      	mov	r2, fp
 8000c2c:	4302      	orrs	r2, r0
 8000c2e:	4691      	mov	r9, r2
 8000c30:	d12a      	bne.n	8000c88 <__aeabi_ddiv+0x3a8>
 8000c32:	2200      	movs	r2, #0
 8000c34:	469a      	mov	sl, r3
 8000c36:	2302      	movs	r3, #2
 8000c38:	4690      	mov	r8, r2
 8000c3a:	2408      	movs	r4, #8
 8000c3c:	9303      	str	r3, [sp, #12]
 8000c3e:	e677      	b.n	8000930 <__aeabi_ddiv+0x50>
 8000c40:	465a      	mov	r2, fp
 8000c42:	9b00      	ldr	r3, [sp, #0]
 8000c44:	431a      	orrs	r2, r3
 8000c46:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <__aeabi_ddiv+0x39c>)
 8000c48:	469c      	mov	ip, r3
 8000c4a:	44e2      	add	sl, ip
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	d117      	bne.n	8000c80 <__aeabi_ddiv+0x3a0>
 8000c50:	2302      	movs	r3, #2
 8000c52:	431c      	orrs	r4, r3
 8000c54:	2300      	movs	r3, #0
 8000c56:	469b      	mov	fp, r3
 8000c58:	3302      	adds	r3, #2
 8000c5a:	e689      	b.n	8000970 <__aeabi_ddiv+0x90>
 8000c5c:	000007ff 	.word	0x000007ff
 8000c60:	fffffc01 	.word	0xfffffc01
 8000c64:	08005b20 	.word	0x08005b20
 8000c68:	000003ff 	.word	0x000003ff
 8000c6c:	feffffff 	.word	0xfeffffff
 8000c70:	000007fe 	.word	0x000007fe
 8000c74:	000003f3 	.word	0x000003f3
 8000c78:	fffffc0d 	.word	0xfffffc0d
 8000c7c:	fffff801 	.word	0xfffff801
 8000c80:	2303      	movs	r3, #3
 8000c82:	0032      	movs	r2, r6
 8000c84:	431c      	orrs	r4, r3
 8000c86:	e673      	b.n	8000970 <__aeabi_ddiv+0x90>
 8000c88:	469a      	mov	sl, r3
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	46d9      	mov	r9, fp
 8000c8e:	240c      	movs	r4, #12
 8000c90:	9303      	str	r3, [sp, #12]
 8000c92:	e64d      	b.n	8000930 <__aeabi_ddiv+0x50>
 8000c94:	2300      	movs	r3, #0
 8000c96:	4698      	mov	r8, r3
 8000c98:	469a      	mov	sl, r3
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	2404      	movs	r4, #4
 8000c9e:	9303      	str	r3, [sp, #12]
 8000ca0:	e646      	b.n	8000930 <__aeabi_ddiv+0x50>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	431c      	orrs	r4, r3
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	469b      	mov	fp, r3
 8000caa:	3301      	adds	r3, #1
 8000cac:	e660      	b.n	8000970 <__aeabi_ddiv+0x90>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	2480      	movs	r4, #128	@ 0x80
 8000cb2:	4698      	mov	r8, r3
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	4b92      	ldr	r3, [pc, #584]	@ (8000f00 <__aeabi_ddiv+0x620>)
 8000cb8:	0324      	lsls	r4, r4, #12
 8000cba:	e671      	b.n	80009a0 <__aeabi_ddiv+0xc0>
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4252      	negs	r2, r2
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	1ac9      	subs	r1, r1, r3
 8000cc4:	2938      	cmp	r1, #56	@ 0x38
 8000cc6:	dd00      	ble.n	8000cca <__aeabi_ddiv+0x3ea>
 8000cc8:	e666      	b.n	8000998 <__aeabi_ddiv+0xb8>
 8000cca:	291f      	cmp	r1, #31
 8000ccc:	dc00      	bgt.n	8000cd0 <__aeabi_ddiv+0x3f0>
 8000cce:	e0ab      	b.n	8000e28 <__aeabi_ddiv+0x548>
 8000cd0:	201f      	movs	r0, #31
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	1ac3      	subs	r3, r0, r3
 8000cd6:	4658      	mov	r0, fp
 8000cd8:	40d8      	lsrs	r0, r3
 8000cda:	0003      	movs	r3, r0
 8000cdc:	2920      	cmp	r1, #32
 8000cde:	d004      	beq.n	8000cea <__aeabi_ddiv+0x40a>
 8000ce0:	4658      	mov	r0, fp
 8000ce2:	4988      	ldr	r1, [pc, #544]	@ (8000f04 <__aeabi_ddiv+0x624>)
 8000ce4:	4451      	add	r1, sl
 8000ce6:	4088      	lsls	r0, r1
 8000ce8:	4302      	orrs	r2, r0
 8000cea:	1e51      	subs	r1, r2, #1
 8000cec:	418a      	sbcs	r2, r1
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	2400      	movs	r4, #0
 8000cf6:	4011      	ands	r1, r2
 8000cf8:	4213      	tst	r3, r2
 8000cfa:	d00c      	beq.n	8000d16 <__aeabi_ddiv+0x436>
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	4013      	ands	r3, r2
 8000d00:	2b04      	cmp	r3, #4
 8000d02:	d100      	bne.n	8000d06 <__aeabi_ddiv+0x426>
 8000d04:	e0f9      	b.n	8000efa <__aeabi_ddiv+0x61a>
 8000d06:	1d11      	adds	r1, r2, #4
 8000d08:	4291      	cmp	r1, r2
 8000d0a:	419b      	sbcs	r3, r3
 8000d0c:	000a      	movs	r2, r1
 8000d0e:	425b      	negs	r3, r3
 8000d10:	0759      	lsls	r1, r3, #29
 8000d12:	025b      	lsls	r3, r3, #9
 8000d14:	0b1c      	lsrs	r4, r3, #12
 8000d16:	08d2      	lsrs	r2, r2, #3
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	4690      	mov	r8, r2
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e63f      	b.n	80009a0 <__aeabi_ddiv+0xc0>
 8000d20:	2480      	movs	r4, #128	@ 0x80
 8000d22:	464b      	mov	r3, r9
 8000d24:	0324      	lsls	r4, r4, #12
 8000d26:	4223      	tst	r3, r4
 8000d28:	d009      	beq.n	8000d3e <__aeabi_ddiv+0x45e>
 8000d2a:	465b      	mov	r3, fp
 8000d2c:	4223      	tst	r3, r4
 8000d2e:	d106      	bne.n	8000d3e <__aeabi_ddiv+0x45e>
 8000d30:	431c      	orrs	r4, r3
 8000d32:	0324      	lsls	r4, r4, #12
 8000d34:	002e      	movs	r6, r5
 8000d36:	4690      	mov	r8, r2
 8000d38:	4b71      	ldr	r3, [pc, #452]	@ (8000f00 <__aeabi_ddiv+0x620>)
 8000d3a:	0b24      	lsrs	r4, r4, #12
 8000d3c:	e630      	b.n	80009a0 <__aeabi_ddiv+0xc0>
 8000d3e:	2480      	movs	r4, #128	@ 0x80
 8000d40:	464b      	mov	r3, r9
 8000d42:	0324      	lsls	r4, r4, #12
 8000d44:	431c      	orrs	r4, r3
 8000d46:	0324      	lsls	r4, r4, #12
 8000d48:	9e02      	ldr	r6, [sp, #8]
 8000d4a:	4b6d      	ldr	r3, [pc, #436]	@ (8000f00 <__aeabi_ddiv+0x620>)
 8000d4c:	0b24      	lsrs	r4, r4, #12
 8000d4e:	e627      	b.n	80009a0 <__aeabi_ddiv+0xc0>
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d100      	bne.n	8000d56 <__aeabi_ddiv+0x476>
 8000d54:	e700      	b.n	8000b58 <__aeabi_ddiv+0x278>
 8000d56:	9800      	ldr	r0, [sp, #0]
 8000d58:	1e51      	subs	r1, r2, #1
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	4464      	add	r4, ip
 8000d5e:	4284      	cmp	r4, r0
 8000d60:	d200      	bcs.n	8000d64 <__aeabi_ddiv+0x484>
 8000d62:	e084      	b.n	8000e6e <__aeabi_ddiv+0x58e>
 8000d64:	42bc      	cmp	r4, r7
 8000d66:	d200      	bcs.n	8000d6a <__aeabi_ddiv+0x48a>
 8000d68:	e0ae      	b.n	8000ec8 <__aeabi_ddiv+0x5e8>
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_ddiv+0x48e>
 8000d6c:	e0c1      	b.n	8000ef2 <__aeabi_ddiv+0x612>
 8000d6e:	000a      	movs	r2, r1
 8000d70:	e6f0      	b.n	8000b54 <__aeabi_ddiv+0x274>
 8000d72:	4542      	cmp	r2, r8
 8000d74:	d900      	bls.n	8000d78 <__aeabi_ddiv+0x498>
 8000d76:	e62c      	b.n	80009d2 <__aeabi_ddiv+0xf2>
 8000d78:	464b      	mov	r3, r9
 8000d7a:	07dc      	lsls	r4, r3, #31
 8000d7c:	0858      	lsrs	r0, r3, #1
 8000d7e:	4643      	mov	r3, r8
 8000d80:	085b      	lsrs	r3, r3, #1
 8000d82:	431c      	orrs	r4, r3
 8000d84:	4643      	mov	r3, r8
 8000d86:	07df      	lsls	r7, r3, #31
 8000d88:	e62a      	b.n	80009e0 <__aeabi_ddiv+0x100>
 8000d8a:	f000 fc85 	bl	8001698 <__clzsi2>
 8000d8e:	2315      	movs	r3, #21
 8000d90:	469c      	mov	ip, r3
 8000d92:	4484      	add	ip, r0
 8000d94:	0002      	movs	r2, r0
 8000d96:	4663      	mov	r3, ip
 8000d98:	3220      	adds	r2, #32
 8000d9a:	2b1c      	cmp	r3, #28
 8000d9c:	dc00      	bgt.n	8000da0 <__aeabi_ddiv+0x4c0>
 8000d9e:	e72e      	b.n	8000bfe <__aeabi_ddiv+0x31e>
 8000da0:	0023      	movs	r3, r4
 8000da2:	3808      	subs	r0, #8
 8000da4:	4083      	lsls	r3, r0
 8000da6:	4699      	mov	r9, r3
 8000da8:	2300      	movs	r3, #0
 8000daa:	4698      	mov	r8, r3
 8000dac:	e736      	b.n	8000c1c <__aeabi_ddiv+0x33c>
 8000dae:	f000 fc73 	bl	8001698 <__clzsi2>
 8000db2:	0002      	movs	r2, r0
 8000db4:	0003      	movs	r3, r0
 8000db6:	3215      	adds	r2, #21
 8000db8:	3320      	adds	r3, #32
 8000dba:	2a1c      	cmp	r2, #28
 8000dbc:	dc00      	bgt.n	8000dc0 <__aeabi_ddiv+0x4e0>
 8000dbe:	e6fb      	b.n	8000bb8 <__aeabi_ddiv+0x2d8>
 8000dc0:	9900      	ldr	r1, [sp, #0]
 8000dc2:	3808      	subs	r0, #8
 8000dc4:	4081      	lsls	r1, r0
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	468b      	mov	fp, r1
 8000dca:	e702      	b.n	8000bd2 <__aeabi_ddiv+0x2f2>
 8000dcc:	9900      	ldr	r1, [sp, #0]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	4464      	add	r4, ip
 8000dd4:	42a1      	cmp	r1, r4
 8000dd6:	d900      	bls.n	8000dda <__aeabi_ddiv+0x4fa>
 8000dd8:	e69a      	b.n	8000b10 <__aeabi_ddiv+0x230>
 8000dda:	42a2      	cmp	r2, r4
 8000ddc:	d800      	bhi.n	8000de0 <__aeabi_ddiv+0x500>
 8000dde:	e697      	b.n	8000b10 <__aeabi_ddiv+0x230>
 8000de0:	1e83      	subs	r3, r0, #2
 8000de2:	4464      	add	r4, ip
 8000de4:	e694      	b.n	8000b10 <__aeabi_ddiv+0x230>
 8000de6:	46ac      	mov	ip, r5
 8000de8:	4461      	add	r1, ip
 8000dea:	3f01      	subs	r7, #1
 8000dec:	428d      	cmp	r5, r1
 8000dee:	d900      	bls.n	8000df2 <__aeabi_ddiv+0x512>
 8000df0:	e680      	b.n	8000af4 <__aeabi_ddiv+0x214>
 8000df2:	428a      	cmp	r2, r1
 8000df4:	d800      	bhi.n	8000df8 <__aeabi_ddiv+0x518>
 8000df6:	e67d      	b.n	8000af4 <__aeabi_ddiv+0x214>
 8000df8:	1e87      	subs	r7, r0, #2
 8000dfa:	4461      	add	r1, ip
 8000dfc:	e67a      	b.n	8000af4 <__aeabi_ddiv+0x214>
 8000dfe:	4285      	cmp	r5, r0
 8000e00:	d000      	beq.n	8000e04 <__aeabi_ddiv+0x524>
 8000e02:	e65f      	b.n	8000ac4 <__aeabi_ddiv+0x1e4>
 8000e04:	45b9      	cmp	r9, r7
 8000e06:	d900      	bls.n	8000e0a <__aeabi_ddiv+0x52a>
 8000e08:	e65c      	b.n	8000ac4 <__aeabi_ddiv+0x1e4>
 8000e0a:	e656      	b.n	8000aba <__aeabi_ddiv+0x1da>
 8000e0c:	42a2      	cmp	r2, r4
 8000e0e:	d800      	bhi.n	8000e12 <__aeabi_ddiv+0x532>
 8000e10:	e61a      	b.n	8000a48 <__aeabi_ddiv+0x168>
 8000e12:	1e83      	subs	r3, r0, #2
 8000e14:	4464      	add	r4, ip
 8000e16:	e617      	b.n	8000a48 <__aeabi_ddiv+0x168>
 8000e18:	428a      	cmp	r2, r1
 8000e1a:	d800      	bhi.n	8000e1e <__aeabi_ddiv+0x53e>
 8000e1c:	e600      	b.n	8000a20 <__aeabi_ddiv+0x140>
 8000e1e:	46ac      	mov	ip, r5
 8000e20:	1e83      	subs	r3, r0, #2
 8000e22:	4698      	mov	r8, r3
 8000e24:	4461      	add	r1, ip
 8000e26:	e5fb      	b.n	8000a20 <__aeabi_ddiv+0x140>
 8000e28:	4837      	ldr	r0, [pc, #220]	@ (8000f08 <__aeabi_ddiv+0x628>)
 8000e2a:	0014      	movs	r4, r2
 8000e2c:	4450      	add	r0, sl
 8000e2e:	4082      	lsls	r2, r0
 8000e30:	465b      	mov	r3, fp
 8000e32:	0017      	movs	r7, r2
 8000e34:	4083      	lsls	r3, r0
 8000e36:	40cc      	lsrs	r4, r1
 8000e38:	1e7a      	subs	r2, r7, #1
 8000e3a:	4197      	sbcs	r7, r2
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	433b      	orrs	r3, r7
 8000e40:	001a      	movs	r2, r3
 8000e42:	465b      	mov	r3, fp
 8000e44:	40cb      	lsrs	r3, r1
 8000e46:	0751      	lsls	r1, r2, #29
 8000e48:	d009      	beq.n	8000e5e <__aeabi_ddiv+0x57e>
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	4011      	ands	r1, r2
 8000e4e:	2904      	cmp	r1, #4
 8000e50:	d005      	beq.n	8000e5e <__aeabi_ddiv+0x57e>
 8000e52:	1d11      	adds	r1, r2, #4
 8000e54:	4291      	cmp	r1, r2
 8000e56:	4192      	sbcs	r2, r2
 8000e58:	4252      	negs	r2, r2
 8000e5a:	189b      	adds	r3, r3, r2
 8000e5c:	000a      	movs	r2, r1
 8000e5e:	0219      	lsls	r1, r3, #8
 8000e60:	d400      	bmi.n	8000e64 <__aeabi_ddiv+0x584>
 8000e62:	e755      	b.n	8000d10 <__aeabi_ddiv+0x430>
 8000e64:	2200      	movs	r2, #0
 8000e66:	2301      	movs	r3, #1
 8000e68:	2400      	movs	r4, #0
 8000e6a:	4690      	mov	r8, r2
 8000e6c:	e598      	b.n	80009a0 <__aeabi_ddiv+0xc0>
 8000e6e:	000a      	movs	r2, r1
 8000e70:	42bc      	cmp	r4, r7
 8000e72:	d000      	beq.n	8000e76 <__aeabi_ddiv+0x596>
 8000e74:	e66e      	b.n	8000b54 <__aeabi_ddiv+0x274>
 8000e76:	454b      	cmp	r3, r9
 8000e78:	d000      	beq.n	8000e7c <__aeabi_ddiv+0x59c>
 8000e7a:	e66b      	b.n	8000b54 <__aeabi_ddiv+0x274>
 8000e7c:	e66c      	b.n	8000b58 <__aeabi_ddiv+0x278>
 8000e7e:	4b23      	ldr	r3, [pc, #140]	@ (8000f0c <__aeabi_ddiv+0x62c>)
 8000e80:	4a23      	ldr	r2, [pc, #140]	@ (8000f10 <__aeabi_ddiv+0x630>)
 8000e82:	4453      	add	r3, sl
 8000e84:	4592      	cmp	sl, r2
 8000e86:	da00      	bge.n	8000e8a <__aeabi_ddiv+0x5aa>
 8000e88:	e718      	b.n	8000cbc <__aeabi_ddiv+0x3dc>
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	4249      	negs	r1, r1
 8000e8e:	1d0a      	adds	r2, r1, #4
 8000e90:	428a      	cmp	r2, r1
 8000e92:	4189      	sbcs	r1, r1
 8000e94:	4249      	negs	r1, r1
 8000e96:	448b      	add	fp, r1
 8000e98:	e666      	b.n	8000b68 <__aeabi_ddiv+0x288>
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	4011      	ands	r1, r2
 8000e9e:	2904      	cmp	r1, #4
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_ddiv+0x5c4>
 8000ea2:	e661      	b.n	8000b68 <__aeabi_ddiv+0x288>
 8000ea4:	0011      	movs	r1, r2
 8000ea6:	e7f2      	b.n	8000e8e <__aeabi_ddiv+0x5ae>
 8000ea8:	42bc      	cmp	r4, r7
 8000eaa:	d800      	bhi.n	8000eae <__aeabi_ddiv+0x5ce>
 8000eac:	e60a      	b.n	8000ac4 <__aeabi_ddiv+0x1e4>
 8000eae:	2302      	movs	r3, #2
 8000eb0:	425b      	negs	r3, r3
 8000eb2:	469c      	mov	ip, r3
 8000eb4:	9900      	ldr	r1, [sp, #0]
 8000eb6:	444f      	add	r7, r9
 8000eb8:	454f      	cmp	r7, r9
 8000eba:	419b      	sbcs	r3, r3
 8000ebc:	44e3      	add	fp, ip
 8000ebe:	468c      	mov	ip, r1
 8000ec0:	425b      	negs	r3, r3
 8000ec2:	4463      	add	r3, ip
 8000ec4:	18c0      	adds	r0, r0, r3
 8000ec6:	e5ff      	b.n	8000ac8 <__aeabi_ddiv+0x1e8>
 8000ec8:	4649      	mov	r1, r9
 8000eca:	9d00      	ldr	r5, [sp, #0]
 8000ecc:	0048      	lsls	r0, r1, #1
 8000ece:	4548      	cmp	r0, r9
 8000ed0:	4189      	sbcs	r1, r1
 8000ed2:	46ac      	mov	ip, r5
 8000ed4:	4249      	negs	r1, r1
 8000ed6:	4461      	add	r1, ip
 8000ed8:	4681      	mov	r9, r0
 8000eda:	3a02      	subs	r2, #2
 8000edc:	1864      	adds	r4, r4, r1
 8000ede:	e7c7      	b.n	8000e70 <__aeabi_ddiv+0x590>
 8000ee0:	2480      	movs	r4, #128	@ 0x80
 8000ee2:	465b      	mov	r3, fp
 8000ee4:	0324      	lsls	r4, r4, #12
 8000ee6:	431c      	orrs	r4, r3
 8000ee8:	0324      	lsls	r4, r4, #12
 8000eea:	4690      	mov	r8, r2
 8000eec:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <__aeabi_ddiv+0x620>)
 8000eee:	0b24      	lsrs	r4, r4, #12
 8000ef0:	e556      	b.n	80009a0 <__aeabi_ddiv+0xc0>
 8000ef2:	4599      	cmp	r9, r3
 8000ef4:	d3e8      	bcc.n	8000ec8 <__aeabi_ddiv+0x5e8>
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	e7bd      	b.n	8000e76 <__aeabi_ddiv+0x596>
 8000efa:	2300      	movs	r3, #0
 8000efc:	e708      	b.n	8000d10 <__aeabi_ddiv+0x430>
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	000007ff 	.word	0x000007ff
 8000f04:	0000043e 	.word	0x0000043e
 8000f08:	0000041e 	.word	0x0000041e
 8000f0c:	000003ff 	.word	0x000003ff
 8000f10:	fffffc02 	.word	0xfffffc02

08000f14 <__aeabi_dmul>:
 8000f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f16:	4657      	mov	r7, sl
 8000f18:	46de      	mov	lr, fp
 8000f1a:	464e      	mov	r6, r9
 8000f1c:	4645      	mov	r5, r8
 8000f1e:	b5e0      	push	{r5, r6, r7, lr}
 8000f20:	001f      	movs	r7, r3
 8000f22:	030b      	lsls	r3, r1, #12
 8000f24:	0b1b      	lsrs	r3, r3, #12
 8000f26:	0016      	movs	r6, r2
 8000f28:	469a      	mov	sl, r3
 8000f2a:	0fca      	lsrs	r2, r1, #31
 8000f2c:	004b      	lsls	r3, r1, #1
 8000f2e:	0004      	movs	r4, r0
 8000f30:	4693      	mov	fp, r2
 8000f32:	b087      	sub	sp, #28
 8000f34:	0d5b      	lsrs	r3, r3, #21
 8000f36:	d100      	bne.n	8000f3a <__aeabi_dmul+0x26>
 8000f38:	e0d5      	b.n	80010e6 <__aeabi_dmul+0x1d2>
 8000f3a:	4abb      	ldr	r2, [pc, #748]	@ (8001228 <__aeabi_dmul+0x314>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_dmul+0x2e>
 8000f40:	e0f8      	b.n	8001134 <__aeabi_dmul+0x220>
 8000f42:	4651      	mov	r1, sl
 8000f44:	0f42      	lsrs	r2, r0, #29
 8000f46:	00c9      	lsls	r1, r1, #3
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	2180      	movs	r1, #128	@ 0x80
 8000f4c:	0409      	lsls	r1, r1, #16
 8000f4e:	4311      	orrs	r1, r2
 8000f50:	00c2      	lsls	r2, r0, #3
 8000f52:	4691      	mov	r9, r2
 8000f54:	4ab5      	ldr	r2, [pc, #724]	@ (800122c <__aeabi_dmul+0x318>)
 8000f56:	468a      	mov	sl, r1
 8000f58:	189d      	adds	r5, r3, r2
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	4698      	mov	r8, r3
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	033c      	lsls	r4, r7, #12
 8000f62:	007b      	lsls	r3, r7, #1
 8000f64:	0ffa      	lsrs	r2, r7, #31
 8000f66:	0030      	movs	r0, r6
 8000f68:	0b24      	lsrs	r4, r4, #12
 8000f6a:	0d5b      	lsrs	r3, r3, #21
 8000f6c:	9200      	str	r2, [sp, #0]
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_dmul+0x5e>
 8000f70:	e096      	b.n	80010a0 <__aeabi_dmul+0x18c>
 8000f72:	4aad      	ldr	r2, [pc, #692]	@ (8001228 <__aeabi_dmul+0x314>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d031      	beq.n	8000fdc <__aeabi_dmul+0xc8>
 8000f78:	0f72      	lsrs	r2, r6, #29
 8000f7a:	00e4      	lsls	r4, r4, #3
 8000f7c:	4322      	orrs	r2, r4
 8000f7e:	2480      	movs	r4, #128	@ 0x80
 8000f80:	0424      	lsls	r4, r4, #16
 8000f82:	4314      	orrs	r4, r2
 8000f84:	4aa9      	ldr	r2, [pc, #676]	@ (800122c <__aeabi_dmul+0x318>)
 8000f86:	00f0      	lsls	r0, r6, #3
 8000f88:	4694      	mov	ip, r2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	195b      	adds	r3, r3, r5
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	9201      	str	r2, [sp, #4]
 8000f92:	4642      	mov	r2, r8
 8000f94:	2600      	movs	r6, #0
 8000f96:	2a0a      	cmp	r2, #10
 8000f98:	dc42      	bgt.n	8001020 <__aeabi_dmul+0x10c>
 8000f9a:	465a      	mov	r2, fp
 8000f9c:	9900      	ldr	r1, [sp, #0]
 8000f9e:	404a      	eors	r2, r1
 8000fa0:	4693      	mov	fp, r2
 8000fa2:	4642      	mov	r2, r8
 8000fa4:	2a02      	cmp	r2, #2
 8000fa6:	dc32      	bgt.n	800100e <__aeabi_dmul+0xfa>
 8000fa8:	3a01      	subs	r2, #1
 8000faa:	2a01      	cmp	r2, #1
 8000fac:	d900      	bls.n	8000fb0 <__aeabi_dmul+0x9c>
 8000fae:	e149      	b.n	8001244 <__aeabi_dmul+0x330>
 8000fb0:	2e02      	cmp	r6, #2
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_dmul+0xa2>
 8000fb4:	e0ca      	b.n	800114c <__aeabi_dmul+0x238>
 8000fb6:	2e01      	cmp	r6, #1
 8000fb8:	d13d      	bne.n	8001036 <__aeabi_dmul+0x122>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	2400      	movs	r4, #0
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	0010      	movs	r0, r2
 8000fc2:	465a      	mov	r2, fp
 8000fc4:	051b      	lsls	r3, r3, #20
 8000fc6:	4323      	orrs	r3, r4
 8000fc8:	07d2      	lsls	r2, r2, #31
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	0019      	movs	r1, r3
 8000fce:	b007      	add	sp, #28
 8000fd0:	bcf0      	pop	{r4, r5, r6, r7}
 8000fd2:	46bb      	mov	fp, r7
 8000fd4:	46b2      	mov	sl, r6
 8000fd6:	46a9      	mov	r9, r5
 8000fd8:	46a0      	mov	r8, r4
 8000fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fdc:	4b92      	ldr	r3, [pc, #584]	@ (8001228 <__aeabi_dmul+0x314>)
 8000fde:	4326      	orrs	r6, r4
 8000fe0:	18eb      	adds	r3, r5, r3
 8000fe2:	2e00      	cmp	r6, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dmul+0xd4>
 8000fe6:	e0bb      	b.n	8001160 <__aeabi_dmul+0x24c>
 8000fe8:	2203      	movs	r2, #3
 8000fea:	4641      	mov	r1, r8
 8000fec:	4311      	orrs	r1, r2
 8000fee:	465a      	mov	r2, fp
 8000ff0:	4688      	mov	r8, r1
 8000ff2:	9900      	ldr	r1, [sp, #0]
 8000ff4:	404a      	eors	r2, r1
 8000ff6:	2180      	movs	r1, #128	@ 0x80
 8000ff8:	0109      	lsls	r1, r1, #4
 8000ffa:	468c      	mov	ip, r1
 8000ffc:	0029      	movs	r1, r5
 8000ffe:	4461      	add	r1, ip
 8001000:	9101      	str	r1, [sp, #4]
 8001002:	4641      	mov	r1, r8
 8001004:	290a      	cmp	r1, #10
 8001006:	dd00      	ble.n	800100a <__aeabi_dmul+0xf6>
 8001008:	e233      	b.n	8001472 <__aeabi_dmul+0x55e>
 800100a:	4693      	mov	fp, r2
 800100c:	2603      	movs	r6, #3
 800100e:	4642      	mov	r2, r8
 8001010:	2701      	movs	r7, #1
 8001012:	4097      	lsls	r7, r2
 8001014:	21a6      	movs	r1, #166	@ 0xa6
 8001016:	003a      	movs	r2, r7
 8001018:	00c9      	lsls	r1, r1, #3
 800101a:	400a      	ands	r2, r1
 800101c:	420f      	tst	r7, r1
 800101e:	d031      	beq.n	8001084 <__aeabi_dmul+0x170>
 8001020:	9e02      	ldr	r6, [sp, #8]
 8001022:	2e02      	cmp	r6, #2
 8001024:	d100      	bne.n	8001028 <__aeabi_dmul+0x114>
 8001026:	e235      	b.n	8001494 <__aeabi_dmul+0x580>
 8001028:	2e03      	cmp	r6, #3
 800102a:	d100      	bne.n	800102e <__aeabi_dmul+0x11a>
 800102c:	e1d2      	b.n	80013d4 <__aeabi_dmul+0x4c0>
 800102e:	4654      	mov	r4, sl
 8001030:	4648      	mov	r0, r9
 8001032:	2e01      	cmp	r6, #1
 8001034:	d0c1      	beq.n	8000fba <__aeabi_dmul+0xa6>
 8001036:	9a01      	ldr	r2, [sp, #4]
 8001038:	4b7d      	ldr	r3, [pc, #500]	@ (8001230 <__aeabi_dmul+0x31c>)
 800103a:	4694      	mov	ip, r2
 800103c:	4463      	add	r3, ip
 800103e:	2b00      	cmp	r3, #0
 8001040:	dc00      	bgt.n	8001044 <__aeabi_dmul+0x130>
 8001042:	e0c0      	b.n	80011c6 <__aeabi_dmul+0x2b2>
 8001044:	0742      	lsls	r2, r0, #29
 8001046:	d009      	beq.n	800105c <__aeabi_dmul+0x148>
 8001048:	220f      	movs	r2, #15
 800104a:	4002      	ands	r2, r0
 800104c:	2a04      	cmp	r2, #4
 800104e:	d005      	beq.n	800105c <__aeabi_dmul+0x148>
 8001050:	1d02      	adds	r2, r0, #4
 8001052:	4282      	cmp	r2, r0
 8001054:	4180      	sbcs	r0, r0
 8001056:	4240      	negs	r0, r0
 8001058:	1824      	adds	r4, r4, r0
 800105a:	0010      	movs	r0, r2
 800105c:	01e2      	lsls	r2, r4, #7
 800105e:	d506      	bpl.n	800106e <__aeabi_dmul+0x15a>
 8001060:	4b74      	ldr	r3, [pc, #464]	@ (8001234 <__aeabi_dmul+0x320>)
 8001062:	9a01      	ldr	r2, [sp, #4]
 8001064:	401c      	ands	r4, r3
 8001066:	2380      	movs	r3, #128	@ 0x80
 8001068:	4694      	mov	ip, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4463      	add	r3, ip
 800106e:	4a72      	ldr	r2, [pc, #456]	@ (8001238 <__aeabi_dmul+0x324>)
 8001070:	4293      	cmp	r3, r2
 8001072:	dc6b      	bgt.n	800114c <__aeabi_dmul+0x238>
 8001074:	0762      	lsls	r2, r4, #29
 8001076:	08c0      	lsrs	r0, r0, #3
 8001078:	0264      	lsls	r4, r4, #9
 800107a:	055b      	lsls	r3, r3, #21
 800107c:	4302      	orrs	r2, r0
 800107e:	0b24      	lsrs	r4, r4, #12
 8001080:	0d5b      	lsrs	r3, r3, #21
 8001082:	e79d      	b.n	8000fc0 <__aeabi_dmul+0xac>
 8001084:	2190      	movs	r1, #144	@ 0x90
 8001086:	0089      	lsls	r1, r1, #2
 8001088:	420f      	tst	r7, r1
 800108a:	d163      	bne.n	8001154 <__aeabi_dmul+0x240>
 800108c:	2288      	movs	r2, #136	@ 0x88
 800108e:	423a      	tst	r2, r7
 8001090:	d100      	bne.n	8001094 <__aeabi_dmul+0x180>
 8001092:	e0d7      	b.n	8001244 <__aeabi_dmul+0x330>
 8001094:	9b00      	ldr	r3, [sp, #0]
 8001096:	46a2      	mov	sl, r4
 8001098:	469b      	mov	fp, r3
 800109a:	4681      	mov	r9, r0
 800109c:	9602      	str	r6, [sp, #8]
 800109e:	e7bf      	b.n	8001020 <__aeabi_dmul+0x10c>
 80010a0:	0023      	movs	r3, r4
 80010a2:	4333      	orrs	r3, r6
 80010a4:	d100      	bne.n	80010a8 <__aeabi_dmul+0x194>
 80010a6:	e07f      	b.n	80011a8 <__aeabi_dmul+0x294>
 80010a8:	2c00      	cmp	r4, #0
 80010aa:	d100      	bne.n	80010ae <__aeabi_dmul+0x19a>
 80010ac:	e1ad      	b.n	800140a <__aeabi_dmul+0x4f6>
 80010ae:	0020      	movs	r0, r4
 80010b0:	f000 faf2 	bl	8001698 <__clzsi2>
 80010b4:	0002      	movs	r2, r0
 80010b6:	0003      	movs	r3, r0
 80010b8:	3a0b      	subs	r2, #11
 80010ba:	201d      	movs	r0, #29
 80010bc:	0019      	movs	r1, r3
 80010be:	1a82      	subs	r2, r0, r2
 80010c0:	0030      	movs	r0, r6
 80010c2:	3908      	subs	r1, #8
 80010c4:	40d0      	lsrs	r0, r2
 80010c6:	408c      	lsls	r4, r1
 80010c8:	4304      	orrs	r4, r0
 80010ca:	0030      	movs	r0, r6
 80010cc:	4088      	lsls	r0, r1
 80010ce:	4a5b      	ldr	r2, [pc, #364]	@ (800123c <__aeabi_dmul+0x328>)
 80010d0:	1aeb      	subs	r3, r5, r3
 80010d2:	4694      	mov	ip, r2
 80010d4:	4463      	add	r3, ip
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	9201      	str	r2, [sp, #4]
 80010da:	4642      	mov	r2, r8
 80010dc:	2600      	movs	r6, #0
 80010de:	2a0a      	cmp	r2, #10
 80010e0:	dc00      	bgt.n	80010e4 <__aeabi_dmul+0x1d0>
 80010e2:	e75a      	b.n	8000f9a <__aeabi_dmul+0x86>
 80010e4:	e79c      	b.n	8001020 <__aeabi_dmul+0x10c>
 80010e6:	4653      	mov	r3, sl
 80010e8:	4303      	orrs	r3, r0
 80010ea:	4699      	mov	r9, r3
 80010ec:	d054      	beq.n	8001198 <__aeabi_dmul+0x284>
 80010ee:	4653      	mov	r3, sl
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_dmul+0x1e2>
 80010f4:	e177      	b.n	80013e6 <__aeabi_dmul+0x4d2>
 80010f6:	4650      	mov	r0, sl
 80010f8:	f000 face 	bl	8001698 <__clzsi2>
 80010fc:	230b      	movs	r3, #11
 80010fe:	425b      	negs	r3, r3
 8001100:	469c      	mov	ip, r3
 8001102:	0002      	movs	r2, r0
 8001104:	4484      	add	ip, r0
 8001106:	0011      	movs	r1, r2
 8001108:	4650      	mov	r0, sl
 800110a:	3908      	subs	r1, #8
 800110c:	4088      	lsls	r0, r1
 800110e:	231d      	movs	r3, #29
 8001110:	4680      	mov	r8, r0
 8001112:	4660      	mov	r0, ip
 8001114:	1a1b      	subs	r3, r3, r0
 8001116:	0020      	movs	r0, r4
 8001118:	40d8      	lsrs	r0, r3
 800111a:	0003      	movs	r3, r0
 800111c:	4640      	mov	r0, r8
 800111e:	4303      	orrs	r3, r0
 8001120:	469a      	mov	sl, r3
 8001122:	0023      	movs	r3, r4
 8001124:	408b      	lsls	r3, r1
 8001126:	4699      	mov	r9, r3
 8001128:	2300      	movs	r3, #0
 800112a:	4d44      	ldr	r5, [pc, #272]	@ (800123c <__aeabi_dmul+0x328>)
 800112c:	4698      	mov	r8, r3
 800112e:	1aad      	subs	r5, r5, r2
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	e715      	b.n	8000f60 <__aeabi_dmul+0x4c>
 8001134:	4652      	mov	r2, sl
 8001136:	4302      	orrs	r2, r0
 8001138:	4691      	mov	r9, r2
 800113a:	d126      	bne.n	800118a <__aeabi_dmul+0x276>
 800113c:	2200      	movs	r2, #0
 800113e:	001d      	movs	r5, r3
 8001140:	2302      	movs	r3, #2
 8001142:	4692      	mov	sl, r2
 8001144:	3208      	adds	r2, #8
 8001146:	4690      	mov	r8, r2
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	e709      	b.n	8000f60 <__aeabi_dmul+0x4c>
 800114c:	2400      	movs	r4, #0
 800114e:	2200      	movs	r2, #0
 8001150:	4b35      	ldr	r3, [pc, #212]	@ (8001228 <__aeabi_dmul+0x314>)
 8001152:	e735      	b.n	8000fc0 <__aeabi_dmul+0xac>
 8001154:	2300      	movs	r3, #0
 8001156:	2480      	movs	r4, #128	@ 0x80
 8001158:	469b      	mov	fp, r3
 800115a:	0324      	lsls	r4, r4, #12
 800115c:	4b32      	ldr	r3, [pc, #200]	@ (8001228 <__aeabi_dmul+0x314>)
 800115e:	e72f      	b.n	8000fc0 <__aeabi_dmul+0xac>
 8001160:	2202      	movs	r2, #2
 8001162:	4641      	mov	r1, r8
 8001164:	4311      	orrs	r1, r2
 8001166:	2280      	movs	r2, #128	@ 0x80
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	4694      	mov	ip, r2
 800116c:	002a      	movs	r2, r5
 800116e:	4462      	add	r2, ip
 8001170:	4688      	mov	r8, r1
 8001172:	9201      	str	r2, [sp, #4]
 8001174:	290a      	cmp	r1, #10
 8001176:	dd00      	ble.n	800117a <__aeabi_dmul+0x266>
 8001178:	e752      	b.n	8001020 <__aeabi_dmul+0x10c>
 800117a:	465a      	mov	r2, fp
 800117c:	2000      	movs	r0, #0
 800117e:	9900      	ldr	r1, [sp, #0]
 8001180:	0004      	movs	r4, r0
 8001182:	404a      	eors	r2, r1
 8001184:	4693      	mov	fp, r2
 8001186:	2602      	movs	r6, #2
 8001188:	e70b      	b.n	8000fa2 <__aeabi_dmul+0x8e>
 800118a:	220c      	movs	r2, #12
 800118c:	001d      	movs	r5, r3
 800118e:	2303      	movs	r3, #3
 8001190:	4681      	mov	r9, r0
 8001192:	4690      	mov	r8, r2
 8001194:	9302      	str	r3, [sp, #8]
 8001196:	e6e3      	b.n	8000f60 <__aeabi_dmul+0x4c>
 8001198:	2300      	movs	r3, #0
 800119a:	469a      	mov	sl, r3
 800119c:	3304      	adds	r3, #4
 800119e:	4698      	mov	r8, r3
 80011a0:	3b03      	subs	r3, #3
 80011a2:	2500      	movs	r5, #0
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	e6db      	b.n	8000f60 <__aeabi_dmul+0x4c>
 80011a8:	4642      	mov	r2, r8
 80011aa:	3301      	adds	r3, #1
 80011ac:	431a      	orrs	r2, r3
 80011ae:	002b      	movs	r3, r5
 80011b0:	4690      	mov	r8, r2
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	9201      	str	r2, [sp, #4]
 80011b6:	4642      	mov	r2, r8
 80011b8:	2400      	movs	r4, #0
 80011ba:	2000      	movs	r0, #0
 80011bc:	2601      	movs	r6, #1
 80011be:	2a0a      	cmp	r2, #10
 80011c0:	dc00      	bgt.n	80011c4 <__aeabi_dmul+0x2b0>
 80011c2:	e6ea      	b.n	8000f9a <__aeabi_dmul+0x86>
 80011c4:	e72c      	b.n	8001020 <__aeabi_dmul+0x10c>
 80011c6:	2201      	movs	r2, #1
 80011c8:	1ad2      	subs	r2, r2, r3
 80011ca:	2a38      	cmp	r2, #56	@ 0x38
 80011cc:	dd00      	ble.n	80011d0 <__aeabi_dmul+0x2bc>
 80011ce:	e6f4      	b.n	8000fba <__aeabi_dmul+0xa6>
 80011d0:	2a1f      	cmp	r2, #31
 80011d2:	dc00      	bgt.n	80011d6 <__aeabi_dmul+0x2c2>
 80011d4:	e12a      	b.n	800142c <__aeabi_dmul+0x518>
 80011d6:	211f      	movs	r1, #31
 80011d8:	4249      	negs	r1, r1
 80011da:	1acb      	subs	r3, r1, r3
 80011dc:	0021      	movs	r1, r4
 80011de:	40d9      	lsrs	r1, r3
 80011e0:	000b      	movs	r3, r1
 80011e2:	2a20      	cmp	r2, #32
 80011e4:	d005      	beq.n	80011f2 <__aeabi_dmul+0x2de>
 80011e6:	4a16      	ldr	r2, [pc, #88]	@ (8001240 <__aeabi_dmul+0x32c>)
 80011e8:	9d01      	ldr	r5, [sp, #4]
 80011ea:	4694      	mov	ip, r2
 80011ec:	4465      	add	r5, ip
 80011ee:	40ac      	lsls	r4, r5
 80011f0:	4320      	orrs	r0, r4
 80011f2:	1e42      	subs	r2, r0, #1
 80011f4:	4190      	sbcs	r0, r2
 80011f6:	4318      	orrs	r0, r3
 80011f8:	2307      	movs	r3, #7
 80011fa:	0019      	movs	r1, r3
 80011fc:	2400      	movs	r4, #0
 80011fe:	4001      	ands	r1, r0
 8001200:	4203      	tst	r3, r0
 8001202:	d00c      	beq.n	800121e <__aeabi_dmul+0x30a>
 8001204:	230f      	movs	r3, #15
 8001206:	4003      	ands	r3, r0
 8001208:	2b04      	cmp	r3, #4
 800120a:	d100      	bne.n	800120e <__aeabi_dmul+0x2fa>
 800120c:	e140      	b.n	8001490 <__aeabi_dmul+0x57c>
 800120e:	1d03      	adds	r3, r0, #4
 8001210:	4283      	cmp	r3, r0
 8001212:	41a4      	sbcs	r4, r4
 8001214:	0018      	movs	r0, r3
 8001216:	4264      	negs	r4, r4
 8001218:	0761      	lsls	r1, r4, #29
 800121a:	0264      	lsls	r4, r4, #9
 800121c:	0b24      	lsrs	r4, r4, #12
 800121e:	08c2      	lsrs	r2, r0, #3
 8001220:	2300      	movs	r3, #0
 8001222:	430a      	orrs	r2, r1
 8001224:	e6cc      	b.n	8000fc0 <__aeabi_dmul+0xac>
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	000007ff 	.word	0x000007ff
 800122c:	fffffc01 	.word	0xfffffc01
 8001230:	000003ff 	.word	0x000003ff
 8001234:	feffffff 	.word	0xfeffffff
 8001238:	000007fe 	.word	0x000007fe
 800123c:	fffffc0d 	.word	0xfffffc0d
 8001240:	0000043e 	.word	0x0000043e
 8001244:	4649      	mov	r1, r9
 8001246:	464a      	mov	r2, r9
 8001248:	0409      	lsls	r1, r1, #16
 800124a:	0c09      	lsrs	r1, r1, #16
 800124c:	000d      	movs	r5, r1
 800124e:	0c16      	lsrs	r6, r2, #16
 8001250:	0c02      	lsrs	r2, r0, #16
 8001252:	0400      	lsls	r0, r0, #16
 8001254:	0c00      	lsrs	r0, r0, #16
 8001256:	4345      	muls	r5, r0
 8001258:	46ac      	mov	ip, r5
 800125a:	0005      	movs	r5, r0
 800125c:	4375      	muls	r5, r6
 800125e:	46a8      	mov	r8, r5
 8001260:	0015      	movs	r5, r2
 8001262:	000f      	movs	r7, r1
 8001264:	4375      	muls	r5, r6
 8001266:	9200      	str	r2, [sp, #0]
 8001268:	9502      	str	r5, [sp, #8]
 800126a:	002a      	movs	r2, r5
 800126c:	9d00      	ldr	r5, [sp, #0]
 800126e:	436f      	muls	r7, r5
 8001270:	4665      	mov	r5, ip
 8001272:	0c2d      	lsrs	r5, r5, #16
 8001274:	46a9      	mov	r9, r5
 8001276:	4447      	add	r7, r8
 8001278:	444f      	add	r7, r9
 800127a:	45b8      	cmp	r8, r7
 800127c:	d905      	bls.n	800128a <__aeabi_dmul+0x376>
 800127e:	0015      	movs	r5, r2
 8001280:	2280      	movs	r2, #128	@ 0x80
 8001282:	0252      	lsls	r2, r2, #9
 8001284:	4690      	mov	r8, r2
 8001286:	4445      	add	r5, r8
 8001288:	9502      	str	r5, [sp, #8]
 800128a:	0c3d      	lsrs	r5, r7, #16
 800128c:	9503      	str	r5, [sp, #12]
 800128e:	4665      	mov	r5, ip
 8001290:	042d      	lsls	r5, r5, #16
 8001292:	043f      	lsls	r7, r7, #16
 8001294:	0c2d      	lsrs	r5, r5, #16
 8001296:	46ac      	mov	ip, r5
 8001298:	003d      	movs	r5, r7
 800129a:	4465      	add	r5, ip
 800129c:	9504      	str	r5, [sp, #16]
 800129e:	0c25      	lsrs	r5, r4, #16
 80012a0:	0424      	lsls	r4, r4, #16
 80012a2:	0c24      	lsrs	r4, r4, #16
 80012a4:	46ac      	mov	ip, r5
 80012a6:	0025      	movs	r5, r4
 80012a8:	4375      	muls	r5, r6
 80012aa:	46a8      	mov	r8, r5
 80012ac:	4665      	mov	r5, ip
 80012ae:	000f      	movs	r7, r1
 80012b0:	4369      	muls	r1, r5
 80012b2:	4441      	add	r1, r8
 80012b4:	4689      	mov	r9, r1
 80012b6:	4367      	muls	r7, r4
 80012b8:	0c39      	lsrs	r1, r7, #16
 80012ba:	4449      	add	r1, r9
 80012bc:	436e      	muls	r6, r5
 80012be:	4588      	cmp	r8, r1
 80012c0:	d903      	bls.n	80012ca <__aeabi_dmul+0x3b6>
 80012c2:	2280      	movs	r2, #128	@ 0x80
 80012c4:	0252      	lsls	r2, r2, #9
 80012c6:	4690      	mov	r8, r2
 80012c8:	4446      	add	r6, r8
 80012ca:	0c0d      	lsrs	r5, r1, #16
 80012cc:	46a8      	mov	r8, r5
 80012ce:	0035      	movs	r5, r6
 80012d0:	4445      	add	r5, r8
 80012d2:	9505      	str	r5, [sp, #20]
 80012d4:	9d03      	ldr	r5, [sp, #12]
 80012d6:	043f      	lsls	r7, r7, #16
 80012d8:	46a8      	mov	r8, r5
 80012da:	0c3f      	lsrs	r7, r7, #16
 80012dc:	0409      	lsls	r1, r1, #16
 80012de:	19c9      	adds	r1, r1, r7
 80012e0:	4488      	add	r8, r1
 80012e2:	4645      	mov	r5, r8
 80012e4:	9503      	str	r5, [sp, #12]
 80012e6:	4655      	mov	r5, sl
 80012e8:	042e      	lsls	r6, r5, #16
 80012ea:	0c36      	lsrs	r6, r6, #16
 80012ec:	0c2f      	lsrs	r7, r5, #16
 80012ee:	0035      	movs	r5, r6
 80012f0:	4345      	muls	r5, r0
 80012f2:	4378      	muls	r0, r7
 80012f4:	4681      	mov	r9, r0
 80012f6:	0038      	movs	r0, r7
 80012f8:	46a8      	mov	r8, r5
 80012fa:	0c2d      	lsrs	r5, r5, #16
 80012fc:	46aa      	mov	sl, r5
 80012fe:	9a00      	ldr	r2, [sp, #0]
 8001300:	4350      	muls	r0, r2
 8001302:	4372      	muls	r2, r6
 8001304:	444a      	add	r2, r9
 8001306:	4452      	add	r2, sl
 8001308:	4591      	cmp	r9, r2
 800130a:	d903      	bls.n	8001314 <__aeabi_dmul+0x400>
 800130c:	2580      	movs	r5, #128	@ 0x80
 800130e:	026d      	lsls	r5, r5, #9
 8001310:	46a9      	mov	r9, r5
 8001312:	4448      	add	r0, r9
 8001314:	0c15      	lsrs	r5, r2, #16
 8001316:	46a9      	mov	r9, r5
 8001318:	4645      	mov	r5, r8
 800131a:	042d      	lsls	r5, r5, #16
 800131c:	0c2d      	lsrs	r5, r5, #16
 800131e:	46a8      	mov	r8, r5
 8001320:	4665      	mov	r5, ip
 8001322:	437d      	muls	r5, r7
 8001324:	0412      	lsls	r2, r2, #16
 8001326:	4448      	add	r0, r9
 8001328:	4490      	add	r8, r2
 800132a:	46a9      	mov	r9, r5
 800132c:	0032      	movs	r2, r6
 800132e:	4665      	mov	r5, ip
 8001330:	4362      	muls	r2, r4
 8001332:	436e      	muls	r6, r5
 8001334:	437c      	muls	r4, r7
 8001336:	0c17      	lsrs	r7, r2, #16
 8001338:	1936      	adds	r6, r6, r4
 800133a:	19bf      	adds	r7, r7, r6
 800133c:	42bc      	cmp	r4, r7
 800133e:	d903      	bls.n	8001348 <__aeabi_dmul+0x434>
 8001340:	2480      	movs	r4, #128	@ 0x80
 8001342:	0264      	lsls	r4, r4, #9
 8001344:	46a4      	mov	ip, r4
 8001346:	44e1      	add	r9, ip
 8001348:	9c02      	ldr	r4, [sp, #8]
 800134a:	9e03      	ldr	r6, [sp, #12]
 800134c:	46a4      	mov	ip, r4
 800134e:	9d05      	ldr	r5, [sp, #20]
 8001350:	4466      	add	r6, ip
 8001352:	428e      	cmp	r6, r1
 8001354:	4189      	sbcs	r1, r1
 8001356:	46ac      	mov	ip, r5
 8001358:	0412      	lsls	r2, r2, #16
 800135a:	043c      	lsls	r4, r7, #16
 800135c:	0c12      	lsrs	r2, r2, #16
 800135e:	18a2      	adds	r2, r4, r2
 8001360:	4462      	add	r2, ip
 8001362:	4249      	negs	r1, r1
 8001364:	1854      	adds	r4, r2, r1
 8001366:	4446      	add	r6, r8
 8001368:	46a4      	mov	ip, r4
 800136a:	4546      	cmp	r6, r8
 800136c:	41a4      	sbcs	r4, r4
 800136e:	4682      	mov	sl, r0
 8001370:	4264      	negs	r4, r4
 8001372:	46a0      	mov	r8, r4
 8001374:	42aa      	cmp	r2, r5
 8001376:	4192      	sbcs	r2, r2
 8001378:	458c      	cmp	ip, r1
 800137a:	4189      	sbcs	r1, r1
 800137c:	44e2      	add	sl, ip
 800137e:	44d0      	add	r8, sl
 8001380:	4249      	negs	r1, r1
 8001382:	4252      	negs	r2, r2
 8001384:	430a      	orrs	r2, r1
 8001386:	45a0      	cmp	r8, r4
 8001388:	41a4      	sbcs	r4, r4
 800138a:	4582      	cmp	sl, r0
 800138c:	4189      	sbcs	r1, r1
 800138e:	4264      	negs	r4, r4
 8001390:	4249      	negs	r1, r1
 8001392:	430c      	orrs	r4, r1
 8001394:	4641      	mov	r1, r8
 8001396:	0c3f      	lsrs	r7, r7, #16
 8001398:	19d2      	adds	r2, r2, r7
 800139a:	1912      	adds	r2, r2, r4
 800139c:	0dcc      	lsrs	r4, r1, #23
 800139e:	9904      	ldr	r1, [sp, #16]
 80013a0:	0270      	lsls	r0, r6, #9
 80013a2:	4308      	orrs	r0, r1
 80013a4:	1e41      	subs	r1, r0, #1
 80013a6:	4188      	sbcs	r0, r1
 80013a8:	4641      	mov	r1, r8
 80013aa:	444a      	add	r2, r9
 80013ac:	0df6      	lsrs	r6, r6, #23
 80013ae:	0252      	lsls	r2, r2, #9
 80013b0:	4330      	orrs	r0, r6
 80013b2:	0249      	lsls	r1, r1, #9
 80013b4:	4314      	orrs	r4, r2
 80013b6:	4308      	orrs	r0, r1
 80013b8:	01d2      	lsls	r2, r2, #7
 80013ba:	d535      	bpl.n	8001428 <__aeabi_dmul+0x514>
 80013bc:	2201      	movs	r2, #1
 80013be:	0843      	lsrs	r3, r0, #1
 80013c0:	4002      	ands	r2, r0
 80013c2:	4313      	orrs	r3, r2
 80013c4:	07e0      	lsls	r0, r4, #31
 80013c6:	4318      	orrs	r0, r3
 80013c8:	0864      	lsrs	r4, r4, #1
 80013ca:	e634      	b.n	8001036 <__aeabi_dmul+0x122>
 80013cc:	9b00      	ldr	r3, [sp, #0]
 80013ce:	46a2      	mov	sl, r4
 80013d0:	469b      	mov	fp, r3
 80013d2:	4681      	mov	r9, r0
 80013d4:	2480      	movs	r4, #128	@ 0x80
 80013d6:	4653      	mov	r3, sl
 80013d8:	0324      	lsls	r4, r4, #12
 80013da:	431c      	orrs	r4, r3
 80013dc:	0324      	lsls	r4, r4, #12
 80013de:	464a      	mov	r2, r9
 80013e0:	4b2e      	ldr	r3, [pc, #184]	@ (800149c <__aeabi_dmul+0x588>)
 80013e2:	0b24      	lsrs	r4, r4, #12
 80013e4:	e5ec      	b.n	8000fc0 <__aeabi_dmul+0xac>
 80013e6:	f000 f957 	bl	8001698 <__clzsi2>
 80013ea:	2315      	movs	r3, #21
 80013ec:	469c      	mov	ip, r3
 80013ee:	4484      	add	ip, r0
 80013f0:	0002      	movs	r2, r0
 80013f2:	4663      	mov	r3, ip
 80013f4:	3220      	adds	r2, #32
 80013f6:	2b1c      	cmp	r3, #28
 80013f8:	dc00      	bgt.n	80013fc <__aeabi_dmul+0x4e8>
 80013fa:	e684      	b.n	8001106 <__aeabi_dmul+0x1f2>
 80013fc:	2300      	movs	r3, #0
 80013fe:	4699      	mov	r9, r3
 8001400:	0023      	movs	r3, r4
 8001402:	3808      	subs	r0, #8
 8001404:	4083      	lsls	r3, r0
 8001406:	469a      	mov	sl, r3
 8001408:	e68e      	b.n	8001128 <__aeabi_dmul+0x214>
 800140a:	f000 f945 	bl	8001698 <__clzsi2>
 800140e:	0002      	movs	r2, r0
 8001410:	0003      	movs	r3, r0
 8001412:	3215      	adds	r2, #21
 8001414:	3320      	adds	r3, #32
 8001416:	2a1c      	cmp	r2, #28
 8001418:	dc00      	bgt.n	800141c <__aeabi_dmul+0x508>
 800141a:	e64e      	b.n	80010ba <__aeabi_dmul+0x1a6>
 800141c:	0002      	movs	r2, r0
 800141e:	0034      	movs	r4, r6
 8001420:	3a08      	subs	r2, #8
 8001422:	2000      	movs	r0, #0
 8001424:	4094      	lsls	r4, r2
 8001426:	e652      	b.n	80010ce <__aeabi_dmul+0x1ba>
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	e604      	b.n	8001036 <__aeabi_dmul+0x122>
 800142c:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <__aeabi_dmul+0x58c>)
 800142e:	0021      	movs	r1, r4
 8001430:	469c      	mov	ip, r3
 8001432:	0003      	movs	r3, r0
 8001434:	9d01      	ldr	r5, [sp, #4]
 8001436:	40d3      	lsrs	r3, r2
 8001438:	4465      	add	r5, ip
 800143a:	40a9      	lsls	r1, r5
 800143c:	4319      	orrs	r1, r3
 800143e:	0003      	movs	r3, r0
 8001440:	40ab      	lsls	r3, r5
 8001442:	1e58      	subs	r0, r3, #1
 8001444:	4183      	sbcs	r3, r0
 8001446:	4319      	orrs	r1, r3
 8001448:	0008      	movs	r0, r1
 800144a:	40d4      	lsrs	r4, r2
 800144c:	074b      	lsls	r3, r1, #29
 800144e:	d009      	beq.n	8001464 <__aeabi_dmul+0x550>
 8001450:	230f      	movs	r3, #15
 8001452:	400b      	ands	r3, r1
 8001454:	2b04      	cmp	r3, #4
 8001456:	d005      	beq.n	8001464 <__aeabi_dmul+0x550>
 8001458:	1d0b      	adds	r3, r1, #4
 800145a:	428b      	cmp	r3, r1
 800145c:	4180      	sbcs	r0, r0
 800145e:	4240      	negs	r0, r0
 8001460:	1824      	adds	r4, r4, r0
 8001462:	0018      	movs	r0, r3
 8001464:	0223      	lsls	r3, r4, #8
 8001466:	d400      	bmi.n	800146a <__aeabi_dmul+0x556>
 8001468:	e6d6      	b.n	8001218 <__aeabi_dmul+0x304>
 800146a:	2301      	movs	r3, #1
 800146c:	2400      	movs	r4, #0
 800146e:	2200      	movs	r2, #0
 8001470:	e5a6      	b.n	8000fc0 <__aeabi_dmul+0xac>
 8001472:	290f      	cmp	r1, #15
 8001474:	d1aa      	bne.n	80013cc <__aeabi_dmul+0x4b8>
 8001476:	2380      	movs	r3, #128	@ 0x80
 8001478:	4652      	mov	r2, sl
 800147a:	031b      	lsls	r3, r3, #12
 800147c:	421a      	tst	r2, r3
 800147e:	d0a9      	beq.n	80013d4 <__aeabi_dmul+0x4c0>
 8001480:	421c      	tst	r4, r3
 8001482:	d1a7      	bne.n	80013d4 <__aeabi_dmul+0x4c0>
 8001484:	431c      	orrs	r4, r3
 8001486:	9b00      	ldr	r3, [sp, #0]
 8001488:	0002      	movs	r2, r0
 800148a:	469b      	mov	fp, r3
 800148c:	4b03      	ldr	r3, [pc, #12]	@ (800149c <__aeabi_dmul+0x588>)
 800148e:	e597      	b.n	8000fc0 <__aeabi_dmul+0xac>
 8001490:	2400      	movs	r4, #0
 8001492:	e6c1      	b.n	8001218 <__aeabi_dmul+0x304>
 8001494:	2400      	movs	r4, #0
 8001496:	4b01      	ldr	r3, [pc, #4]	@ (800149c <__aeabi_dmul+0x588>)
 8001498:	0022      	movs	r2, r4
 800149a:	e591      	b.n	8000fc0 <__aeabi_dmul+0xac>
 800149c:	000007ff 	.word	0x000007ff
 80014a0:	0000041e 	.word	0x0000041e

080014a4 <__aeabi_i2d>:
 80014a4:	b570      	push	{r4, r5, r6, lr}
 80014a6:	2800      	cmp	r0, #0
 80014a8:	d016      	beq.n	80014d8 <__aeabi_i2d+0x34>
 80014aa:	17c3      	asrs	r3, r0, #31
 80014ac:	18c5      	adds	r5, r0, r3
 80014ae:	405d      	eors	r5, r3
 80014b0:	0fc4      	lsrs	r4, r0, #31
 80014b2:	0028      	movs	r0, r5
 80014b4:	f000 f8f0 	bl	8001698 <__clzsi2>
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <__aeabi_i2d+0x58>)
 80014ba:	1a1b      	subs	r3, r3, r0
 80014bc:	055b      	lsls	r3, r3, #21
 80014be:	0d5b      	lsrs	r3, r3, #21
 80014c0:	280a      	cmp	r0, #10
 80014c2:	dc14      	bgt.n	80014ee <__aeabi_i2d+0x4a>
 80014c4:	0002      	movs	r2, r0
 80014c6:	002e      	movs	r6, r5
 80014c8:	3215      	adds	r2, #21
 80014ca:	4096      	lsls	r6, r2
 80014cc:	220b      	movs	r2, #11
 80014ce:	1a12      	subs	r2, r2, r0
 80014d0:	40d5      	lsrs	r5, r2
 80014d2:	032d      	lsls	r5, r5, #12
 80014d4:	0b2d      	lsrs	r5, r5, #12
 80014d6:	e003      	b.n	80014e0 <__aeabi_i2d+0x3c>
 80014d8:	2400      	movs	r4, #0
 80014da:	2300      	movs	r3, #0
 80014dc:	2500      	movs	r5, #0
 80014de:	2600      	movs	r6, #0
 80014e0:	051b      	lsls	r3, r3, #20
 80014e2:	432b      	orrs	r3, r5
 80014e4:	07e4      	lsls	r4, r4, #31
 80014e6:	4323      	orrs	r3, r4
 80014e8:	0030      	movs	r0, r6
 80014ea:	0019      	movs	r1, r3
 80014ec:	bd70      	pop	{r4, r5, r6, pc}
 80014ee:	380b      	subs	r0, #11
 80014f0:	4085      	lsls	r5, r0
 80014f2:	032d      	lsls	r5, r5, #12
 80014f4:	2600      	movs	r6, #0
 80014f6:	0b2d      	lsrs	r5, r5, #12
 80014f8:	e7f2      	b.n	80014e0 <__aeabi_i2d+0x3c>
 80014fa:	46c0      	nop			@ (mov r8, r8)
 80014fc:	0000041e 	.word	0x0000041e

08001500 <__aeabi_f2d>:
 8001500:	b570      	push	{r4, r5, r6, lr}
 8001502:	0242      	lsls	r2, r0, #9
 8001504:	0043      	lsls	r3, r0, #1
 8001506:	0fc4      	lsrs	r4, r0, #31
 8001508:	20fe      	movs	r0, #254	@ 0xfe
 800150a:	0e1b      	lsrs	r3, r3, #24
 800150c:	1c59      	adds	r1, r3, #1
 800150e:	0a55      	lsrs	r5, r2, #9
 8001510:	4208      	tst	r0, r1
 8001512:	d00c      	beq.n	800152e <__aeabi_f2d+0x2e>
 8001514:	21e0      	movs	r1, #224	@ 0xe0
 8001516:	0089      	lsls	r1, r1, #2
 8001518:	468c      	mov	ip, r1
 800151a:	076d      	lsls	r5, r5, #29
 800151c:	0b12      	lsrs	r2, r2, #12
 800151e:	4463      	add	r3, ip
 8001520:	051b      	lsls	r3, r3, #20
 8001522:	4313      	orrs	r3, r2
 8001524:	07e4      	lsls	r4, r4, #31
 8001526:	4323      	orrs	r3, r4
 8001528:	0028      	movs	r0, r5
 800152a:	0019      	movs	r1, r3
 800152c:	bd70      	pop	{r4, r5, r6, pc}
 800152e:	2b00      	cmp	r3, #0
 8001530:	d114      	bne.n	800155c <__aeabi_f2d+0x5c>
 8001532:	2d00      	cmp	r5, #0
 8001534:	d01b      	beq.n	800156e <__aeabi_f2d+0x6e>
 8001536:	0028      	movs	r0, r5
 8001538:	f000 f8ae 	bl	8001698 <__clzsi2>
 800153c:	280a      	cmp	r0, #10
 800153e:	dc1c      	bgt.n	800157a <__aeabi_f2d+0x7a>
 8001540:	230b      	movs	r3, #11
 8001542:	002a      	movs	r2, r5
 8001544:	1a1b      	subs	r3, r3, r0
 8001546:	40da      	lsrs	r2, r3
 8001548:	0003      	movs	r3, r0
 800154a:	3315      	adds	r3, #21
 800154c:	409d      	lsls	r5, r3
 800154e:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <__aeabi_f2d+0x88>)
 8001550:	0312      	lsls	r2, r2, #12
 8001552:	1a1b      	subs	r3, r3, r0
 8001554:	055b      	lsls	r3, r3, #21
 8001556:	0b12      	lsrs	r2, r2, #12
 8001558:	0d5b      	lsrs	r3, r3, #21
 800155a:	e7e1      	b.n	8001520 <__aeabi_f2d+0x20>
 800155c:	2d00      	cmp	r5, #0
 800155e:	d009      	beq.n	8001574 <__aeabi_f2d+0x74>
 8001560:	0b13      	lsrs	r3, r2, #12
 8001562:	2280      	movs	r2, #128	@ 0x80
 8001564:	0312      	lsls	r2, r2, #12
 8001566:	431a      	orrs	r2, r3
 8001568:	076d      	lsls	r5, r5, #29
 800156a:	4b08      	ldr	r3, [pc, #32]	@ (800158c <__aeabi_f2d+0x8c>)
 800156c:	e7d8      	b.n	8001520 <__aeabi_f2d+0x20>
 800156e:	2300      	movs	r3, #0
 8001570:	2200      	movs	r2, #0
 8001572:	e7d5      	b.n	8001520 <__aeabi_f2d+0x20>
 8001574:	2200      	movs	r2, #0
 8001576:	4b05      	ldr	r3, [pc, #20]	@ (800158c <__aeabi_f2d+0x8c>)
 8001578:	e7d2      	b.n	8001520 <__aeabi_f2d+0x20>
 800157a:	0003      	movs	r3, r0
 800157c:	002a      	movs	r2, r5
 800157e:	3b0b      	subs	r3, #11
 8001580:	409a      	lsls	r2, r3
 8001582:	2500      	movs	r5, #0
 8001584:	e7e3      	b.n	800154e <__aeabi_f2d+0x4e>
 8001586:	46c0      	nop			@ (mov r8, r8)
 8001588:	00000389 	.word	0x00000389
 800158c:	000007ff 	.word	0x000007ff

08001590 <__aeabi_d2f>:
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001592:	004b      	lsls	r3, r1, #1
 8001594:	030f      	lsls	r7, r1, #12
 8001596:	0d5b      	lsrs	r3, r3, #21
 8001598:	4c3b      	ldr	r4, [pc, #236]	@ (8001688 <__aeabi_d2f+0xf8>)
 800159a:	0f45      	lsrs	r5, r0, #29
 800159c:	b083      	sub	sp, #12
 800159e:	0a7f      	lsrs	r7, r7, #9
 80015a0:	1c5e      	adds	r6, r3, #1
 80015a2:	432f      	orrs	r7, r5
 80015a4:	9000      	str	r0, [sp, #0]
 80015a6:	9101      	str	r1, [sp, #4]
 80015a8:	0fca      	lsrs	r2, r1, #31
 80015aa:	00c5      	lsls	r5, r0, #3
 80015ac:	4226      	tst	r6, r4
 80015ae:	d00b      	beq.n	80015c8 <__aeabi_d2f+0x38>
 80015b0:	4936      	ldr	r1, [pc, #216]	@ (800168c <__aeabi_d2f+0xfc>)
 80015b2:	185c      	adds	r4, r3, r1
 80015b4:	2cfe      	cmp	r4, #254	@ 0xfe
 80015b6:	dd13      	ble.n	80015e0 <__aeabi_d2f+0x50>
 80015b8:	20ff      	movs	r0, #255	@ 0xff
 80015ba:	2300      	movs	r3, #0
 80015bc:	05c0      	lsls	r0, r0, #23
 80015be:	4318      	orrs	r0, r3
 80015c0:	07d2      	lsls	r2, r2, #31
 80015c2:	4310      	orrs	r0, r2
 80015c4:	b003      	add	sp, #12
 80015c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <__aeabi_d2f+0x42>
 80015cc:	2000      	movs	r0, #0
 80015ce:	2300      	movs	r3, #0
 80015d0:	e7f4      	b.n	80015bc <__aeabi_d2f+0x2c>
 80015d2:	433d      	orrs	r5, r7
 80015d4:	d0f0      	beq.n	80015b8 <__aeabi_d2f+0x28>
 80015d6:	2380      	movs	r3, #128	@ 0x80
 80015d8:	03db      	lsls	r3, r3, #15
 80015da:	20ff      	movs	r0, #255	@ 0xff
 80015dc:	433b      	orrs	r3, r7
 80015de:	e7ed      	b.n	80015bc <__aeabi_d2f+0x2c>
 80015e0:	2c00      	cmp	r4, #0
 80015e2:	dd14      	ble.n	800160e <__aeabi_d2f+0x7e>
 80015e4:	9b00      	ldr	r3, [sp, #0]
 80015e6:	00ff      	lsls	r7, r7, #3
 80015e8:	019b      	lsls	r3, r3, #6
 80015ea:	1e58      	subs	r0, r3, #1
 80015ec:	4183      	sbcs	r3, r0
 80015ee:	0f69      	lsrs	r1, r5, #29
 80015f0:	433b      	orrs	r3, r7
 80015f2:	430b      	orrs	r3, r1
 80015f4:	0759      	lsls	r1, r3, #29
 80015f6:	d041      	beq.n	800167c <__aeabi_d2f+0xec>
 80015f8:	210f      	movs	r1, #15
 80015fa:	4019      	ands	r1, r3
 80015fc:	2904      	cmp	r1, #4
 80015fe:	d028      	beq.n	8001652 <__aeabi_d2f+0xc2>
 8001600:	3304      	adds	r3, #4
 8001602:	0159      	lsls	r1, r3, #5
 8001604:	d525      	bpl.n	8001652 <__aeabi_d2f+0xc2>
 8001606:	3401      	adds	r4, #1
 8001608:	2300      	movs	r3, #0
 800160a:	b2e0      	uxtb	r0, r4
 800160c:	e7d6      	b.n	80015bc <__aeabi_d2f+0x2c>
 800160e:	0021      	movs	r1, r4
 8001610:	3117      	adds	r1, #23
 8001612:	dbdb      	blt.n	80015cc <__aeabi_d2f+0x3c>
 8001614:	2180      	movs	r1, #128	@ 0x80
 8001616:	201e      	movs	r0, #30
 8001618:	0409      	lsls	r1, r1, #16
 800161a:	4339      	orrs	r1, r7
 800161c:	1b00      	subs	r0, r0, r4
 800161e:	281f      	cmp	r0, #31
 8001620:	dd1b      	ble.n	800165a <__aeabi_d2f+0xca>
 8001622:	2602      	movs	r6, #2
 8001624:	4276      	negs	r6, r6
 8001626:	1b34      	subs	r4, r6, r4
 8001628:	000e      	movs	r6, r1
 800162a:	40e6      	lsrs	r6, r4
 800162c:	0034      	movs	r4, r6
 800162e:	2820      	cmp	r0, #32
 8001630:	d004      	beq.n	800163c <__aeabi_d2f+0xac>
 8001632:	4817      	ldr	r0, [pc, #92]	@ (8001690 <__aeabi_d2f+0x100>)
 8001634:	4684      	mov	ip, r0
 8001636:	4463      	add	r3, ip
 8001638:	4099      	lsls	r1, r3
 800163a:	430d      	orrs	r5, r1
 800163c:	002b      	movs	r3, r5
 800163e:	1e59      	subs	r1, r3, #1
 8001640:	418b      	sbcs	r3, r1
 8001642:	4323      	orrs	r3, r4
 8001644:	0759      	lsls	r1, r3, #29
 8001646:	d015      	beq.n	8001674 <__aeabi_d2f+0xe4>
 8001648:	210f      	movs	r1, #15
 800164a:	2400      	movs	r4, #0
 800164c:	4019      	ands	r1, r3
 800164e:	2904      	cmp	r1, #4
 8001650:	d117      	bne.n	8001682 <__aeabi_d2f+0xf2>
 8001652:	019b      	lsls	r3, r3, #6
 8001654:	0a5b      	lsrs	r3, r3, #9
 8001656:	b2e0      	uxtb	r0, r4
 8001658:	e7b0      	b.n	80015bc <__aeabi_d2f+0x2c>
 800165a:	4c0e      	ldr	r4, [pc, #56]	@ (8001694 <__aeabi_d2f+0x104>)
 800165c:	191c      	adds	r4, r3, r4
 800165e:	002b      	movs	r3, r5
 8001660:	40a5      	lsls	r5, r4
 8001662:	40c3      	lsrs	r3, r0
 8001664:	40a1      	lsls	r1, r4
 8001666:	1e68      	subs	r0, r5, #1
 8001668:	4185      	sbcs	r5, r0
 800166a:	4329      	orrs	r1, r5
 800166c:	430b      	orrs	r3, r1
 800166e:	2400      	movs	r4, #0
 8001670:	0759      	lsls	r1, r3, #29
 8001672:	d1c1      	bne.n	80015f8 <__aeabi_d2f+0x68>
 8001674:	019b      	lsls	r3, r3, #6
 8001676:	2000      	movs	r0, #0
 8001678:	0a5b      	lsrs	r3, r3, #9
 800167a:	e79f      	b.n	80015bc <__aeabi_d2f+0x2c>
 800167c:	08db      	lsrs	r3, r3, #3
 800167e:	b2e0      	uxtb	r0, r4
 8001680:	e79c      	b.n	80015bc <__aeabi_d2f+0x2c>
 8001682:	3304      	adds	r3, #4
 8001684:	e7e5      	b.n	8001652 <__aeabi_d2f+0xc2>
 8001686:	46c0      	nop			@ (mov r8, r8)
 8001688:	000007fe 	.word	0x000007fe
 800168c:	fffffc80 	.word	0xfffffc80
 8001690:	fffffca2 	.word	0xfffffca2
 8001694:	fffffc82 	.word	0xfffffc82

08001698 <__clzsi2>:
 8001698:	211c      	movs	r1, #28
 800169a:	2301      	movs	r3, #1
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	4298      	cmp	r0, r3
 80016a0:	d301      	bcc.n	80016a6 <__clzsi2+0xe>
 80016a2:	0c00      	lsrs	r0, r0, #16
 80016a4:	3910      	subs	r1, #16
 80016a6:	0a1b      	lsrs	r3, r3, #8
 80016a8:	4298      	cmp	r0, r3
 80016aa:	d301      	bcc.n	80016b0 <__clzsi2+0x18>
 80016ac:	0a00      	lsrs	r0, r0, #8
 80016ae:	3908      	subs	r1, #8
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	4298      	cmp	r0, r3
 80016b4:	d301      	bcc.n	80016ba <__clzsi2+0x22>
 80016b6:	0900      	lsrs	r0, r0, #4
 80016b8:	3904      	subs	r1, #4
 80016ba:	a202      	add	r2, pc, #8	@ (adr r2, 80016c4 <__clzsi2+0x2c>)
 80016bc:	5c10      	ldrb	r0, [r2, r0]
 80016be:	1840      	adds	r0, r0, r1
 80016c0:	4770      	bx	lr
 80016c2:	46c0      	nop			@ (mov r8, r8)
 80016c4:	02020304 	.word	0x02020304
 80016c8:	01010101 	.word	0x01010101
	...

080016d4 <__clzdi2>:
 80016d4:	b510      	push	{r4, lr}
 80016d6:	2900      	cmp	r1, #0
 80016d8:	d103      	bne.n	80016e2 <__clzdi2+0xe>
 80016da:	f7ff ffdd 	bl	8001698 <__clzsi2>
 80016de:	3020      	adds	r0, #32
 80016e0:	e002      	b.n	80016e8 <__clzdi2+0x14>
 80016e2:	0008      	movs	r0, r1
 80016e4:	f7ff ffd8 	bl	8001698 <__clzsi2>
 80016e8:	bd10      	pop	{r4, pc}
 80016ea:	46c0      	nop			@ (mov r8, r8)

080016ec <LED>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LED(int led, int state) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
	switch (led) {
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b09      	cmp	r3, #9
 80016fa:	d85d      	bhi.n	80017b8 <LED+0xcc>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	009a      	lsls	r2, r3, #2
 8001700:	4b2f      	ldr	r3, [pc, #188]	@ (80017c0 <LED+0xd4>)
 8001702:	18d3      	adds	r3, r2, r3
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	469f      	mov	pc, r3
		case 0:
			HAL_GPIO_WritePin(VU0_GPIO_Port, VU0_Pin, state);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	23a0      	movs	r3, #160	@ 0xa0
 800170e:	05db      	lsls	r3, r3, #23
 8001710:	2102      	movs	r1, #2
 8001712:	0018      	movs	r0, r3
 8001714:	f002 fb9e 	bl	8003e54 <HAL_GPIO_WritePin>
			break;
 8001718:	e04e      	b.n	80017b8 <LED+0xcc>
		case 1:
			HAL_GPIO_WritePin(VU1_GPIO_Port, VU1_Pin, state);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	23a0      	movs	r3, #160	@ 0xa0
 8001720:	05db      	lsls	r3, r3, #23
 8001722:	2110      	movs	r1, #16
 8001724:	0018      	movs	r0, r3
 8001726:	f002 fb95 	bl	8003e54 <HAL_GPIO_WritePin>
			break;
 800172a:	e045      	b.n	80017b8 <LED+0xcc>
		case 2:
			HAL_GPIO_WritePin(VU2_GPIO_Port, VU2_Pin, state);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4824      	ldr	r0, [pc, #144]	@ (80017c4 <LED+0xd8>)
 8001732:	001a      	movs	r2, r3
 8001734:	2102      	movs	r1, #2
 8001736:	f002 fb8d 	bl	8003e54 <HAL_GPIO_WritePin>
			break;
 800173a:	e03d      	b.n	80017b8 <LED+0xcc>
		case 3:
			HAL_GPIO_WritePin(VU3_GPIO_Port, VU3_Pin, state);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	2380      	movs	r3, #128	@ 0x80
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	481f      	ldr	r0, [pc, #124]	@ (80017c4 <LED+0xd8>)
 8001746:	0019      	movs	r1, r3
 8001748:	f002 fb84 	bl	8003e54 <HAL_GPIO_WritePin>
			break;
 800174c:	e034      	b.n	80017b8 <LED+0xcc>
		case 4:
			HAL_GPIO_WritePin(VU4_GPIO_Port, VU4_Pin, state);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	2380      	movs	r3, #128	@ 0x80
 8001754:	015b      	lsls	r3, r3, #5
 8001756:	481b      	ldr	r0, [pc, #108]	@ (80017c4 <LED+0xd8>)
 8001758:	0019      	movs	r1, r3
 800175a:	f002 fb7b 	bl	8003e54 <HAL_GPIO_WritePin>
			break;
 800175e:	e02b      	b.n	80017b8 <LED+0xcc>
		case 5:
			HAL_GPIO_WritePin(VU5_GPIO_Port, VU5_Pin, state);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	23a0      	movs	r3, #160	@ 0xa0
 8001766:	05db      	lsls	r3, r3, #23
 8001768:	2140      	movs	r1, #64	@ 0x40
 800176a:	0018      	movs	r0, r3
 800176c:	f002 fb72 	bl	8003e54 <HAL_GPIO_WritePin>
			break;
 8001770:	e022      	b.n	80017b8 <LED+0xcc>
		case 6:
			HAL_GPIO_WritePin(VU6_GPIO_Port, VU6_Pin, state);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	23a0      	movs	r3, #160	@ 0xa0
 8001778:	05db      	lsls	r3, r3, #23
 800177a:	2180      	movs	r1, #128	@ 0x80
 800177c:	0018      	movs	r0, r3
 800177e:	f002 fb69 	bl	8003e54 <HAL_GPIO_WritePin>
			break;
 8001782:	e019      	b.n	80017b8 <LED+0xcc>
		case 7:
			HAL_GPIO_WritePin(VU7_GPIO_Port, VU7_Pin, state);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	480e      	ldr	r0, [pc, #56]	@ (80017c4 <LED+0xd8>)
 800178a:	001a      	movs	r2, r3
 800178c:	2101      	movs	r1, #1
 800178e:	f002 fb61 	bl	8003e54 <HAL_GPIO_WritePin>
			break;
 8001792:	e011      	b.n	80017b8 <LED+0xcc>
		case 8:
			HAL_GPIO_WritePin(VU8_GPIO_Port, VU8_Pin, state);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	480b      	ldr	r0, [pc, #44]	@ (80017c8 <LED+0xdc>)
 800179a:	001a      	movs	r2, r3
 800179c:	2180      	movs	r1, #128	@ 0x80
 800179e:	f002 fb59 	bl	8003e54 <HAL_GPIO_WritePin>
			break;
 80017a2:	e009      	b.n	80017b8 <LED+0xcc>
		case 9:
			HAL_GPIO_WritePin(VU9_GPIO_Port, VU9_Pin, state);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	2380      	movs	r3, #128	@ 0x80
 80017aa:	0099      	lsls	r1, r3, #2
 80017ac:	23a0      	movs	r3, #160	@ 0xa0
 80017ae:	05db      	lsls	r3, r3, #23
 80017b0:	0018      	movs	r0, r3
 80017b2:	f002 fb4f 	bl	8003e54 <HAL_GPIO_WritePin>
			break;
 80017b6:	46c0      	nop			@ (mov r8, r8)
	}
}
 80017b8:	46c0      	nop			@ (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b002      	add	sp, #8
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	08005b60 	.word	0x08005b60
 80017c4:	50000400 	.word	0x50000400
 80017c8:	50000800 	.word	0x50000800

080017cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017cc:	b5b0      	push	{r4, r5, r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d2:	f000 fc55 	bl	8002080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d6:	f000 f8fb 	bl	80019d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017da:	f000 fa29 	bl	8001c30 <MX_GPIO_Init>
  MX_DMA_Init();
 80017de:	f000 fa09 	bl	8001bf4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017e2:	f000 f9b9 	bl	8001b58 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80017e6:	f000 f951 	bl	8001a8c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 80017ea:	4b73      	ldr	r3, [pc, #460]	@ (80019b8 <main+0x1ec>)
 80017ec:	0018      	movs	r0, r3
 80017ee:	f001 fd81 	bl	80032f4 <HAL_ADCEx_Calibration_Start>
  volatile unsigned int ADC_value = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	603b      	str	r3, [r7, #0]
  const int MAX_ADC_VALUE = 4096;
 80017f6:	2380      	movs	r3, #128	@ 0x80
 80017f8:	015b      	lsls	r3, r3, #5
 80017fa:	617b      	str	r3, [r7, #20]
  const float MAX_ALLOW_ADC_VOLTAGE = 3.0;
 80017fc:	4b6f      	ldr	r3, [pc, #444]	@ (80019bc <main+0x1f0>)
 80017fe:	613b      	str	r3, [r7, #16]
  const float MAX_ALLOW_ADC_VALUE = (MAX_ADC_VALUE / 3.3) * MAX_ALLOW_ADC_VOLTAGE;
 8001800:	6978      	ldr	r0, [r7, #20]
 8001802:	f7ff fe4f 	bl	80014a4 <__aeabi_i2d>
 8001806:	4a6e      	ldr	r2, [pc, #440]	@ (80019c0 <main+0x1f4>)
 8001808:	4b6e      	ldr	r3, [pc, #440]	@ (80019c4 <main+0x1f8>)
 800180a:	f7ff f869 	bl	80008e0 <__aeabi_ddiv>
 800180e:	0002      	movs	r2, r0
 8001810:	000b      	movs	r3, r1
 8001812:	0014      	movs	r4, r2
 8001814:	001d      	movs	r5, r3
 8001816:	6938      	ldr	r0, [r7, #16]
 8001818:	f7ff fe72 	bl	8001500 <__aeabi_f2d>
 800181c:	0002      	movs	r2, r0
 800181e:	000b      	movs	r3, r1
 8001820:	0020      	movs	r0, r4
 8001822:	0029      	movs	r1, r5
 8001824:	f7ff fb76 	bl	8000f14 <__aeabi_dmul>
 8001828:	0002      	movs	r2, r0
 800182a:	000b      	movs	r3, r1
 800182c:	0010      	movs	r0, r2
 800182e:	0019      	movs	r1, r3
 8001830:	f7ff feae 	bl	8001590 <__aeabi_d2f>
 8001834:	1c03      	adds	r3, r0, #0
 8001836:	60fb      	str	r3, [r7, #12]
  const int VU_COUNT = 10;
 8001838:	230a      	movs	r3, #10
 800183a:	60bb      	str	r3, [r7, #8]
  const int STEP_SIZE = MAX_ALLOW_ADC_VALUE / VU_COUNT;
 800183c:	68b8      	ldr	r0, [r7, #8]
 800183e:	f7ff f803 	bl	8000848 <__aeabi_i2f>
 8001842:	1c03      	adds	r3, r0, #0
 8001844:	1c19      	adds	r1, r3, #0
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f7fe febe 	bl	80005c8 <__aeabi_fdiv>
 800184c:	1c03      	adds	r3, r0, #0
 800184e:	1c18      	adds	r0, r3, #0
 8001850:	f7fe ffda 	bl	8000808 <__aeabi_f2iz>
 8001854:	0003      	movs	r3, r0
 8001856:	607b      	str	r3, [r7, #4]

  HAL_ADC_Start_DMA(&hadc1, &ADC_value, 1);
 8001858:	0039      	movs	r1, r7
 800185a:	4b57      	ldr	r3, [pc, #348]	@ (80019b8 <main+0x1ec>)
 800185c:	2201      	movs	r2, #1
 800185e:	0018      	movs	r0, r3
 8001860:	f000 ffa0 	bl	80027a4 <HAL_ADC_Start_DMA>

  HAL_UART_Transmit(&huart2, "Start\r\n", 7, 1000);
 8001864:	23fa      	movs	r3, #250	@ 0xfa
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4957      	ldr	r1, [pc, #348]	@ (80019c8 <main+0x1fc>)
 800186a:	4858      	ldr	r0, [pc, #352]	@ (80019cc <main+0x200>)
 800186c:	2207      	movs	r2, #7
 800186e:	f003 fa2d 	bl	8004ccc <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  (ADC_value >= STEP_SIZE * 1) ? LED(0, 1) : LED(0, 0);
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	429a      	cmp	r2, r3
 8001878:	d304      	bcc.n	8001884 <main+0xb8>
 800187a:	2101      	movs	r1, #1
 800187c:	2000      	movs	r0, #0
 800187e:	f7ff ff35 	bl	80016ec <LED>
 8001882:	e003      	b.n	800188c <main+0xc0>
 8001884:	2100      	movs	r1, #0
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff ff30 	bl	80016ec <LED>
	  (ADC_value >= STEP_SIZE * 2) ? LED(1, 1) : LED(1, 0);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	001a      	movs	r2, r3
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d804      	bhi.n	80018a2 <main+0xd6>
 8001898:	2101      	movs	r1, #1
 800189a:	2001      	movs	r0, #1
 800189c:	f7ff ff26 	bl	80016ec <LED>
 80018a0:	e003      	b.n	80018aa <main+0xde>
 80018a2:	2100      	movs	r1, #0
 80018a4:	2001      	movs	r0, #1
 80018a6:	f7ff ff21 	bl	80016ec <LED>
	  (ADC_value >= STEP_SIZE * 3) ? LED(2, 1) : LED(2, 0);
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	0013      	movs	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	189b      	adds	r3, r3, r2
 80018b2:	001a      	movs	r2, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d804      	bhi.n	80018c4 <main+0xf8>
 80018ba:	2101      	movs	r1, #1
 80018bc:	2002      	movs	r0, #2
 80018be:	f7ff ff15 	bl	80016ec <LED>
 80018c2:	e003      	b.n	80018cc <main+0x100>
 80018c4:	2100      	movs	r1, #0
 80018c6:	2002      	movs	r0, #2
 80018c8:	f7ff ff10 	bl	80016ec <LED>
	  (ADC_value >= STEP_SIZE * 4) ? LED(3, 1) : LED(3, 0);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	001a      	movs	r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d804      	bhi.n	80018e2 <main+0x116>
 80018d8:	2101      	movs	r1, #1
 80018da:	2003      	movs	r0, #3
 80018dc:	f7ff ff06 	bl	80016ec <LED>
 80018e0:	e003      	b.n	80018ea <main+0x11e>
 80018e2:	2100      	movs	r1, #0
 80018e4:	2003      	movs	r0, #3
 80018e6:	f7ff ff01 	bl	80016ec <LED>
	  (ADC_value >= STEP_SIZE * 5) ? LED(4, 1) : LED(4, 0);
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	0013      	movs	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	189b      	adds	r3, r3, r2
 80018f2:	001a      	movs	r2, r3
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d804      	bhi.n	8001904 <main+0x138>
 80018fa:	2101      	movs	r1, #1
 80018fc:	2004      	movs	r0, #4
 80018fe:	f7ff fef5 	bl	80016ec <LED>
 8001902:	e003      	b.n	800190c <main+0x140>
 8001904:	2100      	movs	r1, #0
 8001906:	2004      	movs	r0, #4
 8001908:	f7ff fef0 	bl	80016ec <LED>
	  (ADC_value >= STEP_SIZE * 6) ? LED(5, 1) : LED(5, 0);
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	0013      	movs	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	189b      	adds	r3, r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	001a      	movs	r2, r3
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d804      	bhi.n	8001928 <main+0x15c>
 800191e:	2101      	movs	r1, #1
 8001920:	2005      	movs	r0, #5
 8001922:	f7ff fee3 	bl	80016ec <LED>
 8001926:	e003      	b.n	8001930 <main+0x164>
 8001928:	2100      	movs	r1, #0
 800192a:	2005      	movs	r0, #5
 800192c:	f7ff fede 	bl	80016ec <LED>
	  (ADC_value >= STEP_SIZE * 7) ? LED(6, 1) : LED(6, 0);
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	0013      	movs	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	001a      	movs	r2, r3
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d804      	bhi.n	800194a <main+0x17e>
 8001940:	2101      	movs	r1, #1
 8001942:	2006      	movs	r0, #6
 8001944:	f7ff fed2 	bl	80016ec <LED>
 8001948:	e003      	b.n	8001952 <main+0x186>
 800194a:	2100      	movs	r1, #0
 800194c:	2006      	movs	r0, #6
 800194e:	f7ff fecd 	bl	80016ec <LED>
	  (ADC_value >= STEP_SIZE * 8) ? LED(7, 1) : LED(7, 0);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	001a      	movs	r2, r3
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d804      	bhi.n	8001968 <main+0x19c>
 800195e:	2101      	movs	r1, #1
 8001960:	2007      	movs	r0, #7
 8001962:	f7ff fec3 	bl	80016ec <LED>
 8001966:	e003      	b.n	8001970 <main+0x1a4>
 8001968:	2100      	movs	r1, #0
 800196a:	2007      	movs	r0, #7
 800196c:	f7ff febe 	bl	80016ec <LED>
	  (ADC_value >= STEP_SIZE * 9) ? LED(8, 1) : LED(8, 0);
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	0013      	movs	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	189b      	adds	r3, r3, r2
 8001978:	001a      	movs	r2, r3
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d804      	bhi.n	800198a <main+0x1be>
 8001980:	2101      	movs	r1, #1
 8001982:	2008      	movs	r0, #8
 8001984:	f7ff feb2 	bl	80016ec <LED>
 8001988:	e003      	b.n	8001992 <main+0x1c6>
 800198a:	2100      	movs	r1, #0
 800198c:	2008      	movs	r0, #8
 800198e:	f7ff fead 	bl	80016ec <LED>
	  (ADC_value >= STEP_SIZE * 10) ? LED(9, 1) : LED(9, 0);
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	0013      	movs	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	189b      	adds	r3, r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	001a      	movs	r2, r3
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d804      	bhi.n	80019ae <main+0x1e2>
 80019a4:	2101      	movs	r1, #1
 80019a6:	2009      	movs	r0, #9
 80019a8:	f7ff fea0 	bl	80016ec <LED>
 80019ac:	e761      	b.n	8001872 <main+0xa6>
 80019ae:	2100      	movs	r1, #0
 80019b0:	2009      	movs	r0, #9
 80019b2:	f7ff fe9b 	bl	80016ec <LED>
	  (ADC_value >= STEP_SIZE * 1) ? LED(0, 1) : LED(0, 0);
 80019b6:	e75c      	b.n	8001872 <main+0xa6>
 80019b8:	20000028 	.word	0x20000028
 80019bc:	40400000 	.word	0x40400000
 80019c0:	66666666 	.word	0x66666666
 80019c4:	400a6666 	.word	0x400a6666
 80019c8:	08005a9c 	.word	0x08005a9c
 80019cc:	200000e8 	.word	0x200000e8

080019d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b093      	sub	sp, #76	@ 0x4c
 80019d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d6:	2410      	movs	r4, #16
 80019d8:	193b      	adds	r3, r7, r4
 80019da:	0018      	movs	r0, r3
 80019dc:	2338      	movs	r3, #56	@ 0x38
 80019de:	001a      	movs	r2, r3
 80019e0:	2100      	movs	r1, #0
 80019e2:	f004 f823 	bl	8005a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e6:	003b      	movs	r3, r7
 80019e8:	0018      	movs	r0, r3
 80019ea:	2310      	movs	r3, #16
 80019ec:	001a      	movs	r2, r3
 80019ee:	2100      	movs	r1, #0
 80019f0:	f004 f81c 	bl	8005a2c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019f4:	2380      	movs	r3, #128	@ 0x80
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	0018      	movs	r0, r3
 80019fa:	f002 fa49 	bl	8003e90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019fe:	193b      	adds	r3, r7, r4
 8001a00:	2202      	movs	r2, #2
 8001a02:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a04:	193b      	adds	r3, r7, r4
 8001a06:	2280      	movs	r2, #128	@ 0x80
 8001a08:	0052      	lsls	r2, r2, #1
 8001a0a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001a0c:	0021      	movs	r1, r4
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	2240      	movs	r2, #64	@ 0x40
 8001a18:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1a:	187b      	adds	r3, r7, r1
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	2202      	movs	r2, #2
 8001a24:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	2200      	movs	r2, #0
 8001a2a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	2208      	movs	r2, #8
 8001a30:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a32:	187b      	adds	r3, r7, r1
 8001a34:	2280      	movs	r2, #128	@ 0x80
 8001a36:	0292      	lsls	r2, r2, #10
 8001a38:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a3a:	187b      	adds	r3, r7, r1
 8001a3c:	2280      	movs	r2, #128	@ 0x80
 8001a3e:	0492      	lsls	r2, r2, #18
 8001a40:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a42:	187b      	adds	r3, r7, r1
 8001a44:	2280      	movs	r2, #128	@ 0x80
 8001a46:	0592      	lsls	r2, r2, #22
 8001a48:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4a:	187b      	adds	r3, r7, r1
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f002 fa6b 	bl	8003f28 <HAL_RCC_OscConfig>
 8001a52:	1e03      	subs	r3, r0, #0
 8001a54:	d001      	beq.n	8001a5a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001a56:	f000 f995 	bl	8001d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a5a:	003b      	movs	r3, r7
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a60:	003b      	movs	r3, r7
 8001a62:	2202      	movs	r2, #2
 8001a64:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a66:	003b      	movs	r3, r7
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a6c:	003b      	movs	r3, r7
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a72:	003b      	movs	r3, r7
 8001a74:	2102      	movs	r1, #2
 8001a76:	0018      	movs	r0, r3
 8001a78:	f002 fd70 	bl	800455c <HAL_RCC_ClockConfig>
 8001a7c:	1e03      	subs	r3, r0, #0
 8001a7e:	d001      	beq.n	8001a84 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001a80:	f000 f980 	bl	8001d84 <Error_Handler>
  }
}
 8001a84:	46c0      	nop			@ (mov r8, r8)
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b013      	add	sp, #76	@ 0x4c
 8001a8a:	bd90      	pop	{r4, r7, pc}

08001a8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	0018      	movs	r0, r3
 8001a96:	230c      	movs	r3, #12
 8001a98:	001a      	movs	r2, r3
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	f003 ffc6 	bl	8005a2c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8001b54 <MX_ADC1_Init+0xc8>)
 8001aa4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001aa8:	2280      	movs	r2, #128	@ 0x80
 8001aaa:	0392      	lsls	r2, r2, #14
 8001aac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001aae:	4b28      	ldr	r3, [pc, #160]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ab4:	4b26      	ldr	r3, [pc, #152]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001aba:	4b25      	ldr	r3, [pc, #148]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ac0:	4b23      	ldr	r3, [pc, #140]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ac6:	4b22      	ldr	r3, [pc, #136]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001acc:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001aea:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001aec:	222c      	movs	r2, #44	@ 0x2c
 8001aee:	2101      	movs	r1, #1
 8001af0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001af2:	4b17      	ldr	r3, [pc, #92]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001af8:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001afe:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001b04:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001b06:	223c      	movs	r2, #60	@ 0x3c
 8001b08:	2100      	movs	r1, #0
 8001b0a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001b0c:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b12:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001b14:	0018      	movs	r0, r3
 8001b16:	f000 fc9d 	bl	8002454 <HAL_ADC_Init>
 8001b1a:	1e03      	subs	r3, r0, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001b1e:	f000 f931 	bl	8001d84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2201      	movs	r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b34:	1d3a      	adds	r2, r7, #4
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <MX_ADC1_Init+0xc4>)
 8001b38:	0011      	movs	r1, r2
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f000 fff8 	bl	8002b30 <HAL_ADC_ConfigChannel>
 8001b40:	1e03      	subs	r3, r0, #0
 8001b42:	d001      	beq.n	8001b48 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8001b44:	f000 f91e 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b48:	46c0      	nop			@ (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b004      	add	sp, #16
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000028 	.word	0x20000028
 8001b54:	40012400 	.word	0x40012400

08001b58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b5c:	4b23      	ldr	r3, [pc, #140]	@ (8001bec <MX_USART2_UART_Init+0x94>)
 8001b5e:	4a24      	ldr	r2, [pc, #144]	@ (8001bf0 <MX_USART2_UART_Init+0x98>)
 8001b60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b62:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <MX_USART2_UART_Init+0x94>)
 8001b64:	22e1      	movs	r2, #225	@ 0xe1
 8001b66:	0252      	lsls	r2, r2, #9
 8001b68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6a:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <MX_USART2_UART_Init+0x94>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b70:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <MX_USART2_UART_Init+0x94>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b76:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <MX_USART2_UART_Init+0x94>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <MX_USART2_UART_Init+0x94>)
 8001b7e:	220c      	movs	r2, #12
 8001b80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b82:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <MX_USART2_UART_Init+0x94>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b88:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <MX_USART2_UART_Init+0x94>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b8e:	4b17      	ldr	r3, [pc, #92]	@ (8001bec <MX_USART2_UART_Init+0x94>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b94:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <MX_USART2_UART_Init+0x94>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b9a:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <MX_USART2_UART_Init+0x94>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ba0:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <MX_USART2_UART_Init+0x94>)
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f003 f83c 	bl	8004c20 <HAL_UART_Init>
 8001ba8:	1e03      	subs	r3, r0, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001bac:	f000 f8ea 	bl	8001d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <MX_USART2_UART_Init+0x94>)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f003 fe59 	bl	800586c <HAL_UARTEx_SetTxFifoThreshold>
 8001bba:	1e03      	subs	r3, r0, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001bbe:	f000 f8e1 	bl	8001d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <MX_USART2_UART_Init+0x94>)
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f003 fe90 	bl	80058ec <HAL_UARTEx_SetRxFifoThreshold>
 8001bcc:	1e03      	subs	r3, r0, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001bd0:	f000 f8d8 	bl	8001d84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <MX_USART2_UART_Init+0x94>)
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f003 fe0e 	bl	80057f8 <HAL_UARTEx_DisableFifoMode>
 8001bdc:	1e03      	subs	r3, r0, #0
 8001bde:	d001      	beq.n	8001be4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001be0:	f000 f8d0 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001be4:	46c0      	nop			@ (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			@ (mov r8, r8)
 8001bec:	200000e8 	.word	0x200000e8
 8001bf0:	40004400 	.word	0x40004400

08001bf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <MX_DMA_Init+0x38>)
 8001bfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <MX_DMA_Init+0x38>)
 8001c00:	2101      	movs	r1, #1
 8001c02:	430a      	orrs	r2, r1
 8001c04:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <MX_DMA_Init+0x38>)
 8001c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2100      	movs	r1, #0
 8001c16:	2009      	movs	r0, #9
 8001c18:	f001 fd34 	bl	8003684 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c1c:	2009      	movs	r0, #9
 8001c1e:	f001 fd46 	bl	80036ae <HAL_NVIC_EnableIRQ>

}
 8001c22:	46c0      	nop			@ (mov r8, r8)
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b002      	add	sp, #8
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			@ (mov r8, r8)
 8001c2c:	40021000 	.word	0x40021000

08001c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b08b      	sub	sp, #44	@ 0x2c
 8001c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c36:	2414      	movs	r4, #20
 8001c38:	193b      	adds	r3, r7, r4
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	2314      	movs	r3, #20
 8001c3e:	001a      	movs	r2, r3
 8001c40:	2100      	movs	r1, #0
 8001c42:	f003 fef3 	bl	8005a2c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c46:	4b49      	ldr	r3, [pc, #292]	@ (8001d6c <MX_GPIO_Init+0x13c>)
 8001c48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c4a:	4b48      	ldr	r3, [pc, #288]	@ (8001d6c <MX_GPIO_Init+0x13c>)
 8001c4c:	2104      	movs	r1, #4
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c52:	4b46      	ldr	r3, [pc, #280]	@ (8001d6c <MX_GPIO_Init+0x13c>)
 8001c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c56:	2204      	movs	r2, #4
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c5e:	4b43      	ldr	r3, [pc, #268]	@ (8001d6c <MX_GPIO_Init+0x13c>)
 8001c60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c62:	4b42      	ldr	r3, [pc, #264]	@ (8001d6c <MX_GPIO_Init+0x13c>)
 8001c64:	2120      	movs	r1, #32
 8001c66:	430a      	orrs	r2, r1
 8001c68:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c6a:	4b40      	ldr	r3, [pc, #256]	@ (8001d6c <MX_GPIO_Init+0x13c>)
 8001c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c6e:	2220      	movs	r2, #32
 8001c70:	4013      	ands	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	4b3d      	ldr	r3, [pc, #244]	@ (8001d6c <MX_GPIO_Init+0x13c>)
 8001c78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d6c <MX_GPIO_Init+0x13c>)
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c82:	4b3a      	ldr	r3, [pc, #232]	@ (8001d6c <MX_GPIO_Init+0x13c>)
 8001c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c86:	2201      	movs	r2, #1
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8e:	4b37      	ldr	r3, [pc, #220]	@ (8001d6c <MX_GPIO_Init+0x13c>)
 8001c90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c92:	4b36      	ldr	r3, [pc, #216]	@ (8001d6c <MX_GPIO_Init+0x13c>)
 8001c94:	2102      	movs	r1, #2
 8001c96:	430a      	orrs	r2, r1
 8001c98:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c9a:	4b34      	ldr	r3, [pc, #208]	@ (8001d6c <MX_GPIO_Init+0x13c>)
 8001c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VU0_Pin|VU1_Pin|LD4_Pin|VU5_Pin
 8001ca6:	4932      	ldr	r1, [pc, #200]	@ (8001d70 <MX_GPIO_Init+0x140>)
 8001ca8:	23a0      	movs	r3, #160	@ 0xa0
 8001caa:	05db      	lsls	r3, r3, #23
 8001cac:	2200      	movs	r2, #0
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f002 f8d0 	bl	8003e54 <HAL_GPIO_WritePin>
                          |VU6_Pin|VU9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VU7_Pin|VU2_Pin|VU3_Pin|VU4_Pin, GPIO_PIN_RESET);
 8001cb4:	492f      	ldr	r1, [pc, #188]	@ (8001d74 <MX_GPIO_Init+0x144>)
 8001cb6:	4b30      	ldr	r3, [pc, #192]	@ (8001d78 <MX_GPIO_Init+0x148>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f002 f8ca 	bl	8003e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VU8_GPIO_Port, VU8_Pin, GPIO_PIN_RESET);
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d7c <MX_GPIO_Init+0x14c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2180      	movs	r1, #128	@ 0x80
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f002 f8c4 	bl	8003e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VU0_Pin VU1_Pin VU5_Pin VU6_Pin
                           VU9_Pin */
  GPIO_InitStruct.Pin = VU0_Pin|VU1_Pin|VU5_Pin|VU6_Pin
 8001ccc:	193b      	adds	r3, r7, r4
 8001cce:	4a2c      	ldr	r2, [pc, #176]	@ (8001d80 <MX_GPIO_Init+0x150>)
 8001cd0:	601a      	str	r2, [r3, #0]
                          |VU9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd2:	193b      	adds	r3, r7, r4
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	193b      	adds	r3, r7, r4
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	193b      	adds	r3, r7, r4
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	193a      	adds	r2, r7, r4
 8001ce6:	23a0      	movs	r3, #160	@ 0xa0
 8001ce8:	05db      	lsls	r3, r3, #23
 8001cea:	0011      	movs	r1, r2
 8001cec:	0018      	movs	r0, r3
 8001cee:	f001 ff4d 	bl	8003b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001cf2:	193b      	adds	r3, r7, r4
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf8:	193b      	adds	r3, r7, r4
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	193b      	adds	r3, r7, r4
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d04:	193b      	adds	r3, r7, r4
 8001d06:	2202      	movs	r2, #2
 8001d08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001d0a:	193a      	adds	r2, r7, r4
 8001d0c:	23a0      	movs	r3, #160	@ 0xa0
 8001d0e:	05db      	lsls	r3, r3, #23
 8001d10:	0011      	movs	r1, r2
 8001d12:	0018      	movs	r0, r3
 8001d14:	f001 ff3a 	bl	8003b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : VU7_Pin VU2_Pin VU3_Pin VU4_Pin */
  GPIO_InitStruct.Pin = VU7_Pin|VU2_Pin|VU3_Pin|VU4_Pin;
 8001d18:	193b      	adds	r3, r7, r4
 8001d1a:	4a16      	ldr	r2, [pc, #88]	@ (8001d74 <MX_GPIO_Init+0x144>)
 8001d1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1e:	193b      	adds	r3, r7, r4
 8001d20:	2201      	movs	r2, #1
 8001d22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	193b      	adds	r3, r7, r4
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	193b      	adds	r3, r7, r4
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	193b      	adds	r3, r7, r4
 8001d32:	4a11      	ldr	r2, [pc, #68]	@ (8001d78 <MX_GPIO_Init+0x148>)
 8001d34:	0019      	movs	r1, r3
 8001d36:	0010      	movs	r0, r2
 8001d38:	f001 ff28 	bl	8003b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : VU8_Pin */
  GPIO_InitStruct.Pin = VU8_Pin;
 8001d3c:	0021      	movs	r1, r4
 8001d3e:	187b      	adds	r3, r7, r1
 8001d40:	2280      	movs	r2, #128	@ 0x80
 8001d42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	2201      	movs	r2, #1
 8001d48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(VU8_GPIO_Port, &GPIO_InitStruct);
 8001d56:	187b      	adds	r3, r7, r1
 8001d58:	4a08      	ldr	r2, [pc, #32]	@ (8001d7c <MX_GPIO_Init+0x14c>)
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	0010      	movs	r0, r2
 8001d5e:	f001 ff15 	bl	8003b8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b00b      	add	sp, #44	@ 0x2c
 8001d68:	bd90      	pop	{r4, r7, pc}
 8001d6a:	46c0      	nop			@ (mov r8, r8)
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	000002f2 	.word	0x000002f2
 8001d74:	00001803 	.word	0x00001803
 8001d78:	50000400 	.word	0x50000400
 8001d7c:	50000800 	.word	0x50000800
 8001d80:	000002d2 	.word	0x000002d2

08001d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d88:	b672      	cpsid	i
}
 8001d8a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d8c:	46c0      	nop			@ (mov r8, r8)
 8001d8e:	e7fd      	b.n	8001d8c <Error_Handler+0x8>

08001d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <HAL_MspInit+0x44>)
 8001d98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <HAL_MspInit+0x44>)
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001da2:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <HAL_MspInit+0x44>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	2201      	movs	r2, #1
 8001da8:	4013      	ands	r3, r2
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <HAL_MspInit+0x44>)
 8001db0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001db2:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <HAL_MspInit+0x44>)
 8001db4:	2180      	movs	r1, #128	@ 0x80
 8001db6:	0549      	lsls	r1, r1, #21
 8001db8:	430a      	orrs	r2, r1
 8001dba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001dbc:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <HAL_MspInit+0x44>)
 8001dbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dc0:	2380      	movs	r3, #128	@ 0x80
 8001dc2:	055b      	lsls	r3, r3, #21
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dca:	46c0      	nop			@ (mov r8, r8)
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b002      	add	sp, #8
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			@ (mov r8, r8)
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b097      	sub	sp, #92	@ 0x5c
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	2344      	movs	r3, #68	@ 0x44
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	0018      	movs	r0, r3
 8001de6:	2314      	movs	r3, #20
 8001de8:	001a      	movs	r2, r3
 8001dea:	2100      	movs	r1, #0
 8001dec:	f003 fe1e 	bl	8005a2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df0:	2410      	movs	r4, #16
 8001df2:	193b      	adds	r3, r7, r4
 8001df4:	0018      	movs	r0, r3
 8001df6:	2334      	movs	r3, #52	@ 0x34
 8001df8:	001a      	movs	r2, r3
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	f003 fe16 	bl	8005a2c <memset>
  if(hadc->Instance==ADC1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a39      	ldr	r2, [pc, #228]	@ (8001eec <HAL_ADC_MspInit+0x114>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d16c      	bne.n	8001ee4 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e0a:	193b      	adds	r3, r7, r4
 8001e0c:	2280      	movs	r2, #128	@ 0x80
 8001e0e:	01d2      	lsls	r2, r2, #7
 8001e10:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001e12:	193b      	adds	r3, r7, r4
 8001e14:	2200      	movs	r2, #0
 8001e16:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e18:	193b      	adds	r3, r7, r4
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f002 fd48 	bl	80048b0 <HAL_RCCEx_PeriphCLKConfig>
 8001e20:	1e03      	subs	r3, r0, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001e24:	f7ff ffae 	bl	8001d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001e28:	4b31      	ldr	r3, [pc, #196]	@ (8001ef0 <HAL_ADC_MspInit+0x118>)
 8001e2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e2c:	4b30      	ldr	r3, [pc, #192]	@ (8001ef0 <HAL_ADC_MspInit+0x118>)
 8001e2e:	2180      	movs	r1, #128	@ 0x80
 8001e30:	0349      	lsls	r1, r1, #13
 8001e32:	430a      	orrs	r2, r1
 8001e34:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e36:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef0 <HAL_ADC_MspInit+0x118>)
 8001e38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e3a:	2380      	movs	r3, #128	@ 0x80
 8001e3c:	035b      	lsls	r3, r3, #13
 8001e3e:	4013      	ands	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef0 <HAL_ADC_MspInit+0x118>)
 8001e46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e48:	4b29      	ldr	r3, [pc, #164]	@ (8001ef0 <HAL_ADC_MspInit+0x118>)
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e50:	4b27      	ldr	r3, [pc, #156]	@ (8001ef0 <HAL_ADC_MspInit+0x118>)
 8001e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e54:	2201      	movs	r2, #1
 8001e56:	4013      	ands	r3, r2
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e5c:	2144      	movs	r1, #68	@ 0x44
 8001e5e:	187b      	adds	r3, r7, r1
 8001e60:	2201      	movs	r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e64:	187b      	adds	r3, r7, r1
 8001e66:	2203      	movs	r2, #3
 8001e68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	187b      	adds	r3, r7, r1
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	187a      	adds	r2, r7, r1
 8001e72:	23a0      	movs	r3, #160	@ 0xa0
 8001e74:	05db      	lsls	r3, r3, #23
 8001e76:	0011      	movs	r1, r2
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f001 fe87 	bl	8003b8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef4 <HAL_ADC_MspInit+0x11c>)
 8001e80:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef8 <HAL_ADC_MspInit+0x120>)
 8001e82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001e84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <HAL_ADC_MspInit+0x11c>)
 8001e86:	2205      	movs	r2, #5
 8001e88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <HAL_ADC_MspInit+0x11c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e90:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <HAL_ADC_MspInit+0x11c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e96:	4b17      	ldr	r3, [pc, #92]	@ (8001ef4 <HAL_ADC_MspInit+0x11c>)
 8001e98:	2280      	movs	r2, #128	@ 0x80
 8001e9a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e9c:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <HAL_ADC_MspInit+0x11c>)
 8001e9e:	2280      	movs	r2, #128	@ 0x80
 8001ea0:	0052      	lsls	r2, r2, #1
 8001ea2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ea4:	4b13      	ldr	r3, [pc, #76]	@ (8001ef4 <HAL_ADC_MspInit+0x11c>)
 8001ea6:	2280      	movs	r2, #128	@ 0x80
 8001ea8:	00d2      	lsls	r2, r2, #3
 8001eaa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001eac:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <HAL_ADC_MspInit+0x11c>)
 8001eae:	2220      	movs	r2, #32
 8001eb0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001eb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ef4 <HAL_ADC_MspInit+0x11c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef4 <HAL_ADC_MspInit+0x11c>)
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f001 fc14 	bl	80036e8 <HAL_DMA_Init>
 8001ec0:	1e03      	subs	r3, r0, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8001ec4:	f7ff ff5e 	bl	8001d84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef4 <HAL_ADC_MspInit+0x11c>)
 8001ecc:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ece:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <HAL_ADC_MspInit+0x11c>)
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	200c      	movs	r0, #12
 8001eda:	f001 fbd3 	bl	8003684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8001ede:	200c      	movs	r0, #12
 8001ee0:	f001 fbe5 	bl	80036ae <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ee4:	46c0      	nop			@ (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b017      	add	sp, #92	@ 0x5c
 8001eea:	bd90      	pop	{r4, r7, pc}
 8001eec:	40012400 	.word	0x40012400
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	2000008c 	.word	0x2000008c
 8001ef8:	40020008 	.word	0x40020008

08001efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b097      	sub	sp, #92	@ 0x5c
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	2344      	movs	r3, #68	@ 0x44
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	0018      	movs	r0, r3
 8001f0a:	2314      	movs	r3, #20
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	2100      	movs	r1, #0
 8001f10:	f003 fd8c 	bl	8005a2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f14:	2410      	movs	r4, #16
 8001f16:	193b      	adds	r3, r7, r4
 8001f18:	0018      	movs	r0, r3
 8001f1a:	2334      	movs	r3, #52	@ 0x34
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	2100      	movs	r1, #0
 8001f20:	f003 fd84 	bl	8005a2c <memset>
  if(huart->Instance==USART2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a22      	ldr	r2, [pc, #136]	@ (8001fb4 <HAL_UART_MspInit+0xb8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d13e      	bne.n	8001fac <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f2e:	193b      	adds	r3, r7, r4
 8001f30:	2202      	movs	r2, #2
 8001f32:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f34:	193b      	adds	r3, r7, r4
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f3a:	193b      	adds	r3, r7, r4
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f002 fcb7 	bl	80048b0 <HAL_RCCEx_PeriphCLKConfig>
 8001f42:	1e03      	subs	r3, r0, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f46:	f7ff ff1d 	bl	8001d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <HAL_UART_MspInit+0xbc>)
 8001f4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb8 <HAL_UART_MspInit+0xbc>)
 8001f50:	2180      	movs	r1, #128	@ 0x80
 8001f52:	0289      	lsls	r1, r1, #10
 8001f54:	430a      	orrs	r2, r1
 8001f56:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f58:	4b17      	ldr	r3, [pc, #92]	@ (8001fb8 <HAL_UART_MspInit+0xbc>)
 8001f5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	029b      	lsls	r3, r3, #10
 8001f60:	4013      	ands	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	4b14      	ldr	r3, [pc, #80]	@ (8001fb8 <HAL_UART_MspInit+0xbc>)
 8001f68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f6a:	4b13      	ldr	r3, [pc, #76]	@ (8001fb8 <HAL_UART_MspInit+0xbc>)
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f72:	4b11      	ldr	r3, [pc, #68]	@ (8001fb8 <HAL_UART_MspInit+0xbc>)
 8001f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f76:	2201      	movs	r2, #1
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001f7e:	2144      	movs	r1, #68	@ 0x44
 8001f80:	187b      	adds	r3, r7, r1
 8001f82:	220c      	movs	r2, #12
 8001f84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	187b      	adds	r3, r7, r1
 8001f88:	2202      	movs	r2, #2
 8001f8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f8c:	187b      	adds	r3, r7, r1
 8001f8e:	2201      	movs	r2, #1
 8001f90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	187b      	adds	r3, r7, r1
 8001f94:	2200      	movs	r2, #0
 8001f96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001f98:	187b      	adds	r3, r7, r1
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	187a      	adds	r2, r7, r1
 8001fa0:	23a0      	movs	r3, #160	@ 0xa0
 8001fa2:	05db      	lsls	r3, r3, #23
 8001fa4:	0011      	movs	r1, r2
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f001 fdf0 	bl	8003b8c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001fac:	46c0      	nop			@ (mov r8, r8)
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b017      	add	sp, #92	@ 0x5c
 8001fb2:	bd90      	pop	{r4, r7, pc}
 8001fb4:	40004400 	.word	0x40004400
 8001fb8:	40021000 	.word	0x40021000

08001fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fc0:	46c0      	nop			@ (mov r8, r8)
 8001fc2:	e7fd      	b.n	8001fc0 <NMI_Handler+0x4>

08001fc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc8:	46c0      	nop			@ (mov r8, r8)
 8001fca:	e7fd      	b.n	8001fc8 <HardFault_Handler+0x4>

08001fcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001fd0:	46c0      	nop			@ (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fda:	46c0      	nop			@ (mov r8, r8)
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe4:	f000 f8b6 	bl	8002154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe8:	46c0      	nop			@ (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ff4:	4b03      	ldr	r3, [pc, #12]	@ (8002004 <DMA1_Channel1_IRQHandler+0x14>)
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f001 fc86 	bl	8003908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ffc:	46c0      	nop			@ (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	2000008c 	.word	0x2000008c

08002008 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800200c:	4b03      	ldr	r3, [pc, #12]	@ (800201c <ADC1_COMP_IRQHandler+0x14>)
 800200e:	0018      	movs	r0, r3
 8002010:	f000 fc56 	bl	80028c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002014:	46c0      	nop			@ (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	20000028 	.word	0x20000028

08002020 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002024:	46c0      	nop			@ (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800202c:	480d      	ldr	r0, [pc, #52]	@ (8002064 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800202e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002030:	f7ff fff6 	bl	8002020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002034:	480c      	ldr	r0, [pc, #48]	@ (8002068 <LoopForever+0x6>)
  ldr r1, =_edata
 8002036:	490d      	ldr	r1, [pc, #52]	@ (800206c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002038:	4a0d      	ldr	r2, [pc, #52]	@ (8002070 <LoopForever+0xe>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800203c:	e002      	b.n	8002044 <LoopCopyDataInit>

0800203e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002042:	3304      	adds	r3, #4

08002044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002048:	d3f9      	bcc.n	800203e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204a:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <LoopForever+0x12>)
  ldr r4, =_ebss
 800204c:	4c0a      	ldr	r4, [pc, #40]	@ (8002078 <LoopForever+0x16>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002050:	e001      	b.n	8002056 <LoopFillZerobss>

08002052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002054:	3204      	adds	r2, #4

08002056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002058:	d3fb      	bcc.n	8002052 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800205a:	f003 fcef 	bl	8005a3c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800205e:	f7ff fbb5 	bl	80017cc <main>

08002062 <LoopForever>:

LoopForever:
  b LoopForever
 8002062:	e7fe      	b.n	8002062 <LoopForever>
  ldr   r0, =_estack
 8002064:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800206c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002070:	08005c20 	.word	0x08005c20
  ldr r2, =_sbss
 8002074:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002078:	20000180 	.word	0x20000180

0800207c <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800207c:	e7fe      	b.n	800207c <CEC_IRQHandler>
	...

08002080 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800208c:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <HAL_Init+0x3c>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b0a      	ldr	r3, [pc, #40]	@ (80020bc <HAL_Init+0x3c>)
 8002092:	2180      	movs	r1, #128	@ 0x80
 8002094:	0049      	lsls	r1, r1, #1
 8002096:	430a      	orrs	r2, r1
 8002098:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800209a:	2000      	movs	r0, #0
 800209c:	f000 f810 	bl	80020c0 <HAL_InitTick>
 80020a0:	1e03      	subs	r3, r0, #0
 80020a2:	d003      	beq.n	80020ac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80020a4:	1dfb      	adds	r3, r7, #7
 80020a6:	2201      	movs	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]
 80020aa:	e001      	b.n	80020b0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80020ac:	f7ff fe70 	bl	8001d90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020b0:	1dfb      	adds	r3, r7, #7
 80020b2:	781b      	ldrb	r3, [r3, #0]
}
 80020b4:	0018      	movs	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b002      	add	sp, #8
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40022000 	.word	0x40022000

080020c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020c8:	230f      	movs	r3, #15
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80020d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002148 <HAL_InitTick+0x88>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d02b      	beq.n	8002130 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80020d8:	4b1c      	ldr	r3, [pc, #112]	@ (800214c <HAL_InitTick+0x8c>)
 80020da:	681c      	ldr	r4, [r3, #0]
 80020dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002148 <HAL_InitTick+0x88>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	0019      	movs	r1, r3
 80020e2:	23fa      	movs	r3, #250	@ 0xfa
 80020e4:	0098      	lsls	r0, r3, #2
 80020e6:	f7fe f80d 	bl	8000104 <__udivsi3>
 80020ea:	0003      	movs	r3, r0
 80020ec:	0019      	movs	r1, r3
 80020ee:	0020      	movs	r0, r4
 80020f0:	f7fe f808 	bl	8000104 <__udivsi3>
 80020f4:	0003      	movs	r3, r0
 80020f6:	0018      	movs	r0, r3
 80020f8:	f001 fae9 	bl	80036ce <HAL_SYSTICK_Config>
 80020fc:	1e03      	subs	r3, r0, #0
 80020fe:	d112      	bne.n	8002126 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d80a      	bhi.n	800211c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	2301      	movs	r3, #1
 800210a:	425b      	negs	r3, r3
 800210c:	2200      	movs	r2, #0
 800210e:	0018      	movs	r0, r3
 8002110:	f001 fab8 	bl	8003684 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002114:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <HAL_InitTick+0x90>)
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e00d      	b.n	8002138 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800211c:	230f      	movs	r3, #15
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	e008      	b.n	8002138 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002126:	230f      	movs	r3, #15
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	e003      	b.n	8002138 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002130:	230f      	movs	r3, #15
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002138:	230f      	movs	r3, #15
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	781b      	ldrb	r3, [r3, #0]
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b005      	add	sp, #20
 8002144:	bd90      	pop	{r4, r7, pc}
 8002146:	46c0      	nop			@ (mov r8, r8)
 8002148:	20000008 	.word	0x20000008
 800214c:	20000000 	.word	0x20000000
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002158:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <HAL_IncTick+0x1c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	001a      	movs	r2, r3
 800215e:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <HAL_IncTick+0x20>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	18d2      	adds	r2, r2, r3
 8002164:	4b03      	ldr	r3, [pc, #12]	@ (8002174 <HAL_IncTick+0x20>)
 8002166:	601a      	str	r2, [r3, #0]
}
 8002168:	46c0      	nop			@ (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	20000008 	.word	0x20000008
 8002174:	2000017c 	.word	0x2000017c

08002178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  return uwTick;
 800217c:	4b02      	ldr	r3, [pc, #8]	@ (8002188 <HAL_GetTick+0x10>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	0018      	movs	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	46c0      	nop			@ (mov r8, r8)
 8002188:	2000017c 	.word	0x2000017c

0800218c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a05      	ldr	r2, [pc, #20]	@ (80021b0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800219c:	401a      	ands	r2, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	601a      	str	r2, [r3, #0]
}
 80021a6:	46c0      	nop			@ (mov r8, r8)
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b002      	add	sp, #8
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	46c0      	nop			@ (mov r8, r8)
 80021b0:	fe3fffff 	.word	0xfe3fffff

080021b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	23e0      	movs	r3, #224	@ 0xe0
 80021c2:	045b      	lsls	r3, r3, #17
 80021c4:	4013      	ands	r3, r2
}
 80021c6:	0018      	movs	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b002      	add	sp, #8
 80021cc:	bd80      	pop	{r7, pc}

080021ce <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	2104      	movs	r1, #4
 80021e2:	400a      	ands	r2, r1
 80021e4:	2107      	movs	r1, #7
 80021e6:	4091      	lsls	r1, r2
 80021e8:	000a      	movs	r2, r1
 80021ea:	43d2      	mvns	r2, r2
 80021ec:	401a      	ands	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2104      	movs	r1, #4
 80021f2:	400b      	ands	r3, r1
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4099      	lsls	r1, r3
 80021f8:	000b      	movs	r3, r1
 80021fa:	431a      	orrs	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002200:	46c0      	nop			@ (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b004      	add	sp, #16
 8002206:	bd80      	pop	{r7, pc}

08002208 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	2104      	movs	r1, #4
 800221a:	400a      	ands	r2, r1
 800221c:	2107      	movs	r1, #7
 800221e:	4091      	lsls	r1, r2
 8002220:	000a      	movs	r2, r1
 8002222:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2104      	movs	r1, #4
 8002228:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800222a:	40da      	lsrs	r2, r3
 800222c:	0013      	movs	r3, r2
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	b002      	add	sp, #8
 8002234:	bd80      	pop	{r7, pc}

08002236 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	23c0      	movs	r3, #192	@ 0xc0
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	4013      	ands	r3, r2
 8002248:	d101      	bne.n	800224e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800224e:	2300      	movs	r3, #0
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b002      	add	sp, #8
 8002256:	bd80      	pop	{r7, pc}

08002258 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	211f      	movs	r1, #31
 800226c:	400a      	ands	r2, r1
 800226e:	210f      	movs	r1, #15
 8002270:	4091      	lsls	r1, r2
 8002272:	000a      	movs	r2, r1
 8002274:	43d2      	mvns	r2, r2
 8002276:	401a      	ands	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	0e9b      	lsrs	r3, r3, #26
 800227c:	210f      	movs	r1, #15
 800227e:	4019      	ands	r1, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	201f      	movs	r0, #31
 8002284:	4003      	ands	r3, r0
 8002286:	4099      	lsls	r1, r3
 8002288:	000b      	movs	r3, r1
 800228a:	431a      	orrs	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002290:	46c0      	nop			@ (mov r8, r8)
 8002292:	46bd      	mov	sp, r7
 8002294:	b004      	add	sp, #16
 8002296:	bd80      	pop	{r7, pc}

08002298 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	035b      	lsls	r3, r3, #13
 80022aa:	0b5b      	lsrs	r3, r3, #13
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b002      	add	sp, #8
 80022b8:	bd80      	pop	{r7, pc}

080022ba <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	0352      	lsls	r2, r2, #13
 80022cc:	0b52      	lsrs	r2, r2, #13
 80022ce:	43d2      	mvns	r2, r2
 80022d0:	401a      	ands	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022d6:	46c0      	nop			@ (mov r8, r8)
 80022d8:	46bd      	mov	sp, r7
 80022da:	b002      	add	sp, #8
 80022dc:	bd80      	pop	{r7, pc}

080022de <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2203      	movs	r2, #3
 80022ec:	4013      	ands	r3, r2
}
 80022ee:	0018      	movs	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b002      	add	sp, #8
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	0212      	lsls	r2, r2, #8
 800230c:	43d2      	mvns	r2, r2
 800230e:	401a      	ands	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	400b      	ands	r3, r1
 8002318:	4904      	ldr	r1, [pc, #16]	@ (800232c <LL_ADC_SetChannelSamplingTime+0x34>)
 800231a:	400b      	ands	r3, r1
 800231c:	431a      	orrs	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	46bd      	mov	sp, r7
 8002326:	b004      	add	sp, #16
 8002328:	bd80      	pop	{r7, pc}
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	07ffff00 	.word	0x07ffff00

08002330 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4a05      	ldr	r2, [pc, #20]	@ (8002354 <LL_ADC_EnableInternalRegulator+0x24>)
 800233e:	4013      	ands	r3, r2
 8002340:	2280      	movs	r2, #128	@ 0x80
 8002342:	0552      	lsls	r2, r2, #21
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800234a:	46c0      	nop			@ (mov r8, r8)
 800234c:	46bd      	mov	sp, r7
 800234e:	b002      	add	sp, #8
 8002350:	bd80      	pop	{r7, pc}
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	6fffffe8 	.word	0x6fffffe8

08002358 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	055b      	lsls	r3, r3, #21
 8002368:	401a      	ands	r2, r3
 800236a:	2380      	movs	r3, #128	@ 0x80
 800236c:	055b      	lsls	r3, r3, #21
 800236e:	429a      	cmp	r2, r3
 8002370:	d101      	bne.n	8002376 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002376:	2300      	movs	r3, #0
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bd80      	pop	{r7, pc}

08002380 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4a04      	ldr	r2, [pc, #16]	@ (80023a0 <LL_ADC_Enable+0x20>)
 800238e:	4013      	ands	r3, r2
 8002390:	2201      	movs	r2, #1
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002398:	46c0      	nop			@ (mov r8, r8)
 800239a:	46bd      	mov	sp, r7
 800239c:	b002      	add	sp, #8
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	7fffffe8 	.word	0x7fffffe8

080023a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a04      	ldr	r2, [pc, #16]	@ (80023c4 <LL_ADC_Disable+0x20>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	2202      	movs	r2, #2
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80023bc:	46c0      	nop			@ (mov r8, r8)
 80023be:	46bd      	mov	sp, r7
 80023c0:	b002      	add	sp, #8
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	7fffffe8 	.word	0x7fffffe8

080023c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <LL_ADC_IsEnabled+0x18>
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <LL_ADC_IsEnabled+0x1a>
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	0018      	movs	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b002      	add	sp, #8
 80023e8:	bd80      	pop	{r7, pc}

080023ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2202      	movs	r2, #2
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d101      	bne.n	8002402 <LL_ADC_IsDisableOngoing+0x18>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <LL_ADC_IsDisableOngoing+0x1a>
 8002402:	2300      	movs	r3, #0
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b002      	add	sp, #8
 800240a:	bd80      	pop	{r7, pc}

0800240c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4a04      	ldr	r2, [pc, #16]	@ (800242c <LL_ADC_REG_StartConversion+0x20>)
 800241a:	4013      	ands	r3, r2
 800241c:	2204      	movs	r2, #4
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002424:	46c0      	nop			@ (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b002      	add	sp, #8
 800242a:	bd80      	pop	{r7, pc}
 800242c:	7fffffe8 	.word	0x7fffffe8

08002430 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2204      	movs	r2, #4
 800243e:	4013      	ands	r3, r2
 8002440:	2b04      	cmp	r3, #4
 8002442:	d101      	bne.n	8002448 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002448:	2300      	movs	r3, #0
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b002      	add	sp, #8
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800245c:	231f      	movs	r3, #31
 800245e:	18fb      	adds	r3, r7, r3
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002464:	2300      	movs	r3, #0
 8002466:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e17f      	b.n	800277a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	0018      	movs	r0, r3
 8002486:	f7ff fca7 	bl	8001dd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2254      	movs	r2, #84	@ 0x54
 8002494:	2100      	movs	r1, #0
 8002496:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	0018      	movs	r0, r3
 800249e:	f7ff ff5b 	bl	8002358 <LL_ADC_IsInternalRegulatorEnabled>
 80024a2:	1e03      	subs	r3, r0, #0
 80024a4:	d115      	bne.n	80024d2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f7ff ff40 	bl	8002330 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024b0:	4bb4      	ldr	r3, [pc, #720]	@ (8002784 <HAL_ADC_Init+0x330>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	49b4      	ldr	r1, [pc, #720]	@ (8002788 <HAL_ADC_Init+0x334>)
 80024b6:	0018      	movs	r0, r3
 80024b8:	f7fd fe24 	bl	8000104 <__udivsi3>
 80024bc:	0003      	movs	r3, r0
 80024be:	3301      	adds	r3, #1
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024c4:	e002      	b.n	80024cc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f9      	bne.n	80024c6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	0018      	movs	r0, r3
 80024d8:	f7ff ff3e 	bl	8002358 <LL_ADC_IsInternalRegulatorEnabled>
 80024dc:	1e03      	subs	r3, r0, #0
 80024de:	d10f      	bne.n	8002500 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e4:	2210      	movs	r2, #16
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f0:	2201      	movs	r2, #1
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024f8:	231f      	movs	r3, #31
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	2201      	movs	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	0018      	movs	r0, r3
 8002506:	f7ff ff93 	bl	8002430 <LL_ADC_REG_IsConversionOngoing>
 800250a:	0003      	movs	r3, r0
 800250c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002512:	2210      	movs	r2, #16
 8002514:	4013      	ands	r3, r2
 8002516:	d000      	beq.n	800251a <HAL_ADC_Init+0xc6>
 8002518:	e122      	b.n	8002760 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d000      	beq.n	8002522 <HAL_ADC_Init+0xce>
 8002520:	e11e      	b.n	8002760 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002526:	4a99      	ldr	r2, [pc, #612]	@ (800278c <HAL_ADC_Init+0x338>)
 8002528:	4013      	ands	r3, r2
 800252a:	2202      	movs	r2, #2
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	0018      	movs	r0, r3
 8002538:	f7ff ff46 	bl	80023c8 <LL_ADC_IsEnabled>
 800253c:	1e03      	subs	r3, r0, #0
 800253e:	d000      	beq.n	8002542 <HAL_ADC_Init+0xee>
 8002540:	e0ad      	b.n	800269e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7e1b      	ldrb	r3, [r3, #24]
 800254a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800254c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7e5b      	ldrb	r3, [r3, #25]
 8002552:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002554:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	7e9b      	ldrb	r3, [r3, #26]
 800255a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800255c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <HAL_ADC_Init+0x118>
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	015b      	lsls	r3, r3, #5
 800256a:	e000      	b.n	800256e <HAL_ADC_Init+0x11a>
 800256c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800256e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002574:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	da04      	bge.n	8002588 <HAL_ADC_Init+0x134>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	e001      	b.n	800258c <HAL_ADC_Init+0x138>
 8002588:	2380      	movs	r3, #128	@ 0x80
 800258a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800258c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	212c      	movs	r1, #44	@ 0x2c
 8002592:	5c5b      	ldrb	r3, [r3, r1]
 8002594:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002596:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2220      	movs	r2, #32
 80025a2:	5c9b      	ldrb	r3, [r3, r2]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d115      	bne.n	80025d4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7e9b      	ldrb	r3, [r3, #26]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2280      	movs	r2, #128	@ 0x80
 80025b4:	0252      	lsls	r2, r2, #9
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	e00b      	b.n	80025d4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c0:	2220      	movs	r2, #32
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025cc:	2201      	movs	r2, #1
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025e0:	23e0      	movs	r3, #224	@ 0xe0
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80025ea:	4313      	orrs	r3, r2
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a65      	ldr	r2, [pc, #404]	@ (8002790 <HAL_ADC_Init+0x33c>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	430a      	orrs	r2, r1
 8002606:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	0f9b      	lsrs	r3, r3, #30
 800260e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002614:	4313      	orrs	r3, r2
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	223c      	movs	r2, #60	@ 0x3c
 8002620:	5c9b      	ldrb	r3, [r3, r2]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d111      	bne.n	800264a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	0f9b      	lsrs	r3, r3, #30
 800262c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002632:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002638:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800263e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	2201      	movs	r2, #1
 8002646:	4313      	orrs	r3, r2
 8002648:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	4a50      	ldr	r2, [pc, #320]	@ (8002794 <HAL_ADC_Init+0x340>)
 8002652:	4013      	ands	r3, r2
 8002654:	0019      	movs	r1, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	430a      	orrs	r2, r1
 800265e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	23c0      	movs	r3, #192	@ 0xc0
 8002666:	061b      	lsls	r3, r3, #24
 8002668:	429a      	cmp	r2, r3
 800266a:	d018      	beq.n	800269e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002670:	2380      	movs	r3, #128	@ 0x80
 8002672:	05db      	lsls	r3, r3, #23
 8002674:	429a      	cmp	r2, r3
 8002676:	d012      	beq.n	800269e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800267c:	2380      	movs	r3, #128	@ 0x80
 800267e:	061b      	lsls	r3, r3, #24
 8002680:	429a      	cmp	r2, r3
 8002682:	d00c      	beq.n	800269e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002684:	4b44      	ldr	r3, [pc, #272]	@ (8002798 <HAL_ADC_Init+0x344>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a44      	ldr	r2, [pc, #272]	@ (800279c <HAL_ADC_Init+0x348>)
 800268a:	4013      	ands	r3, r2
 800268c:	0019      	movs	r1, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	23f0      	movs	r3, #240	@ 0xf0
 8002694:	039b      	lsls	r3, r3, #14
 8002696:	401a      	ands	r2, r3
 8002698:	4b3f      	ldr	r3, [pc, #252]	@ (8002798 <HAL_ADC_Init+0x344>)
 800269a:	430a      	orrs	r2, r1
 800269c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a6:	001a      	movs	r2, r3
 80026a8:	2100      	movs	r1, #0
 80026aa:	f7ff fd90 	bl	80021ce <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b6:	493a      	ldr	r1, [pc, #232]	@ (80027a0 <HAL_ADC_Init+0x34c>)
 80026b8:	001a      	movs	r2, r3
 80026ba:	f7ff fd88 	bl	80021ce <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2110      	movs	r1, #16
 80026d2:	4249      	negs	r1, r1
 80026d4:	430a      	orrs	r2, r1
 80026d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80026d8:	e018      	b.n	800270c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	2380      	movs	r3, #128	@ 0x80
 80026e0:	039b      	lsls	r3, r3, #14
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d112      	bne.n	800270c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	221c      	movs	r2, #28
 80026f6:	4013      	ands	r3, r2
 80026f8:	2210      	movs	r2, #16
 80026fa:	4252      	negs	r2, r2
 80026fc:	409a      	lsls	r2, r3
 80026fe:	0011      	movs	r1, r2
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2100      	movs	r1, #0
 8002712:	0018      	movs	r0, r3
 8002714:	f7ff fd78 	bl	8002208 <LL_ADC_GetSamplingTimeCommonChannels>
 8002718:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800271e:	429a      	cmp	r2, r3
 8002720:	d10b      	bne.n	800273a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272c:	2203      	movs	r2, #3
 800272e:	4393      	bics	r3, r2
 8002730:	2201      	movs	r2, #1
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002738:	e01c      	b.n	8002774 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273e:	2212      	movs	r2, #18
 8002740:	4393      	bics	r3, r2
 8002742:	2210      	movs	r2, #16
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274e:	2201      	movs	r2, #1
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002756:	231f      	movs	r3, #31
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800275e:	e009      	b.n	8002774 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002764:	2210      	movs	r2, #16
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800276c:	231f      	movs	r3, #31
 800276e:	18fb      	adds	r3, r7, r3
 8002770:	2201      	movs	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002774:	231f      	movs	r3, #31
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	781b      	ldrb	r3, [r3, #0]
}
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b008      	add	sp, #32
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			@ (mov r8, r8)
 8002784:	20000000 	.word	0x20000000
 8002788:	00030d40 	.word	0x00030d40
 800278c:	fffffefd 	.word	0xfffffefd
 8002790:	ffde0201 	.word	0xffde0201
 8002794:	1ffffc02 	.word	0x1ffffc02
 8002798:	40012708 	.word	0x40012708
 800279c:	ffc3ffff 	.word	0xffc3ffff
 80027a0:	07ffff04 	.word	0x07ffff04

080027a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80027a4:	b5b0      	push	{r4, r5, r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0018      	movs	r0, r3
 80027b6:	f7ff fe3b 	bl	8002430 <LL_ADC_REG_IsConversionOngoing>
 80027ba:	1e03      	subs	r3, r0, #0
 80027bc:	d16c      	bne.n	8002898 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2254      	movs	r2, #84	@ 0x54
 80027c2:	5c9b      	ldrb	r3, [r3, r2]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_Start_DMA+0x28>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e06c      	b.n	80028a6 <HAL_ADC_Start_DMA+0x102>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2254      	movs	r2, #84	@ 0x54
 80027d0:	2101      	movs	r1, #1
 80027d2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2201      	movs	r2, #1
 80027dc:	4013      	ands	r3, r2
 80027de:	d113      	bne.n	8002808 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7ff fdef 	bl	80023c8 <LL_ADC_IsEnabled>
 80027ea:	1e03      	subs	r3, r0, #0
 80027ec:	d004      	beq.n	80027f8 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	0018      	movs	r0, r3
 80027f4:	f7ff fdd6 	bl	80023a4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2101      	movs	r1, #1
 8002804:	430a      	orrs	r2, r1
 8002806:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002808:	2517      	movs	r5, #23
 800280a:	197c      	adds	r4, r7, r5
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	0018      	movs	r0, r3
 8002810:	f000 fb66 	bl	8002ee0 <ADC_Enable>
 8002814:	0003      	movs	r3, r0
 8002816:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002818:	002c      	movs	r4, r5
 800281a:	193b      	adds	r3, r7, r4
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d13e      	bne.n	80028a0 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002826:	4a22      	ldr	r2, [pc, #136]	@ (80028b0 <HAL_ADC_Start_DMA+0x10c>)
 8002828:	4013      	ands	r3, r2
 800282a:	2280      	movs	r2, #128	@ 0x80
 800282c:	0052      	lsls	r2, r2, #1
 800282e:	431a      	orrs	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800283e:	4a1d      	ldr	r2, [pc, #116]	@ (80028b4 <HAL_ADC_Start_DMA+0x110>)
 8002840:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002846:	4a1c      	ldr	r2, [pc, #112]	@ (80028b8 <HAL_ADC_Start_DMA+0x114>)
 8002848:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800284e:	4a1b      	ldr	r2, [pc, #108]	@ (80028bc <HAL_ADC_Start_DMA+0x118>)
 8002850:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	221c      	movs	r2, #28
 8002858:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2254      	movs	r2, #84	@ 0x54
 800285e:	2100      	movs	r1, #0
 8002860:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2110      	movs	r1, #16
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	3340      	adds	r3, #64	@ 0x40
 800287c:	0019      	movs	r1, r3
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	193c      	adds	r4, r7, r4
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f000 ffba 	bl	80037fc <HAL_DMA_Start_IT>
 8002888:	0003      	movs	r3, r0
 800288a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	0018      	movs	r0, r3
 8002892:	f7ff fdbb 	bl	800240c <LL_ADC_REG_StartConversion>
 8002896:	e003      	b.n	80028a0 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002898:	2317      	movs	r3, #23
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	2202      	movs	r2, #2
 800289e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80028a0:	2317      	movs	r3, #23
 80028a2:	18fb      	adds	r3, r7, r3
 80028a4:	781b      	ldrb	r3, [r3, #0]
}
 80028a6:	0018      	movs	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b006      	add	sp, #24
 80028ac:	bdb0      	pop	{r4, r5, r7, pc}
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	fffff0fe 	.word	0xfffff0fe
 80028b4:	080030a9 	.word	0x080030a9
 80028b8:	08003171 	.word	0x08003171
 80028bc:	0800318f 	.word	0x0800318f

080028c0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	2202      	movs	r2, #2
 80028e0:	4013      	ands	r3, r2
 80028e2:	d017      	beq.n	8002914 <HAL_ADC_IRQHandler+0x54>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2202      	movs	r2, #2
 80028e8:	4013      	ands	r3, r2
 80028ea:	d013      	beq.n	8002914 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f0:	2210      	movs	r2, #16
 80028f2:	4013      	ands	r3, r2
 80028f4:	d106      	bne.n	8002904 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fa:	2280      	movs	r2, #128	@ 0x80
 80028fc:	0112      	lsls	r2, r2, #4
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	0018      	movs	r0, r3
 8002908:	f000 fe00 	bl	800350c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2202      	movs	r2, #2
 8002912:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	2204      	movs	r2, #4
 8002918:	4013      	ands	r3, r2
 800291a:	d003      	beq.n	8002924 <HAL_ADC_IRQHandler+0x64>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2204      	movs	r2, #4
 8002920:	4013      	ands	r3, r2
 8002922:	d107      	bne.n	8002934 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	2208      	movs	r2, #8
 8002928:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800292a:	d04d      	beq.n	80029c8 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2208      	movs	r2, #8
 8002930:	4013      	ands	r3, r2
 8002932:	d049      	beq.n	80029c8 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002938:	2210      	movs	r2, #16
 800293a:	4013      	ands	r3, r2
 800293c:	d106      	bne.n	800294c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002942:	2280      	movs	r2, #128	@ 0x80
 8002944:	0092      	lsls	r2, r2, #2
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	0018      	movs	r0, r3
 8002952:	f7ff fc70 	bl	8002236 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002956:	1e03      	subs	r3, r0, #0
 8002958:	d02e      	beq.n	80029b8 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	7e9b      	ldrb	r3, [r3, #26]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d12a      	bne.n	80029b8 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2208      	movs	r2, #8
 800296a:	4013      	ands	r3, r2
 800296c:	2b08      	cmp	r3, #8
 800296e:	d123      	bne.n	80029b8 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	0018      	movs	r0, r3
 8002976:	f7ff fd5b 	bl	8002430 <LL_ADC_REG_IsConversionOngoing>
 800297a:	1e03      	subs	r3, r0, #0
 800297c:	d110      	bne.n	80029a0 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	210c      	movs	r1, #12
 800298a:	438a      	bics	r2, r1
 800298c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002992:	4a56      	ldr	r2, [pc, #344]	@ (8002aec <HAL_ADC_IRQHandler+0x22c>)
 8002994:	4013      	ands	r3, r2
 8002996:	2201      	movs	r2, #1
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	659a      	str	r2, [r3, #88]	@ 0x58
 800299e:	e00b      	b.n	80029b8 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a4:	2220      	movs	r2, #32
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b0:	2201      	movs	r2, #1
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 f898 	bl	8002af0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	220c      	movs	r2, #12
 80029c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2280      	movs	r2, #128	@ 0x80
 80029cc:	4013      	ands	r3, r2
 80029ce:	d012      	beq.n	80029f6 <HAL_ADC_IRQHandler+0x136>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2280      	movs	r2, #128	@ 0x80
 80029d4:	4013      	ands	r3, r2
 80029d6:	d00e      	beq.n	80029f6 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029dc:	2280      	movs	r2, #128	@ 0x80
 80029de:	0252      	lsls	r2, r2, #9
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f000 f891 	bl	8002b10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2280      	movs	r2, #128	@ 0x80
 80029f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	2380      	movs	r3, #128	@ 0x80
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4013      	ands	r3, r2
 80029fe:	d014      	beq.n	8002a2a <HAL_ADC_IRQHandler+0x16a>
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	2380      	movs	r3, #128	@ 0x80
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4013      	ands	r3, r2
 8002a08:	d00f      	beq.n	8002a2a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0e:	2280      	movs	r2, #128	@ 0x80
 8002a10:	0292      	lsls	r2, r2, #10
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 fd66 	bl	80034ec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2280      	movs	r2, #128	@ 0x80
 8002a26:	0052      	lsls	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	2380      	movs	r3, #128	@ 0x80
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4013      	ands	r3, r2
 8002a32:	d014      	beq.n	8002a5e <HAL_ADC_IRQHandler+0x19e>
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	2380      	movs	r3, #128	@ 0x80
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d00f      	beq.n	8002a5e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a42:	2280      	movs	r2, #128	@ 0x80
 8002a44:	02d2      	lsls	r2, r2, #11
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f000 fd54 	bl	80034fc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2280      	movs	r2, #128	@ 0x80
 8002a5a:	0092      	lsls	r2, r2, #2
 8002a5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2210      	movs	r2, #16
 8002a62:	4013      	ands	r3, r2
 8002a64:	d02b      	beq.n	8002abe <HAL_ADC_IRQHandler+0x1fe>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2210      	movs	r2, #16
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d027      	beq.n	8002abe <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d102      	bne.n	8002a7c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8002a76:	2301      	movs	r3, #1
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	e008      	b.n	8002a8e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f7ff fc2c 	bl	80022de <LL_ADC_REG_GetDMATransfer>
 8002a86:	1e03      	subs	r3, r0, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d110      	bne.n	8002ab6 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	2280      	movs	r2, #128	@ 0x80
 8002a9a:	00d2      	lsls	r2, r2, #3
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f000 f835 	bl	8002b20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2210      	movs	r2, #16
 8002abc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	2380      	movs	r3, #128	@ 0x80
 8002ac2:	019b      	lsls	r3, r3, #6
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_ADC_IRQHandler+0x224>
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	2380      	movs	r3, #128	@ 0x80
 8002acc:	019b      	lsls	r3, r3, #6
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d008      	beq.n	8002ae4 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f000 fd21 	bl	800351c <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2280      	movs	r2, #128	@ 0x80
 8002ae0:	0192      	lsls	r2, r2, #6
 8002ae2:	601a      	str	r2, [r3, #0]
  }
}
 8002ae4:	46c0      	nop			@ (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b006      	add	sp, #24
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	fffffefe 	.word	0xfffffefe

08002af0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002af8:	46c0      	nop			@ (mov r8, r8)
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b002      	add	sp, #8
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002b08:	46c0      	nop			@ (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b002      	add	sp, #8
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002b18:	46c0      	nop			@ (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b002      	add	sp, #8
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b28:	46c0      	nop			@ (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b002      	add	sp, #8
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b3a:	2317      	movs	r3, #23
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	2200      	movs	r2, #0
 8002b40:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2254      	movs	r2, #84	@ 0x54
 8002b4a:	5c9b      	ldrb	r3, [r3, r2]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x24>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e1c0      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x3a6>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2254      	movs	r2, #84	@ 0x54
 8002b58:	2101      	movs	r1, #1
 8002b5a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0018      	movs	r0, r3
 8002b62:	f7ff fc65 	bl	8002430 <LL_ADC_REG_IsConversionOngoing>
 8002b66:	1e03      	subs	r3, r0, #0
 8002b68:	d000      	beq.n	8002b6c <HAL_ADC_ConfigChannel+0x3c>
 8002b6a:	e1a3      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d100      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x46>
 8002b74:	e143      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	2380      	movs	r3, #128	@ 0x80
 8002b7c:	061b      	lsls	r3, r3, #24
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d004      	beq.n	8002b8c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002b86:	4ac1      	ldr	r2, [pc, #772]	@ (8002e8c <HAL_ADC_ConfigChannel+0x35c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d108      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	0019      	movs	r1, r3
 8002b96:	0010      	movs	r0, r2
 8002b98:	f7ff fb7e 	bl	8002298 <LL_ADC_REG_SetSequencerChAdd>
 8002b9c:	e0c9      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	211f      	movs	r1, #31
 8002ba8:	400b      	ands	r3, r1
 8002baa:	210f      	movs	r1, #15
 8002bac:	4099      	lsls	r1, r3
 8002bae:	000b      	movs	r3, r1
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	035b      	lsls	r3, r3, #13
 8002bbc:	0b5b      	lsrs	r3, r3, #13
 8002bbe:	d105      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x9c>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0e9b      	lsrs	r3, r3, #26
 8002bc6:	221f      	movs	r2, #31
 8002bc8:	4013      	ands	r3, r2
 8002bca:	e098      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d000      	beq.n	8002bd8 <HAL_ADC_ConfigChannel+0xa8>
 8002bd6:	e091      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x1cc>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	4013      	ands	r3, r2
 8002be0:	d000      	beq.n	8002be4 <HAL_ADC_ConfigChannel+0xb4>
 8002be2:	e089      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x1c8>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2204      	movs	r2, #4
 8002bea:	4013      	ands	r3, r2
 8002bec:	d000      	beq.n	8002bf0 <HAL_ADC_ConfigChannel+0xc0>
 8002bee:	e081      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x1c4>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d000      	beq.n	8002bfc <HAL_ADC_ConfigChannel+0xcc>
 8002bfa:	e079      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x1c0>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2210      	movs	r2, #16
 8002c02:	4013      	ands	r3, r2
 8002c04:	d000      	beq.n	8002c08 <HAL_ADC_ConfigChannel+0xd8>
 8002c06:	e071      	b.n	8002cec <HAL_ADC_ConfigChannel+0x1bc>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d000      	beq.n	8002c14 <HAL_ADC_ConfigChannel+0xe4>
 8002c12:	e069      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x1b8>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2240      	movs	r2, #64	@ 0x40
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d000      	beq.n	8002c20 <HAL_ADC_ConfigChannel+0xf0>
 8002c1e:	e061      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x1b4>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2280      	movs	r2, #128	@ 0x80
 8002c26:	4013      	ands	r3, r2
 8002c28:	d000      	beq.n	8002c2c <HAL_ADC_ConfigChannel+0xfc>
 8002c2a:	e059      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x1b0>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	2380      	movs	r3, #128	@ 0x80
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4013      	ands	r3, r2
 8002c36:	d151      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x1ac>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	2380      	movs	r3, #128	@ 0x80
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4013      	ands	r3, r2
 8002c42:	d149      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x1a8>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	2380      	movs	r3, #128	@ 0x80
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d141      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x1a4>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	2380      	movs	r3, #128	@ 0x80
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d139      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x1a0>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	2380      	movs	r3, #128	@ 0x80
 8002c62:	015b      	lsls	r3, r3, #5
 8002c64:	4013      	ands	r3, r2
 8002c66:	d131      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x19c>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	2380      	movs	r3, #128	@ 0x80
 8002c6e:	019b      	lsls	r3, r3, #6
 8002c70:	4013      	ands	r3, r2
 8002c72:	d129      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x198>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	2380      	movs	r3, #128	@ 0x80
 8002c7a:	01db      	lsls	r3, r3, #7
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d121      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x194>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	2380      	movs	r3, #128	@ 0x80
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d119      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x190>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	2380      	movs	r3, #128	@ 0x80
 8002c92:	025b      	lsls	r3, r3, #9
 8002c94:	4013      	ands	r3, r2
 8002c96:	d111      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x18c>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	2380      	movs	r3, #128	@ 0x80
 8002c9e:	029b      	lsls	r3, r3, #10
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d109      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x188>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2380      	movs	r3, #128	@ 0x80
 8002caa:	02db      	lsls	r3, r3, #11
 8002cac:	4013      	ands	r3, r2
 8002cae:	d001      	beq.n	8002cb4 <HAL_ADC_ConfigChannel+0x184>
 8002cb0:	2312      	movs	r3, #18
 8002cb2:	e024      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e022      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002cb8:	2311      	movs	r3, #17
 8002cba:	e020      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	e01e      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002cc0:	230f      	movs	r3, #15
 8002cc2:	e01c      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002cc4:	230e      	movs	r3, #14
 8002cc6:	e01a      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002cc8:	230d      	movs	r3, #13
 8002cca:	e018      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002ccc:	230c      	movs	r3, #12
 8002cce:	e016      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002cd0:	230b      	movs	r3, #11
 8002cd2:	e014      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002cd4:	230a      	movs	r3, #10
 8002cd6:	e012      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002cd8:	2309      	movs	r3, #9
 8002cda:	e010      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002cdc:	2308      	movs	r3, #8
 8002cde:	e00e      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002ce0:	2307      	movs	r3, #7
 8002ce2:	e00c      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002ce4:	2306      	movs	r3, #6
 8002ce6:	e00a      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002ce8:	2305      	movs	r3, #5
 8002cea:	e008      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002cec:	2304      	movs	r3, #4
 8002cee:	e006      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e004      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e002      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1ce>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	6852      	ldr	r2, [r2, #4]
 8002d02:	201f      	movs	r0, #31
 8002d04:	4002      	ands	r2, r0
 8002d06:	4093      	lsls	r3, r2
 8002d08:	000a      	movs	r2, r1
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	089b      	lsrs	r3, r3, #2
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d808      	bhi.n	8002d32 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	001a      	movs	r2, r3
 8002d2e:	f7ff fa93 	bl	8002258 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6819      	ldr	r1, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	001a      	movs	r2, r3
 8002d40:	f7ff fada 	bl	80022f8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	db00      	blt.n	8002d4e <HAL_ADC_ConfigChannel+0x21e>
 8002d4c:	e0bc      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d4e:	4b50      	ldr	r3, [pc, #320]	@ (8002e90 <HAL_ADC_ConfigChannel+0x360>)
 8002d50:	0018      	movs	r0, r3
 8002d52:	f7ff fa2f 	bl	80021b4 <LL_ADC_GetCommonPathInternalCh>
 8002d56:	0003      	movs	r3, r0
 8002d58:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a4d      	ldr	r2, [pc, #308]	@ (8002e94 <HAL_ADC_ConfigChannel+0x364>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d122      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	2380      	movs	r3, #128	@ 0x80
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d6c:	d11d      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2280      	movs	r2, #128	@ 0x80
 8002d72:	0412      	lsls	r2, r2, #16
 8002d74:	4313      	orrs	r3, r2
 8002d76:	4a46      	ldr	r2, [pc, #280]	@ (8002e90 <HAL_ADC_ConfigChannel+0x360>)
 8002d78:	0019      	movs	r1, r3
 8002d7a:	0010      	movs	r0, r2
 8002d7c:	f7ff fa06 	bl	800218c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d80:	4b45      	ldr	r3, [pc, #276]	@ (8002e98 <HAL_ADC_ConfigChannel+0x368>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4945      	ldr	r1, [pc, #276]	@ (8002e9c <HAL_ADC_ConfigChannel+0x36c>)
 8002d86:	0018      	movs	r0, r3
 8002d88:	f7fd f9bc 	bl	8000104 <__udivsi3>
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	0013      	movs	r3, r2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	189b      	adds	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d9a:	e002      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f9      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002da8:	e08e      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a3c      	ldr	r2, [pc, #240]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x370>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d10e      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	2380      	movs	r3, #128	@ 0x80
 8002db8:	045b      	lsls	r3, r3, #17
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d109      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2280      	movs	r2, #128	@ 0x80
 8002dc2:	0452      	lsls	r2, r2, #17
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	4a32      	ldr	r2, [pc, #200]	@ (8002e90 <HAL_ADC_ConfigChannel+0x360>)
 8002dc8:	0019      	movs	r1, r3
 8002dca:	0010      	movs	r0, r2
 8002dcc:	f7ff f9de 	bl	800218c <LL_ADC_SetCommonPathInternalCh>
 8002dd0:	e07a      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a33      	ldr	r2, [pc, #204]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x374>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d000      	beq.n	8002dde <HAL_ADC_ConfigChannel+0x2ae>
 8002ddc:	e074      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	2380      	movs	r3, #128	@ 0x80
 8002de2:	03db      	lsls	r3, r3, #15
 8002de4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002de6:	d000      	beq.n	8002dea <HAL_ADC_ConfigChannel+0x2ba>
 8002de8:	e06e      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	2280      	movs	r2, #128	@ 0x80
 8002dee:	03d2      	lsls	r2, r2, #15
 8002df0:	4313      	orrs	r3, r2
 8002df2:	4a27      	ldr	r2, [pc, #156]	@ (8002e90 <HAL_ADC_ConfigChannel+0x360>)
 8002df4:	0019      	movs	r1, r3
 8002df6:	0010      	movs	r0, r2
 8002df8:	f7ff f9c8 	bl	800218c <LL_ADC_SetCommonPathInternalCh>
 8002dfc:	e064      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	2380      	movs	r3, #128	@ 0x80
 8002e04:	061b      	lsls	r3, r3, #24
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d004      	beq.n	8002e14 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002e8c <HAL_ADC_ConfigChannel+0x35c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d107      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	0010      	movs	r0, r2
 8002e20:	f7ff fa4b 	bl	80022ba <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	da4d      	bge.n	8002ec8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e2c:	4b18      	ldr	r3, [pc, #96]	@ (8002e90 <HAL_ADC_ConfigChannel+0x360>)
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f7ff f9c0 	bl	80021b4 <LL_ADC_GetCommonPathInternalCh>
 8002e34:	0003      	movs	r3, r0
 8002e36:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a15      	ldr	r2, [pc, #84]	@ (8002e94 <HAL_ADC_ConfigChannel+0x364>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d108      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4a18      	ldr	r2, [pc, #96]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x378>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	4a11      	ldr	r2, [pc, #68]	@ (8002e90 <HAL_ADC_ConfigChannel+0x360>)
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	0010      	movs	r0, r2
 8002e4e:	f7ff f99d 	bl	800218c <LL_ADC_SetCommonPathInternalCh>
 8002e52:	e039      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a11      	ldr	r2, [pc, #68]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x370>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d108      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4a12      	ldr	r2, [pc, #72]	@ (8002eac <HAL_ADC_ConfigChannel+0x37c>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	4a0a      	ldr	r2, [pc, #40]	@ (8002e90 <HAL_ADC_ConfigChannel+0x360>)
 8002e66:	0019      	movs	r1, r3
 8002e68:	0010      	movs	r0, r2
 8002e6a:	f7ff f98f 	bl	800218c <LL_ADC_SetCommonPathInternalCh>
 8002e6e:	e02b      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a0b      	ldr	r2, [pc, #44]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x374>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d126      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x380>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	4a03      	ldr	r2, [pc, #12]	@ (8002e90 <HAL_ADC_ConfigChannel+0x360>)
 8002e82:	0019      	movs	r1, r3
 8002e84:	0010      	movs	r0, r2
 8002e86:	f7ff f981 	bl	800218c <LL_ADC_SetCommonPathInternalCh>
 8002e8a:	e01d      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x398>
 8002e8c:	80000004 	.word	0x80000004
 8002e90:	40012708 	.word	0x40012708
 8002e94:	b0001000 	.word	0xb0001000
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	00030d40 	.word	0x00030d40
 8002ea0:	b8004000 	.word	0xb8004000
 8002ea4:	b4002000 	.word	0xb4002000
 8002ea8:	ff7fffff 	.word	0xff7fffff
 8002eac:	feffffff 	.word	0xfeffffff
 8002eb0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb8:	2220      	movs	r2, #32
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002ec0:	2317      	movs	r3, #23
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2254      	movs	r2, #84	@ 0x54
 8002ecc:	2100      	movs	r1, #0
 8002ece:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002ed0:	2317      	movs	r3, #23
 8002ed2:	18fb      	adds	r3, r7, r3
 8002ed4:	781b      	ldrb	r3, [r3, #0]
}
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b006      	add	sp, #24
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			@ (mov r8, r8)

08002ee0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f7ff fa69 	bl	80023c8 <LL_ADC_IsEnabled>
 8002ef6:	1e03      	subs	r3, r0, #0
 8002ef8:	d000      	beq.n	8002efc <ADC_Enable+0x1c>
 8002efa:	e069      	b.n	8002fd0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	4a36      	ldr	r2, [pc, #216]	@ (8002fdc <ADC_Enable+0xfc>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	d00d      	beq.n	8002f24 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f18:	2201      	movs	r2, #1
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e056      	b.n	8002fd2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f7ff fa29 	bl	8002380 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8002fe0 <ADC_Enable+0x100>)
 8002f30:	0018      	movs	r0, r3
 8002f32:	f7ff f93f 	bl	80021b4 <LL_ADC_GetCommonPathInternalCh>
 8002f36:	0002      	movs	r2, r0
 8002f38:	2380      	movs	r3, #128	@ 0x80
 8002f3a:	041b      	lsls	r3, r3, #16
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d00f      	beq.n	8002f60 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f40:	4b28      	ldr	r3, [pc, #160]	@ (8002fe4 <ADC_Enable+0x104>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4928      	ldr	r1, [pc, #160]	@ (8002fe8 <ADC_Enable+0x108>)
 8002f46:	0018      	movs	r0, r3
 8002f48:	f7fd f8dc 	bl	8000104 <__udivsi3>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002f50:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f52:	e002      	b.n	8002f5a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f9      	bne.n	8002f54 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7e5b      	ldrb	r3, [r3, #25]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d033      	beq.n	8002fd0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002f68:	f7ff f906 	bl	8002178 <HAL_GetTick>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f70:	e027      	b.n	8002fc2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	0018      	movs	r0, r3
 8002f78:	f7ff fa26 	bl	80023c8 <LL_ADC_IsEnabled>
 8002f7c:	1e03      	subs	r3, r0, #0
 8002f7e:	d104      	bne.n	8002f8a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7ff f9fb 	bl	8002380 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f8a:	f7ff f8f5 	bl	8002178 <HAL_GetTick>
 8002f8e:	0002      	movs	r2, r0
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d914      	bls.n	8002fc2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d00d      	beq.n	8002fc2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002faa:	2210      	movs	r2, #16
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e007      	b.n	8002fd2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d1d0      	bne.n	8002f72 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b004      	add	sp, #16
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	80000017 	.word	0x80000017
 8002fe0:	40012708 	.word	0x40012708
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	00030d40 	.word	0x00030d40

08002fec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f7ff f9f6 	bl	80023ea <LL_ADC_IsDisableOngoing>
 8002ffe:	0003      	movs	r3, r0
 8003000:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	0018      	movs	r0, r3
 8003008:	f7ff f9de 	bl	80023c8 <LL_ADC_IsEnabled>
 800300c:	1e03      	subs	r3, r0, #0
 800300e:	d046      	beq.n	800309e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d143      	bne.n	800309e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2205      	movs	r2, #5
 800301e:	4013      	ands	r3, r2
 8003020:	2b01      	cmp	r3, #1
 8003022:	d10d      	bne.n	8003040 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	0018      	movs	r0, r3
 800302a:	f7ff f9bb 	bl	80023a4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2203      	movs	r2, #3
 8003034:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003036:	f7ff f89f 	bl	8002178 <HAL_GetTick>
 800303a:	0003      	movs	r3, r0
 800303c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800303e:	e028      	b.n	8003092 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003044:	2210      	movs	r2, #16
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003050:	2201      	movs	r2, #1
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e021      	b.n	80030a0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800305c:	f7ff f88c 	bl	8002178 <HAL_GetTick>
 8003060:	0002      	movs	r2, r0
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d913      	bls.n	8003092 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2201      	movs	r2, #1
 8003072:	4013      	ands	r3, r2
 8003074:	d00d      	beq.n	8003092 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307a:	2210      	movs	r2, #16
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003086:	2201      	movs	r2, #1
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e006      	b.n	80030a0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2201      	movs	r2, #1
 800309a:	4013      	ands	r3, r2
 800309c:	d1de      	bne.n	800305c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	0018      	movs	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b004      	add	sp, #16
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ba:	2250      	movs	r2, #80	@ 0x50
 80030bc:	4013      	ands	r3, r2
 80030be:	d141      	bne.n	8003144 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c4:	2280      	movs	r2, #128	@ 0x80
 80030c6:	0092      	lsls	r2, r2, #2
 80030c8:	431a      	orrs	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	0018      	movs	r0, r3
 80030d4:	f7ff f8af 	bl	8002236 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030d8:	1e03      	subs	r3, r0, #0
 80030da:	d02e      	beq.n	800313a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	7e9b      	ldrb	r3, [r3, #26]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d12a      	bne.n	800313a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2208      	movs	r2, #8
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d123      	bne.n	800313a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	0018      	movs	r0, r3
 80030f8:	f7ff f99a 	bl	8002430 <LL_ADC_REG_IsConversionOngoing>
 80030fc:	1e03      	subs	r3, r0, #0
 80030fe:	d110      	bne.n	8003122 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	210c      	movs	r1, #12
 800310c:	438a      	bics	r2, r1
 800310e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003114:	4a15      	ldr	r2, [pc, #84]	@ (800316c <ADC_DMAConvCplt+0xc4>)
 8003116:	4013      	ands	r3, r2
 8003118:	2201      	movs	r2, #1
 800311a:	431a      	orrs	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003120:	e00b      	b.n	800313a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003126:	2220      	movs	r2, #32
 8003128:	431a      	orrs	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003132:	2201      	movs	r2, #1
 8003134:	431a      	orrs	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	0018      	movs	r0, r3
 800313e:	f7ff fcd7 	bl	8002af0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003142:	e00f      	b.n	8003164 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003148:	2210      	movs	r2, #16
 800314a:	4013      	ands	r3, r2
 800314c:	d004      	beq.n	8003158 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	0018      	movs	r0, r3
 8003152:	f7ff fce5 	bl	8002b20 <HAL_ADC_ErrorCallback>
}
 8003156:	e005      	b.n	8003164 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	0010      	movs	r0, r2
 8003162:	4798      	blx	r3
}
 8003164:	46c0      	nop			@ (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	b004      	add	sp, #16
 800316a:	bd80      	pop	{r7, pc}
 800316c:	fffffefe 	.word	0xfffffefe

08003170 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	0018      	movs	r0, r3
 8003182:	f7ff fcbd 	bl	8002b00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003186:	46c0      	nop			@ (mov r8, r8)
 8003188:	46bd      	mov	sp, r7
 800318a:	b004      	add	sp, #16
 800318c:	bd80      	pop	{r7, pc}

0800318e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a0:	2240      	movs	r2, #64	@ 0x40
 80031a2:	431a      	orrs	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ac:	2204      	movs	r2, #4
 80031ae:	431a      	orrs	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	0018      	movs	r0, r3
 80031b8:	f7ff fcb2 	bl	8002b20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031bc:	46c0      	nop			@ (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	b004      	add	sp, #16
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <LL_ADC_GetCommonClock>:
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	23f0      	movs	r3, #240	@ 0xf0
 80031d2:	039b      	lsls	r3, r3, #14
 80031d4:	4013      	ands	r3, r2
}
 80031d6:	0018      	movs	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	b002      	add	sp, #8
 80031dc:	bd80      	pop	{r7, pc}

080031de <LL_ADC_GetClock>:
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	0f9b      	lsrs	r3, r3, #30
 80031ec:	079b      	lsls	r3, r3, #30
}
 80031ee:	0018      	movs	r0, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	b002      	add	sp, #8
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <LL_ADC_SetCalibrationFactor>:
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	22b4      	movs	r2, #180	@ 0xb4
 8003204:	589b      	ldr	r3, [r3, r2]
 8003206:	227f      	movs	r2, #127	@ 0x7f
 8003208:	4393      	bics	r3, r2
 800320a:	001a      	movs	r2, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	21b4      	movs	r1, #180	@ 0xb4
 8003214:	505a      	str	r2, [r3, r1]
}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	46bd      	mov	sp, r7
 800321a:	b002      	add	sp, #8
 800321c:	bd80      	pop	{r7, pc}

0800321e <LL_ADC_GetCalibrationFactor>:
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	22b4      	movs	r2, #180	@ 0xb4
 800322a:	589b      	ldr	r3, [r3, r2]
 800322c:	227f      	movs	r2, #127	@ 0x7f
 800322e:	4013      	ands	r3, r2
}
 8003230:	0018      	movs	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}

08003238 <LL_ADC_Enable>:
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a04      	ldr	r2, [pc, #16]	@ (8003258 <LL_ADC_Enable+0x20>)
 8003246:	4013      	ands	r3, r2
 8003248:	2201      	movs	r2, #1
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	609a      	str	r2, [r3, #8]
}
 8003250:	46c0      	nop			@ (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	b002      	add	sp, #8
 8003256:	bd80      	pop	{r7, pc}
 8003258:	7fffffe8 	.word	0x7fffffe8

0800325c <LL_ADC_Disable>:
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4a04      	ldr	r2, [pc, #16]	@ (800327c <LL_ADC_Disable+0x20>)
 800326a:	4013      	ands	r3, r2
 800326c:	2202      	movs	r2, #2
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	609a      	str	r2, [r3, #8]
}
 8003274:	46c0      	nop			@ (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	b002      	add	sp, #8
 800327a:	bd80      	pop	{r7, pc}
 800327c:	7fffffe8 	.word	0x7fffffe8

08003280 <LL_ADC_IsEnabled>:
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2201      	movs	r2, #1
 800328e:	4013      	ands	r3, r2
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <LL_ADC_IsEnabled+0x18>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <LL_ADC_IsEnabled+0x1a>
 8003298:	2300      	movs	r3, #0
}
 800329a:	0018      	movs	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	b002      	add	sp, #8
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <LL_ADC_StartCalibration>:
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4a05      	ldr	r2, [pc, #20]	@ (80032c8 <LL_ADC_StartCalibration+0x24>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	2280      	movs	r2, #128	@ 0x80
 80032b6:	0612      	lsls	r2, r2, #24
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	609a      	str	r2, [r3, #8]
}
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b002      	add	sp, #8
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	46c0      	nop			@ (mov r8, r8)
 80032c8:	7fffffe8 	.word	0x7fffffe8

080032cc <LL_ADC_IsCalibrationOnGoing>:
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	0fdb      	lsrs	r3, r3, #31
 80032da:	07da      	lsls	r2, r3, #31
 80032dc:	2380      	movs	r3, #128	@ 0x80
 80032de:	061b      	lsls	r3, r3, #24
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d101      	bne.n	80032e8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <LL_ADC_IsCalibrationOnGoing+0x1e>
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	0018      	movs	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b002      	add	sp, #8
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b08b      	sub	sp, #44	@ 0x2c
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2254      	movs	r2, #84	@ 0x54
 8003308:	5c9b      	ldrb	r3, [r3, r2]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_ADCEx_Calibration_Start+0x1e>
 800330e:	2302      	movs	r3, #2
 8003310:	e0dd      	b.n	80034ce <HAL_ADCEx_Calibration_Start+0x1da>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2254      	movs	r2, #84	@ 0x54
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800331a:	231f      	movs	r3, #31
 800331c:	18fc      	adds	r4, r7, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	0018      	movs	r0, r3
 8003322:	f7ff fe63 	bl	8002fec <ADC_Disable>
 8003326:	0003      	movs	r3, r0
 8003328:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	0018      	movs	r0, r3
 8003330:	f7ff ffa6 	bl	8003280 <LL_ADC_IsEnabled>
 8003334:	1e03      	subs	r3, r0, #0
 8003336:	d000      	beq.n	800333a <HAL_ADCEx_Calibration_Start+0x46>
 8003338:	e0bc      	b.n	80034b4 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333e:	4a66      	ldr	r2, [pc, #408]	@ (80034d8 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8003340:	4013      	ands	r3, r2
 8003342:	2202      	movs	r2, #2
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4a62      	ldr	r2, [pc, #392]	@ (80034dc <HAL_ADCEx_Calibration_Start+0x1e8>)
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	495f      	ldr	r1, [pc, #380]	@ (80034e0 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8003362:	400a      	ands	r2, r1
 8003364:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003366:	2300      	movs	r3, #0
 8003368:	627b      	str	r3, [r7, #36]	@ 0x24
 800336a:	e02d      	b.n	80033c8 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	0018      	movs	r0, r3
 8003372:	f7ff ff97 	bl	80032a4 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003376:	e014      	b.n	80033a2 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3301      	adds	r3, #1
 800337c:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4a58      	ldr	r2, [pc, #352]	@ (80034e4 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d90d      	bls.n	80033a2 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338a:	2212      	movs	r2, #18
 800338c:	4393      	bics	r3, r2
 800338e:	2210      	movs	r2, #16
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2254      	movs	r2, #84	@ 0x54
 800339a:	2100      	movs	r1, #0
 800339c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e095      	b.n	80034ce <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	0018      	movs	r0, r3
 80033a8:	f7ff ff90 	bl	80032cc <LL_ADC_IsCalibrationOnGoing>
 80033ac:	1e03      	subs	r3, r0, #0
 80033ae:	d1e3      	bne.n	8003378 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	0018      	movs	r0, r3
 80033b6:	f7ff ff32 	bl	800321e <LL_ADC_GetCalibrationFactor>
 80033ba:	0002      	movs	r2, r0
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	189b      	adds	r3, r3, r2
 80033c0:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	3301      	adds	r3, #1
 80033c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80033c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ca:	2b07      	cmp	r3, #7
 80033cc:	d9ce      	bls.n	800336c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80033ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033d0:	6a38      	ldr	r0, [r7, #32]
 80033d2:	f7fc fe97 	bl	8000104 <__udivsi3>
 80033d6:	0003      	movs	r3, r0
 80033d8:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	0018      	movs	r0, r3
 80033e0:	f7ff ff2a 	bl	8003238 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	0018      	movs	r0, r3
 80033ea:	f7ff fef8 	bl	80031de <LL_ADC_GetClock>
 80033ee:	1e03      	subs	r3, r0, #0
 80033f0:	d11b      	bne.n	800342a <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033f2:	4b3d      	ldr	r3, [pc, #244]	@ (80034e8 <HAL_ADCEx_Calibration_Start+0x1f4>)
 80033f4:	0018      	movs	r0, r3
 80033f6:	f7ff fee5 	bl	80031c4 <LL_ADC_GetCommonClock>
 80033fa:	0003      	movs	r3, r0
 80033fc:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	23e0      	movs	r3, #224	@ 0xe0
 8003402:	035b      	lsls	r3, r3, #13
 8003404:	429a      	cmp	r2, r3
 8003406:	d310      	bcc.n	800342a <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	0c9b      	lsrs	r3, r3, #18
 800340c:	3b03      	subs	r3, #3
 800340e:	2201      	movs	r2, #1
 8003410:	409a      	lsls	r2, r3
 8003412:	0013      	movs	r3, r2
 8003414:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	085b      	lsrs	r3, r3, #1
 800341a:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 800341c:	e002      	b.n	8003424 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	3b01      	subs	r3, #1
 8003422:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f9      	bne.n	800341e <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6a3a      	ldr	r2, [r7, #32]
 8003430:	0011      	movs	r1, r2
 8003432:	0018      	movs	r0, r3
 8003434:	f7ff fedf 	bl	80031f6 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	0018      	movs	r0, r3
 800343e:	f7ff ff0d 	bl	800325c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003442:	f7fe fe99 	bl	8002178 <HAL_GetTick>
 8003446:	0003      	movs	r3, r0
 8003448:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800344a:	e01b      	b.n	8003484 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800344c:	f7fe fe94 	bl	8002178 <HAL_GetTick>
 8003450:	0002      	movs	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d914      	bls.n	8003484 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	0018      	movs	r0, r3
 8003460:	f7ff ff0e 	bl	8003280 <LL_ADC_IsEnabled>
 8003464:	1e03      	subs	r3, r0, #0
 8003466:	d00d      	beq.n	8003484 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346c:	2210      	movs	r2, #16
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003478:	2201      	movs	r2, #1
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e024      	b.n	80034ce <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	0018      	movs	r0, r3
 800348a:	f7ff fef9 	bl	8003280 <LL_ADC_IsEnabled>
 800348e:	1e03      	subs	r3, r0, #0
 8003490:	d1dc      	bne.n	800344c <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68d9      	ldr	r1, [r3, #12]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	430a      	orrs	r2, r1
 80034a0:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a6:	2203      	movs	r2, #3
 80034a8:	4393      	bics	r3, r2
 80034aa:	2201      	movs	r2, #1
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80034b2:	e005      	b.n	80034c0 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b8:	2210      	movs	r2, #16
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2254      	movs	r2, #84	@ 0x54
 80034c4:	2100      	movs	r1, #0
 80034c6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80034c8:	231f      	movs	r3, #31
 80034ca:	18fb      	adds	r3, r7, r3
 80034cc:	781b      	ldrb	r3, [r3, #0]
}
 80034ce:	0018      	movs	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b00b      	add	sp, #44	@ 0x2c
 80034d4:	bd90      	pop	{r4, r7, pc}
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	fffffefd 	.word	0xfffffefd
 80034dc:	00008003 	.word	0x00008003
 80034e0:	ffff7ffc 	.word	0xffff7ffc
 80034e4:	0002f1ff 	.word	0x0002f1ff
 80034e8:	40012708 	.word	0x40012708

080034ec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80034f4:	46c0      	nop			@ (mov r8, r8)
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b002      	add	sp, #8
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003504:	46c0      	nop			@ (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b002      	add	sp, #8
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003514:	46c0      	nop			@ (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	b002      	add	sp, #8
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8003524:	46c0      	nop			@ (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b002      	add	sp, #8
 800352a:	bd80      	pop	{r7, pc}

0800352c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	0002      	movs	r2, r0
 8003534:	1dfb      	adds	r3, r7, #7
 8003536:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003538:	1dfb      	adds	r3, r7, #7
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b7f      	cmp	r3, #127	@ 0x7f
 800353e:	d809      	bhi.n	8003554 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003540:	1dfb      	adds	r3, r7, #7
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	001a      	movs	r2, r3
 8003546:	231f      	movs	r3, #31
 8003548:	401a      	ands	r2, r3
 800354a:	4b04      	ldr	r3, [pc, #16]	@ (800355c <__NVIC_EnableIRQ+0x30>)
 800354c:	2101      	movs	r1, #1
 800354e:	4091      	lsls	r1, r2
 8003550:	000a      	movs	r2, r1
 8003552:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003554:	46c0      	nop			@ (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	b002      	add	sp, #8
 800355a:	bd80      	pop	{r7, pc}
 800355c:	e000e100 	.word	0xe000e100

08003560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003560:	b590      	push	{r4, r7, lr}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	0002      	movs	r2, r0
 8003568:	6039      	str	r1, [r7, #0]
 800356a:	1dfb      	adds	r3, r7, #7
 800356c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800356e:	1dfb      	adds	r3, r7, #7
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b7f      	cmp	r3, #127	@ 0x7f
 8003574:	d828      	bhi.n	80035c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003576:	4a2f      	ldr	r2, [pc, #188]	@ (8003634 <__NVIC_SetPriority+0xd4>)
 8003578:	1dfb      	adds	r3, r7, #7
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	b25b      	sxtb	r3, r3
 800357e:	089b      	lsrs	r3, r3, #2
 8003580:	33c0      	adds	r3, #192	@ 0xc0
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	589b      	ldr	r3, [r3, r2]
 8003586:	1dfa      	adds	r2, r7, #7
 8003588:	7812      	ldrb	r2, [r2, #0]
 800358a:	0011      	movs	r1, r2
 800358c:	2203      	movs	r2, #3
 800358e:	400a      	ands	r2, r1
 8003590:	00d2      	lsls	r2, r2, #3
 8003592:	21ff      	movs	r1, #255	@ 0xff
 8003594:	4091      	lsls	r1, r2
 8003596:	000a      	movs	r2, r1
 8003598:	43d2      	mvns	r2, r2
 800359a:	401a      	ands	r2, r3
 800359c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	019b      	lsls	r3, r3, #6
 80035a2:	22ff      	movs	r2, #255	@ 0xff
 80035a4:	401a      	ands	r2, r3
 80035a6:	1dfb      	adds	r3, r7, #7
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	0018      	movs	r0, r3
 80035ac:	2303      	movs	r3, #3
 80035ae:	4003      	ands	r3, r0
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035b4:	481f      	ldr	r0, [pc, #124]	@ (8003634 <__NVIC_SetPriority+0xd4>)
 80035b6:	1dfb      	adds	r3, r7, #7
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	b25b      	sxtb	r3, r3
 80035bc:	089b      	lsrs	r3, r3, #2
 80035be:	430a      	orrs	r2, r1
 80035c0:	33c0      	adds	r3, #192	@ 0xc0
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80035c6:	e031      	b.n	800362c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003638 <__NVIC_SetPriority+0xd8>)
 80035ca:	1dfb      	adds	r3, r7, #7
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	0019      	movs	r1, r3
 80035d0:	230f      	movs	r3, #15
 80035d2:	400b      	ands	r3, r1
 80035d4:	3b08      	subs	r3, #8
 80035d6:	089b      	lsrs	r3, r3, #2
 80035d8:	3306      	adds	r3, #6
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	18d3      	adds	r3, r2, r3
 80035de:	3304      	adds	r3, #4
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	1dfa      	adds	r2, r7, #7
 80035e4:	7812      	ldrb	r2, [r2, #0]
 80035e6:	0011      	movs	r1, r2
 80035e8:	2203      	movs	r2, #3
 80035ea:	400a      	ands	r2, r1
 80035ec:	00d2      	lsls	r2, r2, #3
 80035ee:	21ff      	movs	r1, #255	@ 0xff
 80035f0:	4091      	lsls	r1, r2
 80035f2:	000a      	movs	r2, r1
 80035f4:	43d2      	mvns	r2, r2
 80035f6:	401a      	ands	r2, r3
 80035f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	019b      	lsls	r3, r3, #6
 80035fe:	22ff      	movs	r2, #255	@ 0xff
 8003600:	401a      	ands	r2, r3
 8003602:	1dfb      	adds	r3, r7, #7
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	0018      	movs	r0, r3
 8003608:	2303      	movs	r3, #3
 800360a:	4003      	ands	r3, r0
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003610:	4809      	ldr	r0, [pc, #36]	@ (8003638 <__NVIC_SetPriority+0xd8>)
 8003612:	1dfb      	adds	r3, r7, #7
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	001c      	movs	r4, r3
 8003618:	230f      	movs	r3, #15
 800361a:	4023      	ands	r3, r4
 800361c:	3b08      	subs	r3, #8
 800361e:	089b      	lsrs	r3, r3, #2
 8003620:	430a      	orrs	r2, r1
 8003622:	3306      	adds	r3, #6
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	18c3      	adds	r3, r0, r3
 8003628:	3304      	adds	r3, #4
 800362a:	601a      	str	r2, [r3, #0]
}
 800362c:	46c0      	nop			@ (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	b003      	add	sp, #12
 8003632:	bd90      	pop	{r4, r7, pc}
 8003634:	e000e100 	.word	0xe000e100
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	1e5a      	subs	r2, r3, #1
 8003648:	2380      	movs	r3, #128	@ 0x80
 800364a:	045b      	lsls	r3, r3, #17
 800364c:	429a      	cmp	r2, r3
 800364e:	d301      	bcc.n	8003654 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003650:	2301      	movs	r3, #1
 8003652:	e010      	b.n	8003676 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003654:	4b0a      	ldr	r3, [pc, #40]	@ (8003680 <SysTick_Config+0x44>)
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	3a01      	subs	r2, #1
 800365a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800365c:	2301      	movs	r3, #1
 800365e:	425b      	negs	r3, r3
 8003660:	2103      	movs	r1, #3
 8003662:	0018      	movs	r0, r3
 8003664:	f7ff ff7c 	bl	8003560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003668:	4b05      	ldr	r3, [pc, #20]	@ (8003680 <SysTick_Config+0x44>)
 800366a:	2200      	movs	r2, #0
 800366c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800366e:	4b04      	ldr	r3, [pc, #16]	@ (8003680 <SysTick_Config+0x44>)
 8003670:	2207      	movs	r2, #7
 8003672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003674:	2300      	movs	r3, #0
}
 8003676:	0018      	movs	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	b002      	add	sp, #8
 800367c:	bd80      	pop	{r7, pc}
 800367e:	46c0      	nop			@ (mov r8, r8)
 8003680:	e000e010 	.word	0xe000e010

08003684 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	210f      	movs	r1, #15
 8003690:	187b      	adds	r3, r7, r1
 8003692:	1c02      	adds	r2, r0, #0
 8003694:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	187b      	adds	r3, r7, r1
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	b25b      	sxtb	r3, r3
 800369e:	0011      	movs	r1, r2
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7ff ff5d 	bl	8003560 <__NVIC_SetPriority>
}
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b004      	add	sp, #16
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	0002      	movs	r2, r0
 80036b6:	1dfb      	adds	r3, r7, #7
 80036b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036ba:	1dfb      	adds	r3, r7, #7
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	b25b      	sxtb	r3, r3
 80036c0:	0018      	movs	r0, r3
 80036c2:	f7ff ff33 	bl	800352c <__NVIC_EnableIRQ>
}
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b002      	add	sp, #8
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b082      	sub	sp, #8
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	0018      	movs	r0, r3
 80036da:	f7ff ffaf 	bl	800363c <SysTick_Config>
 80036de:	0003      	movs	r3, r0
}
 80036e0:	0018      	movs	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b002      	add	sp, #8
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e077      	b.n	80037ea <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a3d      	ldr	r2, [pc, #244]	@ (80037f4 <HAL_DMA_Init+0x10c>)
 8003700:	4694      	mov	ip, r2
 8003702:	4463      	add	r3, ip
 8003704:	2114      	movs	r1, #20
 8003706:	0018      	movs	r0, r3
 8003708:	f7fc fcfc 	bl	8000104 <__udivsi3>
 800370c:	0003      	movs	r3, r0
 800370e:	009a      	lsls	r2, r3, #2
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2225      	movs	r2, #37	@ 0x25
 8003718:	2102      	movs	r1, #2
 800371a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4934      	ldr	r1, [pc, #208]	@ (80037f8 <HAL_DMA_Init+0x110>)
 8003728:	400a      	ands	r2, r1
 800372a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6819      	ldr	r1, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	0018      	movs	r0, r3
 8003766:	f000 f9c1 	bl	8003aec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	2380      	movs	r3, #128	@ 0x80
 8003770:	01db      	lsls	r3, r3, #7
 8003772:	429a      	cmp	r2, r3
 8003774:	d102      	bne.n	800377c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003784:	213f      	movs	r1, #63	@ 0x3f
 8003786:	400a      	ands	r2, r1
 8003788:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003792:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d011      	beq.n	80037c0 <HAL_DMA_Init+0xd8>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d80d      	bhi.n	80037c0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	0018      	movs	r0, r3
 80037a8:	f000 f9cc 	bl	8003b44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	e008      	b.n	80037d2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2225      	movs	r2, #37	@ 0x25
 80037dc:	2101      	movs	r1, #1
 80037de:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2224      	movs	r2, #36	@ 0x24
 80037e4:	2100      	movs	r1, #0
 80037e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	0018      	movs	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b002      	add	sp, #8
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	bffdfff8 	.word	0xbffdfff8
 80037f8:	ffff800f 	.word	0xffff800f

080037fc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800380a:	2317      	movs	r3, #23
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	2200      	movs	r2, #0
 8003810:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2224      	movs	r2, #36	@ 0x24
 8003816:	5c9b      	ldrb	r3, [r3, r2]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_DMA_Start_IT+0x24>
 800381c:	2302      	movs	r3, #2
 800381e:	e06f      	b.n	8003900 <HAL_DMA_Start_IT+0x104>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2224      	movs	r2, #36	@ 0x24
 8003824:	2101      	movs	r1, #1
 8003826:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2225      	movs	r2, #37	@ 0x25
 800382c:	5c9b      	ldrb	r3, [r3, r2]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b01      	cmp	r3, #1
 8003832:	d157      	bne.n	80038e4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2225      	movs	r2, #37	@ 0x25
 8003838:	2102      	movs	r1, #2
 800383a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2101      	movs	r1, #1
 800384e:	438a      	bics	r2, r1
 8003850:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f907 	bl	8003a6c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	210e      	movs	r1, #14
 8003872:	430a      	orrs	r2, r1
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e00f      	b.n	8003898 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2104      	movs	r1, #4
 8003884:	438a      	bics	r2, r1
 8003886:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	210a      	movs	r1, #10
 8003894:	430a      	orrs	r2, r1
 8003896:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	2380      	movs	r3, #128	@ 0x80
 80038a0:	025b      	lsls	r3, r3, #9
 80038a2:	4013      	ands	r3, r2
 80038a4:	d008      	beq.n	80038b8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b0:	2180      	movs	r1, #128	@ 0x80
 80038b2:	0049      	lsls	r1, r1, #1
 80038b4:	430a      	orrs	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ca:	2180      	movs	r1, #128	@ 0x80
 80038cc:	0049      	lsls	r1, r1, #1
 80038ce:	430a      	orrs	r2, r1
 80038d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2101      	movs	r1, #1
 80038de:	430a      	orrs	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	e00a      	b.n	80038fa <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2280      	movs	r2, #128	@ 0x80
 80038e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2224      	movs	r2, #36	@ 0x24
 80038ee:	2100      	movs	r1, #0
 80038f0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80038f2:	2317      	movs	r3, #23
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	2201      	movs	r2, #1
 80038f8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80038fa:	2317      	movs	r3, #23
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	781b      	ldrb	r3, [r3, #0]
}
 8003900:	0018      	movs	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	b006      	add	sp, #24
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003910:	4b55      	ldr	r3, [pc, #340]	@ (8003a68 <HAL_DMA_IRQHandler+0x160>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	221c      	movs	r2, #28
 8003924:	4013      	ands	r3, r2
 8003926:	2204      	movs	r2, #4
 8003928:	409a      	lsls	r2, r3
 800392a:	0013      	movs	r3, r2
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4013      	ands	r3, r2
 8003930:	d027      	beq.n	8003982 <HAL_DMA_IRQHandler+0x7a>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2204      	movs	r2, #4
 8003936:	4013      	ands	r3, r2
 8003938:	d023      	beq.n	8003982 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2220      	movs	r2, #32
 8003942:	4013      	ands	r3, r2
 8003944:	d107      	bne.n	8003956 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2104      	movs	r1, #4
 8003952:	438a      	bics	r2, r1
 8003954:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003956:	4b44      	ldr	r3, [pc, #272]	@ (8003a68 <HAL_DMA_IRQHandler+0x160>)
 8003958:	6859      	ldr	r1, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	221c      	movs	r2, #28
 8003960:	4013      	ands	r3, r2
 8003962:	2204      	movs	r2, #4
 8003964:	409a      	lsls	r2, r3
 8003966:	4b40      	ldr	r3, [pc, #256]	@ (8003a68 <HAL_DMA_IRQHandler+0x160>)
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003970:	2b00      	cmp	r3, #0
 8003972:	d100      	bne.n	8003976 <HAL_DMA_IRQHandler+0x6e>
 8003974:	e073      	b.n	8003a5e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	0010      	movs	r0, r2
 800397e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003980:	e06d      	b.n	8003a5e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003986:	221c      	movs	r2, #28
 8003988:	4013      	ands	r3, r2
 800398a:	2202      	movs	r2, #2
 800398c:	409a      	lsls	r2, r3
 800398e:	0013      	movs	r3, r2
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4013      	ands	r3, r2
 8003994:	d02e      	beq.n	80039f4 <HAL_DMA_IRQHandler+0xec>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2202      	movs	r2, #2
 800399a:	4013      	ands	r3, r2
 800399c:	d02a      	beq.n	80039f4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2220      	movs	r2, #32
 80039a6:	4013      	ands	r3, r2
 80039a8:	d10b      	bne.n	80039c2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	210a      	movs	r1, #10
 80039b6:	438a      	bics	r2, r1
 80039b8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2225      	movs	r2, #37	@ 0x25
 80039be:	2101      	movs	r1, #1
 80039c0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80039c2:	4b29      	ldr	r3, [pc, #164]	@ (8003a68 <HAL_DMA_IRQHandler+0x160>)
 80039c4:	6859      	ldr	r1, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	221c      	movs	r2, #28
 80039cc:	4013      	ands	r3, r2
 80039ce:	2202      	movs	r2, #2
 80039d0:	409a      	lsls	r2, r3
 80039d2:	4b25      	ldr	r3, [pc, #148]	@ (8003a68 <HAL_DMA_IRQHandler+0x160>)
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2224      	movs	r2, #36	@ 0x24
 80039dc:	2100      	movs	r1, #0
 80039de:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d03a      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	0010      	movs	r0, r2
 80039f0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80039f2:	e034      	b.n	8003a5e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	221c      	movs	r2, #28
 80039fa:	4013      	ands	r3, r2
 80039fc:	2208      	movs	r2, #8
 80039fe:	409a      	lsls	r2, r3
 8003a00:	0013      	movs	r3, r2
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4013      	ands	r3, r2
 8003a06:	d02b      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x158>
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2208      	movs	r2, #8
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d027      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	210e      	movs	r1, #14
 8003a1c:	438a      	bics	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003a20:	4b11      	ldr	r3, [pc, #68]	@ (8003a68 <HAL_DMA_IRQHandler+0x160>)
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	221c      	movs	r2, #28
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	4b0d      	ldr	r3, [pc, #52]	@ (8003a68 <HAL_DMA_IRQHandler+0x160>)
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2225      	movs	r2, #37	@ 0x25
 8003a40:	2101      	movs	r1, #1
 8003a42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2224      	movs	r2, #36	@ 0x24
 8003a48:	2100      	movs	r1, #0
 8003a4a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	0010      	movs	r0, r2
 8003a5c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a5e:	46c0      	nop			@ (mov r8, r8)
 8003a60:	46c0      	nop			@ (mov r8, r8)
}
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b004      	add	sp, #16
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40020000 	.word	0x40020000

08003a6c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003a82:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d004      	beq.n	8003a96 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003a94:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003a96:	4b14      	ldr	r3, [pc, #80]	@ (8003ae8 <DMA_SetConfig+0x7c>)
 8003a98:	6859      	ldr	r1, [r3, #4]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	221c      	movs	r2, #28
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	4b10      	ldr	r3, [pc, #64]	@ (8003ae8 <DMA_SetConfig+0x7c>)
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b10      	cmp	r3, #16
 8003aba:	d108      	bne.n	8003ace <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003acc:	e007      	b.n	8003ade <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	60da      	str	r2, [r3, #12]
}
 8003ade:	46c0      	nop			@ (mov r8, r8)
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	b004      	add	sp, #16
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	46c0      	nop			@ (mov r8, r8)
 8003ae8:	40020000 	.word	0x40020000

08003aec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af8:	089b      	lsrs	r3, r3, #2
 8003afa:	4a10      	ldr	r2, [pc, #64]	@ (8003b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003afc:	4694      	mov	ip, r2
 8003afe:	4463      	add	r3, ip
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	001a      	movs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	001a      	movs	r2, r3
 8003b0e:	23ff      	movs	r3, #255	@ 0xff
 8003b10:	4013      	ands	r3, r2
 8003b12:	3b08      	subs	r3, #8
 8003b14:	2114      	movs	r1, #20
 8003b16:	0018      	movs	r0, r3
 8003b18:	f7fc faf4 	bl	8000104 <__udivsi3>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a07      	ldr	r2, [pc, #28]	@ (8003b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003b24:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	221f      	movs	r2, #31
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003b34:	46c0      	nop			@ (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b004      	add	sp, #16
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	10008200 	.word	0x10008200
 8003b40:	40020880 	.word	0x40020880

08003b44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	223f      	movs	r2, #63	@ 0x3f
 8003b52:	4013      	ands	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a0a      	ldr	r2, [pc, #40]	@ (8003b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003b5a:	4694      	mov	ip, r2
 8003b5c:	4463      	add	r3, ip
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	001a      	movs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a07      	ldr	r2, [pc, #28]	@ (8003b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	2203      	movs	r2, #3
 8003b72:	4013      	ands	r3, r2
 8003b74:	2201      	movs	r2, #1
 8003b76:	409a      	lsls	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003b7c:	46c0      	nop			@ (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b004      	add	sp, #16
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	1000823f 	.word	0x1000823f
 8003b88:	40020940 	.word	0x40020940

08003b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b9a:	e147      	b.n	8003e2c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4091      	lsls	r1, r2
 8003ba6:	000a      	movs	r2, r1
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d100      	bne.n	8003bb4 <HAL_GPIO_Init+0x28>
 8003bb2:	e138      	b.n	8003e26 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2203      	movs	r2, #3
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d005      	beq.n	8003bcc <HAL_GPIO_Init+0x40>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d130      	bne.n	8003c2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	0013      	movs	r3, r2
 8003bdc:	43da      	mvns	r2, r3
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4013      	ands	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	409a      	lsls	r2, r3
 8003bee:	0013      	movs	r3, r2
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c02:	2201      	movs	r2, #1
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	409a      	lsls	r2, r3
 8003c08:	0013      	movs	r3, r2
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	091b      	lsrs	r3, r3, #4
 8003c18:	2201      	movs	r2, #1
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	409a      	lsls	r2, r3
 8003c20:	0013      	movs	r3, r2
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2203      	movs	r2, #3
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d017      	beq.n	8003c6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	2203      	movs	r2, #3
 8003c46:	409a      	lsls	r2, r3
 8003c48:	0013      	movs	r3, r2
 8003c4a:	43da      	mvns	r2, r3
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	0013      	movs	r3, r2
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2203      	movs	r2, #3
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d123      	bne.n	8003cbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	08da      	lsrs	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3208      	adds	r2, #8
 8003c7e:	0092      	lsls	r2, r2, #2
 8003c80:	58d3      	ldr	r3, [r2, r3]
 8003c82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	2207      	movs	r2, #7
 8003c88:	4013      	ands	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	220f      	movs	r2, #15
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	0013      	movs	r3, r2
 8003c92:	43da      	mvns	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2107      	movs	r1, #7
 8003ca2:	400b      	ands	r3, r1
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	0013      	movs	r3, r2
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	08da      	lsrs	r2, r3, #3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3208      	adds	r2, #8
 8003cb8:	0092      	lsls	r2, r2, #2
 8003cba:	6939      	ldr	r1, [r7, #16]
 8003cbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	2203      	movs	r2, #3
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	0013      	movs	r3, r2
 8003cce:	43da      	mvns	r2, r3
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2203      	movs	r2, #3
 8003cdc:	401a      	ands	r2, r3
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	0013      	movs	r3, r2
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	23c0      	movs	r3, #192	@ 0xc0
 8003cf8:	029b      	lsls	r3, r3, #10
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d100      	bne.n	8003d00 <HAL_GPIO_Init+0x174>
 8003cfe:	e092      	b.n	8003e26 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003d00:	4a50      	ldr	r2, [pc, #320]	@ (8003e44 <HAL_GPIO_Init+0x2b8>)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	089b      	lsrs	r3, r3, #2
 8003d06:	3318      	adds	r3, #24
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	589b      	ldr	r3, [r3, r2]
 8003d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2203      	movs	r2, #3
 8003d12:	4013      	ands	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	220f      	movs	r2, #15
 8003d18:	409a      	lsls	r2, r3
 8003d1a:	0013      	movs	r3, r2
 8003d1c:	43da      	mvns	r2, r3
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4013      	ands	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	23a0      	movs	r3, #160	@ 0xa0
 8003d28:	05db      	lsls	r3, r3, #23
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d013      	beq.n	8003d56 <HAL_GPIO_Init+0x1ca>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a45      	ldr	r2, [pc, #276]	@ (8003e48 <HAL_GPIO_Init+0x2bc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00d      	beq.n	8003d52 <HAL_GPIO_Init+0x1c6>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a44      	ldr	r2, [pc, #272]	@ (8003e4c <HAL_GPIO_Init+0x2c0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d007      	beq.n	8003d4e <HAL_GPIO_Init+0x1c2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a43      	ldr	r2, [pc, #268]	@ (8003e50 <HAL_GPIO_Init+0x2c4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <HAL_GPIO_Init+0x1be>
 8003d46:	2303      	movs	r3, #3
 8003d48:	e006      	b.n	8003d58 <HAL_GPIO_Init+0x1cc>
 8003d4a:	2305      	movs	r3, #5
 8003d4c:	e004      	b.n	8003d58 <HAL_GPIO_Init+0x1cc>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e002      	b.n	8003d58 <HAL_GPIO_Init+0x1cc>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <HAL_GPIO_Init+0x1cc>
 8003d56:	2300      	movs	r3, #0
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	2103      	movs	r1, #3
 8003d5c:	400a      	ands	r2, r1
 8003d5e:	00d2      	lsls	r2, r2, #3
 8003d60:	4093      	lsls	r3, r2
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003d68:	4936      	ldr	r1, [pc, #216]	@ (8003e44 <HAL_GPIO_Init+0x2b8>)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	089b      	lsrs	r3, r3, #2
 8003d6e:	3318      	adds	r3, #24
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d76:	4b33      	ldr	r3, [pc, #204]	@ (8003e44 <HAL_GPIO_Init+0x2b8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	43da      	mvns	r2, r3
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4013      	ands	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	2380      	movs	r3, #128	@ 0x80
 8003d8c:	035b      	lsls	r3, r3, #13
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8003e44 <HAL_GPIO_Init+0x2b8>)
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003da0:	4b28      	ldr	r3, [pc, #160]	@ (8003e44 <HAL_GPIO_Init+0x2b8>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	43da      	mvns	r2, r3
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4013      	ands	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	2380      	movs	r3, #128	@ 0x80
 8003db6:	039b      	lsls	r3, r3, #14
 8003db8:	4013      	ands	r3, r2
 8003dba:	d003      	beq.n	8003dc4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8003e44 <HAL_GPIO_Init+0x2b8>)
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003dca:	4a1e      	ldr	r2, [pc, #120]	@ (8003e44 <HAL_GPIO_Init+0x2b8>)
 8003dcc:	2384      	movs	r3, #132	@ 0x84
 8003dce:	58d3      	ldr	r3, [r2, r3]
 8003dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	43da      	mvns	r2, r3
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	2380      	movs	r3, #128	@ 0x80
 8003de2:	029b      	lsls	r3, r3, #10
 8003de4:	4013      	ands	r3, r2
 8003de6:	d003      	beq.n	8003df0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003df0:	4914      	ldr	r1, [pc, #80]	@ (8003e44 <HAL_GPIO_Init+0x2b8>)
 8003df2:	2284      	movs	r2, #132	@ 0x84
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003df8:	4a12      	ldr	r2, [pc, #72]	@ (8003e44 <HAL_GPIO_Init+0x2b8>)
 8003dfa:	2380      	movs	r3, #128	@ 0x80
 8003dfc:	58d3      	ldr	r3, [r2, r3]
 8003dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	43da      	mvns	r2, r3
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	2380      	movs	r3, #128	@ 0x80
 8003e10:	025b      	lsls	r3, r3, #9
 8003e12:	4013      	ands	r3, r2
 8003e14:	d003      	beq.n	8003e1e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e1e:	4909      	ldr	r1, [pc, #36]	@ (8003e44 <HAL_GPIO_Init+0x2b8>)
 8003e20:	2280      	movs	r2, #128	@ 0x80
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	40da      	lsrs	r2, r3
 8003e34:	1e13      	subs	r3, r2, #0
 8003e36:	d000      	beq.n	8003e3a <HAL_GPIO_Init+0x2ae>
 8003e38:	e6b0      	b.n	8003b9c <HAL_GPIO_Init+0x10>
  }
}
 8003e3a:	46c0      	nop			@ (mov r8, r8)
 8003e3c:	46c0      	nop			@ (mov r8, r8)
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b006      	add	sp, #24
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40021800 	.word	0x40021800
 8003e48:	50000400 	.word	0x50000400
 8003e4c:	50000800 	.word	0x50000800
 8003e50:	50000c00 	.word	0x50000c00

08003e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	0008      	movs	r0, r1
 8003e5e:	0011      	movs	r1, r2
 8003e60:	1cbb      	adds	r3, r7, #2
 8003e62:	1c02      	adds	r2, r0, #0
 8003e64:	801a      	strh	r2, [r3, #0]
 8003e66:	1c7b      	adds	r3, r7, #1
 8003e68:	1c0a      	adds	r2, r1, #0
 8003e6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e6c:	1c7b      	adds	r3, r7, #1
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d004      	beq.n	8003e7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e74:	1cbb      	adds	r3, r7, #2
 8003e76:	881a      	ldrh	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e7c:	e003      	b.n	8003e86 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e7e:	1cbb      	adds	r3, r7, #2
 8003e80:	881a      	ldrh	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e86:	46c0      	nop			@ (mov r8, r8)
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b002      	add	sp, #8
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003e98:	4b19      	ldr	r3, [pc, #100]	@ (8003f00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a19      	ldr	r2, [pc, #100]	@ (8003f04 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	0019      	movs	r1, r3
 8003ea2:	4b17      	ldr	r3, [pc, #92]	@ (8003f00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	2380      	movs	r3, #128	@ 0x80
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d11f      	bne.n	8003ef4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003eb4:	4b14      	ldr	r3, [pc, #80]	@ (8003f08 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	0013      	movs	r3, r2
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	189b      	adds	r3, r3, r2
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	4912      	ldr	r1, [pc, #72]	@ (8003f0c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7fc f91e 	bl	8000104 <__udivsi3>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	3301      	adds	r3, #1
 8003ecc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ece:	e008      	b.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	e001      	b.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e009      	b.n	8003ef6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ee2:	4b07      	ldr	r3, [pc, #28]	@ (8003f00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	2380      	movs	r3, #128	@ 0x80
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	401a      	ands	r2, r3
 8003eec:	2380      	movs	r3, #128	@ 0x80
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d0ed      	beq.n	8003ed0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b004      	add	sp, #16
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	46c0      	nop			@ (mov r8, r8)
 8003f00:	40007000 	.word	0x40007000
 8003f04:	fffff9ff 	.word	0xfffff9ff
 8003f08:	20000000 	.word	0x20000000
 8003f0c:	000f4240 	.word	0x000f4240

08003f10 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003f14:	4b03      	ldr	r3, [pc, #12]	@ (8003f24 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	23e0      	movs	r3, #224	@ 0xe0
 8003f1a:	01db      	lsls	r3, r3, #7
 8003f1c:	4013      	ands	r3, r2
}
 8003f1e:	0018      	movs	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40021000 	.word	0x40021000

08003f28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e2fe      	b.n	8004538 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	4013      	ands	r3, r2
 8003f42:	d100      	bne.n	8003f46 <HAL_RCC_OscConfig+0x1e>
 8003f44:	e07c      	b.n	8004040 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f46:	4bc3      	ldr	r3, [pc, #780]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2238      	movs	r2, #56	@ 0x38
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f50:	4bc0      	ldr	r3, [pc, #768]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2203      	movs	r2, #3
 8003f56:	4013      	ands	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d102      	bne.n	8003f66 <HAL_RCC_OscConfig+0x3e>
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d002      	beq.n	8003f6c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d10b      	bne.n	8003f84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6c:	4bb9      	ldr	r3, [pc, #740]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	2380      	movs	r3, #128	@ 0x80
 8003f72:	029b      	lsls	r3, r3, #10
 8003f74:	4013      	ands	r3, r2
 8003f76:	d062      	beq.n	800403e <HAL_RCC_OscConfig+0x116>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d15e      	bne.n	800403e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e2d9      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	2380      	movs	r3, #128	@ 0x80
 8003f8a:	025b      	lsls	r3, r3, #9
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x78>
 8003f90:	4bb0      	ldr	r3, [pc, #704]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4baf      	ldr	r3, [pc, #700]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003f96:	2180      	movs	r1, #128	@ 0x80
 8003f98:	0249      	lsls	r1, r1, #9
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e020      	b.n	8003fe2 <HAL_RCC_OscConfig+0xba>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	23a0      	movs	r3, #160	@ 0xa0
 8003fa6:	02db      	lsls	r3, r3, #11
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d10e      	bne.n	8003fca <HAL_RCC_OscConfig+0xa2>
 8003fac:	4ba9      	ldr	r3, [pc, #676]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4ba8      	ldr	r3, [pc, #672]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003fb2:	2180      	movs	r1, #128	@ 0x80
 8003fb4:	02c9      	lsls	r1, r1, #11
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	4ba6      	ldr	r3, [pc, #664]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4ba5      	ldr	r3, [pc, #660]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003fc0:	2180      	movs	r1, #128	@ 0x80
 8003fc2:	0249      	lsls	r1, r1, #9
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	e00b      	b.n	8003fe2 <HAL_RCC_OscConfig+0xba>
 8003fca:	4ba2      	ldr	r3, [pc, #648]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4ba1      	ldr	r3, [pc, #644]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003fd0:	49a1      	ldr	r1, [pc, #644]	@ (8004258 <HAL_RCC_OscConfig+0x330>)
 8003fd2:	400a      	ands	r2, r1
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	4b9f      	ldr	r3, [pc, #636]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	4b9e      	ldr	r3, [pc, #632]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8003fdc:	499f      	ldr	r1, [pc, #636]	@ (800425c <HAL_RCC_OscConfig+0x334>)
 8003fde:	400a      	ands	r2, r1
 8003fe0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d014      	beq.n	8004014 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fea:	f7fe f8c5 	bl	8002178 <HAL_GetTick>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff4:	f7fe f8c0 	bl	8002178 <HAL_GetTick>
 8003ff8:	0002      	movs	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	@ 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e298      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004006:	4b93      	ldr	r3, [pc, #588]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	2380      	movs	r3, #128	@ 0x80
 800400c:	029b      	lsls	r3, r3, #10
 800400e:	4013      	ands	r3, r2
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0xcc>
 8004012:	e015      	b.n	8004040 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7fe f8b0 	bl	8002178 <HAL_GetTick>
 8004018:	0003      	movs	r3, r0
 800401a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800401e:	f7fe f8ab 	bl	8002178 <HAL_GetTick>
 8004022:	0002      	movs	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b64      	cmp	r3, #100	@ 0x64
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e283      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004030:	4b88      	ldr	r3, [pc, #544]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	2380      	movs	r3, #128	@ 0x80
 8004036:	029b      	lsls	r3, r3, #10
 8004038:	4013      	ands	r3, r2
 800403a:	d1f0      	bne.n	800401e <HAL_RCC_OscConfig+0xf6>
 800403c:	e000      	b.n	8004040 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2202      	movs	r2, #2
 8004046:	4013      	ands	r3, r2
 8004048:	d100      	bne.n	800404c <HAL_RCC_OscConfig+0x124>
 800404a:	e099      	b.n	8004180 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800404c:	4b81      	ldr	r3, [pc, #516]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2238      	movs	r2, #56	@ 0x38
 8004052:	4013      	ands	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004056:	4b7f      	ldr	r3, [pc, #508]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2203      	movs	r2, #3
 800405c:	4013      	ands	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b10      	cmp	r3, #16
 8004064:	d102      	bne.n	800406c <HAL_RCC_OscConfig+0x144>
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d002      	beq.n	8004072 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d135      	bne.n	80040de <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004072:	4b78      	ldr	r3, [pc, #480]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	2380      	movs	r3, #128	@ 0x80
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4013      	ands	r3, r2
 800407c:	d005      	beq.n	800408a <HAL_RCC_OscConfig+0x162>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e256      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408a:	4b72      	ldr	r3, [pc, #456]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4a74      	ldr	r2, [pc, #464]	@ (8004260 <HAL_RCC_OscConfig+0x338>)
 8004090:	4013      	ands	r3, r2
 8004092:	0019      	movs	r1, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	021a      	lsls	r2, r3, #8
 800409a:	4b6e      	ldr	r3, [pc, #440]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 800409c:	430a      	orrs	r2, r1
 800409e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d112      	bne.n	80040cc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80040a6:	4b6b      	ldr	r3, [pc, #428]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a6e      	ldr	r2, [pc, #440]	@ (8004264 <HAL_RCC_OscConfig+0x33c>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	0019      	movs	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	4b67      	ldr	r3, [pc, #412]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 80040b6:	430a      	orrs	r2, r1
 80040b8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80040ba:	4b66      	ldr	r3, [pc, #408]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	0adb      	lsrs	r3, r3, #11
 80040c0:	2207      	movs	r2, #7
 80040c2:	4013      	ands	r3, r2
 80040c4:	4a68      	ldr	r2, [pc, #416]	@ (8004268 <HAL_RCC_OscConfig+0x340>)
 80040c6:	40da      	lsrs	r2, r3
 80040c8:	4b68      	ldr	r3, [pc, #416]	@ (800426c <HAL_RCC_OscConfig+0x344>)
 80040ca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040cc:	4b68      	ldr	r3, [pc, #416]	@ (8004270 <HAL_RCC_OscConfig+0x348>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	0018      	movs	r0, r3
 80040d2:	f7fd fff5 	bl	80020c0 <HAL_InitTick>
 80040d6:	1e03      	subs	r3, r0, #0
 80040d8:	d051      	beq.n	800417e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e22c      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d030      	beq.n	8004148 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80040e6:	4b5b      	ldr	r3, [pc, #364]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a5e      	ldr	r2, [pc, #376]	@ (8004264 <HAL_RCC_OscConfig+0x33c>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	0019      	movs	r1, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	4b57      	ldr	r3, [pc, #348]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 80040f6:	430a      	orrs	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80040fa:	4b56      	ldr	r3, [pc, #344]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	4b55      	ldr	r3, [pc, #340]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004100:	2180      	movs	r1, #128	@ 0x80
 8004102:	0049      	lsls	r1, r1, #1
 8004104:	430a      	orrs	r2, r1
 8004106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fe f836 	bl	8002178 <HAL_GetTick>
 800410c:	0003      	movs	r3, r0
 800410e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004112:	f7fe f831 	bl	8002178 <HAL_GetTick>
 8004116:	0002      	movs	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e209      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004124:	4b4b      	ldr	r3, [pc, #300]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	2380      	movs	r3, #128	@ 0x80
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4013      	ands	r3, r2
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004130:	4b48      	ldr	r3, [pc, #288]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4a4a      	ldr	r2, [pc, #296]	@ (8004260 <HAL_RCC_OscConfig+0x338>)
 8004136:	4013      	ands	r3, r2
 8004138:	0019      	movs	r1, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	021a      	lsls	r2, r3, #8
 8004140:	4b44      	ldr	r3, [pc, #272]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	e01b      	b.n	8004180 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004148:	4b42      	ldr	r3, [pc, #264]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4b41      	ldr	r3, [pc, #260]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 800414e:	4949      	ldr	r1, [pc, #292]	@ (8004274 <HAL_RCC_OscConfig+0x34c>)
 8004150:	400a      	ands	r2, r1
 8004152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7fe f810 	bl	8002178 <HAL_GetTick>
 8004158:	0003      	movs	r3, r0
 800415a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800415e:	f7fe f80b 	bl	8002178 <HAL_GetTick>
 8004162:	0002      	movs	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e1e3      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004170:	4b38      	ldr	r3, [pc, #224]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	2380      	movs	r3, #128	@ 0x80
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4013      	ands	r3, r2
 800417a:	d1f0      	bne.n	800415e <HAL_RCC_OscConfig+0x236>
 800417c:	e000      	b.n	8004180 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800417e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2208      	movs	r2, #8
 8004186:	4013      	ands	r3, r2
 8004188:	d047      	beq.n	800421a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800418a:	4b32      	ldr	r3, [pc, #200]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2238      	movs	r2, #56	@ 0x38
 8004190:	4013      	ands	r3, r2
 8004192:	2b18      	cmp	r3, #24
 8004194:	d10a      	bne.n	80041ac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004196:	4b2f      	ldr	r3, [pc, #188]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419a:	2202      	movs	r2, #2
 800419c:	4013      	ands	r3, r2
 800419e:	d03c      	beq.n	800421a <HAL_RCC_OscConfig+0x2f2>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d138      	bne.n	800421a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e1c5      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d019      	beq.n	80041e8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80041b4:	4b27      	ldr	r3, [pc, #156]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 80041b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80041b8:	4b26      	ldr	r3, [pc, #152]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 80041ba:	2101      	movs	r1, #1
 80041bc:	430a      	orrs	r2, r1
 80041be:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7fd ffda 	bl	8002178 <HAL_GetTick>
 80041c4:	0003      	movs	r3, r0
 80041c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ca:	f7fd ffd5 	bl	8002178 <HAL_GetTick>
 80041ce:	0002      	movs	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e1ad      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 80041de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e0:	2202      	movs	r2, #2
 80041e2:	4013      	ands	r3, r2
 80041e4:	d0f1      	beq.n	80041ca <HAL_RCC_OscConfig+0x2a2>
 80041e6:	e018      	b.n	800421a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80041e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 80041ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80041ec:	4b19      	ldr	r3, [pc, #100]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 80041ee:	2101      	movs	r1, #1
 80041f0:	438a      	bics	r2, r1
 80041f2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7fd ffc0 	bl	8002178 <HAL_GetTick>
 80041f8:	0003      	movs	r3, r0
 80041fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041fe:	f7fd ffbb 	bl	8002178 <HAL_GetTick>
 8004202:	0002      	movs	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e193      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004210:	4b10      	ldr	r3, [pc, #64]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004214:	2202      	movs	r2, #2
 8004216:	4013      	ands	r3, r2
 8004218:	d1f1      	bne.n	80041fe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2204      	movs	r2, #4
 8004220:	4013      	ands	r3, r2
 8004222:	d100      	bne.n	8004226 <HAL_RCC_OscConfig+0x2fe>
 8004224:	e0c6      	b.n	80043b4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004226:	231f      	movs	r3, #31
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	2200      	movs	r2, #0
 800422c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800422e:	4b09      	ldr	r3, [pc, #36]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2238      	movs	r2, #56	@ 0x38
 8004234:	4013      	ands	r3, r2
 8004236:	2b20      	cmp	r3, #32
 8004238:	d11e      	bne.n	8004278 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800423a:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <HAL_RCC_OscConfig+0x32c>)
 800423c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800423e:	2202      	movs	r2, #2
 8004240:	4013      	ands	r3, r2
 8004242:	d100      	bne.n	8004246 <HAL_RCC_OscConfig+0x31e>
 8004244:	e0b6      	b.n	80043b4 <HAL_RCC_OscConfig+0x48c>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d000      	beq.n	8004250 <HAL_RCC_OscConfig+0x328>
 800424e:	e0b1      	b.n	80043b4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e171      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
 8004254:	40021000 	.word	0x40021000
 8004258:	fffeffff 	.word	0xfffeffff
 800425c:	fffbffff 	.word	0xfffbffff
 8004260:	ffff80ff 	.word	0xffff80ff
 8004264:	ffffc7ff 	.word	0xffffc7ff
 8004268:	00f42400 	.word	0x00f42400
 800426c:	20000000 	.word	0x20000000
 8004270:	20000004 	.word	0x20000004
 8004274:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004278:	4bb1      	ldr	r3, [pc, #708]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 800427a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800427c:	2380      	movs	r3, #128	@ 0x80
 800427e:	055b      	lsls	r3, r3, #21
 8004280:	4013      	ands	r3, r2
 8004282:	d101      	bne.n	8004288 <HAL_RCC_OscConfig+0x360>
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <HAL_RCC_OscConfig+0x362>
 8004288:	2300      	movs	r3, #0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d011      	beq.n	80042b2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800428e:	4bac      	ldr	r3, [pc, #688]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 8004290:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004292:	4bab      	ldr	r3, [pc, #684]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 8004294:	2180      	movs	r1, #128	@ 0x80
 8004296:	0549      	lsls	r1, r1, #21
 8004298:	430a      	orrs	r2, r1
 800429a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800429c:	4ba8      	ldr	r3, [pc, #672]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 800429e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042a0:	2380      	movs	r3, #128	@ 0x80
 80042a2:	055b      	lsls	r3, r3, #21
 80042a4:	4013      	ands	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80042aa:	231f      	movs	r3, #31
 80042ac:	18fb      	adds	r3, r7, r3
 80042ae:	2201      	movs	r2, #1
 80042b0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b2:	4ba4      	ldr	r3, [pc, #656]	@ (8004544 <HAL_RCC_OscConfig+0x61c>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	2380      	movs	r3, #128	@ 0x80
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	4013      	ands	r3, r2
 80042bc:	d11a      	bne.n	80042f4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042be:	4ba1      	ldr	r3, [pc, #644]	@ (8004544 <HAL_RCC_OscConfig+0x61c>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4ba0      	ldr	r3, [pc, #640]	@ (8004544 <HAL_RCC_OscConfig+0x61c>)
 80042c4:	2180      	movs	r1, #128	@ 0x80
 80042c6:	0049      	lsls	r1, r1, #1
 80042c8:	430a      	orrs	r2, r1
 80042ca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80042cc:	f7fd ff54 	bl	8002178 <HAL_GetTick>
 80042d0:	0003      	movs	r3, r0
 80042d2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d6:	f7fd ff4f 	bl	8002178 <HAL_GetTick>
 80042da:	0002      	movs	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e127      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e8:	4b96      	ldr	r3, [pc, #600]	@ (8004544 <HAL_RCC_OscConfig+0x61c>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	2380      	movs	r3, #128	@ 0x80
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	4013      	ands	r3, r2
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d106      	bne.n	800430a <HAL_RCC_OscConfig+0x3e2>
 80042fc:	4b90      	ldr	r3, [pc, #576]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 80042fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004300:	4b8f      	ldr	r3, [pc, #572]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 8004302:	2101      	movs	r1, #1
 8004304:	430a      	orrs	r2, r1
 8004306:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004308:	e01c      	b.n	8004344 <HAL_RCC_OscConfig+0x41c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b05      	cmp	r3, #5
 8004310:	d10c      	bne.n	800432c <HAL_RCC_OscConfig+0x404>
 8004312:	4b8b      	ldr	r3, [pc, #556]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 8004314:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004316:	4b8a      	ldr	r3, [pc, #552]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 8004318:	2104      	movs	r1, #4
 800431a:	430a      	orrs	r2, r1
 800431c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800431e:	4b88      	ldr	r3, [pc, #544]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 8004320:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004322:	4b87      	ldr	r3, [pc, #540]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 8004324:	2101      	movs	r1, #1
 8004326:	430a      	orrs	r2, r1
 8004328:	65da      	str	r2, [r3, #92]	@ 0x5c
 800432a:	e00b      	b.n	8004344 <HAL_RCC_OscConfig+0x41c>
 800432c:	4b84      	ldr	r3, [pc, #528]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 800432e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004330:	4b83      	ldr	r3, [pc, #524]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 8004332:	2101      	movs	r1, #1
 8004334:	438a      	bics	r2, r1
 8004336:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004338:	4b81      	ldr	r3, [pc, #516]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 800433a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800433c:	4b80      	ldr	r3, [pc, #512]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 800433e:	2104      	movs	r1, #4
 8004340:	438a      	bics	r2, r1
 8004342:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d014      	beq.n	8004376 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fd ff14 	bl	8002178 <HAL_GetTick>
 8004350:	0003      	movs	r3, r0
 8004352:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004354:	e009      	b.n	800436a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004356:	f7fd ff0f 	bl	8002178 <HAL_GetTick>
 800435a:	0002      	movs	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	4a79      	ldr	r2, [pc, #484]	@ (8004548 <HAL_RCC_OscConfig+0x620>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e0e6      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800436a:	4b75      	ldr	r3, [pc, #468]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 800436c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436e:	2202      	movs	r2, #2
 8004370:	4013      	ands	r3, r2
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x42e>
 8004374:	e013      	b.n	800439e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004376:	f7fd feff 	bl	8002178 <HAL_GetTick>
 800437a:	0003      	movs	r3, r0
 800437c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800437e:	e009      	b.n	8004394 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004380:	f7fd fefa 	bl	8002178 <HAL_GetTick>
 8004384:	0002      	movs	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	4a6f      	ldr	r2, [pc, #444]	@ (8004548 <HAL_RCC_OscConfig+0x620>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e0d1      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004394:	4b6a      	ldr	r3, [pc, #424]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 8004396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004398:	2202      	movs	r2, #2
 800439a:	4013      	ands	r3, r2
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800439e:	231f      	movs	r3, #31
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d105      	bne.n	80043b4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80043a8:	4b65      	ldr	r3, [pc, #404]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 80043aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043ac:	4b64      	ldr	r3, [pc, #400]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 80043ae:	4967      	ldr	r1, [pc, #412]	@ (800454c <HAL_RCC_OscConfig+0x624>)
 80043b0:	400a      	ands	r2, r1
 80043b2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d100      	bne.n	80043be <HAL_RCC_OscConfig+0x496>
 80043bc:	e0bb      	b.n	8004536 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043be:	4b60      	ldr	r3, [pc, #384]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2238      	movs	r2, #56	@ 0x38
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b10      	cmp	r3, #16
 80043c8:	d100      	bne.n	80043cc <HAL_RCC_OscConfig+0x4a4>
 80043ca:	e07b      	b.n	80044c4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d156      	bne.n	8004482 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b59      	ldr	r3, [pc, #356]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 80043da:	495d      	ldr	r1, [pc, #372]	@ (8004550 <HAL_RCC_OscConfig+0x628>)
 80043dc:	400a      	ands	r2, r1
 80043de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fd feca 	bl	8002178 <HAL_GetTick>
 80043e4:	0003      	movs	r3, r0
 80043e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ea:	f7fd fec5 	bl	8002178 <HAL_GetTick>
 80043ee:	0002      	movs	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e09d      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043fc:	4b50      	ldr	r3, [pc, #320]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	2380      	movs	r3, #128	@ 0x80
 8004402:	049b      	lsls	r3, r3, #18
 8004404:	4013      	ands	r3, r2
 8004406:	d1f0      	bne.n	80043ea <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004408:	4b4d      	ldr	r3, [pc, #308]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a51      	ldr	r2, [pc, #324]	@ (8004554 <HAL_RCC_OscConfig+0x62c>)
 800440e:	4013      	ands	r3, r2
 8004410:	0019      	movs	r1, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1a      	ldr	r2, [r3, #32]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004434:	431a      	orrs	r2, r3
 8004436:	4b42      	ldr	r3, [pc, #264]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 8004438:	430a      	orrs	r2, r1
 800443a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800443c:	4b40      	ldr	r3, [pc, #256]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b3f      	ldr	r3, [pc, #252]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 8004442:	2180      	movs	r1, #128	@ 0x80
 8004444:	0449      	lsls	r1, r1, #17
 8004446:	430a      	orrs	r2, r1
 8004448:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800444a:	4b3d      	ldr	r3, [pc, #244]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	4b3c      	ldr	r3, [pc, #240]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 8004450:	2180      	movs	r1, #128	@ 0x80
 8004452:	0549      	lsls	r1, r1, #21
 8004454:	430a      	orrs	r2, r1
 8004456:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004458:	f7fd fe8e 	bl	8002178 <HAL_GetTick>
 800445c:	0003      	movs	r3, r0
 800445e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004462:	f7fd fe89 	bl	8002178 <HAL_GetTick>
 8004466:	0002      	movs	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e061      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004474:	4b32      	ldr	r3, [pc, #200]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	2380      	movs	r3, #128	@ 0x80
 800447a:	049b      	lsls	r3, r3, #18
 800447c:	4013      	ands	r3, r2
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x53a>
 8004480:	e059      	b.n	8004536 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004482:	4b2f      	ldr	r3, [pc, #188]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4b2e      	ldr	r3, [pc, #184]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 8004488:	4931      	ldr	r1, [pc, #196]	@ (8004550 <HAL_RCC_OscConfig+0x628>)
 800448a:	400a      	ands	r2, r1
 800448c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448e:	f7fd fe73 	bl	8002178 <HAL_GetTick>
 8004492:	0003      	movs	r3, r0
 8004494:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004498:	f7fd fe6e 	bl	8002178 <HAL_GetTick>
 800449c:	0002      	movs	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e046      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044aa:	4b25      	ldr	r3, [pc, #148]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	2380      	movs	r3, #128	@ 0x80
 80044b0:	049b      	lsls	r3, r3, #18
 80044b2:	4013      	ands	r3, r2
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80044b6:	4b22      	ldr	r3, [pc, #136]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	4b21      	ldr	r3, [pc, #132]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 80044bc:	4926      	ldr	r1, [pc, #152]	@ (8004558 <HAL_RCC_OscConfig+0x630>)
 80044be:	400a      	ands	r2, r1
 80044c0:	60da      	str	r2, [r3, #12]
 80044c2:	e038      	b.n	8004536 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e033      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80044d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004540 <HAL_RCC_OscConfig+0x618>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2203      	movs	r2, #3
 80044da:	401a      	ands	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d126      	bne.n	8004532 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2270      	movs	r2, #112	@ 0x70
 80044e8:	401a      	ands	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d11f      	bne.n	8004532 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	23fe      	movs	r3, #254	@ 0xfe
 80044f6:	01db      	lsls	r3, r3, #7
 80044f8:	401a      	ands	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004500:	429a      	cmp	r2, r3
 8004502:	d116      	bne.n	8004532 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	23f8      	movs	r3, #248	@ 0xf8
 8004508:	039b      	lsls	r3, r3, #14
 800450a:	401a      	ands	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d10e      	bne.n	8004532 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	23e0      	movs	r3, #224	@ 0xe0
 8004518:	051b      	lsls	r3, r3, #20
 800451a:	401a      	ands	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d106      	bne.n	8004532 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	0f5b      	lsrs	r3, r3, #29
 8004528:	075a      	lsls	r2, r3, #29
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800452e:	429a      	cmp	r2, r3
 8004530:	d001      	beq.n	8004536 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	0018      	movs	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	b008      	add	sp, #32
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40021000 	.word	0x40021000
 8004544:	40007000 	.word	0x40007000
 8004548:	00001388 	.word	0x00001388
 800454c:	efffffff 	.word	0xefffffff
 8004550:	feffffff 	.word	0xfeffffff
 8004554:	11c1808c 	.word	0x11c1808c
 8004558:	eefefffc 	.word	0xeefefffc

0800455c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0e9      	b.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004570:	4b76      	ldr	r3, [pc, #472]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2207      	movs	r2, #7
 8004576:	4013      	ands	r3, r2
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d91e      	bls.n	80045bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b73      	ldr	r3, [pc, #460]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2207      	movs	r2, #7
 8004584:	4393      	bics	r3, r2
 8004586:	0019      	movs	r1, r3
 8004588:	4b70      	ldr	r3, [pc, #448]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004590:	f7fd fdf2 	bl	8002178 <HAL_GetTick>
 8004594:	0003      	movs	r3, r0
 8004596:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004598:	e009      	b.n	80045ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800459a:	f7fd fded 	bl	8002178 <HAL_GetTick>
 800459e:	0002      	movs	r2, r0
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004750 <HAL_RCC_ClockConfig+0x1f4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e0ca      	b.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045ae:	4b67      	ldr	r3, [pc, #412]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2207      	movs	r2, #7
 80045b4:	4013      	ands	r3, r2
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d1ee      	bne.n	800459a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2202      	movs	r2, #2
 80045c2:	4013      	ands	r3, r2
 80045c4:	d015      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2204      	movs	r2, #4
 80045cc:	4013      	ands	r3, r2
 80045ce:	d006      	beq.n	80045de <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80045d0:	4b60      	ldr	r3, [pc, #384]	@ (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	4b5f      	ldr	r3, [pc, #380]	@ (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 80045d6:	21e0      	movs	r1, #224	@ 0xe0
 80045d8:	01c9      	lsls	r1, r1, #7
 80045da:	430a      	orrs	r2, r1
 80045dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045de:	4b5d      	ldr	r3, [pc, #372]	@ (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	4a5d      	ldr	r2, [pc, #372]	@ (8004758 <HAL_RCC_ClockConfig+0x1fc>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	0019      	movs	r1, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	4b59      	ldr	r3, [pc, #356]	@ (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 80045ee:	430a      	orrs	r2, r1
 80045f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2201      	movs	r2, #1
 80045f8:	4013      	ands	r3, r2
 80045fa:	d057      	beq.n	80046ac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d107      	bne.n	8004614 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004604:	4b53      	ldr	r3, [pc, #332]	@ (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	2380      	movs	r3, #128	@ 0x80
 800460a:	029b      	lsls	r3, r3, #10
 800460c:	4013      	ands	r3, r2
 800460e:	d12b      	bne.n	8004668 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e097      	b.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d107      	bne.n	800462c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800461c:	4b4d      	ldr	r3, [pc, #308]	@ (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	2380      	movs	r3, #128	@ 0x80
 8004622:	049b      	lsls	r3, r3, #18
 8004624:	4013      	ands	r3, r2
 8004626:	d11f      	bne.n	8004668 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e08b      	b.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d107      	bne.n	8004644 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004634:	4b47      	ldr	r3, [pc, #284]	@ (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	2380      	movs	r3, #128	@ 0x80
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	4013      	ands	r3, r2
 800463e:	d113      	bne.n	8004668 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e07f      	b.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d106      	bne.n	800465a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800464c:	4b41      	ldr	r3, [pc, #260]	@ (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 800464e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004650:	2202      	movs	r2, #2
 8004652:	4013      	ands	r3, r2
 8004654:	d108      	bne.n	8004668 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e074      	b.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800465a:	4b3e      	ldr	r3, [pc, #248]	@ (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 800465c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800465e:	2202      	movs	r2, #2
 8004660:	4013      	ands	r3, r2
 8004662:	d101      	bne.n	8004668 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e06d      	b.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004668:	4b3a      	ldr	r3, [pc, #232]	@ (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2207      	movs	r2, #7
 800466e:	4393      	bics	r3, r2
 8004670:	0019      	movs	r1, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	4b37      	ldr	r3, [pc, #220]	@ (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 8004678:	430a      	orrs	r2, r1
 800467a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800467c:	f7fd fd7c 	bl	8002178 <HAL_GetTick>
 8004680:	0003      	movs	r3, r0
 8004682:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004684:	e009      	b.n	800469a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004686:	f7fd fd77 	bl	8002178 <HAL_GetTick>
 800468a:	0002      	movs	r2, r0
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	4a2f      	ldr	r2, [pc, #188]	@ (8004750 <HAL_RCC_ClockConfig+0x1f4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e054      	b.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469a:	4b2e      	ldr	r3, [pc, #184]	@ (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2238      	movs	r2, #56	@ 0x38
 80046a0:	401a      	ands	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d1ec      	bne.n	8004686 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046ac:	4b27      	ldr	r3, [pc, #156]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2207      	movs	r2, #7
 80046b2:	4013      	ands	r3, r2
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d21e      	bcs.n	80046f8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ba:	4b24      	ldr	r3, [pc, #144]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2207      	movs	r2, #7
 80046c0:	4393      	bics	r3, r2
 80046c2:	0019      	movs	r1, r3
 80046c4:	4b21      	ldr	r3, [pc, #132]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046cc:	f7fd fd54 	bl	8002178 <HAL_GetTick>
 80046d0:	0003      	movs	r3, r0
 80046d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046d4:	e009      	b.n	80046ea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d6:	f7fd fd4f 	bl	8002178 <HAL_GetTick>
 80046da:	0002      	movs	r2, r0
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004750 <HAL_RCC_ClockConfig+0x1f4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e02c      	b.n	8004744 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046ea:	4b18      	ldr	r3, [pc, #96]	@ (800474c <HAL_RCC_ClockConfig+0x1f0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2207      	movs	r2, #7
 80046f0:	4013      	ands	r3, r2
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d1ee      	bne.n	80046d6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2204      	movs	r2, #4
 80046fe:	4013      	ands	r3, r2
 8004700:	d009      	beq.n	8004716 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004702:	4b14      	ldr	r3, [pc, #80]	@ (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	4a15      	ldr	r2, [pc, #84]	@ (800475c <HAL_RCC_ClockConfig+0x200>)
 8004708:	4013      	ands	r3, r2
 800470a:	0019      	movs	r1, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	4b10      	ldr	r3, [pc, #64]	@ (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 8004712:	430a      	orrs	r2, r1
 8004714:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004716:	f000 f829 	bl	800476c <HAL_RCC_GetSysClockFreq>
 800471a:	0001      	movs	r1, r0
 800471c:	4b0d      	ldr	r3, [pc, #52]	@ (8004754 <HAL_RCC_ClockConfig+0x1f8>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	0a1b      	lsrs	r3, r3, #8
 8004722:	220f      	movs	r2, #15
 8004724:	401a      	ands	r2, r3
 8004726:	4b0e      	ldr	r3, [pc, #56]	@ (8004760 <HAL_RCC_ClockConfig+0x204>)
 8004728:	0092      	lsls	r2, r2, #2
 800472a:	58d3      	ldr	r3, [r2, r3]
 800472c:	221f      	movs	r2, #31
 800472e:	4013      	ands	r3, r2
 8004730:	000a      	movs	r2, r1
 8004732:	40da      	lsrs	r2, r3
 8004734:	4b0b      	ldr	r3, [pc, #44]	@ (8004764 <HAL_RCC_ClockConfig+0x208>)
 8004736:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004738:	4b0b      	ldr	r3, [pc, #44]	@ (8004768 <HAL_RCC_ClockConfig+0x20c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	0018      	movs	r0, r3
 800473e:	f7fd fcbf 	bl	80020c0 <HAL_InitTick>
 8004742:	0003      	movs	r3, r0
}
 8004744:	0018      	movs	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	b004      	add	sp, #16
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40022000 	.word	0x40022000
 8004750:	00001388 	.word	0x00001388
 8004754:	40021000 	.word	0x40021000
 8004758:	fffff0ff 	.word	0xfffff0ff
 800475c:	ffff8fff 	.word	0xffff8fff
 8004760:	08005b88 	.word	0x08005b88
 8004764:	20000000 	.word	0x20000000
 8004768:	20000004 	.word	0x20000004

0800476c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004772:	4b3c      	ldr	r3, [pc, #240]	@ (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2238      	movs	r2, #56	@ 0x38
 8004778:	4013      	ands	r3, r2
 800477a:	d10f      	bne.n	800479c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800477c:	4b39      	ldr	r3, [pc, #228]	@ (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	0adb      	lsrs	r3, r3, #11
 8004782:	2207      	movs	r2, #7
 8004784:	4013      	ands	r3, r2
 8004786:	2201      	movs	r2, #1
 8004788:	409a      	lsls	r2, r3
 800478a:	0013      	movs	r3, r2
 800478c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800478e:	6839      	ldr	r1, [r7, #0]
 8004790:	4835      	ldr	r0, [pc, #212]	@ (8004868 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004792:	f7fb fcb7 	bl	8000104 <__udivsi3>
 8004796:	0003      	movs	r3, r0
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	e05d      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800479c:	4b31      	ldr	r3, [pc, #196]	@ (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2238      	movs	r2, #56	@ 0x38
 80047a2:	4013      	ands	r3, r2
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d102      	bne.n	80047ae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047a8:	4b30      	ldr	r3, [pc, #192]	@ (800486c <HAL_RCC_GetSysClockFreq+0x100>)
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	e054      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2238      	movs	r2, #56	@ 0x38
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b10      	cmp	r3, #16
 80047b8:	d138      	bne.n	800482c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80047ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	2203      	movs	r2, #3
 80047c0:	4013      	ands	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047c4:	4b27      	ldr	r3, [pc, #156]	@ (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	2207      	movs	r2, #7
 80047cc:	4013      	ands	r3, r2
 80047ce:	3301      	adds	r3, #1
 80047d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d10d      	bne.n	80047f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	4824      	ldr	r0, [pc, #144]	@ (800486c <HAL_RCC_GetSysClockFreq+0x100>)
 80047dc:	f7fb fc92 	bl	8000104 <__udivsi3>
 80047e0:	0003      	movs	r3, r0
 80047e2:	0019      	movs	r1, r3
 80047e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	0a1b      	lsrs	r3, r3, #8
 80047ea:	227f      	movs	r2, #127	@ 0x7f
 80047ec:	4013      	ands	r3, r2
 80047ee:	434b      	muls	r3, r1
 80047f0:	617b      	str	r3, [r7, #20]
        break;
 80047f2:	e00d      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	481c      	ldr	r0, [pc, #112]	@ (8004868 <HAL_RCC_GetSysClockFreq+0xfc>)
 80047f8:	f7fb fc84 	bl	8000104 <__udivsi3>
 80047fc:	0003      	movs	r3, r0
 80047fe:	0019      	movs	r1, r3
 8004800:	4b18      	ldr	r3, [pc, #96]	@ (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	0a1b      	lsrs	r3, r3, #8
 8004806:	227f      	movs	r2, #127	@ 0x7f
 8004808:	4013      	ands	r3, r2
 800480a:	434b      	muls	r3, r1
 800480c:	617b      	str	r3, [r7, #20]
        break;
 800480e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004810:	4b14      	ldr	r3, [pc, #80]	@ (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	0f5b      	lsrs	r3, r3, #29
 8004816:	2207      	movs	r2, #7
 8004818:	4013      	ands	r3, r2
 800481a:	3301      	adds	r3, #1
 800481c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	6978      	ldr	r0, [r7, #20]
 8004822:	f7fb fc6f 	bl	8000104 <__udivsi3>
 8004826:	0003      	movs	r3, r0
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	e015      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800482c:	4b0d      	ldr	r3, [pc, #52]	@ (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2238      	movs	r2, #56	@ 0x38
 8004832:	4013      	ands	r3, r2
 8004834:	2b20      	cmp	r3, #32
 8004836:	d103      	bne.n	8004840 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004838:	2380      	movs	r3, #128	@ 0x80
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	e00b      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004840:	4b08      	ldr	r3, [pc, #32]	@ (8004864 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2238      	movs	r2, #56	@ 0x38
 8004846:	4013      	ands	r3, r2
 8004848:	2b18      	cmp	r3, #24
 800484a:	d103      	bne.n	8004854 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800484c:	23fa      	movs	r3, #250	@ 0xfa
 800484e:	01db      	lsls	r3, r3, #7
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	e001      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004858:	693b      	ldr	r3, [r7, #16]
}
 800485a:	0018      	movs	r0, r3
 800485c:	46bd      	mov	sp, r7
 800485e:	b006      	add	sp, #24
 8004860:	bd80      	pop	{r7, pc}
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	40021000 	.word	0x40021000
 8004868:	00f42400 	.word	0x00f42400
 800486c:	007a1200 	.word	0x007a1200

08004870 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004874:	4b02      	ldr	r3, [pc, #8]	@ (8004880 <HAL_RCC_GetHCLKFreq+0x10>)
 8004876:	681b      	ldr	r3, [r3, #0]
}
 8004878:	0018      	movs	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			@ (mov r8, r8)
 8004880:	20000000 	.word	0x20000000

08004884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004884:	b5b0      	push	{r4, r5, r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004888:	f7ff fff2 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 800488c:	0004      	movs	r4, r0
 800488e:	f7ff fb3f 	bl	8003f10 <LL_RCC_GetAPB1Prescaler>
 8004892:	0003      	movs	r3, r0
 8004894:	0b1a      	lsrs	r2, r3, #12
 8004896:	4b05      	ldr	r3, [pc, #20]	@ (80048ac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004898:	0092      	lsls	r2, r2, #2
 800489a:	58d3      	ldr	r3, [r2, r3]
 800489c:	221f      	movs	r2, #31
 800489e:	4013      	ands	r3, r2
 80048a0:	40dc      	lsrs	r4, r3
 80048a2:	0023      	movs	r3, r4
}
 80048a4:	0018      	movs	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bdb0      	pop	{r4, r5, r7, pc}
 80048aa:	46c0      	nop			@ (mov r8, r8)
 80048ac:	08005bc8 	.word	0x08005bc8

080048b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80048b8:	2313      	movs	r3, #19
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048c0:	2312      	movs	r3, #18
 80048c2:	18fb      	adds	r3, r7, r3
 80048c4:	2200      	movs	r2, #0
 80048c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	2380      	movs	r3, #128	@ 0x80
 80048ce:	029b      	lsls	r3, r3, #10
 80048d0:	4013      	ands	r3, r2
 80048d2:	d100      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80048d4:	e0a3      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d6:	2011      	movs	r0, #17
 80048d8:	183b      	adds	r3, r7, r0
 80048da:	2200      	movs	r2, #0
 80048dc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048de:	4bc3      	ldr	r3, [pc, #780]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048e2:	2380      	movs	r3, #128	@ 0x80
 80048e4:	055b      	lsls	r3, r3, #21
 80048e6:	4013      	ands	r3, r2
 80048e8:	d110      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ea:	4bc0      	ldr	r3, [pc, #768]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048ee:	4bbf      	ldr	r3, [pc, #764]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048f0:	2180      	movs	r1, #128	@ 0x80
 80048f2:	0549      	lsls	r1, r1, #21
 80048f4:	430a      	orrs	r2, r1
 80048f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80048f8:	4bbc      	ldr	r3, [pc, #752]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048fc:	2380      	movs	r3, #128	@ 0x80
 80048fe:	055b      	lsls	r3, r3, #21
 8004900:	4013      	ands	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004906:	183b      	adds	r3, r7, r0
 8004908:	2201      	movs	r2, #1
 800490a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800490c:	4bb8      	ldr	r3, [pc, #736]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	4bb7      	ldr	r3, [pc, #732]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004912:	2180      	movs	r1, #128	@ 0x80
 8004914:	0049      	lsls	r1, r1, #1
 8004916:	430a      	orrs	r2, r1
 8004918:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800491a:	f7fd fc2d 	bl	8002178 <HAL_GetTick>
 800491e:	0003      	movs	r3, r0
 8004920:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004922:	e00b      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004924:	f7fd fc28 	bl	8002178 <HAL_GetTick>
 8004928:	0002      	movs	r2, r0
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d904      	bls.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004932:	2313      	movs	r3, #19
 8004934:	18fb      	adds	r3, r7, r3
 8004936:	2203      	movs	r2, #3
 8004938:	701a      	strb	r2, [r3, #0]
        break;
 800493a:	e005      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800493c:	4bac      	ldr	r3, [pc, #688]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	2380      	movs	r3, #128	@ 0x80
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	4013      	ands	r3, r2
 8004946:	d0ed      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004948:	2313      	movs	r3, #19
 800494a:	18fb      	adds	r3, r7, r3
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d154      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004952:	4ba6      	ldr	r3, [pc, #664]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004954:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004956:	23c0      	movs	r3, #192	@ 0xc0
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4013      	ands	r3, r2
 800495c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d019      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	429a      	cmp	r2, r3
 800496c:	d014      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800496e:	4b9f      	ldr	r3, [pc, #636]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004972:	4aa0      	ldr	r2, [pc, #640]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004974:	4013      	ands	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004978:	4b9c      	ldr	r3, [pc, #624]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800497a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800497c:	4b9b      	ldr	r3, [pc, #620]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800497e:	2180      	movs	r1, #128	@ 0x80
 8004980:	0249      	lsls	r1, r1, #9
 8004982:	430a      	orrs	r2, r1
 8004984:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004986:	4b99      	ldr	r3, [pc, #612]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004988:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800498a:	4b98      	ldr	r3, [pc, #608]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800498c:	499a      	ldr	r1, [pc, #616]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800498e:	400a      	ands	r2, r1
 8004990:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004992:	4b96      	ldr	r3, [pc, #600]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2201      	movs	r2, #1
 800499c:	4013      	ands	r3, r2
 800499e:	d016      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fd fbea 	bl	8002178 <HAL_GetTick>
 80049a4:	0003      	movs	r3, r0
 80049a6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a8:	e00c      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049aa:	f7fd fbe5 	bl	8002178 <HAL_GetTick>
 80049ae:	0002      	movs	r2, r0
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	4a91      	ldr	r2, [pc, #580]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d904      	bls.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80049ba:	2313      	movs	r3, #19
 80049bc:	18fb      	adds	r3, r7, r3
 80049be:	2203      	movs	r2, #3
 80049c0:	701a      	strb	r2, [r3, #0]
            break;
 80049c2:	e004      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049c4:	4b89      	ldr	r3, [pc, #548]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c8:	2202      	movs	r2, #2
 80049ca:	4013      	ands	r3, r2
 80049cc:	d0ed      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80049ce:	2313      	movs	r3, #19
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10a      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049d8:	4b84      	ldr	r3, [pc, #528]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049dc:	4a85      	ldr	r2, [pc, #532]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80049de:	4013      	ands	r3, r2
 80049e0:	0019      	movs	r1, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049e6:	4b81      	ldr	r3, [pc, #516]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049e8:	430a      	orrs	r2, r1
 80049ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049ec:	e00c      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049ee:	2312      	movs	r3, #18
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	2213      	movs	r2, #19
 80049f4:	18ba      	adds	r2, r7, r2
 80049f6:	7812      	ldrb	r2, [r2, #0]
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	e005      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fc:	2312      	movs	r3, #18
 80049fe:	18fb      	adds	r3, r7, r3
 8004a00:	2213      	movs	r2, #19
 8004a02:	18ba      	adds	r2, r7, r2
 8004a04:	7812      	ldrb	r2, [r2, #0]
 8004a06:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a08:	2311      	movs	r3, #17
 8004a0a:	18fb      	adds	r3, r7, r3
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d105      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a12:	4b76      	ldr	r3, [pc, #472]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a16:	4b75      	ldr	r3, [pc, #468]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a18:	4979      	ldr	r1, [pc, #484]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004a1a:	400a      	ands	r2, r1
 8004a1c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2201      	movs	r2, #1
 8004a24:	4013      	ands	r3, r2
 8004a26:	d009      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a28:	4b70      	ldr	r3, [pc, #448]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	4393      	bics	r3, r2
 8004a30:	0019      	movs	r1, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	4b6d      	ldr	r3, [pc, #436]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2202      	movs	r2, #2
 8004a42:	4013      	ands	r3, r2
 8004a44:	d009      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a46:	4b69      	ldr	r3, [pc, #420]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a4a:	220c      	movs	r2, #12
 8004a4c:	4393      	bics	r3, r2
 8004a4e:	0019      	movs	r1, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	4b65      	ldr	r3, [pc, #404]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a56:	430a      	orrs	r2, r1
 8004a58:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2210      	movs	r2, #16
 8004a60:	4013      	ands	r3, r2
 8004a62:	d009      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a64:	4b61      	ldr	r3, [pc, #388]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a68:	4a66      	ldr	r2, [pc, #408]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	0019      	movs	r1, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	4b5e      	ldr	r3, [pc, #376]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a74:	430a      	orrs	r2, r1
 8004a76:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	2380      	movs	r3, #128	@ 0x80
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4013      	ands	r3, r2
 8004a82:	d009      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a84:	4b59      	ldr	r3, [pc, #356]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a88:	4a5f      	ldr	r2, [pc, #380]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	0019      	movs	r1, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	4b56      	ldr	r3, [pc, #344]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a94:	430a      	orrs	r2, r1
 8004a96:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	2380      	movs	r3, #128	@ 0x80
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	d009      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004aa4:	4b51      	ldr	r3, [pc, #324]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa8:	4a58      	ldr	r2, [pc, #352]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	0019      	movs	r1, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69da      	ldr	r2, [r3, #28]
 8004ab2:	4b4e      	ldr	r3, [pc, #312]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2220      	movs	r2, #32
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d009      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac6:	4a52      	ldr	r2, [pc, #328]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	0019      	movs	r1, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	4b46      	ldr	r3, [pc, #280]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	2380      	movs	r3, #128	@ 0x80
 8004adc:	01db      	lsls	r3, r3, #7
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d015      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ae2:	4b42      	ldr	r3, [pc, #264]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	0899      	lsrs	r1, r3, #2
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1a      	ldr	r2, [r3, #32]
 8004aee:	4b3f      	ldr	r3, [pc, #252]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004af0:	430a      	orrs	r2, r1
 8004af2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1a      	ldr	r2, [r3, #32]
 8004af8:	2380      	movs	r3, #128	@ 0x80
 8004afa:	05db      	lsls	r3, r3, #23
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d106      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b00:	4b3a      	ldr	r3, [pc, #232]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	4b39      	ldr	r3, [pc, #228]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b06:	2180      	movs	r1, #128	@ 0x80
 8004b08:	0249      	lsls	r1, r1, #9
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	2380      	movs	r3, #128	@ 0x80
 8004b14:	031b      	lsls	r3, r3, #12
 8004b16:	4013      	ands	r3, r2
 8004b18:	d009      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b1a:	4b34      	ldr	r3, [pc, #208]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b1e:	2240      	movs	r2, #64	@ 0x40
 8004b20:	4393      	bics	r3, r2
 8004b22:	0019      	movs	r1, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b28:	4b30      	ldr	r3, [pc, #192]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	2380      	movs	r3, #128	@ 0x80
 8004b34:	039b      	lsls	r3, r3, #14
 8004b36:	4013      	ands	r3, r2
 8004b38:	d016      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3e:	4a35      	ldr	r2, [pc, #212]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	0019      	movs	r1, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b48:	4b28      	ldr	r3, [pc, #160]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b52:	2380      	movs	r3, #128	@ 0x80
 8004b54:	03db      	lsls	r3, r3, #15
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d106      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b5a:	4b24      	ldr	r3, [pc, #144]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	4b23      	ldr	r3, [pc, #140]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b60:	2180      	movs	r1, #128	@ 0x80
 8004b62:	0449      	lsls	r1, r1, #17
 8004b64:	430a      	orrs	r2, r1
 8004b66:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	2380      	movs	r3, #128	@ 0x80
 8004b6e:	03db      	lsls	r3, r3, #15
 8004b70:	4013      	ands	r3, r2
 8004b72:	d016      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004b74:	4b1d      	ldr	r3, [pc, #116]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b78:	4a27      	ldr	r2, [pc, #156]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	0019      	movs	r1, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b82:	4b1a      	ldr	r3, [pc, #104]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b84:	430a      	orrs	r2, r1
 8004b86:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b8c:	2380      	movs	r3, #128	@ 0x80
 8004b8e:	045b      	lsls	r3, r3, #17
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d106      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b94:	4b15      	ldr	r3, [pc, #84]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	4b14      	ldr	r3, [pc, #80]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b9a:	2180      	movs	r1, #128	@ 0x80
 8004b9c:	0449      	lsls	r1, r1, #17
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	2380      	movs	r3, #128	@ 0x80
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	4013      	ands	r3, r2
 8004bac:	d016      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004bae:	4b0f      	ldr	r3, [pc, #60]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	0019      	movs	r1, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	695a      	ldr	r2, [r3, #20]
 8004bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695a      	ldr	r2, [r3, #20]
 8004bc6:	2380      	movs	r3, #128	@ 0x80
 8004bc8:	01db      	lsls	r3, r3, #7
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d106      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004bce:	4b07      	ldr	r3, [pc, #28]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	4b06      	ldr	r3, [pc, #24]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bd4:	2180      	movs	r1, #128	@ 0x80
 8004bd6:	0249      	lsls	r1, r1, #9
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004bdc:	2312      	movs	r3, #18
 8004bde:	18fb      	adds	r3, r7, r3
 8004be0:	781b      	ldrb	r3, [r3, #0]
}
 8004be2:	0018      	movs	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b006      	add	sp, #24
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	40007000 	.word	0x40007000
 8004bf4:	fffffcff 	.word	0xfffffcff
 8004bf8:	fffeffff 	.word	0xfffeffff
 8004bfc:	00001388 	.word	0x00001388
 8004c00:	efffffff 	.word	0xefffffff
 8004c04:	fffff3ff 	.word	0xfffff3ff
 8004c08:	fff3ffff 	.word	0xfff3ffff
 8004c0c:	ffcfffff 	.word	0xffcfffff
 8004c10:	ffffcfff 	.word	0xffffcfff
 8004c14:	ffbfffff 	.word	0xffbfffff
 8004c18:	feffffff 	.word	0xfeffffff
 8004c1c:	ffff3fff 	.word	0xffff3fff

08004c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e046      	b.n	8004cc0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2288      	movs	r2, #136	@ 0x88
 8004c36:	589b      	ldr	r3, [r3, r2]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d107      	bne.n	8004c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2284      	movs	r2, #132	@ 0x84
 8004c40:	2100      	movs	r1, #0
 8004c42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	0018      	movs	r0, r3
 8004c48:	f7fd f958 	bl	8001efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2288      	movs	r2, #136	@ 0x88
 8004c50:	2124      	movs	r1, #36	@ 0x24
 8004c52:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2101      	movs	r1, #1
 8004c60:	438a      	bics	r2, r1
 8004c62:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f000 fb8e 	bl	8005390 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	0018      	movs	r0, r3
 8004c78:	f000 f8cc 	bl	8004e14 <UART_SetConfig>
 8004c7c:	0003      	movs	r3, r0
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e01c      	b.n	8004cc0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	490d      	ldr	r1, [pc, #52]	@ (8004cc8 <HAL_UART_Init+0xa8>)
 8004c92:	400a      	ands	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	212a      	movs	r1, #42	@ 0x2a
 8004ca2:	438a      	bics	r2, r1
 8004ca4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f000 fc1d 	bl	80054f8 <UART_CheckIdleState>
 8004cbe:	0003      	movs	r3, r0
}
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b002      	add	sp, #8
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	ffffb7ff 	.word	0xffffb7ff

08004ccc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	@ 0x28
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	603b      	str	r3, [r7, #0]
 8004cd8:	1dbb      	adds	r3, r7, #6
 8004cda:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2288      	movs	r2, #136	@ 0x88
 8004ce0:	589b      	ldr	r3, [r3, r2]
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d000      	beq.n	8004ce8 <HAL_UART_Transmit+0x1c>
 8004ce6:	e090      	b.n	8004e0a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_UART_Transmit+0x2a>
 8004cee:	1dbb      	adds	r3, r7, #6
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e088      	b.n	8004e0c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	2380      	movs	r3, #128	@ 0x80
 8004d00:	015b      	lsls	r3, r3, #5
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d109      	bne.n	8004d1a <HAL_UART_Transmit+0x4e>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d105      	bne.n	8004d1a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2201      	movs	r2, #1
 8004d12:	4013      	ands	r3, r2
 8004d14:	d001      	beq.n	8004d1a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e078      	b.n	8004e0c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2290      	movs	r2, #144	@ 0x90
 8004d1e:	2100      	movs	r1, #0
 8004d20:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2288      	movs	r2, #136	@ 0x88
 8004d26:	2121      	movs	r1, #33	@ 0x21
 8004d28:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d2a:	f7fd fa25 	bl	8002178 <HAL_GetTick>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1dba      	adds	r2, r7, #6
 8004d36:	2154      	movs	r1, #84	@ 0x54
 8004d38:	8812      	ldrh	r2, [r2, #0]
 8004d3a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1dba      	adds	r2, r7, #6
 8004d40:	2156      	movs	r1, #86	@ 0x56
 8004d42:	8812      	ldrh	r2, [r2, #0]
 8004d44:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	2380      	movs	r3, #128	@ 0x80
 8004d4c:	015b      	lsls	r3, r3, #5
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d108      	bne.n	8004d64 <HAL_UART_Transmit+0x98>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d104      	bne.n	8004d64 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	e003      	b.n	8004d6c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d6c:	e030      	b.n	8004dd0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	0013      	movs	r3, r2
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2180      	movs	r1, #128	@ 0x80
 8004d7c:	f000 fc66 	bl	800564c <UART_WaitOnFlagUntilTimeout>
 8004d80:	1e03      	subs	r3, r0, #0
 8004d82:	d005      	beq.n	8004d90 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2288      	movs	r2, #136	@ 0x88
 8004d88:	2120      	movs	r1, #32
 8004d8a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e03d      	b.n	8004e0c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10b      	bne.n	8004dae <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	001a      	movs	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	05d2      	lsls	r2, r2, #23
 8004da2:	0dd2      	lsrs	r2, r2, #23
 8004da4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	3302      	adds	r3, #2
 8004daa:	61bb      	str	r3, [r7, #24]
 8004dac:	e007      	b.n	8004dbe <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	781a      	ldrb	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2256      	movs	r2, #86	@ 0x56
 8004dc2:	5a9b      	ldrh	r3, [r3, r2]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b299      	uxth	r1, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2256      	movs	r2, #86	@ 0x56
 8004dce:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2256      	movs	r2, #86	@ 0x56
 8004dd4:	5a9b      	ldrh	r3, [r3, r2]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1c8      	bne.n	8004d6e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	0013      	movs	r3, r2
 8004de6:	2200      	movs	r2, #0
 8004de8:	2140      	movs	r1, #64	@ 0x40
 8004dea:	f000 fc2f 	bl	800564c <UART_WaitOnFlagUntilTimeout>
 8004dee:	1e03      	subs	r3, r0, #0
 8004df0:	d005      	beq.n	8004dfe <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2288      	movs	r2, #136	@ 0x88
 8004df6:	2120      	movs	r1, #32
 8004df8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e006      	b.n	8004e0c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2288      	movs	r2, #136	@ 0x88
 8004e02:	2120      	movs	r1, #32
 8004e04:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	e000      	b.n	8004e0c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004e0a:	2302      	movs	r3, #2
  }
}
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b008      	add	sp, #32
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e14:	b5b0      	push	{r4, r5, r7, lr}
 8004e16:	b090      	sub	sp, #64	@ 0x40
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e1c:	231a      	movs	r3, #26
 8004e1e:	2220      	movs	r2, #32
 8004e20:	189b      	adds	r3, r3, r2
 8004e22:	19db      	adds	r3, r3, r7
 8004e24:	2200      	movs	r2, #0
 8004e26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	431a      	orrs	r2, r3
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4aaf      	ldr	r2, [pc, #700]	@ (8005104 <UART_SetConfig+0x2f0>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	0019      	movs	r1, r3
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e52:	430b      	orrs	r3, r1
 8004e54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	4aaa      	ldr	r2, [pc, #680]	@ (8005108 <UART_SetConfig+0x2f4>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	0018      	movs	r0, r3
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	68d9      	ldr	r1, [r3, #12]
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	0003      	movs	r3, r0
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4aa4      	ldr	r2, [pc, #656]	@ (800510c <UART_SetConfig+0x2f8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d004      	beq.n	8004e8a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e86:	4313      	orrs	r3, r2
 8004e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	4a9f      	ldr	r2, [pc, #636]	@ (8005110 <UART_SetConfig+0x2fc>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	0019      	movs	r1, r3
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea6:	220f      	movs	r2, #15
 8004ea8:	4393      	bics	r3, r2
 8004eaa:	0018      	movs	r0, r3
 8004eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	0003      	movs	r3, r0
 8004eb6:	430b      	orrs	r3, r1
 8004eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a95      	ldr	r2, [pc, #596]	@ (8005114 <UART_SetConfig+0x300>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d131      	bne.n	8004f28 <UART_SetConfig+0x114>
 8004ec4:	4b94      	ldr	r3, [pc, #592]	@ (8005118 <UART_SetConfig+0x304>)
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec8:	2203      	movs	r2, #3
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d01d      	beq.n	8004f0c <UART_SetConfig+0xf8>
 8004ed0:	d823      	bhi.n	8004f1a <UART_SetConfig+0x106>
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d00c      	beq.n	8004ef0 <UART_SetConfig+0xdc>
 8004ed6:	d820      	bhi.n	8004f1a <UART_SetConfig+0x106>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <UART_SetConfig+0xce>
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d00e      	beq.n	8004efe <UART_SetConfig+0xea>
 8004ee0:	e01b      	b.n	8004f1a <UART_SetConfig+0x106>
 8004ee2:	231b      	movs	r3, #27
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	189b      	adds	r3, r3, r2
 8004ee8:	19db      	adds	r3, r3, r7
 8004eea:	2200      	movs	r2, #0
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	e0b4      	b.n	800505a <UART_SetConfig+0x246>
 8004ef0:	231b      	movs	r3, #27
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	189b      	adds	r3, r3, r2
 8004ef6:	19db      	adds	r3, r3, r7
 8004ef8:	2202      	movs	r2, #2
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	e0ad      	b.n	800505a <UART_SetConfig+0x246>
 8004efe:	231b      	movs	r3, #27
 8004f00:	2220      	movs	r2, #32
 8004f02:	189b      	adds	r3, r3, r2
 8004f04:	19db      	adds	r3, r3, r7
 8004f06:	2204      	movs	r2, #4
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	e0a6      	b.n	800505a <UART_SetConfig+0x246>
 8004f0c:	231b      	movs	r3, #27
 8004f0e:	2220      	movs	r2, #32
 8004f10:	189b      	adds	r3, r3, r2
 8004f12:	19db      	adds	r3, r3, r7
 8004f14:	2208      	movs	r2, #8
 8004f16:	701a      	strb	r2, [r3, #0]
 8004f18:	e09f      	b.n	800505a <UART_SetConfig+0x246>
 8004f1a:	231b      	movs	r3, #27
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	189b      	adds	r3, r3, r2
 8004f20:	19db      	adds	r3, r3, r7
 8004f22:	2210      	movs	r2, #16
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	e098      	b.n	800505a <UART_SetConfig+0x246>
 8004f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a7b      	ldr	r2, [pc, #492]	@ (800511c <UART_SetConfig+0x308>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d131      	bne.n	8004f96 <UART_SetConfig+0x182>
 8004f32:	4b79      	ldr	r3, [pc, #484]	@ (8005118 <UART_SetConfig+0x304>)
 8004f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f36:	220c      	movs	r2, #12
 8004f38:	4013      	ands	r3, r2
 8004f3a:	2b0c      	cmp	r3, #12
 8004f3c:	d01d      	beq.n	8004f7a <UART_SetConfig+0x166>
 8004f3e:	d823      	bhi.n	8004f88 <UART_SetConfig+0x174>
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d00c      	beq.n	8004f5e <UART_SetConfig+0x14a>
 8004f44:	d820      	bhi.n	8004f88 <UART_SetConfig+0x174>
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <UART_SetConfig+0x13c>
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d00e      	beq.n	8004f6c <UART_SetConfig+0x158>
 8004f4e:	e01b      	b.n	8004f88 <UART_SetConfig+0x174>
 8004f50:	231b      	movs	r3, #27
 8004f52:	2220      	movs	r2, #32
 8004f54:	189b      	adds	r3, r3, r2
 8004f56:	19db      	adds	r3, r3, r7
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	e07d      	b.n	800505a <UART_SetConfig+0x246>
 8004f5e:	231b      	movs	r3, #27
 8004f60:	2220      	movs	r2, #32
 8004f62:	189b      	adds	r3, r3, r2
 8004f64:	19db      	adds	r3, r3, r7
 8004f66:	2202      	movs	r2, #2
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	e076      	b.n	800505a <UART_SetConfig+0x246>
 8004f6c:	231b      	movs	r3, #27
 8004f6e:	2220      	movs	r2, #32
 8004f70:	189b      	adds	r3, r3, r2
 8004f72:	19db      	adds	r3, r3, r7
 8004f74:	2204      	movs	r2, #4
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	e06f      	b.n	800505a <UART_SetConfig+0x246>
 8004f7a:	231b      	movs	r3, #27
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	189b      	adds	r3, r3, r2
 8004f80:	19db      	adds	r3, r3, r7
 8004f82:	2208      	movs	r2, #8
 8004f84:	701a      	strb	r2, [r3, #0]
 8004f86:	e068      	b.n	800505a <UART_SetConfig+0x246>
 8004f88:	231b      	movs	r3, #27
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	189b      	adds	r3, r3, r2
 8004f8e:	19db      	adds	r3, r3, r7
 8004f90:	2210      	movs	r2, #16
 8004f92:	701a      	strb	r2, [r3, #0]
 8004f94:	e061      	b.n	800505a <UART_SetConfig+0x246>
 8004f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a61      	ldr	r2, [pc, #388]	@ (8005120 <UART_SetConfig+0x30c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d106      	bne.n	8004fae <UART_SetConfig+0x19a>
 8004fa0:	231b      	movs	r3, #27
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	189b      	adds	r3, r3, r2
 8004fa6:	19db      	adds	r3, r3, r7
 8004fa8:	2200      	movs	r2, #0
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	e055      	b.n	800505a <UART_SetConfig+0x246>
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a5c      	ldr	r2, [pc, #368]	@ (8005124 <UART_SetConfig+0x310>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d106      	bne.n	8004fc6 <UART_SetConfig+0x1b2>
 8004fb8:	231b      	movs	r3, #27
 8004fba:	2220      	movs	r2, #32
 8004fbc:	189b      	adds	r3, r3, r2
 8004fbe:	19db      	adds	r3, r3, r7
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]
 8004fc4:	e049      	b.n	800505a <UART_SetConfig+0x246>
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a50      	ldr	r2, [pc, #320]	@ (800510c <UART_SetConfig+0x2f8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d13e      	bne.n	800504e <UART_SetConfig+0x23a>
 8004fd0:	4b51      	ldr	r3, [pc, #324]	@ (8005118 <UART_SetConfig+0x304>)
 8004fd2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004fd4:	23c0      	movs	r3, #192	@ 0xc0
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	4013      	ands	r3, r2
 8004fda:	22c0      	movs	r2, #192	@ 0xc0
 8004fdc:	0112      	lsls	r2, r2, #4
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d027      	beq.n	8005032 <UART_SetConfig+0x21e>
 8004fe2:	22c0      	movs	r2, #192	@ 0xc0
 8004fe4:	0112      	lsls	r2, r2, #4
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d82a      	bhi.n	8005040 <UART_SetConfig+0x22c>
 8004fea:	2280      	movs	r2, #128	@ 0x80
 8004fec:	0112      	lsls	r2, r2, #4
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d011      	beq.n	8005016 <UART_SetConfig+0x202>
 8004ff2:	2280      	movs	r2, #128	@ 0x80
 8004ff4:	0112      	lsls	r2, r2, #4
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d822      	bhi.n	8005040 <UART_SetConfig+0x22c>
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d004      	beq.n	8005008 <UART_SetConfig+0x1f4>
 8004ffe:	2280      	movs	r2, #128	@ 0x80
 8005000:	00d2      	lsls	r2, r2, #3
 8005002:	4293      	cmp	r3, r2
 8005004:	d00e      	beq.n	8005024 <UART_SetConfig+0x210>
 8005006:	e01b      	b.n	8005040 <UART_SetConfig+0x22c>
 8005008:	231b      	movs	r3, #27
 800500a:	2220      	movs	r2, #32
 800500c:	189b      	adds	r3, r3, r2
 800500e:	19db      	adds	r3, r3, r7
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]
 8005014:	e021      	b.n	800505a <UART_SetConfig+0x246>
 8005016:	231b      	movs	r3, #27
 8005018:	2220      	movs	r2, #32
 800501a:	189b      	adds	r3, r3, r2
 800501c:	19db      	adds	r3, r3, r7
 800501e:	2202      	movs	r2, #2
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	e01a      	b.n	800505a <UART_SetConfig+0x246>
 8005024:	231b      	movs	r3, #27
 8005026:	2220      	movs	r2, #32
 8005028:	189b      	adds	r3, r3, r2
 800502a:	19db      	adds	r3, r3, r7
 800502c:	2204      	movs	r2, #4
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	e013      	b.n	800505a <UART_SetConfig+0x246>
 8005032:	231b      	movs	r3, #27
 8005034:	2220      	movs	r2, #32
 8005036:	189b      	adds	r3, r3, r2
 8005038:	19db      	adds	r3, r3, r7
 800503a:	2208      	movs	r2, #8
 800503c:	701a      	strb	r2, [r3, #0]
 800503e:	e00c      	b.n	800505a <UART_SetConfig+0x246>
 8005040:	231b      	movs	r3, #27
 8005042:	2220      	movs	r2, #32
 8005044:	189b      	adds	r3, r3, r2
 8005046:	19db      	adds	r3, r3, r7
 8005048:	2210      	movs	r2, #16
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	e005      	b.n	800505a <UART_SetConfig+0x246>
 800504e:	231b      	movs	r3, #27
 8005050:	2220      	movs	r2, #32
 8005052:	189b      	adds	r3, r3, r2
 8005054:	19db      	adds	r3, r3, r7
 8005056:	2210      	movs	r2, #16
 8005058:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a2b      	ldr	r2, [pc, #172]	@ (800510c <UART_SetConfig+0x2f8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d000      	beq.n	8005066 <UART_SetConfig+0x252>
 8005064:	e0a9      	b.n	80051ba <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005066:	231b      	movs	r3, #27
 8005068:	2220      	movs	r2, #32
 800506a:	189b      	adds	r3, r3, r2
 800506c:	19db      	adds	r3, r3, r7
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d015      	beq.n	80050a0 <UART_SetConfig+0x28c>
 8005074:	dc18      	bgt.n	80050a8 <UART_SetConfig+0x294>
 8005076:	2b04      	cmp	r3, #4
 8005078:	d00d      	beq.n	8005096 <UART_SetConfig+0x282>
 800507a:	dc15      	bgt.n	80050a8 <UART_SetConfig+0x294>
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <UART_SetConfig+0x272>
 8005080:	2b02      	cmp	r3, #2
 8005082:	d005      	beq.n	8005090 <UART_SetConfig+0x27c>
 8005084:	e010      	b.n	80050a8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005086:	f7ff fbfd 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 800508a:	0003      	movs	r3, r0
 800508c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800508e:	e014      	b.n	80050ba <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005090:	4b25      	ldr	r3, [pc, #148]	@ (8005128 <UART_SetConfig+0x314>)
 8005092:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005094:	e011      	b.n	80050ba <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005096:	f7ff fb69 	bl	800476c <HAL_RCC_GetSysClockFreq>
 800509a:	0003      	movs	r3, r0
 800509c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800509e:	e00c      	b.n	80050ba <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050a0:	2380      	movs	r3, #128	@ 0x80
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050a6:	e008      	b.n	80050ba <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80050ac:	231a      	movs	r3, #26
 80050ae:	2220      	movs	r2, #32
 80050b0:	189b      	adds	r3, r3, r2
 80050b2:	19db      	adds	r3, r3, r7
 80050b4:	2201      	movs	r2, #1
 80050b6:	701a      	strb	r2, [r3, #0]
        break;
 80050b8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d100      	bne.n	80050c2 <UART_SetConfig+0x2ae>
 80050c0:	e14b      	b.n	800535a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050c6:	4b19      	ldr	r3, [pc, #100]	@ (800512c <UART_SetConfig+0x318>)
 80050c8:	0052      	lsls	r2, r2, #1
 80050ca:	5ad3      	ldrh	r3, [r2, r3]
 80050cc:	0019      	movs	r1, r3
 80050ce:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80050d0:	f7fb f818 	bl	8000104 <__udivsi3>
 80050d4:	0003      	movs	r3, r0
 80050d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	0013      	movs	r3, r2
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	189b      	adds	r3, r3, r2
 80050e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d305      	bcc.n	80050f4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d91d      	bls.n	8005130 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80050f4:	231a      	movs	r3, #26
 80050f6:	2220      	movs	r2, #32
 80050f8:	189b      	adds	r3, r3, r2
 80050fa:	19db      	adds	r3, r3, r7
 80050fc:	2201      	movs	r2, #1
 80050fe:	701a      	strb	r2, [r3, #0]
 8005100:	e12b      	b.n	800535a <UART_SetConfig+0x546>
 8005102:	46c0      	nop			@ (mov r8, r8)
 8005104:	cfff69f3 	.word	0xcfff69f3
 8005108:	ffffcfff 	.word	0xffffcfff
 800510c:	40008000 	.word	0x40008000
 8005110:	11fff4ff 	.word	0x11fff4ff
 8005114:	40013800 	.word	0x40013800
 8005118:	40021000 	.word	0x40021000
 800511c:	40004400 	.word	0x40004400
 8005120:	40004800 	.word	0x40004800
 8005124:	40004c00 	.word	0x40004c00
 8005128:	00f42400 	.word	0x00f42400
 800512c:	08005be8 	.word	0x08005be8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005132:	61bb      	str	r3, [r7, #24]
 8005134:	2300      	movs	r3, #0
 8005136:	61fb      	str	r3, [r7, #28]
 8005138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800513c:	4b92      	ldr	r3, [pc, #584]	@ (8005388 <UART_SetConfig+0x574>)
 800513e:	0052      	lsls	r2, r2, #1
 8005140:	5ad3      	ldrh	r3, [r2, r3]
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	69b8      	ldr	r0, [r7, #24]
 800514e:	69f9      	ldr	r1, [r7, #28]
 8005150:	f7fb f94e 	bl	80003f0 <__aeabi_uldivmod>
 8005154:	0002      	movs	r2, r0
 8005156:	000b      	movs	r3, r1
 8005158:	0e11      	lsrs	r1, r2, #24
 800515a:	021d      	lsls	r5, r3, #8
 800515c:	430d      	orrs	r5, r1
 800515e:	0214      	lsls	r4, r2, #8
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	085b      	lsrs	r3, r3, #1
 8005166:	60bb      	str	r3, [r7, #8]
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	68b8      	ldr	r0, [r7, #8]
 800516e:	68f9      	ldr	r1, [r7, #12]
 8005170:	1900      	adds	r0, r0, r4
 8005172:	4169      	adcs	r1, r5
 8005174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	603b      	str	r3, [r7, #0]
 800517a:	2300      	movs	r3, #0
 800517c:	607b      	str	r3, [r7, #4]
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f7fb f935 	bl	80003f0 <__aeabi_uldivmod>
 8005186:	0002      	movs	r2, r0
 8005188:	000b      	movs	r3, r1
 800518a:	0013      	movs	r3, r2
 800518c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800518e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005190:	23c0      	movs	r3, #192	@ 0xc0
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	429a      	cmp	r2, r3
 8005196:	d309      	bcc.n	80051ac <UART_SetConfig+0x398>
 8005198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800519a:	2380      	movs	r3, #128	@ 0x80
 800519c:	035b      	lsls	r3, r3, #13
 800519e:	429a      	cmp	r2, r3
 80051a0:	d204      	bcs.n	80051ac <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a8:	60da      	str	r2, [r3, #12]
 80051aa:	e0d6      	b.n	800535a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80051ac:	231a      	movs	r3, #26
 80051ae:	2220      	movs	r2, #32
 80051b0:	189b      	adds	r3, r3, r2
 80051b2:	19db      	adds	r3, r3, r7
 80051b4:	2201      	movs	r2, #1
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	e0cf      	b.n	800535a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	69da      	ldr	r2, [r3, #28]
 80051be:	2380      	movs	r3, #128	@ 0x80
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d000      	beq.n	80051c8 <UART_SetConfig+0x3b4>
 80051c6:	e070      	b.n	80052aa <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80051c8:	231b      	movs	r3, #27
 80051ca:	2220      	movs	r2, #32
 80051cc:	189b      	adds	r3, r3, r2
 80051ce:	19db      	adds	r3, r3, r7
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d015      	beq.n	8005202 <UART_SetConfig+0x3ee>
 80051d6:	dc18      	bgt.n	800520a <UART_SetConfig+0x3f6>
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d00d      	beq.n	80051f8 <UART_SetConfig+0x3e4>
 80051dc:	dc15      	bgt.n	800520a <UART_SetConfig+0x3f6>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <UART_SetConfig+0x3d4>
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d005      	beq.n	80051f2 <UART_SetConfig+0x3de>
 80051e6:	e010      	b.n	800520a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e8:	f7ff fb4c 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 80051ec:	0003      	movs	r3, r0
 80051ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80051f0:	e014      	b.n	800521c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f2:	4b66      	ldr	r3, [pc, #408]	@ (800538c <UART_SetConfig+0x578>)
 80051f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80051f6:	e011      	b.n	800521c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051f8:	f7ff fab8 	bl	800476c <HAL_RCC_GetSysClockFreq>
 80051fc:	0003      	movs	r3, r0
 80051fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005200:	e00c      	b.n	800521c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005202:	2380      	movs	r3, #128	@ 0x80
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005208:	e008      	b.n	800521c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800520e:	231a      	movs	r3, #26
 8005210:	2220      	movs	r2, #32
 8005212:	189b      	adds	r3, r3, r2
 8005214:	19db      	adds	r3, r3, r7
 8005216:	2201      	movs	r2, #1
 8005218:	701a      	strb	r2, [r3, #0]
        break;
 800521a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800521c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800521e:	2b00      	cmp	r3, #0
 8005220:	d100      	bne.n	8005224 <UART_SetConfig+0x410>
 8005222:	e09a      	b.n	800535a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005226:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005228:	4b57      	ldr	r3, [pc, #348]	@ (8005388 <UART_SetConfig+0x574>)
 800522a:	0052      	lsls	r2, r2, #1
 800522c:	5ad3      	ldrh	r3, [r2, r3]
 800522e:	0019      	movs	r1, r3
 8005230:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005232:	f7fa ff67 	bl	8000104 <__udivsi3>
 8005236:	0003      	movs	r3, r0
 8005238:	005a      	lsls	r2, r3, #1
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	085b      	lsrs	r3, r3, #1
 8005240:	18d2      	adds	r2, r2, r3
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	0019      	movs	r1, r3
 8005248:	0010      	movs	r0, r2
 800524a:	f7fa ff5b 	bl	8000104 <__udivsi3>
 800524e:	0003      	movs	r3, r0
 8005250:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005254:	2b0f      	cmp	r3, #15
 8005256:	d921      	bls.n	800529c <UART_SetConfig+0x488>
 8005258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800525a:	2380      	movs	r3, #128	@ 0x80
 800525c:	025b      	lsls	r3, r3, #9
 800525e:	429a      	cmp	r2, r3
 8005260:	d21c      	bcs.n	800529c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005264:	b29a      	uxth	r2, r3
 8005266:	200e      	movs	r0, #14
 8005268:	2420      	movs	r4, #32
 800526a:	1903      	adds	r3, r0, r4
 800526c:	19db      	adds	r3, r3, r7
 800526e:	210f      	movs	r1, #15
 8005270:	438a      	bics	r2, r1
 8005272:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005276:	085b      	lsrs	r3, r3, #1
 8005278:	b29b      	uxth	r3, r3
 800527a:	2207      	movs	r2, #7
 800527c:	4013      	ands	r3, r2
 800527e:	b299      	uxth	r1, r3
 8005280:	1903      	adds	r3, r0, r4
 8005282:	19db      	adds	r3, r3, r7
 8005284:	1902      	adds	r2, r0, r4
 8005286:	19d2      	adds	r2, r2, r7
 8005288:	8812      	ldrh	r2, [r2, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	1902      	adds	r2, r0, r4
 8005294:	19d2      	adds	r2, r2, r7
 8005296:	8812      	ldrh	r2, [r2, #0]
 8005298:	60da      	str	r2, [r3, #12]
 800529a:	e05e      	b.n	800535a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800529c:	231a      	movs	r3, #26
 800529e:	2220      	movs	r2, #32
 80052a0:	189b      	adds	r3, r3, r2
 80052a2:	19db      	adds	r3, r3, r7
 80052a4:	2201      	movs	r2, #1
 80052a6:	701a      	strb	r2, [r3, #0]
 80052a8:	e057      	b.n	800535a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052aa:	231b      	movs	r3, #27
 80052ac:	2220      	movs	r2, #32
 80052ae:	189b      	adds	r3, r3, r2
 80052b0:	19db      	adds	r3, r3, r7
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d015      	beq.n	80052e4 <UART_SetConfig+0x4d0>
 80052b8:	dc18      	bgt.n	80052ec <UART_SetConfig+0x4d8>
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d00d      	beq.n	80052da <UART_SetConfig+0x4c6>
 80052be:	dc15      	bgt.n	80052ec <UART_SetConfig+0x4d8>
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <UART_SetConfig+0x4b6>
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d005      	beq.n	80052d4 <UART_SetConfig+0x4c0>
 80052c8:	e010      	b.n	80052ec <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ca:	f7ff fadb 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 80052ce:	0003      	movs	r3, r0
 80052d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052d2:	e014      	b.n	80052fe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d4:	4b2d      	ldr	r3, [pc, #180]	@ (800538c <UART_SetConfig+0x578>)
 80052d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052d8:	e011      	b.n	80052fe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052da:	f7ff fa47 	bl	800476c <HAL_RCC_GetSysClockFreq>
 80052de:	0003      	movs	r3, r0
 80052e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052e2:	e00c      	b.n	80052fe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052e4:	2380      	movs	r3, #128	@ 0x80
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052ea:	e008      	b.n	80052fe <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80052f0:	231a      	movs	r3, #26
 80052f2:	2220      	movs	r2, #32
 80052f4:	189b      	adds	r3, r3, r2
 80052f6:	19db      	adds	r3, r3, r7
 80052f8:	2201      	movs	r2, #1
 80052fa:	701a      	strb	r2, [r3, #0]
        break;
 80052fc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80052fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005300:	2b00      	cmp	r3, #0
 8005302:	d02a      	beq.n	800535a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005306:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005308:	4b1f      	ldr	r3, [pc, #124]	@ (8005388 <UART_SetConfig+0x574>)
 800530a:	0052      	lsls	r2, r2, #1
 800530c:	5ad3      	ldrh	r3, [r2, r3]
 800530e:	0019      	movs	r1, r3
 8005310:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005312:	f7fa fef7 	bl	8000104 <__udivsi3>
 8005316:	0003      	movs	r3, r0
 8005318:	001a      	movs	r2, r3
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	085b      	lsrs	r3, r3, #1
 8005320:	18d2      	adds	r2, r2, r3
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	0019      	movs	r1, r3
 8005328:	0010      	movs	r0, r2
 800532a:	f7fa feeb 	bl	8000104 <__udivsi3>
 800532e:	0003      	movs	r3, r0
 8005330:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005334:	2b0f      	cmp	r3, #15
 8005336:	d90a      	bls.n	800534e <UART_SetConfig+0x53a>
 8005338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800533a:	2380      	movs	r3, #128	@ 0x80
 800533c:	025b      	lsls	r3, r3, #9
 800533e:	429a      	cmp	r2, r3
 8005340:	d205      	bcs.n	800534e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005344:	b29a      	uxth	r2, r3
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60da      	str	r2, [r3, #12]
 800534c:	e005      	b.n	800535a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800534e:	231a      	movs	r3, #26
 8005350:	2220      	movs	r2, #32
 8005352:	189b      	adds	r3, r3, r2
 8005354:	19db      	adds	r3, r3, r7
 8005356:	2201      	movs	r2, #1
 8005358:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	226a      	movs	r2, #106	@ 0x6a
 800535e:	2101      	movs	r1, #1
 8005360:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	2268      	movs	r2, #104	@ 0x68
 8005366:	2101      	movs	r1, #1
 8005368:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	2200      	movs	r2, #0
 800536e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005372:	2200      	movs	r2, #0
 8005374:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005376:	231a      	movs	r3, #26
 8005378:	2220      	movs	r2, #32
 800537a:	189b      	adds	r3, r3, r2
 800537c:	19db      	adds	r3, r3, r7
 800537e:	781b      	ldrb	r3, [r3, #0]
}
 8005380:	0018      	movs	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	b010      	add	sp, #64	@ 0x40
 8005386:	bdb0      	pop	{r4, r5, r7, pc}
 8005388:	08005be8 	.word	0x08005be8
 800538c:	00f42400 	.word	0x00f42400

08005390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539c:	2208      	movs	r2, #8
 800539e:	4013      	ands	r3, r2
 80053a0:	d00b      	beq.n	80053ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	4a4a      	ldr	r2, [pc, #296]	@ (80054d4 <UART_AdvFeatureConfig+0x144>)
 80053aa:	4013      	ands	r3, r2
 80053ac:	0019      	movs	r1, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053be:	2201      	movs	r2, #1
 80053c0:	4013      	ands	r3, r2
 80053c2:	d00b      	beq.n	80053dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4a43      	ldr	r2, [pc, #268]	@ (80054d8 <UART_AdvFeatureConfig+0x148>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	0019      	movs	r1, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e0:	2202      	movs	r2, #2
 80053e2:	4013      	ands	r3, r2
 80053e4:	d00b      	beq.n	80053fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	4a3b      	ldr	r2, [pc, #236]	@ (80054dc <UART_AdvFeatureConfig+0x14c>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	0019      	movs	r1, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005402:	2204      	movs	r2, #4
 8005404:	4013      	ands	r3, r2
 8005406:	d00b      	beq.n	8005420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	4a34      	ldr	r2, [pc, #208]	@ (80054e0 <UART_AdvFeatureConfig+0x150>)
 8005410:	4013      	ands	r3, r2
 8005412:	0019      	movs	r1, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005424:	2210      	movs	r2, #16
 8005426:	4013      	ands	r3, r2
 8005428:	d00b      	beq.n	8005442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	4a2c      	ldr	r2, [pc, #176]	@ (80054e4 <UART_AdvFeatureConfig+0x154>)
 8005432:	4013      	ands	r3, r2
 8005434:	0019      	movs	r1, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005446:	2220      	movs	r2, #32
 8005448:	4013      	ands	r3, r2
 800544a:	d00b      	beq.n	8005464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	4a25      	ldr	r2, [pc, #148]	@ (80054e8 <UART_AdvFeatureConfig+0x158>)
 8005454:	4013      	ands	r3, r2
 8005456:	0019      	movs	r1, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005468:	2240      	movs	r2, #64	@ 0x40
 800546a:	4013      	ands	r3, r2
 800546c:	d01d      	beq.n	80054aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4a1d      	ldr	r2, [pc, #116]	@ (80054ec <UART_AdvFeatureConfig+0x15c>)
 8005476:	4013      	ands	r3, r2
 8005478:	0019      	movs	r1, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800548a:	2380      	movs	r3, #128	@ 0x80
 800548c:	035b      	lsls	r3, r3, #13
 800548e:	429a      	cmp	r2, r3
 8005490:	d10b      	bne.n	80054aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	4a15      	ldr	r2, [pc, #84]	@ (80054f0 <UART_AdvFeatureConfig+0x160>)
 800549a:	4013      	ands	r3, r2
 800549c:	0019      	movs	r1, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ae:	2280      	movs	r2, #128	@ 0x80
 80054b0:	4013      	ands	r3, r2
 80054b2:	d00b      	beq.n	80054cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	4a0e      	ldr	r2, [pc, #56]	@ (80054f4 <UART_AdvFeatureConfig+0x164>)
 80054bc:	4013      	ands	r3, r2
 80054be:	0019      	movs	r1, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	605a      	str	r2, [r3, #4]
  }
}
 80054cc:	46c0      	nop			@ (mov r8, r8)
 80054ce:	46bd      	mov	sp, r7
 80054d0:	b002      	add	sp, #8
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	ffff7fff 	.word	0xffff7fff
 80054d8:	fffdffff 	.word	0xfffdffff
 80054dc:	fffeffff 	.word	0xfffeffff
 80054e0:	fffbffff 	.word	0xfffbffff
 80054e4:	ffffefff 	.word	0xffffefff
 80054e8:	ffffdfff 	.word	0xffffdfff
 80054ec:	ffefffff 	.word	0xffefffff
 80054f0:	ff9fffff 	.word	0xff9fffff
 80054f4:	fff7ffff 	.word	0xfff7ffff

080054f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b092      	sub	sp, #72	@ 0x48
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2290      	movs	r2, #144	@ 0x90
 8005504:	2100      	movs	r1, #0
 8005506:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005508:	f7fc fe36 	bl	8002178 <HAL_GetTick>
 800550c:	0003      	movs	r3, r0
 800550e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2208      	movs	r2, #8
 8005518:	4013      	ands	r3, r2
 800551a:	2b08      	cmp	r3, #8
 800551c:	d12d      	bne.n	800557a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800551e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005520:	2280      	movs	r2, #128	@ 0x80
 8005522:	0391      	lsls	r1, r2, #14
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	4a47      	ldr	r2, [pc, #284]	@ (8005644 <UART_CheckIdleState+0x14c>)
 8005528:	9200      	str	r2, [sp, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	f000 f88e 	bl	800564c <UART_WaitOnFlagUntilTimeout>
 8005530:	1e03      	subs	r3, r0, #0
 8005532:	d022      	beq.n	800557a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005534:	f3ef 8310 	mrs	r3, PRIMASK
 8005538:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800553a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800553c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800553e:	2301      	movs	r3, #1
 8005540:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005544:	f383 8810 	msr	PRIMASK, r3
}
 8005548:	46c0      	nop			@ (mov r8, r8)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2180      	movs	r1, #128	@ 0x80
 8005556:	438a      	bics	r2, r1
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005560:	f383 8810 	msr	PRIMASK, r3
}
 8005564:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2288      	movs	r2, #136	@ 0x88
 800556a:	2120      	movs	r1, #32
 800556c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2284      	movs	r2, #132	@ 0x84
 8005572:	2100      	movs	r1, #0
 8005574:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e060      	b.n	800563c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2204      	movs	r2, #4
 8005582:	4013      	ands	r3, r2
 8005584:	2b04      	cmp	r3, #4
 8005586:	d146      	bne.n	8005616 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800558a:	2280      	movs	r2, #128	@ 0x80
 800558c:	03d1      	lsls	r1, r2, #15
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	4a2c      	ldr	r2, [pc, #176]	@ (8005644 <UART_CheckIdleState+0x14c>)
 8005592:	9200      	str	r2, [sp, #0]
 8005594:	2200      	movs	r2, #0
 8005596:	f000 f859 	bl	800564c <UART_WaitOnFlagUntilTimeout>
 800559a:	1e03      	subs	r3, r0, #0
 800559c:	d03b      	beq.n	8005616 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800559e:	f3ef 8310 	mrs	r3, PRIMASK
 80055a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80055a4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a8:	2301      	movs	r3, #1
 80055aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f383 8810 	msr	PRIMASK, r3
}
 80055b2:	46c0      	nop			@ (mov r8, r8)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4922      	ldr	r1, [pc, #136]	@ (8005648 <UART_CheckIdleState+0x150>)
 80055c0:	400a      	ands	r2, r1
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f383 8810 	msr	PRIMASK, r3
}
 80055ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055d0:	f3ef 8310 	mrs	r3, PRIMASK
 80055d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80055d6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80055da:	2301      	movs	r3, #1
 80055dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	f383 8810 	msr	PRIMASK, r3
}
 80055e4:	46c0      	nop			@ (mov r8, r8)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2101      	movs	r1, #1
 80055f2:	438a      	bics	r2, r1
 80055f4:	609a      	str	r2, [r3, #8]
 80055f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	f383 8810 	msr	PRIMASK, r3
}
 8005600:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	228c      	movs	r2, #140	@ 0x8c
 8005606:	2120      	movs	r1, #32
 8005608:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2284      	movs	r2, #132	@ 0x84
 800560e:	2100      	movs	r1, #0
 8005610:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e012      	b.n	800563c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2288      	movs	r2, #136	@ 0x88
 800561a:	2120      	movs	r1, #32
 800561c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	228c      	movs	r2, #140	@ 0x8c
 8005622:	2120      	movs	r1, #32
 8005624:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2284      	movs	r2, #132	@ 0x84
 8005636:	2100      	movs	r1, #0
 8005638:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	0018      	movs	r0, r3
 800563e:	46bd      	mov	sp, r7
 8005640:	b010      	add	sp, #64	@ 0x40
 8005642:	bd80      	pop	{r7, pc}
 8005644:	01ffffff 	.word	0x01ffffff
 8005648:	fffffedf 	.word	0xfffffedf

0800564c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	1dfb      	adds	r3, r7, #7
 800565a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800565c:	e051      	b.n	8005702 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	3301      	adds	r3, #1
 8005662:	d04e      	beq.n	8005702 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005664:	f7fc fd88 	bl	8002178 <HAL_GetTick>
 8005668:	0002      	movs	r2, r0
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	429a      	cmp	r2, r3
 8005672:	d302      	bcc.n	800567a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e051      	b.n	8005722 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2204      	movs	r2, #4
 8005686:	4013      	ands	r3, r2
 8005688:	d03b      	beq.n	8005702 <UART_WaitOnFlagUntilTimeout+0xb6>
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b80      	cmp	r3, #128	@ 0x80
 800568e:	d038      	beq.n	8005702 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b40      	cmp	r3, #64	@ 0x40
 8005694:	d035      	beq.n	8005702 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	2208      	movs	r2, #8
 800569e:	4013      	ands	r3, r2
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d111      	bne.n	80056c8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2208      	movs	r2, #8
 80056aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	0018      	movs	r0, r3
 80056b0:	f000 f83c 	bl	800572c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2290      	movs	r2, #144	@ 0x90
 80056b8:	2108      	movs	r1, #8
 80056ba:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2284      	movs	r2, #132	@ 0x84
 80056c0:	2100      	movs	r1, #0
 80056c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e02c      	b.n	8005722 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69da      	ldr	r2, [r3, #28]
 80056ce:	2380      	movs	r3, #128	@ 0x80
 80056d0:	011b      	lsls	r3, r3, #4
 80056d2:	401a      	ands	r2, r3
 80056d4:	2380      	movs	r3, #128	@ 0x80
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	429a      	cmp	r2, r3
 80056da:	d112      	bne.n	8005702 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2280      	movs	r2, #128	@ 0x80
 80056e2:	0112      	lsls	r2, r2, #4
 80056e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	0018      	movs	r0, r3
 80056ea:	f000 f81f 	bl	800572c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2290      	movs	r2, #144	@ 0x90
 80056f2:	2120      	movs	r1, #32
 80056f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2284      	movs	r2, #132	@ 0x84
 80056fa:	2100      	movs	r1, #0
 80056fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e00f      	b.n	8005722 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	4013      	ands	r3, r2
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	425a      	negs	r2, r3
 8005712:	4153      	adcs	r3, r2
 8005714:	b2db      	uxtb	r3, r3
 8005716:	001a      	movs	r2, r3
 8005718:	1dfb      	adds	r3, r7, #7
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	429a      	cmp	r2, r3
 800571e:	d09e      	beq.n	800565e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	0018      	movs	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	b004      	add	sp, #16
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b08e      	sub	sp, #56	@ 0x38
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005734:	f3ef 8310 	mrs	r3, PRIMASK
 8005738:	617b      	str	r3, [r7, #20]
  return(result);
 800573a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800573c:	637b      	str	r3, [r7, #52]	@ 0x34
 800573e:	2301      	movs	r3, #1
 8005740:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	f383 8810 	msr	PRIMASK, r3
}
 8005748:	46c0      	nop			@ (mov r8, r8)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4926      	ldr	r1, [pc, #152]	@ (80057f0 <UART_EndRxTransfer+0xc4>)
 8005756:	400a      	ands	r2, r1
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	f383 8810 	msr	PRIMASK, r3
}
 8005764:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005766:	f3ef 8310 	mrs	r3, PRIMASK
 800576a:	623b      	str	r3, [r7, #32]
  return(result);
 800576c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800576e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005770:	2301      	movs	r3, #1
 8005772:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005776:	f383 8810 	msr	PRIMASK, r3
}
 800577a:	46c0      	nop			@ (mov r8, r8)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689a      	ldr	r2, [r3, #8]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	491b      	ldr	r1, [pc, #108]	@ (80057f4 <UART_EndRxTransfer+0xc8>)
 8005788:	400a      	ands	r2, r1
 800578a:	609a      	str	r2, [r3, #8]
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005792:	f383 8810 	msr	PRIMASK, r3
}
 8005796:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800579c:	2b01      	cmp	r3, #1
 800579e:	d118      	bne.n	80057d2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a0:	f3ef 8310 	mrs	r3, PRIMASK
 80057a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80057a6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057aa:	2301      	movs	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f383 8810 	msr	PRIMASK, r3
}
 80057b4:	46c0      	nop			@ (mov r8, r8)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2110      	movs	r1, #16
 80057c2:	438a      	bics	r2, r1
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f383 8810 	msr	PRIMASK, r3
}
 80057d0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	228c      	movs	r2, #140	@ 0x8c
 80057d6:	2120      	movs	r1, #32
 80057d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80057e6:	46c0      	nop			@ (mov r8, r8)
 80057e8:	46bd      	mov	sp, r7
 80057ea:	b00e      	add	sp, #56	@ 0x38
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	46c0      	nop			@ (mov r8, r8)
 80057f0:	fffffedf 	.word	0xfffffedf
 80057f4:	effffffe 	.word	0xeffffffe

080057f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2284      	movs	r2, #132	@ 0x84
 8005804:	5c9b      	ldrb	r3, [r3, r2]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d101      	bne.n	800580e <HAL_UARTEx_DisableFifoMode+0x16>
 800580a:	2302      	movs	r3, #2
 800580c:	e027      	b.n	800585e <HAL_UARTEx_DisableFifoMode+0x66>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2284      	movs	r2, #132	@ 0x84
 8005812:	2101      	movs	r1, #1
 8005814:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2288      	movs	r2, #136	@ 0x88
 800581a:	2124      	movs	r1, #36	@ 0x24
 800581c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2101      	movs	r1, #1
 8005832:	438a      	bics	r2, r1
 8005834:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4a0b      	ldr	r2, [pc, #44]	@ (8005868 <HAL_UARTEx_DisableFifoMode+0x70>)
 800583a:	4013      	ands	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2288      	movs	r2, #136	@ 0x88
 8005850:	2120      	movs	r1, #32
 8005852:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2284      	movs	r2, #132	@ 0x84
 8005858:	2100      	movs	r1, #0
 800585a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	0018      	movs	r0, r3
 8005860:	46bd      	mov	sp, r7
 8005862:	b004      	add	sp, #16
 8005864:	bd80      	pop	{r7, pc}
 8005866:	46c0      	nop			@ (mov r8, r8)
 8005868:	dfffffff 	.word	0xdfffffff

0800586c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2284      	movs	r2, #132	@ 0x84
 800587a:	5c9b      	ldrb	r3, [r3, r2]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005880:	2302      	movs	r3, #2
 8005882:	e02e      	b.n	80058e2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2284      	movs	r2, #132	@ 0x84
 8005888:	2101      	movs	r1, #1
 800588a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2288      	movs	r2, #136	@ 0x88
 8005890:	2124      	movs	r1, #36	@ 0x24
 8005892:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2101      	movs	r1, #1
 80058a8:	438a      	bics	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	08d9      	lsrs	r1, r3, #3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	0018      	movs	r0, r3
 80058c4:	f000 f854 	bl	8005970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2288      	movs	r2, #136	@ 0x88
 80058d4:	2120      	movs	r1, #32
 80058d6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2284      	movs	r2, #132	@ 0x84
 80058dc:	2100      	movs	r1, #0
 80058de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	0018      	movs	r0, r3
 80058e4:	46bd      	mov	sp, r7
 80058e6:	b004      	add	sp, #16
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2284      	movs	r2, #132	@ 0x84
 80058fa:	5c9b      	ldrb	r3, [r3, r2]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005900:	2302      	movs	r3, #2
 8005902:	e02f      	b.n	8005964 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2284      	movs	r2, #132	@ 0x84
 8005908:	2101      	movs	r1, #1
 800590a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2288      	movs	r2, #136	@ 0x88
 8005910:	2124      	movs	r1, #36	@ 0x24
 8005912:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2101      	movs	r1, #1
 8005928:	438a      	bics	r2, r1
 800592a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	4a0e      	ldr	r2, [pc, #56]	@ (800596c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005934:	4013      	ands	r3, r2
 8005936:	0019      	movs	r1, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	0018      	movs	r0, r3
 8005946:	f000 f813 	bl	8005970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2288      	movs	r2, #136	@ 0x88
 8005956:	2120      	movs	r1, #32
 8005958:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2284      	movs	r2, #132	@ 0x84
 800595e:	2100      	movs	r1, #0
 8005960:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	0018      	movs	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	b004      	add	sp, #16
 800596a:	bd80      	pop	{r7, pc}
 800596c:	f1ffffff 	.word	0xf1ffffff

08005970 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800597c:	2b00      	cmp	r3, #0
 800597e:	d108      	bne.n	8005992 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	226a      	movs	r2, #106	@ 0x6a
 8005984:	2101      	movs	r1, #1
 8005986:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2268      	movs	r2, #104	@ 0x68
 800598c:	2101      	movs	r1, #1
 800598e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005990:	e043      	b.n	8005a1a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005992:	260f      	movs	r6, #15
 8005994:	19bb      	adds	r3, r7, r6
 8005996:	2208      	movs	r2, #8
 8005998:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800599a:	200e      	movs	r0, #14
 800599c:	183b      	adds	r3, r7, r0
 800599e:	2208      	movs	r2, #8
 80059a0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	0e5b      	lsrs	r3, r3, #25
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	240d      	movs	r4, #13
 80059ae:	193b      	adds	r3, r7, r4
 80059b0:	2107      	movs	r1, #7
 80059b2:	400a      	ands	r2, r1
 80059b4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	0f5b      	lsrs	r3, r3, #29
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	250c      	movs	r5, #12
 80059c2:	197b      	adds	r3, r7, r5
 80059c4:	2107      	movs	r1, #7
 80059c6:	400a      	ands	r2, r1
 80059c8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059ca:	183b      	adds	r3, r7, r0
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	197a      	adds	r2, r7, r5
 80059d0:	7812      	ldrb	r2, [r2, #0]
 80059d2:	4914      	ldr	r1, [pc, #80]	@ (8005a24 <UARTEx_SetNbDataToProcess+0xb4>)
 80059d4:	5c8a      	ldrb	r2, [r1, r2]
 80059d6:	435a      	muls	r2, r3
 80059d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80059da:	197b      	adds	r3, r7, r5
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	4a12      	ldr	r2, [pc, #72]	@ (8005a28 <UARTEx_SetNbDataToProcess+0xb8>)
 80059e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059e2:	0019      	movs	r1, r3
 80059e4:	f7fa fc18 	bl	8000218 <__divsi3>
 80059e8:	0003      	movs	r3, r0
 80059ea:	b299      	uxth	r1, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	226a      	movs	r2, #106	@ 0x6a
 80059f0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059f2:	19bb      	adds	r3, r7, r6
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	193a      	adds	r2, r7, r4
 80059f8:	7812      	ldrb	r2, [r2, #0]
 80059fa:	490a      	ldr	r1, [pc, #40]	@ (8005a24 <UARTEx_SetNbDataToProcess+0xb4>)
 80059fc:	5c8a      	ldrb	r2, [r1, r2]
 80059fe:	435a      	muls	r2, r3
 8005a00:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a02:	193b      	adds	r3, r7, r4
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	4a08      	ldr	r2, [pc, #32]	@ (8005a28 <UARTEx_SetNbDataToProcess+0xb8>)
 8005a08:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	f7fa fc04 	bl	8000218 <__divsi3>
 8005a10:	0003      	movs	r3, r0
 8005a12:	b299      	uxth	r1, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2268      	movs	r2, #104	@ 0x68
 8005a18:	5299      	strh	r1, [r3, r2]
}
 8005a1a:	46c0      	nop			@ (mov r8, r8)
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	b005      	add	sp, #20
 8005a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a22:	46c0      	nop			@ (mov r8, r8)
 8005a24:	08005c00 	.word	0x08005c00
 8005a28:	08005c08 	.word	0x08005c08

08005a2c <memset>:
 8005a2c:	0003      	movs	r3, r0
 8005a2e:	1882      	adds	r2, r0, r2
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d100      	bne.n	8005a36 <memset+0xa>
 8005a34:	4770      	bx	lr
 8005a36:	7019      	strb	r1, [r3, #0]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	e7f9      	b.n	8005a30 <memset+0x4>

08005a3c <__libc_init_array>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	2600      	movs	r6, #0
 8005a40:	4c0c      	ldr	r4, [pc, #48]	@ (8005a74 <__libc_init_array+0x38>)
 8005a42:	4d0d      	ldr	r5, [pc, #52]	@ (8005a78 <__libc_init_array+0x3c>)
 8005a44:	1b64      	subs	r4, r4, r5
 8005a46:	10a4      	asrs	r4, r4, #2
 8005a48:	42a6      	cmp	r6, r4
 8005a4a:	d109      	bne.n	8005a60 <__libc_init_array+0x24>
 8005a4c:	2600      	movs	r6, #0
 8005a4e:	f000 f819 	bl	8005a84 <_init>
 8005a52:	4c0a      	ldr	r4, [pc, #40]	@ (8005a7c <__libc_init_array+0x40>)
 8005a54:	4d0a      	ldr	r5, [pc, #40]	@ (8005a80 <__libc_init_array+0x44>)
 8005a56:	1b64      	subs	r4, r4, r5
 8005a58:	10a4      	asrs	r4, r4, #2
 8005a5a:	42a6      	cmp	r6, r4
 8005a5c:	d105      	bne.n	8005a6a <__libc_init_array+0x2e>
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	00b3      	lsls	r3, r6, #2
 8005a62:	58eb      	ldr	r3, [r5, r3]
 8005a64:	4798      	blx	r3
 8005a66:	3601      	adds	r6, #1
 8005a68:	e7ee      	b.n	8005a48 <__libc_init_array+0xc>
 8005a6a:	00b3      	lsls	r3, r6, #2
 8005a6c:	58eb      	ldr	r3, [r5, r3]
 8005a6e:	4798      	blx	r3
 8005a70:	3601      	adds	r6, #1
 8005a72:	e7f2      	b.n	8005a5a <__libc_init_array+0x1e>
 8005a74:	08005c18 	.word	0x08005c18
 8005a78:	08005c18 	.word	0x08005c18
 8005a7c:	08005c1c 	.word	0x08005c1c
 8005a80:	08005c18 	.word	0x08005c18

08005a84 <_init>:
 8005a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a86:	46c0      	nop			@ (mov r8, r8)
 8005a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8a:	bc08      	pop	{r3}
 8005a8c:	469e      	mov	lr, r3
 8005a8e:	4770      	bx	lr

08005a90 <_fini>:
 8005a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a92:	46c0      	nop			@ (mov r8, r8)
 8005a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a96:	bc08      	pop	{r3}
 8005a98:	469e      	mov	lr, r3
 8005a9a:	4770      	bx	lr
