
WEEK02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003adc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003b98  08003b98  00004b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c74  08003c74  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c74  08003c74  00004c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c7c  08003c7c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c7c  08003c7c  00004c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c80  08003c80  00004c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c84  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08003c90  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003c90  0000510c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7eb  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002014  00000000  00000000  0001481f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00016838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad9  00000000  00000000  000175f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ee0  00000000  00000000  000180d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b0a  00000000  00000000  0002ffb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d752  00000000  00000000  00040abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de20d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000320c  00000000  00000000  000de250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e145c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003b80 	.word	0x08003b80

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003b80 	.word	0x08003b80

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 faa4 	bl	8000b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f810 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f924 	bl	8000874 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f8d4 	bl	80007d8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000630:	f000 f852 	bl	80006d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000634:	4b03      	ldr	r3, [pc, #12]	@ (8000644 <main+0x28>)
 8000636:	2100      	movs	r1, #0
 8000638:	0018      	movs	r0, r3
 800063a:	f001 fcd3 	bl	8001fe4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063e:	46c0      	nop			@ (mov r8, r8)
 8000640:	e7fd      	b.n	800063e <main+0x22>
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	20000028 	.word	0x20000028

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b093      	sub	sp, #76	@ 0x4c
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	2410      	movs	r4, #16
 8000650:	193b      	adds	r3, r7, r4
 8000652:	0018      	movs	r0, r3
 8000654:	2338      	movs	r3, #56	@ 0x38
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f003 fa65 	bl	8003b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065e:	003b      	movs	r3, r7
 8000660:	0018      	movs	r0, r3
 8000662:	2310      	movs	r3, #16
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f003 fa5e 	bl	8003b28 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2380      	movs	r3, #128	@ 0x80
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	0018      	movs	r0, r3
 8000672:	f000 fd37 	bl	80010e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2202      	movs	r2, #2
 800067a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2280      	movs	r2, #128	@ 0x80
 8000680:	0052      	lsls	r2, r2, #1
 8000682:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000684:	193b      	adds	r3, r7, r4
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	2240      	movs	r2, #64	@ 0x40
 800068e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	193b      	adds	r3, r7, r4
 8000698:	0018      	movs	r0, r3
 800069a:	f000 fd6f 	bl	800117c <HAL_RCC_OscConfig>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006a2:	f000 f937 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	003b      	movs	r3, r7
 80006a8:	2207      	movs	r2, #7
 80006aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ac:	003b      	movs	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	003b      	movs	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	003b      	movs	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006be:	003b      	movs	r3, r7
 80006c0:	2100      	movs	r1, #0
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 f874 	bl	80017b0 <HAL_RCC_ClockConfig>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006cc:	f000 f922 	bl	8000914 <Error_Handler>
  }
}
 80006d0:	46c0      	nop			@ (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b013      	add	sp, #76	@ 0x4c
 80006d6:	bd90      	pop	{r4, r7, pc}

080006d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08e      	sub	sp, #56	@ 0x38
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006de:	2328      	movs	r3, #40	@ 0x28
 80006e0:	18fb      	adds	r3, r7, r3
 80006e2:	0018      	movs	r0, r3
 80006e4:	2310      	movs	r3, #16
 80006e6:	001a      	movs	r2, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	f003 fa1d 	bl	8003b28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ee:	231c      	movs	r3, #28
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	0018      	movs	r0, r3
 80006f4:	230c      	movs	r3, #12
 80006f6:	001a      	movs	r2, r3
 80006f8:	2100      	movs	r1, #0
 80006fa:	f003 fa15 	bl	8003b28 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fe:	003b      	movs	r3, r7
 8000700:	0018      	movs	r0, r3
 8000702:	231c      	movs	r3, #28
 8000704:	001a      	movs	r2, r3
 8000706:	2100      	movs	r1, #0
 8000708:	f003 fa0e 	bl	8003b28 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800070c:	4b2f      	ldr	r3, [pc, #188]	@ (80007cc <MX_TIM3_Init+0xf4>)
 800070e:	4a30      	ldr	r2, [pc, #192]	@ (80007d0 <MX_TIM3_Init+0xf8>)
 8000710:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8000712:	4b2e      	ldr	r3, [pc, #184]	@ (80007cc <MX_TIM3_Init+0xf4>)
 8000714:	221f      	movs	r2, #31
 8000716:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000718:	4b2c      	ldr	r3, [pc, #176]	@ (80007cc <MX_TIM3_Init+0xf4>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1592-1;
 800071e:	4b2b      	ldr	r3, [pc, #172]	@ (80007cc <MX_TIM3_Init+0xf4>)
 8000720:	4a2c      	ldr	r2, [pc, #176]	@ (80007d4 <MX_TIM3_Init+0xfc>)
 8000722:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000724:	4b29      	ldr	r3, [pc, #164]	@ (80007cc <MX_TIM3_Init+0xf4>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072a:	4b28      	ldr	r3, [pc, #160]	@ (80007cc <MX_TIM3_Init+0xf4>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000730:	4b26      	ldr	r3, [pc, #152]	@ (80007cc <MX_TIM3_Init+0xf4>)
 8000732:	0018      	movs	r0, r3
 8000734:	f001 fb9e 	bl	8001e74 <HAL_TIM_Base_Init>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800073c:	f000 f8ea 	bl	8000914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000740:	2128      	movs	r1, #40	@ 0x28
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2280      	movs	r2, #128	@ 0x80
 8000746:	0152      	lsls	r2, r2, #5
 8000748:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800074a:	187a      	adds	r2, r7, r1
 800074c:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <MX_TIM3_Init+0xf4>)
 800074e:	0011      	movs	r1, r2
 8000750:	0018      	movs	r0, r3
 8000752:	f001 fe31 	bl	80023b8 <HAL_TIM_ConfigClockSource>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800075a:	f000 f8db 	bl	8000914 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800075e:	4b1b      	ldr	r3, [pc, #108]	@ (80007cc <MX_TIM3_Init+0xf4>)
 8000760:	0018      	movs	r0, r3
 8000762:	f001 fbdf 	bl	8001f24 <HAL_TIM_PWM_Init>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800076a:	f000 f8d3 	bl	8000914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076e:	211c      	movs	r1, #28
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800077c:	187a      	adds	r2, r7, r1
 800077e:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <MX_TIM3_Init+0xf4>)
 8000780:	0011      	movs	r1, r2
 8000782:	0018      	movs	r0, r3
 8000784:	f002 fb00 	bl	8002d88 <HAL_TIMEx_MasterConfigSynchronization>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800078c:	f000 f8c2 	bl	8000914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000790:	003b      	movs	r3, r7
 8000792:	2260      	movs	r2, #96	@ 0x60
 8000794:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 223;
 8000796:	003b      	movs	r3, r7
 8000798:	22df      	movs	r2, #223	@ 0xdf
 800079a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800079c:	003b      	movs	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a2:	003b      	movs	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a8:	0039      	movs	r1, r7
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <MX_TIM3_Init+0xf4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 fd02 	bl	80021b8 <HAL_TIM_PWM_ConfigChannel>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80007b8:	f000 f8ac 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007bc:	4b03      	ldr	r3, [pc, #12]	@ (80007cc <MX_TIM3_Init+0xf4>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 f8f0 	bl	80009a4 <HAL_TIM_MspPostInit>

}
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b00e      	add	sp, #56	@ 0x38
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000028 	.word	0x20000028
 80007d0:	40000400 	.word	0x40000400
 80007d4:	00000637 	.word	0x00000637

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b23      	ldr	r3, [pc, #140]	@ (800086c <MX_USART2_UART_Init+0x94>)
 80007de:	4a24      	ldr	r2, [pc, #144]	@ (8000870 <MX_USART2_UART_Init+0x98>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e2:	4b22      	ldr	r3, [pc, #136]	@ (800086c <MX_USART2_UART_Init+0x94>)
 80007e4:	22e1      	movs	r2, #225	@ 0xe1
 80007e6:	0252      	lsls	r2, r2, #9
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b20      	ldr	r3, [pc, #128]	@ (800086c <MX_USART2_UART_Init+0x94>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b1e      	ldr	r3, [pc, #120]	@ (800086c <MX_USART2_UART_Init+0x94>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <MX_USART2_UART_Init+0x94>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <MX_USART2_UART_Init+0x94>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_USART2_UART_Init+0x94>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_USART2_UART_Init+0x94>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <MX_USART2_UART_Init+0x94>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <MX_USART2_UART_Init+0x94>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_USART2_UART_Init+0x94>)
 800081c:	2200      	movs	r2, #0
 800081e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_USART2_UART_Init+0x94>)
 8000822:	0018      	movs	r0, r3
 8000824:	f002 fb1e 	bl	8002e64 <HAL_UART_Init>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d001      	beq.n	8000830 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800082c:	f000 f872 	bl	8000914 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000830:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_USART2_UART_Init+0x94>)
 8000832:	2100      	movs	r1, #0
 8000834:	0018      	movs	r0, r3
 8000836:	f003 f897 	bl	8003968 <HAL_UARTEx_SetTxFifoThreshold>
 800083a:	1e03      	subs	r3, r0, #0
 800083c:	d001      	beq.n	8000842 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800083e:	f000 f869 	bl	8000914 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000842:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <MX_USART2_UART_Init+0x94>)
 8000844:	2100      	movs	r1, #0
 8000846:	0018      	movs	r0, r3
 8000848:	f003 f8ce 	bl	80039e8 <HAL_UARTEx_SetRxFifoThreshold>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000850:	f000 f860 	bl	8000914 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000854:	4b05      	ldr	r3, [pc, #20]	@ (800086c <MX_USART2_UART_Init+0x94>)
 8000856:	0018      	movs	r0, r3
 8000858:	f003 f84c 	bl	80038f4 <HAL_UARTEx_DisableFifoMode>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000860:	f000 f858 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	20000074 	.word	0x20000074
 8000870:	40004400 	.word	0x40004400

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b089      	sub	sp, #36	@ 0x24
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	240c      	movs	r4, #12
 800087c:	193b      	adds	r3, r7, r4
 800087e:	0018      	movs	r0, r3
 8000880:	2314      	movs	r3, #20
 8000882:	001a      	movs	r2, r3
 8000884:	2100      	movs	r1, #0
 8000886:	f003 f94f 	bl	8003b28 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	4b21      	ldr	r3, [pc, #132]	@ (8000910 <MX_GPIO_Init+0x9c>)
 800088c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800088e:	4b20      	ldr	r3, [pc, #128]	@ (8000910 <MX_GPIO_Init+0x9c>)
 8000890:	2104      	movs	r1, #4
 8000892:	430a      	orrs	r2, r1
 8000894:	635a      	str	r2, [r3, #52]	@ 0x34
 8000896:	4b1e      	ldr	r3, [pc, #120]	@ (8000910 <MX_GPIO_Init+0x9c>)
 8000898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800089a:	2204      	movs	r2, #4
 800089c:	4013      	ands	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <MX_GPIO_Init+0x9c>)
 80008a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <MX_GPIO_Init+0x9c>)
 80008a8:	2120      	movs	r1, #32
 80008aa:	430a      	orrs	r2, r1
 80008ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80008ae:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <MX_GPIO_Init+0x9c>)
 80008b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008b2:	2220      	movs	r2, #32
 80008b4:	4013      	ands	r3, r2
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <MX_GPIO_Init+0x9c>)
 80008bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008be:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <MX_GPIO_Init+0x9c>)
 80008c0:	2101      	movs	r1, #1
 80008c2:	430a      	orrs	r2, r1
 80008c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008c6:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <MX_GPIO_Init+0x9c>)
 80008c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ca:	2201      	movs	r2, #1
 80008cc:	4013      	ands	r3, r2
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008d2:	23a0      	movs	r3, #160	@ 0xa0
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	2200      	movs	r2, #0
 80008d8:	2120      	movs	r1, #32
 80008da:	0018      	movs	r0, r3
 80008dc:	f000 fbe4 	bl	80010a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008e0:	0021      	movs	r1, r4
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2220      	movs	r2, #32
 80008e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2201      	movs	r2, #1
 80008ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2202      	movs	r2, #2
 80008f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80008fa:	187a      	adds	r2, r7, r1
 80008fc:	23a0      	movs	r3, #160	@ 0xa0
 80008fe:	05db      	lsls	r3, r3, #23
 8000900:	0011      	movs	r1, r2
 8000902:	0018      	movs	r0, r3
 8000904:	f000 fa6c 	bl	8000de0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000908:	46c0      	nop			@ (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	b009      	add	sp, #36	@ 0x24
 800090e:	bd90      	pop	{r4, r7, pc}
 8000910:	40021000 	.word	0x40021000

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	46c0      	nop			@ (mov r8, r8)
 800091e:	e7fd      	b.n	800091c <Error_Handler+0x8>

08000920 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <HAL_MspInit+0x44>)
 8000928:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <HAL_MspInit+0x44>)
 800092c:	2101      	movs	r1, #1
 800092e:	430a      	orrs	r2, r1
 8000930:	641a      	str	r2, [r3, #64]	@ 0x40
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <HAL_MspInit+0x44>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	2201      	movs	r2, #1
 8000938:	4013      	ands	r3, r2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <HAL_MspInit+0x44>)
 8000940:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000942:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <HAL_MspInit+0x44>)
 8000944:	2180      	movs	r1, #128	@ 0x80
 8000946:	0549      	lsls	r1, r1, #21
 8000948:	430a      	orrs	r2, r1
 800094a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800094c:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <HAL_MspInit+0x44>)
 800094e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000950:	2380      	movs	r3, #128	@ 0x80
 8000952:	055b      	lsls	r3, r3, #21
 8000954:	4013      	ands	r3, r2
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b002      	add	sp, #8
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a09      	ldr	r2, [pc, #36]	@ (800099c <HAL_TIM_Base_MspInit+0x34>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d10b      	bne.n	8000992 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <HAL_TIM_Base_MspInit+0x38>)
 800097c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <HAL_TIM_Base_MspInit+0x38>)
 8000980:	2102      	movs	r1, #2
 8000982:	430a      	orrs	r2, r1
 8000984:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_TIM_Base_MspInit+0x38>)
 8000988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800098a:	2202      	movs	r2, #2
 800098c:	4013      	ands	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b004      	add	sp, #16
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	40000400 	.word	0x40000400
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b089      	sub	sp, #36	@ 0x24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	240c      	movs	r4, #12
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	0018      	movs	r0, r3
 80009b2:	2314      	movs	r3, #20
 80009b4:	001a      	movs	r2, r3
 80009b6:	2100      	movs	r1, #0
 80009b8:	f003 f8b6 	bl	8003b28 <memset>
  if(htim->Instance==TIM3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a14      	ldr	r2, [pc, #80]	@ (8000a14 <HAL_TIM_MspPostInit+0x70>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d122      	bne.n	8000a0c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <HAL_TIM_MspPostInit+0x74>)
 80009c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ca:	4b13      	ldr	r3, [pc, #76]	@ (8000a18 <HAL_TIM_MspPostInit+0x74>)
 80009cc:	2101      	movs	r1, #1
 80009ce:	430a      	orrs	r2, r1
 80009d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <HAL_TIM_MspPostInit+0x74>)
 80009d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009d6:	2201      	movs	r2, #1
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009de:	0021      	movs	r1, r4
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2240      	movs	r2, #64	@ 0x40
 80009e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2202      	movs	r2, #2
 80009ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2201      	movs	r2, #1
 80009fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	187a      	adds	r2, r7, r1
 8000a00:	23a0      	movs	r3, #160	@ 0xa0
 8000a02:	05db      	lsls	r3, r3, #23
 8000a04:	0011      	movs	r1, r2
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 f9ea 	bl	8000de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a0c:	46c0      	nop			@ (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b009      	add	sp, #36	@ 0x24
 8000a12:	bd90      	pop	{r4, r7, pc}
 8000a14:	40000400 	.word	0x40000400
 8000a18:	40021000 	.word	0x40021000

08000a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b097      	sub	sp, #92	@ 0x5c
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	2344      	movs	r3, #68	@ 0x44
 8000a26:	18fb      	adds	r3, r7, r3
 8000a28:	0018      	movs	r0, r3
 8000a2a:	2314      	movs	r3, #20
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f003 f87a 	bl	8003b28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a34:	2410      	movs	r4, #16
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	0018      	movs	r0, r3
 8000a3a:	2334      	movs	r3, #52	@ 0x34
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f003 f872 	bl	8003b28 <memset>
  if(huart->Instance==USART2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a22      	ldr	r2, [pc, #136]	@ (8000ad4 <HAL_UART_MspInit+0xb8>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d13e      	bne.n	8000acc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2202      	movs	r2, #2
 8000a52:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 f851 	bl	8001b04 <HAL_RCCEx_PeriphCLKConfig>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a66:	f7ff ff55 	bl	8000914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <HAL_UART_MspInit+0xbc>)
 8000a6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <HAL_UART_MspInit+0xbc>)
 8000a70:	2180      	movs	r1, #128	@ 0x80
 8000a72:	0289      	lsls	r1, r1, #10
 8000a74:	430a      	orrs	r2, r1
 8000a76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a78:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <HAL_UART_MspInit+0xbc>)
 8000a7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a7c:	2380      	movs	r3, #128	@ 0x80
 8000a7e:	029b      	lsls	r3, r3, #10
 8000a80:	4013      	ands	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <HAL_UART_MspInit+0xbc>)
 8000a88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <HAL_UART_MspInit+0xbc>)
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <HAL_UART_MspInit+0xbc>)
 8000a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a96:	2201      	movs	r2, #1
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000a9e:	2144      	movs	r1, #68	@ 0x44
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2201      	movs	r2, #1
 8000ab0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2201      	movs	r2, #1
 8000abc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	187a      	adds	r2, r7, r1
 8000ac0:	23a0      	movs	r3, #160	@ 0xa0
 8000ac2:	05db      	lsls	r3, r3, #23
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 f98a 	bl	8000de0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b017      	add	sp, #92	@ 0x5c
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	40004400 	.word	0x40004400
 8000ad8:	40021000 	.word	0x40021000

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	e7fd      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	e7fd      	b.n	8000ae8 <HardFault_Handler+0x4>

08000aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000af0:	46c0      	nop			@ (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f89c 	bl	8000c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	46c0      	nop			@ (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b18:	480d      	ldr	r0, [pc, #52]	@ (8000b50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b1c:	f7ff fff7 	bl	8000b0e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b20:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b22:	490d      	ldr	r1, [pc, #52]	@ (8000b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b24:	4a0d      	ldr	r2, [pc, #52]	@ (8000b5c <LoopForever+0xe>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b38:	4c0a      	ldr	r4, [pc, #40]	@ (8000b64 <LoopForever+0x16>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b46:	f002 fff7 	bl	8003b38 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b4a:	f7ff fd67 	bl	800061c <main>

08000b4e <LoopForever>:

LoopForever:
  b LoopForever
 8000b4e:	e7fe      	b.n	8000b4e <LoopForever>
  ldr   r0, =_estack
 8000b50:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b5c:	08003c84 	.word	0x08003c84
  ldr r2, =_sbss
 8000b60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b64:	2000010c 	.word	0x2000010c

08000b68 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC1_COMP_IRQHandler>
	...

08000b6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <HAL_Init+0x3c>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <HAL_Init+0x3c>)
 8000b7e:	2180      	movs	r1, #128	@ 0x80
 8000b80:	0049      	lsls	r1, r1, #1
 8000b82:	430a      	orrs	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b86:	2000      	movs	r0, #0
 8000b88:	f000 f810 	bl	8000bac <HAL_InitTick>
 8000b8c:	1e03      	subs	r3, r0, #0
 8000b8e:	d003      	beq.n	8000b98 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	e001      	b.n	8000b9c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b98:	f7ff fec2 	bl	8000920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
}
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b002      	add	sp, #8
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40022000 	.word	0x40022000

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b590      	push	{r4, r7, lr}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <HAL_InitTick+0x88>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d02b      	beq.n	8000c1c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <HAL_InitTick+0x8c>)
 8000bc6:	681c      	ldr	r4, [r3, #0]
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <HAL_InitTick+0x88>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	0019      	movs	r1, r3
 8000bce:	23fa      	movs	r3, #250	@ 0xfa
 8000bd0:	0098      	lsls	r0, r3, #2
 8000bd2:	f7ff fa97 	bl	8000104 <__udivsi3>
 8000bd6:	0003      	movs	r3, r0
 8000bd8:	0019      	movs	r1, r3
 8000bda:	0020      	movs	r0, r4
 8000bdc:	f7ff fa92 	bl	8000104 <__udivsi3>
 8000be0:	0003      	movs	r3, r0
 8000be2:	0018      	movs	r0, r3
 8000be4:	f000 f8ef 	bl	8000dc6 <HAL_SYSTICK_Config>
 8000be8:	1e03      	subs	r3, r0, #0
 8000bea:	d112      	bne.n	8000c12 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d80a      	bhi.n	8000c08 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	425b      	negs	r3, r3
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 f8ce 	bl	8000d9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <HAL_InitTick+0x90>)
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	e00d      	b.n	8000c24 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c08:	230f      	movs	r3, #15
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	701a      	strb	r2, [r3, #0]
 8000c10:	e008      	b.n	8000c24 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c12:	230f      	movs	r3, #15
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	e003      	b.n	8000c24 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c24:	230f      	movs	r3, #15
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	781b      	ldrb	r3, [r3, #0]
}
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b005      	add	sp, #20
 8000c30:	bd90      	pop	{r4, r7, pc}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	20000008 	.word	0x20000008
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	20000004 	.word	0x20000004

08000c40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c44:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <HAL_IncTick+0x1c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	001a      	movs	r2, r3
 8000c4a:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <HAL_IncTick+0x20>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	18d2      	adds	r2, r2, r3
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <HAL_IncTick+0x20>)
 8000c52:	601a      	str	r2, [r3, #0]
}
 8000c54:	46c0      	nop			@ (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000108 	.word	0x20000108

08000c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  return uwTick;
 8000c68:	4b02      	ldr	r3, [pc, #8]	@ (8000c74 <HAL_GetTick+0x10>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
}
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	20000108 	.word	0x20000108

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	0002      	movs	r2, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c8c:	d828      	bhi.n	8000ce0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c8e:	4a2f      	ldr	r2, [pc, #188]	@ (8000d4c <__NVIC_SetPriority+0xd4>)
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b25b      	sxtb	r3, r3
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	33c0      	adds	r3, #192	@ 0xc0
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	589b      	ldr	r3, [r3, r2]
 8000c9e:	1dfa      	adds	r2, r7, #7
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	400a      	ands	r2, r1
 8000ca8:	00d2      	lsls	r2, r2, #3
 8000caa:	21ff      	movs	r1, #255	@ 0xff
 8000cac:	4091      	lsls	r1, r2
 8000cae:	000a      	movs	r2, r1
 8000cb0:	43d2      	mvns	r2, r2
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	019b      	lsls	r3, r3, #6
 8000cba:	22ff      	movs	r2, #255	@ 0xff
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	4003      	ands	r3, r0
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ccc:	481f      	ldr	r0, [pc, #124]	@ (8000d4c <__NVIC_SetPriority+0xd4>)
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b25b      	sxtb	r3, r3
 8000cd4:	089b      	lsrs	r3, r3, #2
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	33c0      	adds	r3, #192	@ 0xc0
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cde:	e031      	b.n	8000d44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d50 <__NVIC_SetPriority+0xd8>)
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	0019      	movs	r1, r3
 8000ce8:	230f      	movs	r3, #15
 8000cea:	400b      	ands	r3, r1
 8000cec:	3b08      	subs	r3, #8
 8000cee:	089b      	lsrs	r3, r3, #2
 8000cf0:	3306      	adds	r3, #6
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	18d3      	adds	r3, r2, r3
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	1dfa      	adds	r2, r7, #7
 8000cfc:	7812      	ldrb	r2, [r2, #0]
 8000cfe:	0011      	movs	r1, r2
 8000d00:	2203      	movs	r2, #3
 8000d02:	400a      	ands	r2, r1
 8000d04:	00d2      	lsls	r2, r2, #3
 8000d06:	21ff      	movs	r1, #255	@ 0xff
 8000d08:	4091      	lsls	r1, r2
 8000d0a:	000a      	movs	r2, r1
 8000d0c:	43d2      	mvns	r2, r2
 8000d0e:	401a      	ands	r2, r3
 8000d10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	019b      	lsls	r3, r3, #6
 8000d16:	22ff      	movs	r2, #255	@ 0xff
 8000d18:	401a      	ands	r2, r3
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	0018      	movs	r0, r3
 8000d20:	2303      	movs	r3, #3
 8000d22:	4003      	ands	r3, r0
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d28:	4809      	ldr	r0, [pc, #36]	@ (8000d50 <__NVIC_SetPriority+0xd8>)
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	001c      	movs	r4, r3
 8000d30:	230f      	movs	r3, #15
 8000d32:	4023      	ands	r3, r4
 8000d34:	3b08      	subs	r3, #8
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	3306      	adds	r3, #6
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	18c3      	adds	r3, r0, r3
 8000d40:	3304      	adds	r3, #4
 8000d42:	601a      	str	r2, [r3, #0]
}
 8000d44:	46c0      	nop			@ (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b003      	add	sp, #12
 8000d4a:	bd90      	pop	{r4, r7, pc}
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	1e5a      	subs	r2, r3, #1
 8000d60:	2380      	movs	r3, #128	@ 0x80
 8000d62:	045b      	lsls	r3, r3, #17
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d301      	bcc.n	8000d6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e010      	b.n	8000d8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <SysTick_Config+0x44>)
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	3a01      	subs	r2, #1
 8000d72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d74:	2301      	movs	r3, #1
 8000d76:	425b      	negs	r3, r3
 8000d78:	2103      	movs	r1, #3
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff ff7c 	bl	8000c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d80:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <SysTick_Config+0x44>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d86:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <SysTick_Config+0x44>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	0018      	movs	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	e000e010 	.word	0xe000e010

08000d9c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	210f      	movs	r1, #15
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	1c02      	adds	r2, r0, #0
 8000dac:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	0011      	movs	r1, r2
 8000db8:	0018      	movs	r0, r3
 8000dba:	f7ff ff5d 	bl	8000c78 <__NVIC_SetPriority>
}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b004      	add	sp, #16
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff ffbf 	bl	8000d54 <SysTick_Config>
 8000dd6:	0003      	movs	r3, r0
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dee:	e147      	b.n	8001080 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2101      	movs	r1, #1
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	000a      	movs	r2, r1
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d100      	bne.n	8000e08 <HAL_GPIO_Init+0x28>
 8000e06:	e138      	b.n	800107a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d005      	beq.n	8000e20 <HAL_GPIO_Init+0x40>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2203      	movs	r2, #3
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d130      	bne.n	8000e82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	0013      	movs	r3, r2
 8000e30:	43da      	mvns	r2, r3
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	409a      	lsls	r2, r3
 8000e42:	0013      	movs	r3, r2
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e56:	2201      	movs	r2, #1
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	0013      	movs	r3, r2
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	091b      	lsrs	r3, r3, #4
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
 8000e74:	0013      	movs	r3, r2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2203      	movs	r2, #3
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d017      	beq.n	8000ebe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d123      	bne.n	8000f12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	0092      	lsls	r2, r2, #2
 8000ed4:	58d3      	ldr	r3, [r2, r3]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	2207      	movs	r2, #7
 8000edc:	4013      	ands	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	691a      	ldr	r2, [r3, #16]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	2107      	movs	r1, #7
 8000ef6:	400b      	ands	r3, r1
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	6939      	ldr	r1, [r7, #16]
 8000f10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	43da      	mvns	r2, r3
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2203      	movs	r2, #3
 8000f30:	401a      	ands	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	23c0      	movs	r3, #192	@ 0xc0
 8000f4c:	029b      	lsls	r3, r3, #10
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d100      	bne.n	8000f54 <HAL_GPIO_Init+0x174>
 8000f52:	e092      	b.n	800107a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f54:	4a50      	ldr	r2, [pc, #320]	@ (8001098 <HAL_GPIO_Init+0x2b8>)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	3318      	adds	r3, #24
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	589b      	ldr	r3, [r3, r2]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	2203      	movs	r2, #3
 8000f66:	4013      	ands	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	409a      	lsls	r2, r3
 8000f6e:	0013      	movs	r3, r2
 8000f70:	43da      	mvns	r2, r3
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	23a0      	movs	r3, #160	@ 0xa0
 8000f7c:	05db      	lsls	r3, r3, #23
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d013      	beq.n	8000faa <HAL_GPIO_Init+0x1ca>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a45      	ldr	r2, [pc, #276]	@ (800109c <HAL_GPIO_Init+0x2bc>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00d      	beq.n	8000fa6 <HAL_GPIO_Init+0x1c6>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a44      	ldr	r2, [pc, #272]	@ (80010a0 <HAL_GPIO_Init+0x2c0>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0x1c2>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a43      	ldr	r2, [pc, #268]	@ (80010a4 <HAL_GPIO_Init+0x2c4>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_GPIO_Init+0x1be>
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e006      	b.n	8000fac <HAL_GPIO_Init+0x1cc>
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	e004      	b.n	8000fac <HAL_GPIO_Init+0x1cc>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	e002      	b.n	8000fac <HAL_GPIO_Init+0x1cc>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <HAL_GPIO_Init+0x1cc>
 8000faa:	2300      	movs	r3, #0
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	2103      	movs	r1, #3
 8000fb0:	400a      	ands	r2, r1
 8000fb2:	00d2      	lsls	r2, r2, #3
 8000fb4:	4093      	lsls	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000fbc:	4936      	ldr	r1, [pc, #216]	@ (8001098 <HAL_GPIO_Init+0x2b8>)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	089b      	lsrs	r3, r3, #2
 8000fc2:	3318      	adds	r3, #24
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fca:	4b33      	ldr	r3, [pc, #204]	@ (8001098 <HAL_GPIO_Init+0x2b8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	2380      	movs	r3, #128	@ 0x80
 8000fe0:	035b      	lsls	r3, r3, #13
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fee:	4b2a      	ldr	r3, [pc, #168]	@ (8001098 <HAL_GPIO_Init+0x2b8>)
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ff4:	4b28      	ldr	r3, [pc, #160]	@ (8001098 <HAL_GPIO_Init+0x2b8>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	43da      	mvns	r2, r3
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	2380      	movs	r3, #128	@ 0x80
 800100a:	039b      	lsls	r3, r3, #14
 800100c:	4013      	ands	r3, r2
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001018:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <HAL_GPIO_Init+0x2b8>)
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800101e:	4a1e      	ldr	r2, [pc, #120]	@ (8001098 <HAL_GPIO_Init+0x2b8>)
 8001020:	2384      	movs	r3, #132	@ 0x84
 8001022:	58d3      	ldr	r3, [r2, r3]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	43da      	mvns	r2, r3
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	2380      	movs	r3, #128	@ 0x80
 8001036:	029b      	lsls	r3, r3, #10
 8001038:	4013      	ands	r3, r2
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001044:	4914      	ldr	r1, [pc, #80]	@ (8001098 <HAL_GPIO_Init+0x2b8>)
 8001046:	2284      	movs	r2, #132	@ 0x84
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800104c:	4a12      	ldr	r2, [pc, #72]	@ (8001098 <HAL_GPIO_Init+0x2b8>)
 800104e:	2380      	movs	r3, #128	@ 0x80
 8001050:	58d3      	ldr	r3, [r2, r3]
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	43da      	mvns	r2, r3
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	2380      	movs	r3, #128	@ 0x80
 8001064:	025b      	lsls	r3, r3, #9
 8001066:	4013      	ands	r3, r2
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001072:	4909      	ldr	r1, [pc, #36]	@ (8001098 <HAL_GPIO_Init+0x2b8>)
 8001074:	2280      	movs	r2, #128	@ 0x80
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	40da      	lsrs	r2, r3
 8001088:	1e13      	subs	r3, r2, #0
 800108a:	d000      	beq.n	800108e <HAL_GPIO_Init+0x2ae>
 800108c:	e6b0      	b.n	8000df0 <HAL_GPIO_Init+0x10>
  }
}
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	46c0      	nop			@ (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b006      	add	sp, #24
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021800 	.word	0x40021800
 800109c:	50000400 	.word	0x50000400
 80010a0:	50000800 	.word	0x50000800
 80010a4:	50000c00 	.word	0x50000c00

080010a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	0008      	movs	r0, r1
 80010b2:	0011      	movs	r1, r2
 80010b4:	1cbb      	adds	r3, r7, #2
 80010b6:	1c02      	adds	r2, r0, #0
 80010b8:	801a      	strh	r2, [r3, #0]
 80010ba:	1c7b      	adds	r3, r7, #1
 80010bc:	1c0a      	adds	r2, r1, #0
 80010be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c0:	1c7b      	adds	r3, r7, #1
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d004      	beq.n	80010d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010c8:	1cbb      	adds	r3, r7, #2
 80010ca:	881a      	ldrh	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010d0:	e003      	b.n	80010da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010d2:	1cbb      	adds	r3, r7, #2
 80010d4:	881a      	ldrh	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010da:	46c0      	nop			@ (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a19      	ldr	r2, [pc, #100]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	0019      	movs	r1, r3
 80010f6:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	430a      	orrs	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	2380      	movs	r3, #128	@ 0x80
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	429a      	cmp	r2, r3
 8001106:	d11f      	bne.n	8001148 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001108:	4b14      	ldr	r3, [pc, #80]	@ (800115c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	0013      	movs	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	189b      	adds	r3, r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4912      	ldr	r1, [pc, #72]	@ (8001160 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001116:	0018      	movs	r0, r3
 8001118:	f7fe fff4 	bl	8000104 <__udivsi3>
 800111c:	0003      	movs	r3, r0
 800111e:	3301      	adds	r3, #1
 8001120:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001122:	e008      	b.n	8001136 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3b01      	subs	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	e001      	b.n	8001136 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e009      	b.n	800114a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001138:	695a      	ldr	r2, [r3, #20]
 800113a:	2380      	movs	r3, #128	@ 0x80
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	401a      	ands	r2, r3
 8001140:	2380      	movs	r3, #128	@ 0x80
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	429a      	cmp	r2, r3
 8001146:	d0ed      	beq.n	8001124 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b004      	add	sp, #16
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	40007000 	.word	0x40007000
 8001158:	fffff9ff 	.word	0xfffff9ff
 800115c:	20000000 	.word	0x20000000
 8001160:	000f4240 	.word	0x000f4240

08001164 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001168:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <LL_RCC_GetAPB1Prescaler+0x14>)
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	23e0      	movs	r3, #224	@ 0xe0
 800116e:	01db      	lsls	r3, r3, #7
 8001170:	4013      	ands	r3, r2
}
 8001172:	0018      	movs	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40021000 	.word	0x40021000

0800117c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e2fe      	b.n	800178c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2201      	movs	r2, #1
 8001194:	4013      	ands	r3, r2
 8001196:	d100      	bne.n	800119a <HAL_RCC_OscConfig+0x1e>
 8001198:	e07c      	b.n	8001294 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800119a:	4bc3      	ldr	r3, [pc, #780]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2238      	movs	r2, #56	@ 0x38
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011a4:	4bc0      	ldr	r3, [pc, #768]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2203      	movs	r2, #3
 80011aa:	4013      	ands	r3, r2
 80011ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	2b10      	cmp	r3, #16
 80011b2:	d102      	bne.n	80011ba <HAL_RCC_OscConfig+0x3e>
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d002      	beq.n	80011c0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d10b      	bne.n	80011d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c0:	4bb9      	ldr	r3, [pc, #740]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2380      	movs	r3, #128	@ 0x80
 80011c6:	029b      	lsls	r3, r3, #10
 80011c8:	4013      	ands	r3, r2
 80011ca:	d062      	beq.n	8001292 <HAL_RCC_OscConfig+0x116>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d15e      	bne.n	8001292 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e2d9      	b.n	800178c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	2380      	movs	r3, #128	@ 0x80
 80011de:	025b      	lsls	r3, r3, #9
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d107      	bne.n	80011f4 <HAL_RCC_OscConfig+0x78>
 80011e4:	4bb0      	ldr	r3, [pc, #704]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4baf      	ldr	r3, [pc, #700]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 80011ea:	2180      	movs	r1, #128	@ 0x80
 80011ec:	0249      	lsls	r1, r1, #9
 80011ee:	430a      	orrs	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	e020      	b.n	8001236 <HAL_RCC_OscConfig+0xba>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	23a0      	movs	r3, #160	@ 0xa0
 80011fa:	02db      	lsls	r3, r3, #11
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d10e      	bne.n	800121e <HAL_RCC_OscConfig+0xa2>
 8001200:	4ba9      	ldr	r3, [pc, #676]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4ba8      	ldr	r3, [pc, #672]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 8001206:	2180      	movs	r1, #128	@ 0x80
 8001208:	02c9      	lsls	r1, r1, #11
 800120a:	430a      	orrs	r2, r1
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	4ba6      	ldr	r3, [pc, #664]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4ba5      	ldr	r3, [pc, #660]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 8001214:	2180      	movs	r1, #128	@ 0x80
 8001216:	0249      	lsls	r1, r1, #9
 8001218:	430a      	orrs	r2, r1
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	e00b      	b.n	8001236 <HAL_RCC_OscConfig+0xba>
 800121e:	4ba2      	ldr	r3, [pc, #648]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4ba1      	ldr	r3, [pc, #644]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 8001224:	49a1      	ldr	r1, [pc, #644]	@ (80014ac <HAL_RCC_OscConfig+0x330>)
 8001226:	400a      	ands	r2, r1
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	4b9f      	ldr	r3, [pc, #636]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b9e      	ldr	r3, [pc, #632]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 8001230:	499f      	ldr	r1, [pc, #636]	@ (80014b0 <HAL_RCC_OscConfig+0x334>)
 8001232:	400a      	ands	r2, r1
 8001234:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d014      	beq.n	8001268 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123e:	f7ff fd11 	bl	8000c64 <HAL_GetTick>
 8001242:	0003      	movs	r3, r0
 8001244:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001248:	f7ff fd0c 	bl	8000c64 <HAL_GetTick>
 800124c:	0002      	movs	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b64      	cmp	r3, #100	@ 0x64
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e298      	b.n	800178c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800125a:	4b93      	ldr	r3, [pc, #588]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	2380      	movs	r3, #128	@ 0x80
 8001260:	029b      	lsls	r3, r3, #10
 8001262:	4013      	ands	r3, r2
 8001264:	d0f0      	beq.n	8001248 <HAL_RCC_OscConfig+0xcc>
 8001266:	e015      	b.n	8001294 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001268:	f7ff fcfc 	bl	8000c64 <HAL_GetTick>
 800126c:	0003      	movs	r3, r0
 800126e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001272:	f7ff fcf7 	bl	8000c64 <HAL_GetTick>
 8001276:	0002      	movs	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b64      	cmp	r3, #100	@ 0x64
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e283      	b.n	800178c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001284:	4b88      	ldr	r3, [pc, #544]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	2380      	movs	r3, #128	@ 0x80
 800128a:	029b      	lsls	r3, r3, #10
 800128c:	4013      	ands	r3, r2
 800128e:	d1f0      	bne.n	8001272 <HAL_RCC_OscConfig+0xf6>
 8001290:	e000      	b.n	8001294 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001292:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2202      	movs	r2, #2
 800129a:	4013      	ands	r3, r2
 800129c:	d100      	bne.n	80012a0 <HAL_RCC_OscConfig+0x124>
 800129e:	e099      	b.n	80013d4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012a0:	4b81      	ldr	r3, [pc, #516]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2238      	movs	r2, #56	@ 0x38
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012aa:	4b7f      	ldr	r3, [pc, #508]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2203      	movs	r2, #3
 80012b0:	4013      	ands	r3, r2
 80012b2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	2b10      	cmp	r3, #16
 80012b8:	d102      	bne.n	80012c0 <HAL_RCC_OscConfig+0x144>
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d002      	beq.n	80012c6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d135      	bne.n	8001332 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c6:	4b78      	ldr	r3, [pc, #480]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	2380      	movs	r3, #128	@ 0x80
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4013      	ands	r3, r2
 80012d0:	d005      	beq.n	80012de <HAL_RCC_OscConfig+0x162>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e256      	b.n	800178c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012de:	4b72      	ldr	r3, [pc, #456]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4a74      	ldr	r2, [pc, #464]	@ (80014b4 <HAL_RCC_OscConfig+0x338>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	0019      	movs	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	021a      	lsls	r2, r3, #8
 80012ee:	4b6e      	ldr	r3, [pc, #440]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 80012f0:	430a      	orrs	r2, r1
 80012f2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d112      	bne.n	8001320 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012fa:	4b6b      	ldr	r3, [pc, #428]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a6e      	ldr	r2, [pc, #440]	@ (80014b8 <HAL_RCC_OscConfig+0x33c>)
 8001300:	4013      	ands	r3, r2
 8001302:	0019      	movs	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	4b67      	ldr	r3, [pc, #412]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 800130a:	430a      	orrs	r2, r1
 800130c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800130e:	4b66      	ldr	r3, [pc, #408]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	0adb      	lsrs	r3, r3, #11
 8001314:	2207      	movs	r2, #7
 8001316:	4013      	ands	r3, r2
 8001318:	4a68      	ldr	r2, [pc, #416]	@ (80014bc <HAL_RCC_OscConfig+0x340>)
 800131a:	40da      	lsrs	r2, r3
 800131c:	4b68      	ldr	r3, [pc, #416]	@ (80014c0 <HAL_RCC_OscConfig+0x344>)
 800131e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001320:	4b68      	ldr	r3, [pc, #416]	@ (80014c4 <HAL_RCC_OscConfig+0x348>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff fc41 	bl	8000bac <HAL_InitTick>
 800132a:	1e03      	subs	r3, r0, #0
 800132c:	d051      	beq.n	80013d2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e22c      	b.n	800178c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d030      	beq.n	800139c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800133a:	4b5b      	ldr	r3, [pc, #364]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a5e      	ldr	r2, [pc, #376]	@ (80014b8 <HAL_RCC_OscConfig+0x33c>)
 8001340:	4013      	ands	r3, r2
 8001342:	0019      	movs	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	4b57      	ldr	r3, [pc, #348]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 800134a:	430a      	orrs	r2, r1
 800134c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800134e:	4b56      	ldr	r3, [pc, #344]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b55      	ldr	r3, [pc, #340]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 8001354:	2180      	movs	r1, #128	@ 0x80
 8001356:	0049      	lsls	r1, r1, #1
 8001358:	430a      	orrs	r2, r1
 800135a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135c:	f7ff fc82 	bl	8000c64 <HAL_GetTick>
 8001360:	0003      	movs	r3, r0
 8001362:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001366:	f7ff fc7d 	bl	8000c64 <HAL_GetTick>
 800136a:	0002      	movs	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e209      	b.n	800178c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001378:	4b4b      	ldr	r3, [pc, #300]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2380      	movs	r3, #128	@ 0x80
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4013      	ands	r3, r2
 8001382:	d0f0      	beq.n	8001366 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001384:	4b48      	ldr	r3, [pc, #288]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4a4a      	ldr	r2, [pc, #296]	@ (80014b4 <HAL_RCC_OscConfig+0x338>)
 800138a:	4013      	ands	r3, r2
 800138c:	0019      	movs	r1, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	021a      	lsls	r2, r3, #8
 8001394:	4b44      	ldr	r3, [pc, #272]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 8001396:	430a      	orrs	r2, r1
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	e01b      	b.n	80013d4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800139c:	4b42      	ldr	r3, [pc, #264]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b41      	ldr	r3, [pc, #260]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 80013a2:	4949      	ldr	r1, [pc, #292]	@ (80014c8 <HAL_RCC_OscConfig+0x34c>)
 80013a4:	400a      	ands	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc5c 	bl	8000c64 <HAL_GetTick>
 80013ac:	0003      	movs	r3, r0
 80013ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b2:	f7ff fc57 	bl	8000c64 <HAL_GetTick>
 80013b6:	0002      	movs	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e1e3      	b.n	800178c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013c4:	4b38      	ldr	r3, [pc, #224]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2380      	movs	r3, #128	@ 0x80
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	4013      	ands	r3, r2
 80013ce:	d1f0      	bne.n	80013b2 <HAL_RCC_OscConfig+0x236>
 80013d0:	e000      	b.n	80013d4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2208      	movs	r2, #8
 80013da:	4013      	ands	r3, r2
 80013dc:	d047      	beq.n	800146e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80013de:	4b32      	ldr	r3, [pc, #200]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2238      	movs	r2, #56	@ 0x38
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b18      	cmp	r3, #24
 80013e8:	d10a      	bne.n	8001400 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80013ea:	4b2f      	ldr	r3, [pc, #188]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 80013ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ee:	2202      	movs	r2, #2
 80013f0:	4013      	ands	r3, r2
 80013f2:	d03c      	beq.n	800146e <HAL_RCC_OscConfig+0x2f2>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d138      	bne.n	800146e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e1c5      	b.n	800178c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d019      	beq.n	800143c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001408:	4b27      	ldr	r3, [pc, #156]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 800140a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800140c:	4b26      	ldr	r3, [pc, #152]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 800140e:	2101      	movs	r1, #1
 8001410:	430a      	orrs	r2, r1
 8001412:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff fc26 	bl	8000c64 <HAL_GetTick>
 8001418:	0003      	movs	r3, r0
 800141a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141e:	f7ff fc21 	bl	8000c64 <HAL_GetTick>
 8001422:	0002      	movs	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e1ad      	b.n	800178c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001430:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 8001432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001434:	2202      	movs	r2, #2
 8001436:	4013      	ands	r3, r2
 8001438:	d0f1      	beq.n	800141e <HAL_RCC_OscConfig+0x2a2>
 800143a:	e018      	b.n	800146e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800143c:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 800143e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001440:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 8001442:	2101      	movs	r1, #1
 8001444:	438a      	bics	r2, r1
 8001446:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff fc0c 	bl	8000c64 <HAL_GetTick>
 800144c:	0003      	movs	r3, r0
 800144e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001452:	f7ff fc07 	bl	8000c64 <HAL_GetTick>
 8001456:	0002      	movs	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e193      	b.n	800178c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001464:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 8001466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001468:	2202      	movs	r2, #2
 800146a:	4013      	ands	r3, r2
 800146c:	d1f1      	bne.n	8001452 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2204      	movs	r2, #4
 8001474:	4013      	ands	r3, r2
 8001476:	d100      	bne.n	800147a <HAL_RCC_OscConfig+0x2fe>
 8001478:	e0c6      	b.n	8001608 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147a:	231f      	movs	r3, #31
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2238      	movs	r2, #56	@ 0x38
 8001488:	4013      	ands	r3, r2
 800148a:	2b20      	cmp	r3, #32
 800148c:	d11e      	bne.n	80014cc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_RCC_OscConfig+0x32c>)
 8001490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001492:	2202      	movs	r2, #2
 8001494:	4013      	ands	r3, r2
 8001496:	d100      	bne.n	800149a <HAL_RCC_OscConfig+0x31e>
 8001498:	e0b6      	b.n	8001608 <HAL_RCC_OscConfig+0x48c>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d000      	beq.n	80014a4 <HAL_RCC_OscConfig+0x328>
 80014a2:	e0b1      	b.n	8001608 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e171      	b.n	800178c <HAL_RCC_OscConfig+0x610>
 80014a8:	40021000 	.word	0x40021000
 80014ac:	fffeffff 	.word	0xfffeffff
 80014b0:	fffbffff 	.word	0xfffbffff
 80014b4:	ffff80ff 	.word	0xffff80ff
 80014b8:	ffffc7ff 	.word	0xffffc7ff
 80014bc:	00f42400 	.word	0x00f42400
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000004 	.word	0x20000004
 80014c8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80014cc:	4bb1      	ldr	r3, [pc, #708]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 80014ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014d0:	2380      	movs	r3, #128	@ 0x80
 80014d2:	055b      	lsls	r3, r3, #21
 80014d4:	4013      	ands	r3, r2
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_OscConfig+0x360>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <HAL_RCC_OscConfig+0x362>
 80014dc:	2300      	movs	r3, #0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d011      	beq.n	8001506 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4bac      	ldr	r3, [pc, #688]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 80014e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014e6:	4bab      	ldr	r3, [pc, #684]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 80014e8:	2180      	movs	r1, #128	@ 0x80
 80014ea:	0549      	lsls	r1, r1, #21
 80014ec:	430a      	orrs	r2, r1
 80014ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014f0:	4ba8      	ldr	r3, [pc, #672]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 80014f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014f4:	2380      	movs	r3, #128	@ 0x80
 80014f6:	055b      	lsls	r3, r3, #21
 80014f8:	4013      	ands	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80014fe:	231f      	movs	r3, #31
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001506:	4ba4      	ldr	r3, [pc, #656]	@ (8001798 <HAL_RCC_OscConfig+0x61c>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	2380      	movs	r3, #128	@ 0x80
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4013      	ands	r3, r2
 8001510:	d11a      	bne.n	8001548 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001512:	4ba1      	ldr	r3, [pc, #644]	@ (8001798 <HAL_RCC_OscConfig+0x61c>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4ba0      	ldr	r3, [pc, #640]	@ (8001798 <HAL_RCC_OscConfig+0x61c>)
 8001518:	2180      	movs	r1, #128	@ 0x80
 800151a:	0049      	lsls	r1, r1, #1
 800151c:	430a      	orrs	r2, r1
 800151e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001520:	f7ff fba0 	bl	8000c64 <HAL_GetTick>
 8001524:	0003      	movs	r3, r0
 8001526:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152a:	f7ff fb9b 	bl	8000c64 <HAL_GetTick>
 800152e:	0002      	movs	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e127      	b.n	800178c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800153c:	4b96      	ldr	r3, [pc, #600]	@ (8001798 <HAL_RCC_OscConfig+0x61c>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4013      	ands	r3, r2
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d106      	bne.n	800155e <HAL_RCC_OscConfig+0x3e2>
 8001550:	4b90      	ldr	r3, [pc, #576]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 8001552:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001554:	4b8f      	ldr	r3, [pc, #572]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 8001556:	2101      	movs	r1, #1
 8001558:	430a      	orrs	r2, r1
 800155a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800155c:	e01c      	b.n	8001598 <HAL_RCC_OscConfig+0x41c>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b05      	cmp	r3, #5
 8001564:	d10c      	bne.n	8001580 <HAL_RCC_OscConfig+0x404>
 8001566:	4b8b      	ldr	r3, [pc, #556]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 8001568:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800156a:	4b8a      	ldr	r3, [pc, #552]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 800156c:	2104      	movs	r1, #4
 800156e:	430a      	orrs	r2, r1
 8001570:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001572:	4b88      	ldr	r3, [pc, #544]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 8001574:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001576:	4b87      	ldr	r3, [pc, #540]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 8001578:	2101      	movs	r1, #1
 800157a:	430a      	orrs	r2, r1
 800157c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800157e:	e00b      	b.n	8001598 <HAL_RCC_OscConfig+0x41c>
 8001580:	4b84      	ldr	r3, [pc, #528]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 8001582:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001584:	4b83      	ldr	r3, [pc, #524]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 8001586:	2101      	movs	r1, #1
 8001588:	438a      	bics	r2, r1
 800158a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800158c:	4b81      	ldr	r3, [pc, #516]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 800158e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001590:	4b80      	ldr	r3, [pc, #512]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 8001592:	2104      	movs	r1, #4
 8001594:	438a      	bics	r2, r1
 8001596:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d014      	beq.n	80015ca <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff fb60 	bl	8000c64 <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015a8:	e009      	b.n	80015be <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015aa:	f7ff fb5b 	bl	8000c64 <HAL_GetTick>
 80015ae:	0002      	movs	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	4a79      	ldr	r2, [pc, #484]	@ (800179c <HAL_RCC_OscConfig+0x620>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e0e6      	b.n	800178c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015be:	4b75      	ldr	r3, [pc, #468]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 80015c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c2:	2202      	movs	r2, #2
 80015c4:	4013      	ands	r3, r2
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x42e>
 80015c8:	e013      	b.n	80015f2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff fb4b 	bl	8000c64 <HAL_GetTick>
 80015ce:	0003      	movs	r3, r0
 80015d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015d2:	e009      	b.n	80015e8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d4:	f7ff fb46 	bl	8000c64 <HAL_GetTick>
 80015d8:	0002      	movs	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	4a6f      	ldr	r2, [pc, #444]	@ (800179c <HAL_RCC_OscConfig+0x620>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e0d1      	b.n	800178c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 80015ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ec:	2202      	movs	r2, #2
 80015ee:	4013      	ands	r3, r2
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80015f2:	231f      	movs	r3, #31
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d105      	bne.n	8001608 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80015fc:	4b65      	ldr	r3, [pc, #404]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 80015fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001600:	4b64      	ldr	r3, [pc, #400]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 8001602:	4967      	ldr	r1, [pc, #412]	@ (80017a0 <HAL_RCC_OscConfig+0x624>)
 8001604:	400a      	ands	r2, r1
 8001606:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d100      	bne.n	8001612 <HAL_RCC_OscConfig+0x496>
 8001610:	e0bb      	b.n	800178a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001612:	4b60      	ldr	r3, [pc, #384]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2238      	movs	r2, #56	@ 0x38
 8001618:	4013      	ands	r3, r2
 800161a:	2b10      	cmp	r3, #16
 800161c:	d100      	bne.n	8001620 <HAL_RCC_OscConfig+0x4a4>
 800161e:	e07b      	b.n	8001718 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d156      	bne.n	80016d6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001628:	4b5a      	ldr	r3, [pc, #360]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b59      	ldr	r3, [pc, #356]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 800162e:	495d      	ldr	r1, [pc, #372]	@ (80017a4 <HAL_RCC_OscConfig+0x628>)
 8001630:	400a      	ands	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fb16 	bl	8000c64 <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163e:	f7ff fb11 	bl	8000c64 <HAL_GetTick>
 8001642:	0002      	movs	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e09d      	b.n	800178c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001650:	4b50      	ldr	r3, [pc, #320]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	@ 0x80
 8001656:	049b      	lsls	r3, r3, #18
 8001658:	4013      	ands	r3, r2
 800165a:	d1f0      	bne.n	800163e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800165c:	4b4d      	ldr	r3, [pc, #308]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4a51      	ldr	r2, [pc, #324]	@ (80017a8 <HAL_RCC_OscConfig+0x62c>)
 8001662:	4013      	ands	r3, r2
 8001664:	0019      	movs	r1, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1a      	ldr	r2, [r3, #32]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001688:	431a      	orrs	r2, r3
 800168a:	4b42      	ldr	r3, [pc, #264]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 800168c:	430a      	orrs	r2, r1
 800168e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001690:	4b40      	ldr	r3, [pc, #256]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b3f      	ldr	r3, [pc, #252]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 8001696:	2180      	movs	r1, #128	@ 0x80
 8001698:	0449      	lsls	r1, r1, #17
 800169a:	430a      	orrs	r2, r1
 800169c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800169e:	4b3d      	ldr	r3, [pc, #244]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 80016a4:	2180      	movs	r1, #128	@ 0x80
 80016a6:	0549      	lsls	r1, r1, #21
 80016a8:	430a      	orrs	r2, r1
 80016aa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7ff fada 	bl	8000c64 <HAL_GetTick>
 80016b0:	0003      	movs	r3, r0
 80016b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b6:	f7ff fad5 	bl	8000c64 <HAL_GetTick>
 80016ba:	0002      	movs	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e061      	b.n	800178c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016c8:	4b32      	ldr	r3, [pc, #200]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2380      	movs	r3, #128	@ 0x80
 80016ce:	049b      	lsls	r3, r3, #18
 80016d0:	4013      	ands	r3, r2
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x53a>
 80016d4:	e059      	b.n	800178a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	4b2e      	ldr	r3, [pc, #184]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 80016dc:	4931      	ldr	r1, [pc, #196]	@ (80017a4 <HAL_RCC_OscConfig+0x628>)
 80016de:	400a      	ands	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e2:	f7ff fabf 	bl	8000c64 <HAL_GetTick>
 80016e6:	0003      	movs	r3, r0
 80016e8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ec:	f7ff faba 	bl	8000c64 <HAL_GetTick>
 80016f0:	0002      	movs	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e046      	b.n	800178c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016fe:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	2380      	movs	r3, #128	@ 0x80
 8001704:	049b      	lsls	r3, r3, #18
 8001706:	4013      	ands	r3, r2
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800170a:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 8001710:	4926      	ldr	r1, [pc, #152]	@ (80017ac <HAL_RCC_OscConfig+0x630>)
 8001712:	400a      	ands	r2, r1
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	e038      	b.n	800178a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d101      	bne.n	8001724 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e033      	b.n	800178c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001724:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <HAL_RCC_OscConfig+0x618>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2203      	movs	r2, #3
 800172e:	401a      	ands	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	429a      	cmp	r2, r3
 8001736:	d126      	bne.n	8001786 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	2270      	movs	r2, #112	@ 0x70
 800173c:	401a      	ands	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001742:	429a      	cmp	r2, r3
 8001744:	d11f      	bne.n	8001786 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	23fe      	movs	r3, #254	@ 0xfe
 800174a:	01db      	lsls	r3, r3, #7
 800174c:	401a      	ands	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001752:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d116      	bne.n	8001786 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	23f8      	movs	r3, #248	@ 0xf8
 800175c:	039b      	lsls	r3, r3, #14
 800175e:	401a      	ands	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d10e      	bne.n	8001786 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	23e0      	movs	r3, #224	@ 0xe0
 800176c:	051b      	lsls	r3, r3, #20
 800176e:	401a      	ands	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001774:	429a      	cmp	r2, r3
 8001776:	d106      	bne.n	8001786 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	0f5b      	lsrs	r3, r3, #29
 800177c:	075a      	lsls	r2, r3, #29
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d001      	beq.n	800178a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b008      	add	sp, #32
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40021000 	.word	0x40021000
 8001798:	40007000 	.word	0x40007000
 800179c:	00001388 	.word	0x00001388
 80017a0:	efffffff 	.word	0xefffffff
 80017a4:	feffffff 	.word	0xfeffffff
 80017a8:	11c1808c 	.word	0x11c1808c
 80017ac:	eefefffc 	.word	0xeefefffc

080017b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0e9      	b.n	8001998 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017c4:	4b76      	ldr	r3, [pc, #472]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2207      	movs	r2, #7
 80017ca:	4013      	ands	r3, r2
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d91e      	bls.n	8001810 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b73      	ldr	r3, [pc, #460]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2207      	movs	r2, #7
 80017d8:	4393      	bics	r3, r2
 80017da:	0019      	movs	r1, r3
 80017dc:	4b70      	ldr	r3, [pc, #448]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017e4:	f7ff fa3e 	bl	8000c64 <HAL_GetTick>
 80017e8:	0003      	movs	r3, r0
 80017ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017ec:	e009      	b.n	8001802 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ee:	f7ff fa39 	bl	8000c64 <HAL_GetTick>
 80017f2:	0002      	movs	r2, r0
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	4a6a      	ldr	r2, [pc, #424]	@ (80019a4 <HAL_RCC_ClockConfig+0x1f4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e0ca      	b.n	8001998 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001802:	4b67      	ldr	r3, [pc, #412]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2207      	movs	r2, #7
 8001808:	4013      	ands	r3, r2
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d1ee      	bne.n	80017ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2202      	movs	r2, #2
 8001816:	4013      	ands	r3, r2
 8001818:	d015      	beq.n	8001846 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2204      	movs	r2, #4
 8001820:	4013      	ands	r3, r2
 8001822:	d006      	beq.n	8001832 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001824:	4b60      	ldr	r3, [pc, #384]	@ (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	4b5f      	ldr	r3, [pc, #380]	@ (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 800182a:	21e0      	movs	r1, #224	@ 0xe0
 800182c:	01c9      	lsls	r1, r1, #7
 800182e:	430a      	orrs	r2, r1
 8001830:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001832:	4b5d      	ldr	r3, [pc, #372]	@ (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	4a5d      	ldr	r2, [pc, #372]	@ (80019ac <HAL_RCC_ClockConfig+0x1fc>)
 8001838:	4013      	ands	r3, r2
 800183a:	0019      	movs	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	4b59      	ldr	r3, [pc, #356]	@ (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001842:	430a      	orrs	r2, r1
 8001844:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2201      	movs	r2, #1
 800184c:	4013      	ands	r3, r2
 800184e:	d057      	beq.n	8001900 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d107      	bne.n	8001868 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001858:	4b53      	ldr	r3, [pc, #332]	@ (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2380      	movs	r3, #128	@ 0x80
 800185e:	029b      	lsls	r3, r3, #10
 8001860:	4013      	ands	r3, r2
 8001862:	d12b      	bne.n	80018bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e097      	b.n	8001998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d107      	bne.n	8001880 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001870:	4b4d      	ldr	r3, [pc, #308]	@ (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2380      	movs	r3, #128	@ 0x80
 8001876:	049b      	lsls	r3, r3, #18
 8001878:	4013      	ands	r3, r2
 800187a:	d11f      	bne.n	80018bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e08b      	b.n	8001998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d107      	bne.n	8001898 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001888:	4b47      	ldr	r3, [pc, #284]	@ (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2380      	movs	r3, #128	@ 0x80
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4013      	ands	r3, r2
 8001892:	d113      	bne.n	80018bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e07f      	b.n	8001998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b03      	cmp	r3, #3
 800189e:	d106      	bne.n	80018ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018a0:	4b41      	ldr	r3, [pc, #260]	@ (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 80018a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a4:	2202      	movs	r2, #2
 80018a6:	4013      	ands	r3, r2
 80018a8:	d108      	bne.n	80018bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e074      	b.n	8001998 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ae:	4b3e      	ldr	r3, [pc, #248]	@ (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 80018b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b2:	2202      	movs	r2, #2
 80018b4:	4013      	ands	r3, r2
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e06d      	b.n	8001998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018bc:	4b3a      	ldr	r3, [pc, #232]	@ (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2207      	movs	r2, #7
 80018c2:	4393      	bics	r3, r2
 80018c4:	0019      	movs	r1, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	4b37      	ldr	r3, [pc, #220]	@ (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 80018cc:	430a      	orrs	r2, r1
 80018ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018d0:	f7ff f9c8 	bl	8000c64 <HAL_GetTick>
 80018d4:	0003      	movs	r3, r0
 80018d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d8:	e009      	b.n	80018ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018da:	f7ff f9c3 	bl	8000c64 <HAL_GetTick>
 80018de:	0002      	movs	r2, r0
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	4a2f      	ldr	r2, [pc, #188]	@ (80019a4 <HAL_RCC_ClockConfig+0x1f4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e054      	b.n	8001998 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	4b2e      	ldr	r3, [pc, #184]	@ (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2238      	movs	r2, #56	@ 0x38
 80018f4:	401a      	ands	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d1ec      	bne.n	80018da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001900:	4b27      	ldr	r3, [pc, #156]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2207      	movs	r2, #7
 8001906:	4013      	ands	r3, r2
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d21e      	bcs.n	800194c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2207      	movs	r2, #7
 8001914:	4393      	bics	r3, r2
 8001916:	0019      	movs	r1, r3
 8001918:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001920:	f7ff f9a0 	bl	8000c64 <HAL_GetTick>
 8001924:	0003      	movs	r3, r0
 8001926:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001928:	e009      	b.n	800193e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192a:	f7ff f99b 	bl	8000c64 <HAL_GetTick>
 800192e:	0002      	movs	r2, r0
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	4a1b      	ldr	r2, [pc, #108]	@ (80019a4 <HAL_RCC_ClockConfig+0x1f4>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e02c      	b.n	8001998 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800193e:	4b18      	ldr	r3, [pc, #96]	@ (80019a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2207      	movs	r2, #7
 8001944:	4013      	ands	r3, r2
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d1ee      	bne.n	800192a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2204      	movs	r2, #4
 8001952:	4013      	ands	r3, r2
 8001954:	d009      	beq.n	800196a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001956:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	4a15      	ldr	r2, [pc, #84]	@ (80019b0 <HAL_RCC_ClockConfig+0x200>)
 800195c:	4013      	ands	r3, r2
 800195e:	0019      	movs	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001966:	430a      	orrs	r2, r1
 8001968:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800196a:	f000 f829 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 800196e:	0001      	movs	r1, r0
 8001970:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <HAL_RCC_ClockConfig+0x1f8>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	220f      	movs	r2, #15
 8001978:	401a      	ands	r2, r3
 800197a:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <HAL_RCC_ClockConfig+0x204>)
 800197c:	0092      	lsls	r2, r2, #2
 800197e:	58d3      	ldr	r3, [r2, r3]
 8001980:	221f      	movs	r2, #31
 8001982:	4013      	ands	r3, r2
 8001984:	000a      	movs	r2, r1
 8001986:	40da      	lsrs	r2, r3
 8001988:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <HAL_RCC_ClockConfig+0x208>)
 800198a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800198c:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <HAL_RCC_ClockConfig+0x20c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0018      	movs	r0, r3
 8001992:	f7ff f90b 	bl	8000bac <HAL_InitTick>
 8001996:	0003      	movs	r3, r0
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	b004      	add	sp, #16
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40022000 	.word	0x40022000
 80019a4:	00001388 	.word	0x00001388
 80019a8:	40021000 	.word	0x40021000
 80019ac:	fffff0ff 	.word	0xfffff0ff
 80019b0:	ffff8fff 	.word	0xffff8fff
 80019b4:	08003b98 	.word	0x08003b98
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000004 	.word	0x20000004

080019c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019c6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2238      	movs	r2, #56	@ 0x38
 80019cc:	4013      	ands	r3, r2
 80019ce:	d10f      	bne.n	80019f0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80019d0:	4b39      	ldr	r3, [pc, #228]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	0adb      	lsrs	r3, r3, #11
 80019d6:	2207      	movs	r2, #7
 80019d8:	4013      	ands	r3, r2
 80019da:	2201      	movs	r2, #1
 80019dc:	409a      	lsls	r2, r3
 80019de:	0013      	movs	r3, r2
 80019e0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80019e2:	6839      	ldr	r1, [r7, #0]
 80019e4:	4835      	ldr	r0, [pc, #212]	@ (8001abc <HAL_RCC_GetSysClockFreq+0xfc>)
 80019e6:	f7fe fb8d 	bl	8000104 <__udivsi3>
 80019ea:	0003      	movs	r3, r0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	e05d      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019f0:	4b31      	ldr	r3, [pc, #196]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2238      	movs	r2, #56	@ 0x38
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d102      	bne.n	8001a02 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019fc:	4b30      	ldr	r3, [pc, #192]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x100>)
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	e054      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a02:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2238      	movs	r2, #56	@ 0x38
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d138      	bne.n	8001a80 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2203      	movs	r2, #3
 8001a14:	4013      	ands	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a18:	4b27      	ldr	r3, [pc, #156]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	2207      	movs	r2, #7
 8001a20:	4013      	ands	r3, r2
 8001a22:	3301      	adds	r3, #1
 8001a24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d10d      	bne.n	8001a48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	4824      	ldr	r0, [pc, #144]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001a30:	f7fe fb68 	bl	8000104 <__udivsi3>
 8001a34:	0003      	movs	r3, r0
 8001a36:	0019      	movs	r1, r3
 8001a38:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	227f      	movs	r2, #127	@ 0x7f
 8001a40:	4013      	ands	r3, r2
 8001a42:	434b      	muls	r3, r1
 8001a44:	617b      	str	r3, [r7, #20]
        break;
 8001a46:	e00d      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	481c      	ldr	r0, [pc, #112]	@ (8001abc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a4c:	f7fe fb5a 	bl	8000104 <__udivsi3>
 8001a50:	0003      	movs	r3, r0
 8001a52:	0019      	movs	r1, r3
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	227f      	movs	r2, #127	@ 0x7f
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	434b      	muls	r3, r1
 8001a60:	617b      	str	r3, [r7, #20]
        break;
 8001a62:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a64:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0f5b      	lsrs	r3, r3, #29
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	3301      	adds	r3, #1
 8001a70:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	6978      	ldr	r0, [r7, #20]
 8001a76:	f7fe fb45 	bl	8000104 <__udivsi3>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	e015      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a80:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2238      	movs	r2, #56	@ 0x38
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b20      	cmp	r3, #32
 8001a8a:	d103      	bne.n	8001a94 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a8c:	2380      	movs	r3, #128	@ 0x80
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	e00b      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a94:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2238      	movs	r2, #56	@ 0x38
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b18      	cmp	r3, #24
 8001a9e:	d103      	bne.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001aa0:	23fa      	movs	r3, #250	@ 0xfa
 8001aa2:	01db      	lsls	r3, r3, #7
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	e001      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001aac:	693b      	ldr	r3, [r7, #16]
}
 8001aae:	0018      	movs	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b006      	add	sp, #24
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			@ (mov r8, r8)
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	00f42400 	.word	0x00f42400
 8001ac0:	007a1200 	.word	0x007a1200

08001ac4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac8:	4b02      	ldr	r3, [pc, #8]	@ (8001ad4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			@ (mov r8, r8)
 8001ad4:	20000000 	.word	0x20000000

08001ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001adc:	f7ff fff2 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001ae0:	0004      	movs	r4, r0
 8001ae2:	f7ff fb3f 	bl	8001164 <LL_RCC_GetAPB1Prescaler>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	0b1a      	lsrs	r2, r3, #12
 8001aea:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001aec:	0092      	lsls	r2, r2, #2
 8001aee:	58d3      	ldr	r3, [r2, r3]
 8001af0:	221f      	movs	r2, #31
 8001af2:	4013      	ands	r3, r2
 8001af4:	40dc      	lsrs	r4, r3
 8001af6:	0023      	movs	r3, r4
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bdb0      	pop	{r4, r5, r7, pc}
 8001afe:	46c0      	nop			@ (mov r8, r8)
 8001b00:	08003bd8 	.word	0x08003bd8

08001b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001b0c:	2313      	movs	r3, #19
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b14:	2312      	movs	r3, #18
 8001b16:	18fb      	adds	r3, r7, r3
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2380      	movs	r3, #128	@ 0x80
 8001b22:	029b      	lsls	r3, r3, #10
 8001b24:	4013      	ands	r3, r2
 8001b26:	d100      	bne.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001b28:	e0a3      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2a:	2011      	movs	r0, #17
 8001b2c:	183b      	adds	r3, r7, r0
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b32:	4bc3      	ldr	r3, [pc, #780]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b36:	2380      	movs	r3, #128	@ 0x80
 8001b38:	055b      	lsls	r3, r3, #21
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d110      	bne.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	4bc0      	ldr	r3, [pc, #768]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b42:	4bbf      	ldr	r3, [pc, #764]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b44:	2180      	movs	r1, #128	@ 0x80
 8001b46:	0549      	lsls	r1, r1, #21
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b4c:	4bbc      	ldr	r3, [pc, #752]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b50:	2380      	movs	r3, #128	@ 0x80
 8001b52:	055b      	lsls	r3, r3, #21
 8001b54:	4013      	ands	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b5a:	183b      	adds	r3, r7, r0
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b60:	4bb8      	ldr	r3, [pc, #736]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4bb7      	ldr	r3, [pc, #732]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b66:	2180      	movs	r1, #128	@ 0x80
 8001b68:	0049      	lsls	r1, r1, #1
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b6e:	f7ff f879 	bl	8000c64 <HAL_GetTick>
 8001b72:	0003      	movs	r3, r0
 8001b74:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b76:	e00b      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b78:	f7ff f874 	bl	8000c64 <HAL_GetTick>
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d904      	bls.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001b86:	2313      	movs	r3, #19
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	701a      	strb	r2, [r3, #0]
        break;
 8001b8e:	e005      	b.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b90:	4bac      	ldr	r3, [pc, #688]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d0ed      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001b9c:	2313      	movs	r3, #19
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d154      	bne.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ba6:	4ba6      	ldr	r3, [pc, #664]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ba8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001baa:	23c0      	movs	r3, #192	@ 0xc0
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4013      	ands	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d019      	beq.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d014      	beq.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bc2:	4b9f      	ldr	r3, [pc, #636]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc6:	4aa0      	ldr	r2, [pc, #640]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001bcc:	4b9c      	ldr	r3, [pc, #624]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bd0:	4b9b      	ldr	r3, [pc, #620]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bd2:	2180      	movs	r1, #128	@ 0x80
 8001bd4:	0249      	lsls	r1, r1, #9
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001bda:	4b99      	ldr	r3, [pc, #612]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bdc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bde:	4b98      	ldr	r3, [pc, #608]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001be0:	499a      	ldr	r1, [pc, #616]	@ (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001be2:	400a      	ands	r2, r1
 8001be4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001be6:	4b96      	ldr	r3, [pc, #600]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d016      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f836 	bl	8000c64 <HAL_GetTick>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfc:	e00c      	b.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfe:	f7ff f831 	bl	8000c64 <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	4a91      	ldr	r2, [pc, #580]	@ (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d904      	bls.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001c0e:	2313      	movs	r3, #19
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	2203      	movs	r2, #3
 8001c14:	701a      	strb	r2, [r3, #0]
            break;
 8001c16:	e004      	b.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c18:	4b89      	ldr	r3, [pc, #548]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d0ed      	beq.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001c22:	2313      	movs	r3, #19
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10a      	bne.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c2c:	4b84      	ldr	r3, [pc, #528]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c30:	4a85      	ldr	r2, [pc, #532]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c3a:	4b81      	ldr	r3, [pc, #516]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c40:	e00c      	b.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c42:	2312      	movs	r3, #18
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	2213      	movs	r2, #19
 8001c48:	18ba      	adds	r2, r7, r2
 8001c4a:	7812      	ldrb	r2, [r2, #0]
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	e005      	b.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c50:	2312      	movs	r3, #18
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	2213      	movs	r2, #19
 8001c56:	18ba      	adds	r2, r7, r2
 8001c58:	7812      	ldrb	r2, [r2, #0]
 8001c5a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c5c:	2311      	movs	r3, #17
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c66:	4b76      	ldr	r3, [pc, #472]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c6a:	4b75      	ldr	r3, [pc, #468]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c6c:	4979      	ldr	r1, [pc, #484]	@ (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001c6e:	400a      	ands	r2, r1
 8001c70:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2201      	movs	r2, #1
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d009      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c7c:	4b70      	ldr	r3, [pc, #448]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c80:	2203      	movs	r2, #3
 8001c82:	4393      	bics	r3, r2
 8001c84:	0019      	movs	r1, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2202      	movs	r2, #2
 8001c96:	4013      	ands	r3, r2
 8001c98:	d009      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c9a:	4b69      	ldr	r3, [pc, #420]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	4393      	bics	r3, r2
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	4b65      	ldr	r3, [pc, #404]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001caa:	430a      	orrs	r2, r1
 8001cac:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2210      	movs	r2, #16
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d009      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cb8:	4b61      	ldr	r3, [pc, #388]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cbc:	4a66      	ldr	r2, [pc, #408]	@ (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	4b5e      	ldr	r3, [pc, #376]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	@ 0x80
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d009      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001cd8:	4b59      	ldr	r3, [pc, #356]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cdc:	4a5f      	ldr	r2, [pc, #380]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699a      	ldr	r2, [r3, #24]
 8001ce6:	4b56      	ldr	r3, [pc, #344]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2380      	movs	r3, #128	@ 0x80
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d009      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001cf8:	4b51      	ldr	r3, [pc, #324]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cfc:	4a58      	ldr	r2, [pc, #352]	@ (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	0019      	movs	r1, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69da      	ldr	r2, [r3, #28]
 8001d06:	4b4e      	ldr	r3, [pc, #312]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2220      	movs	r2, #32
 8001d12:	4013      	ands	r3, r2
 8001d14:	d009      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d16:	4b4a      	ldr	r3, [pc, #296]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d1a:	4a52      	ldr	r2, [pc, #328]	@ (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	0019      	movs	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	4b46      	ldr	r3, [pc, #280]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d26:	430a      	orrs	r2, r1
 8001d28:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	2380      	movs	r3, #128	@ 0x80
 8001d30:	01db      	lsls	r3, r3, #7
 8001d32:	4013      	ands	r3, r2
 8001d34:	d015      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d36:	4b42      	ldr	r3, [pc, #264]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	0899      	lsrs	r1, r3, #2
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1a      	ldr	r2, [r3, #32]
 8001d42:	4b3f      	ldr	r3, [pc, #252]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d44:	430a      	orrs	r2, r1
 8001d46:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a1a      	ldr	r2, [r3, #32]
 8001d4c:	2380      	movs	r3, #128	@ 0x80
 8001d4e:	05db      	lsls	r3, r3, #23
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d106      	bne.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d54:	4b3a      	ldr	r3, [pc, #232]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	4b39      	ldr	r3, [pc, #228]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d5a:	2180      	movs	r1, #128	@ 0x80
 8001d5c:	0249      	lsls	r1, r1, #9
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	2380      	movs	r3, #128	@ 0x80
 8001d68:	031b      	lsls	r3, r3, #12
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d6e:	4b34      	ldr	r3, [pc, #208]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d72:	2240      	movs	r2, #64	@ 0x40
 8001d74:	4393      	bics	r3, r2
 8001d76:	0019      	movs	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d7c:	4b30      	ldr	r3, [pc, #192]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	2380      	movs	r3, #128	@ 0x80
 8001d88:	039b      	lsls	r3, r3, #14
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d016      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d92:	4a35      	ldr	r2, [pc, #212]	@ (8001e68 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	0019      	movs	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d9c:	4b28      	ldr	r3, [pc, #160]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001da6:	2380      	movs	r3, #128	@ 0x80
 8001da8:	03db      	lsls	r3, r3, #15
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d106      	bne.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001dae:	4b24      	ldr	r3, [pc, #144]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	4b23      	ldr	r3, [pc, #140]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001db4:	2180      	movs	r1, #128	@ 0x80
 8001db6:	0449      	lsls	r1, r1, #17
 8001db8:	430a      	orrs	r2, r1
 8001dba:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2380      	movs	r3, #128	@ 0x80
 8001dc2:	03db      	lsls	r3, r3, #15
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d016      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dcc:	4a27      	ldr	r2, [pc, #156]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001de0:	2380      	movs	r3, #128	@ 0x80
 8001de2:	045b      	lsls	r3, r3, #17
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d106      	bne.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001de8:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dee:	2180      	movs	r1, #128	@ 0x80
 8001df0:	0449      	lsls	r1, r1, #17
 8001df2:	430a      	orrs	r2, r1
 8001df4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	2380      	movs	r3, #128	@ 0x80
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d016      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001e02:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e06:	4a1a      	ldr	r2, [pc, #104]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e12:	430a      	orrs	r2, r1
 8001e14:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	2380      	movs	r3, #128	@ 0x80
 8001e1c:	01db      	lsls	r3, r3, #7
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d106      	bne.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e22:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e28:	2180      	movs	r1, #128	@ 0x80
 8001e2a:	0249      	lsls	r1, r1, #9
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001e30:	2312      	movs	r3, #18
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	781b      	ldrb	r3, [r3, #0]
}
 8001e36:	0018      	movs	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b006      	add	sp, #24
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	46c0      	nop			@ (mov r8, r8)
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40007000 	.word	0x40007000
 8001e48:	fffffcff 	.word	0xfffffcff
 8001e4c:	fffeffff 	.word	0xfffeffff
 8001e50:	00001388 	.word	0x00001388
 8001e54:	efffffff 	.word	0xefffffff
 8001e58:	fffff3ff 	.word	0xfffff3ff
 8001e5c:	fff3ffff 	.word	0xfff3ffff
 8001e60:	ffcfffff 	.word	0xffcfffff
 8001e64:	ffffcfff 	.word	0xffffcfff
 8001e68:	ffbfffff 	.word	0xffbfffff
 8001e6c:	feffffff 	.word	0xfeffffff
 8001e70:	ffff3fff 	.word	0xffff3fff

08001e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e04a      	b.n	8001f1c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	223d      	movs	r2, #61	@ 0x3d
 8001e8a:	5c9b      	ldrb	r3, [r3, r2]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d107      	bne.n	8001ea2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	223c      	movs	r2, #60	@ 0x3c
 8001e96:	2100      	movs	r1, #0
 8001e98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f7fe fd63 	bl	8000968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	223d      	movs	r2, #61	@ 0x3d
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	0010      	movs	r0, r2
 8001eb6:	f000 fb55 	bl	8002564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2248      	movs	r2, #72	@ 0x48
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	223e      	movs	r2, #62	@ 0x3e
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	5499      	strb	r1, [r3, r2]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	223f      	movs	r2, #63	@ 0x3f
 8001ece:	2101      	movs	r1, #1
 8001ed0:	5499      	strb	r1, [r3, r2]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2240      	movs	r2, #64	@ 0x40
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	5499      	strb	r1, [r3, r2]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2241      	movs	r2, #65	@ 0x41
 8001ede:	2101      	movs	r1, #1
 8001ee0:	5499      	strb	r1, [r3, r2]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2242      	movs	r2, #66	@ 0x42
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	5499      	strb	r1, [r3, r2]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2243      	movs	r2, #67	@ 0x43
 8001eee:	2101      	movs	r1, #1
 8001ef0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2244      	movs	r2, #68	@ 0x44
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	5499      	strb	r1, [r3, r2]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2245      	movs	r2, #69	@ 0x45
 8001efe:	2101      	movs	r1, #1
 8001f00:	5499      	strb	r1, [r3, r2]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2246      	movs	r2, #70	@ 0x46
 8001f06:	2101      	movs	r1, #1
 8001f08:	5499      	strb	r1, [r3, r2]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2247      	movs	r2, #71	@ 0x47
 8001f0e:	2101      	movs	r1, #1
 8001f10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	223d      	movs	r2, #61	@ 0x3d
 8001f16:	2101      	movs	r1, #1
 8001f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b002      	add	sp, #8
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e04a      	b.n	8001fcc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	223d      	movs	r2, #61	@ 0x3d
 8001f3a:	5c9b      	ldrb	r3, [r3, r2]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d107      	bne.n	8001f52 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	223c      	movs	r2, #60	@ 0x3c
 8001f46:	2100      	movs	r1, #0
 8001f48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f000 f841 	bl	8001fd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	223d      	movs	r2, #61	@ 0x3d
 8001f56:	2102      	movs	r1, #2
 8001f58:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3304      	adds	r3, #4
 8001f62:	0019      	movs	r1, r3
 8001f64:	0010      	movs	r0, r2
 8001f66:	f000 fafd 	bl	8002564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2248      	movs	r2, #72	@ 0x48
 8001f6e:	2101      	movs	r1, #1
 8001f70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	223e      	movs	r2, #62	@ 0x3e
 8001f76:	2101      	movs	r1, #1
 8001f78:	5499      	strb	r1, [r3, r2]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	223f      	movs	r2, #63	@ 0x3f
 8001f7e:	2101      	movs	r1, #1
 8001f80:	5499      	strb	r1, [r3, r2]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2240      	movs	r2, #64	@ 0x40
 8001f86:	2101      	movs	r1, #1
 8001f88:	5499      	strb	r1, [r3, r2]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2241      	movs	r2, #65	@ 0x41
 8001f8e:	2101      	movs	r1, #1
 8001f90:	5499      	strb	r1, [r3, r2]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2242      	movs	r2, #66	@ 0x42
 8001f96:	2101      	movs	r1, #1
 8001f98:	5499      	strb	r1, [r3, r2]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2243      	movs	r2, #67	@ 0x43
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2244      	movs	r2, #68	@ 0x44
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	5499      	strb	r1, [r3, r2]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2245      	movs	r2, #69	@ 0x45
 8001fae:	2101      	movs	r1, #1
 8001fb0:	5499      	strb	r1, [r3, r2]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2246      	movs	r2, #70	@ 0x46
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	5499      	strb	r1, [r3, r2]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2247      	movs	r2, #71	@ 0x47
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	223d      	movs	r2, #61	@ 0x3d
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001fdc:	46c0      	nop			@ (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d108      	bne.n	8002006 <HAL_TIM_PWM_Start+0x22>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	223e      	movs	r2, #62	@ 0x3e
 8001ff8:	5c9b      	ldrb	r3, [r3, r2]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	1e5a      	subs	r2, r3, #1
 8002000:	4193      	sbcs	r3, r2
 8002002:	b2db      	uxtb	r3, r3
 8002004:	e037      	b.n	8002076 <HAL_TIM_PWM_Start+0x92>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b04      	cmp	r3, #4
 800200a:	d108      	bne.n	800201e <HAL_TIM_PWM_Start+0x3a>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	223f      	movs	r2, #63	@ 0x3f
 8002010:	5c9b      	ldrb	r3, [r3, r2]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	1e5a      	subs	r2, r3, #1
 8002018:	4193      	sbcs	r3, r2
 800201a:	b2db      	uxtb	r3, r3
 800201c:	e02b      	b.n	8002076 <HAL_TIM_PWM_Start+0x92>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b08      	cmp	r3, #8
 8002022:	d108      	bne.n	8002036 <HAL_TIM_PWM_Start+0x52>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2240      	movs	r2, #64	@ 0x40
 8002028:	5c9b      	ldrb	r3, [r3, r2]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	1e5a      	subs	r2, r3, #1
 8002030:	4193      	sbcs	r3, r2
 8002032:	b2db      	uxtb	r3, r3
 8002034:	e01f      	b.n	8002076 <HAL_TIM_PWM_Start+0x92>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b0c      	cmp	r3, #12
 800203a:	d108      	bne.n	800204e <HAL_TIM_PWM_Start+0x6a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2241      	movs	r2, #65	@ 0x41
 8002040:	5c9b      	ldrb	r3, [r3, r2]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	3b01      	subs	r3, #1
 8002046:	1e5a      	subs	r2, r3, #1
 8002048:	4193      	sbcs	r3, r2
 800204a:	b2db      	uxtb	r3, r3
 800204c:	e013      	b.n	8002076 <HAL_TIM_PWM_Start+0x92>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b10      	cmp	r3, #16
 8002052:	d108      	bne.n	8002066 <HAL_TIM_PWM_Start+0x82>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2242      	movs	r2, #66	@ 0x42
 8002058:	5c9b      	ldrb	r3, [r3, r2]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	1e5a      	subs	r2, r3, #1
 8002060:	4193      	sbcs	r3, r2
 8002062:	b2db      	uxtb	r3, r3
 8002064:	e007      	b.n	8002076 <HAL_TIM_PWM_Start+0x92>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2243      	movs	r2, #67	@ 0x43
 800206a:	5c9b      	ldrb	r3, [r3, r2]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	3b01      	subs	r3, #1
 8002070:	1e5a      	subs	r2, r3, #1
 8002072:	4193      	sbcs	r3, r2
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e08b      	b.n	8002196 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d104      	bne.n	800208e <HAL_TIM_PWM_Start+0xaa>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	223e      	movs	r2, #62	@ 0x3e
 8002088:	2102      	movs	r1, #2
 800208a:	5499      	strb	r1, [r3, r2]
 800208c:	e023      	b.n	80020d6 <HAL_TIM_PWM_Start+0xf2>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b04      	cmp	r3, #4
 8002092:	d104      	bne.n	800209e <HAL_TIM_PWM_Start+0xba>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	223f      	movs	r2, #63	@ 0x3f
 8002098:	2102      	movs	r1, #2
 800209a:	5499      	strb	r1, [r3, r2]
 800209c:	e01b      	b.n	80020d6 <HAL_TIM_PWM_Start+0xf2>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d104      	bne.n	80020ae <HAL_TIM_PWM_Start+0xca>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2240      	movs	r2, #64	@ 0x40
 80020a8:	2102      	movs	r1, #2
 80020aa:	5499      	strb	r1, [r3, r2]
 80020ac:	e013      	b.n	80020d6 <HAL_TIM_PWM_Start+0xf2>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2b0c      	cmp	r3, #12
 80020b2:	d104      	bne.n	80020be <HAL_TIM_PWM_Start+0xda>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2241      	movs	r2, #65	@ 0x41
 80020b8:	2102      	movs	r1, #2
 80020ba:	5499      	strb	r1, [r3, r2]
 80020bc:	e00b      	b.n	80020d6 <HAL_TIM_PWM_Start+0xf2>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b10      	cmp	r3, #16
 80020c2:	d104      	bne.n	80020ce <HAL_TIM_PWM_Start+0xea>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2242      	movs	r2, #66	@ 0x42
 80020c8:	2102      	movs	r1, #2
 80020ca:	5499      	strb	r1, [r3, r2]
 80020cc:	e003      	b.n	80020d6 <HAL_TIM_PWM_Start+0xf2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2243      	movs	r2, #67	@ 0x43
 80020d2:	2102      	movs	r1, #2
 80020d4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6839      	ldr	r1, [r7, #0]
 80020dc:	2201      	movs	r2, #1
 80020de:	0018      	movs	r0, r3
 80020e0:	f000 fe2e 	bl	8002d40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a2d      	ldr	r2, [pc, #180]	@ (80021a0 <HAL_TIM_PWM_Start+0x1bc>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d00e      	beq.n	800210c <HAL_TIM_PWM_Start+0x128>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a2c      	ldr	r2, [pc, #176]	@ (80021a4 <HAL_TIM_PWM_Start+0x1c0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d009      	beq.n	800210c <HAL_TIM_PWM_Start+0x128>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a2a      	ldr	r2, [pc, #168]	@ (80021a8 <HAL_TIM_PWM_Start+0x1c4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d004      	beq.n	800210c <HAL_TIM_PWM_Start+0x128>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a29      	ldr	r2, [pc, #164]	@ (80021ac <HAL_TIM_PWM_Start+0x1c8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d101      	bne.n	8002110 <HAL_TIM_PWM_Start+0x12c>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <HAL_TIM_PWM_Start+0x12e>
 8002110:	2300      	movs	r3, #0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d008      	beq.n	8002128 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2180      	movs	r1, #128	@ 0x80
 8002122:	0209      	lsls	r1, r1, #8
 8002124:	430a      	orrs	r2, r1
 8002126:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a1c      	ldr	r2, [pc, #112]	@ (80021a0 <HAL_TIM_PWM_Start+0x1bc>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00f      	beq.n	8002152 <HAL_TIM_PWM_Start+0x16e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	2380      	movs	r3, #128	@ 0x80
 8002138:	05db      	lsls	r3, r3, #23
 800213a:	429a      	cmp	r2, r3
 800213c:	d009      	beq.n	8002152 <HAL_TIM_PWM_Start+0x16e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1b      	ldr	r2, [pc, #108]	@ (80021b0 <HAL_TIM_PWM_Start+0x1cc>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d004      	beq.n	8002152 <HAL_TIM_PWM_Start+0x16e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a15      	ldr	r2, [pc, #84]	@ (80021a4 <HAL_TIM_PWM_Start+0x1c0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d116      	bne.n	8002180 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4a16      	ldr	r2, [pc, #88]	@ (80021b4 <HAL_TIM_PWM_Start+0x1d0>)
 800215a:	4013      	ands	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b06      	cmp	r3, #6
 8002162:	d016      	beq.n	8002192 <HAL_TIM_PWM_Start+0x1ae>
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	025b      	lsls	r3, r3, #9
 800216a:	429a      	cmp	r2, r3
 800216c:	d011      	beq.n	8002192 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2101      	movs	r1, #1
 800217a:	430a      	orrs	r2, r1
 800217c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800217e:	e008      	b.n	8002192 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2101      	movs	r1, #1
 800218c:	430a      	orrs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	e000      	b.n	8002194 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002192:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	0018      	movs	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	b004      	add	sp, #16
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			@ (mov r8, r8)
 80021a0:	40012c00 	.word	0x40012c00
 80021a4:	40014000 	.word	0x40014000
 80021a8:	40014400 	.word	0x40014400
 80021ac:	40014800 	.word	0x40014800
 80021b0:	40000400 	.word	0x40000400
 80021b4:	00010007 	.word	0x00010007

080021b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c4:	2317      	movs	r3, #23
 80021c6:	18fb      	adds	r3, r7, r3
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	223c      	movs	r2, #60	@ 0x3c
 80021d0:	5c9b      	ldrb	r3, [r3, r2]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_TIM_PWM_ConfigChannel+0x22>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e0e5      	b.n	80023a6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	223c      	movs	r2, #60	@ 0x3c
 80021de:	2101      	movs	r1, #1
 80021e0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b14      	cmp	r3, #20
 80021e6:	d900      	bls.n	80021ea <HAL_TIM_PWM_ConfigChannel+0x32>
 80021e8:	e0d1      	b.n	800238e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	009a      	lsls	r2, r3, #2
 80021ee:	4b70      	ldr	r3, [pc, #448]	@ (80023b0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80021f0:	18d3      	adds	r3, r2, r3
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	0011      	movs	r1, r2
 80021fe:	0018      	movs	r0, r3
 8002200:	f000 fa3e 	bl	8002680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2108      	movs	r1, #8
 8002210:	430a      	orrs	r2, r1
 8002212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2104      	movs	r1, #4
 8002220:	438a      	bics	r2, r1
 8002222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6999      	ldr	r1, [r3, #24]
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	619a      	str	r2, [r3, #24]
      break;
 8002236:	e0af      	b.n	8002398 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	0011      	movs	r1, r2
 8002240:	0018      	movs	r0, r3
 8002242:	f000 faa7 	bl	8002794 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699a      	ldr	r2, [r3, #24]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2180      	movs	r1, #128	@ 0x80
 8002252:	0109      	lsls	r1, r1, #4
 8002254:	430a      	orrs	r2, r1
 8002256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4954      	ldr	r1, [pc, #336]	@ (80023b4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002264:	400a      	ands	r2, r1
 8002266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6999      	ldr	r1, [r3, #24]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	021a      	lsls	r2, r3, #8
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	619a      	str	r2, [r3, #24]
      break;
 800227c:	e08c      	b.n	8002398 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	0011      	movs	r1, r2
 8002286:	0018      	movs	r0, r3
 8002288:	f000 fb08 	bl	800289c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	69da      	ldr	r2, [r3, #28]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2108      	movs	r1, #8
 8002298:	430a      	orrs	r2, r1
 800229a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2104      	movs	r1, #4
 80022a8:	438a      	bics	r2, r1
 80022aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	69d9      	ldr	r1, [r3, #28]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	61da      	str	r2, [r3, #28]
      break;
 80022be:	e06b      	b.n	8002398 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	0011      	movs	r1, r2
 80022c8:	0018      	movs	r0, r3
 80022ca:	f000 fb6f 	bl	80029ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	69da      	ldr	r2, [r3, #28]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2180      	movs	r1, #128	@ 0x80
 80022da:	0109      	lsls	r1, r1, #4
 80022dc:	430a      	orrs	r2, r1
 80022de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	69da      	ldr	r2, [r3, #28]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4932      	ldr	r1, [pc, #200]	@ (80023b4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80022ec:	400a      	ands	r2, r1
 80022ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	69d9      	ldr	r1, [r3, #28]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	021a      	lsls	r2, r3, #8
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	61da      	str	r2, [r3, #28]
      break;
 8002304:	e048      	b.n	8002398 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	0011      	movs	r1, r2
 800230e:	0018      	movs	r0, r3
 8002310:	f000 fbb6 	bl	8002a80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2108      	movs	r1, #8
 8002320:	430a      	orrs	r2, r1
 8002322:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2104      	movs	r1, #4
 8002330:	438a      	bics	r2, r1
 8002332:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002346:	e027      	b.n	8002398 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	0011      	movs	r1, r2
 8002350:	0018      	movs	r0, r3
 8002352:	f000 fbf5 	bl	8002b40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2180      	movs	r1, #128	@ 0x80
 8002362:	0109      	lsls	r1, r1, #4
 8002364:	430a      	orrs	r2, r1
 8002366:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4910      	ldr	r1, [pc, #64]	@ (80023b4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002374:	400a      	ands	r2, r1
 8002376:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	021a      	lsls	r2, r3, #8
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800238c:	e004      	b.n	8002398 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800238e:	2317      	movs	r3, #23
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
      break;
 8002396:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	223c      	movs	r2, #60	@ 0x3c
 800239c:	2100      	movs	r1, #0
 800239e:	5499      	strb	r1, [r3, r2]

  return status;
 80023a0:	2317      	movs	r3, #23
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	781b      	ldrb	r3, [r3, #0]
}
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b006      	add	sp, #24
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	08003bf8 	.word	0x08003bf8
 80023b4:	fffffbff 	.word	0xfffffbff

080023b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023c2:	230f      	movs	r3, #15
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	223c      	movs	r2, #60	@ 0x3c
 80023ce:	5c9b      	ldrb	r3, [r3, r2]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_TIM_ConfigClockSource+0x20>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e0bc      	b.n	8002552 <HAL_TIM_ConfigClockSource+0x19a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	223c      	movs	r2, #60	@ 0x3c
 80023dc:	2101      	movs	r1, #1
 80023de:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	223d      	movs	r2, #61	@ 0x3d
 80023e4:	2102      	movs	r1, #2
 80023e6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4a5a      	ldr	r2, [pc, #360]	@ (800255c <HAL_TIM_ConfigClockSource+0x1a4>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4a59      	ldr	r2, [pc, #356]	@ (8002560 <HAL_TIM_ConfigClockSource+0x1a8>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2280      	movs	r2, #128	@ 0x80
 800240e:	0192      	lsls	r2, r2, #6
 8002410:	4293      	cmp	r3, r2
 8002412:	d040      	beq.n	8002496 <HAL_TIM_ConfigClockSource+0xde>
 8002414:	2280      	movs	r2, #128	@ 0x80
 8002416:	0192      	lsls	r2, r2, #6
 8002418:	4293      	cmp	r3, r2
 800241a:	d900      	bls.n	800241e <HAL_TIM_ConfigClockSource+0x66>
 800241c:	e088      	b.n	8002530 <HAL_TIM_ConfigClockSource+0x178>
 800241e:	2280      	movs	r2, #128	@ 0x80
 8002420:	0152      	lsls	r2, r2, #5
 8002422:	4293      	cmp	r3, r2
 8002424:	d100      	bne.n	8002428 <HAL_TIM_ConfigClockSource+0x70>
 8002426:	e088      	b.n	800253a <HAL_TIM_ConfigClockSource+0x182>
 8002428:	2280      	movs	r2, #128	@ 0x80
 800242a:	0152      	lsls	r2, r2, #5
 800242c:	4293      	cmp	r3, r2
 800242e:	d900      	bls.n	8002432 <HAL_TIM_ConfigClockSource+0x7a>
 8002430:	e07e      	b.n	8002530 <HAL_TIM_ConfigClockSource+0x178>
 8002432:	2b70      	cmp	r3, #112	@ 0x70
 8002434:	d018      	beq.n	8002468 <HAL_TIM_ConfigClockSource+0xb0>
 8002436:	d900      	bls.n	800243a <HAL_TIM_ConfigClockSource+0x82>
 8002438:	e07a      	b.n	8002530 <HAL_TIM_ConfigClockSource+0x178>
 800243a:	2b60      	cmp	r3, #96	@ 0x60
 800243c:	d04f      	beq.n	80024de <HAL_TIM_ConfigClockSource+0x126>
 800243e:	d900      	bls.n	8002442 <HAL_TIM_ConfigClockSource+0x8a>
 8002440:	e076      	b.n	8002530 <HAL_TIM_ConfigClockSource+0x178>
 8002442:	2b50      	cmp	r3, #80	@ 0x50
 8002444:	d03b      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x106>
 8002446:	d900      	bls.n	800244a <HAL_TIM_ConfigClockSource+0x92>
 8002448:	e072      	b.n	8002530 <HAL_TIM_ConfigClockSource+0x178>
 800244a:	2b40      	cmp	r3, #64	@ 0x40
 800244c:	d057      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0x146>
 800244e:	d900      	bls.n	8002452 <HAL_TIM_ConfigClockSource+0x9a>
 8002450:	e06e      	b.n	8002530 <HAL_TIM_ConfigClockSource+0x178>
 8002452:	2b30      	cmp	r3, #48	@ 0x30
 8002454:	d063      	beq.n	800251e <HAL_TIM_ConfigClockSource+0x166>
 8002456:	d86b      	bhi.n	8002530 <HAL_TIM_ConfigClockSource+0x178>
 8002458:	2b20      	cmp	r3, #32
 800245a:	d060      	beq.n	800251e <HAL_TIM_ConfigClockSource+0x166>
 800245c:	d868      	bhi.n	8002530 <HAL_TIM_ConfigClockSource+0x178>
 800245e:	2b00      	cmp	r3, #0
 8002460:	d05d      	beq.n	800251e <HAL_TIM_ConfigClockSource+0x166>
 8002462:	2b10      	cmp	r3, #16
 8002464:	d05b      	beq.n	800251e <HAL_TIM_ConfigClockSource+0x166>
 8002466:	e063      	b.n	8002530 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002478:	f000 fc42 	bl	8002d00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2277      	movs	r2, #119	@ 0x77
 8002488:	4313      	orrs	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	609a      	str	r2, [r3, #8]
      break;
 8002494:	e052      	b.n	800253c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024a6:	f000 fc2b 	bl	8002d00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2180      	movs	r1, #128	@ 0x80
 80024b6:	01c9      	lsls	r1, r1, #7
 80024b8:	430a      	orrs	r2, r1
 80024ba:	609a      	str	r2, [r3, #8]
      break;
 80024bc:	e03e      	b.n	800253c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ca:	001a      	movs	r2, r3
 80024cc:	f000 fb9c 	bl	8002c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2150      	movs	r1, #80	@ 0x50
 80024d6:	0018      	movs	r0, r3
 80024d8:	f000 fbf6 	bl	8002cc8 <TIM_ITRx_SetConfig>
      break;
 80024dc:	e02e      	b.n	800253c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ea:	001a      	movs	r2, r3
 80024ec:	f000 fbba 	bl	8002c64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2160      	movs	r1, #96	@ 0x60
 80024f6:	0018      	movs	r0, r3
 80024f8:	f000 fbe6 	bl	8002cc8 <TIM_ITRx_SetConfig>
      break;
 80024fc:	e01e      	b.n	800253c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800250a:	001a      	movs	r2, r3
 800250c:	f000 fb7c 	bl	8002c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2140      	movs	r1, #64	@ 0x40
 8002516:	0018      	movs	r0, r3
 8002518:	f000 fbd6 	bl	8002cc8 <TIM_ITRx_SetConfig>
      break;
 800251c:	e00e      	b.n	800253c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	0019      	movs	r1, r3
 8002528:	0010      	movs	r0, r2
 800252a:	f000 fbcd 	bl	8002cc8 <TIM_ITRx_SetConfig>
      break;
 800252e:	e005      	b.n	800253c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002530:	230f      	movs	r3, #15
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
      break;
 8002538:	e000      	b.n	800253c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800253a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	223d      	movs	r2, #61	@ 0x3d
 8002540:	2101      	movs	r1, #1
 8002542:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	223c      	movs	r2, #60	@ 0x3c
 8002548:	2100      	movs	r1, #0
 800254a:	5499      	strb	r1, [r3, r2]

  return status;
 800254c:	230f      	movs	r3, #15
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	781b      	ldrb	r3, [r3, #0]
}
 8002552:	0018      	movs	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	b004      	add	sp, #16
 8002558:	bd80      	pop	{r7, pc}
 800255a:	46c0      	nop			@ (mov r8, r8)
 800255c:	ffceff88 	.word	0xffceff88
 8002560:	ffff00ff 	.word	0xffff00ff

08002564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a3b      	ldr	r2, [pc, #236]	@ (8002664 <TIM_Base_SetConfig+0x100>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d008      	beq.n	800258e <TIM_Base_SetConfig+0x2a>
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	2380      	movs	r3, #128	@ 0x80
 8002580:	05db      	lsls	r3, r3, #23
 8002582:	429a      	cmp	r2, r3
 8002584:	d003      	beq.n	800258e <TIM_Base_SetConfig+0x2a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a37      	ldr	r2, [pc, #220]	@ (8002668 <TIM_Base_SetConfig+0x104>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d108      	bne.n	80025a0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2270      	movs	r2, #112	@ 0x70
 8002592:	4393      	bics	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a30      	ldr	r2, [pc, #192]	@ (8002664 <TIM_Base_SetConfig+0x100>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d018      	beq.n	80025da <TIM_Base_SetConfig+0x76>
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	2380      	movs	r3, #128	@ 0x80
 80025ac:	05db      	lsls	r3, r3, #23
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d013      	beq.n	80025da <TIM_Base_SetConfig+0x76>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002668 <TIM_Base_SetConfig+0x104>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00f      	beq.n	80025da <TIM_Base_SetConfig+0x76>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a2b      	ldr	r2, [pc, #172]	@ (800266c <TIM_Base_SetConfig+0x108>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00b      	beq.n	80025da <TIM_Base_SetConfig+0x76>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002670 <TIM_Base_SetConfig+0x10c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d007      	beq.n	80025da <TIM_Base_SetConfig+0x76>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a29      	ldr	r2, [pc, #164]	@ (8002674 <TIM_Base_SetConfig+0x110>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d003      	beq.n	80025da <TIM_Base_SetConfig+0x76>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a28      	ldr	r2, [pc, #160]	@ (8002678 <TIM_Base_SetConfig+0x114>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d108      	bne.n	80025ec <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4a27      	ldr	r2, [pc, #156]	@ (800267c <TIM_Base_SetConfig+0x118>)
 80025de:	4013      	ands	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2280      	movs	r2, #128	@ 0x80
 80025f0:	4393      	bics	r3, r2
 80025f2:	001a      	movs	r2, r3
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a13      	ldr	r2, [pc, #76]	@ (8002664 <TIM_Base_SetConfig+0x100>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00b      	beq.n	8002632 <TIM_Base_SetConfig+0xce>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a14      	ldr	r2, [pc, #80]	@ (8002670 <TIM_Base_SetConfig+0x10c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <TIM_Base_SetConfig+0xce>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a13      	ldr	r2, [pc, #76]	@ (8002674 <TIM_Base_SetConfig+0x110>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d003      	beq.n	8002632 <TIM_Base_SetConfig+0xce>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a12      	ldr	r2, [pc, #72]	@ (8002678 <TIM_Base_SetConfig+0x114>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d103      	bne.n	800263a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2201      	movs	r2, #1
 8002646:	4013      	ands	r3, r2
 8002648:	2b01      	cmp	r3, #1
 800264a:	d106      	bne.n	800265a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	2201      	movs	r2, #1
 8002652:	4393      	bics	r3, r2
 8002654:	001a      	movs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	611a      	str	r2, [r3, #16]
  }
}
 800265a:	46c0      	nop			@ (mov r8, r8)
 800265c:	46bd      	mov	sp, r7
 800265e:	b004      	add	sp, #16
 8002660:	bd80      	pop	{r7, pc}
 8002662:	46c0      	nop			@ (mov r8, r8)
 8002664:	40012c00 	.word	0x40012c00
 8002668:	40000400 	.word	0x40000400
 800266c:	40002000 	.word	0x40002000
 8002670:	40014000 	.word	0x40014000
 8002674:	40014400 	.word	0x40014400
 8002678:	40014800 	.word	0x40014800
 800267c:	fffffcff 	.word	0xfffffcff

08002680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	2201      	movs	r2, #1
 8002696:	4393      	bics	r3, r2
 8002698:	001a      	movs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4a32      	ldr	r2, [pc, #200]	@ (8002778 <TIM_OC1_SetConfig+0xf8>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2203      	movs	r2, #3
 80026b6:	4393      	bics	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2202      	movs	r2, #2
 80026c8:	4393      	bics	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a28      	ldr	r2, [pc, #160]	@ (800277c <TIM_OC1_SetConfig+0xfc>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00b      	beq.n	80026f6 <TIM_OC1_SetConfig+0x76>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a27      	ldr	r2, [pc, #156]	@ (8002780 <TIM_OC1_SetConfig+0x100>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d007      	beq.n	80026f6 <TIM_OC1_SetConfig+0x76>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a26      	ldr	r2, [pc, #152]	@ (8002784 <TIM_OC1_SetConfig+0x104>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d003      	beq.n	80026f6 <TIM_OC1_SetConfig+0x76>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a25      	ldr	r2, [pc, #148]	@ (8002788 <TIM_OC1_SetConfig+0x108>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10c      	bne.n	8002710 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2208      	movs	r2, #8
 80026fa:	4393      	bics	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2204      	movs	r2, #4
 800270c:	4393      	bics	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a1a      	ldr	r2, [pc, #104]	@ (800277c <TIM_OC1_SetConfig+0xfc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00b      	beq.n	8002730 <TIM_OC1_SetConfig+0xb0>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a19      	ldr	r2, [pc, #100]	@ (8002780 <TIM_OC1_SetConfig+0x100>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d007      	beq.n	8002730 <TIM_OC1_SetConfig+0xb0>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a18      	ldr	r2, [pc, #96]	@ (8002784 <TIM_OC1_SetConfig+0x104>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d003      	beq.n	8002730 <TIM_OC1_SetConfig+0xb0>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a17      	ldr	r2, [pc, #92]	@ (8002788 <TIM_OC1_SetConfig+0x108>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d111      	bne.n	8002754 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4a16      	ldr	r2, [pc, #88]	@ (800278c <TIM_OC1_SetConfig+0x10c>)
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4a15      	ldr	r2, [pc, #84]	@ (8002790 <TIM_OC1_SetConfig+0x110>)
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	621a      	str	r2, [r3, #32]
}
 800276e:	46c0      	nop			@ (mov r8, r8)
 8002770:	46bd      	mov	sp, r7
 8002772:	b006      	add	sp, #24
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	fffeff8f 	.word	0xfffeff8f
 800277c:	40012c00 	.word	0x40012c00
 8002780:	40014000 	.word	0x40014000
 8002784:	40014400 	.word	0x40014400
 8002788:	40014800 	.word	0x40014800
 800278c:	fffffeff 	.word	0xfffffeff
 8002790:	fffffdff 	.word	0xfffffdff

08002794 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	2210      	movs	r2, #16
 80027aa:	4393      	bics	r3, r2
 80027ac:	001a      	movs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4a2e      	ldr	r2, [pc, #184]	@ (800287c <TIM_OC2_SetConfig+0xe8>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002880 <TIM_OC2_SetConfig+0xec>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2220      	movs	r2, #32
 80027de:	4393      	bics	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a24      	ldr	r2, [pc, #144]	@ (8002884 <TIM_OC2_SetConfig+0xf0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d10d      	bne.n	8002812 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2280      	movs	r2, #128	@ 0x80
 80027fa:	4393      	bics	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2240      	movs	r2, #64	@ 0x40
 800280e:	4393      	bics	r3, r2
 8002810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a1b      	ldr	r2, [pc, #108]	@ (8002884 <TIM_OC2_SetConfig+0xf0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00b      	beq.n	8002832 <TIM_OC2_SetConfig+0x9e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a1a      	ldr	r2, [pc, #104]	@ (8002888 <TIM_OC2_SetConfig+0xf4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d007      	beq.n	8002832 <TIM_OC2_SetConfig+0x9e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a19      	ldr	r2, [pc, #100]	@ (800288c <TIM_OC2_SetConfig+0xf8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d003      	beq.n	8002832 <TIM_OC2_SetConfig+0x9e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a18      	ldr	r2, [pc, #96]	@ (8002890 <TIM_OC2_SetConfig+0xfc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d113      	bne.n	800285a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4a17      	ldr	r2, [pc, #92]	@ (8002894 <TIM_OC2_SetConfig+0x100>)
 8002836:	4013      	ands	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4a16      	ldr	r2, [pc, #88]	@ (8002898 <TIM_OC2_SetConfig+0x104>)
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	621a      	str	r2, [r3, #32]
}
 8002874:	46c0      	nop			@ (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	b006      	add	sp, #24
 800287a:	bd80      	pop	{r7, pc}
 800287c:	feff8fff 	.word	0xfeff8fff
 8002880:	fffffcff 	.word	0xfffffcff
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40014000 	.word	0x40014000
 800288c:	40014400 	.word	0x40014400
 8002890:	40014800 	.word	0x40014800
 8002894:	fffffbff 	.word	0xfffffbff
 8002898:	fffff7ff 	.word	0xfffff7ff

0800289c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	4a33      	ldr	r2, [pc, #204]	@ (8002980 <TIM_OC3_SetConfig+0xe4>)
 80028b2:	401a      	ands	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a2f      	ldr	r2, [pc, #188]	@ (8002984 <TIM_OC3_SetConfig+0xe8>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2203      	movs	r2, #3
 80028d0:	4393      	bics	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	4a29      	ldr	r2, [pc, #164]	@ (8002988 <TIM_OC3_SetConfig+0xec>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	021b      	lsls	r3, r3, #8
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a25      	ldr	r2, [pc, #148]	@ (800298c <TIM_OC3_SetConfig+0xf0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10d      	bne.n	8002916 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	4a24      	ldr	r2, [pc, #144]	@ (8002990 <TIM_OC3_SetConfig+0xf4>)
 80028fe:	4013      	ands	r3, r2
 8002900:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	4a20      	ldr	r2, [pc, #128]	@ (8002994 <TIM_OC3_SetConfig+0xf8>)
 8002912:	4013      	ands	r3, r2
 8002914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a1c      	ldr	r2, [pc, #112]	@ (800298c <TIM_OC3_SetConfig+0xf0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00b      	beq.n	8002936 <TIM_OC3_SetConfig+0x9a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a1d      	ldr	r2, [pc, #116]	@ (8002998 <TIM_OC3_SetConfig+0xfc>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d007      	beq.n	8002936 <TIM_OC3_SetConfig+0x9a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a1c      	ldr	r2, [pc, #112]	@ (800299c <TIM_OC3_SetConfig+0x100>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d003      	beq.n	8002936 <TIM_OC3_SetConfig+0x9a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a1b      	ldr	r2, [pc, #108]	@ (80029a0 <TIM_OC3_SetConfig+0x104>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d113      	bne.n	800295e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4a1a      	ldr	r2, [pc, #104]	@ (80029a4 <TIM_OC3_SetConfig+0x108>)
 800293a:	4013      	ands	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4a19      	ldr	r2, [pc, #100]	@ (80029a8 <TIM_OC3_SetConfig+0x10c>)
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	621a      	str	r2, [r3, #32]
}
 8002978:	46c0      	nop			@ (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b006      	add	sp, #24
 800297e:	bd80      	pop	{r7, pc}
 8002980:	fffffeff 	.word	0xfffffeff
 8002984:	fffeff8f 	.word	0xfffeff8f
 8002988:	fffffdff 	.word	0xfffffdff
 800298c:	40012c00 	.word	0x40012c00
 8002990:	fffff7ff 	.word	0xfffff7ff
 8002994:	fffffbff 	.word	0xfffffbff
 8002998:	40014000 	.word	0x40014000
 800299c:	40014400 	.word	0x40014400
 80029a0:	40014800 	.word	0x40014800
 80029a4:	ffffefff 	.word	0xffffefff
 80029a8:	ffffdfff 	.word	0xffffdfff

080029ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	4a26      	ldr	r2, [pc, #152]	@ (8002a5c <TIM_OC4_SetConfig+0xb0>)
 80029c2:	401a      	ands	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a22      	ldr	r2, [pc, #136]	@ (8002a60 <TIM_OC4_SetConfig+0xb4>)
 80029d8:	4013      	ands	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4a21      	ldr	r2, [pc, #132]	@ (8002a64 <TIM_OC4_SetConfig+0xb8>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a68 <TIM_OC4_SetConfig+0xbc>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	031b      	lsls	r3, r3, #12
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a19      	ldr	r2, [pc, #100]	@ (8002a6c <TIM_OC4_SetConfig+0xc0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00b      	beq.n	8002a24 <TIM_OC4_SetConfig+0x78>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a18      	ldr	r2, [pc, #96]	@ (8002a70 <TIM_OC4_SetConfig+0xc4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d007      	beq.n	8002a24 <TIM_OC4_SetConfig+0x78>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a17      	ldr	r2, [pc, #92]	@ (8002a74 <TIM_OC4_SetConfig+0xc8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d003      	beq.n	8002a24 <TIM_OC4_SetConfig+0x78>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a16      	ldr	r2, [pc, #88]	@ (8002a78 <TIM_OC4_SetConfig+0xcc>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d109      	bne.n	8002a38 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	4a15      	ldr	r2, [pc, #84]	@ (8002a7c <TIM_OC4_SetConfig+0xd0>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	019b      	lsls	r3, r3, #6
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	621a      	str	r2, [r3, #32]
}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b006      	add	sp, #24
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	46c0      	nop			@ (mov r8, r8)
 8002a5c:	ffffefff 	.word	0xffffefff
 8002a60:	feff8fff 	.word	0xfeff8fff
 8002a64:	fffffcff 	.word	0xfffffcff
 8002a68:	ffffdfff 	.word	0xffffdfff
 8002a6c:	40012c00 	.word	0x40012c00
 8002a70:	40014000 	.word	0x40014000
 8002a74:	40014400 	.word	0x40014400
 8002a78:	40014800 	.word	0x40014800
 8002a7c:	ffffbfff 	.word	0xffffbfff

08002a80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	4a23      	ldr	r2, [pc, #140]	@ (8002b24 <TIM_OC5_SetConfig+0xa4>)
 8002a96:	401a      	ands	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8002b28 <TIM_OC5_SetConfig+0xa8>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4a1b      	ldr	r2, [pc, #108]	@ (8002b2c <TIM_OC5_SetConfig+0xac>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	041b      	lsls	r3, r3, #16
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a17      	ldr	r2, [pc, #92]	@ (8002b30 <TIM_OC5_SetConfig+0xb0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00b      	beq.n	8002aee <TIM_OC5_SetConfig+0x6e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a16      	ldr	r2, [pc, #88]	@ (8002b34 <TIM_OC5_SetConfig+0xb4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d007      	beq.n	8002aee <TIM_OC5_SetConfig+0x6e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a15      	ldr	r2, [pc, #84]	@ (8002b38 <TIM_OC5_SetConfig+0xb8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d003      	beq.n	8002aee <TIM_OC5_SetConfig+0x6e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a14      	ldr	r2, [pc, #80]	@ (8002b3c <TIM_OC5_SetConfig+0xbc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d109      	bne.n	8002b02 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	4a0c      	ldr	r2, [pc, #48]	@ (8002b24 <TIM_OC5_SetConfig+0xa4>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	621a      	str	r2, [r3, #32]
}
 8002b1c:	46c0      	nop			@ (mov r8, r8)
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b006      	add	sp, #24
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	fffeffff 	.word	0xfffeffff
 8002b28:	fffeff8f 	.word	0xfffeff8f
 8002b2c:	fffdffff 	.word	0xfffdffff
 8002b30:	40012c00 	.word	0x40012c00
 8002b34:	40014000 	.word	0x40014000
 8002b38:	40014400 	.word	0x40014400
 8002b3c:	40014800 	.word	0x40014800

08002b40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	4a24      	ldr	r2, [pc, #144]	@ (8002be8 <TIM_OC6_SetConfig+0xa8>)
 8002b56:	401a      	ands	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a20      	ldr	r2, [pc, #128]	@ (8002bec <TIM_OC6_SetConfig+0xac>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf0 <TIM_OC6_SetConfig+0xb0>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	051b      	lsls	r3, r3, #20
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a18      	ldr	r2, [pc, #96]	@ (8002bf4 <TIM_OC6_SetConfig+0xb4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00b      	beq.n	8002bb0 <TIM_OC6_SetConfig+0x70>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a17      	ldr	r2, [pc, #92]	@ (8002bf8 <TIM_OC6_SetConfig+0xb8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d007      	beq.n	8002bb0 <TIM_OC6_SetConfig+0x70>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a16      	ldr	r2, [pc, #88]	@ (8002bfc <TIM_OC6_SetConfig+0xbc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d003      	beq.n	8002bb0 <TIM_OC6_SetConfig+0x70>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a15      	ldr	r2, [pc, #84]	@ (8002c00 <TIM_OC6_SetConfig+0xc0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d109      	bne.n	8002bc4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	4a14      	ldr	r2, [pc, #80]	@ (8002c04 <TIM_OC6_SetConfig+0xc4>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	029b      	lsls	r3, r3, #10
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	621a      	str	r2, [r3, #32]
}
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b006      	add	sp, #24
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	ffefffff 	.word	0xffefffff
 8002bec:	feff8fff 	.word	0xfeff8fff
 8002bf0:	ffdfffff 	.word	0xffdfffff
 8002bf4:	40012c00 	.word	0x40012c00
 8002bf8:	40014000 	.word	0x40014000
 8002bfc:	40014400 	.word	0x40014400
 8002c00:	40014800 	.word	0x40014800
 8002c04:	fffbffff 	.word	0xfffbffff

08002c08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4393      	bics	r3, r2
 8002c22:	001a      	movs	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	22f0      	movs	r2, #240	@ 0xf0
 8002c32:	4393      	bics	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	220a      	movs	r2, #10
 8002c44:	4393      	bics	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	621a      	str	r2, [r3, #32]
}
 8002c5c:	46c0      	nop			@ (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b006      	add	sp, #24
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	2210      	movs	r2, #16
 8002c7c:	4393      	bics	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc4 <TIM_TI2_ConfigInputStage+0x60>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	031b      	lsls	r3, r3, #12
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	22a0      	movs	r2, #160	@ 0xa0
 8002ca0:	4393      	bics	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	621a      	str	r2, [r3, #32]
}
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b006      	add	sp, #24
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	46c0      	nop			@ (mov r8, r8)
 8002cc4:	ffff0fff 	.word	0xffff0fff

08002cc8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4a08      	ldr	r2, [pc, #32]	@ (8002cfc <TIM_ITRx_SetConfig+0x34>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	2207      	movs	r2, #7
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	609a      	str	r2, [r3, #8]
}
 8002cf2:	46c0      	nop			@ (mov r8, r8)
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b004      	add	sp, #16
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	46c0      	nop			@ (mov r8, r8)
 8002cfc:	ffcfff8f 	.word	0xffcfff8f

08002d00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	4a09      	ldr	r2, [pc, #36]	@ (8002d3c <TIM_ETR_SetConfig+0x3c>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	021a      	lsls	r2, r3, #8
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	609a      	str	r2, [r3, #8]
}
 8002d34:	46c0      	nop			@ (mov r8, r8)
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b006      	add	sp, #24
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	ffff00ff 	.word	0xffff00ff

08002d40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	221f      	movs	r2, #31
 8002d50:	4013      	ands	r3, r2
 8002d52:	2201      	movs	r2, #1
 8002d54:	409a      	lsls	r2, r3
 8002d56:	0013      	movs	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	43d2      	mvns	r2, r2
 8002d62:	401a      	ands	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a1a      	ldr	r2, [r3, #32]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	211f      	movs	r1, #31
 8002d70:	400b      	ands	r3, r1
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4099      	lsls	r1, r3
 8002d76:	000b      	movs	r3, r1
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	621a      	str	r2, [r3, #32]
}
 8002d7e:	46c0      	nop			@ (mov r8, r8)
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b006      	add	sp, #24
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	223c      	movs	r2, #60	@ 0x3c
 8002d96:	5c9b      	ldrb	r3, [r3, r2]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e055      	b.n	8002e4c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	223c      	movs	r2, #60	@ 0x3c
 8002da4:	2101      	movs	r1, #1
 8002da6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	223d      	movs	r2, #61	@ 0x3d
 8002dac:	2102      	movs	r1, #2
 8002dae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a23      	ldr	r2, [pc, #140]	@ (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d108      	bne.n	8002ddc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a22      	ldr	r2, [pc, #136]	@ (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2270      	movs	r2, #112	@ 0x70
 8002de0:	4393      	bics	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a16      	ldr	r2, [pc, #88]	@ (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00f      	beq.n	8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	2380      	movs	r3, #128	@ 0x80
 8002e06:	05db      	lsls	r3, r3, #23
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d009      	beq.n	8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a12      	ldr	r2, [pc, #72]	@ (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d004      	beq.n	8002e20 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a11      	ldr	r2, [pc, #68]	@ (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d10c      	bne.n	8002e3a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2280      	movs	r2, #128	@ 0x80
 8002e24:	4393      	bics	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	223d      	movs	r2, #61	@ 0x3d
 8002e3e:	2101      	movs	r1, #1
 8002e40:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	223c      	movs	r2, #60	@ 0x3c
 8002e46:	2100      	movs	r1, #0
 8002e48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b004      	add	sp, #16
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40012c00 	.word	0x40012c00
 8002e58:	ff0fffff 	.word	0xff0fffff
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40014000 	.word	0x40014000

08002e64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e046      	b.n	8002f04 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2288      	movs	r2, #136	@ 0x88
 8002e7a:	589b      	ldr	r3, [r3, r2]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d107      	bne.n	8002e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2284      	movs	r2, #132	@ 0x84
 8002e84:	2100      	movs	r1, #0
 8002e86:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f7fd fdc6 	bl	8000a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2288      	movs	r2, #136	@ 0x88
 8002e94:	2124      	movs	r1, #36	@ 0x24
 8002e96:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	438a      	bics	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f000 faea 	bl	800348c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 f828 	bl	8002f10 <UART_SetConfig>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e01c      	b.n	8002f04 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	490d      	ldr	r1, [pc, #52]	@ (8002f0c <HAL_UART_Init+0xa8>)
 8002ed6:	400a      	ands	r2, r1
 8002ed8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	212a      	movs	r1, #42	@ 0x2a
 8002ee6:	438a      	bics	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	0018      	movs	r0, r3
 8002efe:	f000 fb79 	bl	80035f4 <UART_CheckIdleState>
 8002f02:	0003      	movs	r3, r0
}
 8002f04:	0018      	movs	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b002      	add	sp, #8
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	ffffb7ff 	.word	0xffffb7ff

08002f10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f10:	b5b0      	push	{r4, r5, r7, lr}
 8002f12:	b090      	sub	sp, #64	@ 0x40
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f18:	231a      	movs	r3, #26
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	189b      	adds	r3, r3, r2
 8002f1e:	19db      	adds	r3, r3, r7
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4aaf      	ldr	r2, [pc, #700]	@ (8003200 <UART_SetConfig+0x2f0>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	0019      	movs	r1, r3
 8002f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4aaa      	ldr	r2, [pc, #680]	@ (8003204 <UART_SetConfig+0x2f4>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f60:	68d9      	ldr	r1, [r3, #12]
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	0003      	movs	r3, r0
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4aa4      	ldr	r2, [pc, #656]	@ (8003208 <UART_SetConfig+0x2f8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d004      	beq.n	8002f86 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f82:	4313      	orrs	r3, r2
 8002f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4a9f      	ldr	r2, [pc, #636]	@ (800320c <UART_SetConfig+0x2fc>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	0019      	movs	r1, r3
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa2:	220f      	movs	r2, #15
 8002fa4:	4393      	bics	r3, r2
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002faa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	430b      	orrs	r3, r1
 8002fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a95      	ldr	r2, [pc, #596]	@ (8003210 <UART_SetConfig+0x300>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d131      	bne.n	8003024 <UART_SetConfig+0x114>
 8002fc0:	4b94      	ldr	r3, [pc, #592]	@ (8003214 <UART_SetConfig+0x304>)
 8002fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d01d      	beq.n	8003008 <UART_SetConfig+0xf8>
 8002fcc:	d823      	bhi.n	8003016 <UART_SetConfig+0x106>
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d00c      	beq.n	8002fec <UART_SetConfig+0xdc>
 8002fd2:	d820      	bhi.n	8003016 <UART_SetConfig+0x106>
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <UART_SetConfig+0xce>
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d00e      	beq.n	8002ffa <UART_SetConfig+0xea>
 8002fdc:	e01b      	b.n	8003016 <UART_SetConfig+0x106>
 8002fde:	231b      	movs	r3, #27
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	189b      	adds	r3, r3, r2
 8002fe4:	19db      	adds	r3, r3, r7
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e0b4      	b.n	8003156 <UART_SetConfig+0x246>
 8002fec:	231b      	movs	r3, #27
 8002fee:	2220      	movs	r2, #32
 8002ff0:	189b      	adds	r3, r3, r2
 8002ff2:	19db      	adds	r3, r3, r7
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	701a      	strb	r2, [r3, #0]
 8002ff8:	e0ad      	b.n	8003156 <UART_SetConfig+0x246>
 8002ffa:	231b      	movs	r3, #27
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	189b      	adds	r3, r3, r2
 8003000:	19db      	adds	r3, r3, r7
 8003002:	2204      	movs	r2, #4
 8003004:	701a      	strb	r2, [r3, #0]
 8003006:	e0a6      	b.n	8003156 <UART_SetConfig+0x246>
 8003008:	231b      	movs	r3, #27
 800300a:	2220      	movs	r2, #32
 800300c:	189b      	adds	r3, r3, r2
 800300e:	19db      	adds	r3, r3, r7
 8003010:	2208      	movs	r2, #8
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e09f      	b.n	8003156 <UART_SetConfig+0x246>
 8003016:	231b      	movs	r3, #27
 8003018:	2220      	movs	r2, #32
 800301a:	189b      	adds	r3, r3, r2
 800301c:	19db      	adds	r3, r3, r7
 800301e:	2210      	movs	r2, #16
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	e098      	b.n	8003156 <UART_SetConfig+0x246>
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a7b      	ldr	r2, [pc, #492]	@ (8003218 <UART_SetConfig+0x308>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d131      	bne.n	8003092 <UART_SetConfig+0x182>
 800302e:	4b79      	ldr	r3, [pc, #484]	@ (8003214 <UART_SetConfig+0x304>)
 8003030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003032:	220c      	movs	r2, #12
 8003034:	4013      	ands	r3, r2
 8003036:	2b0c      	cmp	r3, #12
 8003038:	d01d      	beq.n	8003076 <UART_SetConfig+0x166>
 800303a:	d823      	bhi.n	8003084 <UART_SetConfig+0x174>
 800303c:	2b08      	cmp	r3, #8
 800303e:	d00c      	beq.n	800305a <UART_SetConfig+0x14a>
 8003040:	d820      	bhi.n	8003084 <UART_SetConfig+0x174>
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <UART_SetConfig+0x13c>
 8003046:	2b04      	cmp	r3, #4
 8003048:	d00e      	beq.n	8003068 <UART_SetConfig+0x158>
 800304a:	e01b      	b.n	8003084 <UART_SetConfig+0x174>
 800304c:	231b      	movs	r3, #27
 800304e:	2220      	movs	r2, #32
 8003050:	189b      	adds	r3, r3, r2
 8003052:	19db      	adds	r3, r3, r7
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	e07d      	b.n	8003156 <UART_SetConfig+0x246>
 800305a:	231b      	movs	r3, #27
 800305c:	2220      	movs	r2, #32
 800305e:	189b      	adds	r3, r3, r2
 8003060:	19db      	adds	r3, r3, r7
 8003062:	2202      	movs	r2, #2
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	e076      	b.n	8003156 <UART_SetConfig+0x246>
 8003068:	231b      	movs	r3, #27
 800306a:	2220      	movs	r2, #32
 800306c:	189b      	adds	r3, r3, r2
 800306e:	19db      	adds	r3, r3, r7
 8003070:	2204      	movs	r2, #4
 8003072:	701a      	strb	r2, [r3, #0]
 8003074:	e06f      	b.n	8003156 <UART_SetConfig+0x246>
 8003076:	231b      	movs	r3, #27
 8003078:	2220      	movs	r2, #32
 800307a:	189b      	adds	r3, r3, r2
 800307c:	19db      	adds	r3, r3, r7
 800307e:	2208      	movs	r2, #8
 8003080:	701a      	strb	r2, [r3, #0]
 8003082:	e068      	b.n	8003156 <UART_SetConfig+0x246>
 8003084:	231b      	movs	r3, #27
 8003086:	2220      	movs	r2, #32
 8003088:	189b      	adds	r3, r3, r2
 800308a:	19db      	adds	r3, r3, r7
 800308c:	2210      	movs	r2, #16
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	e061      	b.n	8003156 <UART_SetConfig+0x246>
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a61      	ldr	r2, [pc, #388]	@ (800321c <UART_SetConfig+0x30c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d106      	bne.n	80030aa <UART_SetConfig+0x19a>
 800309c:	231b      	movs	r3, #27
 800309e:	2220      	movs	r2, #32
 80030a0:	189b      	adds	r3, r3, r2
 80030a2:	19db      	adds	r3, r3, r7
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e055      	b.n	8003156 <UART_SetConfig+0x246>
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a5c      	ldr	r2, [pc, #368]	@ (8003220 <UART_SetConfig+0x310>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d106      	bne.n	80030c2 <UART_SetConfig+0x1b2>
 80030b4:	231b      	movs	r3, #27
 80030b6:	2220      	movs	r2, #32
 80030b8:	189b      	adds	r3, r3, r2
 80030ba:	19db      	adds	r3, r3, r7
 80030bc:	2200      	movs	r2, #0
 80030be:	701a      	strb	r2, [r3, #0]
 80030c0:	e049      	b.n	8003156 <UART_SetConfig+0x246>
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a50      	ldr	r2, [pc, #320]	@ (8003208 <UART_SetConfig+0x2f8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d13e      	bne.n	800314a <UART_SetConfig+0x23a>
 80030cc:	4b51      	ldr	r3, [pc, #324]	@ (8003214 <UART_SetConfig+0x304>)
 80030ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030d0:	23c0      	movs	r3, #192	@ 0xc0
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	4013      	ands	r3, r2
 80030d6:	22c0      	movs	r2, #192	@ 0xc0
 80030d8:	0112      	lsls	r2, r2, #4
 80030da:	4293      	cmp	r3, r2
 80030dc:	d027      	beq.n	800312e <UART_SetConfig+0x21e>
 80030de:	22c0      	movs	r2, #192	@ 0xc0
 80030e0:	0112      	lsls	r2, r2, #4
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d82a      	bhi.n	800313c <UART_SetConfig+0x22c>
 80030e6:	2280      	movs	r2, #128	@ 0x80
 80030e8:	0112      	lsls	r2, r2, #4
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d011      	beq.n	8003112 <UART_SetConfig+0x202>
 80030ee:	2280      	movs	r2, #128	@ 0x80
 80030f0:	0112      	lsls	r2, r2, #4
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d822      	bhi.n	800313c <UART_SetConfig+0x22c>
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d004      	beq.n	8003104 <UART_SetConfig+0x1f4>
 80030fa:	2280      	movs	r2, #128	@ 0x80
 80030fc:	00d2      	lsls	r2, r2, #3
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00e      	beq.n	8003120 <UART_SetConfig+0x210>
 8003102:	e01b      	b.n	800313c <UART_SetConfig+0x22c>
 8003104:	231b      	movs	r3, #27
 8003106:	2220      	movs	r2, #32
 8003108:	189b      	adds	r3, r3, r2
 800310a:	19db      	adds	r3, r3, r7
 800310c:	2200      	movs	r2, #0
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	e021      	b.n	8003156 <UART_SetConfig+0x246>
 8003112:	231b      	movs	r3, #27
 8003114:	2220      	movs	r2, #32
 8003116:	189b      	adds	r3, r3, r2
 8003118:	19db      	adds	r3, r3, r7
 800311a:	2202      	movs	r2, #2
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	e01a      	b.n	8003156 <UART_SetConfig+0x246>
 8003120:	231b      	movs	r3, #27
 8003122:	2220      	movs	r2, #32
 8003124:	189b      	adds	r3, r3, r2
 8003126:	19db      	adds	r3, r3, r7
 8003128:	2204      	movs	r2, #4
 800312a:	701a      	strb	r2, [r3, #0]
 800312c:	e013      	b.n	8003156 <UART_SetConfig+0x246>
 800312e:	231b      	movs	r3, #27
 8003130:	2220      	movs	r2, #32
 8003132:	189b      	adds	r3, r3, r2
 8003134:	19db      	adds	r3, r3, r7
 8003136:	2208      	movs	r2, #8
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	e00c      	b.n	8003156 <UART_SetConfig+0x246>
 800313c:	231b      	movs	r3, #27
 800313e:	2220      	movs	r2, #32
 8003140:	189b      	adds	r3, r3, r2
 8003142:	19db      	adds	r3, r3, r7
 8003144:	2210      	movs	r2, #16
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	e005      	b.n	8003156 <UART_SetConfig+0x246>
 800314a:	231b      	movs	r3, #27
 800314c:	2220      	movs	r2, #32
 800314e:	189b      	adds	r3, r3, r2
 8003150:	19db      	adds	r3, r3, r7
 8003152:	2210      	movs	r2, #16
 8003154:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a2b      	ldr	r2, [pc, #172]	@ (8003208 <UART_SetConfig+0x2f8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d000      	beq.n	8003162 <UART_SetConfig+0x252>
 8003160:	e0a9      	b.n	80032b6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003162:	231b      	movs	r3, #27
 8003164:	2220      	movs	r2, #32
 8003166:	189b      	adds	r3, r3, r2
 8003168:	19db      	adds	r3, r3, r7
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d015      	beq.n	800319c <UART_SetConfig+0x28c>
 8003170:	dc18      	bgt.n	80031a4 <UART_SetConfig+0x294>
 8003172:	2b04      	cmp	r3, #4
 8003174:	d00d      	beq.n	8003192 <UART_SetConfig+0x282>
 8003176:	dc15      	bgt.n	80031a4 <UART_SetConfig+0x294>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <UART_SetConfig+0x272>
 800317c:	2b02      	cmp	r3, #2
 800317e:	d005      	beq.n	800318c <UART_SetConfig+0x27c>
 8003180:	e010      	b.n	80031a4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003182:	f7fe fca9 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 8003186:	0003      	movs	r3, r0
 8003188:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800318a:	e014      	b.n	80031b6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800318c:	4b25      	ldr	r3, [pc, #148]	@ (8003224 <UART_SetConfig+0x314>)
 800318e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003190:	e011      	b.n	80031b6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003192:	f7fe fc15 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 8003196:	0003      	movs	r3, r0
 8003198:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800319a:	e00c      	b.n	80031b6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800319c:	2380      	movs	r3, #128	@ 0x80
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80031a2:	e008      	b.n	80031b6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80031a8:	231a      	movs	r3, #26
 80031aa:	2220      	movs	r2, #32
 80031ac:	189b      	adds	r3, r3, r2
 80031ae:	19db      	adds	r3, r3, r7
 80031b0:	2201      	movs	r2, #1
 80031b2:	701a      	strb	r2, [r3, #0]
        break;
 80031b4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d100      	bne.n	80031be <UART_SetConfig+0x2ae>
 80031bc:	e14b      	b.n	8003456 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80031be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031c2:	4b19      	ldr	r3, [pc, #100]	@ (8003228 <UART_SetConfig+0x318>)
 80031c4:	0052      	lsls	r2, r2, #1
 80031c6:	5ad3      	ldrh	r3, [r2, r3]
 80031c8:	0019      	movs	r1, r3
 80031ca:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80031cc:	f7fc ff9a 	bl	8000104 <__udivsi3>
 80031d0:	0003      	movs	r3, r0
 80031d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	0013      	movs	r3, r2
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	189b      	adds	r3, r3, r2
 80031de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d305      	bcc.n	80031f0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80031e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d91d      	bls.n	800322c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80031f0:	231a      	movs	r3, #26
 80031f2:	2220      	movs	r2, #32
 80031f4:	189b      	adds	r3, r3, r2
 80031f6:	19db      	adds	r3, r3, r7
 80031f8:	2201      	movs	r2, #1
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e12b      	b.n	8003456 <UART_SetConfig+0x546>
 80031fe:	46c0      	nop			@ (mov r8, r8)
 8003200:	cfff69f3 	.word	0xcfff69f3
 8003204:	ffffcfff 	.word	0xffffcfff
 8003208:	40008000 	.word	0x40008000
 800320c:	11fff4ff 	.word	0x11fff4ff
 8003210:	40013800 	.word	0x40013800
 8003214:	40021000 	.word	0x40021000
 8003218:	40004400 	.word	0x40004400
 800321c:	40004800 	.word	0x40004800
 8003220:	40004c00 	.word	0x40004c00
 8003224:	00f42400 	.word	0x00f42400
 8003228:	08003c4c 	.word	0x08003c4c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800322c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800322e:	61bb      	str	r3, [r7, #24]
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003236:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003238:	4b92      	ldr	r3, [pc, #584]	@ (8003484 <UART_SetConfig+0x574>)
 800323a:	0052      	lsls	r2, r2, #1
 800323c:	5ad3      	ldrh	r3, [r2, r3]
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	69b8      	ldr	r0, [r7, #24]
 800324a:	69f9      	ldr	r1, [r7, #28]
 800324c:	f7fd f8d0 	bl	80003f0 <__aeabi_uldivmod>
 8003250:	0002      	movs	r2, r0
 8003252:	000b      	movs	r3, r1
 8003254:	0e11      	lsrs	r1, r2, #24
 8003256:	021d      	lsls	r5, r3, #8
 8003258:	430d      	orrs	r5, r1
 800325a:	0214      	lsls	r4, r2, #8
 800325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	085b      	lsrs	r3, r3, #1
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68b8      	ldr	r0, [r7, #8]
 800326a:	68f9      	ldr	r1, [r7, #12]
 800326c:	1900      	adds	r0, r0, r4
 800326e:	4169      	adcs	r1, r5
 8003270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	2300      	movs	r3, #0
 8003278:	607b      	str	r3, [r7, #4]
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f7fd f8b7 	bl	80003f0 <__aeabi_uldivmod>
 8003282:	0002      	movs	r2, r0
 8003284:	000b      	movs	r3, r1
 8003286:	0013      	movs	r3, r2
 8003288:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800328a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800328c:	23c0      	movs	r3, #192	@ 0xc0
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	429a      	cmp	r2, r3
 8003292:	d309      	bcc.n	80032a8 <UART_SetConfig+0x398>
 8003294:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003296:	2380      	movs	r3, #128	@ 0x80
 8003298:	035b      	lsls	r3, r3, #13
 800329a:	429a      	cmp	r2, r3
 800329c:	d204      	bcs.n	80032a8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	e0d6      	b.n	8003456 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80032a8:	231a      	movs	r3, #26
 80032aa:	2220      	movs	r2, #32
 80032ac:	189b      	adds	r3, r3, r2
 80032ae:	19db      	adds	r3, r3, r7
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]
 80032b4:	e0cf      	b.n	8003456 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	69da      	ldr	r2, [r3, #28]
 80032ba:	2380      	movs	r3, #128	@ 0x80
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	429a      	cmp	r2, r3
 80032c0:	d000      	beq.n	80032c4 <UART_SetConfig+0x3b4>
 80032c2:	e070      	b.n	80033a6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80032c4:	231b      	movs	r3, #27
 80032c6:	2220      	movs	r2, #32
 80032c8:	189b      	adds	r3, r3, r2
 80032ca:	19db      	adds	r3, r3, r7
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d015      	beq.n	80032fe <UART_SetConfig+0x3ee>
 80032d2:	dc18      	bgt.n	8003306 <UART_SetConfig+0x3f6>
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d00d      	beq.n	80032f4 <UART_SetConfig+0x3e4>
 80032d8:	dc15      	bgt.n	8003306 <UART_SetConfig+0x3f6>
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <UART_SetConfig+0x3d4>
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d005      	beq.n	80032ee <UART_SetConfig+0x3de>
 80032e2:	e010      	b.n	8003306 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e4:	f7fe fbf8 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 80032e8:	0003      	movs	r3, r0
 80032ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80032ec:	e014      	b.n	8003318 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032ee:	4b66      	ldr	r3, [pc, #408]	@ (8003488 <UART_SetConfig+0x578>)
 80032f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80032f2:	e011      	b.n	8003318 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032f4:	f7fe fb64 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 80032f8:	0003      	movs	r3, r0
 80032fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80032fc:	e00c      	b.n	8003318 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032fe:	2380      	movs	r3, #128	@ 0x80
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003304:	e008      	b.n	8003318 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800330a:	231a      	movs	r3, #26
 800330c:	2220      	movs	r2, #32
 800330e:	189b      	adds	r3, r3, r2
 8003310:	19db      	adds	r3, r3, r7
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
        break;
 8003316:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800331a:	2b00      	cmp	r3, #0
 800331c:	d100      	bne.n	8003320 <UART_SetConfig+0x410>
 800331e:	e09a      	b.n	8003456 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003322:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003324:	4b57      	ldr	r3, [pc, #348]	@ (8003484 <UART_SetConfig+0x574>)
 8003326:	0052      	lsls	r2, r2, #1
 8003328:	5ad3      	ldrh	r3, [r2, r3]
 800332a:	0019      	movs	r1, r3
 800332c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800332e:	f7fc fee9 	bl	8000104 <__udivsi3>
 8003332:	0003      	movs	r3, r0
 8003334:	005a      	lsls	r2, r3, #1
 8003336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	085b      	lsrs	r3, r3, #1
 800333c:	18d2      	adds	r2, r2, r3
 800333e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	0019      	movs	r1, r3
 8003344:	0010      	movs	r0, r2
 8003346:	f7fc fedd 	bl	8000104 <__udivsi3>
 800334a:	0003      	movs	r3, r0
 800334c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800334e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003350:	2b0f      	cmp	r3, #15
 8003352:	d921      	bls.n	8003398 <UART_SetConfig+0x488>
 8003354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003356:	2380      	movs	r3, #128	@ 0x80
 8003358:	025b      	lsls	r3, r3, #9
 800335a:	429a      	cmp	r2, r3
 800335c:	d21c      	bcs.n	8003398 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800335e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003360:	b29a      	uxth	r2, r3
 8003362:	200e      	movs	r0, #14
 8003364:	2420      	movs	r4, #32
 8003366:	1903      	adds	r3, r0, r4
 8003368:	19db      	adds	r3, r3, r7
 800336a:	210f      	movs	r1, #15
 800336c:	438a      	bics	r2, r1
 800336e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003372:	085b      	lsrs	r3, r3, #1
 8003374:	b29b      	uxth	r3, r3
 8003376:	2207      	movs	r2, #7
 8003378:	4013      	ands	r3, r2
 800337a:	b299      	uxth	r1, r3
 800337c:	1903      	adds	r3, r0, r4
 800337e:	19db      	adds	r3, r3, r7
 8003380:	1902      	adds	r2, r0, r4
 8003382:	19d2      	adds	r2, r2, r7
 8003384:	8812      	ldrh	r2, [r2, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	1902      	adds	r2, r0, r4
 8003390:	19d2      	adds	r2, r2, r7
 8003392:	8812      	ldrh	r2, [r2, #0]
 8003394:	60da      	str	r2, [r3, #12]
 8003396:	e05e      	b.n	8003456 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003398:	231a      	movs	r3, #26
 800339a:	2220      	movs	r2, #32
 800339c:	189b      	adds	r3, r3, r2
 800339e:	19db      	adds	r3, r3, r7
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]
 80033a4:	e057      	b.n	8003456 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033a6:	231b      	movs	r3, #27
 80033a8:	2220      	movs	r2, #32
 80033aa:	189b      	adds	r3, r3, r2
 80033ac:	19db      	adds	r3, r3, r7
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d015      	beq.n	80033e0 <UART_SetConfig+0x4d0>
 80033b4:	dc18      	bgt.n	80033e8 <UART_SetConfig+0x4d8>
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d00d      	beq.n	80033d6 <UART_SetConfig+0x4c6>
 80033ba:	dc15      	bgt.n	80033e8 <UART_SetConfig+0x4d8>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <UART_SetConfig+0x4b6>
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d005      	beq.n	80033d0 <UART_SetConfig+0x4c0>
 80033c4:	e010      	b.n	80033e8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033c6:	f7fe fb87 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 80033ca:	0003      	movs	r3, r0
 80033cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80033ce:	e014      	b.n	80033fa <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003488 <UART_SetConfig+0x578>)
 80033d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80033d4:	e011      	b.n	80033fa <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033d6:	f7fe faf3 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 80033da:	0003      	movs	r3, r0
 80033dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80033de:	e00c      	b.n	80033fa <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033e0:	2380      	movs	r3, #128	@ 0x80
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80033e6:	e008      	b.n	80033fa <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80033ec:	231a      	movs	r3, #26
 80033ee:	2220      	movs	r2, #32
 80033f0:	189b      	adds	r3, r3, r2
 80033f2:	19db      	adds	r3, r3, r7
 80033f4:	2201      	movs	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
        break;
 80033f8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80033fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d02a      	beq.n	8003456 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003402:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003404:	4b1f      	ldr	r3, [pc, #124]	@ (8003484 <UART_SetConfig+0x574>)
 8003406:	0052      	lsls	r2, r2, #1
 8003408:	5ad3      	ldrh	r3, [r2, r3]
 800340a:	0019      	movs	r1, r3
 800340c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800340e:	f7fc fe79 	bl	8000104 <__udivsi3>
 8003412:	0003      	movs	r3, r0
 8003414:	001a      	movs	r2, r3
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	18d2      	adds	r2, r2, r3
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	0019      	movs	r1, r3
 8003424:	0010      	movs	r0, r2
 8003426:	f7fc fe6d 	bl	8000104 <__udivsi3>
 800342a:	0003      	movs	r3, r0
 800342c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800342e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003430:	2b0f      	cmp	r3, #15
 8003432:	d90a      	bls.n	800344a <UART_SetConfig+0x53a>
 8003434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	025b      	lsls	r3, r3, #9
 800343a:	429a      	cmp	r2, r3
 800343c:	d205      	bcs.n	800344a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800343e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003440:	b29a      	uxth	r2, r3
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60da      	str	r2, [r3, #12]
 8003448:	e005      	b.n	8003456 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800344a:	231a      	movs	r3, #26
 800344c:	2220      	movs	r2, #32
 800344e:	189b      	adds	r3, r3, r2
 8003450:	19db      	adds	r3, r3, r7
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	226a      	movs	r2, #106	@ 0x6a
 800345a:	2101      	movs	r1, #1
 800345c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	2268      	movs	r2, #104	@ 0x68
 8003462:	2101      	movs	r1, #1
 8003464:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003468:	2200      	movs	r2, #0
 800346a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800346c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346e:	2200      	movs	r2, #0
 8003470:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003472:	231a      	movs	r3, #26
 8003474:	2220      	movs	r2, #32
 8003476:	189b      	adds	r3, r3, r2
 8003478:	19db      	adds	r3, r3, r7
 800347a:	781b      	ldrb	r3, [r3, #0]
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	b010      	add	sp, #64	@ 0x40
 8003482:	bdb0      	pop	{r4, r5, r7, pc}
 8003484:	08003c4c 	.word	0x08003c4c
 8003488:	00f42400 	.word	0x00f42400

0800348c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003498:	2208      	movs	r2, #8
 800349a:	4013      	ands	r3, r2
 800349c:	d00b      	beq.n	80034b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	4a4a      	ldr	r2, [pc, #296]	@ (80035d0 <UART_AdvFeatureConfig+0x144>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	0019      	movs	r1, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ba:	2201      	movs	r2, #1
 80034bc:	4013      	ands	r3, r2
 80034be:	d00b      	beq.n	80034d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4a43      	ldr	r2, [pc, #268]	@ (80035d4 <UART_AdvFeatureConfig+0x148>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	0019      	movs	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034dc:	2202      	movs	r2, #2
 80034de:	4013      	ands	r3, r2
 80034e0:	d00b      	beq.n	80034fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	4a3b      	ldr	r2, [pc, #236]	@ (80035d8 <UART_AdvFeatureConfig+0x14c>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	0019      	movs	r1, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fe:	2204      	movs	r2, #4
 8003500:	4013      	ands	r3, r2
 8003502:	d00b      	beq.n	800351c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4a34      	ldr	r2, [pc, #208]	@ (80035dc <UART_AdvFeatureConfig+0x150>)
 800350c:	4013      	ands	r3, r2
 800350e:	0019      	movs	r1, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003520:	2210      	movs	r2, #16
 8003522:	4013      	ands	r3, r2
 8003524:	d00b      	beq.n	800353e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a2c      	ldr	r2, [pc, #176]	@ (80035e0 <UART_AdvFeatureConfig+0x154>)
 800352e:	4013      	ands	r3, r2
 8003530:	0019      	movs	r1, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003542:	2220      	movs	r2, #32
 8003544:	4013      	ands	r3, r2
 8003546:	d00b      	beq.n	8003560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	4a25      	ldr	r2, [pc, #148]	@ (80035e4 <UART_AdvFeatureConfig+0x158>)
 8003550:	4013      	ands	r3, r2
 8003552:	0019      	movs	r1, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003564:	2240      	movs	r2, #64	@ 0x40
 8003566:	4013      	ands	r3, r2
 8003568:	d01d      	beq.n	80035a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4a1d      	ldr	r2, [pc, #116]	@ (80035e8 <UART_AdvFeatureConfig+0x15c>)
 8003572:	4013      	ands	r3, r2
 8003574:	0019      	movs	r1, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003586:	2380      	movs	r3, #128	@ 0x80
 8003588:	035b      	lsls	r3, r3, #13
 800358a:	429a      	cmp	r2, r3
 800358c:	d10b      	bne.n	80035a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	4a15      	ldr	r2, [pc, #84]	@ (80035ec <UART_AdvFeatureConfig+0x160>)
 8003596:	4013      	ands	r3, r2
 8003598:	0019      	movs	r1, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035aa:	2280      	movs	r2, #128	@ 0x80
 80035ac:	4013      	ands	r3, r2
 80035ae:	d00b      	beq.n	80035c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4a0e      	ldr	r2, [pc, #56]	@ (80035f0 <UART_AdvFeatureConfig+0x164>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	0019      	movs	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	605a      	str	r2, [r3, #4]
  }
}
 80035c8:	46c0      	nop			@ (mov r8, r8)
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b002      	add	sp, #8
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	ffff7fff 	.word	0xffff7fff
 80035d4:	fffdffff 	.word	0xfffdffff
 80035d8:	fffeffff 	.word	0xfffeffff
 80035dc:	fffbffff 	.word	0xfffbffff
 80035e0:	ffffefff 	.word	0xffffefff
 80035e4:	ffffdfff 	.word	0xffffdfff
 80035e8:	ffefffff 	.word	0xffefffff
 80035ec:	ff9fffff 	.word	0xff9fffff
 80035f0:	fff7ffff 	.word	0xfff7ffff

080035f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b092      	sub	sp, #72	@ 0x48
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2290      	movs	r2, #144	@ 0x90
 8003600:	2100      	movs	r1, #0
 8003602:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003604:	f7fd fb2e 	bl	8000c64 <HAL_GetTick>
 8003608:	0003      	movs	r3, r0
 800360a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2208      	movs	r2, #8
 8003614:	4013      	ands	r3, r2
 8003616:	2b08      	cmp	r3, #8
 8003618:	d12d      	bne.n	8003676 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800361a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800361c:	2280      	movs	r2, #128	@ 0x80
 800361e:	0391      	lsls	r1, r2, #14
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	4a47      	ldr	r2, [pc, #284]	@ (8003740 <UART_CheckIdleState+0x14c>)
 8003624:	9200      	str	r2, [sp, #0]
 8003626:	2200      	movs	r2, #0
 8003628:	f000 f88e 	bl	8003748 <UART_WaitOnFlagUntilTimeout>
 800362c:	1e03      	subs	r3, r0, #0
 800362e:	d022      	beq.n	8003676 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003630:	f3ef 8310 	mrs	r3, PRIMASK
 8003634:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003638:	63bb      	str	r3, [r7, #56]	@ 0x38
 800363a:	2301      	movs	r3, #1
 800363c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003640:	f383 8810 	msr	PRIMASK, r3
}
 8003644:	46c0      	nop			@ (mov r8, r8)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2180      	movs	r1, #128	@ 0x80
 8003652:	438a      	bics	r2, r1
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003658:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365c:	f383 8810 	msr	PRIMASK, r3
}
 8003660:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2288      	movs	r2, #136	@ 0x88
 8003666:	2120      	movs	r1, #32
 8003668:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2284      	movs	r2, #132	@ 0x84
 800366e:	2100      	movs	r1, #0
 8003670:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e060      	b.n	8003738 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2204      	movs	r2, #4
 800367e:	4013      	ands	r3, r2
 8003680:	2b04      	cmp	r3, #4
 8003682:	d146      	bne.n	8003712 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003686:	2280      	movs	r2, #128	@ 0x80
 8003688:	03d1      	lsls	r1, r2, #15
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4a2c      	ldr	r2, [pc, #176]	@ (8003740 <UART_CheckIdleState+0x14c>)
 800368e:	9200      	str	r2, [sp, #0]
 8003690:	2200      	movs	r2, #0
 8003692:	f000 f859 	bl	8003748 <UART_WaitOnFlagUntilTimeout>
 8003696:	1e03      	subs	r3, r0, #0
 8003698:	d03b      	beq.n	8003712 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800369a:	f3ef 8310 	mrs	r3, PRIMASK
 800369e:	60fb      	str	r3, [r7, #12]
  return(result);
 80036a0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80036a4:	2301      	movs	r3, #1
 80036a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f383 8810 	msr	PRIMASK, r3
}
 80036ae:	46c0      	nop			@ (mov r8, r8)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4922      	ldr	r1, [pc, #136]	@ (8003744 <UART_CheckIdleState+0x150>)
 80036bc:	400a      	ands	r2, r1
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f383 8810 	msr	PRIMASK, r3
}
 80036ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036cc:	f3ef 8310 	mrs	r3, PRIMASK
 80036d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80036d2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80036d6:	2301      	movs	r3, #1
 80036d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f383 8810 	msr	PRIMASK, r3
}
 80036e0:	46c0      	nop			@ (mov r8, r8)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2101      	movs	r1, #1
 80036ee:	438a      	bics	r2, r1
 80036f0:	609a      	str	r2, [r3, #8]
 80036f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	f383 8810 	msr	PRIMASK, r3
}
 80036fc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	228c      	movs	r2, #140	@ 0x8c
 8003702:	2120      	movs	r1, #32
 8003704:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2284      	movs	r2, #132	@ 0x84
 800370a:	2100      	movs	r1, #0
 800370c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e012      	b.n	8003738 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2288      	movs	r2, #136	@ 0x88
 8003716:	2120      	movs	r1, #32
 8003718:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	228c      	movs	r2, #140	@ 0x8c
 800371e:	2120      	movs	r1, #32
 8003720:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2284      	movs	r2, #132	@ 0x84
 8003732:	2100      	movs	r1, #0
 8003734:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	b010      	add	sp, #64	@ 0x40
 800373e:	bd80      	pop	{r7, pc}
 8003740:	01ffffff 	.word	0x01ffffff
 8003744:	fffffedf 	.word	0xfffffedf

08003748 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	1dfb      	adds	r3, r7, #7
 8003756:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003758:	e051      	b.n	80037fe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	3301      	adds	r3, #1
 800375e:	d04e      	beq.n	80037fe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003760:	f7fd fa80 	bl	8000c64 <HAL_GetTick>
 8003764:	0002      	movs	r2, r0
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	429a      	cmp	r2, r3
 800376e:	d302      	bcc.n	8003776 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e051      	b.n	800381e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2204      	movs	r2, #4
 8003782:	4013      	ands	r3, r2
 8003784:	d03b      	beq.n	80037fe <UART_WaitOnFlagUntilTimeout+0xb6>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b80      	cmp	r3, #128	@ 0x80
 800378a:	d038      	beq.n	80037fe <UART_WaitOnFlagUntilTimeout+0xb6>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b40      	cmp	r3, #64	@ 0x40
 8003790:	d035      	beq.n	80037fe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	2208      	movs	r2, #8
 800379a:	4013      	ands	r3, r2
 800379c:	2b08      	cmp	r3, #8
 800379e:	d111      	bne.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2208      	movs	r2, #8
 80037a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	0018      	movs	r0, r3
 80037ac:	f000 f83c 	bl	8003828 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2290      	movs	r2, #144	@ 0x90
 80037b4:	2108      	movs	r1, #8
 80037b6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2284      	movs	r2, #132	@ 0x84
 80037bc:	2100      	movs	r1, #0
 80037be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e02c      	b.n	800381e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	69da      	ldr	r2, [r3, #28]
 80037ca:	2380      	movs	r3, #128	@ 0x80
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	401a      	ands	r2, r3
 80037d0:	2380      	movs	r3, #128	@ 0x80
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d112      	bne.n	80037fe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2280      	movs	r2, #128	@ 0x80
 80037de:	0112      	lsls	r2, r2, #4
 80037e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	0018      	movs	r0, r3
 80037e6:	f000 f81f 	bl	8003828 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2290      	movs	r2, #144	@ 0x90
 80037ee:	2120      	movs	r1, #32
 80037f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2284      	movs	r2, #132	@ 0x84
 80037f6:	2100      	movs	r1, #0
 80037f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e00f      	b.n	800381e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	4013      	ands	r3, r2
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	425a      	negs	r2, r3
 800380e:	4153      	adcs	r3, r2
 8003810:	b2db      	uxtb	r3, r3
 8003812:	001a      	movs	r2, r3
 8003814:	1dfb      	adds	r3, r7, #7
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d09e      	beq.n	800375a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	0018      	movs	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08e      	sub	sp, #56	@ 0x38
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003830:	f3ef 8310 	mrs	r3, PRIMASK
 8003834:	617b      	str	r3, [r7, #20]
  return(result);
 8003836:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003838:	637b      	str	r3, [r7, #52]	@ 0x34
 800383a:	2301      	movs	r3, #1
 800383c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	f383 8810 	msr	PRIMASK, r3
}
 8003844:	46c0      	nop			@ (mov r8, r8)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4926      	ldr	r1, [pc, #152]	@ (80038ec <UART_EndRxTransfer+0xc4>)
 8003852:	400a      	ands	r2, r1
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003858:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	f383 8810 	msr	PRIMASK, r3
}
 8003860:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003862:	f3ef 8310 	mrs	r3, PRIMASK
 8003866:	623b      	str	r3, [r7, #32]
  return(result);
 8003868:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800386a:	633b      	str	r3, [r7, #48]	@ 0x30
 800386c:	2301      	movs	r3, #1
 800386e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003872:	f383 8810 	msr	PRIMASK, r3
}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	491b      	ldr	r1, [pc, #108]	@ (80038f0 <UART_EndRxTransfer+0xc8>)
 8003884:	400a      	ands	r2, r1
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388e:	f383 8810 	msr	PRIMASK, r3
}
 8003892:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003898:	2b01      	cmp	r3, #1
 800389a:	d118      	bne.n	80038ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389c:	f3ef 8310 	mrs	r3, PRIMASK
 80038a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80038a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038a6:	2301      	movs	r3, #1
 80038a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f383 8810 	msr	PRIMASK, r3
}
 80038b0:	46c0      	nop			@ (mov r8, r8)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2110      	movs	r1, #16
 80038be:	438a      	bics	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f383 8810 	msr	PRIMASK, r3
}
 80038cc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	228c      	movs	r2, #140	@ 0x8c
 80038d2:	2120      	movs	r1, #32
 80038d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b00e      	add	sp, #56	@ 0x38
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	fffffedf 	.word	0xfffffedf
 80038f0:	effffffe 	.word	0xeffffffe

080038f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2284      	movs	r2, #132	@ 0x84
 8003900:	5c9b      	ldrb	r3, [r3, r2]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_UARTEx_DisableFifoMode+0x16>
 8003906:	2302      	movs	r3, #2
 8003908:	e027      	b.n	800395a <HAL_UARTEx_DisableFifoMode+0x66>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2284      	movs	r2, #132	@ 0x84
 800390e:	2101      	movs	r1, #1
 8003910:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2288      	movs	r2, #136	@ 0x88
 8003916:	2124      	movs	r1, #36	@ 0x24
 8003918:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2101      	movs	r1, #1
 800392e:	438a      	bics	r2, r1
 8003930:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4a0b      	ldr	r2, [pc, #44]	@ (8003964 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003936:	4013      	ands	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2288      	movs	r2, #136	@ 0x88
 800394c:	2120      	movs	r1, #32
 800394e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2284      	movs	r2, #132	@ 0x84
 8003954:	2100      	movs	r1, #0
 8003956:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	0018      	movs	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	b004      	add	sp, #16
 8003960:	bd80      	pop	{r7, pc}
 8003962:	46c0      	nop			@ (mov r8, r8)
 8003964:	dfffffff 	.word	0xdfffffff

08003968 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2284      	movs	r2, #132	@ 0x84
 8003976:	5c9b      	ldrb	r3, [r3, r2]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800397c:	2302      	movs	r3, #2
 800397e:	e02e      	b.n	80039de <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2284      	movs	r2, #132	@ 0x84
 8003984:	2101      	movs	r1, #1
 8003986:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2288      	movs	r2, #136	@ 0x88
 800398c:	2124      	movs	r1, #36	@ 0x24
 800398e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2101      	movs	r1, #1
 80039a4:	438a      	bics	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	08d9      	lsrs	r1, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	0018      	movs	r0, r3
 80039c0:	f000 f854 	bl	8003a6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2288      	movs	r2, #136	@ 0x88
 80039d0:	2120      	movs	r1, #32
 80039d2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2284      	movs	r2, #132	@ 0x84
 80039d8:	2100      	movs	r1, #0
 80039da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	0018      	movs	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b004      	add	sp, #16
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2284      	movs	r2, #132	@ 0x84
 80039f6:	5c9b      	ldrb	r3, [r3, r2]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e02f      	b.n	8003a60 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2284      	movs	r2, #132	@ 0x84
 8003a04:	2101      	movs	r1, #1
 8003a06:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2288      	movs	r2, #136	@ 0x88
 8003a0c:	2124      	movs	r1, #36	@ 0x24
 8003a0e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2101      	movs	r1, #1
 8003a24:	438a      	bics	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8003a68 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	0019      	movs	r1, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	0018      	movs	r0, r3
 8003a42:	f000 f813 	bl	8003a6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2288      	movs	r2, #136	@ 0x88
 8003a52:	2120      	movs	r1, #32
 8003a54:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2284      	movs	r2, #132	@ 0x84
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	0018      	movs	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b004      	add	sp, #16
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	f1ffffff 	.word	0xf1ffffff

08003a6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d108      	bne.n	8003a8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	226a      	movs	r2, #106	@ 0x6a
 8003a80:	2101      	movs	r1, #1
 8003a82:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2268      	movs	r2, #104	@ 0x68
 8003a88:	2101      	movs	r1, #1
 8003a8a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003a8c:	e043      	b.n	8003b16 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003a8e:	260f      	movs	r6, #15
 8003a90:	19bb      	adds	r3, r7, r6
 8003a92:	2208      	movs	r2, #8
 8003a94:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a96:	200e      	movs	r0, #14
 8003a98:	183b      	adds	r3, r7, r0
 8003a9a:	2208      	movs	r2, #8
 8003a9c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	0e5b      	lsrs	r3, r3, #25
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	240d      	movs	r4, #13
 8003aaa:	193b      	adds	r3, r7, r4
 8003aac:	2107      	movs	r1, #7
 8003aae:	400a      	ands	r2, r1
 8003ab0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	0f5b      	lsrs	r3, r3, #29
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	250c      	movs	r5, #12
 8003abe:	197b      	adds	r3, r7, r5
 8003ac0:	2107      	movs	r1, #7
 8003ac2:	400a      	ands	r2, r1
 8003ac4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ac6:	183b      	adds	r3, r7, r0
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	197a      	adds	r2, r7, r5
 8003acc:	7812      	ldrb	r2, [r2, #0]
 8003ace:	4914      	ldr	r1, [pc, #80]	@ (8003b20 <UARTEx_SetNbDataToProcess+0xb4>)
 8003ad0:	5c8a      	ldrb	r2, [r1, r2]
 8003ad2:	435a      	muls	r2, r3
 8003ad4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003ad6:	197b      	adds	r3, r7, r5
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	4a12      	ldr	r2, [pc, #72]	@ (8003b24 <UARTEx_SetNbDataToProcess+0xb8>)
 8003adc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ade:	0019      	movs	r1, r3
 8003ae0:	f7fc fb9a 	bl	8000218 <__divsi3>
 8003ae4:	0003      	movs	r3, r0
 8003ae6:	b299      	uxth	r1, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	226a      	movs	r2, #106	@ 0x6a
 8003aec:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003aee:	19bb      	adds	r3, r7, r6
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	193a      	adds	r2, r7, r4
 8003af4:	7812      	ldrb	r2, [r2, #0]
 8003af6:	490a      	ldr	r1, [pc, #40]	@ (8003b20 <UARTEx_SetNbDataToProcess+0xb4>)
 8003af8:	5c8a      	ldrb	r2, [r1, r2]
 8003afa:	435a      	muls	r2, r3
 8003afc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003afe:	193b      	adds	r3, r7, r4
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	4a08      	ldr	r2, [pc, #32]	@ (8003b24 <UARTEx_SetNbDataToProcess+0xb8>)
 8003b04:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b06:	0019      	movs	r1, r3
 8003b08:	f7fc fb86 	bl	8000218 <__divsi3>
 8003b0c:	0003      	movs	r3, r0
 8003b0e:	b299      	uxth	r1, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2268      	movs	r2, #104	@ 0x68
 8003b14:	5299      	strh	r1, [r3, r2]
}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	b005      	add	sp, #20
 8003b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b1e:	46c0      	nop			@ (mov r8, r8)
 8003b20:	08003c64 	.word	0x08003c64
 8003b24:	08003c6c 	.word	0x08003c6c

08003b28 <memset>:
 8003b28:	0003      	movs	r3, r0
 8003b2a:	1882      	adds	r2, r0, r2
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d100      	bne.n	8003b32 <memset+0xa>
 8003b30:	4770      	bx	lr
 8003b32:	7019      	strb	r1, [r3, #0]
 8003b34:	3301      	adds	r3, #1
 8003b36:	e7f9      	b.n	8003b2c <memset+0x4>

08003b38 <__libc_init_array>:
 8003b38:	b570      	push	{r4, r5, r6, lr}
 8003b3a:	2600      	movs	r6, #0
 8003b3c:	4c0c      	ldr	r4, [pc, #48]	@ (8003b70 <__libc_init_array+0x38>)
 8003b3e:	4d0d      	ldr	r5, [pc, #52]	@ (8003b74 <__libc_init_array+0x3c>)
 8003b40:	1b64      	subs	r4, r4, r5
 8003b42:	10a4      	asrs	r4, r4, #2
 8003b44:	42a6      	cmp	r6, r4
 8003b46:	d109      	bne.n	8003b5c <__libc_init_array+0x24>
 8003b48:	2600      	movs	r6, #0
 8003b4a:	f000 f819 	bl	8003b80 <_init>
 8003b4e:	4c0a      	ldr	r4, [pc, #40]	@ (8003b78 <__libc_init_array+0x40>)
 8003b50:	4d0a      	ldr	r5, [pc, #40]	@ (8003b7c <__libc_init_array+0x44>)
 8003b52:	1b64      	subs	r4, r4, r5
 8003b54:	10a4      	asrs	r4, r4, #2
 8003b56:	42a6      	cmp	r6, r4
 8003b58:	d105      	bne.n	8003b66 <__libc_init_array+0x2e>
 8003b5a:	bd70      	pop	{r4, r5, r6, pc}
 8003b5c:	00b3      	lsls	r3, r6, #2
 8003b5e:	58eb      	ldr	r3, [r5, r3]
 8003b60:	4798      	blx	r3
 8003b62:	3601      	adds	r6, #1
 8003b64:	e7ee      	b.n	8003b44 <__libc_init_array+0xc>
 8003b66:	00b3      	lsls	r3, r6, #2
 8003b68:	58eb      	ldr	r3, [r5, r3]
 8003b6a:	4798      	blx	r3
 8003b6c:	3601      	adds	r6, #1
 8003b6e:	e7f2      	b.n	8003b56 <__libc_init_array+0x1e>
 8003b70:	08003c7c 	.word	0x08003c7c
 8003b74:	08003c7c 	.word	0x08003c7c
 8003b78:	08003c80 	.word	0x08003c80
 8003b7c:	08003c7c 	.word	0x08003c7c

08003b80 <_init>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	46c0      	nop			@ (mov r8, r8)
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr

08003b8c <_fini>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	46c0      	nop			@ (mov r8, r8)
 8003b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b92:	bc08      	pop	{r3}
 8003b94:	469e      	mov	lr, r3
 8003b96:	4770      	bx	lr
